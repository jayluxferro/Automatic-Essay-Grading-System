digraph "CFG forar.com.hjg.pngj.ChunkSeqSkipping.postProcessChunk(Lar\/com\/hjg\/pngj\/ChunkReader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r1 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r2 I:ar.com.hjg.pngj.ChunkReader)\l ar.com.hjg.pngj.ChunkSeqReader.postProcessChunk(ar.com.hjg.pngj.ChunkReader):void type: SUPER \l0x0003: IGET  (r0 I:java.util.List\<ar.com.hjg.pngj.chunks.ChunkRaw\>) = (r1 I:ar.com.hjg.pngj.ChunkSeqSkipping) ar.com.hjg.pngj.ChunkSeqSkipping.chunks java.util.List \l0x0005: INVOKE  (r2 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r2 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0009: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqSkipping.postProcessChunk((r1 'this' I:ar.com.hjg.pngj.ChunkSeqSkipping A[IMMUTABLE_TYPE, THIS]), (r2 I:ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

