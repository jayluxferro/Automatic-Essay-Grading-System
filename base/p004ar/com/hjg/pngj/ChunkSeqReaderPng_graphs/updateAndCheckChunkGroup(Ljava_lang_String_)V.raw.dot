digraph "CFG forar.com.hjg.pngj.ChunkSeqReaderPng.updateAndCheckChunkGroup(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"IHDR\" \l0x0002: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0013: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"unexpected chunk \" \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0024: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: CONST_STR  (r0 I:java.lang.String) =  \"PLTE\" \l0x002a: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x002e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0055 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0051 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x003c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0041: CONST_STR  (r2 I:java.lang.String) =  \"unexpected chunk \" \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0049: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004d: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0052: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: CONST_STR  (r0 I:java.lang.String) =  \"IDAT\" \l0x0057: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x005b: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0080 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|0x005e: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|0x0060: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:24:0x0069 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0064|0x0064: IF  (r0 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:24:0x0069 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0066|0x0066: IPUT  (r2 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0069|0x0069: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x006b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006d: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0070: CONST_STR  (r2 I:java.lang.String) =  \"unexpected chunk \" \l0x0072: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0075: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0078: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007c: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x007f|0x007f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0080|0x0080: CONST_STR  (r0 I:java.lang.String) =  \"IEND\" \l0x0082: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0086|0x0086: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00a7 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0088|0x0088: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_29 [shape=record,label="{29\:\ 0x008a|0x008a: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:31:0x0090 \l}"];
Node_30 [shape=record,label="{30\:\ 0x008c|0x008c: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x008d: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_31 [shape=record,label="{31\:\ 0x0090|0x0090: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0092: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0094: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0097: CONST_STR  (r2 I:java.lang.String) =  \"unexpected chunk \" \l0x0099: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009c: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009f: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a3: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a6|0x00a6: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a7|0x00a7: IGET  (r4 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a9|0x00a9: IF  (r4 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:36:0x00ae \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ab|0x00ab: IPUT  (r1 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ae|0x00ae: IGET  (r4 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l0x00b0: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b1|0x00b1: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:39:0x00b6 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b3|0x00b3: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b6|0x00b6: CONST  (r4 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x00b7: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l}"];
Node_40 [shape=record,label="{40\:\ 0x00b9|0x00b9: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.ChunkSeqReaderPng.updateAndCheckChunkGroup((r3 'this' I:ar.com.hjg.pngj.ChunkSeqReaderPng A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_40;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_40;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_40;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_40;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_39 -> Node_40;
}

