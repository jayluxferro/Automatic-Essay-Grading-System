digraph "CFG forar.com.hjg.pngj.ChunkSeqReaderPng.\<init\>(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: IPUT  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksList)\l  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.chunksList ar.com.hjg.pngj.chunks.ChunksList \l0x0009: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000b: IPUT  (r0 I:long), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.bytesChunksLoaded long \l0x000d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: IPUT  (r2 I:boolean), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.checkCrc boolean \l0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: IPUT  (r2 I:boolean), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.includeNonBufferedChunks boolean \l0x0013: NEW_INSTANCE  (r2 I:java.util.HashSet) =  java.util.HashSet \l0x0015: INVOKE  (r2 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0018: IPUT  \l  (r2 I:java.util.Set\<java.lang.String\>)\l  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.chunksToSkip java.util.Set \l0x001a: IPUT  (r0 I:long), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxTotalBytesRead long \l0x001c: IPUT  (r0 I:long), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.skipChunkMaxSize long \l0x001e: IPUT  (r0 I:long), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxBytesMetadata long \l0x0020: SGET  (r0 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour) =  ar.com.hjg.pngj.chunks.ChunkLoadBehaviour.LOAD_CHUNK_ALWAYS ar.com.hjg.pngj.chunks.ChunkLoadBehaviour \l0x0022: IPUT  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour)\l  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.chunkLoadBehaviour ar.com.hjg.pngj.chunks.ChunkLoadBehaviour \l0x0024: IPUT  (r4 I:boolean), (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.callbackMode boolean \l0x0026: NEW_INSTANCE  (r4 I:ar.com.hjg.pngj.chunks.ChunkFactory) =  ar.com.hjg.pngj.chunks.ChunkFactory \l0x0028: INVOKE  (r4 I:ar.com.hjg.pngj.chunks.ChunkFactory) ar.com.hjg.pngj.chunks.ChunkFactory.\<init\>():void type: DIRECT \l0x002b: IPUT  \l  (r4 I:ar.com.hjg.pngj.IChunkFactory)\l  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.chunkFactory ar.com.hjg.pngj.IChunkFactory \l}"];
Node_1 [shape=record,label="{1\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkSeqReaderPng.\<init\>((r3 'this' I:ar.com.hjg.pngj.ChunkSeqReaderPng A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

