digraph "CFG forar.com.hjg.pngj.ChunkSeqReaderPng.shouldSkipContent(ILjava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r9 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r10 I:int)\l  (r11 I:java.lang.String)\l ar.com.hjg.pngj.ChunkSeqReader.shouldSkipContent(int, java.lang.String):boolean type: SUPER \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = (r11 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.isCritical(java.lang.String):boolean type: STATIC \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r3 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxTotalBytesRead long \l0x0012: CONST  (r5 I:?[long, double]) = (0 ?[long, double]) \l0x0014: CMP_L  (r0 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0052 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: CAST  (r3 I:long) = (long) (r10 I:int) \l0x0019: INVOKE  (r7 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getBytesCount():long type: VIRTUAL \l0x001d: ARITH  (r3 I:long) = (r3 I:long) + (r7 I:long) \l0x001e: IGET  (r7 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxTotalBytesRead long \l0x0020: CMP_L  (r0 I:int) = (r3 I:long), (r7 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: NEW_INSTANCE  (r11 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0027: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0029: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002c: CONST_STR  (r1 I:java.lang.String) =  \"Maximum total bytes to read exceeeded: \" \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: IGET  (r1 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxTotalBytesRead long \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0036: CONST_STR  (r1 I:java.lang.String) =  \" offset:\" \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r1 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getBytesCount():long type: VIRTUAL \l0x003f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0042: CONST_STR  (r1 I:java.lang.String) =  \" len=\" \l0x0044: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x004a: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004e: INVOKE  \l  (r11 I:ar.com.hjg.pngj.PngjInputException)\l  (r10 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|0x0051: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IGET  (r0 I:java.util.Set\<java.lang.String\>) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.chunksToSkip java.util.Set \l0x0054: INVOKE  (r0 I:boolean) = (r0 I:java.util.Set), (r11 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|0x0058: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x005b \l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|0x005a: RETURN  (r1 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005b|0x005b: IGET  (r3 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.skipChunkMaxSize long \l0x005d: CMP_L  (r0 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: CAST  (r3 I:long) = (long) (r10 I:int) \l0x0062: IGET  (r7 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.skipChunkMaxSize long \l0x0064: CMP_L  (r0 I:int) = (r3 I:long), (r7 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|0x0068: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0069|0x0069: IGET  (r3 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxBytesMetadata long \l0x006b: CMP_L  (r0 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:26:0x007a \l}"];
Node_23 [shape=record,label="{23\:\ 0x006f|0x006f: CAST  (r3 I:long) = (long) (r10 I:int) \l0x0070: IGET  (r5 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.maxBytesMetadata long \l0x0072: IGET  (r7 I:long) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.bytesChunksLoaded long \l0x0074: ARITH  (r5 I:long) = (r5 I:long) \- (r7 I:long) \l0x0075: CMP_L  (r10 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|0x0077: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:26:0x007a \l}"];
Node_25 [shape=record,label="{25\:\ 0x0079|0x0079: RETURN  (r1 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x007a|0x007a: SGET  (r10 I:int[]) =  ar.com.hjg.pngj.ChunkSeqReaderPng.1.$SwitchMap$ar$com$hjg$pngj$chunks$ChunkLoadBehaviour int[] \l0x007c: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour) = (r9 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.chunkLoadBehaviour ar.com.hjg.pngj.chunks.ChunkLoadBehaviour \l0x007e: INVOKE  (r0 I:int) = (r0 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour) ar.com.hjg.pngj.chunks.ChunkLoadBehaviour.ordinal():int type: VIRTUAL \l0x0082: AGET  (r10 I:?[int, float]) = (r10 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0084|0x0084: SWITCH  \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2] t:[0x0089, 0x0088] \l}"];
Node_29 [shape=record,label="{29\:\ 0x0088|0x0088: RETURN  (r1 I:boolean) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0089|0x0089: INVOKE  (r10 I:boolean) = (r11 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.isSafeToCopy(java.lang.String):boolean type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x008d|0x008d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0090 \l}"];
Node_32 [shape=record,label="{32\:\ 0x008f|0x008f: RETURN  (r1 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0090|0x0090: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.ChunkSeqReaderPng.shouldSkipContent((r9 'this' I:ar.com.hjg.pngj.ChunkSeqReaderPng A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30;
Node_27 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
}

