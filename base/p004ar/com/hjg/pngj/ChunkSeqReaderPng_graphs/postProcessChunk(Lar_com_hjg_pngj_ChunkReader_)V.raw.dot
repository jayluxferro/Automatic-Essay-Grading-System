digraph "CFG forar.com.hjg.pngj.ChunkSeqReaderPng.postProcessChunk(Lar\/com\/hjg\/pngj\/ChunkReader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r3 I:ar.com.hjg.pngj.ChunkReader)\l ar.com.hjg.pngj.ChunkSeqReader.postProcessChunk(ar.com.hjg.pngj.ChunkReader):void type: SUPER \l0x0003: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r3 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0007: IGET  (r0 I:java.lang.String) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.id java.lang.String \l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"IHDR\" \l0x000b: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) =  ar.com.hjg.pngj.chunks.PngChunkIHDR \l0x0013: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunkIHDR)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIHDR.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0017: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r3 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x001b: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunkIHDR)\l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l ar.com.hjg.pngj.chunks.PngChunkIHDR.parseFromRaw(ar.com.hjg.pngj.chunks.ChunkRaw):void type: VIRTUAL \l0x001e: INVOKE  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r0 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.createImageInfo():ar.com.hjg.pngj.ImageInfo type: VIRTUAL \l0x0022: IPUT  \l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.imageInfo ar.com.hjg.pngj.ImageInfo \l0x0024: INVOKE  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.isInterlaced():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.Deinterlacer) =  ar.com.hjg.pngj.Deinterlacer \l0x002c: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.imageInfo ar.com.hjg.pngj.ImageInfo \l0x002e: INVOKE  \l  (r0 I:ar.com.hjg.pngj.Deinterlacer)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.Deinterlacer.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0031: IPUT  \l  (r0 I:ar.com.hjg.pngj.Deinterlacer)\l  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.deinterlacer ar.com.hjg.pngj.Deinterlacer \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.chunks.ChunksList) =  ar.com.hjg.pngj.chunks.ChunksList \l0x0035: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.imageInfo ar.com.hjg.pngj.ImageInfo \l0x0037: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksList)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.ChunksList.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x003a: IPUT  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksList)\l  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l ar.com.hjg.pngj.ChunkSeqReaderPng.chunksList ar.com.hjg.pngj.chunks.ChunksList \l}"];
Node_6 [shape=record,label="{6\:\ 0x003c|0x003c: IGET  (r0 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) = (r3 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.mode ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l0x003e: SGET  (r1 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) =  ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0046 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: IGET  (r0 I:boolean) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.includeNonBufferedChunks boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x005b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: IGET  (r0 I:ar.com.hjg.pngj.IChunkFactory) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.chunkFactory ar.com.hjg.pngj.IChunkFactory \l0x0048: INVOKE  (r3 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r3 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x004c: INVOKE  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getImageInfo():ar.com.hjg.pngj.ImageInfo type: VIRTUAL \l0x0050: INVOKE  (r3 I:ar.com.hjg.pngj.chunks.PngChunk) = \l  (r0 I:ar.com.hjg.pngj.IChunkFactory)\l  (r3 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.IChunkFactory.createChunk(ar.com.hjg.pngj.chunks.ChunkRaw, ar.com.hjg.pngj.ImageInfo):ar.com.hjg.pngj.chunks.PngChunk type: INTERFACE \l0x0054: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksList) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.chunksList ar.com.hjg.pngj.chunks.ChunksList \l0x0056: IGET  (r1 I:int) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.currentChunkGroup int \l0x0058: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksList)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l  (r1 I:int)\l ar.com.hjg.pngj.chunks.ChunksList.appendReadChunk(ar.com.hjg.pngj.chunks.PngChunk, int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x005b|0x005b: INVOKE  (r3 I:boolean) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.isDone():boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x005f|0x005f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0064 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0061|0x0061: INVOKE  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.processEndPng():void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqReaderPng.postProcessChunk((r2 'this' I:ar.com.hjg.pngj.ChunkSeqReaderPng A[IMMUTABLE_TYPE, THIS]), (r3 I:ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

