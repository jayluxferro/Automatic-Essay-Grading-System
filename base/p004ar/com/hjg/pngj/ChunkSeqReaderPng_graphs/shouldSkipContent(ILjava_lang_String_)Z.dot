digraph "CFG forar.com.hjg.pngj.ChunkSeqReaderPng.shouldSkipContent(ILjava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (super.shouldSkipContent(r10, r11) == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (p004ar.com.hjg.pngj.chunks.ChunkHelper.isCritical(r11) == false) goto L_0x0010\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if ((r9.maxTotalBytesRead \> 0 ? 1 : (r9.maxTotalBytesRead == 0 ? 0 : \-1)) \<= 0) goto L_0x0052\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018}"];
Node_9 [shape=record,label="{9\:\ 0x0022|if (((((long) r10) + getBytesCount()) \> r9.maxTotalBytesRead ? 1 : ((((long) r10) + getBytesCount()) == r9.maxTotalBytesRead ? 0 : \-1)) \> 0) goto L_0x0025\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Maximum total bytes to read exceeeded: \")\lr0.append(r9.maxTotalBytesRead)\lr0.append(\" offset:\")\lr0.append(getBytesCount())\lr0.append(\" len=\")\lr0.append(r10)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|throw new p004ar.com.hjg.pngj.PngjInputException(r0.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0052}"];
Node_13 [shape=record,label="{13\:\ 0x0058|if (r9.chunksToSkip.contains(r11) == false) goto L_0x005b\l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x005b}"];
Node_16 [shape=record,label="{16\:\ 0x005f|if ((r9.skipChunkMaxSize \> 0 ? 1 : (r9.skipChunkMaxSize == 0 ? 0 : \-1)) \<= 0) goto L_0x0069\l}"];
Node_17 [shape=record,label="{17\:\ 0x0061}"];
Node_18 [shape=record,label="{18\:\ 0x0066|if ((((long) r10) \> r9.skipChunkMaxSize ? 1 : (((long) r10) == r9.skipChunkMaxSize ? 0 : \-1)) \<= 0) goto L_0x0069\l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|RETURN\l|return true\l}"];
Node_20 [shape=record,label="{20\:\ 0x0069}"];
Node_21 [shape=record,label="{21\:\ 0x006d|if ((r9.maxBytesMetadata \> 0 ? 1 : (r9.maxBytesMetadata == 0 ? 0 : \-1)) \<= 0) goto L_0x007a\l}"];
Node_22 [shape=record,label="{22\:\ 0x006f}"];
Node_23 [shape=record,label="{23\:\ 0x0077|if ((((long) r10) \> (r9.maxBytesMetadata \- r9.bytesChunksLoaded) ? 1 : (((long) r10) == (r9.maxBytesMetadata \- r9.bytesChunksLoaded) ? 0 : \-1)) \<= 0) goto L_0x007a\l}"];
Node_24 [shape=record,label="{24\:\ 0x0079|RETURN\l|return true\l}"];
Node_25 [shape=record,label="{25\:\ 0x007a}"];
Node_26 [shape=record,label="{26\:\ 0x0084|switch(r9.chunkLoadBehaviour) \{\l    case ar.com.hjg.pngj.chunks.ChunkLoadBehaviour.LOAD_CHUNK_IF_SAFE :ar.com.hjg.pngj.chunks.ChunkLoadBehaviour: goto L_0x0089;\l    case ar.com.hjg.pngj.chunks.ChunkLoadBehaviour.LOAD_CHUNK_NEVER :ar.com.hjg.pngj.chunks.ChunkLoadBehaviour: goto L_0x0088;\l    default: goto L_0x0087;\l\}\l}"];
Node_27 [shape=record,label="{27\:\ 0x0088|RETURN\l|return true\l}"];
Node_28 [shape=record,label="{28\:\ 0x0089}"];
Node_29 [shape=record,label="{29\:\ 0x008d|if (p004ar.com.hjg.pngj.chunks.ChunkHelper.isSafeToCopy(r11) != false) goto L_0x0090\l}"];
Node_30 [shape=record,label="{30\:\ 0x008f|RETURN\l|return true\l}"];
Node_31 [shape=record,label="{31\:\ 0x0090|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.ChunkSeqReaderPng.shouldSkipContent((r9v0 'this' ar.com.hjg.pngj.ChunkSeqReaderPng A[IMMUTABLE_TYPE, THIS]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_28;
Node_26 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
}

