digraph "CFG forar.com.hjg.pngj.PngHelperInternal.writeBytes(Ljava\/io\/OutputStream;[BII)V" {
subgraph cluster_Region_823251160 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_671334576 {
label = "Try: R(1:1) catches: R(2:3|5)";
node [shape=record,color=blue];
subgraph cluster_Region_1973582023 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x0004 \}\lSplitter:B:0:0x0000\l|r0.write(r1, r2, r3)     \/\/ Catch:\{ IOException \-\> 0x0004 \}\l}"];
}
subgraph cluster_Region_1507082740 {
label = "R(2:3|5) | ExcHandler: IOException (r0v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|ExcHandler: IOException (r0v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|throw new p004ar.com.hjg.pngj.PngjOutputException((java.lang.Throwable) r0)\l}"];
}
}
}
subgraph cluster_Region_1507082740 {
label = "R(2:3|5) | ExcHandler: IOException (r0v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|ExcHandler: IOException (r0v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|throw new p004ar.com.hjg.pngj.PngjOutputException((java.lang.Throwable) r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0003}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0005}"];
MethodNode[shape=record,label="{public static void ar.com.hjg.pngj.PngHelperInternal.writeBytes((r0v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_4 -> Node_5;
}

