digraph "CFG forar.com.hjg.pngj.PngHelperInternal.filterPaethPredictor(III)I" {
subgraph cluster_Region_1903478950 {
label = "R(5:0|1|4|7|10)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = (r3 + r4) \- r5\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|int r1 = r0 \>= r3 ? r0 \- r3 : r3 \- r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r1 \l  PHI: (r1v0 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r0 \>= r4 ? r0 \- r4 : r4 \- r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|PHI: r2 \l  PHI: (r2v0 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r0 \>= r5 ? r0 \- r5 : r5 \- r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|RETURN\lPHI: r0 \l  PHI: (r0v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|return (r1 \> r2 \|\| r1 \> r0) ? r2 \<= r0 ? r4 : r5 : r3\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0013}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0015}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0019|REMOVE\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001b}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001c}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001e}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x001f}"];
MethodNode[shape=record,label="{static final int ar.com.hjg.pngj.PngHelperInternal.filterPaethPredictor((r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15;
}

