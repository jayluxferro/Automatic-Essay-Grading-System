digraph "CFG forar.com.hjg.pngj.PngHelperInternal.skipBytes(Ljava\/io\/InputStream;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r5 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: INVOKE  (r2 I:long) = (r4 I:java.io.InputStream), (r5 I:long) java.io.InputStream.skip(long):long type: VIRTUAL A[Catch:\{ IOException \-\> 0x0026 \}, TRY_ENTER]\l0x000a: CMP_L  (r0 I:int) = (r2 I:long), (r0 I:long) A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0010 A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r5 I:long) = (r5 I:long) \- (r2 I:long) A[Catch:\{ IOException \-\> 0x0026 \}]\l0x000f: GOTO  \-\> 0x0000 A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0026 \}]\l0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: GOTO  \-\> 0x002d A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) A[Catch:\{ IOException \-\> 0x0026 \}]\l0x001c: ARITH  (r5 I:long) = (r5 I:long) \- (r0 I:long) A[Catch:\{ IOException \-\> 0x0026 \}]\l0x001d: GOTO  \-\> 0x0000 A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException A[Catch:\{ IOException \-\> 0x0026 \}]\l0x0020: CONST_STR  (r5 I:java.lang.String) =  \"skip() returned a negative value ???\" A[Catch:\{ IOException \-\> 0x0026 \}]\l0x0022: INVOKE  (r4 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ IOException \-\> 0x0026 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ IOException \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|ExcHandler: IOException null\lSplitter:B:2:0x0006\l|0x0026: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0029: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.Throwable)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{public static void ar.com.hjg.pngj.PngHelperInternal.skipBytes((r4 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_0;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_16;
Node_10 -> Node_0;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

