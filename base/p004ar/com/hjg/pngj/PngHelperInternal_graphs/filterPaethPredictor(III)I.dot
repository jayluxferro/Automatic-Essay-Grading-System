digraph "CFG forar.com.hjg.pngj.PngHelperInternal.filterPaethPredictor(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (r3 + r4) \- r5\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r0 \< r3) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|int r1 = r0 \- r3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|int r1 = r3 \- r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r1 \l  PHI: (r1v0 int) = (r1v1 int), (r1v2 int) binds: [B:3:0x0008, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< r4) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|int r2 = r0 \- r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|int r2 = r4 \- r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|PHI: r2 \l  PHI: (r2v0 int) = (r2v1 int), (r2v2 int) binds: [B:6:0x000f, B:5:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< r5) goto L_0x0015\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|int r0 = r0 \- r5\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|int r0 = r5 \- r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|PHI: r0 \l  PHI: (r0v2 int) = (r0v3 int), (r0v4 int) binds: [B:9:0x0015, B:8:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \> r2) goto L_0x001c\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|if (r1 \> r0) goto L_0x001c\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|if (r2 \> r0) goto L_0x001f\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|RETURN\l|return r4\l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{static final int ar.com.hjg.pngj.PngHelperInternal.filterPaethPredictor((r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
}

