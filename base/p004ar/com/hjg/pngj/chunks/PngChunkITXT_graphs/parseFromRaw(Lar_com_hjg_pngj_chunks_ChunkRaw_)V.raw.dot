digraph "CFG forar.com.hjg.pngj.chunks.PngChunkITXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IGET  (r5 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0008: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x0009: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r5 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000e: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: APUT  \l  (r1 I:?[int, float][])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0015: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: ARITH  (r3 I:int) = (r3 I:int) + (r6 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0090 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IGET  (r0 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0024: AGET  (r3 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r0 I:java.lang.String) = (r0 I:byte[]), (r2 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x002a: IPUT  \l  (r0 I:java.lang.String)\l  (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l ar.com.hjg.pngj.chunks.PngChunkITXT.key java.lang.String \l0x002c: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x002e: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x002f: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0031: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0037 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: IPUT  (r3 I:boolean), (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT) ar.com.hjg.pngj.chunks.PngChunkITXT.compressed boolean \l0x003a: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x003b: IGET  (r3 I:boolean) = (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT) ar.com.hjg.pngj.chunks.PngChunkITXT.compressed boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004e \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0041: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0046 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: NEW_INSTANCE  (r9 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0048: CONST_STR  (r0 I:java.lang.String) =  \"Bad formed PngChunkITXT chunk \- bad compression method \" \l0x004a: INVOKE  \l  (r9 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0050: AGET  (r4 I:?[int, float]) = (r1 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0052: ARITH  (r4 I:int) = (r4 I:int) \- (r0 I:int) \l0x0053: INVOKE  (r0 I:java.lang.String) = (r3 I:byte[]), (r0 I:int), (r4 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x0057: IPUT  \l  (r0 I:java.lang.String)\l  (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l ar.com.hjg.pngj.chunks.PngChunkITXT.langTag java.lang.String \l0x0059: IGET  (r0 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x005b: AGET  (r3 I:?[int, float]) = (r1 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x005d: ARITH  (r3 I:int) = (r3 I:int) + (r6 I:int) \l0x005e: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x005f: AGET  (r5 I:?[int, float]) = (r1 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0061: AGET  (r7 I:?[int, float]) = (r1 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0063: ARITH  (r5 I:int) = (r5 I:int) \- (r7 I:int) \l0x0064: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x0065: INVOKE  (r0 I:java.lang.String) = (r0 I:byte[]), (r3 I:int), (r5 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(byte[], int, int):java.lang.String type: STATIC \l0x0069: IPUT  \l  (r0 I:java.lang.String)\l  (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l ar.com.hjg.pngj.chunks.PngChunkITXT.translatedTag java.lang.String \l0x006b: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x006d: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x006e: IGET  (r1 I:boolean) = (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT) ar.com.hjg.pngj.chunks.PngChunkITXT.compressed boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x0070|0x0070: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0083 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0072|0x0072: IGET  (r1 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0074: IGET  (r9 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0076: ARRAY_LENGTH  (r9 I:int) = (r9 I:?[]) \l0x0077: ARITH  (r9 I:int) = (r9 I:int) \- (r0 I:int) \l0x0078: INVOKE  (r9 I:byte[]) = (r1 I:byte[]), (r0 I:int), (r9 I:int), (r2 I:boolean) ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(byte[], int, int, boolean):byte[] type: STATIC \l0x007c: INVOKE  (r9 I:java.lang.String) = (r9 I:byte[]) ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(byte[]):java.lang.String type: STATIC \l0x0080: IPUT  \l  (r9 I:java.lang.String)\l  (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l ar.com.hjg.pngj.chunks.PngChunkITXT.val java.lang.String \l}"];
Node_27 [shape=record,label="{27\:\ 0x0083|0x0083: IGET  (r1 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0085: IGET  (r9 I:byte[]) = (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0087: ARRAY_LENGTH  (r9 I:int) = (r9 I:?[]) \l0x0088: ARITH  (r9 I:int) = (r9 I:int) \- (r0 I:int) \l0x0089: INVOKE  (r9 I:java.lang.String) = (r1 I:byte[]), (r0 I:int), (r9 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(byte[], int, int):java.lang.String type: STATIC \l0x008d: IPUT  \l  (r9 I:java.lang.String)\l  (r8 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l ar.com.hjg.pngj.chunks.PngChunkITXT.val java.lang.String \l}"];
Node_28 [shape=record,label="{28\:\ 0x008f|0x008f: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x0090|0x0090: NEW_INSTANCE  (r9 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0092: CONST_STR  (r0 I:java.lang.String) =  \"Bad formed PngChunkITXT chunk\" \l0x0094: INVOKE  \l  (r9 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0097|0x0097: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkITXT.parseFromRaw((r8 'this' I:ar.com.hjg.pngj.chunks.PngChunkITXT A[IMMUTABLE_TYPE, THIS]), (r9 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_11[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_1;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_29;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_24[style=dashed];
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_29 -> Node_30;
}

