digraph "CFG forar.com.hjg.pngj.chunks.PngChunkITXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
subgraph cluster_Region_148655522 {
label = "R(3:0|(2:(3:5|(1:7)|(1:(1:28)))(0)|9)|(3:11|15|(2:21|(1:23)(1:24))(1:20))(1:26))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int[] int[] r1 = new int[3]\lint r3 = 0\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_1111371282 {
label = "LOOP:0: (2:(3:5|(1:7)|(1:(1:28)))(0)|9)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r3 \< r9.data.length) goto L_0x000c\l}"];
subgraph cluster_Region_1149210501 {
label = "R(2:(3:5|(1:7)|(1:(1:28)))(0)|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1336025597 {
label = "IF [B:4:0x0010] THEN: R(3:5|(1:7)|(1:(1:28))) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r9.data[r3] == 0) goto L_0x0013\l}"];
subgraph cluster_Region_917305260 {
label = "R(3:5|(1:7)|(1:(1:28)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|r1[r4] = r3\lr4++\l}"];
subgraph cluster_IfRegion_440544624 {
label = "IF [B:6:0x0017] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|if (r4 == 1) goto L_0x0019\l}"];
subgraph cluster_Region_364843313 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0019|r3 += 2\l}"];
}
}
subgraph cluster_Region_204591906 {
label = "R(1:(1:28))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_692047508 {
label = "IF [B:8:0x001b] THEN: R(1:28) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001b|PHI: r3 \l  PHI: (r3v16 int) = (r3v1 int), (r3v17 int) binds: [B:6:0x0017, B:7:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == 3) goto L_0x0020\l}"];
subgraph cluster_Region_2093753770 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0020|SYNTHETIC\lEDGE_INSN: B:28:0x0020\-\>B:10:0x0020 ?: BREAK  \l|break\l}"];
}
}
}
}
subgraph cluster_Region_1877731845 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_9 [shape=record,label="{9\:\ 0x001e|LOOP_END\lPHI: r3 r4 \l  PHI: (r3v14 int) = (r3v1 int), (r3v16 int) binds: [B:30:0x001e, B:29:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v6 int) = (r4v1 int), (r4v7 int) binds: [B:30:0x001e, B:29:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:9:0x001e\l|r3++\l}"];
}
}
subgraph cluster_IfRegion_2006551595 {
label = "IF [B:10:0x0020] THEN: R(3:11|15|(2:21|(1:23)(1:24))(1:20)) ELSE: R(1:26)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0020|EDGE_INSN: B:28:0x0020\-\>B:10:0x0020 ?: BREAK  \lPHI: r4 \l  PHI: (r4v2 int) = (r4v1 int), (r4v7 int) binds: [B:27:0x0020, B:28:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == 3) goto L_0x0022\l}"];
subgraph cluster_Region_466195455 {
label = "R(3:11|15|(2:21|(1:23)(1:24))(1:20))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0022|r8.key = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r9.data, 0, r1[0])\lint int r0 = r1[0] + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|PHI: r3 \l  PHI: (r3v5 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r8.compressed = r9.data[r0] != 0\lint int r0 = r0 + 1\l}"];
subgraph cluster_IfRegion_2009907079 {
label = "IF [B:16:0x003d, B:18:0x0043] THEN: R(2:21|(1:23)(1:24)) ELSE: R(1:20)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x003d|if (r8.compressed == false) goto L_0x004e\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|ADDED_TO_REGION\l|if (r9.data[r0] == 0) goto L_0x004e\l}"];
subgraph cluster_Region_782530222 {
label = "R(2:21|(1:23)(1:24))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x004e|r8.langTag = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r9.data, r0, r1[1] \- r0)\lr8.translatedTag = p004ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(r9.data, r1[1] + 1, (r1[2] \- r1[1]) \- 1)\lint int r0 = r1[2] + 1\l}"];
subgraph cluster_IfRegion_821364304 {
label = "IF [B:22:0x0070] THEN: R(1:23) ELSE: R(1:24)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0070|if (r8.compressed == true) goto L_0x0072\l}"];
subgraph cluster_Region_1284476289 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0072|r8.val = p004ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(p004ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(r9.data, r0, r9.data.length \- r0, false))\l}"];
}
subgraph cluster_Region_1194131661 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0083|r8.val = p004ar.com.hjg.pngj.chunks.ChunkHelper.toStringUTF8(r9.data, r0, r9.data.length \- r0)\l}"];
}
}
}
subgraph cluster_Region_845118383 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x004d|throw new p004ar.com.hjg.pngj.PngjException(\"Bad formed PngChunkITXT chunk \- bad compression method \")\l}"];
}
}
}
subgraph cluster_Region_790886715 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0097|throw new p004ar.com.hjg.pngj.PngjException(\"Bad formed PngChunkITXT chunk\")\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v1 int) = (r3v0 int), (r3v15 int) binds: [B:0:0x0000, B:9:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v6 int) binds: [B:0:0x0000, B:9:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:9:0x001e\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0033}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0035}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0037}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x003f}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0046}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0090}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0020|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x001e|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x001e|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_32 [shape=record,color=red,label="{32\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkITXT.parseFromRaw((r8v0 'this' ar.com.hjg.pngj.chunks.PngChunkITXT A[IMMUTABLE_TYPE, THIS]), (r9v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_27[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_30[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_28;
Node_8 -> Node_29[style=dashed];
Node_28 -> Node_10;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_10 -> Node_25[style=dashed];
Node_11 -> Node_12;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_23 -> Node_32;
Node_24 -> Node_31;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_12 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_25 -> Node_26;
Node_27 -> Node_10;
Node_29 -> Node_9;
Node_30 -> Node_9;
}

