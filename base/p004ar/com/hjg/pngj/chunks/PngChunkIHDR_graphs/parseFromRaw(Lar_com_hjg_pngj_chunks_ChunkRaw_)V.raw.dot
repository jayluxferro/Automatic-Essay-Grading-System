digraph "CFG forar.com.hjg.pngj.chunks.PngChunkIHDR.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r4 I:java.io.ByteArrayInputStream) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.getAsByteStream():java.io.ByteArrayInputStream type: VIRTUAL \l0x000a: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readInt4(java.io.InputStream):int type: STATIC \l0x000e: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.cols int \l0x0010: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readInt4(java.io.InputStream):int type: STATIC \l0x0014: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.rows int \l0x0016: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readByte(java.io.InputStream):int type: STATIC \l0x001a: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l0x001c: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readByte(java.io.InputStream):int type: STATIC \l0x0020: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.colormodel int \l0x0022: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readByte(java.io.InputStream):int type: STATIC \l0x0026: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.compmeth int \l0x0028: INVOKE  (r0 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readByte(java.io.InputStream):int type: STATIC \l0x002c: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.filmeth int \l0x002e: INVOKE  (r4 I:int) = (r4 I:java.io.InputStream) ar.com.hjg.pngj.PngHelperInternal.readByte(java.io.InputStream):int type: STATIC \l0x0032: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.interlaced int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0034|0x0034: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0037: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003c: CONST_STR  (r2 I:java.lang.String) =  \"Bad IDHR len \" \l0x003e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0041: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004a: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|0x004d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkIHDR.parseFromRaw((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkIHDR A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

