digraph "CFG forar.com.hjg.pngj.chunks.PngChunkIHDR.createImageInfo()Lar\/com\/hjg\/pngj\/ImageInfo;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|check()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if ((getColormodel() & 4) == 0) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|r8 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|r8 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|PHI: r8 \l  PHI: (r8v0 boolean) = (r8v1 boolean), (r8v2 boolean) binds: [B:3:0x000f, B:2:0x000d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if ((getColormodel() & 1) == 0) goto L_0x0019\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|r10 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|r10 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|PHI: r10 \l  PHI: (r10v0 boolean) = (r10v1 boolean), (r10v2 boolean) binds: [B:7:0x0019, B:6:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|if (getColormodel() == 0) goto L_0x0029\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0024|if (getColormodel() != 4) goto L_0x0027\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|r9 = false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|r9 = true\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|PHI: r9 \l  PHI: (r9v0 boolean) = (r9v1 boolean), (r9v2 boolean) binds: [B:13:0x0029, B:12:0x0027] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|RETURN\l|return new p004ar.com.hjg.pngj.ImageInfo(getCols(), getRows(), getBitspc(), r8, r9, r10)\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.ImageInfo ar.com.hjg.pngj.chunks.PngChunkIHDR.createImageInfo((r11v0 'this' ar.com.hjg.pngj.chunks.PngChunkIHDR A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

