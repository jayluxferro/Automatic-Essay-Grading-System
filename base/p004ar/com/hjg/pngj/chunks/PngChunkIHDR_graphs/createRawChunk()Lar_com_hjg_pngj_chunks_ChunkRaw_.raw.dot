digraph "CFG forar.com.hjg.pngj.chunks.PngChunkIHDR.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) =  ar.com.hjg.pngj.chunks.ChunkRaw \l0x0002: SGET  (r1 I:byte[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.b_IHDR byte[] \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0006: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r2 I:int)\l  (r1 I:byte[])\l  (r3 I:boolean)\l ar.com.hjg.pngj.chunks.ChunkRaw.\<init\>(int, byte[], boolean):void type: DIRECT \l0x000a: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.cols int \l0x000c: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0012: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.rows int \l0x0014: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x001a: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001c: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l0x001e: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0021: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0023: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0025: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.colormodel int \l0x0027: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0028: CONST  (r3 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x002a: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x002c: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002e: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.compmeth int \l0x0030: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0031: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0033: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0035: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0037: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.filmeth int \l0x0039: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x003a: CONST  (r3 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x003c: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x003e: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0040: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.interlaced int \l0x0042: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0043: CONST  (r3 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0045: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0047|0x0047: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkIHDR.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkIHDR A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

