digraph "CFG forar.com.hjg.pngj.chunks.PngChunkIHDR.createImageInfo()Lar\/com\/hjg\/pngj\/ImageInfo;" {
subgraph cluster_Region_239198672 {
label = "R(4:0|1|5|15)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|check()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0015}"];
Node_15 [shape=record,label="{15\:\ 0x003c|RETURN\l|return new p004ar.com.hjg.pngj.ImageInfo(getCols(), getRows(), getBitspc(), (getColormodel() & 4) != 0, getColormodel() == 0 \|\| getColormodel() == 4, (getColormodel() & 1) != 0)\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000d}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000f}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010|PHI: r8 \l  PHI: (r8v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0019}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a|PHI: r10 \l  PHI: (r10v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0020}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0024|REMOVE\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0027}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0029}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002a|PHI: r9 \l  PHI: (r9v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.ImageInfo ar.com.hjg.pngj.chunks.PngChunkIHDR.createImageInfo((r11v0 'this' ar.com.hjg.pngj.chunks.PngChunkIHDR A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

