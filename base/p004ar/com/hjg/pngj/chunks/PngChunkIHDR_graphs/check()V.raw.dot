digraph "CFG forar.com.hjg.pngj.chunks.PngChunkIHDR.check()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.cols int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:47:0x0075 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.rows int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:47:0x0075 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.compmeth int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0075 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.filmeth int \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0075 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l0x0020: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002c \l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|0x002c: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x002e: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: bitdepth invalid\" \l0x0030: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0033|0x0033: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|0x0034: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.interlaced int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:45:0x006d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0038|0x0038: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.interlaced int \l}"];
Node_24 [shape=record,label="{24\:\ 0x003a|0x003a: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:45:0x006d \l}"];
Node_25 [shape=record,label="{25\:\ 0x003c|0x003c: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.colormodel int \l}"];
Node_26 [shape=record,label="{26\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x006c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0040|0x0040: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x005b \l}"];
Node_29 [shape=record,label="{29\:\ 0x0043|0x0043: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3, 4] t:[0x005b, 0x004e, 0x005b] \l}"];
Node_30 [shape=record,label="{30\:\ 0x0046|0x0046: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0048: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: invalid colormodel\" \l0x004a: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x004d|0x004d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x004e|0x004e: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l}"];
Node_33 [shape=record,label="{33\:\ 0x0050|0x0050: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0053 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0053|0x0053: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0055: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: bitdepth invalid\" \l0x0057: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x005a|0x005a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x005b|0x005b: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l}"];
Node_38 [shape=record,label="{38\:\ 0x005d|0x005d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x006c \l}"];
Node_39 [shape=record,label="{39\:\ 0x005f|0x005f: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.bitspc int \l}"];
Node_40 [shape=record,label="{40\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0064 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0064|0x0064: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0066: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: bitdepth invalid\" \l0x0068: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x006b|0x006b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x006c|0x006c: RETURN   \l}"];
Node_45 [shape=record,label="{45\:\ 0x006d|0x006d: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x006f: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: interlace invalid\" \l0x0071: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_46 [shape=record,label="{46\:\ 0x0074|0x0074: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0075|0x0075: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0077: CONST_STR  (r1 I:java.lang.String) =  \"bad IHDR: col\/row\/compmethod\/filmethod invalid\" \l0x0079: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_48 [shape=record,label="{48\:\ 0x007c|0x007c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkIHDR.check((r5 'this' I:ar.com.hjg.pngj.chunks.PngChunkIHDR A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_47;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_47;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_47;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_47;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_45;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_45;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_44;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_37;
Node_29 -> Node_30;
Node_29 -> Node_32;
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_44[style=dashed];
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_44;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_44[style=dashed];
Node_42 -> Node_43;
Node_45 -> Node_46;
Node_47 -> Node_48;
}

