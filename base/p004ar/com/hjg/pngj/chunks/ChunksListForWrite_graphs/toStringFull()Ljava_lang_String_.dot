digraph "CFG forar.com.hjg.pngj.chunks.ChunksListForWrite.toStringFull()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder(toString())\lr0.append(\"n Written:n\")\ljava.util.Iterator r1 = getChunks().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|LOOP_START\lLOOP:0: B:1:0x0016\-\>B:3:0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|if (r1.hasNext() == false) goto L_0x0043\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|LOOP_END\lLOOP:0: B:1:0x0016\-\>B:3:0x001c\l|ar.com.hjg.pngj.chunks.PngChunk r2 = r1.next()\lr0.append(r2)\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\" G=\")\lr3.append(r2.getChunkGroup())\lr3.append(\"n\")\lr0.append(r3.toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0043}"];
Node_5 [shape=record,label="{5\:\ 0x0049|if (r5.queuedChunks.isEmpty() != false) goto L_0x006b\l}"];
Node_6 [shape=record,label="{6\:\ 0x004b|r0.append(\" Queued:n\")\ljava.util.Iterator r1 = r5.queuedChunks.iterator()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0056|LOOP_START\lLOOP:1: B:7:0x0056\-\>B:9:0x005c\l}"];
Node_8 [shape=record,label="{8\:\ 0x005a|if (r1.hasNext() == false) goto L_0x006b\l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|LOOP_END\lLOOP:1: B:7:0x0056\-\>B:9:0x005c\l|r0.append(r1.next())\lr0.append(\"n\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x006b}"];
Node_11 [shape=record,label="{11\:\ 0x006f|RETURN\l|return r0.toString()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x006b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String ar.com.hjg.pngj.chunks.ChunksListForWrite.toStringFull((r5v0 'this' ar.com.hjg.pngj.chunks.ChunksListForWrite A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_12 -> Node_4;
Node_13 -> Node_10;
}

