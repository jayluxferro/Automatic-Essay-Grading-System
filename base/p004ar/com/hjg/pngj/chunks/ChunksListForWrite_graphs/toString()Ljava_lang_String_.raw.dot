digraph "CFG forar.com.hjg.pngj.chunks.ChunksListForWrite.toString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"ChunkList: written: \" \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000a: INVOKE  (r1 I:java.util.List) = (r2 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.getChunks():java.util.List type: VIRTUAL \l0x000e: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0012: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0015: CONST_STR  (r1 I:java.lang.String) =  \" queue: \" \l0x0017: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: IGET  (r1 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\>) = (r2 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.queuedChunks java.util.List \l0x001c: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0020: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0023: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0027|0x0027: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String ar.com.hjg.pngj.chunks.ChunksListForWrite.toString((r2 'this' I:ar.com.hjg.pngj.chunks.ChunksListForWrite A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

