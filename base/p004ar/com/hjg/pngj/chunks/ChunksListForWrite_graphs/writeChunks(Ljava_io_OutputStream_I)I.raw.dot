digraph "CFG forar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks(Ljava\/io\/OutputStream;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\>) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.queuedChunks java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00a3 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) = (ar.com.hjg.pngj.chunks.PngChunk) (r2 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r3 I:boolean) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk), (r10 I:int) ar.com.hjg.pngj.chunks.ChunksListForWrite.shouldWrite(ar.com.hjg.pngj.chunks.PngChunk, int):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IGET  (r3 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x001c: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.isCritical(java.lang.String):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IGET  (r3 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0024: CONST_STR  (r4 I:java.lang.String) =  \"PLTE\" \l0x0026: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: NEW_INSTANCE  (r9 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x002f: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0031: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0034: CONST_STR  (r0 I:java.lang.String) =  \"bad chunk queued: \" \l0x0036: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r10 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003c: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0040: INVOKE  \l  (r9 I:ar.com.hjg.pngj.PngjOutputException)\l  (r10 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: IGET  (r3 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.alreadyWrittenKeys java.util.HashMap \l0x0046: IGET  (r4 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0048: INVOKE  (r3 I:boolean) = (r3 I:java.util.HashMap), (r4 I:java.lang.Object) java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006c \l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: INVOKE  (r3 I:boolean) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.allowsMultiple():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0055 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|0x0055: NEW_INSTANCE  (r9 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x0057: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0059: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005c: CONST_STR  (r0 I:java.lang.String) =  \"duplicated chunk does not allow multiple: \" \l0x005e: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0061: INVOKE  (r10 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  \l  (r9 I:ar.com.hjg.pngj.PngjOutputException)\l  (r10 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x006b|0x006b: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunk)\l  (r9 I:java.io.OutputStream)\l ar.com.hjg.pngj.chunks.PngChunk.write(java.io.OutputStream):void type: VIRTUAL \l0x006f: IGET  (r3 I:java.util.List) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.chunks java.util.List \l0x0071: INVOKE  (r3 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0074: IGET  (r3 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.alreadyWrittenKeys java.util.HashMap \l0x0076: IGET  (r4 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0078: IGET  (r5 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.alreadyWrittenKeys java.util.HashMap \l0x007a: IGET  (r6 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x007c: INVOKE  (r5 I:boolean) = (r5 I:java.util.HashMap), (r6 I:java.lang.Object) java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL \l0x0080: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0081|0x0081: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0092 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0083|0x0083: IGET  (r5 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r8 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.alreadyWrittenKeys java.util.HashMap \l0x0085: IGET  (r7 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0087: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.HashMap), (r7 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x008b: CHECK_CAST  (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:?[OBJECT, ARRAY]) \l0x008d: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0091: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0092|0x0092: INVOKE  (r5 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0096: INVOKE  \l  (r3 I:java.util.HashMap)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0099: INVOKE  (r2 I:ar.com.hjg.pngj.chunks.PngChunk), (r10 I:int) ar.com.hjg.pngj.chunks.PngChunk.setChunkGroup(int):void type: VIRTUAL \l0x009c: INVOKE  (r0 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE \l0x009f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a3|0x00a3: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks((r8 'this' I:ar.com.hjg.pngj.chunks.ChunksListForWrite A[IMMUTABLE_TYPE, THIS]), (r9 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_1[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_1;
}

