digraph "CFG forar.com.hjg.pngj.chunks.ChunksListForWrite.shouldWrite(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0005: CONST_STR  (r5 I:java.lang.String) =  \"PLTE\" \l0x0007: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r4 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r0 I:int) = (r5 I:int) % (2 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0059 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getOrderingConstraint():ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint type: VIRTUAL \l0x0014: INVOKE  (r0 I:boolean) = \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint)\l ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoBeforePLTE():boolean type: VIRTUAL \l0x0018: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0019: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getOrderingConstraint():ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint type: VIRTUAL \l0x0023: INVOKE  (r0 I:boolean) = \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint)\l ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoBeforeIDAT():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0035 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getOrderingConstraint():ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint type: VIRTUAL \l0x002d: INVOKE  (r0 I:boolean) = \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint)\l ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoAfterPLTE():boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: INVOKE  (r3 I:boolean) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.hasPriority():boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003e \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: INVOKE  (r3 I:boolean) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.ChunkHelper.isUnknown(ar.com.hjg.pngj.chunks.PngChunk):boolean type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: INVOKE  (r3 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getChunkGroup():int type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:25:0x004f \l}"];
Node_24 [shape=record,label="{24\:\ 0x004b|0x004b: INVOKE  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getChunkGroup():int type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0052 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: RETURN  (r2 I:boolean) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0052|0x0052: IF  (r5 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:30:0x0057 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: IF  (r5 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:30:0x0057 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0056|0x0056: RETURN  (r2 I:boolean) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0057|0x0057: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0058|0x0058: RETURN  (r4 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0059|0x0059: NEW_INSTANCE  (r4 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x005b: CONST_STR  (r5 I:java.lang.String) =  \"bad chunk group?\" \l0x005d: INVOKE  \l  (r4 I:ar.com.hjg.pngj.PngjOutputException)\l  (r5 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x0060|0x0060: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static boolean ar.com.hjg.pngj.chunks.ChunksListForWrite.shouldWrite((r4 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_32;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
}

