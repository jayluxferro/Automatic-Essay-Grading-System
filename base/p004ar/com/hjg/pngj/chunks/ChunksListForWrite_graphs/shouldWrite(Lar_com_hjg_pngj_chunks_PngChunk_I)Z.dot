digraph "CFG forar.com.hjg.pngj.chunks.ChunksListForWrite.shouldWrite(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 != 2) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|return r4.f58id.equals(\"PLTE\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if ((r5 % 2) == 0) goto L_0x0059\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|r1 = 3\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|if (r4.getOrderingConstraint().mustGoBeforePLTE() == false) goto L_0x001f\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|r0 = 1\lr1 = 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f}"];
Node_10 [shape=record,label="{10\:\ 0x0027|if (r4.getOrderingConstraint().mustGoBeforeIDAT() == false) goto L_0x0035\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029}"];
Node_12 [shape=record,label="{12\:\ 0x0031|if (r4.getOrderingConstraint().mustGoAfterPLTE() == false) goto L_0x0036\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|r0 = 3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|r1 = 5\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|PHI: r1 \l  PHI: (r1v2 int) = (r1v3 int), (r1v0 int) binds: [B:14:0x0035, B:12:0x0031] A[DONT_GENERATE, DONT_INLINE]\l|r0 = 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|PHI: r0 r1 \l  PHI: (r0v4 int) = (r0v11 int), (r0v14 int), (r0v15 int) binds: [B:15:0x0036, B:13:0x0033, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v2 int), (r1v0 int), (r1v4 int) binds: [B:15:0x0036, B:13:0x0033, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|if (r4.hasPriority() == false) goto L_0x003e\l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|r0 = r1\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|PHI: r0 \l  PHI: (r0v5 int) = (r0v4 int), (r0v8 int) binds: [B:17:0x003b, B:18:0x003e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|if (p004ar.com.hjg.pngj.chunks.ChunkHelper.isUnknown(r4) == false) goto L_0x004f\l}"];
Node_21 [shape=record,label="{21\:\ 0x0045}"];
Node_22 [shape=record,label="{22\:\ 0x0049|if (r4.getChunkGroup() \<= 0) goto L_0x004f\l}"];
Node_23 [shape=record,label="{23\:\ 0x004b|int r0 = r4.getChunkGroup()\l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|PHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v5 int), (r0v7 int) binds: [B:20:0x0043, B:22:0x0049, B:23:0x004b] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 != r0) goto L_0x0052\l}"];
Node_25 [shape=record,label="{25\:\ 0x0051|RETURN\l|return true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0052|if (r5 \<= r0) goto L_?\l}"];
Node_27 [shape=record,label="{27\:\ 0x0054|if (r5 \> r1) goto L_?\l}"];
Node_28 [shape=record,label="{28\:\ 0x0056|RETURN\l|return true\l}"];
Node_29 [shape=record,label="{29\:\ 0x0059}"];
Node_30 [shape=record,label="{30\:\ 0x0060|throw new p004ar.com.hjg.pngj.PngjOutputException(\"bad chunk group?\")\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean ar.com.hjg.pngj.chunks.ChunksListForWrite.shouldWrite((r4v0 ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_29;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_32;
Node_29 -> Node_30;
}

