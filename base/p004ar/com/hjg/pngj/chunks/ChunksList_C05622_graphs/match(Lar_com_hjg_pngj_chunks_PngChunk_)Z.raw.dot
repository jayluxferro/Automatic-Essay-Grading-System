digraph "CFG forar.com.hjg.pngj.chunks.ChunksList.2.match(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0002: IGET  (r1 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.chunks.ChunksList$2) ar.com.hjg.pngj.chunks.ChunksList.2.val$id java.lang.String \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.chunks.PngChunkTextVar \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0011: CHECK_CAST  (r0 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) = (ar.com.hjg.pngj.chunks.PngChunkTextVar) (r0 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r0 I:java.lang.String) = (r0 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) ar.com.hjg.pngj.chunks.PngChunkTextVar.getKey():java.lang.String type: VIRTUAL \l0x0017: IGET  (r2 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.chunks.ChunksList$2) ar.com.hjg.pngj.chunks.ChunksList.2.val$innerid java.lang.String \l0x0019: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.chunks.PngChunkSPLT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: CHECK_CAST  (r4 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) = (ar.com.hjg.pngj.chunks.PngChunkSPLT) (r4 I:?[OBJECT, ARRAY]) \l0x0026: INVOKE  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.getPalName():java.lang.String type: VIRTUAL \l0x002a: IGET  (r0 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.chunks.ChunksList$2) ar.com.hjg.pngj.chunks.ChunksList.2.val$innerid java.lang.String \l0x002c: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.chunks.ChunksList.2.match((r3 'this' I:ar.com.hjg.pngj.chunks.ChunksList$2 A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
}

