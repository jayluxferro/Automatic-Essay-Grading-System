digraph "CFG forar.com.hjg.pngj.chunks.PngMetadata.queueChunk(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r2 I:ar.com.hjg.pngj.chunks.PngMetadata) ar.com.hjg.pngj.chunks.PngMetadata.getChunkListW():ar.com.hjg.pngj.chunks.ChunksListForWrite type: DIRECT \l0x0004: IGET  (r1 I:boolean) = (r2 I:ar.com.hjg.pngj.chunks.PngMetadata) ar.com.hjg.pngj.chunks.PngMetadata.readonly boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r4 I:java.util.List) = (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.getQueuedChunks():java.util.List type: VIRTUAL \l0x000e: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.chunks.PngMetadata$1) =  ar.com.hjg.pngj.chunks.PngMetadata$1 \l0x0010: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.PngMetadata$1)\l  (r2 I:ar.com.hjg.pngj.chunks.PngMetadata)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.PngMetadata.1.\<init\>(ar.com.hjg.pngj.chunks.PngMetadata, ar.com.hjg.pngj.chunks.PngChunk):void type: DIRECT \l0x0013: INVOKE  \l  (r4 I:java.util.List)\l  (r1 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l ar.com.hjg.pngj.chunks.ChunkHelper.trimList(java.util.List, ar.com.hjg.pngj.chunks.ChunkPredicate):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.queue(ar.com.hjg.pngj.chunks.PngChunk):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x001c: CONST_STR  (r4 I:java.lang.String) =  \"cannot set chunk : readonly metadata\" \l0x001e: INVOKE  \l  (r3 I:ar.com.hjg.pngj.PngjException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngMetadata.queueChunk((r2 'this' I:ar.com.hjg.pngj.chunks.PngMetadata A[IMMUTABLE_TYPE, THIS]), (r3 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

