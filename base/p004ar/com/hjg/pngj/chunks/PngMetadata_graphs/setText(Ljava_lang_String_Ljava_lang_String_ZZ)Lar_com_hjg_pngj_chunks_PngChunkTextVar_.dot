digraph "CFG forar.com.hjg.pngj.chunks.PngMetadata.setText(Ljava\/lang\/String;Ljava\/lang\/String;ZZ)Lar\/com\/hjg\/pngj\/chunks\/PngChunkTextVar;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == false) goto L_0x000d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 == false) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x000c|throw new p004ar.com.hjg.pngj.PngjException(\"cannot compress non latin text\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r3 == false) goto L_0x0025\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r4 == false) goto L_0x001b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|ar.com.hjg.pngj.chunks.PngChunkZTXT r3 = new p004ar.com.hjg.pngj.chunks.PngChunkZTXT(r0.chunkList.imageInfo)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|ar.com.hjg.pngj.chunks.PngChunkTEXT r3 = new p004ar.com.hjg.pngj.chunks.PngChunkTEXT(r0.chunkList.imageInfo)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|ar.com.hjg.pngj.chunks.PngChunkITXT r3 = new p004ar.com.hjg.pngj.chunks.PngChunkITXT(r0.chunkList.imageInfo)\l((p004ar.com.hjg.pngj.chunks.PngChunkITXT) r3).setLangtag(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|PHI: r3 \l  PHI: (r3v1 ar.com.hjg.pngj.chunks.PngChunkTextVar) = (r3v2 ar.com.hjg.pngj.chunks.PngChunkTextVar), (r3v3 ar.com.hjg.pngj.chunks.PngChunkTextVar), (r3v4 ar.com.hjg.pngj.chunks.PngChunkTextVar) binds: [B:8:0x0025, B:7:0x001b, B:6:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|r3.setKeyVal(r1, r2)\lqueueChunk(r3, true)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.PngChunkTextVar ar.com.hjg.pngj.chunks.PngMetadata.setText((r0v0 'this' ar.com.hjg.pngj.chunks.PngMetadata A[IMMUTABLE_TYPE, THIS]), (r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

