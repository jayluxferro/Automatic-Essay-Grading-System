digraph "CFG forar.com.hjg.pngj.chunks.PngMetadata.getTxtForKey(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.util.List) = \l  (r2 I:ar.com.hjg.pngj.chunks.PngMetadata)\l  (r3 I:java.lang.String)\l ar.com.hjg.pngj.chunks.PngMetadata.getTxtsForKey(java.lang.String):java.util.List type: VIRTUAL \l0x0004: INVOKE  (r0 I:boolean) = (r3 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r3 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r1 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0020: CHECK_CAST  (r1 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) = (ar.com.hjg.pngj.chunks.PngChunkTextVar) (r1 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  (r1 I:java.lang.String) = (r1 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) ar.com.hjg.pngj.chunks.PngChunkTextVar.getVal():java.lang.String type: VIRTUAL \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"\l\" \l0x002b: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String ar.com.hjg.pngj.chunks.PngMetadata.getTxtForKey((r2 'this' I:ar.com.hjg.pngj.chunks.PngMetadata A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
}

