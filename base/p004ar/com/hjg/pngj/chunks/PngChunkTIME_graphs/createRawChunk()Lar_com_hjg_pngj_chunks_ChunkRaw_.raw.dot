digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTIME.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkTIME.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0006: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.year int \l0x0008: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(int, byte[], int):void type: STATIC \l0x000e: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0010: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.mon int \l0x0012: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0014: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0016: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0018: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.day int \l0x001a: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001c: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x001e: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0020: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.hour int \l0x0022: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0023: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0024: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0026: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0028: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.min int \l0x002a: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x002b: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x002c: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x002e: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0030: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.sec int \l0x0032: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x0033: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0034: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0036|0x0036: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkTIME.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkTIME A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

