digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTIME.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x000c: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.year int \l0x000e: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0015: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.mon int \l0x0017: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0019: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001a: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x001e: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.day int \l0x0020: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0022: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0023: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0027: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.hour int \l0x0029: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002b: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x002c: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0030: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.min int \l0x0032: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0034: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0035: INVOKE  (r4 I:int) = (r4 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0039: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.sec int \l}"];
Node_3 [shape=record,label="{3\:\ 0x003b|0x003b: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x003e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0040: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0043: CONST_STR  (r2 I:java.lang.String) =  \"bad chunk \" \l0x0045: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x004b: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004f: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0052|0x0052: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTIME.parseFromRaw((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkTIME A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

