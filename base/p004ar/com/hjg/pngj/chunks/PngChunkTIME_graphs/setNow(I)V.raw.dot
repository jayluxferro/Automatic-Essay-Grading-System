digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTIME.setNow(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.Calendar) =  java.util.Calendar.getInstance():java.util.Calendar type: STATIC \l0x0004: INVOKE  (r1 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC \l0x0008: CAST  (r3 I:long) = (long) (r8 I:int) \l0x0009: CONST  (r5 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x000b: ARITH  (r3 I:long) = (r3 I:long) * (r5 I:long) \l0x000d: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x000e: INVOKE  (r0 I:java.util.Calendar), (r1 I:long) java.util.Calendar.setTimeInMillis(long):void type: VIRTUAL \l0x0011: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0012: INVOKE  (r1 I:int) = (r0 I:java.util.Calendar), (r8 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x0016: IPUT  (r1 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.year int \l0x0018: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r1 I:int) = (r0 I:java.util.Calendar), (r1 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x001d: ARITH  (r1 I:int) = (r1 I:int) + (r8 I:int) \l0x001e: IPUT  (r1 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.mon int \l0x0020: CONST  (r8 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0021: INVOKE  (r8 I:int) = (r0 I:java.util.Calendar), (r8 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x0025: IPUT  (r8 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.day int \l0x0027: CONST  (r8 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r8 I:int) = (r0 I:java.util.Calendar), (r8 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x002d: IPUT  (r8 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.hour int \l0x002f: CONST  (r8 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0031: INVOKE  (r8 I:int) = (r0 I:java.util.Calendar), (r8 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x0035: IPUT  (r8 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.min int \l0x0037: CONST  (r8 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0039: INVOKE  (r8 I:int) = (r0 I:java.util.Calendar), (r8 I:int) java.util.Calendar.get(int):int type: VIRTUAL \l0x003d: IPUT  (r8 I:int), (r7 I:ar.com.hjg.pngj.chunks.PngChunkTIME) ar.com.hjg.pngj.chunks.PngChunkTIME.sec int \l}"];
Node_1 [shape=record,label="{1\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTIME.setNow((r7 'this' I:ar.com.hjg.pngj.chunks.PngChunkTIME A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

