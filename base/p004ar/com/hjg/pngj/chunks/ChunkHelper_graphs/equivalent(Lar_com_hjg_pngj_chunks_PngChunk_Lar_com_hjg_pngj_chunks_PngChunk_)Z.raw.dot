digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.equivalent(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;Lar\/com\/hjg\/pngj\/chunks\/PngChunk;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0056 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0056 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r2 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x000b: IGET  (r3 I:java.lang.String) = (r5 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x000d: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IGET  (r2 I:boolean) = (r4 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.crit boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: INVOKE  (r2 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x001d: INVOKE  (r3 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0024 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: INVOKE  (r2 I:boolean) = (r5 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.allowsMultiple():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002b \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: RETURN  (r0 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.chunks.PngChunkTextVar \l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0040 \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: CHECK_CAST  (r4 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) = (ar.com.hjg.pngj.chunks.PngChunkTextVar) (r4 I:?[OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) ar.com.hjg.pngj.chunks.PngChunkTextVar.getKey():java.lang.String type: VIRTUAL \l0x0035: CHECK_CAST  (r5 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) = (ar.com.hjg.pngj.chunks.PngChunkTextVar) (r5 I:?[OBJECT, ARRAY]) \l0x0037: INVOKE  (r5 I:java.lang.String) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkTextVar) ar.com.hjg.pngj.chunks.PngChunkTextVar.getKey():java.lang.String type: VIRTUAL \l0x003b: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|0x003f: RETURN  (r4 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.chunks.PngChunkSPLT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0055 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|0x0044: CHECK_CAST  (r4 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) = (ar.com.hjg.pngj.chunks.PngChunkSPLT) (r4 I:?[OBJECT, ARRAY]) \l0x0046: INVOKE  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.getPalName():java.lang.String type: VIRTUAL \l0x004a: CHECK_CAST  (r5 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) = (ar.com.hjg.pngj.chunks.PngChunkSPLT) (r5 I:?[OBJECT, ARRAY]) \l0x004c: INVOKE  (r5 I:java.lang.String) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.getPalName():java.lang.String type: VIRTUAL \l0x0050: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|0x0054: RETURN  (r4 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: RETURN  (r1 I:boolean) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|0x0056: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean ar.com.hjg.pngj.chunks.ChunkHelper.equivalent((r4 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_27;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_27;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_27[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
}

