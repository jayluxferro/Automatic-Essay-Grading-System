digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.trimList(Ljava\/util\/List;Lar\/com\/hjg\/pngj\/chunks\/ChunkPredicate;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: INVOKE  (r1 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r1 I:ar.com.hjg.pngj.chunks.PngChunk) = (ar.com.hjg.pngj.chunks.PngChunk) (r1 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:boolean) = \l  (r3 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l  (r1 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunkPredicate.match(ar.com.hjg.pngj.chunks.PngChunk):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0005 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r2 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE \l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static int ar.com.hjg.pngj.chunks.ChunkHelper.trimList((r2 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:ar.com.hjg.pngj.chunks.ChunkPredicate A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lar\/com\/hjg\/pngj\/chunks\/PngChunk;, \>;, Lar\/com\/hjg\/pngj\/chunks\/ChunkPredicate;, )I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_1;
}

