digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.compressBytes([BIIZ)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream A[Catch:\{ Exception \-\> 0x002a \}, TRY_ENTER]\l0x0002: INVOKE  \l  (r0 I:java.io.ByteArrayInputStream)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l java.io.ByteArrayInputStream.\<init\>(byte[], int, int):void type: DIRECT A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x002a \}]\l0x0008: GOTO  \-\> 0x000e A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r1 I:java.util.zip.InflaterInputStream) =  java.util.zip.InflaterInputStream A[Catch:\{ Exception \-\> 0x002a \}]\l0x000b: INVOKE  \l  (r1 I:java.util.zip.InflaterInputStream)\l  (r0 I:java.io.InputStream)\l java.util.zip.InflaterInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: NEW_INSTANCE  (r2 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream A[Catch:\{ Exception \-\> 0x002a \}]\l0x0010: INVOKE  (r2 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001b A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: NEW_INSTANCE  (r3 I:java.util.zip.DeflaterOutputStream) =  java.util.zip.DeflaterOutputStream A[Catch:\{ Exception \-\> 0x002a \}]\l0x0017: INVOKE  \l  (r3 I:java.util.zip.DeflaterOutputStream)\l  (r2 I:java.io.OutputStream)\l java.util.zip.DeflaterOutputStream.\<init\>(java.io.OutputStream):void type: DIRECT A[Catch:\{ Exception \-\> 0x002a \}]\l0x001a: GOTO  \-\> 0x001c A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x002a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: INVOKE  (r1 I:java.io.InputStream), (r3 I:java.io.OutputStream) ar.com.hjg.pngj.chunks.ChunkHelper.shovelInToOut(java.io.InputStream, java.io.OutputStream):void type: STATIC A[Catch:\{ Exception \-\> 0x002a \}]\l0x001f: INVOKE  (r1 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x002a \}]\l0x0022: INVOKE  (r3 I:java.io.OutputStream) java.io.OutputStream.close():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x002a \}]\l0x0025: INVOKE  (r1 I:byte[]) = (r2 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ Exception \-\> 0x002a \}]\l0x0028: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: RETURN  (r1 I:byte[]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x002a: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x002d: INVOKE  \l  (r2 I:ar.com.hjg.pngj.PngjException)\l  (r1 I:java.lang.Throwable)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static byte[] ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes((r1 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

