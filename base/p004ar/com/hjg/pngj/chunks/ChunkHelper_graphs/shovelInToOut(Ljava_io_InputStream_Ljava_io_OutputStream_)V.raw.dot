digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.shovelInToOut(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:byte[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.tmpbuffer byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r1 I:byte[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.tmpbuffer byte[] A[Catch:\{ all \-\> 0x0014 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:int) = (r4 I:java.io.InputStream), (r1 I:byte[]) java.io.InputStream.read(byte[]):int type: VIRTUAL A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0012 A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: SGET  (r2 I:byte[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.tmpbuffer byte[] A[Catch:\{ all \-\> 0x0014 \}]\l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0014 \}]\l0x000e: INVOKE  \l  (r5 I:java.io.OutputStream)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r1 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0014 \}]\l0x0011: GOTO  \-\> 0x0003 A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN   A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0014: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0014 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static void ar.com.hjg.pngj.chunks.ChunkHelper.shovelInToOut((r4 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_2;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

