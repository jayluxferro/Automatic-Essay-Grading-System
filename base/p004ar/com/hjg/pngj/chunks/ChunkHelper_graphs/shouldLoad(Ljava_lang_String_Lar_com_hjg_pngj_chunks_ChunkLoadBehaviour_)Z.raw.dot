digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.shouldLoad(Ljava\/lang\/String;Lar\/com\/hjg\/pngj\/chunks\/ChunkLoadBehaviour;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.isCritical(java.lang.String):boolean type: STATIC \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: SGET  (r0 I:int[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.1.$SwitchMap$ar$com$hjg$pngj$chunks$ChunkLoadBehaviour int[] \l0x000a: INVOKE  (r3 I:int) = (r3 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour) ar.com.hjg.pngj.chunks.ChunkLoadBehaviour.ordinal():int type: VIRTUAL \l0x000e: AGET  (r3 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x001b, 0x0016, 0x0015] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.isSafeToCopy(java.lang.String):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean ar.com.hjg.pngj.chunks.ChunkHelper.shouldLoad((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:ar.com.hjg.pngj.chunks.ChunkLoadBehaviour A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_4 -> Node_7;
Node_4 -> Node_9;
Node_7 -> Node_8;
}

