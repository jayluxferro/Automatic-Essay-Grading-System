digraph "CFG forar.com.hjg.pngj.chunks.ChunkHelper.compressBytes([BIIZ)[B" {
subgraph cluster_Region_1922273260 {
label = "R(1:(6:1|(1:3)(1:4)|5|6|9|10)) | DECL_VAR: java.io.InputStream null\l";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1528178904 {
label = "Try: R(6:1|(1:3)(1:4)|5|6|9|10) catches: R(2:11|13)";
node [shape=record,color=blue];
subgraph cluster_Region_783459963 {
label = "R(6:1|(1:3)(1:4)|5|6|9|10)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x002a \}\lSplitter:B:0:0x0000\l|java.io.ByteArrayInputStream java.io.ByteArrayInputStream r0 = new java.io.ByteArrayInputStream(r1, r2, r3)     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
subgraph cluster_IfRegion_1897601482 {
label = "IF [B:2:0x0005] THEN: R(1:3) ELSE: R(1:4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|Catch:\{ Exception \-\> 0x002a \}\l|if (r4 == true) goto L_0x0007     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
subgraph cluster_Region_960149998 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|Catch:\{ Exception \-\> 0x002a \}\l|r1 = r0     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
}
subgraph cluster_Region_2112166809 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|Catch:\{ Exception \-\> 0x002a \}\l|java.util.zip.InflaterInputStream r1 = new java.util.zip.InflaterInputStream(r0)     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000e|Catch:\{ Exception \-\> 0x002a \}\lPHI: r1 \l  PHI: (r1v2 java.io.InputStream) = (r1v4 java.io.InputStream), (r1v5 java.io.InputStream) binds: [B:4:0x0009, B:3:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream r2 = new java.io.ByteArrayOutputStream()     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|Catch:\{ Exception \-\> 0x002a \}\l|java.io.OutputStream r3 = r4 ? new java.util.zip.DeflaterOutputStream(r2) : r2\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|Catch:\{ Exception \-\> 0x002a \}\lPHI: r3 \l  PHI: (r3v1 java.io.OutputStream) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|shovelInToOut(r1, r3)     \/\/ Catch:\{ Exception \-\> 0x002a \}\lr1.close()     \/\/ Catch:\{ Exception \-\> 0x002a \}\lr3.close()     \/\/ Catch:\{ Exception \-\> 0x002a \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|RETURN\l|return r2.toByteArray()\l}"];
}
subgraph cluster_Region_27265906 {
label = "R(2:11|13) | ExcHandler: Exception (r1v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002a|ExcHandler: Exception (r1v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|throw new p004ar.com.hjg.pngj.PngjException((java.lang.Throwable) r1)\l}"];
}
}
}
subgraph cluster_Region_27265906 {
label = "R(2:11|13) | ExcHandler: Exception (r1v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002a|ExcHandler: Exception (r1v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|throw new p004ar.com.hjg.pngj.PngjException((java.lang.Throwable) r1)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0015|Catch:\{ Exception \-\> 0x002a \}\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001b|Catch:\{ Exception \-\> 0x002a \}\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002b}"];
MethodNode[shape=record,label="{public static byte[] ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes((r1v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_12;
Node_0 -> Node_1;
Node_0 -> Node_11;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_12 -> Node_13;
}

