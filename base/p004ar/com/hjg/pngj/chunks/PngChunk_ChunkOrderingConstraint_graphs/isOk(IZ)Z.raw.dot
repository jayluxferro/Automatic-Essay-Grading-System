digraph "CFG forar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.isOk(IZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.NONE ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.BEFORE_IDAT ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r6 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.BEFORE_PLTE_AND_IDAT ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l0x0013: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: IF  (r6 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:13:0x0019 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|0x001a: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|0x001b: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.AFTER_PLTE_BEFORE_IDAT ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x002b \l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0026 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0021|0x0021: IF  (r6 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|0x0026: IF  (r6 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0028|0x0028: IF  (r6 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|0x002a: RETURN  (r1 I:boolean) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.isOk((r5 'this' I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_20;
Node_18 -> Node_23[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_20;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_20;
Node_22 -> Node_23[style=dashed];
}

