digraph "CFG forar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoBeforePLTE()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.BEFORE_PLTE_AND_IDAT ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoBeforePLTE((r1 'this' I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

