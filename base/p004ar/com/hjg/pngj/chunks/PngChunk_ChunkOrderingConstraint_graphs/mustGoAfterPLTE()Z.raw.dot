digraph "CFG forar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoAfterPLTE()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.AFTER_PLTE_BEFORE_IDAT ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint) =  ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.AFTER_PLTE_BEFORE_IDAT_PLTE_REQUIRED ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.chunks.PngChunk.ChunkOrderingConstraint.mustGoAfterPLTE((r1 'this' I:ar.com.hjg.pngj.chunks.PngChunk$ChunkOrderingConstraint A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

