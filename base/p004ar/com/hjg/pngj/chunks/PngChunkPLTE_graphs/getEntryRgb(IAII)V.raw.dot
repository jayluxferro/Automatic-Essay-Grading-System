digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.getEntryRgb(I[II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.entries int[] \l0x0002: AGET  (r3 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0004: ARITH  (r0 I:int) = (r5 I:int) + (0 int) \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (16711680(0xff0000, float:2.3418052E\-38) ?[int, float, short, byte, char])\l \l0x0008: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r3 I:?[int, boolean, short, byte, char]) \l0x0009: ARITH  (r1 I:int) = (r1 I:int) \>\> (16 int) \l0x000b: APUT  \l  (r4 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x000d: ARITH  (r0 I:int) = (r5 I:int) + (1 int) \l0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (65280(0xff00, float:9.1477E\-41) ?[int, float, short, byte, char])\l \l0x0012: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r3 I:?[int, boolean, short, byte, char]) \l0x0013: ARITH  (r1 I:int) = (r1 I:int) \>\> (8 int) \l0x0015: APUT  \l  (r4 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x0017: ARITH  (r5 I:int) = (r5 I:int) + (2 int) \l0x0019: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001b: APUT  \l  (r4 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntryRgb((r2 'this' I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

