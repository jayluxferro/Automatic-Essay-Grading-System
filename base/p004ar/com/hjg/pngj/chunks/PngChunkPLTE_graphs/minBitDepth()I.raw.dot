digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.minBitDepth()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN  (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:10:0x0014 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: RETURN  (r2 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.chunks.PngChunkPLTE.minBitDepth((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
}

