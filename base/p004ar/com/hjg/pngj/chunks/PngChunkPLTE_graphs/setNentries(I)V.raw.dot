digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.setNentries(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r3 I:int), (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0002: IGET  (r3 I:int) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r3 I:int) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r3 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r3 I:int[]) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.entries int[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r3 I:int[]) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.entries int[] \l0x0013: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0014: IGET  (r0 I:int) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IGET  (r3 I:int) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x001a: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001c: IPUT  (r3 I:int[]), (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.entries int[] \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0021: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0023: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"invalid pallette \- nentries=\" \l0x0028: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002b: IGET  (r1 I:int) = (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x002d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  \l  (r3 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkPLTE.setNentries((r2 'this' I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

