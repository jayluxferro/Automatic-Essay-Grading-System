digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) \/ (3 int) \l0x0004: INVOKE  (r6 I:ar.com.hjg.pngj.chunks.PngChunkPLTE), (r0 I:int) ar.com.hjg.pngj.chunks.PngChunkPLTE.setNentries(int):void type: VIRTUAL \l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IGET  (r2 I:int) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x002c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r2 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000f: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x0011: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0013: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0015: IGET  (r2 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0017: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x0019: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x001b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001d: IGET  (r3 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001f: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x0021: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0023: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0025: INVOKE  \l  (r6 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l ar.com.hjg.pngj.chunks.PngChunkPLTE.setEntry(int, int, int, int):void type: VIRTUAL \l0x0028: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x002a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkPLTE.parseFromRaw((r6 'this' I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS]), (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

