digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|setNentries(r7.len \/ 3)\lr0 = 0\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v4 int) binds: [B:0:0x0000, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0009\-\>B:3:0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r0 \>= r6.nentries) goto L_0x002c\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0009\-\>B:3:0x000d\l|int r3 = r1 + 1\lint r4 = r3 + 1\lsetEntry(r0, r7.data[r1] & 255, r7.data[r3] & 255, r7.data[r4] & 255)\lint r0 = r0 + 1\lr1 = r4 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkPLTE.parseFromRaw((r6v0 'this' ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS]), (r7v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

