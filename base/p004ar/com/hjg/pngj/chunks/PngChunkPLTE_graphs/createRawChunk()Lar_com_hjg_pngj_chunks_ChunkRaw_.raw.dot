digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPLTE.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) * (3 int) \l0x0005: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r0 I:int)\l  (r2 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkPLTE.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IGET  (r6 I:int) = (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) ar.com.hjg.pngj.chunks.PngChunkPLTE.nentries int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:4:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  \l  (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r4 I:int)\l  (r1 I:int[])\l ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntryRgb(int, int[]):void type: VIRTUAL \l0x0016: IGET  (r6 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0018: ARITH  (r7 I:int) = (r5 I:int) + (1 int) \l0x001a: AGET  (r8 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x001c: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x001d: APUT  \l  (r6 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x001f: IGET  (r5 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0021: ARITH  (r6 I:int) = (r7 I:int) + (1 int) \l0x0023: AGET  (r8 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0025: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x0026: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x0028: IGET  (r5 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002a: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x002c: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002d: AGET  (r8 I:?[int, float]) = (r1 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x002f: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x0030: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x0032: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0034: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkPLTE.createRawChunk((r9 'this' I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

