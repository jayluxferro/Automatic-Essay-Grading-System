digraph "CFG forar.com.hjg.pngj.chunks.PngChunkCHRM.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkCHRM.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0007: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.whitex double \l0x0009: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x000d: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0013: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.whitey double \l0x0015: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x0019: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x001c: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x001f: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.redx double \l0x0021: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x0025: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0027: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x002c: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.redy double \l0x002e: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x0032: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0034: CONST  (r3 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0039: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.greenx double \l0x003b: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x003f: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0041: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0043: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0046: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.greeny double \l0x0048: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x004c: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x004e: CONST  (r3 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l0x0050: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0053: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.bluex double \l0x0055: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x0059: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x005b: CONST  (r3 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l0x005d: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0060: IGET  (r1 I:double) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.bluey double \l0x0062: INVOKE  (r1 I:int) = (r1 I:double) ar.com.hjg.pngj.PngHelperInternal.doubleToInt100000(double):int type: STATIC \l0x0066: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0068: CONST  (r3 I:?[int, float, short, byte, char]) = (28 ?[int, float, short, byte, char]) \l0x006a: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x006d|0x006d: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkCHRM.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkCHRM A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

