digraph "CFG forar.com.hjg.pngj.chunks.PngChunkCHRM.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0075 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x000d: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x0011: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.whitex double \l0x0013: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0015: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x001a: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x001e: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.whitey double \l0x0020: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0022: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0024: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0028: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x002c: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.redx double \l0x002e: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0030: CONST  (r1 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0032: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0036: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x003a: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.redy double \l0x003c: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x003e: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0040: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0044: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x0048: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.greenx double \l0x004a: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x004c: CONST  (r1 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l0x004e: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0052: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x0056: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.greeny double \l0x0058: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x005a: CONST  (r1 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l0x005c: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0060: INVOKE  (r0 I:double) = (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x0064: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.bluex double \l0x0066: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0068: CONST  (r0 I:?[int, float, short, byte, char]) = (28 ?[int, float, short, byte, char]) \l0x006a: INVOKE  (r4 I:int) = (r4 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x006e: INVOKE  (r0 I:double) = (r4 I:int) ar.com.hjg.pngj.PngHelperInternal.intToDouble100000(int):double type: STATIC \l0x0072: IPUT  (r0 I:double), (r3 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) ar.com.hjg.pngj.chunks.PngChunkCHRM.bluey double \l}"];
Node_3 [shape=record,label="{3\:\ 0x0074|0x0074: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0075|0x0075: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0077: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0079: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007c: CONST_STR  (r2 I:java.lang.String) =  \"bad chunk \" \l0x007e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0081: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0084: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0088: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x008b|0x008b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkCHRM.parseFromRaw((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkCHRM A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

