digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTRNS.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4.imgInfo.greyscale == false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|r4.gray = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r5.data, 0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r4.imgInfo.indexed == false) goto L_0x002c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|int r0 = r5.data.length\lr4.paletteAlpha = new int[r0]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v0 int), (r1v3 int) binds: [B:5:0x0016, B:7:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x001d\-\>B:7:0x001f\l|if (r1 \>= r0) goto L_0x0046\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|LOOP_END\lLOOP:0: B:6:0x001d\-\>B:7:0x001f\l|r4.paletteAlpha[r1] = r5.data[r1] & 255\lint r1 = r1 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|r4.red = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r5.data, 0)\lr4.green = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r5.data, 2)\lr4.blue = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r5.data, 4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTRNS.parseFromRaw((r4v0 'this' ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, THIS]), (r5v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_6;
Node_8 -> Node_10;
Node_9 -> Node_12;
}

