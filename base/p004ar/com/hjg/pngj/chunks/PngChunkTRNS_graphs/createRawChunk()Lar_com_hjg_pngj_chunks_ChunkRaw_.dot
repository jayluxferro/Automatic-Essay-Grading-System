digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTRNS.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4.imgInfo.greyscale == false) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|ar.com.hjg.pngj.chunks.ChunkRaw r0 = createEmptyChunk(2, true)\lp004ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(r4.gray, r0.data, 0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r4.imgInfo.indexed == false) goto L_0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|ar.com.hjg.pngj.chunks.ChunkRaw r0 = createEmptyChunk(r4.paletteAlpha.length, true)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:5:0x001b, B:8:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0022\-\>B:8:0x0026\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if (r2 \>= r0.len) goto L_0x004c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|LOOP_END\lLOOP:0: B:6:0x0022\-\>B:8:0x0026\l|r0.data[r2] = (byte) r4.paletteAlpha[r2]\lint r2 = r2 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|ar.com.hjg.pngj.chunks.ChunkRaw r0 = createEmptyChunk(6, true)\lp004ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(r4.red, r0.data, 0)\lp004ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(r4.green, r0.data, 0)\lp004ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(r4.blue, r0.data, 0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkTRNS.createRawChunk((r4v0 'this' ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_6;
Node_9 -> Node_11;
Node_10 -> Node_13;
}

