digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTRNS.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0009: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkTRNS.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x000d: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.gray int \l0x000f: IGET  (r3 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0011: INVOKE  (r1 I:int), (r3 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(int, byte[], int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0017: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r0 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x001d: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x001e: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkTRNS.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IGET  (r1 I:int) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:10:0x004c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0028: IGET  (r3 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x002a: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x002c: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x002d: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x002f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0033: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkTRNS.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0037: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.red int \l0x0039: IGET  (r3 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x003b: INVOKE  (r1 I:int), (r3 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(int, byte[], int):void type: STATIC \l0x003e: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.green int \l0x0040: IGET  (r3 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0042: INVOKE  (r1 I:int), (r3 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(int, byte[], int):void type: STATIC \l0x0045: IGET  (r1 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.blue int \l0x0047: IGET  (r3 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0049: INVOKE  (r1 I:int), (r3 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(int, byte[], int):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkTRNS.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_6;
Node_9 -> Node_10;
}

