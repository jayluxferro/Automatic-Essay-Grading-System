digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTRNS.setIndexEntryAsTransparent(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0009: ARITH  (r1 I:int) = (r5 I:int) + (1 int) \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: APUT  \l  (r0 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x000e: IPUT  (r0 I:int[]), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:5:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IGET  (r1 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x0017: APUT  \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IGET  (r0 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x001e: APUT  \l  (r0 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"only indexed images support this\" \l0x0025: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTRNS.setIndexEntryAsTransparent((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

