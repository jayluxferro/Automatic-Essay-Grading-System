digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTRNS.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r5 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0009: INVOKE  (r5 I:int) = (r5 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x000d: IPUT  (r5 I:int), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.gray int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0012: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r0 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0018: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0019: NEW_ARRAY  (r2 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001b: IPUT  (r2 I:int[]), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0046 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r2 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.paletteAlpha int[] \l0x0021: IGET  (r3 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0023: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0025: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0027: APUT  \l  (r2 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0029: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IGET  (r0 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002e: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x0032: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.red int \l0x0034: IGET  (r0 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0036: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0037: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x003b: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.green int \l0x003d: IGET  (r5 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x003f: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0040: INVOKE  (r5 I:int) = (r5 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x0044: IPUT  (r5 I:int), (r4 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.blue int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTRNS.parseFromRaw((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, THIS]), (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_6;
Node_8 -> Node_9;
}

