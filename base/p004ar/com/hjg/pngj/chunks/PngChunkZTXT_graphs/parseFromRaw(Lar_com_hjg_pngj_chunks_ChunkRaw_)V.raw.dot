digraph "CFG forar.com.hjg.pngj.chunks.PngChunkZTXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0009: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0047 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0015: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0016: ARITH  (r2 I:int) = (r2 I:int) + (\-2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:16:0x0047 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001c: INVOKE  (r2 I:java.lang.String) = (r2 I:byte[]), (r0 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x0020: IPUT  \l  (r2 I:java.lang.String)\l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT)\l ar.com.hjg.pngj.chunks.PngChunkZTXT.key java.lang.String \l0x0022: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0024: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x0026: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002c: ARITH  (r3 I:int) = (r1 I:int) + (2 int) \l0x002e: IGET  (r5 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0030: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x0031: ARITH  (r5 I:int) = (r5 I:int) \- (r1 I:int) \l0x0032: ARITH  (r5 I:int) = (r5 I:int) + (\-2 int) \l0x0034: INVOKE  (r5 I:byte[]) = (r2 I:byte[]), (r3 I:int), (r5 I:int), (r0 I:boolean) ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(byte[], int, int, boolean):byte[] type: STATIC \l0x0038: INVOKE  (r5 I:java.lang.String) = (r5 I:byte[]) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[]):java.lang.String type: STATIC \l0x003c: IPUT  \l  (r5 I:java.lang.String)\l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT)\l ar.com.hjg.pngj.chunks.PngChunkZTXT.val java.lang.String \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0041: CONST_STR  (r0 I:java.lang.String) =  \"bad zTXt chunk: unknown compression method\" \l0x0043: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0049: CONST_STR  (r0 I:java.lang.String) =  \"bad zTXt chunk: no separator found\" \l0x004b: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkZTXT.parseFromRaw((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkZTXT A[IMMUTABLE_TYPE, THIS]), (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

