digraph "CFG forar.com.hjg.pngj.chunks.PngChunkZTXT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT) ar.com.hjg.pngj.chunks.PngChunkZTXT.key java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT) ar.com.hjg.pngj.chunks.PngChunkZTXT.key java.lang.String \l0x0006: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0046 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|SYNTHETIC\lSplitter:B:4:0x0010\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0010\l|0x0010: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream A[Catch:\{ IOException \-\> 0x003f \}, TRY_ENTER]\l0x0012: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x003f \}]\l0x0015: IGET  (r1 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT) ar.com.hjg.pngj.chunks.PngChunkZTXT.key java.lang.String A[Catch:\{ IOException \-\> 0x003f \}]\l0x0017: INVOKE  (r1 I:byte[]) = (r1 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(java.lang.String):byte[] type: STATIC A[Catch:\{ IOException \-\> 0x003f \}]\l0x001b: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:byte[]) java.io.ByteArrayOutputStream.write(byte[]):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x003f \}]\l0x001f: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x0022: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x0025: IGET  (r2 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT) ar.com.hjg.pngj.chunks.PngChunkZTXT.val java.lang.String A[Catch:\{ IOException \-\> 0x003f \}]\l0x0027: INVOKE  (r2 I:byte[]) = (r2 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(java.lang.String):byte[] type: STATIC A[Catch:\{ IOException \-\> 0x003f \}]\l0x002b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x003f \}]\l0x002c: INVOKE  (r2 I:byte[]) = (r2 I:byte[]), (r3 I:boolean) ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(byte[], boolean):byte[] type: STATIC A[Catch:\{ IOException \-\> 0x003f \}]\l0x0030: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r2 I:byte[]) java.io.ByteArrayOutputStream.write(byte[]):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x0033: INVOKE  (r0 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x0037: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) A[Catch:\{ IOException \-\> 0x003f \}]\l0x0038: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkZTXT)\l  (r2 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkZTXT.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x003c: IPUT  (r0 I:byte[]), (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] A[Catch:\{ IOException \-\> 0x003f \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: RETURN  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|ExcHandler: IOException null\lSplitter:B:4:0x0010\l|0x003f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0042: INVOKE  \l  (r1 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.Throwable)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0048: CONST_STR  (r1 I:java.lang.String) =  \"Text chunk key must be non empty\" \l0x004a: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkZTXT.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkZTXT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

