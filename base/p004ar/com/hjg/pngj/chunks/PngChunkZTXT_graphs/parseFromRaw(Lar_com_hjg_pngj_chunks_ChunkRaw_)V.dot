digraph "CFG forar.com.hjg.pngj.chunks.PngChunkZTXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v4 int) binds: [B:0:0x0000, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r1 \>= r5.data.length) goto L_0x0010\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r5.data[r1] == 0) goto L_0x0011\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000d\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|r1 = \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|PHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v1 int) binds: [B:6:0x0010, B:19:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< 0) goto L_0x0047\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013}"];
Node_9 [shape=record,label="{9\:\ 0x0018|if (r1 \> (r5.data.length + \-2)) goto L_0x0047\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|r4.key = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r5.data, 0, r1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|if (r5.data[r1 + 1] != 0) goto L_0x003f\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|r4.val = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(p004ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(r5.data, r1 + 2, (r5.data.length \- r1) + \-2, false))\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x003f}"];
Node_15 [shape=record,label="{15\:\ 0x0046|throw new p004ar.com.hjg.pngj.PngjException(\"bad zTXt chunk: unknown compression method\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047}"];
Node_17 [shape=record,label="{17\:\ 0x004e|throw new p004ar.com.hjg.pngj.PngjException(\"bad zTXt chunk: no separator found\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkZTXT.parseFromRaw((r4v0 'this' ar.com.hjg.pngj.chunks.PngChunkZTXT A[IMMUTABLE_TYPE, THIS]), (r5v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_6;
Node_19 -> Node_7;
}

