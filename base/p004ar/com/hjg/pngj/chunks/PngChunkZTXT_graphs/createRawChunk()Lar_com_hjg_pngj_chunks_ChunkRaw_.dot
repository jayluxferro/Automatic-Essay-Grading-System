digraph "CFG forar.com.hjg.pngj.chunks.PngChunkZTXT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.key == null) goto L_0x0046\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r4.key.trim().length() == 0) goto L_0x0046\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|SYNTHETIC\lSplitter:B:4:0x0010\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x003f \}\lSplitter:B:4:0x0010\l|java.io.ByteArrayOutputStream r0 = new java.io.ByteArrayOutputStream()     \/\/ Catch:\{ IOException \-\> 0x003f \}\lr0.write(p004ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(r4.key))     \/\/ Catch:\{ IOException \-\> 0x003f \}\lr0.write(0)     \/\/ Catch:\{ IOException \-\> 0x003f \}\lr0.write(0)     \/\/ Catch:\{ IOException \-\> 0x003f \}\lr0.write(p004ar.com.hjg.pngj.chunks.ChunkHelper.compressBytes(p004ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(r4.val), true))     \/\/ Catch:\{ IOException \-\> 0x003f \}\lbyte[] r0 = r0.toByteArray()     \/\/ Catch:\{ IOException \-\> 0x003f \}\lar.com.hjg.pngj.chunks.ChunkRaw r1 = createEmptyChunk(r0.length, false)     \/\/ Catch:\{ IOException \-\> 0x003f \}\lr1.data = r0     \/\/ Catch:\{ IOException \-\> 0x003f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|ExcHandler: IOException (r0v5 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0010\l|java.io.IOException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040}"];
Node_9 [shape=record,label="{9\:\ 0x0045|throw new p004ar.com.hjg.pngj.PngjException((java.lang.Throwable) r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0046}"];
Node_11 [shape=record,label="{11\:\ 0x004d|throw new p004ar.com.hjg.pngj.PngjException(\"Text chunk key must be non empty\")\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkZTXT.createRawChunk((r4v0 'this' ar.com.hjg.pngj.chunks.PngChunkZTXT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

