digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSBIT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.getCLen():int type: DIRECT \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkSBIT.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0009: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000b: IGET  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0012: IGET  (r4 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.graysb int \l0x0014: CAST  (r4 I:byte) = (byte) (r4 I:int) \l0x0015: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0017: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0019: IGET  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0049 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001f: IGET  (r3 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.alphasb int \l0x0021: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0022: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0027: IGET  (r4 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.redsb int \l0x0029: CAST  (r4 I:byte) = (byte) (r4 I:int) \l0x002a: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x002c: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002e: IGET  (r3 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.greensb int \l0x0030: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0031: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0033: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0035: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0036: IGET  (r3 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.bluesb int \l0x0038: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0039: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x003b: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x003d: IGET  (r1 I:boolean) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|0x003f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0049 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0043: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0044: IGET  (r3 I:int) = (r5 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.alphasb int \l0x0046: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0047: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|0x0049: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkSBIT.createRawChunk((r5 'this' I:ar.com.hjg.pngj.chunks.PngChunkSBIT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

