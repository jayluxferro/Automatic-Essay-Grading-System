digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSBIT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
subgraph cluster_Region_1406880264 {
label = "R(3:0|(2:2|(1:4))(2:5|(1:7))|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|ar.com.hjg.pngj.chunks.ChunkRaw p004ar.com.hjg.pngj.chunks.ChunkRaw r0 = createEmptyChunk(getCLen(), true)\l}"];
subgraph cluster_IfRegion_1231103955 {
label = "IF [B:1:0x000e] THEN: R(2:2|(1:4)) ELSE: R(2:5|(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r5.imgInfo.greyscale == true) goto L_0x0010\l}"];
subgraph cluster_Region_618123840 {
label = "R(2:2|(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|r0.data[0] = (byte) r5.graysb\l}"];
subgraph cluster_IfRegion_832960555 {
label = "IF [B:3:0x001b] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001b|if (r5.imgInfo.alpha == true) goto L_0x001d\l}"];
subgraph cluster_Region_430626561 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|r0.data[1] = (byte) r5.alphasb\l}"];
}
}
}
subgraph cluster_Region_911234236 {
label = "R(2:5|(1:7))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0025|r0.data[0] = (byte) r5.redsb\lr0.data[1] = (byte) r5.greensb\lr0.data[2] = (byte) r5.bluesb\l}"];
subgraph cluster_IfRegion_912704705 {
label = "IF [B:6:0x003f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x003f|if (r5.imgInfo.alpha == true) goto L_0x0041\l}"];
subgraph cluster_Region_1070781300 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0041|r0.data[3] = (byte) r5.alphasb\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0049|RETURN\l|return r0\l}"];
}
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkSBIT.createRawChunk((r5v0 'this' ar.com.hjg.pngj.chunks.PngChunkSBIT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
}

