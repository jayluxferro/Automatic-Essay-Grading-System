digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSBIT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: INVOKE  (r1 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.getCLen():int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0050 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000a: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0012: INVOKE  (r0 I:int) = (r0 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0016: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.graysb int \l0x0018: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x001a: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004f \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0020: INVOKE  (r4 I:int) = (r4 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0024: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.alphasb int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0029: INVOKE  (r0 I:int) = (r0 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x002d: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.redsb int \l0x002f: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0031: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0035: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.greensb int \l0x0037: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0039: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003a: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x003e: IPUT  (r0 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.bluesb int \l0x0040: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0042: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0048: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0049: INVOKE  (r4 I:int) = (r4 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x004d: IPUT  (r4 I:int), (r3 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) ar.com.hjg.pngj.chunks.PngChunkSBIT.alphasb int \l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0052: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0054: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0057: CONST_STR  (r2 I:java.lang.String) =  \"bad chunk length \" \l0x0059: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0063: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0066|0x0066: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSBIT.parseFromRaw((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkSBIT A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

