digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSBIT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4.len != getCLen()) goto L_0x0050\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r3.imgInfo.greyscale == false) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|r3.graysb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|if (r3.imgInfo.alpha == false) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|r3.alphasb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|r3.redsb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 0)\lr3.greensb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 1)\lr3.bluesb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|if (r3.imgInfo.alpha == false) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|r3.alphasb = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r4.data, 3)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0050|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"bad chunk length \")\lr1.append(r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0066|throw new p004ar.com.hjg.pngj.PngjException(r1.toString())\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSBIT.parseFromRaw((r3v0 'this' ar.com.hjg.pngj.chunks.PngChunkSBIT A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_12;
Node_10 -> Node_11;
}

