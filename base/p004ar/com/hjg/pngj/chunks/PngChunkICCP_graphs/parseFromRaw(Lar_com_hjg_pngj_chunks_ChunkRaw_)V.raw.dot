digraph "CFG forar.com.hjg.pngj.chunks.PngChunkICCP.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0002: INVOKE  (r0 I:int) = (r0 I:byte[]) ar.com.hjg.pngj.chunks.ChunkHelper.posNullByte(byte[]):int type: STATIC \l0x0006: IGET  (r1 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r1 I:java.lang.String) = (r1 I:byte[]), (r2 I:int), (r0 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x000d: IPUT  \l  (r1 I:java.lang.String)\l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkICCP)\l ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x000f: IGET  (r1 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0011: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x0013: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0015: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: IGET  (r1 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001b: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x001c: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l0x001e: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x001f: NEW_ARRAY  (r3 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0021: IPUT  (r3 I:byte[]), (r4 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.compressedProfile byte[] \l0x0023: IGET  (r5 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0025: IGET  (r3 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.compressedProfile byte[] \l0x0027: INVOKE  \l  (r5 I:java.lang.Object)\l  (r0 I:int)\l  (r3 I:java.lang.Object)\l  (r2 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x002d: CONST_STR  (r0 I:java.lang.String) =  \"bad compression for ChunkTypeICCP\" \l0x002f: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkICCP.parseFromRaw((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkICCP A[IMMUTABLE_TYPE, THIS]), (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

