digraph "CFG forar.com.hjg.pngj.chunks.PngChunkICCP.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0006: IGET  (r1 I:byte[]) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.compressedProfile byte[] \l0x0008: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0009: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkICCP.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0011: IGET  (r2 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x0013: INVOKE  (r2 I:byte[]) = (r2 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(java.lang.String):byte[] type: STATIC \l0x0017: IGET  (r3 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0019: IGET  (r4 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x001b: INVOKE  (r4 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: INVOKE  \l  (r2 I:java.lang.Object)\l  (r5 I:int)\l  (r3 I:java.lang.Object)\l  (r5 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0023: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0025: IGET  (r3 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x0027: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x002b: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x002d: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x002f: IGET  (r3 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x0031: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0035: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x0036: APUT  \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0038: IGET  (r1 I:byte[]) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.compressedProfile byte[] \l0x003a: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x003c: IGET  (r3 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.profileName java.lang.String \l0x003e: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0042: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l0x0044: IGET  (r4 I:byte[]) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkICCP) ar.com.hjg.pngj.chunks.PngChunkICCP.compressedProfile byte[] \l0x0046: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0047: INVOKE  \l  (r1 I:java.lang.Object)\l  (r5 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x004a|0x004a: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkICCP.createRawChunk((r6 'this' I:ar.com.hjg.pngj.chunks.PngChunkICCP A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

