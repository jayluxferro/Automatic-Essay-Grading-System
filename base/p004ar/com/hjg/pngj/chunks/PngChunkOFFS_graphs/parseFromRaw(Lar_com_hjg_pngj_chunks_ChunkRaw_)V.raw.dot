digraph "CFG forar.com.hjg.pngj.chunks.PngChunkOFFS.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x000d: CAST  (r0 I:long) = (long) (r0 I:int) \l0x000e: IPUT  (r0 I:long), (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posX long \l0x0010: IGET  (r0 I:long) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posX long \l0x0012: CONST  (r2 I:?[long, double]) = \l  (4294967296(0x100000000, double:2.121995791E\-314) ?[long, double])\l \l0x0017: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0019: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IGET  (r0 I:long) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posX long \l0x001f: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0020: IPUT  (r0 I:long), (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posX long \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IGET  (r0 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0024: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0025: INVOKE  (r0 I:int) = (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x0029: CAST  (r0 I:long) = (long) (r0 I:int) \l0x002a: IPUT  (r0 I:long), (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posY long \l0x002c: IGET  (r0 I:long) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posY long \l0x002e: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: IGET  (r0 I:long) = (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posY long \l0x0034: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0035: IPUT  (r0 I:long), (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.posY long \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: IGET  (r7 I:byte[]) = (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0039: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x003b: INVOKE  (r7 I:int) = (r7 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x003f: IPUT  (r7 I:int), (r6 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) ar.com.hjg.pngj.chunks.PngChunkOFFS.units int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0044: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0049: CONST_STR  (r2 I:java.lang.String) =  \"bad chunk length \" \l0x004b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0055: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r7 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkOFFS.parseFromRaw((r6 'this' I:ar.com.hjg.pngj.chunks.PngChunkOFFS A[IMMUTABLE_TYPE, THIS]), (r7 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

