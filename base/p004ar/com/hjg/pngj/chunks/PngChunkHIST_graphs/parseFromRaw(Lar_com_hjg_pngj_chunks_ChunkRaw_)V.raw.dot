digraph "CFG forar.com.hjg.pngj.chunks.PngChunkHIST.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkHIST) ar.com.hjg.pngj.chunks.PngChunkHIST.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0008: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0009: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x000b: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000d: IPUT  (r0 I:int[]), (r4 I:ar.com.hjg.pngj.chunks.PngChunkHIST) ar.com.hjg.pngj.chunks.PngChunkHIST.hist int[] \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r1 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkHIST) ar.com.hjg.pngj.chunks.PngChunkHIST.hist int[] \l0x0012: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r1 I:int[]) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkHIST) ar.com.hjg.pngj.chunks.PngChunkHIST.hist int[] \l0x0017: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0019: ARITH  (r3 I:int) = (r0 I:int) * (2 int) \l0x001b: INVOKE  (r2 I:int) = (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x001f: APUT  \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0021: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0027: CONST_STR  (r0 I:java.lang.String) =  \"only indexed images accept a HIST chunk\" \l0x0029: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkHIST.parseFromRaw((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkHIST A[IMMUTABLE_TYPE, THIS]), (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_7 -> Node_8;
}

