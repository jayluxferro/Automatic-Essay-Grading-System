digraph "CFG forar.com.hjg.pngj.chunks.PngChunkHIST.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r5.imgInfo.indexed == false) goto L_0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|ar.com.hjg.pngj.chunks.ChunkRaw r0 = createEmptyChunk(r5.hist.length * 2, true)\lr1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:2:0x0006, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0011\-\>B:5:0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r1 \>= r5.hist.length) goto L_0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:3:0x0011\-\>B:5:0x0016\l|p004ar.com.hjg.pngj.PngHelperInternal.writeInt2tobytes(r5.hist[r1], r0.data, r1 * 2)\lint r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025}"];
Node_8 [shape=record,label="{8\:\ 0x002c|throw new p004ar.com.hjg.pngj.PngjException(\"only indexed images accept a HIST chunk\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkHIST.createRawChunk((r5v0 'this' ar.com.hjg.pngj.chunks.PngChunkHIST A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_6;
}

