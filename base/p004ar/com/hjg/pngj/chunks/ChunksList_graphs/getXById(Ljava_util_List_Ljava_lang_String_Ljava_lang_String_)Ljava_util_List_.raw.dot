digraph "CFG forar.com.hjg.pngj.chunks.ChunksList.getXById(Ljava\/util\/List;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.chunks.ChunksList$1) =  ar.com.hjg.pngj.chunks.ChunksList$1 \l0x0004: INVOKE  \l  (r3 I:ar.com.hjg.pngj.chunks.ChunksList$1)\l  (r2 I:java.lang.String)\l ar.com.hjg.pngj.chunks.ChunksList.1.\<init\>(java.lang.String):void type: DIRECT \l0x0007: INVOKE  (r1 I:java.util.List) = \l  (r1 I:java.util.List)\l  (r3 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l ar.com.hjg.pngj.chunks.ChunkHelper.filterList(java.util.List, ar.com.hjg.pngj.chunks.ChunkPredicate):java.util.List type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r1 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.chunks.ChunksList$2) =  ar.com.hjg.pngj.chunks.ChunksList$2 \l0x000e: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksList$2)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l ar.com.hjg.pngj.chunks.ChunksList.2.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0011: INVOKE  (r1 I:java.util.List) = \l  (r1 I:java.util.List)\l  (r0 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l ar.com.hjg.pngj.chunks.ChunkHelper.filterList(java.util.List, ar.com.hjg.pngj.chunks.ChunkPredicate):java.util.List type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r1 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\>) \l}"];
MethodNode[shape=record,label="{protected static java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\> ar.com.hjg.pngj.chunks.ChunksList.getXById((r1 I:java.util.List\<ar.com.hjg.pngj.chunks.PngChunk\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lar\/com\/hjg\/pngj\/chunks\/PngChunk;, \>;, Ljava\/lang\/String;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Lar\/com\/hjg\/pngj\/chunks\/PngChunk;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

