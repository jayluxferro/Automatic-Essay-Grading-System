digraph "CFG forar.com.hjg.pngj.chunks.ChunksList.getById1(Ljava\/lang\/String;Ljava\/lang\/String;Z)Lar\/com\/hjg\/pngj\/chunks\/PngChunk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r4 = getById(r3, r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r4.isEmpty() == false) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r4.size() \<= 1) goto L_0x003a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r5 != false) goto L_0x0023\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if (((p004ar.com.hjg.pngj.chunks.PngChunk) r4.get(0)).allowsMultiple() == false) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"unexpected multiple chunks id=\")\lr5.append(r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|throw new p004ar.com.hjg.pngj.PngjException(r5.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a}"];
Node_11 [shape=record,label="{11\:\ 0x0045|RETURN\l|return (p004ar.com.hjg.pngj.chunks.PngChunk) r4.get(r4.size() \- 1)\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.PngChunk ar.com.hjg.pngj.chunks.ChunksList.getById1((r2v0 'this' ar.com.hjg.pngj.chunks.ChunksList A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
}

