digraph "CFG forar.com.hjg.pngj.chunks.PngChunkBKGD.getRGB()[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) ar.com.hjg.pngj.chunks.PngChunkBKGD.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) ar.com.hjg.pngj.chunks.PngChunkBKGD.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0008: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000d: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: IGET  (r2 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) ar.com.hjg.pngj.chunks.PngChunkBKGD.red int \l0x0012: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0014: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: IGET  (r2 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) ar.com.hjg.pngj.chunks.PngChunkBKGD.green int \l0x0017: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0019: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001a: IGET  (r2 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) ar.com.hjg.pngj.chunks.PngChunkBKGD.blue int \l0x001c: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r0 I:int[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0021: CONST_STR  (r1 I:java.lang.String) =  \"only rgb or rgba images support this\" \l0x0023: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int[] ar.com.hjg.pngj.chunks.PngChunkBKGD.getRGB((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkBKGD A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

