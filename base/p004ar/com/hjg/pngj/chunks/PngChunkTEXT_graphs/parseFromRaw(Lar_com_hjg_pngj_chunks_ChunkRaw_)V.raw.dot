digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTEXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r2 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r2 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0009: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r2 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0013: INVOKE  (r0 I:java.lang.String) = (r2 I:byte[]), (r0 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x0017: IPUT  \l  (r0 I:java.lang.String)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunkTEXT)\l ar.com.hjg.pngj.chunks.PngChunkTEXT.key java.lang.String \l0x0019: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001b: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001d: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0022: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0024: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0025: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l0x0026: INVOKE  (r4 I:java.lang.String) = (r0 I:byte[]), (r1 I:int), (r4 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: CONST_STR  (r4 I:java.lang.String) =  \"\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IPUT  \l  (r4 I:java.lang.String)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunkTEXT)\l ar.com.hjg.pngj.chunks.PngChunkTEXT.val java.lang.String \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTEXT.parseFromRaw((r3 'this' I:ar.com.hjg.pngj.chunks.PngChunkTEXT A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

