digraph "CFG forar.com.hjg.pngj.chunks.PngChunkTEXT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:0:0x0000, B:5:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r1 \>= r4.data.length) goto L_0x0011\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r4.data[r1] != 0) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|r3.key = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r4.data, 0, r1)\lint r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r1 \>= r4.data.length) goto L_0x002b\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|java.lang.String r4 = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r4.data, r1, r4.data.length \- r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|java.lang.String r4 = \"\"\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|PHI: r4 \l  PHI: (r4v1 java.lang.String) = (r4v2 java.lang.String), (r4v6 java.lang.String) binds: [B:9:0x002b, B:8:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|r3.val = r4\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkTEXT.parseFromRaw((r3v0 'this' ar.com.hjg.pngj.chunks.PngChunkTEXT A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_13[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_6;
Node_13 -> Node_6;
}

