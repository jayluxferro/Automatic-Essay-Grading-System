digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSTER.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.len != 1) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r3.mode = r4.data[0]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"bad chunk length \")\lr1.append(r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|throw new p004ar.com.hjg.pngj.PngjException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSTER.parseFromRaw((r3v0 'this' ar.com.hjg.pngj.chunks.PngChunkSTER A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

