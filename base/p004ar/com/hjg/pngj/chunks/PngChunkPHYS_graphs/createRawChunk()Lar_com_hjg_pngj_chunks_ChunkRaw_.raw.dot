digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPHYS.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS)\l  (r0 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkPHYS.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0007: IGET  (r1 I:long) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.pixelsxUnitX long \l0x0009: CAST  (r1 I:int) = (int) (r1 I:long) \l0x000a: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0010: IGET  (r1 I:long) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.pixelsxUnitY long \l0x0012: CAST  (r1 I:int) = (int) (r1 I:long) \l0x0013: IGET  (r2 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r1 I:int), (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l0x0019: IGET  (r1 I:byte[]) = (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001b: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.units int \l0x001d: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x001e: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0020: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0022|0x0022: RETURN  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkPHYS.createRawChunk((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkPHYS A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

