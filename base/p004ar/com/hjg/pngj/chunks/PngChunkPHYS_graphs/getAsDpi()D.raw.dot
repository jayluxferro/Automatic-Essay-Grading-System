digraph "CFG forar.com.hjg.pngj.chunks.PngChunkPHYS.getAsDpi()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.units int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:long) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.pixelsxUnitX long \l0x0007: IGET  (r2 I:long) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.pixelsxUnitY long \l0x0009: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r0 I:long) = (r4 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) ar.com.hjg.pngj.chunks.PngChunkPHYS.pixelsxUnitX long \l0x0010: CAST  (r0 I:double) = (double) (r0 I:long) \l0x0011: CONST  (r2 I:?[long, double]) = \l  (4582978272962677414(0x3f9a027525460aa6, double:0.0254) ?[long, double])\l \l0x0016: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: RETURN  (r0 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: CONST  (r0 I:?[long, double]) = \l  (\-4616189618054758400(0xbff0000000000000, double:\-1.0) ?[long, double])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public double ar.com.hjg.pngj.chunks.PngChunkPHYS.getAsDpi((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkPHYS A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

