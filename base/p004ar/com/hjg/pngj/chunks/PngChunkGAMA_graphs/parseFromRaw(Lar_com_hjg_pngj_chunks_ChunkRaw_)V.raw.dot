digraph "CFG forar.com.hjg.pngj.chunks.PngChunkGAMA.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r5 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  (r5 I:int) = (r5 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x000c: CAST  (r0 I:double) = (double) (r5 I:int) \l0x000d: CONST  (r2 I:?[long, double]) = \l  (4681608360884174848(0x40f86a0000000000, double:100000.0) ?[long, double])\l \l0x0012: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0013: IPUT  (r0 I:double), (r4 I:ar.com.hjg.pngj.chunks.PngChunkGAMA) ar.com.hjg.pngj.chunks.PngChunkGAMA.gamma double \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"bad chunk \" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjException)\l  (r5 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkGAMA.parseFromRaw((r4 'this' I:ar.com.hjg.pngj.chunks.PngChunkGAMA A[IMMUTABLE_TYPE, THIS]), (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

