digraph "CFG forar.com.hjg.pngj.chunks.PngChunkGAMA.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5.len != 4) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r4.gamma = ((double) p004ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(r5.data, 0)) \/ 100000.0d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"bad chunk \")\lr1.append(r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|throw new p004ar.com.hjg.pngj.PngjException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkGAMA.parseFromRaw((r4v0 'this' ar.com.hjg.pngj.chunks.PngChunkGAMA A[IMMUTABLE_TYPE, THIS]), (r5v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

