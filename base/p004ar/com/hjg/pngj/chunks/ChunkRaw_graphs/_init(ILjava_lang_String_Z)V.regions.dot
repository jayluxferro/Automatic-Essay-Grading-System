digraph "CFG forar.com.hjg.pngj.chunks.ChunkRaw.\<init\>(ILjava\/lang\/String;Z)V" {
subgraph cluster_Region_1274740800 {
label = "R(3:0|(1:(2:(2:11|12)|(1:10)))|(1:(1:14)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.data = null\lr3.offset = 0\lr3.crcval = new byte[4]\lr3.len = r4\lr3.f57id = r5\lr3.idbytes = p004ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(r5)\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_834810775 {
label = "LOOP:0: (1:(2:(2:11|12)|(1:10)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001a|LOOP_START\lPHI: r4 \l  PHI: (r4v3 int) = (r4v2 int), (r4v5 int) binds: [B:0:0x0000, B:10:0x003c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001a\-\>B:10:0x003c\l|if (r4 \< 4) goto L_0x001c\l}"];
subgraph cluster_Region_691640417 {
label = "R(1:(2:(2:11|12)|(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_387750086 {
label = "R(2:(2:11|12)|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2042615614 {
label = "IF [B:3:0x0022, B:5:0x002a, B:7:0x0032, B:9:0x003a] THEN: R(2:11|12) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0022|if (r3.idbytes[r4] \< 65) goto L_0x003f\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|ADDED_TO_REGION\l|if (r3.idbytes[r4] \> 122) goto L_0x003f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|ADDED_TO_REGION\l|if (r3.idbytes[r4] \> 90) goto L_0x0034\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|ADDED_TO_REGION\l|if (r3.idbytes[r4] \< 97) goto L_0x003f\l}"];
subgraph cluster_Region_1368759523 {
label = "R(2:11|12)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x003f}"];
Node_12 [shape=record,label="{12\:\ 0x0055|throw new p004ar.com.hjg.pngj.PngjException(\"Bad id chunk: must be ascii letters \" + r5)\l}"];
}
}
subgraph cluster_Region_511859928 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x003c|LOOP_END\lLOOP:0: B:1:0x001a\-\>B:10:0x003c\l|r4++\l}"];
}
}
}
}
subgraph cluster_Region_460226176 {
label = "R(1:(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2121336604 {
label = "IF [B:13:0x0056] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0056|if (r6 == true) goto L_0x0058\l}"];
subgraph cluster_Region_232291004 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0058|allocData()\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x001c}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0024}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x002c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0034}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x003f|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0056|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x003f|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x003f|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x003c|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x003c|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.ChunkRaw.\<init\>((r3v0 'this' ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16[style=dashed];
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_7 -> Node_8;
Node_7 -> Node_19[style=dashed];
Node_9 -> Node_18;
Node_9 -> Node_20[style=dashed];
Node_11 -> Node_12;
Node_10 -> Node_1;
Node_13 -> Node_14;
Node_13 -> Node_22[style=dashed];
Node_14 -> Node_21;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_15 -> Node_11;
Node_16 -> Node_13;
Node_17 -> Node_11;
Node_18 -> Node_11;
Node_19 -> Node_10;
Node_20 -> Node_10;
}

