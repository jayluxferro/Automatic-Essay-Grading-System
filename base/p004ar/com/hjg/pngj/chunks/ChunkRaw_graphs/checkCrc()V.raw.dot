digraph "CFG forar.com.hjg.pngj.chunks.ChunkRaw.checkCrc()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.zip.CRC32) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcengine java.util.zip.CRC32 \l0x0002: INVOKE  (r0 I:long) = (r0 I:java.util.zip.CRC32) java.util.zip.CRC32.getValue():long type: VIRTUAL \l0x0006: CAST  (r0 I:int) = (int) (r0 I:long) \l0x0007: IGET  (r1 I:byte[]) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcval byte[] \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r1 I:int) = (r1 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.PngjBadCrcException) =  ar.com.hjg.pngj.PngjBadCrcException \l0x0013: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r4 I:java.lang.String) =  \"chunk: \" \l0x001a: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r4 I:java.lang.String) = (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.toString():java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: CONST_STR  (r4 I:java.lang.String) =  \" expected=\" \l0x0026: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002c: CONST_STR  (r1 I:java.lang.String) =  \" read=\" \l0x002e: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  \l  (r2 I:ar.com.hjg.pngj.PngjBadCrcException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjBadCrcException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.ChunkRaw.checkCrc((r5 'this' I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

