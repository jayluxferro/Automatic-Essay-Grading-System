digraph "CFG forar.com.hjg.pngj.chunks.ChunkRaw.computeCrcForWriting()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.zip.CRC32) =  java.util.zip.CRC32 \l0x0002: INVOKE  (r0 I:java.util.zip.CRC32) java.util.zip.CRC32.\<init\>():void type: DIRECT \l0x0005: IPUT  \l  (r0 I:java.util.zip.CRC32)\l  (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l ar.com.hjg.pngj.chunks.ChunkRaw.crcengine java.util.zip.CRC32 \l0x0007: IGET  (r0 I:java.util.zip.CRC32) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcengine java.util.zip.CRC32 \l0x0009: IGET  (r1 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.idbytes byte[] \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x000d: INVOKE  \l  (r0 I:java.util.zip.CRC32)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l java.util.zip.CRC32.update(byte[], int, int):void type: VIRTUAL \l0x0010: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IGET  (r0 I:java.util.zip.CRC32) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcengine java.util.zip.CRC32 \l0x0016: IGET  (r1 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0018: IGET  (r3 I:int) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.len int \l0x001a: INVOKE  \l  (r0 I:java.util.zip.CRC32)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l java.util.zip.CRC32.update(byte[], int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IGET  (r0 I:java.util.zip.CRC32) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcengine java.util.zip.CRC32 \l0x001f: INVOKE  (r0 I:long) = (r0 I:java.util.zip.CRC32) java.util.zip.CRC32.getValue():long type: VIRTUAL \l0x0023: CAST  (r0 I:int) = (int) (r0 I:long) \l0x0024: IGET  (r1 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.crcval byte[] \l0x0026: INVOKE  (r0 I:int), (r1 I:byte[]), (r2 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt4tobytes(int, byte[], int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.chunks.ChunkRaw.computeCrcForWriting((r4 'this' I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

