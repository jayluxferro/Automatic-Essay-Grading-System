digraph "CFG forar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.match(Lar\/com\/hjg\/pngj\/chunks\/PngChunk;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.crit boolean \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r6 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0009: CONST_STR  (r0 I:java.lang.String) =  \"PLTE\" \l0x000b: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00b7 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r6 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$imgInfo ar.com.hjg.pngj.ImageInfo \l0x0013: IGET  (r6 I:boolean) = (r6 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r6 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0019: INVOKE  (r6 I:boolean) = (r6 I:int), (r2 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r6 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$imgInfo ar.com.hjg.pngj.ImageInfo \l0x0022: IGET  (r6 I:boolean) = (r6 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00b7 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IGET  (r6 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0028: INVOKE  (r6 I:boolean) = (r6 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00b7 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: RETURN  (r2 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: INSTANCE_OF  (r0 I:boolean) = (r6 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.chunks.PngChunkTextVar \l0x0031: IGET  (r3 I:boolean) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.safe boolean \l0x0033: IGET  (r4 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0035: INVOKE  (r1 I:boolean) = (r4 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003c \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: RETURN  (r2 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0048 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0040: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0041: INVOKE  (r1 I:boolean) = (r1 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0048 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: RETURN  (r2 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: IGET  (r1 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x004a: CONST_STR  (r3 I:java.lang.String) =  \"tRNS\" \l0x004c: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0050|0x0050: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0052|0x0052: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0054: CONST  (r3 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x0056: INVOKE  (r1 I:boolean) = (r1 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|0x005a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005d \l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|0x005c: RETURN  (r2 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x005d|0x005d: IGET  (r1 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x005f: CONST_STR  (r3 I:java.lang.String) =  \"pHYs\" \l0x0061: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0065|0x0065: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0072 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0067|0x0067: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0069: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x006b: INVOKE  (r1 I:boolean) = (r1 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x006f|0x006f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0072 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0071|0x0071: RETURN  (r2 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0072|0x0072: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x007f \l}"];
Node_32 [shape=record,label="{32\:\ 0x0074|0x0074: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0076: CONST  (r3 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0078: INVOKE  (r1 I:boolean) = (r1 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x007c|0x007c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x007f \l}"];
Node_34 [shape=record,label="{34\:\ 0x007e|0x007e: RETURN  (r2 I:boolean) \l}"];
Node_35 [shape=record,label="{35\:\ 0x007f|0x007f: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x0081: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l0x0083: INVOKE  (r1 I:boolean) = (r1 I:int), (r3 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_36 [shape=record,label="{36\:\ 0x0087|0x0087: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00a6 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0089|0x0089: INVOKE  (r1 I:boolean) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.ChunkHelper.isUnknown(ar.com.hjg.pngj.chunks.PngChunk):boolean type: STATIC \l}"];
Node_38 [shape=record,label="{38\:\ 0x008d|0x008d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00a6 \l}"];
Node_39 [shape=record,label="{39\:\ 0x008f|0x008f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00a6 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0091|0x0091: IGET  (r0 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0093: CONST_STR  (r1 I:java.lang.String) =  \"hIST\" \l0x0095: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x0099|0x0099: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00a6 \l}"];
Node_42 [shape=record,label="{42\:\ 0x009b|0x009b: IGET  (r0 I:java.lang.String) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x009d: CONST_STR  (r1 I:java.lang.String) =  \"tIME\" \l0x009f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x00a3|0x00a3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00a6 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00a5|0x00a5: RETURN  (r2 I:boolean) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00a6|0x00a6: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.val$copyFromMask int \l0x00a8: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x00aa: INVOKE  (r0 I:boolean) = (r0 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.access$000(int, int):boolean type: STATIC \l}"];
Node_46 [shape=record,label="{46\:\ 0x00ae|0x00ae: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00b7 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00b0|0x00b0: INVOKE  (r6 I:boolean) = (r6 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.ChunkHelper.isUnknown(ar.com.hjg.pngj.chunks.PngChunk):boolean type: STATIC \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b4|0x00b4: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00b7 \l}"];
Node_49 [shape=record,label="{49\:\ 0x00b6|0x00b6: RETURN  (r2 I:boolean) \l}"];
Node_50 [shape=record,label="{50\:\ 0x00b7|0x00b7: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_51 [shape=record,label="{51\:\ 0x00b8|0x00b8: RETURN  (r6 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.chunks.ChunkCopyBehaviour.1.match((r5 'this' I:ar.com.hjg.pngj.chunks.ChunkCopyBehaviour$1 A[IMMUTABLE_TYPE, THIS]), (r6 I:ar.com.hjg.pngj.chunks.PngChunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_50;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_50;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_50;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_45;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_45;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_50 -> Node_51;
}

