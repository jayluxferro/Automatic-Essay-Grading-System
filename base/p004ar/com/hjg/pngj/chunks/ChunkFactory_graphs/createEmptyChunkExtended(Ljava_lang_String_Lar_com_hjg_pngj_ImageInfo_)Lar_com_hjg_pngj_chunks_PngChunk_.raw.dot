digraph "CFG forar.com.hjg.pngj.chunks.ChunkFactory.createEmptyChunkExtended(Ljava\/lang\/String;Lar\/com\/hjg\/pngj\/ImageInfo;)Lar\/com\/hjg\/pngj\/chunks\/PngChunk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"oFFs\" \l0x0002: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkOFFS) =  ar.com.hjg.pngj.chunks.PngChunkOFFS \l0x000a: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkOFFS)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkOFFS.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST_STR  (r0 I:java.lang.String) =  \"sTER\" \l0x0010: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSTER) =  ar.com.hjg.pngj.chunks.PngChunkSTER \l0x0018: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSTER)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkSTER.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
MethodNode[shape=record,label="{protected ar.com.hjg.pngj.chunks.PngChunk ar.com.hjg.pngj.chunks.ChunkFactory.createEmptyChunkExtended((r1 'this' I:ar.com.hjg.pngj.chunks.ChunkFactory A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

