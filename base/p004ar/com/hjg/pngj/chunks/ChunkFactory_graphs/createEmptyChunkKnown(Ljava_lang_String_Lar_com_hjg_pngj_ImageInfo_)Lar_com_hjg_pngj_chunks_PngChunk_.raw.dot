digraph "CFG forar.com.hjg.pngj.chunks.ChunkFactory.createEmptyChunkKnown(Ljava\/lang\/String;Lar\/com\/hjg\/pngj\/ImageInfo;)Lar\/com\/hjg\/pngj\/chunks\/PngChunk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"IDAT\" \l0x0002: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIDAT) =  ar.com.hjg.pngj.chunks.PngChunkIDAT \l0x000a: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIDAT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIDAT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST_STR  (r0 I:java.lang.String) =  \"IHDR\" \l0x0010: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) =  ar.com.hjg.pngj.chunks.PngChunkIHDR \l0x0018: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIHDR)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIHDR.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST_STR  (r0 I:java.lang.String) =  \"PLTE\" \l0x001e: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE) =  ar.com.hjg.pngj.chunks.PngChunkPLTE \l0x0026: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkPLTE.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: CONST_STR  (r0 I:java.lang.String) =  \"IEND\" \l0x002c: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0038 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIEND) =  ar.com.hjg.pngj.chunks.PngChunkIEND \l0x0034: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkIEND)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIEND.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: CONST_STR  (r0 I:java.lang.String) =  \"tEXt\" \l0x003a: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0046 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTEXT) =  ar.com.hjg.pngj.chunks.PngChunkTEXT \l0x0042: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTEXT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkTEXT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: CONST_STR  (r0 I:java.lang.String) =  \"iTXt\" \l0x0048: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0054 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkITXT) =  ar.com.hjg.pngj.chunks.PngChunkITXT \l0x0050: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkITXT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkITXT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|0x0053: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: CONST_STR  (r0 I:java.lang.String) =  \"zTXt\" \l0x0056: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|0x005a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0062 \l}"];
Node_26 [shape=record,label="{26\:\ 0x005c|0x005c: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkZTXT) =  ar.com.hjg.pngj.chunks.PngChunkZTXT \l0x005e: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkZTXT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkZTXT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|0x0061: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0062|0x0062: CONST_STR  (r0 I:java.lang.String) =  \"bKGD\" \l0x0064: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|0x0068: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0070 \l}"];
Node_30 [shape=record,label="{30\:\ 0x006a|0x006a: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkBKGD) =  ar.com.hjg.pngj.chunks.PngChunkBKGD \l0x006c: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkBKGD)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkBKGD.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x006f|0x006f: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0070|0x0070: CONST_STR  (r0 I:java.lang.String) =  \"gAMA\" \l0x0072: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_33 [shape=record,label="{33\:\ 0x0076|0x0076: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x007e \l}"];
Node_34 [shape=record,label="{34\:\ 0x0078|0x0078: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkGAMA) =  ar.com.hjg.pngj.chunks.PngChunkGAMA \l0x007a: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkGAMA)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkGAMA.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x007d|0x007d: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_36 [shape=record,label="{36\:\ 0x007e|0x007e: CONST_STR  (r0 I:java.lang.String) =  \"pHYs\" \l0x0080: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0084|0x0084: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x008c \l}"];
Node_38 [shape=record,label="{38\:\ 0x0086|0x0086: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkPHYS) =  ar.com.hjg.pngj.chunks.PngChunkPHYS \l0x0088: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkPHYS)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkPHYS.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_39 [shape=record,label="{39\:\ 0x008b|0x008b: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_40 [shape=record,label="{40\:\ 0x008c|0x008c: CONST_STR  (r0 I:java.lang.String) =  \"iCCP\" \l0x008e: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x0092|0x0092: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x009a \l}"];
Node_42 [shape=record,label="{42\:\ 0x0094|0x0094: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkICCP) =  ar.com.hjg.pngj.chunks.PngChunkICCP \l0x0096: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkICCP)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkICCP.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x0099|0x0099: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_44 [shape=record,label="{44\:\ 0x009a|0x009a: CONST_STR  (r0 I:java.lang.String) =  \"tIME\" \l0x009c: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_45 [shape=record,label="{45\:\ 0x00a0|0x00a0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00a8 \l}"];
Node_46 [shape=record,label="{46\:\ 0x00a2|0x00a2: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTIME) =  ar.com.hjg.pngj.chunks.PngChunkTIME \l0x00a4: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTIME)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkTIME.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_47 [shape=record,label="{47\:\ 0x00a7|0x00a7: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00a8|0x00a8: CONST_STR  (r0 I:java.lang.String) =  \"tRNS\" \l0x00aa: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_49 [shape=record,label="{49\:\ 0x00ae|0x00ae: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x00b6 \l}"];
Node_50 [shape=record,label="{50\:\ 0x00b0|0x00b0: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) =  ar.com.hjg.pngj.chunks.PngChunkTRNS \l0x00b2: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkTRNS)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkTRNS.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_51 [shape=record,label="{51\:\ 0x00b5|0x00b5: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00b6|0x00b6: CONST_STR  (r0 I:java.lang.String) =  \"cHRM\" \l0x00b8: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_53 [shape=record,label="{53\:\ 0x00bc|0x00bc: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x00c4 \l}"];
Node_54 [shape=record,label="{54\:\ 0x00be|0x00be: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkCHRM) =  ar.com.hjg.pngj.chunks.PngChunkCHRM \l0x00c0: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkCHRM)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkCHRM.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_55 [shape=record,label="{55\:\ 0x00c3|0x00c3: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00c4|0x00c4: CONST_STR  (r0 I:java.lang.String) =  \"sBIT\" \l0x00c6: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_57 [shape=record,label="{57\:\ 0x00ca|0x00ca: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x00d2 \l}"];
Node_58 [shape=record,label="{58\:\ 0x00cc|0x00cc: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSBIT) =  ar.com.hjg.pngj.chunks.PngChunkSBIT \l0x00ce: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSBIT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkSBIT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_59 [shape=record,label="{59\:\ 0x00d1|0x00d1: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_60 [shape=record,label="{60\:\ 0x00d2|0x00d2: CONST_STR  (r0 I:java.lang.String) =  \"sRGB\" \l0x00d4: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_61 [shape=record,label="{61\:\ 0x00d8|0x00d8: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00e0 \l}"];
Node_62 [shape=record,label="{62\:\ 0x00da|0x00da: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSRGB) =  ar.com.hjg.pngj.chunks.PngChunkSRGB \l0x00dc: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSRGB)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkSRGB.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_63 [shape=record,label="{63\:\ 0x00df|0x00df: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_64 [shape=record,label="{64\:\ 0x00e0|0x00e0: CONST_STR  (r0 I:java.lang.String) =  \"hIST\" \l0x00e2: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_65 [shape=record,label="{65\:\ 0x00e6|0x00e6: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00ee \l}"];
Node_66 [shape=record,label="{66\:\ 0x00e8|0x00e8: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkHIST) =  ar.com.hjg.pngj.chunks.PngChunkHIST \l0x00ea: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkHIST)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkHIST.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_67 [shape=record,label="{67\:\ 0x00ed|0x00ed: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_68 [shape=record,label="{68\:\ 0x00ee|0x00ee: CONST_STR  (r0 I:java.lang.String) =  \"sPLT\" \l0x00f0: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_69 [shape=record,label="{69\:\ 0x00f4|0x00f4: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x00fc \l}"];
Node_70 [shape=record,label="{70\:\ 0x00f6|0x00f6: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) =  ar.com.hjg.pngj.chunks.PngChunkSPLT \l0x00f8: INVOKE  \l  (r2 I:ar.com.hjg.pngj.chunks.PngChunkSPLT)\l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkSPLT.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l}"];
Node_71 [shape=record,label="{71\:\ 0x00fb|0x00fb: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
Node_72 [shape=record,label="{72\:\ 0x00fc|0x00fc: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_73 [shape=record,label="{73\:\ 0x00fd|0x00fd: RETURN  (r2 I:ar.com.hjg.pngj.chunks.PngChunk) \l}"];
MethodNode[shape=record,label="{protected final ar.com.hjg.pngj.chunks.PngChunk ar.com.hjg.pngj.chunks.ChunkFactory.createEmptyChunkKnown((r1 'this' I:ar.com.hjg.pngj.chunks.ChunkFactory A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_52;
Node_50 -> Node_51;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_56;
Node_54 -> Node_55;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_60;
Node_58 -> Node_59;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_64;
Node_62 -> Node_63;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_68;
Node_66 -> Node_67;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_72;
Node_70 -> Node_71;
Node_72 -> Node_73;
}

