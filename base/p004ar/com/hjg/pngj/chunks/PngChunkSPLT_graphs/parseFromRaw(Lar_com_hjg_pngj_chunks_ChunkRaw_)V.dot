digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v17 int) binds: [B:0:0x0000, B:5:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r1 \>= r13.data.length) goto L_0x0011\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r13.data[r1] != 0) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|r1 = \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|PHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v1 int) binds: [B:6:0x0011, B:25:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \<= 0) goto L_0x00bc\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014}"];
Node_9 [shape=record,label="{9\:\ 0x0019|if (r1 \> (r13.data.length + \-2)) goto L_0x00bc\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|r12.palName = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r13.data, 0, r1)\lr12.sampledepth = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r1 + 1)\lint r1 = r1 + 2\lint r2 = r13.data.length \- r1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|if (r12.sampledepth != 8) goto L_0x003b\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|r3 = 6\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|r3 = 10\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|PHI: r3 \l  PHI: (r3v2 int) = (r3v10 int), (r3v11 int) binds: [B:13:0x003b, B:12:0x0039] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 \/ r3\lr12.palette = new int[(r2 * 5)]\lr3 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|LOOP_START\lPHI: r0 r1 r3 \l  PHI: (r0v2 int) = (r0v0 int), (r0v3 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v5 int) = (r1v4 int), (r1v11 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v6 int) = (r3v5 int), (r3v9 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:15:0x0045\-\>B:20:0x0090\l|if (r0 \>= r2) goto L_0x00bb\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047}"];
Node_17 [shape=record,label="{17\:\ 0x0049|if (r12.sampledepth != 8) goto L_0x006c\l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|int r6 = r1 + 1\lint r1 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r1)\lint r7 = r6 + 1\lint r5 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r6)\lint r8 = r7 + 1\lint r6 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r7)\lint r9 = r8 + 1\lint r7 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r8)\l}"];
Node_19 [shape=record,label="{19\:\ 0x006c|int r5 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint r1 = r1 + 2\lint r6 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint r1 = r1 + 2\lint r7 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint r1 = r1 + 2\lint r8 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint r9 = r1 + 2\lr1 = r5\lr5 = r6\lr6 = r7\lr7 = r8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0090|LOOP_END\lPHI: r1 r5 r6 r7 r9 \l  PHI: (r1v6 int) = (r1v15 int), (r1v16 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v6 int), (r5v9 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v0 int) = (r6v3 int), (r6v6 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v0 int) = (r7v3 int), (r7v6 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v2 int), (r9v3 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:15:0x0045\-\>B:20:0x0090\l|int r8 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r9)\lint r11 = r3 + 1\lr12.palette[r3] = r1\lint r3 = r11 + 1\lr12.palette[r11] = r5\lint r5 = r3 + 1\lr12.palette[r3] = r6\lint r3 = r5 + 1\lr12.palette[r5] = r7\lr12.palette[r3] = r8\lint r0 = r0 + 1\lr3 = r3 + 1\lr1 = r9 + 2\l}"];
Node_21 [shape=record,label="{21\:\ 0x00bb|RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x00bc}"];
Node_23 [shape=record,label="{23\:\ 0x00c3|throw new p004ar.com.hjg.pngj.PngjException(\"bad sPLT chunk: no separator found\")\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x00bb|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0090|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0090|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw((r12v0 'this' ar.com.hjg.pngj.chunks.PngChunkSPLT A[IMMUTABLE_TYPE, THIS]), (r13v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_25[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_26;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_28;
Node_19 -> Node_27;
Node_20 -> Node_15;
Node_22 -> Node_23;
Node_24 -> Node_6;
Node_25 -> Node_7;
Node_26 -> Node_21;
Node_27 -> Node_20;
Node_28 -> Node_20;
}

