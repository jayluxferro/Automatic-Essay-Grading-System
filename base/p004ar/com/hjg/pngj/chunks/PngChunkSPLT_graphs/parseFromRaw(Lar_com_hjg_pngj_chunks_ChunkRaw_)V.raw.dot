digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0009: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:23:0x00bc \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0016: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0017: ARITH  (r2 I:int) = (r2 I:int) + (\-2 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:23:0x00bc \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x001d: INVOKE  (r2 I:java.lang.String) = (r2 I:byte[]), (r0 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x0021: IPUT  \l  (r2 I:java.lang.String)\l  (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT)\l ar.com.hjg.pngj.chunks.PngChunkSPLT.palName java.lang.String \l0x0023: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0025: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x0027: INVOKE  (r2 I:int) = (r2 I:byte[]), (r3 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x002b: IPUT  (r2 I:int), (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.sampledepth int \l0x002d: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x002f: IGET  (r2 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0031: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0032: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l0x0033: IGET  (r3 I:int) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.sampledepth int \l0x0035: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: ARITH  (r2 I:int) = (r2 I:int) \/ (r3 I:int) \l0x003e: ARITH  (r3 I:int) = (r2 I:int) * (5 int) \l0x0040: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0042: IPUT  (r3 I:int[]), (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x0044: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:22:0x00bb \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: IGET  (r5 I:int) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.sampledepth int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006c \l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: IGET  (r5 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x004d: ARITH  (r6 I:int) = (r1 I:int) + (1 int) \l0x004f: INVOKE  (r1 I:int) = (r5 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0053: IGET  (r5 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0055: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0057: INVOKE  (r5 I:int) = (r5 I:byte[]), (r6 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x005b: IGET  (r6 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x005d: ARITH  (r8 I:int) = (r7 I:int) + (1 int) \l0x005f: INVOKE  (r6 I:int) = (r6 I:byte[]), (r7 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l0x0063: IGET  (r7 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0065: ARITH  (r9 I:int) = (r8 I:int) + (1 int) \l0x0067: INVOKE  (r7 I:int) = (r7 I:byte[]), (r8 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(byte[], int):int type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IGET  (r5 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x006e: INVOKE  (r5 I:int) = (r5 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x0072: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x0074: IGET  (r6 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0076: INVOKE  (r6 I:int) = (r6 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x007a: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x007c: IGET  (r7 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x007e: INVOKE  (r7 I:int) = (r7 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x0082: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x0084: IGET  (r8 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0086: INVOKE  (r8 I:int) = (r8 I:byte[]), (r1 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x008a: ARITH  (r9 I:int) = (r1 I:int) + (2 int) \l0x008c: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008d: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008e: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008f: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0090|0x0090: IGET  (r8 I:byte[]) = (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0092: INVOKE  (r8 I:int) = (r8 I:byte[]), (r9 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(byte[], int):int type: STATIC \l0x0096: ARITH  (r9 I:int) = (r9 I:int) + (2 int) \l0x0098: IGET  (r10 I:int[]) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x009a: ARITH  (r11 I:int) = (r3 I:int) + (1 int) \l0x009c: APUT  \l  (r10 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x009e: IGET  (r1 I:int[]) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x00a0: ARITH  (r3 I:int) = (r11 I:int) + (1 int) \l0x00a2: APUT  \l  (r1 I:?[int, float][])\l  (r11 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l0x00a4: IGET  (r1 I:int[]) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x00a6: ARITH  (r5 I:int) = (r3 I:int) + (1 int) \l0x00a8: APUT  \l  (r1 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x00aa: IGET  (r1 I:int[]) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x00ac: ARITH  (r3 I:int) = (r5 I:int) + (1 int) \l0x00ae: APUT  \l  (r1 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x00b0: IGET  (r1 I:int[]) = (r12 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] \l0x00b2: ARITH  (r5 I:int) = (r3 I:int) + (1 int) \l0x00b4: APUT  \l  (r1 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r8 I:?[int, float])\l \l0x00b6: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x00b8: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b9: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x00bb|0x00bb: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x00bc|0x00bc: NEW_INSTANCE  (r13 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x00be: CONST_STR  (r0 I:java.lang.String) =  \"bad sPLT chunk: no separator found\" \l0x00c0: INVOKE  \l  (r13 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c3|0x00c3: THROW  (r13 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw((r12 'this' I:ar.com.hjg.pngj.chunks.PngChunkSPLT A[IMMUTABLE_TYPE, THIS]), (r13 I:ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_23;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_16;
Node_23 -> Node_24;
}

