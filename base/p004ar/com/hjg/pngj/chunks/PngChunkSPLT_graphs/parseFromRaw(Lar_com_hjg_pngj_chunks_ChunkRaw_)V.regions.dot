digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw(Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;)V" {
subgraph cluster_Region_1013422147 {
label = "R(3:0|(1:(2:6|1)(1:(1:25)(1:5)))|(2:(1:23)|(3:10|14|(2:(1:18)(1:19)|20)))) | DECL_VAR: int null, int null, int null, int null, int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_374414847 {
label = "LOOP:0: (1:(2:6|1)(1:(1:25)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_2275908 {
label = "R(1:(2:6|1)(1:(1:25)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2016753528 {
label = "IF [B:2:0x0005] THEN: R(2:6|1) ELSE: R(1:(1:25)(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r1 \>= r13.data.length) goto L_0x0011\l}"];
subgraph cluster_Region_1234887077 {
label = "R(2:6|1)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011|EDGE_INSN: B:6:0x0011\-\>B:7:0x0012 ?: BREAK  \l|r1 = \-1\l}"];
Node_InsnContainer_144286404 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_247045526 {
label = "R(1:(1:25)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_957902963 {
label = "IF [B:4:0x000b] THEN: R(1:25) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r13.data[r1] == 0) goto L_0x0012\l}"];
subgraph cluster_Region_278517595 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0012|SYNTHETIC\lEDGE_INSN: B:25:0x0012\-\>B:7:0x0012 ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_1228918101 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l|r1++\l}"];
}
}
}
}
}
}
subgraph cluster_Region_92061590 {
label = "R(2:(1:23)|(3:10|14|(2:(1:18)(1:19)|20)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_655440188 {
label = "IF [B:7:0x0012, B:9:0x0019] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0012|EDGE_INSN: B:6:0x0011\-\>B:7:0x0012 ?: BREAK  \lEDGE_INSN: B:25:0x0012\-\>B:7:0x0012 ?: BREAK  \lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v1 int) binds: [B:6:0x0011, B:25:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \<= 0) goto L_0x00bc\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|ADDED_TO_REGION\l|if (r1 \> (r13.data.length \- 2)) goto L_0x00bc\l}"];
subgraph cluster_Region_1085715071 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x00c3|throw new p004ar.com.hjg.pngj.PngjException(\"bad sPLT chunk: no separator found\")\l}"];
}
}
subgraph cluster_Region_284364270 {
label = "R(3:10|14|(2:(1:18)(1:19)|20))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001b|r12.palName = p004ar.com.hjg.pngj.chunks.ChunkHelper.toString(r13.data, 0, r1)\lr12.sampledepth = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r1 + 1)\lint int r1 = r1 + 2\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|PHI: r3 \l  PHI: (r3v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r2 = (r13.data.length \- r1) \/ (r12.sampledepth == 8 ? 6 : 10)\lr12.palette = new int[(r2 * 5)]\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_781057081 {
label = "LOOP:1: (2:(1:18)(1:19)|20)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0045|LOOP_START\lPHI: r0 r1 r3 \l  PHI: (r0v2 int) = (r0v0 int), (r0v3 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v5 int) = (r1v4 int), (r1v11 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v6 int) = (r3v5 int), (r3v9 int) binds: [B:14:0x003d, B:20:0x0090] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:15:0x0045\-\>B:20:0x0090\l|if (r0 \< r2) goto L_0x0047\l}"];
subgraph cluster_Region_2071550018 {
label = "R(2:(1:18)(1:19)|20)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_44155602 {
label = "IF [B:17:0x0049] THEN: R(1:18) ELSE: R(1:19)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0049|if (r12.sampledepth == 8) goto L_0x004b\l}"];
subgraph cluster_Region_1093428863 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x004b|int int r6 = r1 + 1\lint r1 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r1)\lint int r7 = r6 + 1\lint r5 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r6)\lint int r8 = r7 + 1\lint r6 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r7)\lint r9 = r8 + 1\lint r7 = p004ar.com.hjg.pngj.PngHelperInternal.readInt1fromByte(r13.data, r8)\l}"];
}
subgraph cluster_Region_1003294145 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x006c|int int r5 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint int r1 = r1 + 2\lint int r6 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint int r1 = r1 + 2\lint int r7 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint int r1 = r1 + 2\lint int r8 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r1)\lint r9 = r1 + 2\lr1 = r5\lr5 = r6\lr6 = r7\lr7 = r8\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x0090|LOOP_END\lPHI: r1 r5 r6 r7 r9 \l  PHI: (r1v6 int) = (r1v15 int), (r1v16 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v6 int), (r5v9 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v0 int) = (r6v3 int), (r6v6 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v0 int) = (r7v3 int), (r7v6 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v2 int), (r9v3 int) binds: [B:27:0x0090, B:28:0x0090] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:15:0x0045\-\>B:20:0x0090\l|int int r8 = p004ar.com.hjg.pngj.PngHelperInternal.readInt2fromBytes(r13.data, r9)\lint int r11 = r3 + 1\lr12.palette[r3] = r1\lint int r3 = r11 + 1\lr12.palette[r11] = r5\lint int r5 = r3 + 1\lr12.palette[r3] = r6\lint int r3 = r5 + 1\lr12.palette[r5] = r7\lr12.palette[r3] = r8\lr0++\lr3 = r3 + 1\lr1 = r9 + 2\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v17 int) binds: [B:0:0x0000, B:5:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000e\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0014}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0037}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0039}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x003b}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0047}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x00bb}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x00bc}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0011|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x00bb|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0090|SYNTHETIC\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0090|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.chunks.PngChunkSPLT.parseFromRaw((r12v0 'this' ar.com.hjg.pngj.chunks.PngChunkSPLT A[IMMUTABLE_TYPE, THIS]), (r13v0 ar.com.hjg.pngj.chunks.ChunkRaw A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_6 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_25;
Node_25 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_26[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_27;
Node_20 -> Node_15;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_16 -> Node_17;
Node_22 -> Node_23;
Node_24 -> Node_6;
Node_26 -> Node_21;
Node_27 -> Node_20;
Node_28 -> Node_20;
}

