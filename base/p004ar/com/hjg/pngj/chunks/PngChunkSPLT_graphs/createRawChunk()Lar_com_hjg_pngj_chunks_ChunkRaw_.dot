digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSPLT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x005b \}\lSplitter:B:0:0x0000\l|java.io.ByteArrayOutputStream r0 = new java.io.ByteArrayOutputStream()     \/\/ Catch:\{ IOException \-\> 0x005b \}\lr0.write(p004ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(r7.palName))     \/\/ Catch:\{ IOException \-\> 0x005b \}\lr0.write(0)     \/\/ Catch:\{ IOException \-\> 0x005b \}\lr0.write((byte) r7.sampledepth)     \/\/ Catch:\{ IOException \-\> 0x005b \}\lint r2 = getNentries()     \/\/ Catch:\{ IOException \-\> 0x005b \}\lr3 = 0     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|LOOP_START\lCatch:\{ IOException \-\> 0x005b \}\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:1:?, B:11:0x0042] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x001d\-\>B:11:0x0042\l|if (r3 \>= r2) goto L_0x004f     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|Catch:\{ IOException \-\> 0x005b \}\l|r4 = 0     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|LOOP_START\lCatch:\{ IOException \-\> 0x005b \}\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v4 int) binds: [B:3:0x001f, B:10:0x003f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0020\-\>B:10:0x003f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|Catch:\{ IOException \-\> 0x005b \}\l|if (r4 \>= 4) goto L_0x0042     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|Catch:\{ IOException \-\> 0x005b \}\l|if (r7.sampledepth != 8) goto L_0x0035     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|Catch:\{ IOException \-\> 0x005b \}\l|p004ar.com.hjg.pngj.PngHelperInternal.writeByte((java.io.OutputStream) r0, (byte) r7.palette[(r3 * 5) + r4])     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|Catch:\{ IOException \-\> 0x005b \}\l|p004ar.com.hjg.pngj.PngHelperInternal.writeInt2(r0, r7.palette[(r3 * 5) + r4])     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|LOOP_END\lCatch:\{ IOException \-\> 0x005b \}\lLOOP:1: B:4:0x0020\-\>B:10:0x003f\l|int r4 = r4 + 1     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|LOOP_END\lCatch:\{ IOException \-\> 0x005b \}\lLOOP:0: B:2:0x001d\-\>B:11:0x0042\l|p004ar.com.hjg.pngj.PngHelperInternal.writeInt2(r0, r7.palette[(r3 * 5) + 4])     \/\/ Catch:\{ IOException \-\> 0x005b \}\lint r3 = r3 + 1     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|Catch:\{ IOException \-\> 0x005b \}\l|byte[] r0 = r0.toByteArray()     \/\/ Catch:\{ IOException \-\> 0x005b \}\lar.com.hjg.pngj.chunks.ChunkRaw r1 = createEmptyChunk(r0.length, false)     \/\/ Catch:\{ IOException \-\> 0x005b \}\lr1.data = r0     \/\/ Catch:\{ IOException \-\> 0x005b \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|RETURN\l|return r1\l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.io.IOException r0 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x005c}"];
Node_16 [shape=record,label="{16\:\ 0x0061|throw new p004ar.com.hjg.pngj.PngjException((java.lang.Throwable) r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkSPLT.createRawChunk((r7v0 'this' ar.com.hjg.pngj.chunks.PngChunkSPLT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_20;
Node_9 -> Node_19;
Node_10 -> Node_4;
Node_11 -> Node_2;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_12;
Node_18 -> Node_11;
Node_19 -> Node_10;
Node_20 -> Node_10;
}

