digraph "CFG forar.com.hjg.pngj.chunks.PngChunkSPLT.createRawChunk()Lar\/com\/hjg\/pngj\/chunks\/ChunkRaw;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream A[Catch:\{ IOException \-\> 0x005b \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x005b \}]\l0x0005: IGET  (r1 I:java.lang.String) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palName java.lang.String A[Catch:\{ IOException \-\> 0x005b \}]\l0x0007: INVOKE  (r1 I:byte[]) = (r1 I:java.lang.String) ar.com.hjg.pngj.chunks.ChunkHelper.toBytes(java.lang.String):byte[] type: STATIC A[Catch:\{ IOException \-\> 0x005b \}]\l0x000b: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:byte[]) java.io.ByteArrayOutputStream.write(byte[]):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x005b \}]\l0x000f: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x0012: IGET  (r2 I:int) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.sampledepth int A[Catch:\{ IOException \-\> 0x005b \}]\l0x0014: CAST  (r2 I:byte) = (byte) (r2 I:int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0015: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x0018: INVOKE  (r2 I:int) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.getNentries():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|0x001d: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:12:0x004f A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0042 A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r5 I:int) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.sampledepth int A[Catch:\{ IOException \-\> 0x005b \}]\l0x0025: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0035 A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r5 I:int[]) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] A[Catch:\{ IOException \-\> 0x005b \}]\l0x002b: ARITH  (r6 I:int) = (r3 I:int) * (5 int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x002d: ARITH  (r6 I:int) = (r6 I:int) + (r4 I:int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x002e: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r6 I:?[int, short, byte, char]) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0030: CAST  (r5 I:byte) = (byte) (r5 I:int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0031: INVOKE  (r0 I:java.io.OutputStream), (r5 I:byte) ar.com.hjg.pngj.PngHelperInternal.writeByte(java.io.OutputStream, byte):void type: STATIC A[Catch:\{ IOException \-\> 0x005b \}]\l0x0034: GOTO  \-\> 0x003f A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r5 I:int[]) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] A[Catch:\{ IOException \-\> 0x005b \}]\l0x0037: ARITH  (r6 I:int) = (r3 I:int) * (5 int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0039: ARITH  (r6 I:int) = (r6 I:int) + (r4 I:int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x003a: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r6 I:?[int, short, byte, char]) A[Catch:\{ IOException \-\> 0x005b \}]\l0x003c: INVOKE  (r0 I:java.io.OutputStream), (r5 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2(java.io.OutputStream, int):void type: STATIC A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0041: GOTO  \-\> 0x0020 A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: IGET  (r4 I:int[]) = (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT) ar.com.hjg.pngj.chunks.PngChunkSPLT.palette int[] A[Catch:\{ IOException \-\> 0x005b \}]\l0x0044: ARITH  (r6 I:int) = (r3 I:int) * (5 int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0046: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0047: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r6 I:?[int, short, byte, char]) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0049: INVOKE  (r0 I:java.io.OutputStream), (r4 I:int) ar.com.hjg.pngj.PngHelperInternal.writeInt2(java.io.OutputStream, int):void type: STATIC A[Catch:\{ IOException \-\> 0x005b \}]\l0x004c: ARITH  (r3 I:int) = (r3 I:int) + (1 int) A[Catch:\{ IOException \-\> 0x005b \}]\l0x004e: GOTO  \-\> 0x001d A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|0x004f: INVOKE  (r0 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x0053: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) A[Catch:\{ IOException \-\> 0x005b \}]\l0x0054: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) = \l  (r7 I:ar.com.hjg.pngj.chunks.PngChunkSPLT)\l  (r2 I:int)\l  (r1 I:boolean)\l ar.com.hjg.pngj.chunks.PngChunkSPLT.createEmptyChunk(int, boolean):ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x0058: IPUT  (r0 I:byte[]), (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] A[Catch:\{ IOException \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: RETURN  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x005b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x005c|0x005c: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x005e: INVOKE  \l  (r1 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.Throwable)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.chunks.ChunkRaw ar.com.hjg.pngj.chunks.PngChunkSPLT.createRawChunk((r7 'this' I:ar.com.hjg.pngj.chunks.PngChunkSPLT A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_4;
Node_11 -> Node_2;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

