digraph "CFG forar.com.hjg.pngj.PngWriter.writeLastChunks()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.queueChunksFromOther():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0004: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0006: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0008: IGET  (r1 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x000a: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x000c: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r1 I:java.io.OutputStream)\l  (r2 I:int)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks(java.io.OutputStream, int):int type: VIRTUAL \l0x000f: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0011: INVOKE  (r0 I:java.util.List) = (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.getQueuedChunks():java.util.List type: VIRTUAL \l0x0015: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x001c: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x0021: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0023: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0026: INVOKE  (r3 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x002a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002d: CONST_STR  (r3 I:java.lang.String) =  \" chunks were not written! Eg: \" \l0x002f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0037: CHECK_CAST  (r0 I:ar.com.hjg.pngj.chunks.PngChunk) = (ar.com.hjg.pngj.chunks.PngChunk) (r0 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  (r0 I:java.lang.String) = (r0 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.toString():java.lang.String type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0044: INVOKE  \l  (r1 I:ar.com.hjg.pngj.PngjOutputException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0047|0x0047: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeLastChunks((r4 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

