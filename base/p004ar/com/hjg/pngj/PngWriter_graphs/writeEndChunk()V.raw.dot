digraph "CFG forar.com.hjg.pngj.PngWriter.writeEndChunk()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.chunks.PngChunkIEND) =  ar.com.hjg.pngj.chunks.PngChunkIEND \l0x0002: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0004: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.PngChunkIEND)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIEND.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0007: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r0 I:ar.com.hjg.pngj.chunks.PngChunkIEND) ar.com.hjg.pngj.chunks.PngChunkIEND.createRawChunk():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x000b: IGET  (r2 I:java.io.OutputStream) = (r3 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x000d: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r2 I:java.io.OutputStream)\l ar.com.hjg.pngj.chunks.ChunkRaw.writeChunk(java.io.OutputStream):void type: VIRTUAL \l0x0010: IGET  (r1 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r3 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0012: INVOKE  (r1 I:java.util.List) = (r1 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.getChunks():java.util.List type: VIRTUAL \l0x0016: INVOKE  (r1 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeEndChunk((r3 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

