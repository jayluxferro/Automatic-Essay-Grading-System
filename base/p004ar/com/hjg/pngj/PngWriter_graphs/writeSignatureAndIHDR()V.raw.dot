digraph "CFG forar.com.hjg.pngj.PngWriter.writeSignatureAndIHDR()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0003: IGET  (r1 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x0005: INVOKE  (r2 I:byte[]) =  ar.com.hjg.pngj.PngHelperInternal.getPngIdSignature():byte[] type: STATIC \l0x0009: INVOKE  (r1 I:java.io.OutputStream), (r2 I:byte[]) ar.com.hjg.pngj.PngHelperInternal.writeBytes(java.io.OutputStream, byte[]):void type: STATIC \l0x000c: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) =  ar.com.hjg.pngj.chunks.PngChunkIHDR \l0x000e: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0010: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR)\l  (r2 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.chunks.PngChunkIHDR.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0013: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0015: IGET  (r2 I:int) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0017: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r2 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setCols(int):void type: VIRTUAL \l0x001a: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x001c: IGET  (r2 I:int) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x001e: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r2 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setRows(int):void type: VIRTUAL \l0x0021: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0023: IGET  (r2 I:int) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0025: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r2 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setBitspc(int):void type: VIRTUAL \l0x0028: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x002a: IGET  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x002c|0x002c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x002e|0x002e: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0030|0x0030: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0033: IGET  (r3 I:boolean) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0039 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x003b: IGET  (r3 I:boolean) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0041 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r2 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setColormodel(int):void type: VIRTUAL \l0x0044: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r0 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setCompmeth(int):void type: VIRTUAL \l0x0047: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r0 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setFilmeth(int):void type: VIRTUAL \l0x004a: INVOKE  (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR), (r0 I:int) ar.com.hjg.pngj.chunks.PngChunkIHDR.setInterlaced(int):void type: VIRTUAL \l0x004d: INVOKE  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r1 I:ar.com.hjg.pngj.chunks.PngChunkIHDR) ar.com.hjg.pngj.chunks.PngChunkIHDR.createRawChunk():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0051: IGET  (r2 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x0053: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r2 I:java.io.OutputStream)\l ar.com.hjg.pngj.chunks.ChunkRaw.writeChunk(java.io.OutputStream):void type: VIRTUAL \l0x0056: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0058: INVOKE  (r0 I:java.util.List) = (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) ar.com.hjg.pngj.chunks.ChunksListForWrite.getChunks():java.util.List type: VIRTUAL \l0x005c: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x005f|0x005f: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeSignatureAndIHDR((r4 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

