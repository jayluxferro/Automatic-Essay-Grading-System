digraph "CFG forar.com.hjg.pngj.PngWriter.copyChunksFrom(Lar\/com\/hjg\/pngj\/chunks\/ChunksList;Lar\/com\/hjg\/pngj\/chunks\/ChunkPredicate;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.copyFromList == null) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r3 == null) goto L_0x000d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|p004ar.com.hjg.pngj.PngHelperInternal.LOGGER.warning(\"copyChunksFrom should only be called once\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r4 == null) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r2.copyFromList = r3\lr2.copyFromPredicate = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014}"];
Node_8 [shape=record,label="{8\:\ 0x001b|throw new p004ar.com.hjg.pngj.PngjOutputException(\"copyChunksFrom requires a predicate\")\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngWriter.copyChunksFrom((r2v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS]), (r3v0 ar.com.hjg.pngj.chunks.ChunksList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 ar.com.hjg.pngj.chunks.ChunkPredicate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

