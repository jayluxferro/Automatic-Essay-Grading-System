digraph "CFG forar.com.hjg.pngj.PngWriter.copyChunksFrom(Lar\/com\/hjg\/pngj\/chunks\/ChunksList;Lar\/com\/hjg\/pngj\/chunks\/ChunkPredicate;)V" {
subgraph cluster_Region_814820929 {
label = "R(2:(1:3)|(2:(2:5|6)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1469539427 {
label = "IF [B:1:0x0002, B:2:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r2.copyFromList == null) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|ADDED_TO_REGION\l|if (r3 == null) goto L_0x000d\l}"];
subgraph cluster_Region_1548754389 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|p004ar.com.hjg.pngj.PngHelperInternal.LOGGER.warning(\"copyChunksFrom should only be called once\")\l}"];
}
}
subgraph cluster_Region_1471932365 {
label = "R(2:(2:5|6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1851861085 {
label = "IF [B:4:0x000d] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r4 != null) goto L_0x000f\l}"];
subgraph cluster_Region_37350798 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|r2.copyFromList = r3\lr2.copyFromPredicate = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1591473833 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001b|throw new p004ar.com.hjg.pngj.PngjOutputException(\"copyChunksFrom requires a predicate\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0014}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngWriter.copyChunksFrom((r2v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS]), (r3v0 ar.com.hjg.pngj.chunks.ChunksList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 ar.com.hjg.pngj.chunks.ChunkPredicate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_7 -> Node_8;
}

