digraph "CFG forar.com.hjg.pngj.PngWriter.writeFirstChunks()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0009: INVOKE  (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.queueChunksFromOther():void type: DIRECT \l0x000c: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x000e: IGET  (r2 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x0010: IGET  (r3 I:int) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0012: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r2 I:java.io.OutputStream)\l  (r3 I:int)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks(java.io.OutputStream, int):int type: VIRTUAL \l0x0015: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0016: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0018: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x001a: IGET  (r2 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x001c: IGET  (r3 I:int) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x001e: INVOKE  (r0 I:int) = \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r2 I:java.io.OutputStream)\l  (r3 I:int)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks(java.io.OutputStream, int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0026: IGET  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x002d: CONST_STR  (r1 I:java.lang.String) =  \"cannot write palette for this format\" \l0x002f: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjOutputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0037: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x003e: CONST_STR  (r1 I:java.lang.String) =  \"missing palette\" \l0x0040: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjOutputException)\l  (r1 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0045: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x0047: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0049: IGET  (r2 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.os java.io.OutputStream \l0x004b: IGET  (r3 I:int) = (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x004d: INVOKE  \l  (r0 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r2 I:java.io.OutputStream)\l  (r3 I:int)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.writeChunks(java.io.OutputStream, int):int type: VIRTUAL \l0x0050: IPUT  (r1 I:int), (r4 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeFirstChunks((r4 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
}

