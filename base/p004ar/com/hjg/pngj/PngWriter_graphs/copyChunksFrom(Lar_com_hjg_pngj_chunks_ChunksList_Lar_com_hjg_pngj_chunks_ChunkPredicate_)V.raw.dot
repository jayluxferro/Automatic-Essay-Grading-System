digraph "CFG forar.com.hjg.pngj.PngWriter.copyChunksFrom(Lar\/com\/hjg\/pngj\/chunks\/ChunksList;Lar\/com\/hjg\/pngj\/chunks\/ChunkPredicate;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksList) = (r2 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.copyFromList ar.com.hjg.pngj.chunks.ChunksList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SGET  (r0 I:java.util.logging.Logger) =  ar.com.hjg.pngj.PngHelperInternal.LOGGER java.util.logging.Logger \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"copyChunksFrom should only be called once\" \l0x000a: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IPUT  \l  (r3 I:ar.com.hjg.pngj.chunks.ChunksList)\l  (r2 I:ar.com.hjg.pngj.PngWriter)\l ar.com.hjg.pngj.PngWriter.copyFromList ar.com.hjg.pngj.chunks.ChunksList \l0x0011: IPUT  \l  (r4 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l  (r2 I:ar.com.hjg.pngj.PngWriter)\l ar.com.hjg.pngj.PngWriter.copyFromPredicate ar.com.hjg.pngj.chunks.ChunkPredicate \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x0016: CONST_STR  (r4 I:java.lang.String) =  \"copyChunksFrom requires a predicate\" \l0x0018: INVOKE  \l  (r3 I:ar.com.hjg.pngj.PngjOutputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngWriter.copyChunksFrom((r2 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS]), (r3 I:ar.com.hjg.pngj.chunks.ChunksList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:ar.com.hjg.pngj.chunks.ChunkPredicate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

