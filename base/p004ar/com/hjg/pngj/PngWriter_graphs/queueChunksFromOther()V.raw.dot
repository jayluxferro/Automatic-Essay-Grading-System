digraph "CFG forar.com.hjg.pngj.PngWriter.queueChunksFromOther()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunksList) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.copyFromList ar.com.hjg.pngj.chunks.ChunksList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0075 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:ar.com.hjg.pngj.chunks.ChunkPredicate) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.copyFromPredicate ar.com.hjg.pngj.chunks.ChunkPredicate \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.currentChunkGroup int \l0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IGET  (r2 I:ar.com.hjg.pngj.chunks.ChunksList) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.copyFromList ar.com.hjg.pngj.chunks.ChunksList \l0x0014: INVOKE  (r2 I:java.util.List) = (r2 I:ar.com.hjg.pngj.chunks.ChunksList) ar.com.hjg.pngj.chunks.ChunksList.getChunks():java.util.List type: VIRTUAL \l0x0018: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0074 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0026: CHECK_CAST  (r3 I:ar.com.hjg.pngj.chunks.PngChunk) = (ar.com.hjg.pngj.chunks.PngChunk) (r3 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r3 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x002c: IGET  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: INVOKE  (r4 I:int) = (r3 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.getChunkGroup():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: IF  (r4 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: IF  (r4 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:22:0x003f \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003f \l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|0x003f: IGET  (r4 I:boolean) = (r3 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.crit boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x0041|0x0041: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004e \l}"];
Node_24 [shape=record,label="{24\:\ 0x0043|0x0043: IGET  (r4 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.chunks.PngChunk) ar.com.hjg.pngj.chunks.PngChunk.id java.lang.String \l0x0045: CONST_STR  (r5 I:java.lang.String) =  \"PLTE\" \l0x0047: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004e \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: IGET  (r4 I:ar.com.hjg.pngj.chunks.ChunkPredicate) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.copyFromPredicate ar.com.hjg.pngj.chunks.ChunkPredicate \l0x0050: INVOKE  (r4 I:boolean) = \l  (r4 I:ar.com.hjg.pngj.chunks.ChunkPredicate)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunkPredicate.match(ar.com.hjg.pngj.chunks.PngChunk):boolean type: INTERFACE \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_29 [shape=record,label="{29\:\ 0x0056|0x0056: IGET  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0058: INVOKE  (r4 I:java.util.List) = \l  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.getEquivalent(ar.com.hjg.pngj.chunks.PngChunk):java.util.List type: VIRTUAL \l0x005c: INVOKE  (r4 I:boolean) = (r4 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|0x0060: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_31 [shape=record,label="{31\:\ 0x0062|0x0062: IGET  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0064: INVOKE  (r4 I:java.util.List) = \l  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.getQueuedEquivalent(ar.com.hjg.pngj.chunks.PngChunk):java.util.List type: VIRTUAL \l0x0068: INVOKE  (r4 I:boolean) = (r4 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_32 [shape=record,label="{32\:\ 0x006c|0x006c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_33 [shape=record,label="{33\:\ 0x006e|0x006e: IGET  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite) = (r6 I:ar.com.hjg.pngj.PngWriter) ar.com.hjg.pngj.PngWriter.chunksList ar.com.hjg.pngj.chunks.ChunksListForWrite \l0x0070: INVOKE  \l  (r4 I:ar.com.hjg.pngj.chunks.ChunksListForWrite)\l  (r3 I:ar.com.hjg.pngj.chunks.PngChunk)\l ar.com.hjg.pngj.chunks.ChunksListForWrite.queue(ar.com.hjg.pngj.chunks.PngChunk):boolean type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x0074|0x0074: RETURN   \l}"];
Node_35 [shape=record,label="{35\:\ 0x0075|0x0075: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.queueChunksFromOther((r6 'this' I:ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_35;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_35[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_34;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_10[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_19;
Node_17 -> Node_10[style=dashed];
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_22;
Node_20 -> Node_10[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_10[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_10;
Node_28 -> Node_29[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_10;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_10;
Node_32 -> Node_33[style=dashed];
Node_33 -> Node_10;
}

