digraph "CFG forar.com.hjg.pngj.PngWriter.writeRow(Lar\/com\/hjg\/pngj\/IImageLine;I)V" {
subgraph cluster_Region_1432138595 {
label = "R(4:0|(1:2)|(1:5)|(2:(4:(1:13)|(1:17)|18|19)|(2:9|10)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.rowNum++\l}"];
subgraph cluster_IfRegion_1631521600 {
label = "IF [B:1:0x000d] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r3.rowNum == r3.imgInfo.rows) goto L_0x000f\l}"];
subgraph cluster_Region_260189937 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|r3.rowNum = 0\l}"];
}
}
subgraph cluster_IfRegion_1040681681 {
label = "IF [B:4:0x0015] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|if (r5 == r3.imgInfo.rows) goto L_0x0017\l}"];
subgraph cluster_Region_242282969 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|r5 = 0\l}"];
}
}
subgraph cluster_Region_386702940 {
label = "R(2:(4:(1:13)|(1:17)|18|19)|(2:9|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_157798378 {
label = "IF [B:6:0x0018, B:8:0x001c] THEN: R(4:(1:13)|(1:17)|18|19) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|PHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v6 int) binds: [B:4:0x0015, B:5:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 \< 0) goto L_0x0040\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|ADDED_TO_REGION\l|if (r3.rowNum == r5) goto L_0x0040\l}"];
subgraph cluster_Region_211967089 {
label = "R(4:(1:13)|(1:17)|18|19)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_196381973 {
label = "IF [B:12:0x0042] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0042|if (r3.rowNum == 0) goto L_0x0044\l}"];
subgraph cluster_Region_46353283 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0044|r3.currentpass++\l}"];
}
}
subgraph cluster_IfRegion_1900993529 {
label = "IF [B:14:0x004a, B:16:0x0050] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x004a|ADDED_TO_REGION\l|if (r5 == 0) goto L_0x004c\l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|ADDED_TO_REGION\l|if (r3.currentpass == r3.passes) goto L_0x0052\l}"];
subgraph cluster_Region_1189167781 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0052|initIdat()\lwriteFirstChunks()\l}"];
}
}
Node_18 [shape=record,label="{18\:\ 0x0058|byte[] byte[] r5 = r3.pixelsWriter.getRowb()\lr4.writeToPngRaw(r5)\lr3.pixelsWriter.processRow(r5)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1771221833 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001f}"];
Node_10 [shape=record,label="{10\:\ 0x003f|throw new p004ar.com.hjg.pngj.PngjOutputException(\"rows must be written in order: expected:\" + r3.rowNum + \" passed:\" + r5)\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0040}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x004c}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngWriter.writeRow((r3v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.IImageLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_18[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_9 -> Node_10;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_11 -> Node_12;
Node_15 -> Node_16;
}

