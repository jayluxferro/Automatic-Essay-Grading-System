digraph "CFG forar.com.hjg.pngj.PngWriter.end()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r2.rowNum != (r2.imgInfo.rows + \-1)) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lSplitter:B:2:0x000a\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lSplitter:B:2:0x000a\l|r2.datStream.flush()     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lwriteLastChunks()     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lwriteEndChunk()     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|close()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler: all (r0v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:8:0x001c\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|ExcHandler: IOException (r0v2 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:2:0x000a\l|java.io.IOException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|SYNTHETIC\lSplitter:B:8:0x001c\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lSplitter:B:8:0x001c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l|throw new p004ar.com.hjg.pngj.PngjOutputException((java.lang.Throwable) r0)     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|close()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|throw r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026}"];
Node_14 [shape=record,label="{14\:\ 0x002d|throw new p004ar.com.hjg.pngj.PngjOutputException(\"all rows have not been written\")\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngWriter.end((r2v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

