digraph "CFG forar.com.hjg.pngj.PngWriter.writeFirstChunks()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.currentChunkGroup \< 4) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r4.currentChunkGroup = 1\lqueueChunksFromOther()\lr4.chunksList.writeChunks(r4.f52os, r4.currentChunkGroup)\lr4.currentChunkGroup = 2\lint r0 = r4.chunksList.writeChunks(r4.f52os, r4.currentChunkGroup)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|if (r0 \<= 0) goto L_0x0033\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024}"];
Node_6 [shape=record,label="{6\:\ 0x0028|if (r4.imgInfo.greyscale != false) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b}"];
Node_8 [shape=record,label="{8\:\ 0x0032|throw new p004ar.com.hjg.pngj.PngjOutputException(\"cannot write palette for this format\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|if (r0 != 0) goto L_0x0044\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035}"];
Node_11 [shape=record,label="{11\:\ 0x0039|if (r4.imgInfo.indexed != false) goto L_0x003c\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c}"];
Node_13 [shape=record,label="{13\:\ 0x0043|throw new p004ar.com.hjg.pngj.PngjOutputException(\"missing palette\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|r4.currentChunkGroup = 3\lr4.chunksList.writeChunks(r4.f52os, r4.currentChunkGroup)\lr4.currentChunkGroup = 4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeFirstChunks((r4v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
}

