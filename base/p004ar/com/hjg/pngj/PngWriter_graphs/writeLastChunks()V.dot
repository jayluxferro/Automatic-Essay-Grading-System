digraph "CFG forar.com.hjg.pngj.PngWriter.writeLastChunks()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|queueChunksFromOther()\lr4.currentChunkGroup = 5\lr4.chunksList.writeChunks(r4.f52os, r4.currentChunkGroup)\ljava.util.List r0 = r4.chunksList.getQueuedChunks()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|if (r0.isEmpty() == false) goto L_0x001f\l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|r4.currentChunkGroup = 6\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(r0.size())\lr2.append(\" chunks were not written! Eg: \")\lr2.append(r0.get(0).toString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0047|throw new p004ar.com.hjg.pngj.PngjOutputException(r2.toString())\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.writeLastChunks((r4v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

