digraph "CFG forar.com.hjg.pngj.PngWriter.queueChunksFromOther()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.copyFromList == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r6.copyFromPredicate != null) goto L_0x000a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r6.currentChunkGroup \< 4) goto L_0x0011\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|r0 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|r0 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v4 boolean), (r0v5 boolean) binds: [B:7:0x0011, B:6:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|java.util.Iterator r2 = r6.copyFromList.getChunks().iterator()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_START\lLOOP:0: B:9:0x001c\-\>B:30:0x001c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|if (r2.hasNext() == false) goto L_0x0074\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|ar.com.hjg.pngj.chunks.PngChunk r3 = r2.next()\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|if (r3.getRaw().data != null) goto L_0x0031\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|int r4 = r3.getChunkGroup()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|if (r4 \> 4) goto L_0x003a\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|if (r0 == false) goto L_0x003a\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|if (r4 \< 4) goto L_0x003f\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|if (r0 != false) goto L_0x003f\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f}"];
Node_19 [shape=record,label="{19\:\ 0x0041|if (r3.crit == false) goto L_0x004e\l}"];
Node_20 [shape=record,label="{20\:\ 0x0043}"];
Node_21 [shape=record,label="{21\:\ 0x004b|if (r3.f58id.equals(\"PLTE\") != false) goto L_0x004e\l}"];
Node_22 [shape=record,label="{22\:\ 0x004e}"];
Node_23 [shape=record,label="{23\:\ 0x0054|if (r6.copyFromPredicate.match(r3) == false) goto L_0x001c\l}"];
Node_24 [shape=record,label="{24\:\ 0x0056}"];
Node_25 [shape=record,label="{25\:\ 0x0060|if (r6.chunksList.getEquivalent(r3).isEmpty() == false) goto L_0x001c\l}"];
Node_26 [shape=record,label="{26\:\ 0x0062}"];
Node_27 [shape=record,label="{27\:\ 0x006c|if (r6.chunksList.getQueuedEquivalent(r3).isEmpty() == false) goto L_0x001c\l}"];
Node_28 [shape=record,label="{28\:\ 0x006e|r6.chunksList.queue(r3)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0074|RETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|LOOP_END\lSYNTHETIC\lLOOP:0: B:9:0x001c\-\>B:30:0x001c\l}"];
Node_31 [shape=record,label="{31\:\ 0x0074|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001c|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x001c|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x001c|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x001c|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.PngWriter.queueChunksFromOther((r6v0 'this' ar.com.hjg.pngj.PngWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_40;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_41[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_31;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_32[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_15 -> Node_33[style=dashed];
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_17 -> Node_34[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_35[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_36;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_37;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_38;
Node_28 -> Node_39;
Node_30 -> Node_9;
Node_31 -> Node_29;
Node_32 -> Node_30;
Node_33 -> Node_30;
Node_34 -> Node_30;
Node_35 -> Node_30;
Node_36 -> Node_30;
Node_37 -> Node_30;
Node_38 -> Node_30;
Node_39 -> Node_30;
}

