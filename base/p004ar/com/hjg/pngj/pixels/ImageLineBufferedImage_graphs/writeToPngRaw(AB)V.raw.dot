digraph "CFG forar.com.hjg.pngj.pixels.ImageLineBufferedImage.writeToPngRaw([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bytesPerRow int \l0x0004: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00d5 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowNumber int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:25:0x00cd \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowNumber int \l0x000e: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0010: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:25:0x00cd \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r0 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l0x0016: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowNumber int \l0x0018: ARITH  (r0 I:int) = (r0 I:int) * (r1 I:int) \l0x001a: IGET  (r1 I:boolean) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.hasAlpha boolean \l0x001c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x007f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IGET  (r1 I:boolean) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bgrOrder boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0051 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:24:0x00cc \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IGET  (r1 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0029: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x002b: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x002d: IGET  (r1 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x002f: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x0031: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0033: IGET  (r3 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0035: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x0037: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0039: IGET  (r4 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x003b: ARITH  (r6 I:int) = (r5 I:int) + (1 int) \l0x003d: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x003f: ARITH  (r5 I:int) = (r2 I:int) + (1 int) \l0x0041: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0043: ARITH  (r2 I:int) = (r5 I:int) + (1 int) \l0x0045: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0047: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x0049: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x004b: ARITH  (r2 I:int) = (r3 I:int) + (1 int) \l0x004d: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x004f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:24:0x00cc \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l0x0057: IGET  (r3 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0059: ARITH  (r4 I:int) = (r0 I:int) + (1 int) \l0x005b: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x005d: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x005f: ARITH  (r0 I:int) = (r1 I:int) + (1 int) \l0x0061: IGET  (r2 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0063: ARITH  (r3 I:int) = (r4 I:int) + (1 int) \l0x0065: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0067: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0069: ARITH  (r1 I:int) = (r0 I:int) + (1 int) \l0x006b: IGET  (r2 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x006d: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x006f: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0071: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0073: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0075: IGET  (r0 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0077: ARITH  (r3 I:int) = (r4 I:int) + (1 int) \l0x0079: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x007b: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x007d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x007f|0x007f: IGET  (r1 I:boolean) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bgrOrder boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x0081|0x0081: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00a8 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0083|0x0083: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0085|0x0085: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:24:0x00cc \l}"];
Node_20 [shape=record,label="{20\:\ 0x0087|0x0087: IGET  (r1 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0089: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x008b: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x008d: IGET  (r1 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x008f: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x0091: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0093: IGET  (r3 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x0095: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x0097: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0099: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x009b: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x009d: ARITH  (r2 I:int) = (r4 I:int) + (1 int) \l0x009f: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x00a1: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l0x00a3: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x00a5: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a6: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a8|0x00a8: IGET  (r1 I:int) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_22 [shape=record,label="{22\:\ 0x00aa|0x00aa: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:24:0x00cc \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ac|0x00ac: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l0x00ae: IGET  (r3 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x00b0: ARITH  (r4 I:int) = (r0 I:int) + (1 int) \l0x00b2: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x00b4: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x00b6: ARITH  (r0 I:int) = (r1 I:int) + (1 int) \l0x00b8: IGET  (r2 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x00ba: ARITH  (r3 I:int) = (r4 I:int) + (1 int) \l0x00bc: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x00be: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x00c0: ARITH  (r2 I:int) = (r0 I:int) + (1 int) \l0x00c2: IGET  (r1 I:byte[]) = (r7 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x00c4: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x00c6: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x00c8: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x00ca: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00cc|0x00cc: RETURN   \l}"];
Node_25 [shape=record,label="{25\:\ 0x00cd|0x00cd: NEW_INSTANCE  (r8 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x00cf: CONST_STR  (r0 I:java.lang.String) =  \"???\" \l0x00d1: INVOKE  (r8 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d4|0x00d4: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00d5|0x00d5: NEW_INSTANCE  (r8 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x00d7: CONST_STR  (r0 I:java.lang.String) =  \"??\" \l0x00d9: INVOKE  (r8 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x00dc|0x00dc: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.ImageLineBufferedImage.writeToPngRaw((r7 'this' I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage A[IMMUTABLE_TYPE, THIS]), (r8 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_27;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_25;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_25;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_24;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_24;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_18;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_21;
Node_25 -> Node_26;
Node_27 -> Node_28;
}

