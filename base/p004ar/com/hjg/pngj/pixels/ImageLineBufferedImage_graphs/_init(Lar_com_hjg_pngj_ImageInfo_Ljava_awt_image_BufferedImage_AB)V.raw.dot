digraph "CFG forar.com.hjg.pngj.pixels.ImageLineBufferedImage.\<init\>(Lar\/com\/hjg\/pngj\/ImageInfo;Ljava\/awt\/image\/BufferedImage;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: IPUT  \l  (r0 I:int)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowNumber int \l0x0006: IPUT  \l  (r2 I:ar.com.hjg.pngj.ImageInfo)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0008: IPUT  \l  (r3 I:java.awt.image.BufferedImage)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.image java.awt.image.BufferedImage \l0x000a: IPUT  \l  (r4 I:byte[])\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bytes byte[] \l0x000c: IGET  (r2 I:java.awt.image.BufferedImage) = (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.image java.awt.image.BufferedImage \l0x000e: INVOKE  (r2 I:java.awt.image.ColorModel) = (r2 I:java.awt.image.BufferedImage) java.awt.image.BufferedImage.getColorModel():java.awt.image.ColorModel type: VIRTUAL \l0x0012: INVOKE  (r2 I:boolean) = (r2 I:java.awt.image.ColorModel) java.awt.image.ColorModel.hasAlpha():boolean type: VIRTUAL \l0x0016: IPUT  \l  (r2 I:boolean)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.hasAlpha boolean \l0x0018: IGET  (r2 I:boolean) = (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.hasAlpha boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: IGET  (r2 I:java.awt.image.BufferedImage) = (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.image java.awt.image.BufferedImage \l0x001e: INVOKE  (r2 I:int) = (r2 I:java.awt.image.BufferedImage) java.awt.image.BufferedImage.getWidth():int type: VIRTUAL \l0x0022: ARITH  (r2 I:int) = (r2 I:int) * (4 int) \l0x0024: IPUT  \l  (r2 I:int)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: IGET  (r2 I:java.awt.image.BufferedImage) = (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.image java.awt.image.BufferedImage \l0x0029: INVOKE  (r2 I:int) = (r2 I:java.awt.image.BufferedImage) java.awt.image.BufferedImage.getWidth():int type: VIRTUAL \l0x002d: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x002f: IPUT  \l  (r2 I:int)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.rowLength int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: IGET  (r2 I:java.awt.image.BufferedImage) = (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage) ar.com.hjg.pngj.pixels.ImageLineBufferedImage.image java.awt.image.BufferedImage \l0x0033: INVOKE  (r2 I:java.awt.image.SampleModel) = (r2 I:java.awt.image.BufferedImage) java.awt.image.BufferedImage.getSampleModel():java.awt.image.SampleModel type: VIRTUAL \l0x0037: CHECK_CAST  (r2 I:java.awt.image.ComponentSampleModel) = (java.awt.image.ComponentSampleModel) (r2 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  (r2 I:int[]) = (r2 I:java.awt.image.ComponentSampleModel) java.awt.image.ComponentSampleModel.getBandOffsets():int[] type: VIRTUAL \l0x003d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003e: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0040|0x0040: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0043 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0042|0x0042: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: IPUT  \l  (r3 I:boolean)\l  (r1 I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage)\l ar.com.hjg.pngj.pixels.ImageLineBufferedImage.bgrOrder boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.ImageLineBufferedImage.\<init\>((r1 'this' I:ar.com.hjg.pngj.pixels.ImageLineBufferedImage A[IMMUTABLE_TYPE, THIS]), (r2 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.awt.image.BufferedImage A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

