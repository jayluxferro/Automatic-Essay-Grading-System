digraph "CFG forar.com.hjg.pngj.pixels.CompressorStreamLz4.compressFromBuffer()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) ar.com.hjg.pngj.pixels.CompressorStreamLz4.inbuf int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:long) = (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) ar.com.hjg.pngj.pixels.CompressorStreamLz4.bytesOut long \l0x0006: IGET  (r2 I:ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4) = (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) ar.com.hjg.pngj.pixels.CompressorStreamLz4.lz4 ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4 \l0x0008: IGET  (r3 I:byte[]) = (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) ar.com.hjg.pngj.pixels.CompressorStreamLz4.buf byte[] \l0x000a: IGET  (r4 I:int) = (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) ar.com.hjg.pngj.pixels.CompressorStreamLz4.inbuf int \l0x000c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r2 I:int) = \l  (r2 I:ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4)\l  (r3 I:byte[])\l  (r5 I:int)\l  (r4 I:int)\l ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compressEstim(byte[], int, int):int type: VIRTUAL \l0x0011: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0012: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0013: IPUT  \l  (r0 I:long)\l  (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4)\l ar.com.hjg.pngj.pixels.CompressorStreamLz4.bytesOut long \l0x0015: IPUT  \l  (r5 I:int)\l  (r6 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4)\l ar.com.hjg.pngj.pixels.CompressorStreamLz4.inbuf int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{void ar.com.hjg.pngj.pixels.CompressorStreamLz4.compressFromBuffer((r6 'this' I:ar.com.hjg.pngj.pixels.CompressorStreamLz4 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

