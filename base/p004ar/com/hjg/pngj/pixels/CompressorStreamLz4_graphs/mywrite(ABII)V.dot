digraph "CFG forar.com.hjg.pngj.pixels.CompressorStreamLz4.mywrite([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 != 0) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r4.done != false) goto L_0x0064\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r4.closed != false) goto L_0x0064\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|r4.bytesIn = r4.bytesIn + ((long) r7)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|LOOP_START\lPHI: r6 r7 \l  PHI: (r6v2 int) = (r6v0 int), (r6v3 int) binds: [B:6:0x000b, B:30:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:6:0x000b, B:30:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0011\-\>B:30:0x0011\l|if (r7 \<= 0) goto L_0x0063\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013}"];
Node_9 [shape=record,label="{9\:\ 0x0015|if (r4.inbuf != 0) goto L_0x0031\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017}"];
Node_11 [shape=record,label="{11\:\ 0x0019|if (r7 \>= MAX_BUFFER_SIZE) goto L_0x0023\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b}"];
Node_13 [shape=record,label="{13\:\ 0x0021|if ((r4.bytesIn \> r4.totalbytes ? 1 : (r4.bytesIn == r4.totalbytes ? 0 : \-1)) != 0) goto L_0x0031\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|r4.bytesOut = r4.bytesOut + ((long) r4.lz4.compressEstim(r5, r6, r7))\lr7 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031}"];
Node_16 [shape=record,label="{16\:\ 0x0033|if (r4.buf != null) goto L_0x003b\l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|r4.buf = new byte[r4.buffer_size]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003b}"];
Node_19 [shape=record,label="{19\:\ 0x0040|if ((r4.inbuf + r7) \> r4.buffer_size) goto L_0x0044\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|r0 = r7\l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|int r0 = r4.buffer_size \- r4.inbuf\l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|PHI: r0 \l  PHI: (r0v8 int) = (r0v11 int), (r0v12 int) binds: [B:21:0x0044, B:20:0x0042] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \<= 0) goto L_0x0052\l}"];
Node_23 [shape=record,label="{23\:\ 0x004b|java.lang.System.arraycopy(r5, r6, r4.buf, r4.inbuf, r0)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0052|r4.inbuf = r4.inbuf + r0\lint r7 = r7 \- r0\lint r6 = r6 + r0\l}"];
Node_25 [shape=record,label="{25\:\ 0x005d|if (r4.inbuf != r4.buffer_size) goto L_0x0011\l}"];
Node_26 [shape=record,label="{26\:\ 0x005f|compressFromBuffer()\l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ 0x0064}"];
Node_29 [shape=record,label="{29\:\ 0x006b|throw new p004ar.com.hjg.pngj.PngjOutputException(\"write beyond end of stream\")\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|LOOP_END\lSYNTHETIC\lPHI: r6 r7 \l  PHI: (r6v3 int) = (r6v4 int), (r6v4 int), (r6v2 int) binds: [B:33:0x0011, B:34:0x0011, B:32:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v2 int) = (r7v3 int), (r7v3 int), (r7v5 int) binds: [B:33:0x0011, B:34:0x0011, B:32:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0011\-\>B:30:0x0011\l}"];
Node_31 [shape=record,label="{31\:\ 0x0063|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0011|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0011|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStreamLz4.mywrite((r4v0 'this' ar.com.hjg.pngj.pixels.CompressorStreamLz4 A[IMMUTABLE_TYPE, THIS]), (r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_28;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_28;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_31;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_32;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_34;
Node_28 -> Node_29;
Node_30 -> Node_7;
Node_31 -> Node_27;
Node_32 -> Node_30;
Node_33 -> Node_30;
Node_34 -> Node_30;
}

