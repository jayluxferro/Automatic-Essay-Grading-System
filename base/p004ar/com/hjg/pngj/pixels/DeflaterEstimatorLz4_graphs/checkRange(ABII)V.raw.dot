digraph "CFG forar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkLength(int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange(byte[], int):void type: STATIC \l0x0008: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0009: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x000b: INVOKE  (r0 I:byte[]), (r1 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange(byte[], int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{static void ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange((r0 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

