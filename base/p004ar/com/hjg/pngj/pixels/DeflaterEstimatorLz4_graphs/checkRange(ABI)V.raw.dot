digraph "CFG forar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange([BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x0008: INVOKE  (r0 I:java.lang.ArrayIndexOutOfBoundsException), (r1 I:int) java.lang.ArrayIndexOutOfBoundsException.\<init\>(int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static void ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.checkRange((r0 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
}

