digraph "CFG forar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compressEstim([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r8 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r8 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (65546(0x1000a, float:9.185E\-41) ?[int, float, short, byte, char])\l \l0x0008: ARITH  (r1 I:int) = (r8 I:int) + (r0 I:int) \l0x000a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x000c: ARITH  (r1 I:int) = (r1 I:int) \/ (r0 I:int) \l0x000d: ARITH  (r3 I:int) = (r8 I:int) \/ (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: ARITH  (r0 I:int) = (r3 I:int) * (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r3 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x002c \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IF  (r7 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:13:0x0022 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: INVOKE  (r4 I:int) = (r6 I:byte[]), (r2 I:int), (r7 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compress64k(byte[], int, int):int type: STATIC \l0x0026: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x0028: ARITH  (r1 I:int) = (r1 I:int) + (r7 I:int) \l0x0029: ARITH  (r7 I:int) = (r8 I:int) \- (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: CAST  (r6 I:double) = (double) (r0 I:int) \l0x002d: CAST  (r2 I:double) = (double) (r1 I:int) \l0x002e: ARITH  (r6 I:double) = (r6 I:double) \/ (r2 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: CAST  (r0 I:double) = (double) (r8 I:int) \l0x0033: ARITH  (r6 I:double) = (r6 I:double) * (r0 I:double) \l0x0035: CONST  (r0 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0037: ARITH  (r6 I:double) = (r6 I:double) + (r0 I:double) \l0x0038: CAST  (r0 I:int) = (int) (r6 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: RETURN  (r0 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: NEW_INSTANCE  (r6 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x003c: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003e: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0041: CONST_STR  (r0 I:java.lang.String) =  \"?? \" \l0x0043: INVOKE  (r7 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r7 I:java.lang.StringBuilder), (r8 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0049: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r6 I:java.lang.RuntimeException), (r7 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compressEstim((r5 'this' I:ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4 A[IMMUTABLE_TYPE, THIS]), (r6 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_19;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_18;
Node_19 -> Node_20;
}

