digraph "CFG forar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compress64k([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r14 I:int) + (r15 I:int) \l0x0002: ARITH  (r1 I:int) = (r0 I:int) + (\-5 int) \l0x0004: ARITH  (r2 I:int) = (r0 I:int) + (\-12 int) \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (270(0x10e, float:3.78E\-43) ?[int, float, short, byte, char])\l \l0x0008: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r6 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r15 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:27:0x00a3 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l0x0010: NEW_ARRAY  (r15 I:short[]) = (r15 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x0012: ARITH  (r6 I:int) = (r14 I:int) + (1 int) \l0x0014: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: SGET  (r5 I:int) =  ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.SKIP_STRENGTH int \l0x0018: ARITH  (r5 I:int) = (r4 I:int) \<\< (r5 I:int) \l0x001a: ARITH  (r5 I:int) = (r5 I:int) + (3 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: ARITH  (r9 I:int) = (r5 I:int) + (1 int) \l0x001e: SGET  (r10 I:int) =  ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.SKIP_STRENGTH int \l0x0020: ARITH  (r5 I:int) = (r5 I:int) \>\>\> (r10 I:int) \l0x0021: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r5 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: INVOKE  (r10 I:int) = (r13 I:byte[]), (r6 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readInt(byte[], int):int type: STATIC \l0x002b: INVOKE  (r10 I:int) = (r10 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.hash64k(int):int type: STATIC \l0x002f: INVOKE  (r11 I:int) = (r15 I:short[]), (r10 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readShort(short[], int):int type: STATIC \l0x0033: ARITH  (r11 I:int) = (r11 I:int) + (r14 I:int) \l0x0034: ARITH  (r12 I:int) = (r6 I:int) \- (r14 I:int) \l0x0036: INVOKE  (r15 I:short[]), (r10 I:int), (r12 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.writeShort(short[], int, int):void type: STATIC \l0x0039: INVOKE  (r10 I:boolean) = (r13 I:byte[]), (r11 I:int), (r6 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readIntEquals(byte[], int, int):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x009f \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: INVOKE  (r5 I:int) = \l  (r13 I:byte[])\l  (r11 I:int)\l  (r6 I:int)\l  (r14 I:int)\l  (r7 I:int)\l ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.commonBytesBackward(byte[], int, int, int, int):int type: STATIC \l0x0043: ARITH  (r6 I:int) = (r6 I:int) \- (r5 I:int) \l0x0044: ARITH  (r11 I:int) = (r11 I:int) \- (r5 I:int) \l0x0045: ARITH  (r5 I:int) = (r6 I:int) \- (r7 I:int) \l0x0047: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0049: CONST  (r10 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: IF  (r5 I:?[int, byte, short, char]) \< (r10 I:?[int, byte, short, char])  \-\> B:14:0x0055 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: IF  (r5 I:?[int, byte, short, char]) \<= (r10 I:?[int, byte, short, char])  \-\> B:13:0x0054 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|0x004f: ARITH  (r7 I:int) = (r5 I:int) + (\-15 int) \l0x0051: ARITH  (r7 I:int) = (r7 I:int) \/ (255 int) \l0x0053: ARITH  (r8 I:int) = (r8 I:int) + (r7 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: ARITH  (r8 I:int) = (r8 I:int) + (r4 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: ARITH  (r8 I:int) = (r8 I:int) + (r5 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: ARITH  (r8 I:int) = (r8 I:int) + (2 int) \l0x0058: ARITH  (r6 I:int) = (r6 I:int) + (4 int) \l0x005a: ARITH  (r11 I:int) = (r11 I:int) + (4 int) \l0x005c: INVOKE  (r5 I:int) = (r13 I:byte[]), (r11 I:int), (r6 I:int), (r1 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.commonBytes(byte[], int, int, int):int type: STATIC \l0x0060: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: IF  (r5 I:?[int, byte, short, char]) \< (r10 I:?[int, byte, short, char])  \-\> B:20:0x006b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: IF  (r5 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0065|0x0065: ARITH  (r5 I:int) = (r5 I:int) + (\-15 int) \l0x0067: ARITH  (r5 I:int) = (r5 I:int) \/ (255 int) \l0x0069: ARITH  (r8 I:int) = (r8 I:int) + (r5 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: ARITH  (r8 I:int) = (r8 I:int) + (r4 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|0x006b: IF  (r6 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:22:0x006f \l}"];
Node_21 [shape=record,label="{21\:\ 0x006d|0x006d: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: ARITH  (r5 I:int) = (r6 I:int) + (\-2 int) \l0x0071: INVOKE  (r7 I:int) = (r13 I:byte[]), (r5 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readInt(byte[], int):int type: STATIC \l0x0075: INVOKE  (r7 I:int) = (r7 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.hash64k(int):int type: STATIC \l0x0079: ARITH  (r5 I:int) = (r5 I:int) \- (r14 I:int) \l0x007a: INVOKE  (r15 I:short[]), (r7 I:int), (r5 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.writeShort(short[], int, int):void type: STATIC \l0x007d: INVOKE  (r5 I:int) = (r13 I:byte[]), (r6 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readInt(byte[], int):int type: STATIC \l0x0081: INVOKE  (r5 I:int) = (r5 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.hash64k(int):int type: STATIC \l0x0085: INVOKE  (r7 I:int) = (r15 I:short[]), (r5 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readShort(short[], int):int type: STATIC \l0x0089: ARITH  (r11 I:int) = (r14 I:int) + (r7 I:int) \l0x008b: ARITH  (r7 I:int) = (r6 I:int) \- (r14 I:int) \l0x008d: INVOKE  (r15 I:short[]), (r5 I:int), (r7 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.writeShort(short[], int, int):void type: STATIC \l0x0090: INVOKE  (r5 I:boolean) = (r13 I:byte[]), (r6 I:int), (r11 I:int) ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.readIntEquals(byte[], int, int):boolean type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0094|0x0094: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x009c \l}"];
Node_24 [shape=record,label="{24\:\ 0x0096|0x0096: ARITH  (r5 I:int) = (r6 I:int) + (1 int) \l0x0098: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0099: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x009c|0x009c: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x009f|0x009f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a0: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a3|0x00a3: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a4|0x00a4: ARITH  (r0 I:int) = (r0 I:int) \- (r14 I:int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a5|0x00a5: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:31:0x00ac \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a7|0x00a7: ARITH  (r13 I:int) = (r0 I:int) + (\-15 int) \l0x00a9: ARITH  (r13 I:int) = (r13 I:int) \/ (255 int) \l0x00ab: ARITH  (r8 I:int) = (r8 I:int) + (r13 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00ac|0x00ac: ARITH  (r8 I:int) = (r8 I:int) + (r4 I:int) \l0x00ad: ARITH  (r8 I:int) = (r8 I:int) + (r0 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00ae|0x00ae: RETURN  (r8 I:int) \l}"];
MethodNode[shape=record,label="{static int ar.com.hjg.pngj.pixels.DeflaterEstimatorLz4.compress64k((r13 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_27;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_28;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_3;
Node_25 -> Node_15;
Node_26 -> Node_4;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
}

