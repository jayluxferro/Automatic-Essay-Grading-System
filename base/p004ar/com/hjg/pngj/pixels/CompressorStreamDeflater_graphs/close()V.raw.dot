digraph "CFG forar.com.hjg.pngj.pixels.CompressorStreamDeflater.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.done():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0003\l|0x0003: IGET  (r0 I:boolean) = (r1 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflaterIsOwn boolean A[Catch:\{ Exception \-\> 0x000c \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c A[Catch:\{ Exception \-\> 0x000c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:java.util.zip.Deflater) = (r1 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflater java.util.zip.Deflater A[Catch:\{ Exception \-\> 0x000c \}]\l0x0009: INVOKE  (r0 I:java.util.zip.Deflater) java.util.zip.Deflater.end():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x000c \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r1 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.close():void type: SUPER \l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:1:0x0003\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStreamDeflater.close((r1 'this' I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_6 -> Node_5;
}

