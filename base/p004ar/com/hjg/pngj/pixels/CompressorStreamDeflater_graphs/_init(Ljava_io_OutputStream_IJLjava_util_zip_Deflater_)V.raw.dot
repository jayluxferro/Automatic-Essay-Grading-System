digraph "CFG forar.com.hjg.pngj.pixels.CompressorStreamDeflater.\<init\>(Ljava\/io\/OutputStream;IJLjava\/util\/zip\/Deflater;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStream)\l  (r1 I:java.io.OutputStream)\l  (r2 I:int)\l  (r3 I:long)\l ar.com.hjg.pngj.pixels.CompressorStream.\<init\>(java.io.OutputStream, int, long):void type: DIRECT \l0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (4092(0xffc, float:5.734E\-42) ?[int, float, short, byte, char])\l \l0x0005: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0007: IPUT  \l  (r1 I:byte[])\l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.buf byte[] \l0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: IPUT  \l  (r1 I:boolean)\l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflaterIsOwn boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: NEW_INSTANCE  (r2 I:java.util.zip.Deflater) =  java.util.zip.Deflater \l0x0010: INVOKE  (r2 I:java.util.zip.Deflater) java.util.zip.Deflater.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IPUT  \l  (r2 I:java.util.zip.Deflater)\l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflater java.util.zip.Deflater \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IPUT  \l  (r1 I:boolean)\l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflaterIsOwn boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStreamDeflater.\<init\>((r0 'this' I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater A[IMMUTABLE_TYPE, THIS]), (r1 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.zip.Deflater A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
}

