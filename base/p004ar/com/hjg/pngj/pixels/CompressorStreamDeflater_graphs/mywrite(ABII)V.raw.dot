digraph "CFG forar.com.hjg.pngj.pixels.CompressorStreamDeflater.mywrite([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.zip.Deflater) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflater java.util.zip.Deflater \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.zip.Deflater) java.util.zip.Deflater.finished():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:boolean) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.done boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:boolean) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.closed boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r0 I:java.util.zip.Deflater) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflater java.util.zip.Deflater \l0x0012: INVOKE  \l  (r0 I:java.util.zip.Deflater)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r5 I:int)\l java.util.zip.Deflater.setInput(byte[], int, int):void type: VIRTUAL \l0x0015: IGET  (r3 I:long) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.bytesIn long \l0x0017: CAST  (r0 I:long) = (long) (r5 I:int) \l0x0018: ARITH  (r3 I:long) = (r3 I:long) + (r0 I:long) \l0x0019: IPUT  \l  (r3 I:long)\l  (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.bytesIn long \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r3 I:java.util.zip.Deflater) = (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflater java.util.zip.Deflater \l0x001d: INVOKE  (r3 I:boolean) = (r3 I:java.util.zip.Deflater) java.util.zip.Deflater.needsInput():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r2 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) ar.com.hjg.pngj.pixels.CompressorStreamDeflater.deflate():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x002a: CONST_STR  (r4 I:java.lang.String) =  \"write beyond end of stream\" \l0x002c: INVOKE  \l  (r3 I:ar.com.hjg.pngj.PngjOutputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStreamDeflater.mywrite((r2 'this' I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_11 -> Node_12;
}

