digraph "CFG forar.com.hjg.pngj.pixels.PixelsWriterDefault.filterAndWrite([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 != r3.rowb) goto L_0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|decideCurFilterType()\lsendToCompressedStream(filterRowWithFilterType(r3.curfilterType, r4, r3.rowbprev, r3.rowbfilter))\lbyte[] r4 = r3.rowb\lr3.rowb = r3.rowbprev\lr3.rowbprev = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d}"];
Node_5 [shape=record,label="{5\:\ 0x0024|throw new java.lang.RuntimeException(\"??\")\l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.pixels.PixelsWriterDefault.filterAndWrite((r3v0 'this' ar.com.hjg.pngj.pixels.PixelsWriterDefault A[IMMUTABLE_TYPE, THIS]), (r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

