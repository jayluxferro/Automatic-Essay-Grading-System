digraph "CFG forar.com.hjg.pngj.pixels.PixelsWriterMultiple.rebuildFiltersBank()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rowsPerBandCurrent int \l0x0002: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0003: IGET  (r2 I:int) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.buflen int \l0x0005: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0006: ARITH  (r0 I:long) = (r0 I:long) * (r2 I:long) \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r2 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:17:0x0048 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r3 I:ar.com.hjg.pngj.pixels.CompressorStream[]) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filterBank ar.com.hjg.pngj.pixels.CompressorStream[] \l0x000e: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r4 I:long) = (r3 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.totalbytes long \l0x0014: CMP_L  (r4 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: INVOKE  (r3 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.reset():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0022 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: INVOKE  (r3 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.close():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IGET  (r3 I:boolean) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.useLz4 boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4) =  ar.com.hjg.pngj.pixels.CompressorStreamLz4 \l0x0028: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: IGET  (r5 I:int) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.buflen int \l0x002b: INVOKE  \l  (r3 I:ar.com.hjg.pngj.pixels.CompressorStreamLz4)\l  (r4 I:java.io.OutputStream)\l  (r5 I:int)\l  (r0 I:long)\l ar.com.hjg.pngj.pixels.CompressorStreamLz4.\<init\>(java.io.OutputStream, int, long):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater) =  ar.com.hjg.pngj.pixels.CompressorStreamDeflater \l0x0031: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: IGET  (r6 I:int) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.buflen int \l0x0034: CONST  (r9 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0035: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0036: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0037: MOVE  (r7 I:?[long, double]) = (r0 I:?[long, double]) \l0x0038: INVOKE  \l  (r4 I:ar.com.hjg.pngj.pixels.CompressorStreamDeflater)\l  (r5 I:java.io.OutputStream)\l  (r6 I:int)\l  (r7 I:long)\l  (r9 I:int)\l  (r10 I:int)\l ar.com.hjg.pngj.pixels.CompressorStreamDeflater.\<init\>(java.io.OutputStream, int, long, int, int):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: IGET  (r4 I:ar.com.hjg.pngj.pixels.CompressorStream[]) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filterBank ar.com.hjg.pngj.pixels.CompressorStream[] \l0x003d: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: IGET  (r4 I:int) = (r11 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rowsPerBandCurrent int \l0x0041: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0042: INVOKE  \l  (r3 I:ar.com.hjg.pngj.pixels.CompressorStream)\l  (r5 I:boolean)\l  (r4 I:int)\l ar.com.hjg.pngj.pixels.CompressorStream.setStoreFirstByte(boolean, int):void type: VIRTUAL \l0x0045: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rebuildFiltersBank((r11 'this' I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

