digraph "CFG forar.com.hjg.pngj.pixels.PixelsWriterMultiple.\<init\>(Lar\/com\/hjg\/pngj\/ImageInfo;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriter)\l  (r4 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.pixels.PixelsWriter.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0004: NEW_ARRAY  (r0 I:ar.com.hjg.pngj.pixels.CompressorStream[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: ar.com.hjg.pngj.pixels.CompressorStream[] \l0x0006: IPUT  \l  (r0 I:ar.com.hjg.pngj.pixels.CompressorStream[])\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filterBank ar.com.hjg.pngj.pixels.CompressorStream[] \l0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0009: NEW_ARRAY  (r0 I:byte[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[][] \l0x000b: IPUT  \l  (r0 I:byte[][])\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filteredRows byte[][] \l0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: IPUT  \l  (r0 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rowsPerBand int \l0x0010: IPUT  \l  (r0 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rowsPerBandCurrent int \l0x0012: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0013: IPUT  \l  (r1 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rowInBand int \l0x0015: IPUT  \l  (r1 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.bandNum int \l0x0017: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0018: IPUT  \l  (r1 I:boolean)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.tryAdaptive boolean \l0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x001c: IPUT  \l  (r2 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.hintMemoryKb int \l0x001e: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1000(0x3e8, float:1.401E\-42) ?[int, float, short, byte, char])\l \l0x0020: IPUT  \l  (r2 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.hintRowsPerBand int \l0x0022: IPUT  \l  (r1 I:boolean)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.useLz4 boolean \l0x0024: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.pixels.FiltersPerformance) =  ar.com.hjg.pngj.pixels.FiltersPerformance \l0x0026: INVOKE  \l  (r1 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l  (r4 I:ar.com.hjg.pngj.ImageInfo)\l ar.com.hjg.pngj.pixels.FiltersPerformance.\<init\>(ar.com.hjg.pngj.ImageInfo):void type: DIRECT \l0x0029: IPUT  \l  (r1 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filtersPerf ar.com.hjg.pngj.pixels.FiltersPerformance \l0x002b: NEW_INSTANCE  (r4 I:java.util.LinkedList) =  java.util.LinkedList \l0x002d: INVOKE  (r4 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x0030: IPUT  \l  (r4 I:java.util.LinkedList\<byte[]\>)\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rows java.util.LinkedList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|0x0032: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0033|0x0033: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:4:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0035|0x0035: IGET  (r4 I:java.util.LinkedList\<byte[]\>) = (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.rows java.util.LinkedList \l0x0037: IGET  (r1 I:int) = (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.buflen int \l0x0039: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x003b: INVOKE  (r4 I:java.util.LinkedList), (r1 I:java.lang.Object) java.util.LinkedList.add(java.lang.Object):boolean type: VIRTUAL \l0x003e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|0x0041: IGET  (r4 I:int) = (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple) ar.com.hjg.pngj.pixels.PixelsWriterMultiple.buflen int \l0x0043: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0045: IPUT  \l  (r4 I:byte[])\l  (r3 I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple)\l ar.com.hjg.pngj.pixels.PixelsWriterMultiple.filteredRowTmp byte[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0047|0x0047: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.PixelsWriterMultiple.\<init\>((r3 'this' I:ar.com.hjg.pngj.pixels.PixelsWriterMultiple A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

