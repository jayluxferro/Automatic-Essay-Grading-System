digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.computeEntropyFromHistogram()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r2 = 1.0d \/ ((double) r15.iminfo.bytesPerRow)\ldouble r0 = java.lang.Math.log(r2)\lint[] r4 = r15.histog\lint r5 = r4.length\lr8 = 0\lr9 = 0.0d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lPHI: r8 r9 \l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:0:0x0000, B:5:0x0022] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 double) = (r9v0 double), (r9v2 double) binds: [B:0:0x0000, B:5:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:5:0x0022\l|if (r8 \>= r5) goto L_0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|r11 = r4[r8]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r11 \<= 0) goto L_0x0022\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|double r11 = (double) r11\ldouble r9 = r9 + ((java.lang.Math.log(r11) + r0) * r11)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|LOOP_END\lPHI: r9 \l  PHI: (r9v2 double) = (r9v1 double), (r9v3 double) binds: [B:11:0x0022, B:10:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:5:0x0022\l|int r8 = r8 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|double r0 = r9 * (r2 * LOG2NI)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|if ((r0 \> 0.0d ? 1 : (r0 == 0.0d ? 0 : \-1)) \>= 0) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f}"];
Node_9 [shape=record,label="{9\:\ 0x0025|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0.0d\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public final double ar.com.hjg.pngj.pixels.FiltersPerformance.computeEntropyFromHistogram((r15v0 'this' ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_10;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_12;
Node_9 -> Node_6;
Node_10 -> Node_5;
Node_11 -> Node_5;
}

