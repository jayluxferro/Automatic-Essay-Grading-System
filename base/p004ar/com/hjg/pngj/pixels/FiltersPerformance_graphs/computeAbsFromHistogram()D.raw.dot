digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.computeAbsFromHistogram()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r3 I:int[]) = (r5 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.histog int[] \l0x000a: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x000c: ARITH  (r3 I:int) = (r3 I:int) * (r1 I:int) \l0x000e: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x000f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r4 I:int[]) = (r5 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.histog int[] \l0x0018: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001a: ARITH  (r4 I:int) = (r4 I:int) * (r3 I:int) \l0x001c: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x001d: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x001e: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: CAST  (r0 I:double) = (double) (r2 I:int) \l0x0022: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r5 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.iminfo ar.com.hjg.pngj.ImageInfo \l0x0024: IGET  (r2 I:int) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bytesPerRow int \l0x0026: CAST  (r2 I:double) = (double) (r2 I:int) \l0x0027: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public double ar.com.hjg.pngj.pixels.FiltersPerformance.computeAbsFromHistogram((r5 'this' I:ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_7 -> Node_8;
}

