digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.updateFromRawOrFiltered(Lar\/com\/hjg\/pngj\/FilterType;[B[B[BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.initdone boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.init():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.lastrow int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:double[]) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.absum double[] \l0x000d: CONST  (r1 I:?[long, double]) = \l  (9221120237041090560(0x7ff8000000000000, double:NaN) ?[long, double])\l \l0x000f: INVOKE  (r0 I:double[]), (r1 I:double) java.util.Arrays.fill(double[], double):void type: STATIC \l0x0012: IGET  (r0 I:double[]) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.entropy double[] \l0x0014: INVOKE  (r0 I:double[]), (r1 I:double) java.util.Arrays.fill(double[], double):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IPUT  \l  (r8 I:int)\l  (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l ar.com.hjg.pngj.pixels.FiltersPerformance.lastrow int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: INVOKE  \l  (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l  (r5 I:byte[])\l ar.com.hjg.pngj.pixels.FiltersPerformance.computeHistogram(byte[]):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  \l  (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l  (r4 I:ar.com.hjg.pngj.FilterType)\l  (r6 I:byte[])\l  (r7 I:byte[])\l ar.com.hjg.pngj.pixels.FiltersPerformance.computeHistogramForFilter(ar.com.hjg.pngj.FilterType, byte[], byte[]):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: SGET  (r5 I:ar.com.hjg.pngj.FilterType) =  ar.com.hjg.pngj.FilterType.FILTER_NONE ar.com.hjg.pngj.FilterType \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IGET  (r5 I:double[]) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.entropy double[] \l0x0028: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.FilterType) ar.com.hjg.pngj.FilterType.val int \l0x002a: INVOKE  (r6 I:double) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.computeEntropyFromHistogram():double type: VIRTUAL \l0x002e: APUT  \l  (r5 I:?[long, double][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IGET  (r5 I:double[]) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.absum double[] \l0x0033: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.FilterType) ar.com.hjg.pngj.FilterType.val int \l0x0035: INVOKE  (r6 I:double) = (r3 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.computeAbsFromHistogram():double type: VIRTUAL \l0x0039: APUT  \l  (r5 I:?[long, double][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.pixels.FiltersPerformance.updateFromRawOrFiltered((r3 'this' I:ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.FilterType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
}

