digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.computeAbsFromHistogram()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 1\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v2 int) = (r1v1 int), (r1v6 int) binds: [B:0:0x0000, B:3:0x0008] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v7 int) binds: [B:0:0x0000, B:3:0x0008] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0004\-\>B:3:0x0008\l|r3 = 128\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r1 \>= 128) goto L_0x0012\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:3:0x0008\l|int r2 = r2 + (r5.histog[r1] * r1)\lint r1 = r1 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|r1 = 128\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_START\lPHI: r1 r2 r3 \l  PHI: (r1v4 int) = (r1v3 int), (r1v5 int) binds: [B:4:0x0012, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v6 int) binds: [B:4:0x0012, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0012, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0014\-\>B:6:0x0016\l|if (r3 \<= 0) goto L_0x0021\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:1: B:5:0x0014\-\>B:6:0x0016\l|int r2 = r2 + (r5.histog[r1] * r3)\lint r1 = r1 + 1\lint r3 = r3 + \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021}"];
Node_8 [shape=record,label="{8\:\ 0x0028|RETURN\l|return ((double) r2) \/ ((double) r5.iminfo.bytesPerRow)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public double ar.com.hjg.pngj.pixels.FiltersPerformance.computeAbsFromHistogram((r5v0 'this' ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_4;
Node_10 -> Node_7;
}

