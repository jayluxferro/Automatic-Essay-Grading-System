digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.updateFromRawOrFiltered(Lar\/com\/hjg\/pngj\/FilterType;[B[B[BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.initdone != false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|init()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r8 == r3.lastrow) goto L_0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|java.util.Arrays.fill(r3.absum, Double.NaN)\ljava.util.Arrays.fill(r3.entropy, Double.NaN)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|r3.lastrow = r8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|if (r5 == null) goto L_0x001f\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|computeHistogram(r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|computeHistogramForFilter(r4, r6, r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022}"];
Node_11 [shape=record,label="{11\:\ 0x0024|if (r4 != p004ar.com.hjg.pngj.FilterType.FILTER_NONE) goto L_0x0031\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|r3.entropy[r4.val] = computeEntropyFromHistogram()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|r3.absum[r4.val] = computeAbsFromHistogram()\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.pixels.FiltersPerformance.updateFromRawOrFiltered((r3v0 'this' ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.FilterType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_14;
}

