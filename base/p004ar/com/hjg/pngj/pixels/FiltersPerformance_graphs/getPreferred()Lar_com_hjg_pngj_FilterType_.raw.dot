digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.getPreferred()Lar\/com\/hjg\/pngj\/FilterType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[long, double]) = \l  (9218868437227405311(0x7fefffffffffffff, double:1.7976931348623157E308) ?[long, double])\l \l0x0006: MOVE  (r2 I:?[long, double]) = (r1 I:?[long, double]) \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: CONST  (r4 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:13:0x0056 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.absum double[] \l0x000d: AGET  (r5 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x000f: INVOKE  (r4 I:boolean) = (r5 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l0x0013: CONST  (r5 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.absum double[] \l0x0019: AGET  (r7 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.entropy double[] \l0x001e: AGET  (r7 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0020: INVOKE  (r4 I:boolean) = (r7 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0053 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r7 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0028: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.entropy double[] \l0x002a: AGET  (r9 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x002c: INVOKE  (r7 I:double) = (r7 I:double), (r9 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0030: ARITH  (r7 I:double) = (r7 I:double) \- (r5 I:double) \l0x0031: CONST  (r9 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0033: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.filter_weights double[] \l0x0037: AGET  (r9 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0039: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x003b: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.cost double[] \l0x003d: AGET  (r9 I:?[long, double]) = (r4 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x003f: IGET  (r11 I:double) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.memoryA double \l0x0041: ARITH  (r9 I:double) = (r9 I:double) * (r11 I:double) \l0x0043: IGET  (r11 I:double) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.memoryA double \l0x0045: ARITH  (r5 I:double) = (r5 I:double) \- (r11 I:double) \l0x0046: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x0048: ARITH  (r9 I:double) = (r9 I:double) + (r5 I:double) \l0x0049: IGET  (r4 I:double[]) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.cost double[] \l0x004b: APUT  \l  (r4 I:?[long, double][])\l  (r0 I:?[int, short, byte, char])\l  (r9 I:?[long, double])\l \l0x004d: CMP_G  (r4 I:int) = (r9 I:double), (r2 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0053 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|0x0051: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0052: MOVE  (r2 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0056|0x0056: IPUT  \l  (r1 I:int)\l  (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l ar.com.hjg.pngj.pixels.FiltersPerformance.lastprefered int \l0x0058: IGET  (r0 I:int) = (r13 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.lastprefered int \l0x005a: INVOKE  (r0 I:ar.com.hjg.pngj.FilterType) = (r0 I:int) ar.com.hjg.pngj.FilterType.getByVal(int):ar.com.hjg.pngj.FilterType type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x005e|0x005e: RETURN  (r0 I:ar.com.hjg.pngj.FilterType) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.FilterType ar.com.hjg.pngj.pixels.FiltersPerformance.getPreferred((r13 'this' I:ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
}

