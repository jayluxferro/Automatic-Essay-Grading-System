digraph "CFG forar.com.hjg.pngj.pixels.FiltersPerformance.init()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:double[]) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.filter_weights double[] \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: AGET  (r2 I:?[long, double]) = (r0 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x0005: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0007: CMP_G  (r0 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: SGET  (r0 I:double[]) =  ar.com.hjg.pngj.pixels.FiltersPerformance.FILTER_WEIGHTS_DEFAULT double[] \l0x000d: IGET  (r2 I:double[]) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.filter_weights double[] \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0010: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r1 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0013: IGET  (r0 I:double[]) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.filter_weights double[] \l0x0015: AGET  (r2 I:?[long, double]) = (r0 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x0017: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.iminfo ar.com.hjg.pngj.ImageInfo \l0x0019: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: CONST  (r2 I:?[long, double]) = \l  (4608083138725491507(0x3ff3333333333333, double:1.2) ?[long, double])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.iminfo ar.com.hjg.pngj.ImageInfo \l0x0027: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: CONST  (r2 I:?[long, double]) = \l  (4605380978949069210(0x3fe999999999999a, double:0.8) ?[long, double])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.iminfo ar.com.hjg.pngj.ImageInfo \l0x0033: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.iminfo ar.com.hjg.pngj.ImageInfo \l0x0039: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x003b: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: CONST  (r2 I:?[long, double]) = \l  (4600877379321698714(0x3fd999999999999a, double:0.4) ?[long, double])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: IGET  (r4 I:double) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.preferenceForNone double \l0x0046: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x0047: IGET  (r0 I:double[]) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.filter_weights double[] \l0x0049: APUT  \l  (r0 I:?[long, double][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[long, double])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|0x004b: IGET  (r0 I:double[]) = (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance) ar.com.hjg.pngj.pixels.FiltersPerformance.cost double[] \l0x004d: CONST  (r1 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x004f: INVOKE  (r0 I:double[]), (r1 I:double) java.util.Arrays.fill(double[], double):void type: STATIC \l0x0052: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0053: IPUT  \l  (r0 I:boolean)\l  (r6 I:ar.com.hjg.pngj.pixels.FiltersPerformance)\l ar.com.hjg.pngj.pixels.FiltersPerformance.initdone boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: RETURN   \l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.pixels.FiltersPerformance.init((r6 'this' I:ar.com.hjg.pngj.pixels.FiltersPerformance A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

