digraph "CFG forar.com.hjg.pngj.pixels.CompressorStream.\<init\>(Ljava\/io\/OutputStream;IJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r5)\lr4.closed = false\lr4.done = false\lr4.bytesIn = 0\lr4.bytesOut = 0\lr4.block = \-1\lr4.storeFirstByte = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|if (r6 \>= 0) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|r6 = 4096\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|PHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:1:0x0013, B:2:0x0015] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if ((r7 \> 0 ? 1 : (r7 == 0 ? 0 : \-1)) \>= 0) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|r7 = kotlin.jvm.internal.LongCompanionObject.MAX_VALUE\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|PHI: r7 \l  PHI: (r7v1 long) = (r7v0 long), (r7v2 long) binds: [B:4:0x0019, B:5:0x001b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r6 \< 1) goto L_0x0030\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023}"];
Node_9 [shape=record,label="{9\:\ 0x0027|if ((r7 \> 1 ? 1 : (r7 == 1 ? 0 : \-1)) \< 0) goto L_0x0030\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|r4.f80os = r5\lr4.blockLen = r6\lr4.totalbytes = r7\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030}"];
Node_13 [shape=record,label="{13\:\ 0x0037|throw new java.lang.RuntimeException(\" maxBlockLen or totalLen invalid\")\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStream.\<init\>((r4v0 'this' ar.com.hjg.pngj.pixels.CompressorStream A[IMMUTABLE_TYPE, THIS]), (r5v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

