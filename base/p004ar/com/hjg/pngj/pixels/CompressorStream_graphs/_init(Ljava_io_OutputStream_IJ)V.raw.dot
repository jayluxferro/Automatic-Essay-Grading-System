digraph "CFG forar.com.hjg.pngj.pixels.CompressorStream.\<init\>(Ljava\/io\/OutputStream;IJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r4 I:java.io.FilterOutputStream)\l  (r5 I:java.io.OutputStream)\l java.io.FilterOutputStream.\<init\>(java.io.OutputStream):void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:boolean)\l  (r4 I:ar.com.hjg.pngj.pixels.CompressorStream)\l ar.com.hjg.pngj.pixels.CompressorStream.closed boolean \l0x0006: IPUT  \l  (r0 I:boolean)\l  (r4 I:ar.com.hjg.pngj.pixels.CompressorStream)\l ar.com.hjg.pngj.pixels.CompressorStream.done boolean \l0x0008: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x000a: IPUT  (r1 I:long), (r4 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.bytesIn long \l0x000c: IPUT  (r1 I:long), (r4 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.bytesOut long \l0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000f: IPUT  (r3 I:int), (r4 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.block int \l0x0011: IPUT  \l  (r0 I:boolean)\l  (r4 I:ar.com.hjg.pngj.pixels.CompressorStream)\l ar.com.hjg.pngj.pixels.CompressorStream.storeFirstByte boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CMP_L  (r0 I:int) = (r7 I:long), (r1 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r7 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r6 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0025: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IPUT  \l  (r5 I:java.io.OutputStream)\l  (r4 I:ar.com.hjg.pngj.pixels.CompressorStream)\l ar.com.hjg.pngj.pixels.CompressorStream.os java.io.OutputStream \l0x002b: IPUT  (r6 I:int), (r4 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.blockLen int \l0x002d: IPUT  (r7 I:long), (r4 I:ar.com.hjg.pngj.pixels.CompressorStream) ar.com.hjg.pngj.pixels.CompressorStream.totalbytes long \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: NEW_INSTANCE  (r5 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0032: CONST_STR  (r6 I:java.lang.String) =  \" maxBlockLen or totalLen invalid\" \l0x0034: INVOKE  (r5 I:java.lang.RuntimeException), (r6 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStream.\<init\>((r4 'this' I:ar.com.hjg.pngj.pixels.CompressorStream A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

