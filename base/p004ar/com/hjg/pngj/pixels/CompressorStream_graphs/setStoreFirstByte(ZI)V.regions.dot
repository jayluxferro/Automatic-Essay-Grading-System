digraph "CFG forar.com.hjg.pngj.pixels.CompressorStream.setStoreFirstByte(ZI)V" {
subgraph cluster_Region_1046296039 {
label = "R(2:0|(1:7)(1:(1:6)(0)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0.storeFirstByte = r1\l}"];
subgraph cluster_IfRegion_1266357785 {
label = "IF [B:1:0x0004] THEN: R(1:7) ELSE: R(1:(1:6)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0.storeFirstByte != true) goto L_0x0014\l}"];
subgraph cluster_Region_2086099367 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|r0.firstBytes = null\l}"];
}
subgraph cluster_Region_1393344678 {
label = "R(1:(1:6)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_69805357 {
label = "IF [B:3:0x0008, B:5:0x000d] THEN: R(1:6) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r0.firstBytes == null) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|ADDED_TO_REGION\l|if (r0.firstBytes.length \< r2) goto L_0x000f\l}"];
subgraph cluster_Region_401682543 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000f|r0.firstBytes = new byte[r2]\l}"];
}
subgraph cluster_Region_1361955159 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.pixels.CompressorStream.setStoreFirstByte((r0v0 'this' ar.com.hjg.pngj.pixels.CompressorStream A[IMMUTABLE_TYPE, THIS]), (r1v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_7 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_10;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

