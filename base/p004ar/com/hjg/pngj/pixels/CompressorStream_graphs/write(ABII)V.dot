digraph "CFG forar.com.hjg.pngj.pixels.CompressorStream.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.block = r2.block + 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r5 \> r2.blockLen) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|mywrite(r3, r4, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r2.storeFirstByte == false) goto L_0x002f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r2.block \>= r2.firstBytes.length) goto L_0x002f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|r2.firstBytes[r2.block] = r3[r4]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|LOOP_START\lPHI: r4 r5 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:1:0x0008, B:8:0x0023] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:1:0x0008, B:8:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0021\-\>B:8:0x0023\l|if (r5 \<= 0) goto L_0x002f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|LOOP_END\lLOOP:0: B:7:0x0021\-\>B:8:0x0023\l|mywrite(r3, r4, r2.blockLen)\lint r4 = r4 + r2.blockLen\lint r5 = r5 \- r2.blockLen\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f}"];
Node_10 [shape=record,label="{10\:\ 0x0035|if ((r2.bytesIn \> r2.totalbytes ? 1 : (r2.bytesIn == r2.totalbytes ? 0 : \-1)) \< 0) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|done()\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void ar.com.hjg.pngj.pixels.CompressorStream.write((r2v0 'this' ar.com.hjg.pngj.pixels.CompressorStream A[IMMUTABLE_TYPE, THIS]), (r3v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_13;
Node_12 -> Node_9;
}

