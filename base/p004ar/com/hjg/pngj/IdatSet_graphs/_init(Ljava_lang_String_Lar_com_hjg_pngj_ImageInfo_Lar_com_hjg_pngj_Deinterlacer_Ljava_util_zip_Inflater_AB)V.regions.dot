digraph "CFG forar.com.hjg.pngj.IdatSet.\<init\>(Ljava\/lang\/String;Lar\/com\/hjg\/pngj\/ImageInfo;Lar\/com\/hjg\/pngj\/Deinterlacer;Ljava\/util\/zip\/Inflater;[B)V" {
subgraph cluster_Region_822381989 {
label = "R(2:1|(3:(1:1)(1:3)|2|4))";
node [shape=record,color=blue];
Node_InsnContainer_834248976 [shape=record,label="{|super(r8, r0 + 1, r9.bytesPerRow + 1, r11, r12)\l}"];
subgraph cluster_Region_926624067 {
label = "R(3:(1:1)(1:3)|2|4) | DECL_VAR: int null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1644739474 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r10 != null) goto L_0x0002\l}"];
subgraph cluster_Region_908480368 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|int r0 = r10.getBytesToRead()\l}"];
}
subgraph cluster_Region_185041782 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|int r0 = r9.bytesPerRow\l}"];
}
}
Node_2 [shape=record,label="{2\:\ 0x0006|PHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v4 int) binds: [B:3:0x000a, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|r7.filterUseStat = new int[5]\lr7.imgInfo = r9\lr7.deinterlacer = r10\lr7.rowinfo = new p004ar.com.hjg.pngj.RowInfo(r9, r10)\l}"];
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0028}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.IdatSet.\<init\>((r7v0 'this' ar.com.hjg.pngj.IdatSet A[IMMUTABLE_TYPE, THIS]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 ar.com.hjg.pngj.Deinterlacer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.util.zip.Inflater A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lIllegal instructions before constructor call\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3[style=dashed];
Node_1 -> Node_2;
Node_3 -> Node_2;
Node_2 -> Node_4;
Node_4 -> Node_5;
}

