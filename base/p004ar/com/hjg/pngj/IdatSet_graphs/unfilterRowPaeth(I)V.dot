digraph "CFG forar.com.hjg.pngj.IdatSet.unfilterRowPaeth(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 1\lint r0 = 1 \- r7.imgInfo.bytesPixel\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:8:0x001c\l|if (r1 \> r8) goto L_0x0035\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r0 \<= 0) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|r3 = r7.rowUnfiltered[r0] & 255\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r3 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|PHI: r3 \l  PHI: (r3v0 byte) = (r3v1 byte), (r3v4 byte) binds: [B:5:0x0013, B:4:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \<= 0) goto L_0x001c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|r2 = r7.rowUnfilteredPrev[r0] & 255\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|LOOP_END\lPHI: r2 \l  PHI: (r2v1 byte) = (r2v0 byte), (r2v6 byte) binds: [B:12:0x001c, B:11:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:8:0x001c\l|r7.rowUnfiltered[r1] = (byte) (r7.row[r1] + p004ar.com.hjg.pngj.PngHelperInternal.filterPaethPredictor(r3, r7.rowUnfilteredPrev[r1] & 255, r2))\lint r1 = r1 + 1\lint r0 = r0 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.IdatSet.unfilterRowPaeth((r7v0 'this' ar.com.hjg.pngj.IdatSet A[IMMUTABLE_TYPE, THIS]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_11;
Node_8 -> Node_1;
Node_10 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_8;
}

