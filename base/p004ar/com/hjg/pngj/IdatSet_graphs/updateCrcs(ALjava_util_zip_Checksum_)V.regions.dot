digraph "CFG forar.com.hjg.pngj.IdatSet.updateCrcs([Ljava\/util\/zip\/Checksum;)V" {
subgraph cluster_Region_1904384146 {
label = "R(2:0|(3:2|(1:4)(0)|5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r7.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1525751754 {
label = "LOOP:0: (3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x0015\l|if (r1 \< r0) goto L_0x0004\l}"];
subgraph cluster_Region_884080522 {
label = "R(3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = r7[r1]\l}"];
subgraph cluster_IfRegion_1976395077 {
label = "IF [B:3:0x0006] THEN: R(1:4) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2 != null) goto L_0x0008\l}"];
subgraph cluster_Region_1140137424 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|r2.update(getUnfilteredRow(), 1, getRowFilled() \- 1)\l}"];
}
subgraph cluster_Region_189831049 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x0015\l|r1++\l}"];
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0015|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void ar.com.hjg.pngj.IdatSet.updateCrcs((r6v0 'this' ar.com.hjg.pngj.IdatSet A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.zip.Checksum[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

