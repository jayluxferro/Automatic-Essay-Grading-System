digraph "CFG forar.com.hjg.pngj.ImageInfo.\<init\>(IIIZZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.totalPixels = \-1\lr2.totalRawBytes = \-1\lr2.cols = r3\lr2.rows = r4\lr2.alpha = r6\lr2.indexed = r8\lr2.greyscale = r7\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|if (r2.greyscale == false) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r8 != false) goto L_0x001a\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a}"];
Node_4 [shape=record,label="{4\:\ 0x0021|throw new p004ar.com.hjg.pngj.PngjException(\"palette and greyscale are mutually exclusive\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r7 != false) goto L_0x002f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|if (r8 == false) goto L_0x0029\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|if (r6 == false) goto L_0x002d\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|r6 = 4\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|r6 = 3\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if (r6 == false) goto L_0x0033\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r6 = 2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|r6 = 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|PHI: r6 \l  PHI: (r6v1 int) = (r6v6 int), (r6v7 int), (r6v8 int), (r6v9 int) binds: [B:13:0x0033, B:12:0x0031, B:10:0x002d, B:9:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|r2.channels = r6\lr2.bitDepth = r5\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|if (r5 \>= 8) goto L_0x003e\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|r5 = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|r5 = false\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|PHI: r5 \l  PHI: (r5v1 boolean) = (r5v30 boolean), (r5v31 boolean) binds: [B:17:0x003e, B:16:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|r2.packed = r5\lr2.bitspPixel = r2.channels * r2.bitDepth\lr2.bytesPixel = (r2.bitspPixel + 7) \/ 8\lr2.bytesPerRow = ((r2.bitspPixel * r3) + 7) \/ 8\lr2.samplesPerRow = r2.channels * r2.cols\l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|if (r2.packed == false) goto L_0x0068\l}"];
Node_20 [shape=record,label="{20\:\ 0x0065|int r5 = r2.bytesPerRow\l}"];
Node_21 [shape=record,label="{21\:\ 0x0068|int r5 = r2.samplesPerRow\l}"];
Node_22 [shape=record,label="{22\:\ 0x006a|PHI: r5 \l  PHI: (r5v14 int) = (r5v28 int), (r5v29 int) binds: [B:21:0x0068, B:20:0x0065] A[DONT_GENERATE, DONT_INLINE]\l|r2.samplesPerRowPacked = r5\lint r5 = r2.bitDepth\l}"];
Node_23 [shape=record,label="{23\:\ 0x006e|if (r5 == 4) goto L_0x00b0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0070|if (r5 == 8) goto L_0x00d2\l}"];
Node_25 [shape=record,label="{25\:\ 0x0072}"];
Node_26 [shape=record,label="{26\:\ 0x0074|if (r5 == 16) goto L_0x0092\l}"];
Node_27 [shape=record,label="{27\:\ 0x0076|switch(r5) \{\l    case 1: goto L_0x00b0;\l    case 2: goto L_0x00b0;\l    default: goto L_0x0079;\l\}\l}"];
Node_28 [shape=record,label="{28\:\ 0x0079|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"invalid bitdepth=\")\lr4.append(r2.bitDepth)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0091|throw new p004ar.com.hjg.pngj.PngjException(r4.toString())\l}"];
Node_30 [shape=record,label="{30\:\ 0x0092}"];
Node_31 [shape=record,label="{31\:\ 0x0094|if (r2.indexed != false) goto L_0x0097\l}"];
Node_32 [shape=record,label="{32\:\ 0x0097|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"indexed can't have bitdepth=\")\lr4.append(r2.bitDepth)\l}"];
Node_33 [shape=record,label="{33\:\ 0x00af|throw new p004ar.com.hjg.pngj.PngjException(r4.toString())\l}"];
Node_34 [shape=record,label="{34\:\ 0x00b0}"];
Node_35 [shape=record,label="{35\:\ 0x00b2|if (r2.indexed != false) goto L_0x00d2\l}"];
Node_36 [shape=record,label="{36\:\ 0x00b4}"];
Node_37 [shape=record,label="{37\:\ 0x00b6|if (r2.greyscale == false) goto L_0x00b9\l}"];
Node_38 [shape=record,label="{38\:\ 0x00b9|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"only indexed or grayscale can have bitdepth=\")\lr4.append(r2.bitDepth)\l}"];
Node_39 [shape=record,label="{39\:\ 0x00d1|throw new p004ar.com.hjg.pngj.PngjException(r4.toString())\l}"];
Node_40 [shape=record,label="{40\:\ 0x00d2|if (r3 \< 1) goto L_0x0105\l}"];
Node_41 [shape=record,label="{41\:\ 0x00d4}"];
Node_42 [shape=record,label="{42\:\ 0x00d6|if (r3 \> 16777216) goto L_0x0105\l}"];
Node_43 [shape=record,label="{43\:\ 0x00d8|if (r4 \< 1) goto L_0x00e9\l}"];
Node_44 [shape=record,label="{44\:\ 0x00da|if (r4 \> 16777216) goto L_0x00e9\l}"];
Node_45 [shape=record,label="{45\:\ 0x00dc}"];
Node_46 [shape=record,label="{46\:\ 0x00de|if (r2.samplesPerRow \< 1) goto L_0x00e1\l}"];
Node_47 [shape=record,label="{47\:\ 0x00e0|RETURN\l|return\l}"];
Node_48 [shape=record,label="{48\:\ 0x00e1}"];
Node_49 [shape=record,label="{49\:\ 0x00e8|throw new p004ar.com.hjg.pngj.PngjException(\"invalid image parameters (overflow?)\")\l}"];
Node_50 [shape=record,label="{50\:\ 0x00e9|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"invalid rows=\")\lr5.append(r4)\lr5.append(\" ???\")\l}"];
Node_51 [shape=record,label="{51\:\ 0x0104|throw new p004ar.com.hjg.pngj.PngjException(r5.toString())\l}"];
Node_52 [shape=record,label="{52\:\ 0x0105|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"invalid cols=\")\lr5.append(r3)\lr5.append(\" ???\")\l}"];
Node_53 [shape=record,label="{53\:\ 0x0120|throw new p004ar.com.hjg.pngj.PngjException(r5.toString())\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageInfo.\<init\>((r2v0 'this' ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_34;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_40;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_40[style=dashed];
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_40[style=dashed];
Node_38 -> Node_39;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_52;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_52;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_50;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_50 -> Node_51;
Node_52 -> Node_53;
}

