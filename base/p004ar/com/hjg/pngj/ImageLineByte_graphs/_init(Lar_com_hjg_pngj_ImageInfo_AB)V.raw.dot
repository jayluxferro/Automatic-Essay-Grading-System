digraph "CFG forar.com.hjg.pngj.ImageLineByte.\<init\>(Lar\/com\/hjg\/pngj\/ImageInfo;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r3 I:ar.com.hjg.pngj.ImageInfo)\l  (r2 I:ar.com.hjg.pngj.ImageLineByte)\l ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0005: SGET  (r0 I:ar.com.hjg.pngj.FilterType) =  ar.com.hjg.pngj.FilterType.FILTER_UNKNOWN ar.com.hjg.pngj.FilterType \l0x0007: IPUT  \l  (r0 I:ar.com.hjg.pngj.FilterType)\l  (r2 I:ar.com.hjg.pngj.ImageLineByte)\l ar.com.hjg.pngj.ImageLineByte.filterType ar.com.hjg.pngj.FilterType \l0x0009: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.samplesPerRow int \l0x000b: IPUT  (r0 I:int), (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0010: IGET  (r1 I:int) = (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r4 I:int) = (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l0x0017: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IPUT  (r4 I:byte[]), (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x001b: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x001d: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r3 I:int) = (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l0x0023: NEW_ARRAY  (r3 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IPUT  (r3 I:byte[]), (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline2 byte[] \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineByte.\<init\>((r2 'this' I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, THIS]), (r3 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

