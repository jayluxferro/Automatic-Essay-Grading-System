digraph "CFG forar.com.hjg.pngj.ImageLineByte.readFromPngRaw([BIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0003: INVOKE  (r1 I:ar.com.hjg.pngj.FilterType) = (r1 I:int) ar.com.hjg.pngj.FilterType.getByVal(int):ar.com.hjg.pngj.FilterType type: STATIC \l0x0007: IPUT  \l  (r1 I:ar.com.hjg.pngj.FilterType)\l  (r11 I:ar.com.hjg.pngj.ImageLineByte)\l ar.com.hjg.pngj.ImageLineByte.filterType ar.com.hjg.pngj.FilterType \l0x0009: ARITH  (r1 I:int) = (r13 I:int) + (\-1 int) \l0x000b: ARITH  (r2 I:int) = (r15 I:int) + (\-1 int) \l0x000d: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000f: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x0011: ARITH  (r2 I:int) = (r2 I:int) * (r3 I:int) \l0x0013: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0015: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0017: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0019: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0025 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IGET  (r13 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0020: INVOKE  \l  (r12 I:java.lang.Object)\l  (r5 I:int)\l  (r13 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IGET  (r13 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0027: IGET  (r13 I:int) = (r13 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x0029: ARITH  (r14 I:int) = (r14 I:int) * (r13 I:int) \l0x002b: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002c: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: IF  (r13 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:35:0x00c6 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IGET  (r3 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0031: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r13 I:?[int, short, byte, char])\l \l0x0033: APUT  \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0035: ARITH  (r15 I:int) = (r15 I:int) + (r5 I:int) \l0x0036: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0038: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003e \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: ARITH  (r14 I:int) = (r14 I:int) + (r2 I:int) \l0x003d: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: ARITH  (r13 I:int) = (r13 I:int) + (1 int) \l0x0040: ARITH  (r14 I:int) = (r14 I:int) + (r5 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0044: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0046: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0090 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0065 \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: IGET  (r13 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x004e: IGET  (r13 I:int) = (r13 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.samplesPerRow int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: IF  (r0 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:35:0x00c6 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: IGET  (r13 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0054: ARITH  (r14 I:int) = (r5 I:int) + (1 int) \l0x0056: AGET  (r15 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x0058: APUT  \l  (r13 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r15 I:byte A[IMMUTABLE_TYPE])\l \l0x005a: IGET  (r13 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline2 byte[] \l0x005c: ARITH  (r5 I:int) = (r14 I:int) + (1 int) \l0x005e: AGET  (r14 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l \l0x0060: APUT  \l  (r13 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r14 I:byte A[IMMUTABLE_TYPE])\l \l0x0062: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: IGET  (r13 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0069: IGET  (r13 I:int) = (r13 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x006b: ARITH  (r13 I:int) = (r13 I:int) * (r14 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x006e|0x006e: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|0x006f: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0070: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0071: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0072|0x0072: IF  (r13 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:35:0x00c6 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|0x0074: IGET  (r3 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0076: ARITH  (r4 I:int) = (r13 I:int) + (1 int) \l0x0078: AGET  (r13 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r13 I:?[int, short, byte, char])\l \l0x007a: APUT  \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l  (r13 I:byte A[IMMUTABLE_TYPE])\l \l0x007c: IGET  (r13 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline2 byte[] \l0x007e: ARITH  (r3 I:int) = (r4 I:int) + (1 int) \l0x0080: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0082: APUT  \l  (r13 I:byte[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0084: ARITH  (r15 I:int) = (r15 I:int) + (r5 I:int) \l0x0085: IGET  (r13 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0087: IGET  (r13 I:int) = (r13 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0089|0x0089: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x008d \l}"];
Node_23 [shape=record,label="{23\:\ 0x008b|0x008b: ARITH  (r14 I:int) = (r14 I:int) + (r2 I:int) \l0x008c: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x008d|0x008d: ARITH  (r14 I:int) = (r14 I:int) + (r5 I:int) \l0x008e: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0090|0x0090: IGET  (r15 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0092: IGET  (r15 I:int) = (r15 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0094: INVOKE  (r1 I:int) = (r15 I:int) ar.com.hjg.pngj.ImageLineHelper.getMaskForPackedFormats(int):int type: STATIC \l0x0098: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x009a: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x009c: ARITH  (r14 I:int) = (r14 I:int) * (r3 I:int) \l0x009e: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009f: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a0: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a1|0x00a1: IF  (r14 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:35:0x00c6 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a3|0x00a3: ARITH  (r7 I:int) = (8 int) \- (r15 I:int) \l0x00a5: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a6: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a7|0x00a7: IGET  (r9 I:byte[]) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x00a9: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l \l0x00ab: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) & (r6 I:?[int, boolean, short, byte, char]) \l0x00ac: ARITH  (r10 I:int) = (r10 I:int) \>\> (r7 I:int) \l0x00ad: CAST  (r10 I:byte) = (byte) (r10 I:int) \l0x00ae: APUT  \l  (r9 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r10 I:byte A[IMMUTABLE_TYPE])\l \l0x00b0: ARITH  (r6 I:int) = (r6 I:int) \>\> (r15 I:int) \l0x00b1: ARITH  (r7 I:int) = (r7 I:int) \- (r15 I:int) \l0x00b2: ARITH  (r3 I:int) = (r3 I:int) + (r5 I:int) \l0x00b3: ARITH  (r8 I:int) = (r8 I:int) + (r5 I:int) \l0x00b4: IGET  (r9 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x00b6: IGET  (r9 I:int) = (r9 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b8|0x00b8: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00bc \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ba|0x00ba: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x00bb: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x00bc|0x00bc: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00c2 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00be|0x00be: IGET  (r9 I:int) = (r11 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_33 [shape=record,label="{33\:\ 0x00c0|0x00c0: IF  (r3 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:28:0x00a7 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00c2|0x00c2: ARITH  (r14 I:int) = (r14 I:int) + (1 int) \l0x00c4: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_35 [shape=record,label="{35\:\ 0x00c6|0x00c6: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineByte.readFromPngRaw((r11 'this' I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, THIS]), (r12 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_35;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_35;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_35;
Node_15 -> Node_13;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_35;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_20;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_28;
Node_33 -> Node_34[style=dashed];
Node_34 -> Node_26;
}

