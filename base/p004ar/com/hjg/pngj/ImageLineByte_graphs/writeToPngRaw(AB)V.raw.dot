digraph "CFG forar.com.hjg.pngj.ImageLineByte.writeToPngRaw([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.FilterType) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.filterType ar.com.hjg.pngj.FilterType \l0x0002: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.FilterType) ar.com.hjg.pngj.FilterType.val int \l0x0004: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x0008: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000a: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IGET  (r0 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0013: IGET  (r2 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l0x0015: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r10 I:java.lang.Object)\l  (r3 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IGET  (r0 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:20:0x006b \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: ARITH  (r0 I:int) = (r1 I:int) + (1 int) \l0x001e: IGET  (r2 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0020: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0022: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x0024: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0028: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x002a: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IGET  (r0 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:20:0x006b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: ARITH  (r0 I:int) = (r3 I:int) + (1 int) \l0x0034: IGET  (r2 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0036: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0038: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x003a: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x003c: IGET  (r2 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline2 byte[] \l0x003e: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0040: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0042: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0047: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0049: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x004a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IGET  (r8 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: IF  (r4 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:20:0x006b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: IGET  (r8 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0054: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0056: ARITH  (r8 I:int) = (r8 I:int) \<\< (r6 I:int) \l0x0057: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r8 I:?[int, boolean, short, byte, char]) \l0x0058: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:18:0x0060 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005b|0x005b: IGET  (r8 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.size int \l0x005d: ARITH  (r8 I:int) = (r8 I:int) \- (r3 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0068 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|0x0060: ARITH  (r6 I:int) = (r7 I:int) + (1 int) \l0x0062: CAST  (r5 I:byte) = (byte) (r5 I:int) \l0x0063: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0065: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0066: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0067: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|0x0068: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|0x006b: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineByte.writeToPngRaw((r9 'this' I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, THIS]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_12;
}

