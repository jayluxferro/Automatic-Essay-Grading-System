digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.startNewChunk(ILjava\/lang\/String;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"IDAT\" \l0x0002: INVOKE  (r0 I:boolean) = (r12 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:long) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.idatBytes long \l0x000a: CAST  (r2 I:long) = (long) (r11 I:int) \l0x000b: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x000c: IPUT  (r0 I:long), (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.idatBytes long \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r6 I:boolean) = \l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r11 I:int)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.ChunkSeqReader.shouldCheckCrc(int, java.lang.String):boolean type: VIRTUAL \l0x0012: INVOKE  (r5 I:boolean) = \l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r11 I:int)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.ChunkSeqReader.shouldSkipContent(int, java.lang.String):boolean type: VIRTUAL \l0x0016: INVOKE  (r0 I:boolean) = \l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.ChunkSeqReader.isIdatKind(java.lang.String):boolean type: VIRTUAL \l0x001a: IGET  (r1 I:ar.com.hjg.pngj.DeflatedChunksSet) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curReaderDeflatedSet ar.com.hjg.pngj.DeflatedChunksSet \l0x001c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r1 I:ar.com.hjg.pngj.DeflatedChunksSet) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curReaderDeflatedSet ar.com.hjg.pngj.DeflatedChunksSet \l0x0021: INVOKE  (r1 I:boolean) = \l  (r1 I:ar.com.hjg.pngj.DeflatedChunksSet)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.DeflatedChunksSet.ackNextChunkId(java.lang.String):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IGET  (r0 I:ar.com.hjg.pngj.DeflatedChunksSet) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curReaderDeflatedSet ar.com.hjg.pngj.DeflatedChunksSet \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: INVOKE  (r0 I:ar.com.hjg.pngj.DeflatedChunksSet) = \l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.ChunkSeqReader.createIdatSet(java.lang.String):ar.com.hjg.pngj.DeflatedChunksSet type: VIRTUAL \l0x0035: IPUT  \l  (r0 I:ar.com.hjg.pngj.DeflatedChunksSet)\l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l ar.com.hjg.pngj.ChunkSeqReader.curReaderDeflatedSet ar.com.hjg.pngj.DeflatedChunksSet \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: NEW_INSTANCE  (r11 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x003a: CONST_STR  (r12 I:java.lang.String) =  \"too many IDAT (or idatlike) chunks\" \l0x003c: INVOKE  \l  (r11 I:ar.com.hjg.pngj.PngjInputException)\l  (r12 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.ChunkSeqReader$1) =  ar.com.hjg.pngj.ChunkSeqReader$1 \l0x0042: IGET  (r9 I:ar.com.hjg.pngj.DeflatedChunksSet) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curReaderDeflatedSet ar.com.hjg.pngj.DeflatedChunksSet \l0x0044: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0045: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0046: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0048: MOVE  (r7 I:?[long, double]) = (r13 I:?[long, double]) \l0x0049: INVOKE  \l  (r2 I:ar.com.hjg.pngj.ChunkSeqReader$1)\l  (r3 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r4 I:int)\l  (r5 I:java.lang.String)\l  (r6 I:boolean)\l  (r7 I:long)\l  (r9 I:ar.com.hjg.pngj.DeflatedChunksSet)\l ar.com.hjg.pngj.ChunkSeqReader.1.\<init\>(ar.com.hjg.pngj.ChunkSeqReader, int, java.lang.String, boolean, long, ar.com.hjg.pngj.DeflatedChunksSet):void type: DIRECT \l0x004c: IPUT  \l  (r0 I:ar.com.hjg.pngj.ChunkReader)\l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0050: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0051: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0052: MOVE  (r3 I:?[long, double]) = (r13 I:?[long, double]) \l0x0053: INVOKE  (r11 I:ar.com.hjg.pngj.ChunkReader) = \l  (r0 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r3 I:long)\l  (r5 I:boolean)\l ar.com.hjg.pngj.ChunkSeqReader.createChunkReaderForNewChunk(java.lang.String, int, long, boolean):ar.com.hjg.pngj.ChunkReader type: VIRTUAL \l0x0057: IPUT  \l  (r11 I:ar.com.hjg.pngj.ChunkReader)\l  (r10 I:ar.com.hjg.pngj.ChunkSeqReader)\l ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0060 \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: IGET  (r11 I:ar.com.hjg.pngj.ChunkReader) = (r10 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l0x005d: INVOKE  (r11 I:ar.com.hjg.pngj.ChunkReader), (r7 I:boolean) ar.com.hjg.pngj.ChunkReader.setCrcCheck(boolean):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0060|0x0060: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqReader.startNewChunk((r10 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

