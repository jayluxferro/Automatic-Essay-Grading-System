digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.postProcessChunk(Lar\/com\/hjg\/pngj\/ChunkReader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.chunkCount int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.firstChunkId():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r2 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x000f: IGET  (r2 I:java.lang.String) = (r2 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.id java.lang.String \l0x0011: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x001a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001f: CONST_STR  (r2 I:java.lang.String) =  \"Bad first chunk: \" \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0028: IGET  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.id java.lang.String \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: CONST_STR  (r4 I:java.lang.String) =  \" expected: \" \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r4 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.firstChunkId():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003d: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r4 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: INVOKE  (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x0045: IGET  (r4 I:java.lang.String) = (r4 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.id java.lang.String \l0x0047: INVOKE  (r0 I:java.lang.String) = (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.endChunkId():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0053 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|0x0051: IPUT  (r1 I:boolean), (r3 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.done boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqReader.postProcessChunk((r3 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r4 I:ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

