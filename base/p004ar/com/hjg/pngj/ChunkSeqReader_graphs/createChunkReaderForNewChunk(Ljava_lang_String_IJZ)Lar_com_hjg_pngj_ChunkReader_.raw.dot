digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.createChunkReaderForNewChunk(Ljava\/lang\/String;IJZ)Lar\/com\/hjg\/pngj\/ChunkReader;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r7 I:ar.com.hjg.pngj.ChunkSeqReader$2) =  ar.com.hjg.pngj.ChunkSeqReader$2 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r13 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) =  ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.SKIP ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: SGET  (r13 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) =  ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x000d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x000f: MOVE  (r4 I:?[long, double]) = (r11 I:?[long, double]) \l0x0010: INVOKE  \l  (r0 I:ar.com.hjg.pngj.ChunkSeqReader$2)\l  (r1 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r2 I:int)\l  (r3 I:java.lang.String)\l  (r4 I:long)\l  (r6 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode)\l ar.com.hjg.pngj.ChunkSeqReader.2.\<init\>(ar.com.hjg.pngj.ChunkSeqReader, int, java.lang.String, long, ar.com.hjg.pngj.ChunkReader$ChunkReaderMode):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r7 I:ar.com.hjg.pngj.ChunkReader) \l}"];
MethodNode[shape=record,label="{protected ar.com.hjg.pngj.ChunkReader ar.com.hjg.pngj.ChunkSeqReader.createChunkReaderForNewChunk((r8 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
}

