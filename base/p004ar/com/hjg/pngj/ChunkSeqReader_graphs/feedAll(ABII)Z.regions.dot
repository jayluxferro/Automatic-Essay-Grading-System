digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.feedAll([BII)Z" {
subgraph cluster_Region_22576202 {
label = "R(2:(2:2|(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1242132577 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 \> 0) goto L_0x0003\l}"];
subgraph cluster_Region_1044059493 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|int int r1 = consume(r3, r4, r5)\l}"];
subgraph cluster_Region_856461958 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1238259607 {
label = "IF [B:3:0x0007] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r1 \< 1) goto L_0x0009\l}"];
subgraph cluster_Region_701236455 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1984525617 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:5:0x000b\l|r5 \-= r1\lr4 += r1\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|return true\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r4 r5 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:0:0x0000, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:0:0x0000, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:5:0x000b\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0009|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.ChunkSeqReader.feedAll((r2v0 'this' ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r3v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_0;
Node_0 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

