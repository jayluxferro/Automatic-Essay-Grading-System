digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.feedFromInputStream(Ljava\/io\/InputStream;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) =  ar.com.hjg.pngj.BufferedStreamFeeder \l0x0002: INVOKE  \l  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l  (r2 I:java.io.InputStream)\l ar.com.hjg.pngj.BufferedStreamFeeder.\<init\>(java.io.InputStream):void type: DIRECT \l0x0005: INVOKE  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder), (r3 I:boolean) ar.com.hjg.pngj.BufferedStreamFeeder.setCloseStream(boolean):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0008\l|0x0008: INVOKE  (r2 I:boolean) = (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.hasMoreToFeed():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0019 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 A[Catch:\{ all \-\> 0x0019 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  \l  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l  (r1 I:ar.com.hjg.pngj.IBytesConsumer)\l ar.com.hjg.pngj.BufferedStreamFeeder.feed(ar.com.hjg.pngj.IBytesConsumer):int type: VIRTUAL A[Catch:\{ all \-\> 0x0019 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r1 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.close():void type: VIRTUAL \l0x0015: INVOKE  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|ExcHandler: all null\lSplitter:B:1:0x0008\l|0x0019: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r1 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.close():void type: VIRTUAL \l0x001d: INVOKE  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.close():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkSeqReader.feedFromInputStream((r1 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

