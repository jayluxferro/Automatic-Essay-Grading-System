digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.startNewChunk(ILjava\/lang\/String;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r12.equals(\"IDAT\") == false) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r10.idatBytes = r10.idatBytes + ((long) r11)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|boolean r6 = shouldCheckCrc(r11, r12)\lboolean r5 = shouldSkipContent(r11, r12)\lboolean r0 = isIdatKind(r12)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|if (r10.curReaderDeflatedSet == null) goto L_0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|boolean r1 = r10.curReaderDeflatedSet.ackNextChunkId(r12)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|r1 = false\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v3 boolean), (r1v5 boolean) binds: [B:6:0x0026, B:5:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x004f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|if (r5 != false) goto L_0x004f\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|if (r1 != false) goto L_0x0040\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if (r10.curReaderDeflatedSet != null) goto L_0x0038\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r10.curReaderDeflatedSet = createIdatSet(r12)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038}"];
Node_14 [shape=record,label="{14\:\ 0x003f|throw new p004ar.com.hjg.pngj.PngjInputException(\"too many IDAT (or idatlike) chunks\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|r3 = r10\lr4 = r11\lr5 = r12\lr7 = r13\lr10.curChunkReader = new p004ar.com.hjg.pngj.ChunkSeqReader.C05461(r3, r4, r5, r6, r7, r10.curReaderDeflatedSet)\l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|r10.curChunkReader = createChunkReaderForNewChunk(r12, r11, r13, r5)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|if (r6 != false) goto L_?\l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|r10.curChunkReader.setCrcCheck(false)\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqReader.startNewChunk((r10v0 'this' ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
}

