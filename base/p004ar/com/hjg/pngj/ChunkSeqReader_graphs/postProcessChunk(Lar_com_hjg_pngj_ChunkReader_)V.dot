digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.postProcessChunk(Lar\/com\/hjg\/pngj\/ChunkReader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.chunkCount != 1) goto L_0x0041\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|java.lang.String r0 = firstChunkId()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r0 == null) goto L_0x0041\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r0.equals(r4.getChunkRaw().f57id) == false) goto L_0x0018\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Bad first chunk: \")\lr1.append(r4.getChunkRaw().f57id)\lr1.append(\" expected: \")\lr1.append(firstChunkId())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|throw new p004ar.com.hjg.pngj.PngjInputException(r1.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0041}"];
Node_9 [shape=record,label="{9\:\ 0x004f|if (r4.getChunkRaw().f57id.equals(endChunkId()) == false) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|r3.done = true\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.ChunkSeqReader.postProcessChunk((r3v0 'this' ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r4v0 ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
}

