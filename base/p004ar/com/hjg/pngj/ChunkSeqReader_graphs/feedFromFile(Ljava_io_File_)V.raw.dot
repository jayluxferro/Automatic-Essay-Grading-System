digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.feedFromFile(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.io.FileInputStream) =  java.io.FileInputStream A[Catch:\{ FileNotFoundException \-\> 0x000a \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.io.FileInputStream), (r2 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x000a \}]\l0x0005: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ FileNotFoundException \-\> 0x000a \}]\l0x0006: INVOKE  \l  (r1 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r0 I:java.io.InputStream)\l  (r2 I:boolean)\l ar.com.hjg.pngj.ChunkSeqReader.feedFromInputStream(java.io.InputStream, boolean):void type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x000a \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: FileNotFoundException null\lSplitter:B:0:0x0000\l|0x000a: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x000d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.io.FileNotFoundException) java.io.FileNotFoundException.getMessage():java.lang.String type: VIRTUAL \l0x0011: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r2 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkSeqReader.feedFromFile((r1 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

