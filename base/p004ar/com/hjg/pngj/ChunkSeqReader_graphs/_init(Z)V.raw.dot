digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.\<init\>(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0005: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0007: IPUT  (r0 I:byte[]), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: IPUT  (r0 I:int), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x000c: IPUT  (r0 I:boolean), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.signatureDone boolean \l0x000e: IPUT  (r0 I:boolean), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.done boolean \l0x0010: IPUT  (r0 I:int), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.chunkCount int \l0x0012: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0014: IPUT  (r0 I:long), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x0016: IPUT  (r3 I:boolean), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.withSignature boolean \l0x0018: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l0x001a: IPUT  (r3 I:boolean), (r2 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.signatureDone boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkSeqReader.\<init\>((r2 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

