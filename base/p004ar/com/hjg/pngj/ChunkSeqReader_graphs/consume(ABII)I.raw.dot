digraph "CFG forar.com.hjg.pngj.ChunkSeqReader.consume([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.done boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r9 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: RETURN  (r0 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: IF  (r11 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:32:0x0096 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: IGET  (r1 I:boolean) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.signatureDone boolean \l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x006c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IGET  (r1 I:ar.com.hjg.pngj.ChunkReader) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IGET  (r1 I:ar.com.hjg.pngj.ChunkReader) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l0x0019: INVOKE  (r1 I:boolean) = (r1 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.isDone():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0020 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: IGET  (r0 I:ar.com.hjg.pngj.ChunkReader) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.curChunkReader ar.com.hjg.pngj.ChunkReader \l0x0022: INVOKE  (r9 I:int) = \l  (r0 I:ar.com.hjg.pngj.ChunkReader)\l  (r9 I:byte[])\l  (r10 I:int)\l  (r11 I:int)\l ar.com.hjg.pngj.ChunkReader.feedBytes(byte[], int, int):int type: VIRTUAL \l0x0026: ARITH  (r10 I:int) = (r9 I:int) + (0 int) \l0x0028: IGET  (r0 I:long) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x002a: CAST  (r2 I:long) = (long) (r9 I:int) \l0x002b: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x002c: IPUT  (r0 I:long), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IGET  (r1 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x0031: ARITH  (r1 I:int) = (8 int) \- (r1 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IF  (r1 I:?[int, byte, short, char]) \<= (r11 I:?[int, byte, short, char])  \-\> B:19:0x0036 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0037|0x0037: IGET  (r1 I:byte[]) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x0039: IGET  (r4 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x003b: INVOKE  \l  (r9 I:java.lang.Object)\l  (r10 I:int)\l  (r1 I:java.lang.Object)\l  (r4 I:int)\l  (r11 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x003e: IGET  (r9 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x0040: ARITH  (r9 I:int) = (r9 I:int) + (r11 I:int) \l0x0041: IPUT  (r9 I:int), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x0043: ARITH  (r10 I:int) = (r11 I:int) + (0 int) \l0x0045: IGET  (r4 I:long) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x0047: CAST  (r6 I:long) = (long) (r11 I:int) \l0x0048: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0049: IPUT  (r4 I:long), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x004b: IGET  (r9 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0095 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004f|0x004f: IGET  (r9 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.chunkCount int \l0x0051: ARITH  (r9 I:int) = (r9 I:int) + (r2 I:int) \l0x0052: IPUT  (r9 I:int), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.chunkCount int \l0x0054: IGET  (r9 I:byte[]) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x0056: INVOKE  (r9 I:int) = (r9 I:byte[]), (r0 I:int) ar.com.hjg.pngj.PngHelperInternal.readInt4fromBytes(byte[], int):int type: STATIC \l0x005a: IGET  (r11 I:byte[]) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x005c: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x005d: INVOKE  (r11 I:java.lang.String) = (r11 I:byte[]), (r1 I:int), (r1 I:int) ar.com.hjg.pngj.chunks.ChunkHelper.toString(byte[], int, int):java.lang.String type: STATIC \l0x0061: IGET  (r1 I:long) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x0063: CONST  (r3 I:?[long, double]) = (8 ?[long, double]) \l0x0065: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x0066: INVOKE  \l  (r8 I:ar.com.hjg.pngj.ChunkSeqReader)\l  (r9 I:int)\l  (r11 I:java.lang.String)\l  (r1 I:long)\l ar.com.hjg.pngj.ChunkSeqReader.startNewChunk(int, java.lang.String, long):void type: VIRTUAL \l0x0069: IPUT  (r0 I:int), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l}"];
Node_23 [shape=record,label="{23\:\ 0x006c|0x006c: IGET  (r1 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x006e: ARITH  (r1 I:int) = (8 int) \- (r1 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0070|0x0070: IF  (r1 I:?[int, byte, short, char]) \<= (r11 I:?[int, byte, short, char])  \-\> B:26:0x0073 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0073|0x0073: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0074|0x0074: IGET  (r1 I:byte[]) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x0076: IGET  (r4 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x0078: INVOKE  \l  (r9 I:java.lang.Object)\l  (r10 I:int)\l  (r1 I:java.lang.Object)\l  (r4 I:int)\l  (r11 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x007b: IGET  (r9 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x007d: ARITH  (r9 I:int) = (r9 I:int) + (r11 I:int) \l0x007e: IPUT  (r9 I:int), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x0080: IGET  (r9 I:int) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l}"];
Node_28 [shape=record,label="{28\:\ 0x0082|0x0082: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x008d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0084|0x0084: IGET  (r9 I:byte[]) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0 byte[] \l0x0086: INVOKE  (r8 I:ar.com.hjg.pngj.ChunkSeqReader), (r9 I:byte[]) ar.com.hjg.pngj.ChunkSeqReader.checkSignature(byte[]):void type: VIRTUAL \l0x0089: IPUT  (r0 I:int), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.buf0len int \l0x008b: IPUT  (r2 I:boolean), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.signatureDone boolean \l}"];
Node_30 [shape=record,label="{30\:\ 0x008d|0x008d: ARITH  (r10 I:int) = (r11 I:int) + (0 int) \l0x008f: IGET  (r0 I:long) = (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l0x0091: CAST  (r2 I:long) = (long) (r11 I:int) \l0x0092: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0093: IPUT  (r0 I:long), (r8 I:ar.com.hjg.pngj.ChunkSeqReader) ar.com.hjg.pngj.ChunkSeqReader.bytesCount long \l}"];
Node_31 [shape=record,label="{31\:\ 0x0095|0x0095: RETURN  (r10 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0096|0x0096: NEW_INSTANCE  (r9 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0098: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x009a: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x009d: CONST_STR  (r0 I:java.lang.String) =  \"Bad len: \" \l0x009f: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a2: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a5: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a9: INVOKE  \l  (r9 I:ar.com.hjg.pngj.PngjInputException)\l  (r10 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ac|0x00ac: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.ChunkSeqReader.consume((r8 'this' I:ar.com.hjg.pngj.ChunkSeqReader A[IMMUTABLE_TYPE, THIS]), (r9 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_32;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_31;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_31;
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
}

