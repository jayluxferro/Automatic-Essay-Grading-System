digraph "CFG forar.com.hjg.pngj.PngHelperInternal2.ostreamFromFile(Ljava\/io\/File;Z)Ljava\/io\/OutputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r4 I:ar.com.hjg.pngj.PngjOutputException) =  ar.com.hjg.pngj.PngjOutputException \l0x000b: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"File already exists: \" \l0x0012: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0018: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001c: INVOKE  \l  (r4 I:ar.com.hjg.pngj.PngjOutputException)\l  (r3 I:java.lang.String)\l ar.com.hjg.pngj.PngjOutputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|SYNTHETIC\lSplitter:B:6:0x0020\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0020\l|0x0020: NEW_INSTANCE  (r4 I:java.io.FileOutputStream) =  java.io.FileOutputStream A[Catch:\{ Exception \-\> 0x0026 \}, TRY_ENTER]\l0x0022: INVOKE  (r4 I:java.io.FileOutputStream), (r3 I:java.io.File) java.io.FileOutputStream.\<init\>(java.io.File):void type: DIRECT A[Catch:\{ Exception \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: RETURN  (r4 I:java.io.OutputStream) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|ExcHandler: Exception null\lSplitter:B:6:0x0020\l|0x0026: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0029: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002e: CONST_STR  (r2 I:java.lang.String) =  \"Could not open for write\" \l0x0030: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003a: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static java.io.OutputStream ar.com.hjg.pngj.PngHelperInternal2.ostreamFromFile((r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_4;
Node_2 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

