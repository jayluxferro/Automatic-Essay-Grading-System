digraph "CFG forar.com.hjg.pngj.ImageLineHelper.lineToARGB32(Lar\/com\/hjg\/pngj\/ImageLineByte;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;Lar\/com\/hjg\/pngj\/chunks\/PngChunkTRNS;[I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = r8.imgInfo.alpha\lint r1 = r8.getImageInfo().cols\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r11 == null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r11.length \>= r1) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|int[] r11 = new int[r1]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|PHI: r11 \l  PHI: (r11v1 int[]) = (r11v2 int[]), (r11v0 int[]) binds: [B:4:0x000f, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r3 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r8.getImageInfo().indexed == false) goto L_0x0043\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|if (r10 == null) goto L_0x0024\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|int r0 = r10.getPalletteAlpha().length\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|r0 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:44:0x0025, B:15:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x0025\-\>B:15:0x003b\l|if (r3 \>= r1) goto L_0x00ba\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|r2 = r8.scanline[r3] & 255\lint r5 = r9.getEntry(r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|if (r2 \>= r0) goto L_0x0039\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|r2 = r10.getPalletteAlpha()[r2]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|r2 = 255\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|LOOP_END\lPHI: r2 \l  PHI: (r2v10 int) = (r2v13 int), (r2v14 int) binds: [B:42:0x003b, B:43:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x0025\-\>B:15:0x003b\l|r11[r3] = (r2 \<\< 24) \| r5\lint r3 = r3 + 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|r2 = \-1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|if (r8.imgInfo.greyscale == false) goto L_0x007b\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|if (r10 == null) goto L_0x0050\l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|int r2 = r10.getGray()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|PHI: r2 \l  PHI: (r2v5 int) = (r2v2 int), (r2v6 int) binds: [B:18:0x004a, B:19:0x004c] A[DONT_GENERATE, DONT_INLINE]\l|r9 = 0\lr10 = 0\l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|LOOP_START\lPHI: r9 r10 \l  PHI: (r9v7 int) = (r9v6 int), (r9v8 int) binds: [B:20:0x0050, B:28:0x006c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v11 int) = (r10v10 int), (r10v16 int) binds: [B:20:0x0050, B:28:0x006c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:21:0x0052\-\>B:28:0x006c\l|if (r9 \>= r1) goto L_0x00ba\l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|int r6 = r10 + 1\lr10 = r8.scanline[r10] & 255\l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|if (r0 == false) goto L_0x0066\l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|r5 = r8.scanline[r6] & 255\lr6 = r6 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|if (r10 == r2) goto L_0x006b\l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|r5 = 255\l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|r5 = 0\l}"];
Node_28 [shape=record,label="{28\:\ 0x006c|LOOP_END\lPHI: r5 r6 \l  PHI: (r5v16 byte) = (r5v20 byte), (r5v21 byte), (r5v24 byte) binds: [B:46:0x006c, B:48:0x006c, B:47:0x006c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v5 int) = (r6v4 int), (r6v4 int), (r6v6 int) binds: [B:46:0x006c, B:48:0x006c, B:47:0x006c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:21:0x0052\-\>B:28:0x006c\l|int r10 = r10 \<\< 16\lr11[r9] = r10 \| (((r5 \<\< 24) \| r10) \| (r10 \<\< 8))\lint r9 = r9 + 1\lr10 = r6\l}"];
Node_29 [shape=record,label="{29\:\ 0x007b|if (r10 == null) goto L_0x0081\l}"];
Node_30 [shape=record,label="{30\:\ 0x007d|int r2 = r10.getRGB888()\l}"];
Node_31 [shape=record,label="{31\:\ 0x0081|PHI: r2 \l  PHI: (r2v3 int) = (r2v2 int), (r2v4 int) binds: [B:29:0x007b, B:30:0x007d] A[DONT_GENERATE, DONT_INLINE]\l|r9 = 0\lr10 = 0\l}"];
Node_32 [shape=record,label="{32\:\ 0x0083|LOOP_START\lPHI: r9 r10 \l  PHI: (r9v4 int) = (r9v3 int), (r9v5 int) binds: [B:31:0x0081, B:39:0x00b1] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v2 int) = (r10v1 int), (r10v9 int) binds: [B:31:0x0081, B:39:0x00b1] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:32:0x0083\-\>B:39:0x00b1\l|if (r9 \>= r1) goto L_0x00ba\l}"];
Node_33 [shape=record,label="{33\:\ 0x0085|int r6 = r10 + 1\lint r7 = r6 + 1\lint r6 = r7 + 1\lr10 = (((r8.scanline[r10] & 255) \<\< 16) \| ((r8.scanline[r6] & 255) \<\< 8)) \| (r8.scanline[r7] & 255)\l}"];
Node_34 [shape=record,label="{34\:\ 0x00a0|if (r0 == false) goto L_0x00ab\l}"];
Node_35 [shape=record,label="{35\:\ 0x00a2|r5 = r8.scanline[r6] & 255\lr6 = r6 + 1\l}"];
Node_36 [shape=record,label="{36\:\ 0x00ab|if (r10 == r2) goto L_0x00b0\l}"];
Node_37 [shape=record,label="{37\:\ 0x00ad|r5 = 255\l}"];
Node_38 [shape=record,label="{38\:\ 0x00b0|r5 = 0\l}"];
Node_39 [shape=record,label="{39\:\ 0x00b1|LOOP_END\lPHI: r5 r6 \l  PHI: (r5v8 byte) = (r5v10 byte), (r5v11 byte), (r5v14 byte) binds: [B:50:0x00b1, B:52:0x00b1, B:51:0x00b1] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 int) = (r6v1 int), (r6v1 int), (r6v3 int) binds: [B:50:0x00b1, B:52:0x00b1, B:51:0x00b1] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:32:0x0083\-\>B:39:0x00b1\l|r11[r9] = r10 \| (r5 \<\< 24)\lint r9 = r9 + 1\lr10 = r6\l}"];
Node_40 [shape=record,label="{40\:\ 0x00ba|RETURN\l|return r11\l}"];
Node_41 [shape=record,label="{41\:\ 0x00ba|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x003b|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x003b|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0025|SYNTHETIC\lPHI: r0 \l  PHI: (r0v2 int) = (r0v3 int), (r0v5 int) binds: [B:9:0x0024, B:8:0x001e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x00ba|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x006c|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x006c|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x006c|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x00ba|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x00b1|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x00b1|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x00b1|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int[] ar.com.hjg.pngj.ImageLineHelper.lineToARGB32((r8v0 ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_44;
Node_9 -> Node_44;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_41;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_43;
Node_14 -> Node_42;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_29;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_45;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_47;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_48;
Node_27 -> Node_46;
Node_28 -> Node_21;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_49;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_51;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_52;
Node_38 -> Node_50;
Node_39 -> Node_32;
Node_41 -> Node_40;
Node_42 -> Node_15;
Node_43 -> Node_15;
Node_44 -> Node_10;
Node_45 -> Node_40;
Node_46 -> Node_28;
Node_47 -> Node_28;
Node_48 -> Node_28;
Node_49 -> Node_40;
Node_50 -> Node_39;
Node_51 -> Node_39;
Node_52 -> Node_39;
}

