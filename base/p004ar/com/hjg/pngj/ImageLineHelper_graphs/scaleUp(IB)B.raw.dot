digraph "CFG forar.com.hjg.pngj.ImageLineHelper.scaleUp(IB)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:int[][]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK int[][] \l0x0006: AGET  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0008: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x000a: CAST  (r2 I:byte) = (byte) (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r2 I:byte) \l}"];
MethodNode[shape=record,label="{public static byte ar.com.hjg.pngj.ImageLineHelper.scaleUp((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

