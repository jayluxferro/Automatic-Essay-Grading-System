digraph "CFG forar.com.hjg.pngj.ImageLineHelper.lineToRGBA8888(Lar\/com\/hjg\/pngj\/ImageLineByte;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;Lar\/com\/hjg\/pngj\/chunks\/PngChunkTRNS;[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l0x0004: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0006: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0008: ARITH  (r2 I:int) = (r1 I:int) * (4 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: ARRAY_LENGTH  (r3 I:int) = (r12 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_ARRAY  (r12 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0013: IGET  (r3 I:boolean) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l0x0015: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0055 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r0 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x001e: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:45:0x00ee \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0026: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0028: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x002a: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l0x002b: INVOKE  (r6 I:int) = (r10 I:ar.com.hjg.pngj.chunks.PngChunkPLTE), (r3 I:int) ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntry(int):int type: VIRTUAL \l0x002f: ARITH  (r7 I:int) = (r2 I:int) + (1 int) \l0x0031: ARITH  (r8 I:int) = (r6 I:int) \>\> (16 int) \l0x0033: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l0x0034: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x0035: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x0037: ARITH  (r2 I:int) = (r7 I:int) + (1 int) \l0x0039: ARITH  (r8 I:int) = (r6 I:int) \>\> (8 int) \l0x003b: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l0x003c: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x003d: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x003f: ARITH  (r7 I:int) = (r2 I:int) + (1 int) \l0x0041: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l0x0042: CAST  (r6 I:byte) = (byte) (r6 I:int) \l0x0043: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:byte A[IMMUTABLE_TYPE])\l \l0x0045: ARITH  (r2 I:int) = (r7 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:15:0x004f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: INVOKE  (r5 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x004d: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: CAST  (r3 I:byte) = (byte) (r5 I:int) \l0x0050: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0052: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0055|0x0055: IGET  (r10 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0057: IGET  (r10 I:boolean) = (r10 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x0059: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0091 \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0063 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|0x005e: INVOKE  (r10 I:int) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getGray():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: CONST  (r10 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|0x0064: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0065: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0066|0x0066: IF  (r11 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:45:0x00ee \l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|0x0068: IGET  (r5 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x006a: ARITH  (r6 I:int) = (r3 I:int) + (1 int) \l0x006c: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x006e: ARITH  (r5 I:int) = (r11 I:int) + (1 int) \l0x0070: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r11 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0072: ARITH  (r11 I:int) = (r5 I:int) + (1 int) \l0x0074: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0076: ARITH  (r5 I:int) = (r11 I:int) + (1 int) \l0x0078: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r11 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x007a: ARITH  (r11 I:int) = (r5 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|0x007c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0086 \l}"];
Node_25 [shape=record,label="{25\:\ 0x007e|0x007e: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0080: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0082: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0084: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|0x0086: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0088|0x0088: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x008c \l}"];
Node_28 [shape=record,label="{28\:\ 0x008a|0x008a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x008c|0x008c: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x008d|0x008d: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x008f: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0091|0x0091: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0099 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0093|0x0093: IGET  (r9 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0095: INVOKE  \l  (r9 I:java.lang.Object)\l  (r4 I:int)\l  (r12 I:java.lang.Object)\l  (r4 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x0099|0x0099: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x009b|0x009b: IF  (r10 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:45:0x00ee \l}"];
Node_35 [shape=record,label="{35\:\ 0x009d|0x009d: ARITH  (r3 I:int) = (r10 I:int) + (1 int) \l0x009f: IGET  (r5 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x00a1: ARITH  (r6 I:int) = (r0 I:int) + (1 int) \l0x00a3: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x00a5: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x00a7: ARITH  (r10 I:int) = (r3 I:int) + (1 int) \l0x00a9: IGET  (r0 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x00ab: ARITH  (r5 I:int) = (r6 I:int) + (1 int) \l0x00ad: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x00af: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x00b1: ARITH  (r0 I:int) = (r10 I:int) + (1 int) \l0x00b3: IGET  (r3 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x00b5: ARITH  (r6 I:int) = (r5 I:int) + (1 int) \l0x00b7: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x00b9: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x00bb: ARITH  (r10 I:int) = (r0 I:int) + (1 int) \l0x00bd: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00bf|0x00bf: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ec \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c1|0x00c1: ARITH  (r0 I:int) = (r10 I:int) + (\-3 int) \l0x00c3: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x00c5: INVOKE  (r3 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getRGB():int[] type: VIRTUAL \l0x00c9: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x00cb: CAST  (r3 I:byte) = (byte) (r3 I:int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00cc|0x00cc: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ec \l}"];
Node_39 [shape=record,label="{39\:\ 0x00ce|0x00ce: ARITH  (r0 I:int) = (r10 I:int) + (\-2 int) \l0x00d0: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x00d2: INVOKE  (r3 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getRGB():int[] type: VIRTUAL \l0x00d6: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00d7: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x00d9: CAST  (r3 I:byte) = (byte) (r3 I:int) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00da|0x00da: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ec \l}"];
Node_41 [shape=record,label="{41\:\ 0x00dc|0x00dc: ARITH  (r0 I:int) = (r10 I:int) + (\-1 int) \l0x00de: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x00e0: INVOKE  (r5 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getRGB():int[] type: VIRTUAL \l0x00e4: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00e5: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x00e7: CAST  (r5 I:byte) = (byte) (r5 I:int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00e8|0x00e8: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ec \l}"];
Node_43 [shape=record,label="{43\:\ 0x00ea|0x00ea: APUT  \l  (r12 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ec|0x00ec: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x00ee|0x00ee: RETURN  (r12 I:byte[]) \l}"];
MethodNode[shape=record,label="{static byte[] ar.com.hjg.pngj.ImageLineHelper.lineToRGBA8888((r9 I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_45;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_11;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_31;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_45;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_22;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_45;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_45;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_44;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_44;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_44;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_34;
}

