digraph "CFG forar.com.hjg.pngj.ImageLineHelper.palette2rgb(Lar\/com\/hjg\/pngj\/IImageLine;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;Lar\/com\/hjg\/pngj\/chunks\/PngChunkTRNS;[IZ)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: INSTANCE_OF  (r3 I:boolean) = (r9 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineInt \l0x000e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0013 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|0x0014: CHECK_CAST  (r3 I:ar.com.hjg.pngj.ImageLineInt) = (ar.com.hjg.pngj.ImageLineInt) (r3 I:?[OBJECT, ARRAY]) \l0x0016: INSTANCE_OF  (r5 I:boolean) = (r9 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineByte \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001b \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|0x001c: CHECK_CAST  (r9 I:ar.com.hjg.pngj.ImageLineByte) = (ar.com.hjg.pngj.ImageLineByte) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|0x001e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0021 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0021|0x0021: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0029 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|0x0024: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r3 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.imgInfo ar.com.hjg.pngj.ImageInfo \l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|0x0026: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|0x0029: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|0x002c: ARITH  (r5 I:int) = (r4 I:int) * (r2 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002e|0x002e: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0033 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0030|0x0030: ARRAY_LENGTH  (r6 I:int) = (r12 I:?[]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0031|0x0031: IF  (r6 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:28:0x0035 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|0x0033: NEW_ARRAY  (r12 I:int[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: int[] \l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|0x0035: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x003d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|0x0037: INVOKE  (r5 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x003b: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x003d|0x003d: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x003e|0x003e: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:42:0x0064 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0040|0x0040: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0042|0x0042: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x004a \l}"];
Node_34 [shape=record,label="{34\:\ 0x0044|0x0044: IGET  (r7 I:byte[]) = (r9 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0046: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0048: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (r6 I:?[int, boolean, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x004a|0x004a: IGET  (r7 I:int[]) = (r3 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x004c: AGET  (r7 I:?[int, float]) = (r7 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x004e|0x004e: ARITH  (r8 I:int) = (r0 I:int) * (r2 I:int) \l0x0050: INVOKE  \l  (r10 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r7 I:int)\l  (r12 I:int[])\l  (r8 I:int)\l ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntryRgb(int, int[], int):void type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0053|0x0053: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0061 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0055|0x0055: IF  (r7 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:40:0x005d \l}"];
Node_39 [shape=record,label="{39\:\ 0x0057|0x0057: INVOKE  (r6 I:int[]) = (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x005b: AGET  (r6 I:?[int, float]) = (r6 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x005d|0x005d: ARITH  (r8 I:int) = (r8 I:int) + (3 int) \l0x005f: APUT  \l  (r12 I:?[int, float][])\l  (r8 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x0061|0x0061: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0064|0x0064: RETURN  (r12 I:int[]) \l}"];
MethodNode[shape=record,label="{private static int[] ar.com.hjg.pngj.ImageLineHelper.palette2rgb((r9 I:ar.com.hjg.pngj.IImageLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_22 -> Node_21;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_42;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_41;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_31;
}

