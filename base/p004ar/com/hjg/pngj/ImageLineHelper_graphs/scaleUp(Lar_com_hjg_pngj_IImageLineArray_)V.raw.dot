digraph "CFG forar.com.hjg.pngj.ImageLineHelper.scaleUp(Lar\/com\/hjg\/pngj\/IImageLineArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.IImageLineArray) ar.com.hjg.pngj.IImageLineArray.getImageInfo():ar.com.hjg.pngj.ImageInfo type: INTERFACE \l0x0004: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0065 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.IImageLineArray) ar.com.hjg.pngj.IImageLineArray.getImageInfo():ar.com.hjg.pngj.ImageInfo type: INTERFACE \l0x000c: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: SGET  (r0 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_1 int[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r0 I:int[][]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK int[][] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE   ar.com.hjg.pngj.ImageLineHelper.initDepthScale():void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: SGET  (r0 I:int[][]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK int[][] \l0x0020: INVOKE  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r4 I:ar.com.hjg.pngj.IImageLineArray) ar.com.hjg.pngj.IImageLineArray.getImageInfo():ar.com.hjg.pngj.ImageInfo type: INTERFACE \l0x0024: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0026: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0028: INSTANCE_OF  (r1 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineInt \l0x002a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: CHECK_CAST  (r4 I:ar.com.hjg.pngj.ImageLineInt) = (ar.com.hjg.pngj.ImageLineInt) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: INVOKE  (r1 I:int) = (r4 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.getSize():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:22:0x005c \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IGET  (r1 I:int[]) = (r4 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x0037: IGET  (r3 I:int[]) = (r4 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x0039: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x003b: AGET  (r3 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x003d: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x003f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: INSTANCE_OF  (r1 I:boolean) = (r4 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineByte \l}"];
Node_17 [shape=record,label="{17\:\ 0x0044|0x0044: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x005d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|0x0046: CHECK_CAST  (r4 I:ar.com.hjg.pngj.ImageLineByte) = (ar.com.hjg.pngj.ImageLineByte) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: INVOKE  (r1 I:int) = (r4 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.getSize():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|0x004c: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:22:0x005c \l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|0x004e: IGET  (r1 I:byte[]) = (r4 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0050: IGET  (r3 I:byte[]) = (r4 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0052: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0054: AGET  (r3 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0056: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0057: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0059: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|0x005c: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|0x005d: NEW_INSTANCE  (r4 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x005f: CONST_STR  (r0 I:java.lang.String) =  \"not implemented\" \l0x0061: INVOKE  \l  (r4 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|0x0064: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0065|0x0065: RETURN   \l}"];
MethodNode[shape=record,label="{public static void ar.com.hjg.pngj.ImageLineHelper.scaleUp((r4 I:ar.com.hjg.pngj.IImageLineArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_25[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_19;
Node_23 -> Node_24;
}

