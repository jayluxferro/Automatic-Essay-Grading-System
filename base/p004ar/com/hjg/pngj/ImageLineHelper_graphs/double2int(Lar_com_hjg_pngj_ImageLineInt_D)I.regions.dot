digraph "CFG forar.com.hjg.pngj.ImageLineHelper.double2int(Lar\/com\/hjg\/pngj\/ImageLineInt;D)I" {
subgraph cluster_Region_2009178758 {
label = "R(2:(1:2)(1:(1:5))|11)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1152147865 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: R(1:(1:5))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r6 \<= 0.0d) goto L_0x0008\l}"];
subgraph cluster_Region_708869948 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|r6 = 0.0d\l}"];
}
subgraph cluster_Region_1631955382 {
label = "R(1:(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_468382346 {
label = "IF [B:4:0x000c] THEN: R(1:5) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r6 \>= 1.0d) goto L_0x000e\l}"];
subgraph cluster_Region_1013835975 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|r6 = 1.0d\l}"];
}
}
}
}
Node_11 [shape=record,label="{11\:\ 0x0029|RETURN\l|return (int) ((r6 * (r5.imgInfo.bitDepth == 16 ? 65535.0d : 255.0d)) + 0.5d)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f|PHI: r6 \l  PHI: (r6v1 double) = (r6v0 double), (r6v4 double), (r6v5 double) binds: [B:4:0x000c, B:5:0x000e, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e|PHI: r3 \l  PHI: (r3v1 double) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0023}"];
MethodNode[shape=record,label="{public static int ar.com.hjg.pngj.ImageLineHelper.double2int((r5v0 ar.com.hjg.pngj.ImageLineInt A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_10 -> Node_9;
}

