digraph "CFG forar.com.hjg.pngj.ImageLineHelper.lineToRGBA8888(Lar\/com\/hjg\/pngj\/ImageLineByte;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;Lar\/com\/hjg\/pngj\/chunks\/PngChunkTRNS;[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = r9.imgInfo.alpha\lint r1 = r9.imgInfo.cols\lint r2 = r1 * 4\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r12 == null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r12.length \>= r2) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|byte[] r12 = new byte[r2]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|PHI: r12 \l  PHI: (r12v1 byte[]) = (r12v2 byte[]), (r12v0 byte[]) binds: [B:4:0x000f, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r4 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if (r9.imgInfo.indexed == false) goto L_0x0055\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|if (r11 == null) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|int r0 = r11.getPalletteAlpha().length\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|r0 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|PHI: r0 \l  PHI: (r0v14 int) = (r0v15 int), (r0v17 int) binds: [B:9:0x0020, B:8:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|r2 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|LOOP_START\lPHI: r2 r4 \l  PHI: (r2v2 int) = (r2v1 int), (r2v4 int) binds: [B:10:0x0021, B:15:0x004f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:10:0x0021, B:15:0x004f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0022\-\>B:15:0x004f\l|if (r4 \>= r1) goto L_0x00ee\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|r5 = 255\lr3 = r9.scanline[r4] & 255\lint r6 = r10.getEntry(r3)\lint r7 = r2 + 1\lr12[r2] = (byte) ((r6 \>\> 16) & 255)\lint r2 = r7 + 1\lr12[r7] = (byte) ((r6 \>\> 8) & 255)\lint r7 = r2 + 1\lr12[r2] = (byte) (r6 & 255)\lint r2 = r7 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|if (r3 \>= r0) goto L_0x004f\l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|r5 = r11.getPalletteAlpha()[r3]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|LOOP_END\lPHI: r5 \l  PHI: (r5v10 int) = (r5v9 int), (r5v12 int) binds: [B:48:0x004f, B:47:0x004f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0022\-\>B:15:0x004f\l|r12[r7] = (byte) r5\lint r4 = r4 + 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0055}"];
Node_17 [shape=record,label="{17\:\ 0x005a|if (r9.imgInfo.greyscale == false) goto L_0x0091\l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|if (r11 == null) goto L_0x0063\l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|int r10 = r11.getGray()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|r10 = \-1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|PHI: r10 \l  PHI: (r10v7 int) = (r10v8 int), (r10v9 int) binds: [B:20:0x0063, B:19:0x005e] A[DONT_GENERATE, DONT_INLINE]\l|r11 = 0\lr3 = 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0066|LOOP_START\lPHI: r3 r11 \l  PHI: (r3v13 int) = (r3v12 int), (r3v16 int) binds: [B:21:0x0064, B:30:0x008d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v2 int) = (r11v1 int), (r11v4 int) binds: [B:21:0x0064, B:30:0x008d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:22:0x0066\-\>B:30:0x008d\l|if (r11 \>= r2) goto L_0x00ee\l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|int r6 = r3 + 1\lbyte r3 = r9.scanline[r3]\lint r5 = r11 + 1\lr12[r11] = r3\lint r11 = r5 + 1\lr12[r5] = r3\lint r5 = r11 + 1\lr12[r11] = r3\lint r11 = r5 + 1\l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|if (r0 == false) goto L_0x0086\l}"];
Node_25 [shape=record,label="{25\:\ 0x007e|byte r3 = r9.scanline[r6]\lr6 = r6 + 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0086}"];
Node_27 [shape=record,label="{27\:\ 0x0088|if ((r3 & 255) != r10) goto L_0x008c\l}"];
Node_28 [shape=record,label="{28\:\ 0x008a|r3 = 0\l}"];
Node_29 [shape=record,label="{29\:\ 0x008c|r3 = \-1\l}"];
Node_30 [shape=record,label="{30\:\ 0x008d|LOOP_END\lPHI: r3 r6 \l  PHI: (r3v15 byte) = (r3v18 byte), (r3v19 byte), (r3v21 byte) binds: [B:50:0x008d, B:52:0x008d, B:51:0x008d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 int) = (r6v2 int), (r6v2 int), (r6v4 int) binds: [B:50:0x008d, B:52:0x008d, B:51:0x008d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:22:0x0066\-\>B:30:0x008d\l|r12[r5] = r3\lr3 = r6\l}"];
Node_31 [shape=record,label="{31\:\ 0x0091|if (r0 == false) goto L_0x0099\l}"];
Node_32 [shape=record,label="{32\:\ 0x0093|java.lang.System.arraycopy(r9.scanline, 0, r12, 0, r2)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0099|r10 = 0\lr0 = 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x009b|LOOP_START\lPHI: r0 r10 \l  PHI: (r0v3 int) = (r0v2 int), (r0v8 int) binds: [B:33:0x0099, B:44:0x00ec] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v4 int) = (r10v3 int), (r10v6 int) binds: [B:33:0x0099, B:44:0x00ec] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:34:0x009b\-\>B:44:0x00ec\l|if (r10 \>= r2) goto L_0x00ee\l}"];
Node_35 [shape=record,label="{35\:\ 0x009d|int r3 = r10 + 1\lint r6 = r0 + 1\lr12[r10] = r9.scanline[r0]\lint r10 = r3 + 1\lint r5 = r6 + 1\lr12[r3] = r9.scanline[r6]\lint r0 = r10 + 1\lint r6 = r5 + 1\lr12[r10] = r9.scanline[r5]\lint r10 = r0 + 1\lr12[r0] = \-1\l}"];
Node_36 [shape=record,label="{36\:\ 0x00bf|if (r11 == null) goto L_0x00ec\l}"];
Node_37 [shape=record,label="{37\:\ 0x00c1}"];
Node_38 [shape=record,label="{38\:\ 0x00cc|if (r12[r10 + \-3] != ((byte) r11.getRGB()[0])) goto L_0x00ec\l}"];
Node_39 [shape=record,label="{39\:\ 0x00ce}"];
Node_40 [shape=record,label="{40\:\ 0x00da|if (r12[r10 + \-2] != ((byte) r11.getRGB()[1])) goto L_0x00ec\l}"];
Node_41 [shape=record,label="{41\:\ 0x00dc|int r0 = r10 + \-1\l}"];
Node_42 [shape=record,label="{42\:\ 0x00e8|if (r12[r0] != ((byte) r11.getRGB()[2])) goto L_0x00ec\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ea|r12[r0] = 0\l}"];
Node_44 [shape=record,label="{44\:\ 0x00ec|LOOP_END\lLOOP:2: B:34:0x009b\-\>B:44:0x00ec\l|r0 = r6\l}"];
Node_45 [shape=record,label="{45\:\ 0x00ee|RETURN\l|return r12\l}"];
Node_46 [shape=record,label="{46\:\ 0x00ee|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x004f|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x004f|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x00ee|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x008d|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x008d|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x008d|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x00ee|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x00ec|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x00ec|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x00ec|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x00ec|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x00ec|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static byte[] ar.com.hjg.pngj.ImageLineHelper.lineToRGBA8888((r9v0 ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_46;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_48;
Node_14 -> Node_47;
Node_15 -> Node_11;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_31;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_49;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_51;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_52;
Node_29 -> Node_50;
Node_30 -> Node_22;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_45;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_53;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_55;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_56;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_57;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_58;
Node_43 -> Node_54;
Node_44 -> Node_34;
Node_46 -> Node_45;
Node_47 -> Node_15;
Node_48 -> Node_15;
Node_49 -> Node_45;
Node_50 -> Node_30;
Node_51 -> Node_30;
Node_52 -> Node_30;
Node_53 -> Node_45;
Node_54 -> Node_44;
Node_55 -> Node_44;
Node_56 -> Node_44;
Node_57 -> Node_44;
Node_58 -> Node_44;
}

