digraph "CFG forar.com.hjg.pngj.ImageLineHelper.initDepthScale()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0003: SPUT  (r1 I:int[]) ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_1 int[] \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: SGET  (r3 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_1 int[] \l0x000b: ARITH  (r4 I:int) = (r2 I:int) * (255 int) \l0x000d: APUT  \l  (r3 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x000f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0013: NEW_ARRAY  (r3 I:int[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0015: SPUT  (r3 I:int[]) ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_2 int[] \l0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: SGET  (r5 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_2 int[] \l0x001d: ARITH  (r6 I:int) = (r3 I:int) * (255 int) \l0x001f: ARITH  (r6 I:int) = (r6 I:int) \/ (r4 I:int) \l0x0020: APUT  \l  (r5 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x0022: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0027: NEW_ARRAY  (r5 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0029: SPUT  (r5 I:int[]) ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_4 int[] \l0x002b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r5 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:10:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: SGET  (r6 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_4 int[] \l0x0030: ARITH  (r7 I:int) = (r5 I:int) * (255 int) \l0x0032: ARITH  (r7 I:int) = (r7 I:int) \/ (15 int) \l0x0034: APUT  \l  (r6 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x0036: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x003a: NEW_ARRAY  (r3 I:int[][]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[][] \l0x003c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x003f: SGET  (r1 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_1 int[] \l0x0041: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0042: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0044: SGET  (r1 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_2 int[] \l0x0046: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0048: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x004a: SGET  (r0 I:int[]) =  ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK_4 int[] \l0x004c: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x004e: SPUT  (r3 I:int[][]) ar.com.hjg.pngj.ImageLineHelper.DEPTH_UNPACK int[][] \l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: RETURN   \l}"];
MethodNode[shape=record,label="{private static void ar.com.hjg.pngj.ImageLineHelper.initDepthScale() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
}

