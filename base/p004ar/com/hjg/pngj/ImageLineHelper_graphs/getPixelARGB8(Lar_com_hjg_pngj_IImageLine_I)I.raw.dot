digraph "CFG forar.com.hjg.pngj.ImageLineHelper.getPixelARGB8(Lar\/com\/hjg\/pngj\/IImageLine;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineInt \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CHECK_CAST  (r2 I:ar.com.hjg.pngj.ImageLineInt) = (ar.com.hjg.pngj.ImageLineInt) (r2 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r2 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0008: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x000a: ARITH  (r3 I:int) = (r3 I:int) * (r0 I:int) \l0x000c: INVOKE  (r2 I:int[]) = (r2 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.getScanline():int[] type: VIRTUAL \l0x0010: ARITH  (r0 I:int) = (r3 I:int) + (3 int) \l0x0012: AGET  (r0 I:?[int, float]) = (r2 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \<\< (24 int) \l0x0016: AGET  (r1 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0018: ARITH  (r1 I:int) = (r1 I:int) \<\< (16 int) \l0x001a: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x001b: ARITH  (r1 I:int) = (r3 I:int) + (1 int) \l0x001d: AGET  (r1 I:?[int, float]) = (r2 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001f: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) \l0x0021: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0022: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l0x0024: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0026: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) ar.com.hjg.pngj.ImageLineByte \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0058 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: CHECK_CAST  (r2 I:ar.com.hjg.pngj.ImageLineByte) = (ar.com.hjg.pngj.ImageLineByte) (r2 I:?[OBJECT, ARRAY]) \l0x002e: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0030: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.channels int \l0x0032: ARITH  (r3 I:int) = (r3 I:int) * (r0 I:int) \l0x0034: INVOKE  (r2 I:byte[]) = (r2 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.getScanline():byte[] type: VIRTUAL \l0x0038: ARITH  (r0 I:int) = (r3 I:int) + (3 int) \l0x003a: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x003c: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x003e: ARITH  (r0 I:int) = (r0 I:int) \<\< (24 int) \l0x0040: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0042: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0044: ARITH  (r1 I:int) = (r1 I:int) \<\< (16 int) \l0x0046: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0047: ARITH  (r1 I:int) = (r3 I:int) + (1 int) \l0x0049: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x004b: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x004d: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) \l0x004f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0050: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l0x0052: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0054: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0056: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0057|0x0057: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0058|0x0058: NEW_INSTANCE  (r3 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x005a: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005f: CONST_STR  (r1 I:java.lang.String) =  \"Not supported \" \l0x0061: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r2 I:java.lang.Class) = (r2 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0068: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x006b: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006f: INVOKE  \l  (r3 I:ar.com.hjg.pngj.PngjException)\l  (r2 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0072|0x0072: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int ar.com.hjg.pngj.ImageLineHelper.getPixelARGB8((r2 I:ar.com.hjg.pngj.IImageLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

