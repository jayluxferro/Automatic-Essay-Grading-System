digraph "CFG forar.com.hjg.pngj.ImageLineHelper.lineToARGB32(Lar\/com\/hjg\/pngj\/ImageLineByte;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;Lar\/com\/hjg\/pngj\/chunks\/PngChunkTRNS;[I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l0x0004: INVOKE  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.getImageInfo():ar.com.hjg.pngj.ImageInfo type: VIRTUAL \l0x0008: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: ARRAY_LENGTH  (r2 I:int) = (r11 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_ARRAY  (r11 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.getImageInfo():ar.com.hjg.pngj.ImageInfo type: VIRTUAL \l0x0015: IGET  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0043 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r0 I:int[]) = (r10 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x0022: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:40:0x00ba \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IGET  (r2 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0029: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x002b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x002c: INVOKE  (r5 I:int) = (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE), (r2 I:int) ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntry(int):int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: INVOKE  (r6 I:int[]) = (r10 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getPalletteAlpha():int[] type: VIRTUAL \l0x0036: AGET  (r2 I:?[int, float]) = (r6 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: ARITH  (r2 I:int) = (r2 I:int) \<\< (24 int) \l0x003d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x003e: APUT  \l  (r11 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0040: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: IGET  (r9 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0045: IGET  (r9 I:boolean) = (r9 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l0x0047: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x007b \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0050 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|0x004c: INVOKE  (r2 I:int) = (r10 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getGray():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0051: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: IF  (r9 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:40:0x00ba \l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|0x0054: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0056: ARITH  (r6 I:int) = (r10 I:int) + (1 int) \l0x0058: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l0x005a: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|0x005b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0066 \l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|0x005d: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x005f: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0061: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0063: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0064: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|0x0066: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x006b \l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|0x0068: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|0x006b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x006c|0x006c: ARITH  (r5 I:int) = (r5 I:int) \<\< (24 int) \l0x006e: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r10 I:?[int, boolean, short, byte, char]) \l0x006f: ARITH  (r7 I:int) = (r10 I:int) \<\< (8 int) \l0x0071: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r7 I:?[int, boolean, short, byte, char]) \l0x0072: ARITH  (r10 I:int) = (r10 I:int) \<\< (16 int) \l0x0074: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x0075: APUT  \l  (r11 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r10 I:?[int, float])\l \l0x0077: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x0079: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x007b|0x007b: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0081 \l}"];
Node_30 [shape=record,label="{30\:\ 0x007d|0x007d: INVOKE  (r2 I:int) = (r10 I:ar.com.hjg.pngj.chunks.PngChunkTRNS) ar.com.hjg.pngj.chunks.PngChunkTRNS.getRGB888():int type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0081|0x0081: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0082: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0083|0x0083: IF  (r9 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:40:0x00ba \l}"];
Node_33 [shape=record,label="{33\:\ 0x0085|0x0085: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0087: ARITH  (r6 I:int) = (r10 I:int) + (1 int) \l0x0089: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l0x008b: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x008c: ARITH  (r10 I:int) = (r10 I:int) \<\< (16 int) \l0x008e: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0090: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0092: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0094: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0095: ARITH  (r5 I:int) = (r5 I:int) \<\< (8 int) \l0x0097: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x0098: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x009a: ARITH  (r6 I:int) = (r7 I:int) + (1 int) \l0x009c: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x009e: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x009f: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a0|0x00a0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00ab \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a2|0x00a2: IGET  (r5 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x00a4: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x00a6: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x00a8: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x00a9: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ab|0x00ab: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00b0 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ad|0x00ad: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b0|0x00b0: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b1|0x00b1: ARITH  (r5 I:int) = (r5 I:int) \<\< (24 int) \l0x00b3: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x00b4: APUT  \l  (r11 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r10 I:?[int, float])\l \l0x00b6: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x00b8: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x00ba|0x00ba: RETURN  (r11 I:int[]) \l}"];
MethodNode[shape=record,label="{static int[] ar.com.hjg.pngj.ImageLineHelper.lineToARGB32((r8 I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:ar.com.hjg.pngj.chunks.PngChunkTRNS A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_40;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_29;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_40;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_28;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_21;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_39;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_32;
}

