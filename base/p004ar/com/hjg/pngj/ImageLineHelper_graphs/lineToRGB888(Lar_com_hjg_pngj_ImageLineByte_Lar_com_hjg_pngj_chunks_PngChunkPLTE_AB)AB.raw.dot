digraph "CFG forar.com.hjg.pngj.ImageLineHelper.lineToRGB888(Lar\/com\/hjg\/pngj\/ImageLineByte;Lar\/com\/hjg\/pngj\/chunks\/PngChunkPLTE;[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0002: IGET  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.alpha boolean \l0x0004: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0006: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0008: ARITH  (r2 I:int) = (r1 I:int) * (3 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: ARRAY_LENGTH  (r3 I:int) = (r10 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_ARRAY  (r10 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0012: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0014: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0016: IGET  (r4 I:boolean) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.indexed boolean \l0x0018: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0043 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:23:0x0091 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r4 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0022: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0024: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0026: INVOKE  \l  (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE)\l  (r4 I:int)\l  (r3 I:int[])\l ar.com.hjg.pngj.chunks.PngChunkPLTE.getEntryRgb(int, int[]):void type: VIRTUAL \l0x0029: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x002b: AGET  (r7 I:?[int, float]) = (r3 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x002d: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x002e: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r7 I:byte A[IMMUTABLE_TYPE])\l \l0x0030: ARITH  (r2 I:int) = (r4 I:int) + (1 int) \l0x0032: AGET  (r7 I:?[int, float]) = (r3 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0034: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x0035: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r7 I:byte A[IMMUTABLE_TYPE])\l \l0x0037: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x0039: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003a: AGET  (r7 I:?[int, float]) = (r3 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x003c: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x003d: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r7 I:byte A[IMMUTABLE_TYPE])\l \l0x003f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0041: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: IGET  (r9 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0045: IGET  (r9 I:boolean) = (r9 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.greyscale boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0065 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: IF  (r5 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:23:0x0091 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: IGET  (r1 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x004e: ARITH  (r3 I:int) = (r9 I:int) + (1 int) \l0x0050: AGET  (r9 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x0052: ARITH  (r1 I:int) = (r5 I:int) + (1 int) \l0x0054: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r9 I:byte A[IMMUTABLE_TYPE])\l \l0x0056: ARITH  (r4 I:int) = (r1 I:int) + (1 int) \l0x0058: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r9 I:byte A[IMMUTABLE_TYPE])\l \l0x005a: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x005c: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r9 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x005e|0x005e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0063 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0060|0x0060: ARITH  (r9 I:int) = (r3 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0065|0x0065: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|0x0067: IGET  (r8 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0069: INVOKE  \l  (r8 I:java.lang.Object)\l  (r5 I:int)\l  (r10 I:java.lang.Object)\l  (r5 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x006d|0x006d: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: IF  (r5 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:23:0x0091 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: ARITH  (r0 I:int) = (r5 I:int) + (1 int) \l0x0072: IGET  (r1 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0074: ARITH  (r3 I:int) = (r9 I:int) + (1 int) \l0x0076: AGET  (r9 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x0078: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r9 I:byte A[IMMUTABLE_TYPE])\l \l0x007a: ARITH  (r9 I:int) = (r0 I:int) + (1 int) \l0x007c: IGET  (r1 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x007e: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x0080: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0082: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x0084: ARITH  (r5 I:int) = (r9 I:int) + (1 int) \l0x0086: IGET  (r0 I:byte[]) = (r8 I:ar.com.hjg.pngj.ImageLineByte) ar.com.hjg.pngj.ImageLineByte.scanline byte[] \l0x0088: ARITH  (r1 I:int) = (r4 I:int) + (1 int) \l0x008a: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x008c: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x008e: ARITH  (r9 I:int) = (r1 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0091|0x0091: RETURN  (r10 I:byte[]) \l}"];
MethodNode[shape=record,label="{static byte[] ar.com.hjg.pngj.ImageLineHelper.lineToRGB888((r8 I:ar.com.hjg.pngj.ImageLineByte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:ar.com.hjg.pngj.chunks.PngChunkPLTE A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_13;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_21;
}

