digraph "CFG forar.com.hjg.pngj.Deinterlacer.nextRow()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSeq int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0004: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSeq int \l0x0006: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.rows int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSubimg int \l0x000c: IGET  (r2 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.rows int \l0x000e: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSubimg int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0015: INVOKE  (r4 I:ar.com.hjg.pngj.Deinterlacer), (r0 I:int) ar.com.hjg.pngj.Deinterlacer.setRow(int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.pass int \l0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IPUT  (r1 I:boolean), (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.ended boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: RETURN  (r3 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.pass int \l0x0024: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0025: INVOKE  (r4 I:ar.com.hjg.pngj.Deinterlacer), (r0 I:int) ar.com.hjg.pngj.Deinterlacer.setPass(int):void type: VIRTUAL \l0x0028: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.rows int \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IGET  (r0 I:int) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSeq int \l0x002e: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x002f: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.currRowSeq int \l0x0031: INVOKE  (r0 I:boolean) = (r4 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.nextRow():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN  (r0 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: INVOKE  (r4 I:ar.com.hjg.pngj.Deinterlacer), (r3 I:int) ar.com.hjg.pngj.Deinterlacer.setRow(int):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean ar.com.hjg.pngj.Deinterlacer.nextRow((r4 'this' I:ar.com.hjg.pngj.Deinterlacer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

