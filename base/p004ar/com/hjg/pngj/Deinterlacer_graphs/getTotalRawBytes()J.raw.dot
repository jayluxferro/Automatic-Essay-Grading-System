digraph "CFG forar.com.hjg.pngj.Deinterlacer.getTotalRawBytes()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0003: MOVE  (r2 I:?[long, double]) = (r1 I:?[long, double]) \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: CONST  (r4 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:15:0x0056 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r5 I:byte[]) = (r1 I:int) ar.com.hjg.pngj.Deinterlacer.paramsForPass(int):byte[] type: STATIC \l0x000c: IGET  (r6 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x000e: IGET  (r6 I:int) = (r6 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x0010: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0011: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0013: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r6 I:?[int, byte, short, char]) \<= (r8 I:?[int, byte, short, char])  \-\> B:6:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r6 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0018: IGET  (r6 I:int) = (r6 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x001a: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x001c: ARITH  (r6 I:int) = (r6 I:int) + (r8 I:int) \l0x001d: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l0x001e: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0020: ARITH  (r6 I:int) = (r6 I:int) \- (r7 I:int) \l0x0021: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0023: ARITH  (r6 I:int) = (r6 I:int) \/ (r7 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r7 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0028: IGET  (r7 I:int) = (r7 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x002a: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002b: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r7 I:?[int, byte, short, char]) \<= (r10 I:?[int, byte, short, char])  \-\> B:10:0x003e \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IGET  (r7 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0031: IGET  (r7 I:int) = (r7 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0033: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x0035: ARITH  (r7 I:int) = (r7 I:int) + (r10 I:int) \l0x0036: ARITH  (r7 I:int) = (r7 I:int) \- (r0 I:int) \l0x0037: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l0x0039: ARITH  (r7 I:int) = (r7 I:int) \- (r8 I:int) \l0x003a: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x003c: ARITH  (r9 I:int) = (r7 I:int) \/ (r5 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: IGET  (r5 I:ar.com.hjg.pngj.ImageInfo) = (r11 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0040: IGET  (r5 I:int) = (r5 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitspPixel int \l0x0042: ARITH  (r5 I:int) = (r5 I:int) * (r9 I:int) \l0x0044: ARITH  (r5 I:int) = (r5 I:int) + (r4 I:int) \l0x0045: ARITH  (r5 I:int) = (r5 I:int) \/ (8 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0053 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0053 \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: CAST  (r6 I:long) = (long) (r6 I:int) \l0x004c: CONST  (r8 I:?[long, double]) = (1 ?[long, double]) \l0x004e: CAST  (r4 I:long) = (long) (r5 I:int) \l0x004f: ARITH  (r4 I:long) = (r4 I:long) + (r8 I:long) \l0x0050: ARITH  (r6 I:long) = (r6 I:long) * (r4 I:long) \l0x0052: ARITH  (r2 I:long) = (r2 I:long) + (r6 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public long ar.com.hjg.pngj.Deinterlacer.getTotalRawBytes((r11 'this' I:ar.com.hjg.pngj.Deinterlacer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

