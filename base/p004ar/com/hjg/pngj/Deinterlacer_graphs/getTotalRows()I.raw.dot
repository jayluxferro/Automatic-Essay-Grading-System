digraph "CFG forar.com.hjg.pngj.Deinterlacer.getTotalRows()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.totalRows int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:16:0x004b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r2 I:byte[]) = (r1 I:int) ar.com.hjg.pngj.Deinterlacer.paramsForPass(int):byte[] type: STATIC \l0x000d: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x000f: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x0011: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0012: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0014: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IGET  (r3 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0019: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x001b: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x001d: ARITH  (r3 I:int) = (r3 I:int) + (r5 I:int) \l0x001e: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int) \l0x001f: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0021: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0022: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0024: ARITH  (r3 I:int) = (r3 I:int) \/ (r4 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0029: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x002b: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002c: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r4 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.imi ar.com.hjg.pngj.ImageInfo \l0x0032: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0034: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0036: ARITH  (r4 I:int) = (r4 I:int) + (r7 I:int) \l0x0037: ARITH  (r4 I:int) = (r4 I:int) \- (r0 I:int) \l0x0038: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x003a: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x003b: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x003d: ARITH  (r6 I:int) = (r4 I:int) \/ (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: IGET  (r2 I:int) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.totalRows int \l0x0045: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0046: IPUT  (r2 I:int), (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.totalRows int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: IGET  (r0 I:int) = (r8 I:ar.com.hjg.pngj.Deinterlacer) ar.com.hjg.pngj.Deinterlacer.totalRows int \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.Deinterlacer.getTotalRows((r8 'this' I:ar.com.hjg.pngj.Deinterlacer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_3;
Node_16 -> Node_17;
}

