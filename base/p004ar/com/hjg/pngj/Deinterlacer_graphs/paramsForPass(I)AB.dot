digraph "CFG forar.com.hjg.pngj.Deinterlacer.paramsForPass(I)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|switch(r3) \{\l    case 1: goto L_0x003f;\l    case 2: goto L_0x0039;\l    case 3: goto L_0x0033;\l    case 4: goto L_0x002d;\l    case 5: goto L_0x0027;\l    case 6: goto L_0x0021;\l    case 7: goto L_0x001b;\l    default: goto L_0x0004;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"bad interlace pass\")\lr1.append(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|throw new p004ar.com.hjg.pngj.PngjExceptionInternal(r1.toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|return new byte[]\{1, 2, 0, 1\}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021}"];
Node_7 [shape=record,label="{7\:\ 0x0026|RETURN\l|return new byte[]\{2, 2, 1, 0\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027}"];
Node_9 [shape=record,label="{9\:\ 0x002c|RETURN\l|return new byte[]\{2, 4, 0, 2\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|return new byte[]\{4, 4, 2, 0\}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033}"];
Node_13 [shape=record,label="{13\:\ 0x0038|RETURN\l|return new byte[]\{4, 8, 0, 4\}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039}"];
Node_15 [shape=record,label="{15\:\ 0x003e|RETURN\l|return new byte[]\{8, 8, 4, 0\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x003f}"];
Node_17 [shape=record,label="{17\:\ 0x0044|RETURN\l|return new byte[]\{8, 8, 0, 0\}\l}"];
MethodNode[shape=record,label="{static byte[] ar.com.hjg.pngj.Deinterlacer.paramsForPass((r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_8;
Node_1 -> Node_10;
Node_1 -> Node_12;
Node_1 -> Node_14;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

