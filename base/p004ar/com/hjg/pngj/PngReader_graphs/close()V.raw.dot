digraph "CFG forar.com.hjg.pngj.PngReader.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r4 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng A[Catch:\{ Exception \-\> 0x000a \}, TRY_ENTER]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 A[Catch:\{ Exception \-\> 0x000a \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r4 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng A[Catch:\{ Exception \-\> 0x000a \}]\l0x0006: INVOKE  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.close():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x000a \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x000a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: SGET  (r1 I:java.util.logging.Logger) =  ar.com.hjg.pngj.PngHelperInternal.LOGGER java.util.logging.Logger \l0x000d: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r3 I:java.lang.String) =  \"error closing chunk sequence:\" \l0x0014: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Exception) java.lang.Exception.getMessage():java.lang.String type: VIRTUAL \l0x001b: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001e: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IGET  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) = (r4 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.streamFeeder ar.com.hjg.pngj.BufferedStreamFeeder \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IGET  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) = (r4 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.streamFeeder ar.com.hjg.pngj.BufferedStreamFeeder \l0x002b: INVOKE  (r0 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.close():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngReader.close((r4 'this' I:ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
}

