digraph "CFG forar.com.hjg.pngj.PngReader.readRow(I)Lar\/com\/hjg\/pngj\/IImageLine;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.firstChunksNotYetRead():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.readFirstChunks():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:boolean) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.interlaced boolean \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0096 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLineSet) = \l  (r6 I:ar.com.hjg.pngj.PngReader)\l  (r2 I:boolean)\l  (r2 I:int)\l  (r1 I:int)\l  (r2 I:int)\l ar.com.hjg.pngj.PngReader.createLineSet(boolean, int, int, int):ar.com.hjg.pngj.IImageLineSet type: VIRTUAL \l0x0019: IPUT  \l  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>)\l  (r6 I:ar.com.hjg.pngj.PngReader)\l ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x001d: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLine) = (r0 I:ar.com.hjg.pngj.IImageLineSet), (r7 I:int) ar.com.hjg.pngj.IImageLineSet.getImageLine(int):ar.com.hjg.pngj.IImageLine type: INTERFACE \l0x0021: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN  (r0 I:ar.com.hjg.pngj.IImageLine) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r7 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:23:0x007f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IF  (r3 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:22:0x007e \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0030: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0034: INVOKE  (r3 I:boolean) = (r3 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.isRowReady():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: IGET  (r3 I:ar.com.hjg.pngj.BufferedStreamFeeder) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.streamFeeder ar.com.hjg.pngj.BufferedStreamFeeder \l0x003c: IGET  (r4 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x003e: INVOKE  \l  (r3 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l  (r4 I:ar.com.hjg.pngj.IBytesConsumer)\l ar.com.hjg.pngj.BufferedStreamFeeder.feed(ar.com.hjg.pngj.IBytesConsumer):int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x0044: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x0045: IPUT  (r3 I:int), (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x0047: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0049: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x004d: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004e: NEW_ARRAY  (r4 I:java.util.zip.Checksum[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.util.zip.Checksum[] \l0x0050: IGET  (r5 I:java.util.zip.CRC32) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrca java.util.zip.CRC32 \l0x0052: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0054: IGET  (r5 I:java.util.zip.Adler32) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrcb java.util.zip.Adler32 \l0x0056: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0058: INVOKE  \l  (r3 I:ar.com.hjg.pngj.IdatSet)\l  (r4 I:java.util.zip.Checksum[])\l ar.com.hjg.pngj.IdatSet.updateCrcs(java.util.zip.Checksum[]):void type: VIRTUAL \l0x005b: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0074 \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0061: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0065: INVOKE  (r3 I:byte[]) = (r3 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.getUnfilteredRow():byte[] type: VIRTUAL \l0x0069: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x006b: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bytesPerRow int \l0x006d: ARITH  (r4 I:int) = (r4 I:int) + (r2 I:int) \l0x006e: INVOKE  \l  (r0 I:ar.com.hjg.pngj.IImageLine)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r1 I:int)\l  (r2 I:int)\l ar.com.hjg.pngj.IImageLine.readFromPngRaw(byte[], int, int, int):void type: INTERFACE \l0x0071: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLine) ar.com.hjg.pngj.IImageLine.endReadFromPngRaw():void type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|0x0074: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0076: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x007a: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.advanceToNextRow():int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x007e|0x007e: RETURN  (r0 I:ar.com.hjg.pngj.IImageLine) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007f|0x007f: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x0081: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0083: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0086: CONST_STR  (r2 I:java.lang.String) =  \"rows must be read in increasing order: \" \l0x0088: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008b: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x008e: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0092: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngjInputException)\l  (r7 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0095|0x0095: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0096|0x0096: IGET  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l}"];
Node_26 [shape=record,label="{26\:\ 0x0098|0x0098: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00ab \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x009c: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x009e: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLineSet) = \l  (r6 I:ar.com.hjg.pngj.PngReader)\l  (r1 I:boolean)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l ar.com.hjg.pngj.PngReader.createLineSet(boolean, int, int, int):ar.com.hjg.pngj.IImageLineSet type: VIRTUAL \l0x00a2: IPUT  \l  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>)\l  (r6 I:ar.com.hjg.pngj.PngReader)\l ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x00a4: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x00a6: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x00a8: INVOKE  \l  (r6 I:ar.com.hjg.pngj.PngReader)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l ar.com.hjg.pngj.PngReader.loadAllInterlaced(int, int, int):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00ab|0x00ab: IPUT  (r7 I:int), (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x00ad: IGET  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x00af: INVOKE  (r7 I:ar.com.hjg.pngj.IImageLine) = (r0 I:ar.com.hjg.pngj.IImageLineSet), (r7 I:int) ar.com.hjg.pngj.IImageLineSet.getImageLine(int):ar.com.hjg.pngj.IImageLine type: INTERFACE \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b3|0x00b3: RETURN  (r7 I:ar.com.hjg.pngj.IImageLine) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.IImageLine ar.com.hjg.pngj.PngReader.readRow((r6 'this' I:ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_25;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_15;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
}

