digraph "CFG forar.com.hjg.pngj.PngReader.readRow(I)Lar\/com\/hjg\/pngj\/IImageLine;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r6.chunkseq.firstChunksNotYetRead() == false) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|readFirstChunks()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r6.interlaced != false) goto L_0x0096\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r6.imlinesSet != null) goto L_0x001b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|r6.imlinesSet = createLineSet(true, 1, 0, 1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|ar.com.hjg.pngj.IImageLine r0 = r6.imlinesSet.getImageLine(r7)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|if (r7 != r6.rowNum) goto L_0x0026\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026}"];
Node_12 [shape=record,label="{12\:\ 0x0028|if (r7 \< r6.rowNum) goto L_0x007f\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|LOOP_START\lLOOP:0: B:13:0x002a\-\>B:21:0x0074\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|if (r6.rowNum \>= r7) goto L_0x007e\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|LOOP_START\lLOOP:1: B:15:0x002e\-\>B:17:0x003a\l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|if (r6.chunkseq.getIdatSet().isRowReady() != false) goto L_0x0042\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|LOOP_END\lLOOP:1: B:15:0x002e\-\>B:17:0x003a\l|r6.streamFeeder.feed(r6.chunkseq)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|r6.rowNum = r6.rowNum + 1\lar.com.hjg.pngj.IdatSet r3 = r6.chunkseq.getIdatSet()\ljava.util.zip.Checksum[] r4 = new java.util.zip.Checksum[]\{r6.idatCrca, r6.idatCrcb\}\lr3.updateCrcs(r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|if (r6.rowNum != r7) goto L_0x0074\l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|r0.readFromPngRaw(r6.chunkseq.getIdatSet().getUnfilteredRow(), r6.imgInfo.bytesPerRow + 1, 0, 1)\lr0.endReadFromPngRaw()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|LOOP_END\lLOOP:0: B:13:0x002a\-\>B:21:0x0074\l|r6.chunkseq.getIdatSet().advanceToNextRow()\l}"];
Node_22 [shape=record,label="{22\:\ 0x007e|RETURN\l|return r0\l}"];
Node_23 [shape=record,label="{23\:\ 0x007f|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"rows must be read in increasing order: \")\lr1.append(r7)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0095|throw new p004ar.com.hjg.pngj.PngjInputException(r1.toString())\l}"];
Node_25 [shape=record,label="{25\:\ 0x0096}"];
Node_26 [shape=record,label="{26\:\ 0x0098|if (r6.imlinesSet != null) goto L_0x00ab\l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|r6.imlinesSet = createLineSet(false, r6.imgInfo.rows, 0, 1)\lloadAllInterlaced(r6.imgInfo.rows, 0, 1)\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ab|r6.rowNum = r7\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b3|RETURN\l|return r6.imlinesSet.getImageLine(r7)\l}"];
Node_30 [shape=record,label="{30\:\ 0x007e|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0074|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0074|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.IImageLine ar.com.hjg.pngj.PngReader.readRow((r6v0 'this' ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_25;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_30;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_33;
Node_17 -> Node_15;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_32;
Node_20 -> Node_31;
Node_21 -> Node_13;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_30 -> Node_22;
Node_31 -> Node_21;
Node_32 -> Node_21;
Node_33 -> Node_18;
}

