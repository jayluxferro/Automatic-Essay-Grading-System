digraph "CFG forar.com.hjg.pngj.PngReader.readRows(III)Lar\/com\/hjg\/pngj\/IImageLineSet;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.firstChunksNotYetRead():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.readFirstChunks():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r7 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000f: IGET  (r7 I:int) = (r7 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x0011: ARITH  (r7 I:int) = (r7 I:int) \- (r8 I:int) \l0x0012: ARITH  (r7 I:int) = (r7 I:int) \/ (r9 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r9 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:32:0x00b4 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:32:0x00b4 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00b4 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: ARITH  (r1 I:int) = (r7 I:int) * (r9 I:int) \l0x001c: ARITH  (r1 I:int) = (r1 I:int) + (r8 I:int) \l0x001d: IGET  (r2 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x001f: IGET  (r2 I:int) = (r2 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:32:0x00b4 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r1 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:30:0x00ac \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: INVOKE  (r2 I:ar.com.hjg.pngj.IImageLineSet) = \l  (r6 I:ar.com.hjg.pngj.PngReader)\l  (r1 I:boolean)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l ar.com.hjg.pngj.PngReader.createLineSet(boolean, int, int, int):ar.com.hjg.pngj.IImageLineSet type: VIRTUAL \l0x002c: IPUT  \l  (r2 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>)\l  (r6 I:ar.com.hjg.pngj.PngReader)\l ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x002e: IGET  (r2 I:boolean) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.interlaced boolean \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x009a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: ARITH  (r3 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x009d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IGET  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0039: INVOKE  (r2 I:ar.com.hjg.pngj.IdatSet) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x003d: INVOKE  (r2 I:boolean) = (r2 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.isRowReady():boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: IGET  (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.streamFeeder ar.com.hjg.pngj.BufferedStreamFeeder \l0x0045: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0047: INVOKE  \l  (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l  (r3 I:ar.com.hjg.pngj.IBytesConsumer)\l ar.com.hjg.pngj.BufferedStreamFeeder.feed(ar.com.hjg.pngj.IBytesConsumer):int type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: IGET  (r2 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x004d: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x004e: IPUT  (r2 I:int), (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x0050: IGET  (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0052: INVOKE  (r2 I:ar.com.hjg.pngj.IdatSet) = (r2 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0056: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0057: NEW_ARRAY  (r3 I:java.util.zip.Checksum[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.util.zip.Checksum[] \l0x0059: IGET  (r4 I:java.util.zip.CRC32) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrca java.util.zip.CRC32 \l0x005b: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x005d: IGET  (r4 I:java.util.zip.Adler32) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrcb java.util.zip.Adler32 \l0x005f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0061: INVOKE  \l  (r2 I:ar.com.hjg.pngj.IdatSet)\l  (r3 I:java.util.zip.Checksum[])\l ar.com.hjg.pngj.IdatSet.updateCrcs(java.util.zip.Checksum[]):void type: VIRTUAL \l0x0064: IGET  (r2 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x0066: ARITH  (r2 I:int) = (r2 I:int) \- (r8 I:int) \l0x0067: ARITH  (r2 I:int) = (r2 I:int) \/ (r9 I:int) \l0x0068: IGET  (r3 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_22 [shape=record,label="{22\:\ 0x006a|0x006a: IF  (r3 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:26:0x0090 \l}"];
Node_23 [shape=record,label="{23\:\ 0x006c|0x006c: ARITH  (r3 I:int) = (r9 I:int) * (r2 I:int) \l0x006e: ARITH  (r3 I:int) = (r3 I:int) + (r8 I:int) \l0x006f: IGET  (r4 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0071|0x0071: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0090 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0073|0x0073: IGET  (r3 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x0075: IGET  (r4 I:int) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.rowNum int \l0x0077: INVOKE  (r3 I:ar.com.hjg.pngj.IImageLine) = (r3 I:ar.com.hjg.pngj.IImageLineSet), (r4 I:int) ar.com.hjg.pngj.IImageLineSet.getImageLine(int):ar.com.hjg.pngj.IImageLine type: INTERFACE \l0x007b: IGET  (r4 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x007d: INVOKE  (r4 I:ar.com.hjg.pngj.IdatSet) = (r4 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0081: INVOKE  (r4 I:byte[]) = (r4 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.getUnfilteredRow():byte[] type: VIRTUAL \l0x0085: IGET  (r5 I:ar.com.hjg.pngj.ImageInfo) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0087: IGET  (r5 I:int) = (r5 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bytesPerRow int \l0x0089: ARITH  (r5 I:int) = (r5 I:int) + (r0 I:int) \l0x008a: INVOKE  \l  (r3 I:ar.com.hjg.pngj.IImageLine)\l  (r4 I:byte[])\l  (r5 I:int)\l  (r1 I:int)\l  (r0 I:int)\l ar.com.hjg.pngj.IImageLine.readFromPngRaw(byte[], int, int, int):void type: INTERFACE \l0x008d: INVOKE  (r3 I:ar.com.hjg.pngj.IImageLine) ar.com.hjg.pngj.IImageLine.endReadFromPngRaw():void type: INTERFACE \l}"];
Node_26 [shape=record,label="{26\:\ 0x0090|0x0090: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0092: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0096: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.advanceToNextRow():int type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: INVOKE  \l  (r6 I:ar.com.hjg.pngj.PngReader)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l ar.com.hjg.pngj.PngReader.loadAllInterlaced(int, int, int):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x009d|0x009d: IGET  (r7 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x009f: INVOKE  (r7 I:ar.com.hjg.pngj.IdatSet) = (r7 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x00a3: INVOKE  (r7 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.done():void type: VIRTUAL \l0x00a6: INVOKE  (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.end():void type: VIRTUAL \l0x00a9: IGET  (r7 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r6 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ab|0x00ab: RETURN  \l  (r7 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>)\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ac|0x00ac: NEW_INSTANCE  (r7 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x00ae: CONST_STR  (r8 I:java.lang.String) =  \"readRows cannot be mixed with readRow\" \l0x00b0: INVOKE  \l  (r7 I:ar.com.hjg.pngj.PngjInputException)\l  (r8 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b3|0x00b3: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b4|0x00b4: NEW_INSTANCE  (r7 I:ar.com.hjg.pngj.PngjInputException) =  ar.com.hjg.pngj.PngjInputException \l0x00b6: CONST_STR  (r8 I:java.lang.String) =  \"bad args\" \l0x00b8: INVOKE  \l  (r7 I:ar.com.hjg.pngj.PngjInputException)\l  (r8 I:java.lang.String)\l ar.com.hjg.pngj.PngjInputException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x00bb|0x00bb: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\> ar.com.hjg.pngj.PngReader.readRows((r6 'this' I:ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(III), Lar\/com\/hjg\/pngj\/IImageLineSet\<, +, Lar\/com\/hjg\/pngj\/IImageLine;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_32;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_32;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_32;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_32;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_30;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_27;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_28;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_18;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_32 -> Node_33;
}

