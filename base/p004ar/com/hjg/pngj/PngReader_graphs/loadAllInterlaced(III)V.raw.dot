digraph "CFG forar.com.hjg.pngj.PngReader.loadAllInterlaced(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0002: INVOKE  (r0 I:ar.com.hjg.pngj.IdatSet) = (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x000a: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x000e: INVOKE  (r3 I:boolean) = (r3 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.isRowReady():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r3 I:ar.com.hjg.pngj.BufferedStreamFeeder) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.streamFeeder ar.com.hjg.pngj.BufferedStreamFeeder \l0x0016: IGET  (r4 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0018: INVOKE  \l  (r3 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l  (r4 I:ar.com.hjg.pngj.IBytesConsumer)\l ar.com.hjg.pngj.BufferedStreamFeeder.feed(ar.com.hjg.pngj.IBytesConsumer):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x001e: INVOKE  (r3 I:ar.com.hjg.pngj.IdatSet) = (r3 I:ar.com.hjg.pngj.ChunkSeqReaderPng) ar.com.hjg.pngj.ChunkSeqReaderPng.getIdatSet():ar.com.hjg.pngj.IdatSet type: VIRTUAL \l0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0023: NEW_ARRAY  (r4 I:java.util.zip.Checksum[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.util.zip.Checksum[] \l0x0025: IGET  (r5 I:java.util.zip.CRC32) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrca java.util.zip.CRC32 \l0x0027: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0029: IGET  (r5 I:java.util.zip.Adler32) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.idatCrcb java.util.zip.Adler32 \l0x002b: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002c: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x002e: INVOKE  \l  (r3 I:ar.com.hjg.pngj.IdatSet)\l  (r4 I:java.util.zip.Checksum[])\l ar.com.hjg.pngj.IdatSet.updateCrcs(java.util.zip.Checksum[]):void type: VIRTUAL \l0x0031: IGET  (r3 I:ar.com.hjg.pngj.RowInfo) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.rowinfo ar.com.hjg.pngj.RowInfo \l0x0033: IGET  (r3 I:int) = (r3 I:ar.com.hjg.pngj.RowInfo) ar.com.hjg.pngj.RowInfo.rowNreal int \l0x0035: ARITH  (r4 I:int) = (r3 I:int) \- (r10 I:int) \l0x0037: ARITH  (r4 I:int) = (r4 I:int) % (r11 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|0x003b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: IGET  (r4 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x0040: INVOKE  (r3 I:ar.com.hjg.pngj.IImageLine) = (r4 I:ar.com.hjg.pngj.IImageLineSet), (r3 I:int) ar.com.hjg.pngj.IImageLineSet.getImageLine(int):ar.com.hjg.pngj.IImageLine type: INTERFACE \l0x0044: INVOKE  (r4 I:byte[]) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.getUnfilteredRow():byte[] type: VIRTUAL \l0x0048: IGET  (r5 I:ar.com.hjg.pngj.RowInfo) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.rowinfo ar.com.hjg.pngj.RowInfo \l0x004a: IGET  (r5 I:int) = (r5 I:ar.com.hjg.pngj.RowInfo) ar.com.hjg.pngj.RowInfo.buflen int \l0x004c: IGET  (r6 I:ar.com.hjg.pngj.RowInfo) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.rowinfo ar.com.hjg.pngj.RowInfo \l0x004e: IGET  (r6 I:int) = (r6 I:ar.com.hjg.pngj.RowInfo) ar.com.hjg.pngj.RowInfo.oX int \l0x0050: IGET  (r7 I:ar.com.hjg.pngj.RowInfo) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.rowinfo ar.com.hjg.pngj.RowInfo \l0x0052: IGET  (r7 I:int) = (r7 I:ar.com.hjg.pngj.RowInfo) ar.com.hjg.pngj.RowInfo.dX int \l0x0054: INVOKE  \l  (r3 I:ar.com.hjg.pngj.IImageLine)\l  (r4 I:byte[])\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l ar.com.hjg.pngj.IImageLine.readFromPngRaw(byte[], int, int, int):void type: INTERFACE \l0x0057: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: INVOKE  (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.advanceToNextRow():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x005c|0x005c: IF  (r2 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x005e|0x005e: INVOKE  (r3 I:boolean) = (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.isDone():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: INVOKE  (r0 I:ar.com.hjg.pngj.IdatSet) ar.com.hjg.pngj.IdatSet.done():void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0067|0x0067: IF  (r1 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:17:0x0076 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0069|0x0069: IGET  (r0 I:ar.com.hjg.pngj.IImageLineSet\<? extends ar.com.hjg.pngj.IImageLine\>) = (r8 I:ar.com.hjg.pngj.PngReader) ar.com.hjg.pngj.PngReader.imlinesSet ar.com.hjg.pngj.IImageLineSet \l0x006b: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLine) = (r0 I:ar.com.hjg.pngj.IImageLineSet), (r10 I:int) ar.com.hjg.pngj.IImageLineSet.getImageLine(int):ar.com.hjg.pngj.IImageLine type: INTERFACE \l0x006f: INVOKE  (r0 I:ar.com.hjg.pngj.IImageLine) ar.com.hjg.pngj.IImageLine.endReadFromPngRaw():void type: INTERFACE \l0x0072: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0074: ARITH  (r10 I:int) = (r10 I:int) + (r11 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0076|0x0076: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.PngReader.loadAllInterlaced((r8 'this' I:ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_15;
}

