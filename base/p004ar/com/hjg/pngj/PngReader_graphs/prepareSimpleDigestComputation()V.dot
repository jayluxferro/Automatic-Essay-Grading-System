digraph "CFG forar.com.hjg.pngj.PngReader.prepareSimpleDigestComputation()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.idatCrca != null) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r2.idatCrca = new java.util.zip.CRC32()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|r2.idatCrca.reset()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r2.idatCrcb != null) goto L_0x001d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|r2.idatCrcb = new java.util.zip.Adler32()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r2.idatCrcb.reset()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|r2.idatCrca.update((byte) r2.imgInfo.rows)\lr2.idatCrca.update((byte) (r2.imgInfo.rows \>\> 8))\lr2.idatCrca.update((byte) (r2.imgInfo.rows \>\> 16))\lr2.idatCrca.update((byte) r2.imgInfo.cols)\lr2.idatCrca.update((byte) (r2.imgInfo.cols \>\> 8))\lr2.idatCrca.update((byte) (r2.imgInfo.cols \>\> 16))\lr2.idatCrca.update((byte) r2.imgInfo.channels)\lr2.idatCrca.update((byte) r2.imgInfo.bitDepth)\ljava.util.zip.CRC32 r0 = r2.idatCrca\l}"];
Node_9 [shape=record,label="{9\:\ 0x0080|if (r2.imgInfo.indexed == false) goto L_0x0085\l}"];
Node_10 [shape=record,label="{10\:\ 0x0082|r1 = 10\l}"];
Node_11 [shape=record,label="{11\:\ 0x0085|r1 = 20\l}"];
Node_12 [shape=record,label="{12\:\ 0x0087|PHI: r1 \l  PHI: (r1v30 int) = (r1v41 int), (r1v42 int) binds: [B:11:0x0085, B:10:0x0082] A[DONT_GENERATE, DONT_INLINE]\l|r0.update((byte) r1)\lr2.idatCrcb.update((byte) r2.imgInfo.bytesPerRow)\lr2.idatCrcb.update((byte) r2.imgInfo.channels)\lr2.idatCrcb.update((byte) r2.imgInfo.rows)\l}"];
Node_13 [shape=record,label="{13\:\ 0x00a9|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngReader.prepareSimpleDigestComputation((r2v0 'this' ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

