digraph "CFG forar.com.hjg.pngj.PngReader.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x000a \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|Catch:\{ Exception \-\> 0x000a \}\l|if (r4.chunkseq == null) goto L_0x0025     \/\/ Catch:\{ Exception \-\> 0x000a \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|Catch:\{ Exception \-\> 0x000a \}\l|r4.chunkseq.close()     \/\/ Catch:\{ Exception \-\> 0x000a \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|ExcHandler: Exception (r0v2 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r0 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|java.util.logging.Logger r1 = p004ar.com.hjg.pngj.PngHelperInternal.LOGGER\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"error closing chunk sequence:\")\lr2.append(r0.getMessage())\lr1.warning(r2.toString())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025}"];
Node_7 [shape=record,label="{7\:\ 0x0027|if (r4.streamFeeder == null) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|r4.streamFeeder.close()\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngReader.close((r4v0 'this' ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
}

