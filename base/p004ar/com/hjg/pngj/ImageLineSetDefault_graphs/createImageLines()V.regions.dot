digraph "CFG forar.com.hjg.pngj.ImageLineSetDefault.createImageLines()V" {
subgraph cluster_Region_1283339263 {
label = "R(1:(2:(2:2|8)|(2:3|(1:6))))";
node [shape=record,color=blue];
subgraph cluster_Region_404579611 {
label = "R(2:(2:2|8)|(2:3|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_869303976 {
label = "IF [B:1:0x0002] THEN: R(2:2|8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.singleCursor == true) goto L_0x0004\l}"];
subgraph cluster_Region_1470820327 {
label = "R(2:2|8)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r3.imageLine = createImageLine()\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_776333108 {
label = "R(2:3|(1:6))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|r3.imageLines = new java.util.ArrayList()\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_2074202387 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r0 \< r3.nlines) goto L_0x0017\l}"];
subgraph cluster_Region_121239407 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|LOOP_END\lLOOP:0: B:4:0x0013\-\>B:6:0x0017\l|r3.imageLines.add(createImageLine())\lr0++\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:3:0x000b, B:6:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0013\-\>B:6:0x0017\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0023|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void ar.com.hjg.pngj.ImageLineSetDefault.createImageLines((r3v0 'this' ar.com.hjg.pngj.ImageLineSetDefault A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_4;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_7 -> Node_9;
}

