digraph "CFG forar.com.hjg.pngj.ImageLineSetDefault.\<init\>(Lar\/com\/hjg\/pngj\/ImageInfo;ZIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: IPUT  (r3 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.currentRow int \l0x0006: IPUT  \l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l  (r0 I:ar.com.hjg.pngj.ImageLineSetDefault)\l ar.com.hjg.pngj.ImageLineSetDefault.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0008: IPUT  (r2 I:boolean), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.singleCursor boolean \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IPUT  (r4 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.nlines int \l0x0010: IPUT  (r3 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.offset int \l0x0012: IPUT  (r4 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.step int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x0017: IPUT  (r1 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.nlines int \l0x0019: IPUT  (r3 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.offset int \l0x001b: IPUT  (r4 I:int), (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.step int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: INVOKE  (r0 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.createImageLines():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineSetDefault.\<init\>((r0 'this' I:ar.com.hjg.pngj.ImageLineSetDefault A[IMMUTABLE_TYPE, THIS]), (r1 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

