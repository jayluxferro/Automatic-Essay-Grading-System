digraph "CFG forar.com.hjg.pngj.ImageLineSetDefault.hasImageLine(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.singleCursor boolean \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r3 I:ar.com.hjg.pngj.ImageLineSetDefault) ar.com.hjg.pngj.ImageLineSetDefault.currentRow int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r4 I:int) = (r3 I:ar.com.hjg.pngj.ImageLineSetDefault), (r4 I:int) ar.com.hjg.pngj.ImageLineSetDefault.imageRowToMatrixRowStrict(int):int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.ImageLineSetDefault.hasImageLine((r3 'this' I:ar.com.hjg.pngj.ImageLineSetDefault A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_4[style=dashed];
}

