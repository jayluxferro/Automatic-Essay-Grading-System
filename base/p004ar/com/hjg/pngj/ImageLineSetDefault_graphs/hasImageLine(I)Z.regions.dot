digraph "CFG forar.com.hjg.pngj.ImageLineSetDefault.hasImageLine(I)Z" {
subgraph cluster_Region_1096536183 {
label = "R(1:(2:(1:3)|(1:(1:(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_388648857 {
label = "R(2:(1:3)|(1:(1:(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_885432339 {
label = "IF [B:1:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r3.singleCursor == true) goto L_0x0006\l}"];
subgraph cluster_Region_1900860034 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return r3.currentRow == r4\l}"];
}
}
subgraph cluster_Region_1854631092 {
label = "R(1:(1:(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_723038331 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_719280947 {
label = "IF [B:6:0x0010] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|if (imageRowToMatrixRowStrict(r4) \< 0) goto L_?\l}"];
subgraph cluster_Region_1024480296 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.ImageLineSetDefault.hasImageLine((r3v0 'this' ar.com.hjg.pngj.ImageLineSetDefault A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lRemoved duplicated region for block: B:4:0x000a A[RETURN, SYNTHETIC]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_6 -> Node_4[style=dashed];
Node_6 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
}

