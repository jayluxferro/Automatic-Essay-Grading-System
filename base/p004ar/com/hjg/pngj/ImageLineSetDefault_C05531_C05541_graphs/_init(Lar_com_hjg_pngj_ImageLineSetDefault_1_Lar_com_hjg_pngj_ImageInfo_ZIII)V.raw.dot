digraph "CFG forar.com.hjg.pngj.ImageLineSetDefault.1.1.\<init\>(Lar\/com\/hjg\/pngj\/ImageLineSetDefault$1;Lar\/com\/hjg\/pngj\/ImageInfo;ZIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r7 I:ar.com.hjg.pngj.ImageLineSetDefault$1)\l  (r6 I:ar.com.hjg.pngj.ImageLineSetDefault$1$1)\l ar.com.hjg.pngj.ImageLineSetDefault.1.1.this$0 ar.com.hjg.pngj.ImageLineSetDefault$1 \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  \l  (r0 I:ar.com.hjg.pngj.ImageLineSetDefault)\l  (r1 I:ar.com.hjg.pngj.ImageInfo)\l  (r2 I:boolean)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l ar.com.hjg.pngj.ImageLineSetDefault.\<init\>(ar.com.hjg.pngj.ImageInfo, boolean, int, int, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{void ar.com.hjg.pngj.ImageLineSetDefault.1.1.\<init\>((r6 'this' I:ar.com.hjg.pngj.ImageLineSetDefault$1$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:ar.com.hjg.pngj.ImageLineSetDefault$1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:ar.com.hjg.pngj.ImageInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | ANONYMOUS_CONSTRUCTOR\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

