digraph "CFG forar.com.hjg.pngj.ChunkReader.\<init\>(ILjava\/lang\/String;JLar\/com\/hjg\/pngj\/ChunkReader$ChunkReaderMode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.read int \l0x0006: IPUT  (r0 I:int), (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.crcn int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000e: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IPUT  \l  (r9 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode)\l  (r4 I:ar.com.hjg.pngj.ChunkReader)\l ar.com.hjg.pngj.ChunkReader.mode ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l0x0015: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) =  ar.com.hjg.pngj.chunks.ChunkRaw \l0x0017: SGET  (r2 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) =  ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l0x0019: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r2 I:boolean)\l ar.com.hjg.pngj.chunks.ChunkRaw.\<init\>(int, java.lang.String, boolean):void type: DIRECT \l0x0022: IPUT  \l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r4 I:ar.com.hjg.pngj.ChunkReader)\l ar.com.hjg.pngj.ChunkReader.chunkRaw ar.com.hjg.pngj.chunks.ChunkRaw \l0x0024: IGET  (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.chunkRaw ar.com.hjg.pngj.chunks.ChunkRaw \l0x0026: INVOKE  (r5 I:ar.com.hjg.pngj.chunks.ChunkRaw), (r7 I:long) ar.com.hjg.pngj.chunks.ChunkRaw.setOffset(long):void type: VIRTUAL \l0x0029: SGET  (r5 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode) =  ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.SKIP ar.com.hjg.pngj.ChunkReader$ChunkReaderMode \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IPUT  (r0 I:boolean), (r4 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.crcCheck boolean \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: NEW_INSTANCE  (r5 I:ar.com.hjg.pngj.PngjExceptionInternal) =  ar.com.hjg.pngj.PngjExceptionInternal \l0x0034: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0036: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0039: CONST_STR  (r7 I:java.lang.String) =  \"Bad chunk paramenters: \" \l0x003b: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r6 I:java.lang.StringBuilder), (r9 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0041: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0045: INVOKE  \l  (r5 I:ar.com.hjg.pngj.PngjExceptionInternal)\l  (r6 I:java.lang.String)\l ar.com.hjg.pngj.PngjExceptionInternal.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkReader.\<init\>((r4 'this' I:ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:ar.com.hjg.pngj.ChunkReader$ChunkReaderMode A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

