digraph "CFG forar.com.hjg.pngj.ChunkReader.feedBytes([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r8 != 0) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r8 \< 0) goto L_0x00b4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r5.read != 0) goto L_0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b}"];
Node_7 [shape=record,label="{7\:\ 0x000d|if (r5.crcn != 0) goto L_0x001c\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f}"];
Node_9 [shape=record,label="{9\:\ 0x0011|if (r5.crcCheck == false) goto L_0x001c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|r5.chunkRaw.updateCrc(r5.chunkRaw.idbytes, 0, 4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|int r1 = r5.chunkRaw.len \- r5.read\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|if (r1 \<= r8) goto L_0x0026\l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|r1 = r8\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|PHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v6 int) binds: [B:12:0x0023, B:13:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \> 0) goto L_0x002c\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028}"];
Node_16 [shape=record,label="{16\:\ 0x002a|if (r5.crcn != 0) goto L_0x0067\l}"];
Node_17 [shape=record,label="{17\:\ 0x002c}"];
Node_18 [shape=record,label="{18\:\ 0x002e|if (r5.crcCheck == false) goto L_0x003d\l}"];
Node_19 [shape=record,label="{19\:\ 0x0030}"];
Node_20 [shape=record,label="{20\:\ 0x0034|if (r5.mode == p004ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER) goto L_0x003d\l}"];
Node_21 [shape=record,label="{21\:\ 0x0036|if (r1 \<= 0) goto L_0x003d\l}"];
Node_22 [shape=record,label="{22\:\ 0x0038|r5.chunkRaw.updateCrc(r6, r7, r1)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003d}"];
Node_24 [shape=record,label="{24\:\ 0x0041|if (r5.mode != p004ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER) goto L_0x0055\l}"];
Node_25 [shape=record,label="{25\:\ 0x0043}"];
Node_26 [shape=record,label="{26\:\ 0x0047|if (r5.chunkRaw.data == r6) goto L_0x0060\l}"];
Node_27 [shape=record,label="{27\:\ 0x0049|if (r1 \<= 0) goto L_0x0060\l}"];
Node_28 [shape=record,label="{28\:\ 0x004b|java.lang.System.arraycopy(r6, r7, r5.chunkRaw.data, r5.read, r1)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0055}"];
Node_30 [shape=record,label="{30\:\ 0x0059|if (r5.mode != p004ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.PROCESS) goto L_0x0060\l}"];
Node_31 [shape=record,label="{31\:\ 0x005b|processData(r5.read, r6, r7, r1)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0060|r5.read = r5.read + r1\lint r7 = r7 + r1\lint r8 = r8 \- r1\l}"];
Node_33 [shape=record,label="{33\:\ 0x0067|PHI: r7 r8 \l  PHI: (r7v2 int) = (r7v6 int), (r7v0 int) binds: [B:32:0x0060, B:16:0x002a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 int) = (r8v6 int), (r8v0 int) binds: [B:32:0x0060, B:16:0x002a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x006d|if (r5.read != r5.chunkRaw.len) goto L_0x00b1\l}"];
Node_35 [shape=record,label="{35\:\ 0x006f|int r3 = 4 \- r5.crcn\l}"];
Node_36 [shape=record,label="{36\:\ 0x0073|if (r3 \<= r8) goto L_0x0076\l}"];
Node_37 [shape=record,label="{37\:\ 0x0076|r8 = r3\l}"];
Node_38 [shape=record,label="{38\:\ 0x0077|PHI: r8 \l  PHI: (r8v4 int) = (r8v1 int), (r8v5 int) binds: [B:36:0x0073, B:37:0x0076] A[DONT_GENERATE, DONT_INLINE]\l|if (r8 \<= 0) goto L_0x00b2\l}"];
Node_39 [shape=record,label="{39\:\ 0x0079}"];
Node_40 [shape=record,label="{40\:\ 0x007d|if (r6 == r5.chunkRaw.crcval) goto L_0x0088\l}"];
Node_41 [shape=record,label="{41\:\ 0x007f|java.lang.System.arraycopy(r6, r7, r5.chunkRaw.crcval, r5.crcn, r8)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0088|r5.crcn = r5.crcn + r8\l}"];
Node_43 [shape=record,label="{43\:\ 0x008f|if (r5.crcn != 4) goto L_0x00b2\l}"];
Node_44 [shape=record,label="{44\:\ 0x0091}"];
Node_45 [shape=record,label="{45\:\ 0x0093|if (r5.crcCheck == false) goto L_0x00ad\l}"];
Node_46 [shape=record,label="{46\:\ 0x0095}"];
Node_47 [shape=record,label="{47\:\ 0x0099|if (r5.mode != p004ar.com.hjg.pngj.ChunkReader.ChunkReaderMode.BUFFER) goto L_0x00a8\l}"];
Node_48 [shape=record,label="{48\:\ 0x009b|r5.chunkRaw.updateCrc(r5.chunkRaw.data, 0, r5.chunkRaw.len)\l}"];
Node_49 [shape=record,label="{49\:\ 0x00a8|r5.chunkRaw.checkCrc()\l}"];
Node_50 [shape=record,label="{50\:\ 0x00ad|chunkDone()\l}"];
Node_51 [shape=record,label="{51\:\ 0x00b1|r8 = 0\l}"];
Node_52 [shape=record,label="{52\:\ 0x00b2|PHI: r8 \l  PHI: (r8v2 int) = (r8v3 int), (r8v4 int), (r8v4 int), (r8v4 int) binds: [B:51:0x00b1, B:38:0x0077, B:43:0x008f, B:50:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_53 [shape=record,label="{53\:\ 0x00b3|RETURN\l|return r1 + r8\l}"];
Node_54 [shape=record,label="{54\:\ 0x00b4}"];
Node_55 [shape=record,label="{55\:\ 0x00bb|throw new p004ar.com.hjg.pngj.PngjException(\"negative length??\")\l}"];
MethodNode[shape=record,label="{public final int ar.com.hjg.pngj.ChunkReader.feedBytes((r5v0 'this' ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, THIS]), (r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_54;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_33;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_32;
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_51;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_36 -> Node_38[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_52;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_52;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_54 -> Node_55;
}

