digraph "CFG forar.com.hjg.pngj.ChunkReader.setCrcCheck(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r1 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.read int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = (r1 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.crcCheck boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: NEW_INSTANCE  (r2 I:ar.com.hjg.pngj.PngjException) =  ar.com.hjg.pngj.PngjException \l0x000d: CONST_STR  (r0 I:java.lang.String) =  \"too late!\" \l0x000f: INVOKE  \l  (r2 I:ar.com.hjg.pngj.PngjException)\l  (r0 I:java.lang.String)\l ar.com.hjg.pngj.PngjException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IPUT  (r2 I:boolean), (r1 I:ar.com.hjg.pngj.ChunkReader) ar.com.hjg.pngj.ChunkReader.crcCheck boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ChunkReader.setCrcCheck((r1 'this' I:ar.com.hjg.pngj.ChunkReader A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
}

