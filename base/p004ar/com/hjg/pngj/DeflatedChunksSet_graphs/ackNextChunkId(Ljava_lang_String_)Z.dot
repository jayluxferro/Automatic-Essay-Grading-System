digraph "CFG forar.com.hjg.pngj.DeflatedChunksSet.ackNextChunkId(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3.state.isTerminated() == false) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r4.equals(r3.chunkid) == false) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|RETURN\l|return true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x0018|if (allowOtherChunksInBetween(r4) != false) goto L_0x0052\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a}"];
Node_9 [shape=record,label="{9\:\ 0x0020|if (r3.state.isDone() == false) goto L_0x002c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022}"];
Node_11 [shape=record,label="{11\:\ 0x0026|if (isTerminated() != false) goto L_0x002b\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|terminate()\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unexpected chunk \")\lr1.append(r4)\lr1.append(\" while \")\lr1.append(r3.chunkid)\lr1.append(\" set is not done\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|throw new p004ar.com.hjg.pngj.PngjInputException(r1.toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean ar.com.hjg.pngj.DeflatedChunksSet.ackNextChunkId((r3v0 'this' ar.com.hjg.pngj.DeflatedChunksSet A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

