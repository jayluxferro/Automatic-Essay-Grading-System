digraph "CFG forar.com.hjg.pngj.DeflatedChunkReader.processData(I[BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r2 I:ar.com.hjg.pngj.DeflatedChunksSet) = (r1 I:ar.com.hjg.pngj.DeflatedChunkReader) ar.com.hjg.pngj.DeflatedChunkReader.deflatedChunksSet ar.com.hjg.pngj.DeflatedChunksSet \l0x0004: INVOKE  \l  (r2 I:ar.com.hjg.pngj.DeflatedChunksSet)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r5 I:int)\l ar.com.hjg.pngj.DeflatedChunksSet.processBytes(byte[], int, int):void type: VIRTUAL \l0x0007: IGET  (r2 I:boolean) = (r1 I:ar.com.hjg.pngj.DeflatedChunkReader) ar.com.hjg.pngj.DeflatedChunkReader.alsoBuffer boolean \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r2 I:ar.com.hjg.pngj.chunks.ChunkRaw) = (r1 I:ar.com.hjg.pngj.DeflatedChunkReader) ar.com.hjg.pngj.DeflatedChunkReader.getChunkRaw():ar.com.hjg.pngj.chunks.ChunkRaw type: VIRTUAL \l0x000f: IGET  (r2 I:byte[]) = (r2 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l0x0011: IGET  (r0 I:int) = (r1 I:ar.com.hjg.pngj.DeflatedChunkReader) ar.com.hjg.pngj.DeflatedChunkReader.read int \l0x0013: INVOKE  \l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.DeflatedChunkReader.processData((r1 'this' I:ar.com.hjg.pngj.DeflatedChunkReader A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
}

