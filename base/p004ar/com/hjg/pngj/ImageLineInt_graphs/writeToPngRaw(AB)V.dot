digraph "CFG forar.com.hjg.pngj.ImageLineInt.writeToPngRaw([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\lr10[0] = (byte) r9.filterType.val\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r9.imgInfo.bitDepth != 8) goto L_0x001f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v0 int), (r1v6 int) binds: [B:1:0x000e, B:4:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0010\-\>B:4:0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r1 \>= r9.size) goto L_0x006a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|LOOP_END\lLOOP:0: B:2:0x0010\-\>B:4:0x0014\l|int r0 = r1 + 1\lr10[r0] = (byte) r9.scanline[r1]\lr1 = r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|r4 = 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|if (r9.imgInfo.bitDepth != 16) goto L_0x0044\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|LOOP_START\lPHI: r1 r4 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:6:0x0026, B:9:0x002c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:6:0x0026, B:9:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0028\-\>B:9:0x002c\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|if (r1 \>= r9.size) goto L_0x006a\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|LOOP_END\lLOOP:1: B:7:0x0028\-\>B:9:0x002c\l|int r0 = r4 + 1\lr10[r4] = (byte) (r9.scanline[r1] \>\> 8)\lint r4 = r0 + 1\lr10[r0] = (byte) (r9.scanline[r1] & 255)\lint r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|int r0 = r9.imgInfo.bitDepth\lint r2 = 8 \- r0\lr6 = r2\lr3 = 0\lr5 = 0\lr7 = 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|LOOP_START\lPHI: r3 r5 r6 r7 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:10:0x0044, B:18:0x0067] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v0 int), (r5v3 int) binds: [B:10:0x0044, B:18:0x0067] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:10:0x0044, B:18:0x0067] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:10:0x0044, B:18:0x0067] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:11:0x004d\-\>B:18:0x0067\l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|if (r3 \>= r9.size) goto L_0x006a\l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|r5 = r5 \| (r9.scanline[r3] \<\< r6)\lint r6 = r6 \- r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|if (r6 \< 0) goto L_0x005f\l}"];
Node_15 [shape=record,label="{15\:\ 0x005a}"];
Node_16 [shape=record,label="{16\:\ 0x005d|if (r3 != (r9.size \- 1)) goto L_0x0067\l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|r10[r7] = (byte) r5\lr7 = r7 + 1\lr5 = 0\lr6 = r2\l}"];
Node_18 [shape=record,label="{18\:\ 0x0067|LOOP_END\lPHI: r5 r6 r7 \l  PHI: (r5v3 int) = (r5v5 int), (r5v2 int) binds: [B:22:0x0067, B:23:0x0067] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 int) = (r6v5 int), (r6v2 int) binds: [B:22:0x0067, B:23:0x0067] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v2 int) = (r7v3 int), (r7v1 int) binds: [B:22:0x0067, B:23:0x0067] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:11:0x004d\-\>B:18:0x0067\l|int r3 = r3 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0067|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0067|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineInt.writeToPngRaw((r9v0 'this' ar.com.hjg.pngj.ImageLineInt A[IMMUTABLE_TYPE, THIS]), (r10v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_22;
Node_18 -> Node_11;
Node_19 -> Node_24;
Node_20 -> Node_25;
Node_21 -> Node_26;
Node_22 -> Node_18;
Node_23 -> Node_18;
}

