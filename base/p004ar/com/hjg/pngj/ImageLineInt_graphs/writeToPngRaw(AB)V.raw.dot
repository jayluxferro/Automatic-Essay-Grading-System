digraph "CFG forar.com.hjg.pngj.ImageLineInt.writeToPngRaw([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:ar.com.hjg.pngj.FilterType) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.filterType ar.com.hjg.pngj.FilterType \l0x0002: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.FilterType) ar.com.hjg.pngj.FilterType.val int \l0x0004: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x0008: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000a: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.size int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r1 I:int) + (1 int) \l0x0016: IGET  (r2 I:int[]) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x0018: AGET  (r1 I:?[int, float]) = (r2 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001a: CAST  (r1 I:byte) = (byte) (r1 I:int) \l0x001b: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x001d: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0021: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0023: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0025: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IGET  (r0 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.size int \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: ARITH  (r0 I:int) = (r4 I:int) + (1 int) \l0x002e: IGET  (r3 I:int[]) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x0030: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0032: ARITH  (r3 I:int) = (r3 I:int) \>\> (r2 I:int) \l0x0033: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0034: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0036: ARITH  (r4 I:int) = (r0 I:int) + (1 int) \l0x0038: IGET  (r3 I:int[]) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x003a: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x003c: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x003e: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x003f: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:byte A[IMMUTABLE_TYPE])\l \l0x0041: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: IGET  (r0 I:ar.com.hjg.pngj.ImageInfo) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0046: IGET  (r0 I:int) = (r0 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.bitDepth int \l0x0048: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x0049: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004c: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: IGET  (r8 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.size int \l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|0x004f: IF  (r3 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: IGET  (r8 I:int[]) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.scanline int[] \l0x0053: AGET  (r8 I:?[int, float]) = (r8 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0055: ARITH  (r8 I:int) = (r8 I:int) \<\< (r6 I:int) \l0x0056: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r8 I:?[int, boolean, short, byte, char]) \l0x0057: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|0x0058: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x005f \l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|0x005a: IGET  (r8 I:int) = (r9 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.size int \l0x005c: ARITH  (r8 I:int) = (r8 I:int) \- (r4 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|0x005d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0067 \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: ARITH  (r6 I:int) = (r7 I:int) + (1 int) \l0x0061: CAST  (r5 I:byte) = (byte) (r5 I:int) \l0x0062: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0064: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0065: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0066: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0067|0x0067: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.ImageLineInt.writeToPngRaw((r9 'this' I:ar.com.hjg.pngj.ImageLineInt A[IMMUTABLE_TYPE, THIS]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_11;
}

