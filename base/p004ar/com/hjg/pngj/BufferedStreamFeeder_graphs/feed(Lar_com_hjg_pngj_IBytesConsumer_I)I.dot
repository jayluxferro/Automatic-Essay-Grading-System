digraph "CFG forar.com.hjg.pngj.BufferedStreamFeeder.feed(Lar\/com\/hjg\/pngj\/IBytesConsumer;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.pendinglen != 0) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|refillBuffer()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r4 \<= 0) goto L_0x000e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r4 \>= r2.pendinglen) goto L_0x000e\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|int r4 = r2.pendinglen\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|PHI: r4 \l  PHI: (r4v1 int) = (r4v9 int), (r4v0 int) binds: [B:6:0x000e, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \<= 0) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|int r3 = r3.consume(r2.buf, r2.offset, r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r3 \<= 0) goto L_0x0028\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|r2.offset = r2.offset + r3\lr2.pendinglen = r2.pendinglen \- r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|r3 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|PHI: r3 \l  PHI: (r3v1 int) = (r3v3 int), (r3v4 int), (r3v4 int) binds: [B:11:0x0027, B:9:0x001a, B:10:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|if (r3 \>= 1) goto L_0x0038\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b}"];
Node_15 [shape=record,label="{15\:\ 0x002d|if (r2.failIfNoFeed != false) goto L_0x0030\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030}"];
Node_17 [shape=record,label="{17\:\ 0x0037|throw new p004ar.com.hjg.pngj.PngjInputException(\"failed feed bytes\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.BufferedStreamFeeder.feed((r2v0 'this' ar.com.hjg.pngj.BufferedStreamFeeder A[IMMUTABLE_TYPE, THIS]), (r3v0 ar.com.hjg.pngj.IBytesConsumer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_16 -> Node_17;
}

