digraph "CFG forar.com.hjg.pngj.BufferedStreamFeeder.\<init\>(Ljava\/io\/InputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r0 I:boolean), (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.eof boolean \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: IPUT  (r1 I:boolean), (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.closeStream boolean \l0x0009: IPUT  (r0 I:boolean), (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.failIfNoFeed boolean \l0x000b: IPUT  \l  (r3 I:java.io.InputStream)\l  (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder)\l ar.com.hjg.pngj.BufferedStreamFeeder.stream java.io.InputStream \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: NEW_ARRAY  (r3 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0013: IPUT  (r3 I:byte[]), (r2 I:ar.com.hjg.pngj.BufferedStreamFeeder) ar.com.hjg.pngj.BufferedStreamFeeder.buf byte[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.BufferedStreamFeeder.\<init\>((r2 'this' I:ar.com.hjg.pngj.BufferedStreamFeeder A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

