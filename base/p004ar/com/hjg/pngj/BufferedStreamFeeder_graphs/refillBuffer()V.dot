digraph "CFG forar.com.hjg.pngj.BufferedStreamFeeder.refillBuffer()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.pendinglen \> 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.eof == false) goto L_0x0009\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000a|SYNTHETIC\lSplitter:B:5:0x000a\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ IOException \-\> 0x001f \}\lSplitter:B:5:0x000a\l|r2.offset = 0     \/\/ Catch:\{ IOException \-\> 0x001f \}\lr2.pendinglen = r2.stream.read(r2.buf)     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|Catch:\{ IOException \-\> 0x001f \}\l|if (r2.pendinglen \>= 0) goto L_0x001e     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|Catch:\{ IOException \-\> 0x001f \}\l|close()     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|ExcHandler: IOException (r0v3 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:5:0x000a\l|java.io.IOException r0 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020}"];
Node_13 [shape=record,label="{13\:\ 0x0025|throw new p004ar.com.hjg.pngj.PngjInputException((java.lang.Throwable) r0)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void ar.com.hjg.pngj.BufferedStreamFeeder.refillBuffer((r2v0 'this' ar.com.hjg.pngj.BufferedStreamFeeder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_15[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

