digraph "CFG forar.com.hjg.pngj.PngIDatChunkOutputStream.setPrefix([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: IPUT  \l  (r4 I:byte[])\l  (r3 I:ar.com.hjg.pngj.PngIDatChunkOutputStream)\l ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0007: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0009: IPUT  \l  (r0 I:byte[])\l  (r3 I:ar.com.hjg.pngj.PngIDatChunkOutputStream)\l ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l0x000b: IGET  (r0 I:byte[]) = (r3 I:ar.com.hjg.pngj.PngIDatChunkOutputStream) ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l0x000d: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: INVOKE  \l  (r4 I:java.lang.Object)\l  (r2 I:int)\l  (r0 I:java.lang.Object)\l  (r2 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{void ar.com.hjg.pngj.PngIDatChunkOutputStream.setPrefix((r3 'this' I:ar.com.hjg.pngj.PngIDatChunkOutputStream A[IMMUTABLE_TYPE, THIS]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
}

