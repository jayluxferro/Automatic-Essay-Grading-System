digraph "CFG forar.com.hjg.pngj.PngIDatChunkOutputStream.flushBuffer([BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.prefix != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = r6\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|int r0 = r4.prefix.length + r6\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r0 \l  PHI: (r0v1 int) = (r0v4 int), (r0v5 int) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|ar.com.hjg.pngj.chunks.ChunkRaw r1 = new p004ar.com.hjg.pngj.chunks.ChunkRaw(r0, p004ar.com.hjg.pngj.chunks.ChunkHelper.b_IDAT, false)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r6 != r0) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r1.data = r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|r1.writeChunk(r4.outputStream)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected final void ar.com.hjg.pngj.PngIDatChunkOutputStream.flushBuffer((r4v0 'this' ar.com.hjg.pngj.PngIDatChunkOutputStream A[IMMUTABLE_TYPE, THIS]), (r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

