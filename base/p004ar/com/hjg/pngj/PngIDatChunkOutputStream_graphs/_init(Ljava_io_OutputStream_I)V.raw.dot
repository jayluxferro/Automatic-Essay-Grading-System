digraph "CFG forar.com.hjg.pngj.PngIDatChunkOutputStream.\<init\>(Ljava\/io\/OutputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (32768(0x8000, float:4.5918E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:ar.com.hjg.pngj.ProgressiveOutputStream), (r2 I:int) ar.com.hjg.pngj.ProgressiveOutputStream.\<init\>(int):void type: DIRECT \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: IPUT  \l  (r2 I:byte[])\l  (r0 I:ar.com.hjg.pngj.PngIDatChunkOutputStream)\l ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l0x000c: IPUT  \l  (r1 I:java.io.OutputStream)\l  (r0 I:ar.com.hjg.pngj.PngIDatChunkOutputStream)\l ar.com.hjg.pngj.PngIDatChunkOutputStream.outputStream java.io.OutputStream \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngIDatChunkOutputStream.\<init\>((r0 'this' I:ar.com.hjg.pngj.PngIDatChunkOutputStream A[IMMUTABLE_TYPE, THIS]), (r1 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

