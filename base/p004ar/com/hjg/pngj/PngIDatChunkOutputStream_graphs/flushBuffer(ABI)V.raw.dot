digraph "CFG forar.com.hjg.pngj.PngIDatChunkOutputStream.flushBuffer([BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.PngIDatChunkOutputStream) ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r0 I:byte[]) = (r4 I:ar.com.hjg.pngj.PngIDatChunkOutputStream) ar.com.hjg.pngj.PngIDatChunkOutputStream.prefix byte[] \l0x0008: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0009: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) =  ar.com.hjg.pngj.chunks.ChunkRaw \l0x000c: SGET  (r2 I:byte[]) =  ar.com.hjg.pngj.chunks.ChunkHelper.b_IDAT byte[] \l0x000e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r0 I:int)\l  (r2 I:byte[])\l  (r3 I:boolean)\l ar.com.hjg.pngj.chunks.ChunkRaw.\<init\>(int, byte[], boolean):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IPUT  (r5 I:byte[]), (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw) ar.com.hjg.pngj.chunks.ChunkRaw.data byte[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r5 I:java.io.OutputStream) = (r4 I:ar.com.hjg.pngj.PngIDatChunkOutputStream) ar.com.hjg.pngj.PngIDatChunkOutputStream.outputStream java.io.OutputStream \l0x0018: INVOKE  \l  (r1 I:ar.com.hjg.pngj.chunks.ChunkRaw)\l  (r5 I:java.io.OutputStream)\l ar.com.hjg.pngj.chunks.ChunkRaw.writeChunk(java.io.OutputStream):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{protected final void ar.com.hjg.pngj.PngIDatChunkOutputStream.flushBuffer((r4 'this' I:ar.com.hjg.pngj.PngIDatChunkOutputStream A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

