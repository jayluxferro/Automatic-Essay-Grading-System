digraph "CFG forar.com.hjg.pngj.PngReaderFilter.read()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.io.FilterInputStream) java.io.FilterInputStream.read():int type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r6 I:ar.com.hjg.pngj.PngReaderFilter) ar.com.hjg.pngj.PngReaderFilter.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: NEW_ARRAY  (r3 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000b: CAST  (r4 I:byte) = (byte) (r0 I:int) \l0x000c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: APUT  \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x000f: INVOKE  \l  (r1 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l  (r3 I:byte[])\l  (r5 I:int)\l  (r2 I:int)\l ar.com.hjg.pngj.ChunkSeqReaderPng.feedAll(byte[], int, int):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.PngReaderFilter.read((r6 'this' I:ar.com.hjg.pngj.PngReaderFilter A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

