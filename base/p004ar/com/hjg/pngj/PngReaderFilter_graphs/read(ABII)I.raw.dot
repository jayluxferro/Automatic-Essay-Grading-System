digraph "CFG forar.com.hjg.pngj.PngReaderFilter.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = \l  (r1 I:java.io.FilterInputStream)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l java.io.FilterInputStream.read(byte[], int, int):int type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r1 I:ar.com.hjg.pngj.PngReaderFilter) ar.com.hjg.pngj.PngReaderFilter.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l0x0008: INVOKE  \l  (r0 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l ar.com.hjg.pngj.ChunkSeqReaderPng.feedAll(byte[], int, int):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public int ar.com.hjg.pngj.PngReaderFilter.read((r1 'this' I:ar.com.hjg.pngj.PngReaderFilter A[IMMUTABLE_TYPE, THIS]), (r2 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

