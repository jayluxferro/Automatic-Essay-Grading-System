digraph "CFG forar.com.hjg.pngj.PngReaderFilter.\<init\>(Ljava\/io\/InputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:java.io.FilterInputStream)\l  (r1 I:java.io.InputStream)\l java.io.FilterInputStream.\<init\>(java.io.InputStream):void type: DIRECT \l0x0003: INVOKE  (r1 I:ar.com.hjg.pngj.ChunkSeqReaderPng) = (r0 I:ar.com.hjg.pngj.PngReaderFilter) ar.com.hjg.pngj.PngReaderFilter.createChunkSequenceReader():ar.com.hjg.pngj.ChunkSeqReaderPng type: VIRTUAL \l0x0007: IPUT  \l  (r1 I:ar.com.hjg.pngj.ChunkSeqReaderPng)\l  (r0 I:ar.com.hjg.pngj.PngReaderFilter)\l ar.com.hjg.pngj.PngReaderFilter.chunkseq ar.com.hjg.pngj.ChunkSeqReaderPng \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{public void ar.com.hjg.pngj.PngReaderFilter.\<init\>((r0 'this' I:ar.com.hjg.pngj.PngReaderFilter A[IMMUTABLE_TYPE, THIS]), (r1 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

