digraph "CFG forar.com.hjg.pngj.ProgressiveOutputStream.checkFlushBuffer(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.count int \l0x0004: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.size int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.size int \l0x000c: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.count int \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.count int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IGET  (r1 I:byte[]) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.buf byte[] \l0x0017: INVOKE  \l  (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream)\l  (r1 I:byte[])\l  (r0 I:int)\l ar.com.hjg.pngj.ProgressiveOutputStream.flushBuffer(byte[], int):void type: VIRTUAL \l0x001a: IGET  (r1 I:long) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.countFlushed long \l0x001c: CAST  (r3 I:long) = (long) (r0 I:int) \l0x001d: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x001e: IPUT  (r1 I:long), (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.countFlushed long \l0x0020: IGET  (r1 I:int) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.count int \l0x0022: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x0023: IPUT  (r1 I:int), (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.count int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IGET  (r2 I:byte[]) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.buf byte[] \l0x0029: IGET  (r3 I:byte[]) = (r5 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.buf byte[] \l0x002b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: INVOKE  \l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
MethodNode[shape=record,label="{private final void ar.com.hjg.pngj.ProgressiveOutputStream.checkFlushBuffer((r5 'this' I:ar.com.hjg.pngj.ProgressiveOutputStream A[IMMUTABLE_TYPE, THIS]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_0;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_0;
}

