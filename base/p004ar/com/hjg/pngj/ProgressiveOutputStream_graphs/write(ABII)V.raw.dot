digraph "CFG forar.com.hjg.pngj.ProgressiveOutputStream.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:java.io.ByteArrayOutputStream)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l java.io.ByteArrayOutputStream.write(byte[], int, int):void type: SUPER \l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: INVOKE  \l  (r0 I:ar.com.hjg.pngj.ProgressiveOutputStream)\l  (r1 I:boolean)\l ar.com.hjg.pngj.ProgressiveOutputStream.checkFlushBuffer(boolean):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: RETURN   \l}"];
MethodNode[shape=record,label="{public final void ar.com.hjg.pngj.ProgressiveOutputStream.write((r0 'this' I:ar.com.hjg.pngj.ProgressiveOutputStream A[IMMUTABLE_TYPE, THIS]), (r1 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

