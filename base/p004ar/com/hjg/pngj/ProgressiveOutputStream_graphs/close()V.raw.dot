digraph "CFG forar.com.hjg.pngj.ProgressiveOutputStream.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:ar.com.hjg.pngj.ProgressiveOutputStream) ar.com.hjg.pngj.ProgressiveOutputStream.flush():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x0003 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: RETURN   \l}"];
MethodNode[shape=record,label="{public final void ar.com.hjg.pngj.ProgressiveOutputStream.close((r0 'this' I:ar.com.hjg.pngj.ProgressiveOutputStream A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_2;
}

