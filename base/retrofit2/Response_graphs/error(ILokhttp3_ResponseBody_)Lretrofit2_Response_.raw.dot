digraph "CFG forretrofit2.Response.error(ILokhttp3\/ResponseBody;)Lretrofit2\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (400(0x190, float:5.6E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:4:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:okhttp3.Response$Builder) =  okhttp3.Response$Builder \l0x0006: INVOKE  (r0 I:okhttp3.Response$Builder) okhttp3.Response.Builder.\<init\>():void type: DIRECT \l0x0009: INVOKE  (r2 I:okhttp3.Response$Builder) = (r0 I:okhttp3.Response$Builder), (r2 I:int) okhttp3.Response.Builder.code(int):okhttp3.Response$Builder type: VIRTUAL \l0x000d: CONST_STR  (r0 I:java.lang.String) =  \"Response.error()\" \l0x000f: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r0 I:java.lang.String) okhttp3.Response.Builder.message(java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l0x0013: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_1 okhttp3.Protocol \l0x0015: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r0 I:okhttp3.Protocol) okhttp3.Response.Builder.protocol(okhttp3.Protocol):okhttp3.Response$Builder type: VIRTUAL \l0x0019: NEW_INSTANCE  (r0 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x001b: INVOKE  (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x001e: CONST_STR  (r1 I:java.lang.String) =  \"http:\/\/localhost\/\" \l0x0020: INVOKE  (r0 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request$Builder), (r1 I:java.lang.String) okhttp3.Request.Builder.url(java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0024: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x0028: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r0 I:okhttp3.Request) okhttp3.Response.Builder.request(okhttp3.Request):okhttp3.Response$Builder type: VIRTUAL \l0x002c: INVOKE  (r2 I:okhttp3.Response) = (r2 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l0x0030: INVOKE  (r2 I:retrofit2.Response) = (r3 I:okhttp3.ResponseBody), (r2 I:okhttp3.Response) retrofit2.Response.error(okhttp3.ResponseBody, okhttp3.Response):retrofit2.Response type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0034|0x0034: RETURN  (r2 I:retrofit2.Response\<T\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|0x0035: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0037: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003c: CONST_STR  (r1 I:java.lang.String) =  \"code \< 400: \" \l0x003e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0041: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0048: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x004b|0x004b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static retrofit2.Response\<T\> retrofit2.Response.error((r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:okhttp3.ResponseBody A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(I, Lokhttp3\/ResponseBody;, ), Lretrofit2\/Response\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

