digraph "CFG forretrofit2.RequestBuilder.canonicalizeForPath(Lokio\/Buffer;Ljava\/lang\/String;IIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:32:0x006e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001a \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x001c: CONST  (r3 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:25:0x003a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|0x0022: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:25:0x003a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|0x0024: CONST_STR  (r2 I:java.lang.String) =  \" \"\<\>^`\{\}\|?#\" \l0x0026: INVOKE  (r2 I:int) = (r2 I:java.lang.String), (r1 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x002a: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003a \l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|0x002d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0036 \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0036 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0036|0x0036: INVOKE  (r6 I:okio.Buffer), (r1 I:int) okio.Buffer.writeUtf8CodePoint(int):okio.Buffer type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0041 \l}"];
Node_26 [shape=record,label="{26\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x003e: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0041|0x0041: INVOKE  (r0 I:okio.Buffer), (r1 I:int) okio.Buffer.writeUtf8CodePoint(int):okio.Buffer type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0044|0x0044: INVOKE  (r2 I:boolean) = (r0 I:okio.Buffer) okio.Buffer.exhausted():boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0048|0x0048: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_30 [shape=record,label="{30\:\ 0x004a|0x004a: INVOKE  (r2 I:byte) = (r0 I:okio.Buffer) okio.Buffer.readByte():byte type: VIRTUAL \l0x004e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0050: INVOKE  (r6 I:okio.Buffer), (r3 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0053: SGET  (r4 I:char[]) =  retrofit2.RequestBuilder.HEX_DIGITS char[] \l0x0055: ARITH  (r5 I:int) = (r2 I:int) \>\> (4 int) \l0x0057: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0059: AGET  (r4 I:char A[IMMUTABLE_TYPE]) = \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x005b: INVOKE  (r6 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x005e: SGET  (r4 I:char[]) =  retrofit2.RequestBuilder.HEX_DIGITS char[] \l0x0060: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0062: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0064: INVOKE  (r6 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0068|0x0068: INVOKE  (r1 I:int) = (r1 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x006c: ARITH  (r8 I:int) = (r8 I:int) + (r1 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x006e|0x006e: RETURN   \l}"];
MethodNode[shape=record,label="{private static void retrofit2.RequestBuilder.canonicalizeForPath((r6 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_32;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_31;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_31;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_31;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_31[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_25;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_24;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_28;
Node_31 -> Node_1;
}

