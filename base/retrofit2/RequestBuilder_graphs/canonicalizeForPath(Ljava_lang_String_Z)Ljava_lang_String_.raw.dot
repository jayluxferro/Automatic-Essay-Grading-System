digraph "CFG forretrofit2.RequestBuilder.canonicalizeForPath(Ljava\/lang\/String;Z)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:int) = (r6 I:java.lang.String), (r2 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l0x000c: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST_STR  (r4 I:java.lang.String) =  \" \"\<\>^`\{\}\|?#\" \l0x0016: INVOKE  (r4 I:int) = (r4 I:java.lang.String), (r3 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x001a: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CONST  (r4 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: CONST  (r4 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r3 I:int) = (r3 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x002c: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: NEW_INSTANCE  (r3 I:okio.Buffer) =  okio.Buffer \l0x0030: INVOKE  (r3 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0033: INVOKE  \l  (r3 I:okio.Buffer)\l  (r6 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l okio.Buffer.writeUtf8(java.lang.String, int, int):okio.Buffer type: VIRTUAL \l0x0036: INVOKE  \l  (r3 I:okio.Buffer)\l  (r6 I:java.lang.String)\l  (r2 I:int)\l  (r0 I:int)\l  (r7 I:boolean)\l retrofit2.RequestBuilder.canonicalizeForPath(okio.Buffer, java.lang.String, int, int, boolean):void type: STATIC \l0x0039: INVOKE  (r6 I:java.lang.String) = (r3 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: RETURN  (r6 I:java.lang.String) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: RETURN  (r6 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String retrofit2.RequestBuilder.canonicalizeForPath((r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_1;
Node_15 -> Node_16;
}

