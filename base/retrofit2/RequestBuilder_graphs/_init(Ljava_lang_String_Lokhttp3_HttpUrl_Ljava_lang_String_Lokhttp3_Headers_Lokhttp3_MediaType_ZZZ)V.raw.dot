digraph "CFG forretrofit2.RequestBuilder.\<init\>(Ljava\/lang\/String;Lokhttp3\/HttpUrl;Ljava\/lang\/String;Lokhttp3\/Headers;Lokhttp3\/MediaType;ZZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  (r1 I:java.lang.String), (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.method java.lang.String \l0x0005: IPUT  (r2 I:okhttp3.HttpUrl), (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.baseUrl okhttp3.HttpUrl \l0x0007: IPUT  (r3 I:java.lang.String), (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.relativeUrl java.lang.String \l0x0009: NEW_INSTANCE  (r1 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x000b: INVOKE  (r1 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x000e: IPUT  \l  (r1 I:okhttp3.Request$Builder)\l  (r0 I:retrofit2.RequestBuilder)\l retrofit2.RequestBuilder.requestBuilder okhttp3.Request$Builder \l0x0010: IPUT  (r5 I:okhttp3.MediaType), (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.contentType okhttp3.MediaType \l0x0012: IPUT  (r6 I:boolean), (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.hasBody boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IGET  (r1 I:okhttp3.Request$Builder) = (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.requestBuilder okhttp3.Request$Builder \l0x0018: INVOKE  (r1 I:okhttp3.Request$Builder), (r4 I:okhttp3.Headers) okhttp3.Request.Builder.headers(okhttp3.Headers):okhttp3.Request$Builder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: NEW_INSTANCE  (r1 I:okhttp3.FormBody$Builder) =  okhttp3.FormBody$Builder \l0x001f: INVOKE  (r1 I:okhttp3.FormBody$Builder) okhttp3.FormBody.Builder.\<init\>():void type: DIRECT \l0x0022: IPUT  \l  (r1 I:okhttp3.FormBody$Builder)\l  (r0 I:retrofit2.RequestBuilder)\l retrofit2.RequestBuilder.formBuilder okhttp3.FormBody$Builder \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: NEW_INSTANCE  (r1 I:okhttp3.MultipartBody$Builder) =  okhttp3.MultipartBody$Builder \l0x0029: INVOKE  (r1 I:okhttp3.MultipartBody$Builder) okhttp3.MultipartBody.Builder.\<init\>():void type: DIRECT \l0x002c: IPUT  \l  (r1 I:okhttp3.MultipartBody$Builder)\l  (r0 I:retrofit2.RequestBuilder)\l retrofit2.RequestBuilder.multipartBuilder okhttp3.MultipartBody$Builder \l0x002e: IGET  (r1 I:okhttp3.MultipartBody$Builder) = (r0 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.multipartBuilder okhttp3.MultipartBody$Builder \l0x0030: SGET  (r2 I:okhttp3.MediaType) =  okhttp3.MultipartBody.FORM okhttp3.MediaType \l0x0032: INVOKE  \l  (r1 I:okhttp3.MultipartBody$Builder)\l  (r2 I:okhttp3.MediaType)\l okhttp3.MultipartBody.Builder.setType(okhttp3.MediaType):okhttp3.MultipartBody$Builder type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.RequestBuilder.\<init\>((r0 'this' I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okhttp3.MediaType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[RUNTIME, javax.annotation.Nullable, \{\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}], , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

