digraph "CFG forretrofit2.RequestBuilder.canonicalizeForPath(Lokio\/Buffer;Ljava\/lang\/String;IIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 r8 \l  PHI: (r0v1 okio.Buffer) = (r0v0 okio.Buffer), (r0v2 okio.Buffer) binds: [B:0:0x0000, B:29:0x0068] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:0:0x0000, B:29:0x0068] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:29:0x0068\l|if (r8 \>= r9) goto L_0x006e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|int r1 = r7.codePointAt(r8)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r10 == false) goto L_0x001a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r1 == 9) goto L_0x0068\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d}"];
Node_7 [shape=record,label="{7\:\ 0x000f|if (r1 == 10) goto L_0x0068\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011}"];
Node_9 [shape=record,label="{9\:\ 0x0013|if (r1 == 12) goto L_0x0068\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015}"];
Node_11 [shape=record,label="{11\:\ 0x0017|if (r1 != 13) goto L_0x001a\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a}"];
Node_13 [shape=record,label="{13\:\ 0x001e|if (r1 \< 32) goto L_0x003a\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020}"];
Node_15 [shape=record,label="{15\:\ 0x0022|if (r1 \>= 127) goto L_0x003a\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024}"];
Node_17 [shape=record,label="{17\:\ 0x002b|if (PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(r1) != \-1) goto L_0x003a\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|if (r10 != false) goto L_0x0036\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f}"];
Node_20 [shape=record,label="{20\:\ 0x0031|if (r1 == 47) goto L_0x003a\l}"];
Node_21 [shape=record,label="{21\:\ 0x0033|if (r1 != 37) goto L_0x0036\l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|r6.writeUtf8CodePoint(r1)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|if (r0 != null) goto L_0x0041\l}"];
Node_24 [shape=record,label="{24\:\ 0x003c|okio.Buffer r0 = new okio.Buffer()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|PHI: r0 \l  PHI: (r0v3 okio.Buffer) = (r0v1 okio.Buffer), (r0v4 okio.Buffer) binds: [B:23:0x003a, B:24:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|r0.writeUtf8CodePoint(r1)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0044|LOOP_START\lLOOP:1: B:26:0x0044\-\>B:28:0x004a\l}"];
Node_27 [shape=record,label="{27\:\ 0x0048|if (r0.exhausted() != false) goto L_0x0068\l}"];
Node_28 [shape=record,label="{28\:\ 0x004a|LOOP_END\lLOOP:1: B:26:0x0044\-\>B:28:0x004a\l|r2 = r0.readByte() & 255\lr6.writeByte(37)\lr6.writeByte((int) HEX_DIGITS[(r2 \>\> 4) & 15])\lr6.writeByte((int) HEX_DIGITS[r2 & 15])\l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|LOOP_END\lPHI: r0 \l  PHI: (r0v2 okio.Buffer) = (r0v3 okio.Buffer), (r0v1 okio.Buffer), (r0v1 okio.Buffer), (r0v1 okio.Buffer), (r0v1 okio.Buffer), (r0v1 okio.Buffer) binds: [B:36:0x0068, B:35:0x0068, B:32:0x0068, B:33:0x0068, B:34:0x0068, B:37:0x0068] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:29:0x0068\l|int r8 = r8 + java.lang.Character.charCount(r1)\l}"];
Node_30 [shape=record,label="{30\:\ 0x006e|RETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ 0x006e|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0068|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0068|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0068|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0068|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0068|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void retrofit2.RequestBuilder.canonicalizeForPath((r6v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_32;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_33;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_34;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_37[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_35;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_26;
Node_29 -> Node_1;
Node_31 -> Node_30;
Node_32 -> Node_29;
Node_33 -> Node_29;
Node_34 -> Node_29;
Node_35 -> Node_29;
Node_36 -> Node_29;
Node_37 -> Node_29;
}

