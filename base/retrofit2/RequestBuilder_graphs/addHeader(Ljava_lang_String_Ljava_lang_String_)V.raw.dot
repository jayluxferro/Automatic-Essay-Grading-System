digraph "CFG forretrofit2.RequestBuilder.addHeader(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"Content\-Type\" \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:okhttp3.MediaType) = (r4 I:java.lang.String) okhttp3.MediaType.parse(java.lang.String):okhttp3.MediaType type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IPUT  (r3 I:okhttp3.MediaType), (r2 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.contentType okhttp3.MediaType \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0013: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"Malformed content type: \" \l0x001a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0024: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IGET  (r0 I:okhttp3.Request$Builder) = (r2 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.requestBuilder okhttp3.Request$Builder \l0x002a: INVOKE  \l  (r0 I:okhttp3.Request$Builder)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Request.Builder.addHeader(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.RequestBuilder.addHeader((r2 'this' I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

