digraph "CFG forretrofit2.RequestBuilder.\<init\>(Ljava\/lang\/String;Lokhttp3\/HttpUrl;Ljava\/lang\/String;Lokhttp3\/Headers;Lokhttp3\/MediaType;ZZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0.method = r1\lr0.baseUrl = r2\lr0.relativeUrl = r3\lr0.requestBuilder = new okhttp3.Request.Builder()\lr0.contentType = r5\lr0.hasBody = r6\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r4 == null) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|r0.requestBuilder.headers(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|if (r7 == false) goto L_0x0025\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|r0.formBuilder = new okhttp3.FormBody.Builder()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|if (r8 == false) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|r0.multipartBuilder = new okhttp3.MultipartBody.Builder()\lr0.multipartBuilder.setType(okhttp3.MultipartBody.FORM)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void retrofit2.RequestBuilder.\<init\>((r0v0 'this' retrofit2.RequestBuilder A[IMMUTABLE_TYPE, THIS]), (r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okhttp3.MediaType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[RUNTIME, javax.annotation.Nullable, \{\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}], , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
}

