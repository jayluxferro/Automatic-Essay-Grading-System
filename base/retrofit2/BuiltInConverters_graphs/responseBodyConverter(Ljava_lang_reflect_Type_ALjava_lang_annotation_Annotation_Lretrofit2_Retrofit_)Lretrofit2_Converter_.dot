digraph "CFG forretrofit2.BuiltInConverters.responseBodyConverter(Ljava\/lang\/reflect\/Type;[Ljava\/lang\/annotation\/Annotation;Lretrofit2\/Retrofit;)Lretrofit2\/Converter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1 != okhttp3.ResponseBody.class) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (retrofit2.Utils.isAnnotationPresent(r2, retrofit2.http.Streaming.class) == false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x000f}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r1 != java.lang.Void.class) goto L_0x0019\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x0018|RETURN\l|return retrofit2.BuiltInConverters.VoidResponseBodyConverter.INSTANCE\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return retrofit2.BuiltInConverters.BufferingResponseBodyConverter.INSTANCE\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return retrofit2.BuiltInConverters.StreamingResponseBodyConverter.INSTANCE\l}"];
MethodNode[shape=record,label="{public retrofit2.Converter\<okhttp3.ResponseBody, ?\> retrofit2.BuiltInConverters.responseBodyConverter((r0v0 'this' retrofit2.BuiltInConverters A[IMMUTABLE_TYPE, THIS]), (r1v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.annotation.Annotation[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 retrofit2.Retrofit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, [, Ljava\/lang\/annotation\/Annotation;, Lretrofit2\/Retrofit;, ), Lretrofit2\/Converter\<, Lokhttp3\/ResponseBody;, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_12;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
}

