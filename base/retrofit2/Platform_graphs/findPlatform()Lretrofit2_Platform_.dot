digraph "CFG forretrofit2.Platform.findPlatform()Lretrofit2\/Platform;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x000f \}\lSplitter:B:1:0x0002\l|java.lang.Class.forName(\"android.os.Build\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x000f \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|Catch:\{ ClassNotFoundException \-\> 0x000f \}\l|if (android.os.Build.VERSION.SDK_INT == 0) goto L_0x000f     \/\/ Catch:\{ ClassNotFoundException \-\> 0x000f \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|Catch:\{ ClassNotFoundException \-\> 0x000f \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return new retrofit2.Platform.Android()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\lSplitter:B:1:0x0002\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|SYNTHETIC\lSplitter:B:8:0x0011\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x001a \}\lSplitter:B:8:0x0011\l|java.lang.Class.forName(\"java.util.Optional\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x001a \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|RETURN\l|return new retrofit2.Platform.Java8()\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\lSplitter:B:8:0x0011\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|RETURN\l|return new retrofit2.Platform()\l}"];
MethodNode[shape=record,label="{private static retrofit2.Platform retrofit2.Platform.findPlatform() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_11;
}

