digraph "CFG forretrofit2.Utils.ParameterizedTypeImpl.\<init\>(Ljava\/lang\/reflect\/Type;Ljava\/lang\/reflect\/Type;[Ljava\/lang\/reflect\/Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: INSTANCE_OF  (r0 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.lang.Class \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x000f: CHECK_CAST  (r3 I:java.lang.Class) = (java.lang.Class) (r3 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Class) java.lang.Class.getEnclosingClass():java.lang.Class type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001c \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001e: INVOKE  (r5 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: AGET  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0027: CONST_STR  (r3 I:java.lang.String) =  \"typeArgument == null\" \l0x0029: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) retrofit2.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x002c: INVOKE  (r2 I:java.lang.reflect.Type) retrofit2.Utils.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x002f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: IPUT  \l  (r5 I:java.lang.reflect.Type)\l  (r4 I:retrofit2.Utils$ParameterizedTypeImpl)\l retrofit2.Utils.ParameterizedTypeImpl.ownerType java.lang.reflect.Type \l0x0034: IPUT  \l  (r6 I:java.lang.reflect.Type)\l  (r4 I:retrofit2.Utils$ParameterizedTypeImpl)\l retrofit2.Utils.ParameterizedTypeImpl.rawType java.lang.reflect.Type \l0x0036: INVOKE  (r5 I:java.lang.Object) = (r7 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x003a: CHECK_CAST  (r5 I:java.lang.reflect.Type[]) = (java.lang.reflect.Type[]) (r5 I:?[OBJECT, ARRAY]) \l0x003c: IPUT  \l  (r5 I:java.lang.reflect.Type[])\l  (r4 I:retrofit2.Utils$ParameterizedTypeImpl)\l retrofit2.Utils.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.Utils.ParameterizedTypeImpl.\<init\>((r4 'this' I:retrofit2.Utils$ParameterizedTypeImpl A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_18;
}

