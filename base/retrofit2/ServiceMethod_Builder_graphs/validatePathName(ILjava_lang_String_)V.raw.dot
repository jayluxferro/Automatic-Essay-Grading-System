digraph "CFG forretrofit2.ServiceMethod.Builder.validatePathName(ILjava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.regex.Pattern) =  retrofit2.ServiceMethod.PARAM_NAME_REGEX java.util.regex.Pattern \l0x0002: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r6 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r0 I:java.util.Set\<java.lang.String\>) = (r4 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.relativeUrlParamNames java.util.Set \l0x0011: INVOKE  (r0 I:boolean) = (r0 I:java.util.Set), (r6 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001a: IGET  (r3 I:java.lang.String) = (r4 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.relativeUrl java.lang.String \l0x001c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x001e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0020: CONST_STR  (r6 I:java.lang.String) =  \"URL \"%s\" does not contain \"\{%s\}\".\" \l0x0022: INVOKE  (r5 I:java.lang.RuntimeException) = \l  (r4 I:retrofit2.ServiceMethod$Builder)\l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r0 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.parameterError(int, java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0029: SGET  (r3 I:java.util.regex.Pattern) =  retrofit2.ServiceMethod.PARAM_URL_REGEX java.util.regex.Pattern \l0x002b: INVOKE  (r3 I:java.lang.String) = (r3 I:java.util.regex.Pattern) java.util.regex.Pattern.pattern():java.lang.String type: VIRTUAL \l0x002f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0031: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0033: CONST_STR  (r6 I:java.lang.String) =  \"@Path parameter name must match %s. Found: %s\" \l0x0035: INVOKE  (r5 I:java.lang.RuntimeException) = \l  (r4 I:retrofit2.ServiceMethod$Builder)\l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r0 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.parameterError(int, java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void retrofit2.ServiceMethod.Builder.validatePathName((r4 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

