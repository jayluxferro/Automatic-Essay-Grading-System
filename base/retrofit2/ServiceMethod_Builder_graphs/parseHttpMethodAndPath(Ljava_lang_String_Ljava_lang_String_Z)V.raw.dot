digraph "CFG forretrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(Ljava\/lang\/String;Ljava\/lang\/String;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.httpMethod java.lang.String \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0047 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IPUT  \l  (r4 I:java.lang.String)\l  (r3 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.httpMethod java.lang.String \l0x0008: IPUT  (r6 I:boolean), (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.hasBody boolean \l0x000a: INVOKE  (r4 I:boolean) = (r5 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r4 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l0x0013: INVOKE  (r4 I:int) = (r5 I:java.lang.String), (r4 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0017: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r6 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001e: ARITH  (r6 I:int) = (r6 I:int) \- (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: ARITH  (r4 I:int) = (r4 I:int) + (r2 I:int) \l0x0022: INVOKE  (r4 I:java.lang.String) = (r5 I:java.lang.String), (r4 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0026: SGET  (r6 I:java.util.regex.Pattern) =  retrofit2.ServiceMethod.PARAM_URL_REGEX java.util.regex.Pattern \l0x0028: INVOKE  (r6 I:java.util.regex.Matcher) = \l  (r6 I:java.util.regex.Pattern)\l  (r4 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x002c: INVOKE  (r6 I:boolean) = (r6 I:java.util.regex.Matcher) java.util.regex.Matcher.find():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0035: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0037: CONST_STR  (r4 I:java.lang.String) =  \"URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query.\" \l0x0039: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: IPUT  \l  (r5 I:java.lang.String)\l  (r3 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.relativeUrl java.lang.String \l0x0040: INVOKE  (r4 I:java.util.Set) = (r5 I:java.lang.String) retrofit2.ServiceMethod.parsePathParameters(java.lang.String):java.util.Set type: STATIC \l0x0044: IPUT  \l  (r4 I:java.util.Set\<java.lang.String\>)\l  (r3 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.relativeUrlParamNames java.util.Set \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0048: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x004a: IGET  (r6 I:java.lang.String) = (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.httpMethod java.lang.String \l0x004c: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x004e: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0050: CONST_STR  (r4 I:java.lang.String) =  \"Only one HTTP method is allowed. Found: %s and %s.\" \l0x0052: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0056|0x0056: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath((r3 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

