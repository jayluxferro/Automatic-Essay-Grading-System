digraph "CFG forretrofit2.ServiceMethod.Builder.parseHeaders([Ljava\/lang\/String;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0002: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x0005: ARRAY_LENGTH  (r1 I:int) = (r9 I:?[]) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:18:0x005a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: AGET  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x000c: CONST  (r5 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x000e: INVOKE  (r5 I:int) = (r4 I:java.lang.String), (r5 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0012: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0013: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: INVOKE  (r6 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001c: ARITH  (r6 I:int) = (r6 I:int) \- (r7 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r6 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0023: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0025: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r5 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"Content\-Type\" \l0x002f: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r6 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0049 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: INVOKE  (r5 I:okhttp3.MediaType) = (r4 I:java.lang.String) okhttp3.MediaType.parse(java.lang.String):okhttp3.MediaType type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IPUT  \l  (r5 I:okhttp3.MediaType)\l  (r8 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.contentType okhttp3.MediaType \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: NEW_ARRAY  (r9 I:java.lang.Object[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0040: APUT  \l  (r9 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0042: CONST_STR  (r0 I:java.lang.String) =  \"Malformed content type: %s\" \l0x0044: INVOKE  (r9 I:java.lang.RuntimeException) = \l  (r8 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r9 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: INVOKE  \l  (r0 I:okhttp3.Headers$Builder)\l  (r6 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.add(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: NEW_ARRAY  (r9 I:java.lang.Object[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0051: APUT  \l  (r9 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0053: CONST_STR  (r0 I:java.lang.String) =  \"@Headers value must be in the form \"Name: Value\". Found: \"%s\"\" \l0x0055: INVOKE  (r9 I:java.lang.RuntimeException) = \l  (r8 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r9 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005a|0x005a: INVOKE  (r9 I:okhttp3.Headers) = (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|0x005e: RETURN  (r9 I:okhttp3.Headers) \l}"];
MethodNode[shape=record,label="{private okhttp3.Headers retrofit2.ServiceMethod.Builder.parseHeaders((r8 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

