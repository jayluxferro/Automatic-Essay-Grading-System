digraph "CFG forretrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(Ljava\/lang\/String;Ljava\/lang\/String;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r3.httpMethod != null) goto L_0x0047\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|r3.httpMethod = r4\lr3.hasBody = r6\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r5.isEmpty() == false) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|int r4 = r5.indexOf(63)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r4 == \-1) goto L_0x003e\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r4 \>= (r5.length() \- 1)) goto L_0x003e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|java.lang.String r4 = r5.substring(r4 + 1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|if (retrofit2.ServiceMethod.PARAM_URL_REGEX.matcher(r4).find() != false) goto L_0x0033\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|java.lang.Object[] r5 = new java.lang.Object[]\{r4\}\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|throw methodError(\"URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query.\", r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|r3.relativeUrl = r5\lr3.relativeUrlParamNames = retrofit2.ServiceMethod.parsePathParameters(r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|java.lang.Object[] r5 = new java.lang.Object[]\{r3.httpMethod, r4\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|throw methodError(\"Only one HTTP method is allowed. Found: %s and %s.\", r5)\l}"];
MethodNode[shape=record,label="{private void retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath((r3v0 'this' retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

