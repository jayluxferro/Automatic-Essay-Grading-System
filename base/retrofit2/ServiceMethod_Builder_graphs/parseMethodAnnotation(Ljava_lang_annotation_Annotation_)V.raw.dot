digraph "CFG forretrofit2.ServiceMethod.Builder.parseMethodAnnotation(Ljava\/lang\/annotation\/Annotation;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.DELETE \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST_STR  (r0 I:java.lang.String) =  \"DELETE\" \l0x0007: CHECK_CAST  (r4 I:retrofit2.http.DELETE) = (retrofit2.http.DELETE) (r4 I:?[OBJECT, ARRAY]) \l0x0009: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.DELETE) retrofit2.http.DELETE.value():java.lang.String type: INTERFACE \l0x000d: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.GET \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST_STR  (r0 I:java.lang.String) =  \"GET\" \l0x0018: CHECK_CAST  (r4 I:retrofit2.http.GET) = (retrofit2.http.GET) (r4 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.GET) retrofit2.http.GET.value():java.lang.String type: INTERFACE \l0x001e: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.HEAD \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: CONST_STR  (r0 I:java.lang.String) =  \"HEAD\" \l0x0029: CHECK_CAST  (r4 I:retrofit2.http.HEAD) = (retrofit2.http.HEAD) (r4 I:?[OBJECT, ARRAY]) \l0x002b: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.HEAD) retrofit2.http.HEAD.value():java.lang.String type: INTERFACE \l0x002f: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l0x0032: CONST_CLASS  (r4 I:java.lang.Class\<java.lang.Void\>) =  java.lang.Void.class \l0x0034: IGET  (r0 I:java.lang.reflect.Type) = (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.responseType java.lang.reflect.Type \l0x0036: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Object), (r0 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0040: CONST_STR  (r0 I:java.lang.String) =  \"HEAD method must use Void as response type.\" \l0x0042: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.PATCH \l0x0049: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0059 \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: CONST_STR  (r0 I:java.lang.String) =  \"PATCH\" \l0x004e: CHECK_CAST  (r4 I:retrofit2.http.PATCH) = (retrofit2.http.PATCH) (r4 I:?[OBJECT, ARRAY]) \l0x0050: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.PATCH) retrofit2.http.PATCH.value():java.lang.String type: INTERFACE \l0x0054: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r2 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.POST \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: CONST_STR  (r0 I:java.lang.String) =  \"POST\" \l0x005f: CHECK_CAST  (r4 I:retrofit2.http.POST) = (retrofit2.http.POST) (r4 I:?[OBJECT, ARRAY]) \l0x0061: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.POST) retrofit2.http.POST.value():java.lang.String type: INTERFACE \l0x0065: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r2 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.PUT \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x007b \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: CONST_STR  (r0 I:java.lang.String) =  \"PUT\" \l0x0070: CHECK_CAST  (r4 I:retrofit2.http.PUT) = (retrofit2.http.PUT) (r4 I:?[OBJECT, ARRAY]) \l0x0072: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.PUT) retrofit2.http.PUT.value():java.lang.String type: INTERFACE \l0x0076: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r2 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x007b|0x007b: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.OPTIONS \l}"];
Node_23 [shape=record,label="{23\:\ 0x007d|0x007d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008b \l}"];
Node_24 [shape=record,label="{24\:\ 0x007f|0x007f: CONST_STR  (r0 I:java.lang.String) =  \"OPTIONS\" \l0x0081: CHECK_CAST  (r4 I:retrofit2.http.OPTIONS) = (retrofit2.http.OPTIONS) (r4 I:?[OBJECT, ARRAY]) \l0x0083: INVOKE  (r4 I:java.lang.String) = (r4 I:retrofit2.http.OPTIONS) retrofit2.http.OPTIONS.value():java.lang.String type: INTERFACE \l0x0087: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x008b|0x008b: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.HTTP \l}"];
Node_26 [shape=record,label="{26\:\ 0x008d|0x008d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00a1 \l}"];
Node_27 [shape=record,label="{27\:\ 0x008f|0x008f: CHECK_CAST  (r4 I:retrofit2.http.HTTP) = (retrofit2.http.HTTP) (r4 I:?[OBJECT, ARRAY]) \l0x0091: INVOKE  (r0 I:java.lang.String) = (r4 I:retrofit2.http.HTTP) retrofit2.http.HTTP.method():java.lang.String type: INTERFACE \l0x0095: INVOKE  (r1 I:java.lang.String) = (r4 I:retrofit2.http.HTTP) retrofit2.http.HTTP.path():java.lang.String type: INTERFACE \l0x0099: INVOKE  (r4 I:boolean) = (r4 I:retrofit2.http.HTTP) retrofit2.http.HTTP.hasBody():boolean type: INTERFACE \l0x009d: INVOKE  \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r4 I:boolean)\l retrofit2.ServiceMethod.Builder.parseHttpMethodAndPath(java.lang.String, java.lang.String, boolean):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a1|0x00a1: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.Headers \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a3|0x00a3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00be \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a5|0x00a5: CHECK_CAST  (r4 I:retrofit2.http.Headers) = (retrofit2.http.Headers) (r4 I:?[OBJECT, ARRAY]) \l0x00a7: INVOKE  (r4 I:java.lang.String[]) = (r4 I:retrofit2.http.Headers) retrofit2.http.Headers.value():java.lang.String[] type: INTERFACE \l0x00ab: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00ac|0x00ac: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00b5 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00ae|0x00ae: INVOKE  (r4 I:okhttp3.Headers) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r4 I:java.lang.String[])\l retrofit2.ServiceMethod.Builder.parseHeaders(java.lang.String[]):okhttp3.Headers type: DIRECT \l0x00b2: IPUT  \l  (r4 I:okhttp3.Headers)\l  (r3 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.headers okhttp3.Headers \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b5|0x00b5: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00b7: CONST_STR  (r0 I:java.lang.String) =  \"@Headers annotation is empty.\" \l0x00b9: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x00bd|0x00bd: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00be|0x00be: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.Multipart \l}"];
Node_36 [shape=record,label="{36\:\ 0x00c0|0x00c0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00d2 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c2|0x00c2: IGET  (r4 I:boolean) = (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.isFormEncoded boolean \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c4|0x00c4: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x00c9 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c6|0x00c6: IPUT  (r2 I:boolean), (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.isMultipart boolean \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c9|0x00c9: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00cb: CONST_STR  (r0 I:java.lang.String) =  \"Only one encoding annotation is allowed.\" \l0x00cd: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x00d1|0x00d1: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00d2|0x00d2: INSTANCE_OF  (r4 I:boolean) = (r4 I:?[OBJECT, ARRAY]) retrofit2.http.FormUrlEncoded \l}"];
Node_43 [shape=record,label="{43\:\ 0x00d4|0x00d4: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00e6 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00d6|0x00d6: IGET  (r4 I:boolean) = (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.isMultipart boolean \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d8|0x00d8: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00dd \l}"];
Node_46 [shape=record,label="{46\:\ 0x00da|0x00da: IPUT  (r2 I:boolean), (r3 I:retrofit2.ServiceMethod$Builder) retrofit2.ServiceMethod.Builder.isFormEncoded boolean \l}"];
Node_47 [shape=record,label="{47\:\ 0x00dd|0x00dd: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00df: CONST_STR  (r0 I:java.lang.String) =  \"Only one encoding annotation is allowed.\" \l0x00e1: INVOKE  (r4 I:java.lang.RuntimeException) = \l  (r3 I:retrofit2.ServiceMethod$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_48 [shape=record,label="{48\:\ 0x00e5|0x00e5: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00e6|0x00e6: RETURN   \l}"];
MethodNode[shape=record,label="{private void retrofit2.ServiceMethod.Builder.parseMethodAnnotation((r3 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.annotation.Annotation A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_49;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_49;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_49[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_49;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_49;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_49;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_49;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_49;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_35;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_49;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_42;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_49;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_49;
Node_47 -> Node_48;
}

