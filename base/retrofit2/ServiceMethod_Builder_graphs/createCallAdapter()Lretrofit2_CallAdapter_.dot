digraph "CFG forretrofit2.ServiceMethod.Builder.createCallAdapter()Lretrofit2\/CallAdapter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Type r0 = r5.method.getGenericReturnType()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (retrofit2.Utils.hasUnresolvableType(r0) != false) goto L_0x0034\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r0 == java.lang.Void.TYPE) goto L_0x002b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|java.lang.annotation.Annotation[] r1 = r5.method.getAnnotations()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|SYNTHETIC\lSplitter:B:5:0x0018\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ RuntimeException \-\> 0x001f \}\lSplitter:B:5:0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|return r5.retrofit.callAdapter(r0, r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|ExcHandler: RuntimeException (r1v6 'e' java.lang.RuntimeException A[CUSTOM_DECLARE])\lSplitter:B:5:0x0018\l|java.lang.RuntimeException r1 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|java.lang.Object[] r2 = new java.lang.Object[]\{r0\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|throw methodError(r1, \"Unable to create call adapter for %s\", r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b}"];
Node_12 [shape=record,label="{12\:\ 0x0033|throw methodError(\"Service methods cannot return void.\", new java.lang.Object[0])\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|java.lang.Object[] r1 = new java.lang.Object[]\{r0\}\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|throw methodError(\"Method return type must not include a type variable or wildcard: %s\", r1)\l}"];
MethodNode[shape=record,label="{private retrofit2.CallAdapter\<T, R\> retrofit2.ServiceMethod.Builder.createCallAdapter((r5v0 'this' retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lretrofit2\/CallAdapter\<, TT;TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

