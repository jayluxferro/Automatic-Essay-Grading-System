digraph "CFG forretrofit2.ServiceMethod.Builder.parameterError(ILjava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/RuntimeException;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0008: CONST_STR  (r3 I:java.lang.String) =  \" (parameter #\" \l0x000a: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0012: CONST_STR  (r2 I:java.lang.String) =  \")\" \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001b: INVOKE  (r2 I:java.lang.RuntimeException) = \l  (r1 I:retrofit2.ServiceMethod$Builder)\l  (r2 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l retrofit2.ServiceMethod.Builder.methodError(java.lang.String, java.lang.Object[]):java.lang.RuntimeException type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|0x001f: RETURN  (r2 I:java.lang.RuntimeException) \l}"];
MethodNode[shape=record,label="{private java.lang.RuntimeException retrofit2.ServiceMethod.Builder.parameterError((r1 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

