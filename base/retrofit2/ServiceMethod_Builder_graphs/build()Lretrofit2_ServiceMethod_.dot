digraph "CFG forretrofit2.ServiceMethod.Builder.build()Lretrofit2\/ServiceMethod;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.callAdapter = createCallAdapter()\lr6.responseType = r6.callAdapter.responseType()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|if (r6.responseType == retrofit2.Response.class) goto L_0x00ef\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015}"];
Node_3 [shape=record,label="{3\:\ 0x0019|if (r6.responseType == okhttp3.Response.class) goto L_0x00ef\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|r6.responseConverter = createResponseConverter()\ljava.lang.annotation.Annotation[] r0 = r6.methodAnnotations\lint r1 = r0.length\lr3 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v6 int) binds: [B:4:0x001b, B:6:0x0027] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0025\-\>B:6:0x0027\l|if (r3 \>= r1) goto L_0x002f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|LOOP_END\lLOOP:0: B:5:0x0025\-\>B:6:0x0027\l|parseMethodAnnotation(r0[r3])\lint r3 = r3 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f}"];
Node_8 [shape=record,label="{8\:\ 0x0031|if (r6.httpMethod == null) goto L_0x00e6\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033}"];
Node_10 [shape=record,label="{10\:\ 0x0035|if (r6.hasBody != false) goto L_0x0052\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037}"];
Node_12 [shape=record,label="{12\:\ 0x0039|if (r6.isMultipart != false) goto L_0x0049\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b}"];
Node_14 [shape=record,label="{14\:\ 0x003d|if (r6.isFormEncoded != false) goto L_0x0040\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040}"];
Node_16 [shape=record,label="{16\:\ 0x0048|throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).\", new java.lang.Object[0])\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049}"];
Node_18 [shape=record,label="{18\:\ 0x0051|throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\", new java.lang.Object[0])\l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|int r0 = r6.parameterAnnotationsArray.length\lr6.parameterHandlers = new retrofit2.ParameterHandler[r0]\lr1 = 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|LOOP_START\lPHI: r1 \l  PHI: (r1v12 int) = (r1v11 int), (r1v18 int) binds: [B:19:0x0052, B:26:0x006d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:20:0x005a\-\>B:26:0x006d\l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|if (r1 \>= r0) goto L_0x008c\l}"];
Node_22 [shape=record,label="{22\:\ 0x005d|r4 = r6.parameterTypes[r1]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0065|if (retrofit2.Utils.hasUnresolvableType(r4) != false) goto L_0x0081\l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|r3 = r6.parameterAnnotationsArray[r1]\l}"];
Node_25 [shape=record,label="{25\:\ 0x006b|if (r3 == null) goto L_0x0078\l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|LOOP_END\lLOOP:1: B:20:0x005a\-\>B:26:0x006d\l|r6.parameterHandlers[r1] = parseParameter(r1, r4, r3)\lint r1 = r1 + 1\l}"];
Node_27 [shape=record,label="{27\:\ 0x0078}"];
Node_28 [shape=record,label="{28\:\ 0x0080|throw parameterError(r1, \"No Retrofit annotation found.\", new java.lang.Object[0])\l}"];
Node_29 [shape=record,label="{29\:\ 0x0081|java.lang.Object[] r0 = new java.lang.Object[]\{r4\}\l}"];
Node_30 [shape=record,label="{30\:\ 0x008b|throw parameterError(r1, \"Parameter type must not include a type variable or wildcard: %s\", r0)\l}"];
Node_31 [shape=record,label="{31\:\ 0x008c}"];
Node_32 [shape=record,label="{32\:\ 0x008e|if (r6.relativeUrl != null) goto L_0x00a2\l}"];
Node_33 [shape=record,label="{33\:\ 0x0090}"];
Node_34 [shape=record,label="{34\:\ 0x0092|if (r6.gotUrl == false) goto L_0x0095\l}"];
Node_35 [shape=record,label="{35\:\ 0x0095|java.lang.Object[] r0 = new java.lang.Object[]\{r6.httpMethod\}\l}"];
Node_36 [shape=record,label="{36\:\ 0x00a1|throw methodError(\"Missing either @%s URL or @Url parameter.\", r0)\l}"];
Node_37 [shape=record,label="{37\:\ 0x00a2}"];
Node_38 [shape=record,label="{38\:\ 0x00a4|if (r6.isFormEncoded != false) goto L_0x00bc\l}"];
Node_39 [shape=record,label="{39\:\ 0x00a6}"];
Node_40 [shape=record,label="{40\:\ 0x00a8|if (r6.isMultipart != false) goto L_0x00bc\l}"];
Node_41 [shape=record,label="{41\:\ 0x00aa}"];
Node_42 [shape=record,label="{42\:\ 0x00ac|if (r6.hasBody != false) goto L_0x00bc\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ae}"];
Node_44 [shape=record,label="{44\:\ 0x00b0|if (r6.gotBody != false) goto L_0x00b3\l}"];
Node_45 [shape=record,label="{45\:\ 0x00b3}"];
Node_46 [shape=record,label="{46\:\ 0x00bb|throw methodError(\"Non\-body HTTP method cannot contain @Body.\", new java.lang.Object[0])\l}"];
Node_47 [shape=record,label="{47\:\ 0x00bc}"];
Node_48 [shape=record,label="{48\:\ 0x00be|if (r6.isFormEncoded == false) goto L_0x00ce\l}"];
Node_49 [shape=record,label="{49\:\ 0x00c0}"];
Node_50 [shape=record,label="{50\:\ 0x00c2|if (r6.gotField == false) goto L_0x00c5\l}"];
Node_51 [shape=record,label="{51\:\ 0x00c5}"];
Node_52 [shape=record,label="{52\:\ 0x00cd|throw methodError(\"Form\-encoded method must contain at least one @Field.\", new java.lang.Object[0])\l}"];
Node_53 [shape=record,label="{53\:\ 0x00ce}"];
Node_54 [shape=record,label="{54\:\ 0x00d0|if (r6.isMultipart == false) goto L_0x00e0\l}"];
Node_55 [shape=record,label="{55\:\ 0x00d2}"];
Node_56 [shape=record,label="{56\:\ 0x00d4|if (r6.gotPart == false) goto L_0x00d7\l}"];
Node_57 [shape=record,label="{57\:\ 0x00d7}"];
Node_58 [shape=record,label="{58\:\ 0x00df|throw methodError(\"Multipart method must contain at least one @Part.\", new java.lang.Object[0])\l}"];
Node_59 [shape=record,label="{59\:\ 0x00e0}"];
Node_60 [shape=record,label="{60\:\ 0x00e5|RETURN\l|return new retrofit2.ServiceMethod(r6)\l}"];
Node_61 [shape=record,label="{61\:\ 0x00e6}"];
Node_62 [shape=record,label="{62\:\ 0x00ee|throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\", new java.lang.Object[0])\l}"];
Node_63 [shape=record,label="{63\:\ 0x00ef|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"'\")\lr0.append(retrofit2.Utils.getRawType(r6.responseType).getName())\lr0.append(\"' is not a valid response body type. Did you mean ResponseBody?\")\l}"];
Node_64 [shape=record,label="{64\:\ 0x0115|throw methodError(r0.toString(), new java.lang.Object[0])\l}"];
Node_65 [shape=record,label="{65\:\ 0x002f|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0081|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0078|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x008c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public retrofit2.ServiceMethod retrofit2.ServiceMethod.Builder.build((r6v0 'this' retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_63;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_63;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_65;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_61;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_19[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_68;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_66;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_67;
Node_26 -> Node_20;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_34 -> Node_37[style=dashed];
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_47;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_47;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_47;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_44 -> Node_47[style=dashed];
Node_45 -> Node_46;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_53;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_50 -> Node_53[style=dashed];
Node_51 -> Node_52;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_59;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_56 -> Node_59[style=dashed];
Node_57 -> Node_58;
Node_59 -> Node_60;
Node_61 -> Node_62;
Node_63 -> Node_64;
Node_65 -> Node_7;
Node_66 -> Node_29;
Node_67 -> Node_27;
Node_68 -> Node_31;
}

