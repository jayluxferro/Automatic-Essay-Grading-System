digraph "CFG forretrofit2.ServiceMethod.Builder.\<init\>(Lretrofit2\/Retrofit;Ljava\/lang\/reflect\/Method;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r1 I:retrofit2.Retrofit)\l  (r0 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.retrofit retrofit2.Retrofit \l0x0005: IPUT  \l  (r2 I:java.lang.reflect.Method)\l  (r0 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.method java.lang.reflect.Method \l0x0007: INVOKE  (r1 I:java.lang.annotation.Annotation[]) = (r2 I:java.lang.reflect.Method) java.lang.reflect.Method.getAnnotations():java.lang.annotation.Annotation[] type: VIRTUAL \l0x000b: IPUT  \l  (r1 I:java.lang.annotation.Annotation[])\l  (r0 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.methodAnnotations java.lang.annotation.Annotation[] \l0x000d: INVOKE  (r1 I:java.lang.reflect.Type[]) = (r2 I:java.lang.reflect.Method) java.lang.reflect.Method.getGenericParameterTypes():java.lang.reflect.Type[] type: VIRTUAL \l0x0011: IPUT  \l  (r1 I:java.lang.reflect.Type[])\l  (r0 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.parameterTypes java.lang.reflect.Type[] \l0x0013: INVOKE  (r1 I:java.lang.annotation.Annotation[][]) = (r2 I:java.lang.reflect.Method) java.lang.reflect.Method.getParameterAnnotations():java.lang.annotation.Annotation[][] type: VIRTUAL \l0x0017: IPUT  \l  (r1 I:java.lang.annotation.Annotation[][])\l  (r0 I:retrofit2.ServiceMethod$Builder)\l retrofit2.ServiceMethod.Builder.parameterAnnotationsArray java.lang.annotation.Annotation[][] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.ServiceMethod.Builder.\<init\>((r0 'this' I:retrofit2.ServiceMethod$Builder A[IMMUTABLE_TYPE, THIS]), (r1 I:retrofit2.Retrofit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.reflect.Method A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

