digraph "CFG forretrofit2.ServiceMethod.toCall([Ljava\/lang\/Object;)Lokhttp3\/Call;" {
subgraph cluster_Region_928534523 {
label = "R(3:0|1|(2:(2:(1:7)|9)|(2:10|11)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|retrofit2.RequestBuilder retrofit2.RequestBuilder r0 = new retrofit2.RequestBuilder(r10.httpMethod, r10.baseUrl, r10.relativeUrl, r10.headers, r10.contentType, r10.hasBody, r10.isFormEncoded, r10.isMultipart)\lretrofit2.ParameterHandler\<?\>[] retrofit2.ParameterHandler\<?\>[] r0 = r10.parameterHandlers\lint r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|int r2 = r11 != null ? r11.length : 0\l}"];
subgraph cluster_Region_285559016 {
label = "R(2:(2:(1:7)|9)|(2:10|11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1619433453 {
label = "IF [B:5:0x001f] THEN: R(2:(1:7)|9) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|if (r2 == r0.length) goto L_0x0021\l}"];
subgraph cluster_Region_1174291198 {
label = "R(2:(1:7)|9)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1837286218 {
label = "LOOP:0: (1:7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v1 int), (r1v4 int) binds: [B:5:0x001f, B:7:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0021\-\>B:7:0x0023\l|if (r1 \< r2) goto L_0x0023\l}"];
subgraph cluster_Region_659287205 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0023|LOOP_END\lLOOP:0: B:6:0x0021\-\>B:7:0x0023\l|r0[r1].apply(r0, r11[r1])\lr1++\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x0037|RETURN\l|return r10.callFactory.newCall(r0.build())\l}"];
}
}
subgraph cluster_Region_366226321 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0038}"];
Node_11 [shape=record,label="{11\:\ 0x005c|throw new java.lang.IllegalArgumentException(\"Argument count (\" + r2 + \") doesn't match expected count (\" + r0.length + \")\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x001b}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001d}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001e|PHI: r2 \l  PHI: (r2v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002d}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{okhttp3.Call retrofit2.ServiceMethod.toCall((r10v0 'this' retrofit2.ServiceMethod A[IMMUTABLE_TYPE, THIS]), (r11v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_10[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_12[style=dashed];
Node_7 -> Node_6;
Node_10 -> Node_11;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_12 -> Node_8;
}

