digraph "CFG forretrofit2.ServiceMethod.toCall([Ljava\/lang\/Object;)Lokhttp3\/Call;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r9 I:retrofit2.RequestBuilder) =  retrofit2.RequestBuilder \l0x0002: IGET  (r1 I:java.lang.String) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.httpMethod java.lang.String \l0x0004: IGET  (r2 I:okhttp3.HttpUrl) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.baseUrl okhttp3.HttpUrl \l0x0006: IGET  (r3 I:java.lang.String) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.relativeUrl java.lang.String \l0x0008: IGET  (r4 I:okhttp3.Headers) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.headers okhttp3.Headers \l0x000a: IGET  (r5 I:okhttp3.MediaType) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.contentType okhttp3.MediaType \l0x000c: IGET  (r6 I:boolean) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.hasBody boolean \l0x000e: IGET  (r7 I:boolean) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.isFormEncoded boolean \l0x0010: IGET  (r8 I:boolean) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.isMultipart boolean \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r0 I:retrofit2.RequestBuilder)\l  (r1 I:java.lang.String)\l  (r2 I:okhttp3.HttpUrl)\l  (r3 I:java.lang.String)\l  (r4 I:okhttp3.Headers)\l  (r5 I:okhttp3.MediaType)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:boolean)\l retrofit2.RequestBuilder.\<init\>(java.lang.String, okhttp3.HttpUrl, java.lang.String, okhttp3.Headers, okhttp3.MediaType, boolean, boolean, boolean):void type: DIRECT \l0x0016: IGET  (r0 I:retrofit2.ParameterHandler\<?\>[]) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.parameterHandlers retrofit2.ParameterHandler[] \l0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: ARRAY_LENGTH  (r2 I:int) = (r11 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: ARRAY_LENGTH  (r3 I:int) = (r0 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0025: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r11 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l \l0x0027: INVOKE  \l  (r3 I:retrofit2.ParameterHandler)\l  (r9 I:retrofit2.RequestBuilder)\l  (r4 I:java.lang.Object)\l retrofit2.ParameterHandler.apply(retrofit2.RequestBuilder, java.lang.Object):void type: VIRTUAL \l0x002a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IGET  (r11 I:okhttp3.Call$Factory) = (r10 I:retrofit2.ServiceMethod) retrofit2.ServiceMethod.callFactory okhttp3.Call$Factory \l0x002f: INVOKE  (r0 I:okhttp3.Request) = (r9 I:retrofit2.RequestBuilder) retrofit2.RequestBuilder.build():okhttp3.Request type: VIRTUAL \l0x0033: INVOKE  (r11 I:okhttp3.Call) = (r11 I:okhttp3.Call$Factory), (r0 I:okhttp3.Request) okhttp3.Call.Factory.newCall(okhttp3.Request):okhttp3.Call type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN  (r11 I:okhttp3.Call) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003f: CONST_STR  (r3 I:java.lang.String) =  \"Argument count (\" \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0047: CONST_STR  (r2 I:java.lang.String) =  \") doesn't match expected count (\" \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0050: CONST_STR  (r0 I:java.lang.String) =  \")\" \l0x0052: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0059: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x005c|0x005c: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{okhttp3.Call retrofit2.ServiceMethod.toCall((r10 'this' I:retrofit2.ServiceMethod A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

