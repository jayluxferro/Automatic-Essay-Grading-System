digraph "CFG forretrofit2.Retrofit.Builder.baseUrl(Lokhttp3\/HttpUrl;)Lretrofit2\/Retrofit$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"baseUrl == null\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) retrofit2.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x0005: INVOKE  (r0 I:java.util.List) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.pathSegments():java.util.List type: VIRTUAL \l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x000b: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000f: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0011: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0015: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: IPUT  (r4 I:okhttp3.HttpUrl), (r3 I:retrofit2.Retrofit$Builder) retrofit2.Retrofit.Builder.baseUrl okhttp3.HttpUrl \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: RETURN  (r3 I:retrofit2.Retrofit$Builder) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0020: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"baseUrl must end in \/: \" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public retrofit2.Retrofit$Builder retrofit2.Retrofit.Builder.baseUrl((r3 'this' I:retrofit2.Retrofit$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

