digraph "CFG forretrofit2.Retrofit.Builder.build()Lretrofit2\/Retrofit;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r9.baseUrl == null) goto L_0x0056\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|okhttp3.Call$Factory r0 = r9.callFactory\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r0 != null) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|okhttp3.OkHttpClient r0 = new okhttp3.OkHttpClient()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|PHI: r0 \l  PHI: (r0v3 okhttp3.Call$Factory) = (r0v2 okhttp3.Call$Factory), (r0v9 okhttp3.Call$Factory) binds: [B:3:0x0006, B:4:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r0\ljava.util.concurrent.Executor r0 = r9.callbackExecutor\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|if (r0 != null) goto L_0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|java.util.concurrent.Executor r0 = r9.platform.defaultCallbackExecutor()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|PHI: r0 \l  PHI: (r0v5 java.util.concurrent.Executor) = (r0v4 java.util.concurrent.Executor), (r0v8 java.util.concurrent.Executor) binds: [B:6:0x0010, B:7:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|r6 = r0\ljava.util.ArrayList r0 = new java.util.ArrayList(r9.callAdapterFactories)\lr0.add(r9.platform.defaultCallAdapterFactory(r6))\ljava.util.ArrayList r1 = new java.util.ArrayList(r9.converterFactories.size() + 1)\lr1.add(new retrofit2.BuiltInConverters())\lr1.addAll(r9.converterFactories)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|RETURN\l|return new retrofit2.Retrofit(r2, r9.baseUrl, java.util.Collections.unmodifiableList(r1), java.util.Collections.unmodifiableList(r0), r6, r9.validateEagerly)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0056}"];
Node_11 [shape=record,label="{11\:\ 0x005d|throw new java.lang.IllegalStateException(\"Base URL required.\")\l}"];
MethodNode[shape=record,label="{public retrofit2.Retrofit retrofit2.Retrofit.Builder.build((r9v0 'this' retrofit2.Retrofit$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

