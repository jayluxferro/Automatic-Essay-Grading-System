digraph "CFG forretrofit2.ParameterHandler.Path.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:java.lang.String) = (r2 I:retrofit2.ParameterHandler$Path) retrofit2.ParameterHandler.Path.name java.lang.String \l0x0004: IGET  (r1 I:retrofit2.Converter\<T, java.lang.String\>) = (r2 I:retrofit2.ParameterHandler$Path) retrofit2.ParameterHandler.Path.valueConverter retrofit2.Converter \l0x0006: INVOKE  (r4 I:java.lang.Object) = (r1 I:retrofit2.Converter), (r4 I:java.lang.Object) retrofit2.Converter.convert(java.lang.Object):java.lang.Object type: INTERFACE \l0x000a: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r1 I:boolean) = (r2 I:retrofit2.ParameterHandler$Path) retrofit2.ParameterHandler.Path.encoded boolean \l0x000e: INVOKE  \l  (r3 I:retrofit2.RequestBuilder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.RequestBuilder.addPathParam(java.lang.String, java.lang.String, boolean):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0014: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0016: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"Path parameter \"\" \l0x001b: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001e: IGET  (r0 I:java.lang.String) = (r2 I:retrofit2.ParameterHandler$Path) retrofit2.ParameterHandler.Path.name java.lang.String \l0x0020: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"\" value must not be null.\" \l0x0025: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0028: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002c: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void retrofit2.ParameterHandler.Path.apply((r2 'this' I:retrofit2.ParameterHandler$Path A[IMMUTABLE_TYPE, THIS]), (r3 I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/RequestBuilder;, TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

