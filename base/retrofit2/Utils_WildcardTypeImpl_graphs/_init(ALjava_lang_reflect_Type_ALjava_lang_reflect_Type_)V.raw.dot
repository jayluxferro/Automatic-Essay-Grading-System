digraph "CFG forretrofit2.Utils.WildcardTypeImpl.\<init\>([Ljava\/lang\/reflect\/Type;[Ljava\/lang\/reflect\/Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:23:0x004f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0014: INVOKE  (r0 I:java.lang.reflect.Type) retrofit2.Utils.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x0017: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0019: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: AGET  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x001f: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:retrofit2.Utils$WildcardTypeImpl)\l retrofit2.Utils.WildcardTypeImpl.lowerBound java.lang.reflect.Type \l0x0021: CONST_CLASS  (r4 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0023: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:retrofit2.Utils$WildcardTypeImpl)\l retrofit2.Utils.WildcardTypeImpl.upperBound java.lang.reflect.Type \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0028: INVOKE  (r4 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x002e: INVOKE  (r4 I:java.lang.NullPointerException) java.lang.NullPointerException.\<init\>():void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0043 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0036|0x0036: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0038: INVOKE  (r5 I:java.lang.reflect.Type) retrofit2.Utils.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x003b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: IPUT  \l  (r5 I:java.lang.reflect.Type)\l  (r3 I:retrofit2.Utils$WildcardTypeImpl)\l retrofit2.Utils.WildcardTypeImpl.lowerBound java.lang.reflect.Type \l0x003e: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0040: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:retrofit2.Utils$WildcardTypeImpl)\l retrofit2.Utils.WildcardTypeImpl.upperBound java.lang.reflect.Type \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0045: INVOKE  (r4 I:java.lang.NullPointerException) java.lang.NullPointerException.\<init\>():void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|0x0048: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004b: INVOKE  (r4 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0051: INVOKE  (r4 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void retrofit2.Utils.WildcardTypeImpl.\<init\>((r3 'this' I:retrofit2.Utils$WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_24;
}

