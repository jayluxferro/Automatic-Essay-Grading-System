digraph "CFG forretrofit2.ParameterHandler.1.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Iterable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: IGET  (r1 I:retrofit2.ParameterHandler) = (r2 I:retrofit2.ParameterHandler$1) retrofit2.ParameterHandler.1.this$0 retrofit2.ParameterHandler \l0x0013: INVOKE  \l  (r1 I:retrofit2.ParameterHandler)\l  (r3 I:retrofit2.RequestBuilder)\l  (r0 I:java.lang.Object)\l retrofit2.ParameterHandler.apply(retrofit2.RequestBuilder, java.lang.Object):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.ParameterHandler.1.apply((r2 'this' I:retrofit2.ParameterHandler$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Iterable\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/RequestBuilder;, Ljava\/lang\/Iterable\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
}

