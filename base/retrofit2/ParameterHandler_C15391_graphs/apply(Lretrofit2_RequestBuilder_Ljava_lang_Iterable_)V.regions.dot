digraph "CFG forretrofit2.ParameterHandler.1.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Iterable;)V" {
subgraph cluster_Region_1261830818 {
label = "R(1:(1:(2:2|(1:5))))";
node [shape=record,color=blue];
subgraph cluster_Region_65936992 {
label = "R(1:(2:2|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1138275245 {
label = "IF [B:0:0x0000] THEN: R(2:2|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 != null) goto L_0x0003\l}"];
subgraph cluster_Region_113770026 {
label = "R(2:2|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|java.util.Iterator r4 = r4.iterator()\l}"];
subgraph cluster_LoopRegion_2099236674 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r4.hasNext() != false) goto L_0x000d\l}"];
subgraph cluster_Region_250729375 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:5:0x000d\l|retrofit2.ParameterHandler.this.apply(r3, r0)\l}"];
}
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007|LOOP_START\lLOOP:0: B:3:0x0007\-\>B:5:0x000d\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void retrofit2.ParameterHandler.1.apply((r2v0 'this' retrofit2.ParameterHandler$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Iterable\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\laccess modifiers changed from: package\-private\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/RequestBuilder;, Ljava\/lang\/Iterable\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_3;
Node_3 -> Node_4;
Node_7 -> Node_6;
}

