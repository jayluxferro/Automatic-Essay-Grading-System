digraph "CFG forretrofit2.Utils.getParameterUpperBound(ILjava\/lang\/reflect\/ParameterizedType;)Ljava\/lang\/reflect\/Type;" {
subgraph cluster_Region_336615637 {
label = "R(2:0|(2:(2:9|10)|(2:4|5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Type[] java.lang.reflect.Type[] r0 = r5.getActualTypeArguments()\l}"];
subgraph cluster_Region_1520107335 {
label = "R(2:(2:9|10)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1785625756 {
label = "IF [B:1:0x0004, B:3:0x0007] THEN: R(2:9|10) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4 \< 0) goto L_0x001a\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|ADDED_TO_REGION\l|if (r4 \>= r0.length) goto L_0x001a\l}"];
subgraph cluster_Region_525474334 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001a}"];
Node_10 [shape=record,label="{10\:\ 0x0041|throw new java.lang.IllegalArgumentException(\"Index \" + r4 + \" not in range [0,\" + r0.length + \") for \" + r5)\l}"];
}
}
subgraph cluster_Region_233227829 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|java.lang.reflect.Type r4 = r0[r4]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\l|return r4 instanceof java.lang.reflect.WildcardType ? ((java.lang.reflect.WildcardType) r4).getUpperBounds()[0] : r4\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019}"];
MethodNode[shape=record,label="{static java.lang.reflect.Type retrofit2.Utils.getParameterUpperBound((r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_9 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_2 -> Node_3;
Node_6 -> Node_7;
}

