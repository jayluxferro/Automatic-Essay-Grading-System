digraph "CFG forretrofit2.Utils.getRawType(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/Class;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkNotNull(r3, \"type == null\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r3 instanceof java.lang.Class) == false) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|return (java.lang.Class) r3\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if ((r3 instanceof java.lang.reflect.ParameterizedType) == false) goto L_0x0023\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.reflect.Type r3 = ((java.lang.reflect.ParameterizedType) r3).getRawType()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|if ((r3 instanceof java.lang.Class) == false) goto L_0x001d\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a}"];
Node_9 [shape=record,label="{9\:\ 0x001c|RETURN\l|return (java.lang.Class) r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d}"];
Node_11 [shape=record,label="{11\:\ 0x0022|throw new java.lang.IllegalArgumentException()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023}"];
Node_13 [shape=record,label="{13\:\ 0x0026|if ((r3 instanceof java.lang.reflect.GenericArrayType) == false) goto L_0x003b\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028}"];
Node_15 [shape=record,label="{15\:\ 0x003a|RETURN\l|return java.lang.reflect.Array.newInstance(getRawType(((java.lang.reflect.GenericArrayType) r3).getGenericComponentType()), 0).getClass()\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b}"];
Node_17 [shape=record,label="{17\:\ 0x003d|if ((r3 instanceof java.lang.reflect.TypeVariable) == false) goto L_0x0042\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|RETURN\l|return java.lang.Object.class\l}"];
Node_19 [shape=record,label="{19\:\ 0x0042}"];
Node_20 [shape=record,label="{20\:\ 0x0044|if ((r3 instanceof java.lang.reflect.WildcardType) == false) goto L_0x0053\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046}"];
Node_22 [shape=record,label="{22\:\ 0x0052|RETURN\l|return getRawType(((java.lang.reflect.WildcardType) r3).getUpperBounds()[0])\l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Expected a Class, ParameterizedType, or GenericArrayType, but \<\")\lr1.append(r3)\lr1.append(\"\> is of type \")\lr1.append(r3.getClass().getName())\l}"];
Node_24 [shape=record,label="{24\:\ 0x0079|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{static java.lang.Class\<?\> retrofit2.Utils.getRawType((r3v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, ), Ljava\/lang\/Class\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_24;
}

