digraph "CFG forretrofit2.Utils.getRawType(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/Class;" {
subgraph cluster_Region_1661666979 {
label = "R(2:0|(2:(1:3)|(1:(2:6|(2:(1:9)|(1:11)))(1:(1:15)(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24)))))))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkNotNull(r3, \"type == null\")\l}"];
subgraph cluster_Region_791760842 {
label = "R(2:(1:3)|(1:(2:6|(2:(1:9)|(1:11)))(1:(1:15)(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24))))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1234761787 {
label = "IF [B:1:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r3 instanceof java.lang.Class) == true) goto L_0x0009\l}"];
subgraph cluster_Region_1148540552 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|return (java.lang.Class) r3\l}"];
}
}
subgraph cluster_Region_2146463419 {
label = "R(1:(2:6|(2:(1:9)|(1:11)))(1:(1:15)(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24)))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1511666064 {
label = "IF [B:5:0x000e] THEN: R(2:6|(2:(1:9)|(1:11))) ELSE: R(1:(1:15)(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24))))))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|if ((r3 instanceof java.lang.reflect.ParameterizedType) == true) goto L_0x0010\l}"];
subgraph cluster_Region_929901639 {
label = "R(2:6|(2:(1:9)|(1:11)))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.reflect.Type java.lang.reflect.Type r3 = ((java.lang.reflect.ParameterizedType) r3).getRawType()\l}"];
subgraph cluster_Region_1422742472 {
label = "R(2:(1:9)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2122263820 {
label = "IF [B:7:0x0018] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0018|if ((r3 instanceof java.lang.Class) == true) goto L_0x001a\l}"];
subgraph cluster_Region_1763198657 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001c|RETURN\l|return (java.lang.Class) r3\l}"];
}
}
subgraph cluster_Region_979537615 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0022|throw new java.lang.IllegalArgumentException()\l}"];
}
}
}
subgraph cluster_Region_1176222350 {
label = "R(1:(1:15)(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1300661612 {
label = "IF [B:13:0x0026] THEN: R(1:15) ELSE: R(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0026|if ((r3 instanceof java.lang.reflect.GenericArrayType) == true) goto L_0x0028\l}"];
subgraph cluster_Region_1944837127 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x003a|RETURN\l|return java.lang.reflect.Array.newInstance(getRawType(((java.lang.reflect.GenericArrayType) r3).getGenericComponentType()), 0).getClass()\l}"];
}
subgraph cluster_Region_1573986371 {
label = "R(1:(2:(1:18)|(1:(2:(1:22)|(2:23|24)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1174748861 {
label = "R(2:(1:18)|(1:(2:(1:22)|(2:23|24))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1062301428 {
label = "IF [B:17:0x003d] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x003d|if ((r3 instanceof java.lang.reflect.TypeVariable) == true) goto L_0x003f\l}"];
subgraph cluster_Region_318211837 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x003f|RETURN\l|return java.lang.Object.class\l}"];
}
}
subgraph cluster_Region_1181777880 {
label = "R(1:(2:(1:22)|(2:23|24)))";
node [shape=record,color=blue];
subgraph cluster_Region_695157117 {
label = "R(2:(1:22)|(2:23|24))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_503164010 {
label = "IF [B:20:0x0044] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0044|if ((r3 instanceof java.lang.reflect.WildcardType) == true) goto L_0x0046\l}"];
subgraph cluster_Region_856887622 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0052|RETURN\l|return getRawType(((java.lang.reflect.WildcardType) r3).getUpperBounds()[0])\l}"];
}
}
subgraph cluster_Region_1993881155 {
label = "R(2:23|24)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0053}"];
Node_24 [shape=record,label="{24\:\ 0x0079|throw new java.lang.IllegalArgumentException(\"Expected a Class, ParameterizedType, or GenericArrayType, but \<\" + r3 + \"\> is of type \" + r3.getClass().getName())\l}"];
}
}
}
}
}
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001d}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0023}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0028}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x003b}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0042}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0046}"];
MethodNode[shape=record,label="{static java.lang.Class\<?\> retrofit2.Utils.getRawType((r3v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, ), Ljava\/lang\/Class\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_12[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_16[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_20 -> Node_21;
Node_20 -> Node_23[style=dashed];
Node_23 -> Node_24;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

