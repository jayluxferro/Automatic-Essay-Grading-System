digraph "CFG forretrofit2.Utils.getParameterUpperBound(ILjava\/lang\/reflect\/ParameterizedType;)Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.reflect.Type[]) = (r5 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x000b: INSTANCE_OF  (r5 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.reflect.WildcardType \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CHECK_CAST  (r4 I:java.lang.reflect.WildcardType) = (java.lang.reflect.WildcardType) (r4 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r4 I:java.lang.reflect.Type[]) = (r4 I:java.lang.reflect.WildcardType) java.lang.reflect.WildcardType.getUpperBounds():java.lang.reflect.Type[] type: INTERFACE \l0x0015: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN  (r4 I:java.lang.reflect.Type) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: RETURN  (r4 I:java.lang.reflect.Type) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001c: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001e: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0021: CONST_STR  (r3 I:java.lang.String) =  \"Index \" \l0x0023: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0026: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0029: CONST_STR  (r4 I:java.lang.String) =  \" not in range [0,\" \l0x002b: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: ARRAY_LENGTH  (r4 I:int) = (r0 I:?[]) \l0x002f: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0032: CONST_STR  (r4 I:java.lang.String) =  \") for \" \l0x0034: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r4 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003e: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static java.lang.reflect.Type retrofit2.Utils.getParameterUpperBound((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_9 -> Node_10;
}

