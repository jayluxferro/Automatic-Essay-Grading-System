digraph "CFG forretrofit2.Utils.indexOf([Ljava\/lang\/Object;Ljava\/lang\/Object;)I" {
subgraph cluster_Region_161292111 {
label = "R(3:0|(1:(2:(1:5)|(1:6)))|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_1077411829 {
label = "LOOP:0: (1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|if (r0 \< r2.length) goto L_0x0004\l}"];
subgraph cluster_Region_1466767267 {
label = "R(1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_17339710 {
label = "R(2:(1:5)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_848783654 {
label = "IF [B:4:0x000a] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r3.equals(r2[r0]) == true) goto L_0x000c\l}"];
subgraph cluster_Region_1402044252 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1643172448 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:6:0x000d\l|r0++\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0015|throw new java.util.NoSuchElementException()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:6:0x000d\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0010}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0010|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int retrofit2.Utils.indexOf((r2v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_4 -> Node_6[style=dashed];
Node_4 -> Node_10;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_5;
}

