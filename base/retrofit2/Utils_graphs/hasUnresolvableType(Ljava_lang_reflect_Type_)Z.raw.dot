digraph "CFG forretrofit2.Utils.hasUnresolvableType(Ljava\/lang\/reflect\/Type;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.Class \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CHECK_CAST  (r5 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r5 I:?[OBJECT, ARRAY]) \l0x000d: INVOKE  (r5 I:java.lang.reflect.Type[]) = (r5 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l0x0011: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: AGET  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0017: INVOKE  (r4 I:boolean) = (r4 I:java.lang.reflect.Type) retrofit2.Utils.hasUnresolvableType(java.lang.reflect.Type):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.reflect.GenericArrayType \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: CHECK_CAST  (r5 I:java.lang.reflect.GenericArrayType) = (java.lang.reflect.GenericArrayType) (r5 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r5 I:java.lang.reflect.Type) = (r5 I:java.lang.reflect.GenericArrayType) java.lang.reflect.GenericArrayType.getGenericComponentType():java.lang.reflect.Type type: INTERFACE \l0x002c: INVOKE  (r5 I:boolean) = (r5 I:java.lang.reflect.Type) retrofit2.Utils.hasUnresolvableType(java.lang.reflect.Type):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: RETURN  (r5 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.reflect.TypeVariable \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: RETURN  (r2 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.reflect.WildcardType \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003b \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: RETURN  (r2 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003b|0x003b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0040 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003d|0x003d: CONST_STR  (r0 I:java.lang.String) =  \"null\" \l}"];
Node_24 [shape=record,label="{24\:\ 0x0040|0x0040: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0044: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004f: CONST_STR  (r3 I:java.lang.String) =  \"Expected a Class, ParameterizedType, or GenericArrayType, but \<\" \l0x0051: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0054: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0057: CONST_STR  (r5 I:java.lang.String) =  \"\> is of type \" \l0x0059: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r5 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0063: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0066|0x0066: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static boolean retrofit2.Utils.hasUnresolvableType((r5 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_6;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
}

