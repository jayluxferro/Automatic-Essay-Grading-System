digraph "CFG forretrofit2.Utils.throwIfFatal(Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.VirtualMachineError \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.ThreadDeath \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.LinkageError \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: CHECK_CAST  (r1 I:java.lang.LinkageError) = (java.lang.LinkageError) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: CHECK_CAST  (r1 I:java.lang.ThreadDeath) = (java.lang.ThreadDeath) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: CHECK_CAST  (r1 I:java.lang.VirtualMachineError) = (java.lang.VirtualMachineError) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static void retrofit2.Utils.throwIfFatal((r1 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

