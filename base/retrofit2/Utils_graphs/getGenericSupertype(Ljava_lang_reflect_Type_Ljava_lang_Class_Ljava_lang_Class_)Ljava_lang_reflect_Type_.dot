digraph "CFG forretrofit2.Utils.getGenericSupertype(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Class;Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 != r4) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return r3\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r5.isInterface() == false) goto L_0x0034\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|java.lang.Class[] r3 = r4.getInterfaces()\lr0 = 0\lint r1 = r3.length\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:4:0x0009, B:14:0x0031] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000f\-\>B:14:0x0031\l|if (r0 \>= r1) goto L_0x0034\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011}"];
Node_7 [shape=record,label="{7\:\ 0x0013|if (r3[r0] != r5) goto L_0x001c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015}"];
Node_9 [shape=record,label="{9\:\ 0x001b|RETURN\l|return r4.getGenericInterfaces()[r0]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if (r5.isAssignableFrom(r3[r0]) == false) goto L_0x0031\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024}"];
Node_13 [shape=record,label="{13\:\ 0x0030|RETURN\l|return getGenericSupertype(r4.getGenericInterfaces()[r0], r3[r0], r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|LOOP_END\lLOOP:0: B:5:0x000f\-\>B:14:0x0031\l|int r0 = r0 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034}"];
Node_16 [shape=record,label="{16\:\ 0x0038|if (r4.isInterface() != false) goto L_0x005a\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|LOOP_START\lPHI: r4 \l  PHI: (r4v1 java.lang.Class\<?\>) = (r4v0 java.lang.Class\<?\>), (r4v3 java.lang.Class\<?\>) binds: [B:16:0x0038, B:27:0x0058] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:17:0x003a\-\>B:27:0x0058\l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|if (r4 == java.lang.Object.class) goto L_0x005a\l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|java.lang.Class r3 = r4.getSuperclass()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|if (r3 != r5) goto L_0x0049\l}"];
Node_21 [shape=record,label="{21\:\ 0x0044}"];
Node_22 [shape=record,label="{22\:\ 0x0048|RETURN\l|return r4.getGenericSuperclass()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049}"];
Node_24 [shape=record,label="{24\:\ 0x004d|if (r5.isAssignableFrom(r3) == false) goto L_0x0058\l}"];
Node_25 [shape=record,label="{25\:\ 0x004f}"];
Node_26 [shape=record,label="{26\:\ 0x0057|RETURN\l|return getGenericSupertype(r4.getGenericSuperclass(), r3, r5)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|LOOP_END\lLOOP:1: B:17:0x003a\-\>B:27:0x0058\l|r4 = r3\l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|RETURN\l|return r5\l}"];
Node_29 [shape=record,label="{29\:\ 0x0024|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0015|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0034|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0044|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x005a|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x004f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.lang.reflect.Type retrofit2.Utils.getGenericSupertype((r3v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/reflect\/Type;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_31;
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_7 -> Node_30[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_14;
Node_11 -> Node_29[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_5;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_28;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_33;
Node_19 -> Node_20;
Node_20 -> Node_23;
Node_20 -> Node_32[style=dashed];
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_27;
Node_24 -> Node_34[style=dashed];
Node_25 -> Node_26;
Node_27 -> Node_17;
Node_29 -> Node_12;
Node_30 -> Node_8;
Node_31 -> Node_15;
Node_32 -> Node_21;
Node_33 -> Node_28;
Node_34 -> Node_25;
}

