digraph "CFG forretrofit2.Utils.getRawType(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/Class;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"type == null\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) retrofit2.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.Class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CHECK_CAST  (r3 I:java.lang.Class) = (java.lang.Class) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r3 I:java.lang.Class\<?\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CHECK_CAST  (r3 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r3 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r3 I:java.lang.reflect.Type) = (r3 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getRawType():java.lang.reflect.Type type: INTERFACE \l0x0016: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.Class \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CHECK_CAST  (r3 I:java.lang.Class) = (java.lang.Class) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN  (r3 I:java.lang.Class\<?\>) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001f: INVOKE  (r3 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.reflect.GenericArrayType \l0x0025: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: CHECK_CAST  (r3 I:java.lang.reflect.GenericArrayType) = (java.lang.reflect.GenericArrayType) (r3 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  (r3 I:java.lang.reflect.Type) = (r3 I:java.lang.reflect.GenericArrayType) java.lang.reflect.GenericArrayType.getGenericComponentType():java.lang.reflect.Type type: INTERFACE \l0x002e: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.reflect.Type) retrofit2.Utils.getRawType(java.lang.reflect.Type):java.lang.Class type: STATIC \l0x0032: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.lang.Class), (r1 I:int) java.lang.reflect.Array.newInstance(java.lang.Class, int):java.lang.Object type: STATIC \l0x0036: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: RETURN  (r3 I:java.lang.Class\<?\>) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.reflect.TypeVariable \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0042 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: RETURN  (r3 I:java.lang.Class\<?\>) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.reflect.WildcardType \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0053 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: CHECK_CAST  (r3 I:java.lang.reflect.WildcardType) = (java.lang.reflect.WildcardType) (r3 I:?[OBJECT, ARRAY]) \l0x0048: INVOKE  (r3 I:java.lang.reflect.Type[]) = (r3 I:java.lang.reflect.WildcardType) java.lang.reflect.WildcardType.getUpperBounds():java.lang.reflect.Type[] type: INTERFACE \l0x004c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x004e: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.reflect.Type) retrofit2.Utils.getRawType(java.lang.reflect.Type):java.lang.Class type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0052|0x0052: RETURN  (r3 I:java.lang.Class\<?\>) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0053|0x0053: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0055: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0057: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005a: CONST_STR  (r2 I:java.lang.String) =  \"Expected a Class, ParameterizedType, or GenericArrayType, but \<\" \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0062: CONST_STR  (r2 I:java.lang.String) =  \"\> is of type \" \l0x0064: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0067: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x006b: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x006f: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0072: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0076: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0079|0x0079: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static java.lang.Class\<?\> retrofit2.Utils.getRawType((r3 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, ), Ljava\/lang\/Class\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

