digraph "CFG forretrofit2.Retrofit.nextResponseBodyConverter(Lretrofit2\/Converter$Factory;Ljava\/lang\/reflect\/Type;[Ljava\/lang\/annotation\/Annotation;)Lretrofit2\/Converter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|retrofit2.Utils.checkNotNull(r6, \"type == null\")\lretrofit2.Utils.checkNotNull(r7, \"annotations == null\")\lint r0 = r4.converterFactories.indexOf(r5) + 1\lint r1 = r4.converterFactories.size()\lr2 = r0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0019\-\>B:5:0x002a\l|if (r2 \>= r1) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|retrofit2.Converter r3 = r4.converterFactories.get(r2).responseBodyConverter(r6, r7, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|if (r3 == null) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|RETURN\l|return r3\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|LOOP_END\lLOOP:0: B:1:0x0019\-\>B:5:0x002a\l|int r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|java.lang.StringBuilder r7 = new java.lang.StringBuilder(\"Could not locate ResponseBody converter for \")\lr7.append(r6)\lr7.append(\".n\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|if (r5 == null) goto L_0x0066\l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|r7.append(\"  Skipped:\")\lr5 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|LOOP_START\lPHI: r5 \l  PHI: (r5v7 int) = (r5v6 int), (r5v9 int) binds: [B:8:0x003e, B:10:0x0046] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x0044\-\>B:10:0x0046\l|if (r5 \>= r0) goto L_0x0061\l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|LOOP_END\lLOOP:1: B:9:0x0044\-\>B:10:0x0046\l|r7.append(\"n   * \")\lr7.append(r4.converterFactories.get(r5).getClass().getName())\lint r5 = r5 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0061|r7.append(10)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0066|r7.append(\"  Tried:\")\lint r5 = r4.converterFactories.size()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0071|LOOP_START\lPHI: r0 \l  PHI: (r0v5 int) = (r0v4 int), (r0v6 int) binds: [B:12:0x0066, B:14:0x0073] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:13:0x0071\-\>B:14:0x0073\l|if (r0 \>= r5) goto L_0x008e\l}"];
Node_14 [shape=record,label="{14\:\ 0x0073|LOOP_END\lLOOP:2: B:13:0x0071\-\>B:14:0x0073\l|r7.append(\"n   * \")\lr7.append(r4.converterFactories.get(r0).getClass().getName())\lint r0 = r0 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x008e}"];
Node_16 [shape=record,label="{16\:\ 0x0097|throw new java.lang.IllegalArgumentException(r7.toString())\l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x008e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public retrofit2.Converter\<okhttp3.ResponseBody, T\> retrofit2.Retrofit.nextResponseBodyConverter((r4v0 'this' retrofit2.Retrofit A[IMMUTABLE_TYPE, THIS]), (r5v0 retrofit2.Converter$Factory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.annotation.Annotation[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lretrofit2\/Converter$Factory;, Ljava\/lang\/reflect\/Type;, [, Ljava\/lang\/annotation\/Annotation;, ), Lretrofit2\/Converter\<, Lokhttp3\/ResponseBody;, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_17[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_13;
Node_15 -> Node_16;
Node_17 -> Node_4;
Node_18 -> Node_6;
Node_19 -> Node_11;
Node_20 -> Node_15;
}

