digraph "CFG forretrofit2.Retrofit.loadServiceMethod(Ljava\/lang\/reflect\/Method;)Lretrofit2\/ServiceMethod;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|retrofit2.ServiceMethod r0 = r3.serviceMethodCache.get(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 == null) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return r0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|java.util.Map\<java.lang.reflect.Method, retrofit2.ServiceMethod\<?, ?\>\> r0 = r3.serviceMethodCache\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|monitor\-enter(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ ?|retrofit2.ServiceMethod r1 = r3.serviceMethodCache.get(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r1 != null) goto L_0x0026\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|retrofit2.ServiceMethod r1 = new retrofit2.ServiceMethod.Builder(r3, r4).build()\lr3.serviceMethodCache.put(r4, r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|PHI: r1 \l  PHI: (r1v3 retrofit2.ServiceMethod\<?, ?\>) = (r1v2 retrofit2.ServiceMethod\<?, ?\>), (r1v5 retrofit2.ServiceMethod\<?, ?\>) binds: [B:7:0x0016, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|RETURN\l|return r1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|REMOVE\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|REMOVE\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{retrofit2.ServiceMethod\<?, ?\> retrofit2.Retrofit.loadServiceMethod((r3v0 'this' retrofit2.Retrofit A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.reflect.Method A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Method;, ), Lretrofit2\/ServiceMethod\<, **\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

