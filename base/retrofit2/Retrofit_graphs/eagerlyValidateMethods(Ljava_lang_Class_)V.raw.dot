digraph "CFG forretrofit2.Retrofit.eagerlyValidateMethods(Ljava\/lang\/Class;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:retrofit2.Platform) =  retrofit2.Platform.get():retrofit2.Platform type: STATIC \l0x0004: INVOKE  (r6 I:java.lang.reflect.Method[]) = (r6 I:java.lang.Class) java.lang.Class.getDeclaredMethods():java.lang.reflect.Method[] type: VIRTUAL \l0x0008: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x000e: INVOKE  (r4 I:boolean) = (r0 I:retrofit2.Platform), (r3 I:java.lang.reflect.Method) retrofit2.Platform.isDefaultMethod(java.lang.reflect.Method):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r5 I:retrofit2.Retrofit), (r3 I:java.lang.reflect.Method) retrofit2.Retrofit.loadServiceMethod(java.lang.reflect.Method):retrofit2.ServiceMethod type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{private void retrofit2.Retrofit.eagerlyValidateMethods((r5 'this' I:retrofit2.Retrofit A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
}

