digraph "CFG forretrofit2.Retrofit.nextResponseBodyConverter(Lretrofit2\/Converter$Factory;Ljava\/lang\/reflect\/Type;[Ljava\/lang\/annotation\/Annotation;)Lretrofit2\/Converter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"type == null\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) retrofit2.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"annotations == null\" \l0x0007: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) retrofit2.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x000a: IGET  (r0 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x000c: INVOKE  (r0 I:int) = (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.indexOf(java.lang.Object):int type: INTERFACE \l0x0010: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0012: IGET  (r1 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x0014: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0018: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: IGET  (r3 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x001d: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r3 I:retrofit2.Converter$Factory) = (retrofit2.Converter$Factory) (r3 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r3 I:retrofit2.Converter) = \l  (r3 I:retrofit2.Converter$Factory)\l  (r6 I:java.lang.reflect.Type)\l  (r7 I:java.lang.annotation.Annotation[])\l  (r4 I:retrofit2.Retrofit)\l retrofit2.Converter.Factory.responseBodyConverter(java.lang.reflect.Type, java.lang.annotation.Annotation[], retrofit2.Retrofit):retrofit2.Converter type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: RETURN  (r3 I:retrofit2.Converter\<okhttp3.ResponseBody, T\>) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"Could not locate ResponseBody converter for \" \l0x0031: INVOKE  (r7 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.\<init\>(java.lang.String):void type: DIRECT \l0x0034: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0037: CONST_STR  (r6 I:java.lang.String) =  \".\l\" \l0x0039: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0066 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: CONST_STR  (r5 I:java.lang.String) =  \"  Skipped:\" \l0x0040: INVOKE  (r7 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x0061 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: CONST_STR  (r6 I:java.lang.String) =  \"\l   * \" \l0x0048: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: IGET  (r6 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x004d: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0051: CHECK_CAST  (r6 I:retrofit2.Converter$Factory) = (retrofit2.Converter$Factory) (r6 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  (r6 I:java.lang.Class) = (r6 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0057: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x005b: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005e: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0061|0x0061: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0063: INVOKE  (r7 I:java.lang.StringBuilder), (r5 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0066|0x0066: CONST_STR  (r5 I:java.lang.String) =  \"  Tried:\" \l0x0068: INVOKE  (r7 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: IGET  (r5 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x006d: INVOKE  (r5 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0071|0x0071: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:15:0x008e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0073|0x0073: CONST_STR  (r6 I:java.lang.String) =  \"\l   * \" \l0x0075: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0078: IGET  (r6 I:java.util.List\<retrofit2.Converter$Factory\>) = (r4 I:retrofit2.Retrofit) retrofit2.Retrofit.converterFactories java.util.List \l0x007a: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x007e: CHECK_CAST  (r6 I:retrofit2.Converter$Factory) = (retrofit2.Converter$Factory) (r6 I:?[OBJECT, ARRAY]) \l0x0080: INVOKE  (r6 I:java.lang.Class) = (r6 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0084: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x0088: INVOKE  (r7 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x008e|0x008e: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0090: INVOKE  (r6 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0094: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|0x0097: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public retrofit2.Converter\<okhttp3.ResponseBody, T\> retrofit2.Retrofit.nextResponseBodyConverter((r4 'this' I:retrofit2.Retrofit A[IMMUTABLE_TYPE, THIS]), (r5 I:retrofit2.Converter$Factory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.annotation.Annotation[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lretrofit2\/Converter$Factory;, Ljava\/lang\/reflect\/Type;, [, Ljava\/lang\/annotation\/Annotation;, ), Lretrofit2\/Converter\<, Lokhttp3\/ResponseBody;, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16;
}

