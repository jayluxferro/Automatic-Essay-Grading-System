digraph "CFG forretrofit2.Retrofit.eagerlyValidateMethods(Ljava\/lang\/Class;)V" {
subgraph cluster_Region_305317728 {
label = "R(2:0|(3:2|(1:4)(0)|5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|retrofit2.Platform retrofit2.Platform r0 = retrofit2.Platform.get()\lint int r1 = r6.getDeclaredMethods().length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1289302637 {
label = "LOOP:0: (3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:5:0x0017\l|if (r2 \< r1) goto L_0x000c\l}"];
subgraph cluster_Region_595430309 {
label = "R(3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000c|r3 = r6[r2]\l}"];
subgraph cluster_IfRegion_361366744 {
label = "IF [B:3:0x0012] THEN: R(1:4) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r0.isDefaultMethod(r3) == false) goto L_0x0014\l}"];
subgraph cluster_Region_666510418 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|loadServiceMethod(r3)\l}"];
}
subgraph cluster_Region_116364702 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_5 [shape=record,label="{5\:\ 0x0017|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:5:0x0017\l|r2++\l}"];
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ 0x001a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void retrofit2.Retrofit.eagerlyValidateMethods((r5v0 'this' retrofit2.Retrofit A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

