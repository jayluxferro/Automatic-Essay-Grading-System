digraph "CFG forretrofit2.OkHttpCall.ExceptionCatchingRequestBody.1.read(Lokio\/Buffer;J)J" {
subgraph cluster_Region_1111591604 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1437031595 {
label = "Try: R(1:2) catches: R(3:3|4|5)";
node [shape=record,color=blue];
subgraph cluster_Region_30594001 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return super.read(r1, r2)\l}"];
}
subgraph cluster_Region_1952733053 {
label = "R(3:3|4|5) | ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|retrofit2.OkHttpCall.ExceptionCatchingRequestBody.this.thrownException = r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|throw r1\l}"];
}
}
}
subgraph cluster_Region_1952733053 {
label = "R(3:3|4|5) | ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|retrofit2.OkHttpCall.ExceptionCatchingRequestBody.this.thrownException = r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|throw r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ IOException \-\> 0x0005 \}\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public long retrofit2.OkHttpCall.ExceptionCatchingRequestBody.1.read((r0v0 'this' retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1 A[IMMUTABLE_TYPE, THIS]), (r1v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
}

