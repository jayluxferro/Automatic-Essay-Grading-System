digraph "CFG forretrofit2.ParameterHandler.RawPart.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CHECK_CAST  (r2 I:okhttp3.MultipartBody$Part) = (okhttp3.MultipartBody$Part) (r2 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  \l  (r0 I:retrofit2.ParameterHandler$RawPart)\l  (r1 I:retrofit2.RequestBuilder)\l  (r2 I:okhttp3.MultipartBody$Part)\l retrofit2.ParameterHandler.RawPart.apply(retrofit2.RequestBuilder, okhttp3.MultipartBody$Part):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: RETURN   \l}"];
MethodNode[shape=record,label="{\/* bridge *\/ \/* synthetic *\/ void retrofit2.ParameterHandler.RawPart.apply((r0 'this' I:retrofit2.ParameterHandler$RawPart A[IMMUTABLE_TYPE, THIS]), (r1 I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

