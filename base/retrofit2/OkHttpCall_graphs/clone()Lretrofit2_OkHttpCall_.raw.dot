digraph "CFG forretrofit2.OkHttpCall.clone()Lretrofit2\/OkHttpCall;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:retrofit2.OkHttpCall) =  retrofit2.OkHttpCall \l0x0002: IGET  (r1 I:retrofit2.ServiceMethod\<T, ?\>) = (r3 I:retrofit2.OkHttpCall) retrofit2.OkHttpCall.serviceMethod retrofit2.ServiceMethod \l0x0004: IGET  (r2 I:java.lang.Object[]) = (r3 I:retrofit2.OkHttpCall) retrofit2.OkHttpCall.args java.lang.Object[] \l0x0006: INVOKE  \l  (r0 I:retrofit2.OkHttpCall)\l  (r1 I:retrofit2.ServiceMethod)\l  (r2 I:java.lang.Object[])\l retrofit2.OkHttpCall.\<init\>(retrofit2.ServiceMethod, java.lang.Object[]):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: RETURN  (r0 I:retrofit2.OkHttpCall\<T\>) \l}"];
MethodNode[shape=record,label="{public retrofit2.OkHttpCall\<T\> retrofit2.OkHttpCall.clone((r3 'this' I:retrofit2.OkHttpCall A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lretrofit2\/OkHttpCall\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

