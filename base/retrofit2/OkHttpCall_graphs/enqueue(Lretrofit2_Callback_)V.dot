digraph "CFG forretrofit2.OkHttpCall.enqueue(Lretrofit2\/Callback;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|retrofit2.Utils.checkNotNull(r4, \"callback == null\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|monitor\-enter(r3)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|Catch:\{ Throwable \-\> 0x001d \}\l|if (r3.executed != false) goto L_0x003a     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|Catch:\{ Throwable \-\> 0x001d \}\l|r3.executed = true     \/\/ Catch:\{ Throwable \-\> 0x001d \}\lokhttp3.Call r0 = r3.rawCall     \/\/ Catch:\{ Throwable \-\> 0x001d \}\ljava.lang.Throwable r1 = r3.creationFailure     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r0 != null) goto L_0x0023\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|if (r1 != null) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|SYNTHETIC\lSplitter:B:8:0x0015\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ Throwable \-\> 0x001d \}\lSplitter:B:8:0x0015\l|okhttp3.Call r2 = createRawCall()     \/\/ Catch:\{ Throwable \-\> 0x001d \}\lr3.rawCall = r2     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|r0 = r2\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|ExcHandler: Throwable (th java.lang.Throwable)\lSplitter:B:8:0x0015\l|java.lang.Throwable r1 = th\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|SYNTHETIC\lSplitter:B:12:0x001e\l}"];
Node_13 [shape=record,label="{13\:\ ?|Catch:\{ Throwable \-\> 0x001d \}\lSplitter:B:12:0x001e\l|retrofit2.Utils.throwIfFatal(r1)     \/\/ Catch:\{ Throwable \-\> 0x001d \}\lr3.creationFailure = r1     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|Catch:\{ Throwable \-\> 0x001d \}\lPHI: r0 r1 \l  PHI: (r0v5 okhttp3.Call) = (r0v4 okhttp3.Call), (r0v4 okhttp3.Call), (r0v4 okhttp3.Call), (r0v6 okhttp3.Call) binds: [B:6:0x0011, B:7:0x0013, B:13:?, B:10:0x001b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'th' java.lang.Throwable) = (r1v0 'th' java.lang.Throwable), (r1v0 'th' java.lang.Throwable), (r1v4 'th' java.lang.Throwable), (r1v0 'th' java.lang.Throwable) binds: [B:6:0x0011, B:7:0x0013, B:13:?, B:10:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r3)     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|if (r1 == null) goto L_0x002a\l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|r4.onFailure(r3, r1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ 0x002a}"];
Node_19 [shape=record,label="{19\:\ 0x002c|if (r3.canceled == false) goto L_0x0031\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|r0.cancel()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|r0.enqueue(new retrofit2.OkHttpCall.C15371(r3))\l}"];
Node_22 [shape=record,label="{22\:\ 0x0039|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|SYNTHETIC\lSplitter:B:23:0x003a\l}"];
Node_24 [shape=record,label="{24\:\ ?|Catch:\{ Throwable \-\> 0x001d \}\lSplitter:B:23:0x003a\l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|Catch:\{ Throwable \-\> 0x001d \}\l|throw new java.lang.IllegalStateException(\"Already executed.\")     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_26 [shape=record,label="{26\:\ 0x0042|REMOVE\lCatch:\{ Throwable \-\> 0x001d \}\l|java.lang.Throwable r4 = move\-exception     \/\/ Catch:\{ Throwable \-\> 0x001d \}\l}"];
Node_27 [shape=record,label="{27\:\ 0x0043|REMOVE\l}"];
Node_28 [shape=record,label="{28\:\ 0x0044|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public void retrofit2.OkHttpCall.enqueue((r3v0 'this' retrofit2.OkHttpCall A[IMMUTABLE_TYPE, THIS]), (r4v0 retrofit2.Callback\<T\> A[DONT_INLINE, IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/Callback\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_26;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

