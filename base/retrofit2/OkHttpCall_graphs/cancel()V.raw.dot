digraph "CFG forretrofit2.OkHttpCall.cancel()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IPUT  (r0 I:boolean), (r1 I:retrofit2.OkHttpCall) retrofit2.OkHttpCall.canceled boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0004\l|0x0004: IGET  (r0 I:okhttp3.Call) = (r1 I:retrofit2.OkHttpCall) retrofit2.OkHttpCall.rawCall okhttp3.Call A[Catch:\{ all \-\> 0x000d \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000d \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: INVOKE  (r0 I:okhttp3.Call) okhttp3.Call.cancel():void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|ExcHandler: all null\lSplitter:B:2:0x0004\l|0x000d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|SYNTHETIC\lSplitter:B:9:0x000e\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000e\l|0x000e: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void retrofit2.OkHttpCall.cancel((r1 'this' I:retrofit2.OkHttpCall A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_8;
}

