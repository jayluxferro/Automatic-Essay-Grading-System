digraph "CFG forretrofit2.ParameterHandler.QueryName.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r0 I:retrofit2.Converter\<T, java.lang.String\>) = (r2 I:retrofit2.ParameterHandler$QueryName) retrofit2.ParameterHandler.QueryName.nameConverter retrofit2.Converter \l0x0005: INVOKE  (r4 I:java.lang.Object) = (r0 I:retrofit2.Converter), (r4 I:java.lang.Object) retrofit2.Converter.convert(java.lang.Object):java.lang.Object type: INTERFACE \l0x0009: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: IGET  (r1 I:boolean) = (r2 I:retrofit2.ParameterHandler$QueryName) retrofit2.ParameterHandler.QueryName.encoded boolean \l0x000e: INVOKE  \l  (r3 I:retrofit2.RequestBuilder)\l  (r4 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r1 I:boolean)\l retrofit2.RequestBuilder.addQueryParam(java.lang.String, java.lang.String, boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.ParameterHandler.QueryName.apply((r2 'this' I:retrofit2.ParameterHandler$QueryName A[IMMUTABLE_TYPE, THIS]), (r3 I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/RequestBuilder;, TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
}

