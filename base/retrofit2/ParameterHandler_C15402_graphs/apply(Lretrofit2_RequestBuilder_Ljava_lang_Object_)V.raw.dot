digraph "CFG forretrofit2.ParameterHandler.2.apply(Lretrofit2\/RequestBuilder;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: INVOKE  (r1 I:int) = (r6 I:java.lang.Object) java.lang.reflect.Array.getLength(java.lang.Object):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r2 I:retrofit2.ParameterHandler) = (r4 I:retrofit2.ParameterHandler$2) retrofit2.ParameterHandler.2.this$0 retrofit2.ParameterHandler \l0x000c: INVOKE  (r3 I:java.lang.Object) = (r6 I:java.lang.Object), (r0 I:int) java.lang.reflect.Array.get(java.lang.Object, int):java.lang.Object type: STATIC \l0x0010: INVOKE  \l  (r2 I:retrofit2.ParameterHandler)\l  (r5 I:retrofit2.RequestBuilder)\l  (r3 I:java.lang.Object)\l retrofit2.ParameterHandler.apply(retrofit2.RequestBuilder, java.lang.Object):void type: VIRTUAL \l0x0013: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{void retrofit2.ParameterHandler.2.apply((r4 'this' I:retrofit2.ParameterHandler$2 A[IMMUTABLE_TYPE, THIS]), (r5 I:retrofit2.RequestBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
}

