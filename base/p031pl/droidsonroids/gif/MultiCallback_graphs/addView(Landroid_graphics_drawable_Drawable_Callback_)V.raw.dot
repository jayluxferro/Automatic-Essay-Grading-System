digraph "CFG forpl.droidsonroids.gif.MultiCallback.addView(Landroid\/graphics\/drawable\/Drawable$Callback;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:java.util.concurrent.CopyOnWriteArrayList\<pl.droidsonroids.gif.MultiCallback$CallbackWeakReference\>) = (r3 I:pl.droidsonroids.gif.MultiCallback) pl.droidsonroids.gif.MultiCallback.mCallbacks java.util.concurrent.CopyOnWriteArrayList \l0x0003: INVOKE  (r1 I:int) = (r1 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r1 I:java.util.concurrent.CopyOnWriteArrayList\<pl.droidsonroids.gif.MultiCallback$CallbackWeakReference\>) = (r3 I:pl.droidsonroids.gif.MultiCallback) pl.droidsonroids.gif.MultiCallback.mCallbacks java.util.concurrent.CopyOnWriteArrayList \l0x000b: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:java.util.concurrent.CopyOnWriteArrayList)\l  (r0 I:int)\l java.util.concurrent.CopyOnWriteArrayList.get(int):java.lang.Object type: VIRTUAL \l0x000f: CHECK_CAST  (r1 I:pl.droidsonroids.gif.MultiCallback$CallbackWeakReference) = (pl.droidsonroids.gif.MultiCallback$CallbackWeakReference) (r1 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:pl.droidsonroids.gif.MultiCallback$CallbackWeakReference)\l pl.droidsonroids.gif.MultiCallback.CallbackWeakReference.get():java.lang.Object type: VIRTUAL \l0x0015: CHECK_CAST  (r2 I:android.graphics.drawable.Drawable$Callback) = (android.graphics.drawable.Drawable$Callback) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IGET  (r2 I:java.util.concurrent.CopyOnWriteArrayList\<pl.droidsonroids.gif.MultiCallback$CallbackWeakReference\>) = (r3 I:pl.droidsonroids.gif.MultiCallback) pl.droidsonroids.gif.MultiCallback.mCallbacks java.util.concurrent.CopyOnWriteArrayList \l0x001b: INVOKE  \l  (r2 I:java.util.concurrent.CopyOnWriteArrayList)\l  (r1 I:java.lang.Object)\l java.util.concurrent.CopyOnWriteArrayList.remove(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IGET  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<pl.droidsonroids.gif.MultiCallback$CallbackWeakReference\>) = (r3 I:pl.droidsonroids.gif.MultiCallback) pl.droidsonroids.gif.MultiCallback.mCallbacks java.util.concurrent.CopyOnWriteArrayList \l0x0023: NEW_INSTANCE  (r1 I:pl.droidsonroids.gif.MultiCallback$CallbackWeakReference) =  pl.droidsonroids.gif.MultiCallback$CallbackWeakReference \l0x0025: INVOKE  \l  (r1 I:pl.droidsonroids.gif.MultiCallback$CallbackWeakReference)\l  (r4 I:android.graphics.drawable.Drawable$Callback)\l pl.droidsonroids.gif.MultiCallback.CallbackWeakReference.\<init\>(android.graphics.drawable.Drawable$Callback):void type: DIRECT \l0x0028: INVOKE  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList)\l  (r1 I:java.lang.Object)\l java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: RETURN   \l}"];
MethodNode[shape=record,label="{public void pl.droidsonroids.gif.MultiCallback.addView((r3 'this' I:pl.droidsonroids.gif.MultiCallback A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.drawable.Drawable$Callback A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

