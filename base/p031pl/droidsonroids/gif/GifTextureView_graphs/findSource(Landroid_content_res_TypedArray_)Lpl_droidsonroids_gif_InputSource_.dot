digraph "CFG forpl.droidsonroids.gif.GifTextureView.findSource(Landroid\/content\/res\/TypedArray;)Lpl\/droidsonroids\/gif\/InputSource;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.util.TypedValue r0 = new android.util.TypedValue()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r3.getValue(p031pl.droidsonroids.gif.C1530R.styleable.GifTextureView_gifSource, r0) != false) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r0.resourceId == 0) goto L_0x0056\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|java.lang.String r1 = r3.getResources().getResourceTypeName(r0.resourceId)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if (p031pl.droidsonroids.gif.GifViewUtils.SUPPORTED_RESOURCE_TYPE_NAMES.contains(r1) == false) goto L_0x0031\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025}"];
Node_8 [shape=record,label="{8\:\ 0x0030|RETURN\l|return new p031pl.droidsonroids.gif.InputSource.ResourcesSource(r3.getResources(), r0.resourceId)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031}"];
Node_10 [shape=record,label="{10\:\ 0x0037|if (\"string\".equals(r1) == false) goto L_0x003a\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Expected string, drawable, mipmap or raw resource type. '\")\lr0.append(r1)\lr0.append(\"' is not supported\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0056}"];
Node_14 [shape=record,label="{14\:\ 0x0069|RETURN\l|return new p031pl.droidsonroids.gif.InputSource.AssetSource(r3.getResources().getAssets(), r0.string.toString())\l}"];
MethodNode[shape=record,label="{private static pl.droidsonroids.gif.InputSource pl.droidsonroids.gif.GifTextureView.findSource((r3v0 android.content.res.TypedArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
}

