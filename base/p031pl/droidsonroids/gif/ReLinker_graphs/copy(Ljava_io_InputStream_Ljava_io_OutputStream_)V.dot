digraph "CFG forpl.droidsonroids.gif.ReLinker.copy(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] r0 = new byte[8192]\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lLOOP:0: B:1:0x0004\-\>B:4:0x000c\l|int r1 = r3.read(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r1 != \-1) goto L_0x000c\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:4:0x000c\l|r4.write(r0, 0, r1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void pl.droidsonroids.gif.ReLinker.copy((r3v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_5 -> Node_3;
}

