digraph "CFG forpl.droidsonroids.gif.ReLinker.openZipFile(Ljava\/io\/File;)Ljava\/util\/zip\/ZipFile;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: ARITH  (r1 I:int) = (r0 I:int) + (1 int) \l0x0003: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|SYNTHETIC\lSplitter:B:3:0x0006\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0006\l|0x0006: NEW_INSTANCE  (r0 I:java.util.zip.ZipFile) =  java.util.zip.ZipFile A[Catch:\{ IOException \-\> 0x000d \}, TRY_ENTER]\l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x000d \}]\l0x0009: INVOKE  \l  (r0 I:java.util.zip.ZipFile)\l  (r3 I:java.io.File)\l  (r2 I:int)\l java.util.zip.ZipFile.\<init\>(java.io.File, int):void type: DIRECT A[Catch:\{ IOException \-\> 0x000d \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:3:0x0006\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: RETURN  (r0 I:java.util.zip.ZipFile) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0015: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0017: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001a: CONST_STR  (r2 I:java.lang.String) =  \"Could not open APK file: \" \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.io.File) java.io.File.getAbsolutePath():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0026: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002a: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static java.util.zip.ZipFile pl.droidsonroids.gif.ReLinker.openZipFile((r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_7;
Node_4 -> Node_9;
Node_6 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
}

