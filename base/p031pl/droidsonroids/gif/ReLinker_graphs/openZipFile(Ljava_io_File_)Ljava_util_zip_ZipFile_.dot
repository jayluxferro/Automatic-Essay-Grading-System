digraph "CFG forpl.droidsonroids.gif.ReLinker.openZipFile(Ljava\/io\/File;)Ljava\/util\/zip\/ZipFile;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v5 int) binds: [B:0:0x0000, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x000d\l|int r1 = r0 + 1\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r0 \>= 5) goto L_0x000f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|SYNTHETIC\lSplitter:B:3:0x0006\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ IOException \-\> 0x000d \}\lSplitter:B:3:0x0006\l|java.util.zip.ZipFile r0 = new java.util.zip.ZipFile(r3, 1)     \/\/ Catch:\{ IOException \-\> 0x000d \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x000d\l|r0 = r1\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:3:0x0006\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|r0 = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|PHI: r0 \l  PHI: (r0v3 java.util.zip.ZipFile) = (r0v2 java.util.zip.ZipFile), (r0v6 java.util.zip.ZipFile) binds: [B:7:0x000f, B:12:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L_0x0013\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|RETURN\l|return r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Could not open APK file: \")\lr1.append(r3.getAbsolutePath())\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.util.zip.ZipFile pl.droidsonroids.gif.ReLinker.openZipFile((r3v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_6;
Node_4 -> Node_12;
Node_5 -> Node_1;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_8;
Node_13 -> Node_7;
}

