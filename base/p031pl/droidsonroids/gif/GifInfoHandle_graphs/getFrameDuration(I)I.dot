digraph "CFG forpl.droidsonroids.gif.GifInfoHandle.getFrameDuration(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r3 \< 0) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ all \-\> 0x0013 \}\lSplitter:B:2:0x0003\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|Catch:\{ all \-\> 0x0013 \}\l|if (r3 \>= getNumberOfFrames(r2.gifInfoPtr)) goto L_0x0015     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|Catch:\{ all \-\> 0x0013 \}\l|int r3 = getFrameDuration(r2.gifInfoPtr, r3)     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|Catch:\{ all \-\> 0x0013 \}\l|monitor\-exit(r2)     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\lCatch:\{ all \-\> 0x0013 \}\l|return r3     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|Catch:\{ all \-\> 0x0013 \}\lExcHandler: all (r3v2 'th' java.lang.Throwable A[CUSTOM_DECLARE, Catch:\{ all \-\> 0x0013 \}])\lSplitter:B:2:0x0003\l|java.lang.Throwable r3 = move\-exception     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|Catch:\{ all \-\> 0x0013 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|Catch:\{ all \-\> 0x0013 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|Catch:\{ all \-\> 0x0013 \}\l|throw new java.lang.IndexOutOfBoundsException(\"Frame index is out of bounds\")     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d}"];
Node_13 [shape=record,label="{13\:\ 0x001e|throw r3\l}"];
MethodNode[shape=record,label="{int pl.droidsonroids.gif.GifInfoHandle.getFrameDuration((r2v0 'this' pl.droidsonroids.gif.GifInfoHandle A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.IntRange, \{from=0\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

