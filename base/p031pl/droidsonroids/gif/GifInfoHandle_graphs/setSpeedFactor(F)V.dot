digraph "CFG forpl.droidsonroids.gif.GifInfoHandle.setSpeedFactor(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r3 \> 0.0f ? 1 : (r3 == 0.0f ? 0 : \-1)) \<= 0) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (java.lang.Float.isNaN(r3) != false) goto L_0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if ((r3 \> 4.656613E\-10f ? 1 : (r3 == 4.656613E\-10f ? 0 : \-1)) \>= 0) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|r3 = 4.656613E\-10f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|PHI: r3 \l  PHI: (r3v2 float) = (r3v0 float), (r3v4 float) binds: [B:5:0x000f, B:6:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-enter(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ ?|setSpeedFactor(r2.gifInfoPtr, r3)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|monitor\-exit(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|REMOVE\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|REMOVE\l|throw r3\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e}"];
Node_16 [shape=record,label="{16\:\ 0x0025|throw new java.lang.IllegalArgumentException(\"Speed factor is not positive\")\l}"];
MethodNode[shape=record,label="{void pl.droidsonroids.gif.GifInfoHandle.setSpeedFactor((r2v0 'this' pl.droidsonroids.gif.GifInfoHandle A[IMMUTABLE_TYPE, THIS]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0, fromInclusive=false\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

