digraph "CFG forpl.droidsonroids.gif.GifInfoHandle.\<init\>(Landroid\/content\/res\/AssetFileDescriptor;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0015 \}\lSplitter:B:1:0x0003\l|r3.gifInfoPtr = openFd(r4.getFileDescriptor(), r4.getStartOffset())     \/\/ Catch:\{ all \-\> 0x0015 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|SYNTHETIC\lSplitter:B:3:0x0011\l}"];
Node_4 [shape=record,label="{4\:\ ?|DONT_GENERATE\lCatch:\{ IOException \-\> 0x0014 \}\lSplitter:B:3:0x0011\l|r4.close()     \/\/ Catch:\{ IOException \-\> 0x0014 \}\l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:3:0x0011\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|ExcHandler:  FINALLY\lSplitter:B:1:0x0003\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|SYNTHETIC\lSplitter:B:7:0x0016\l}"];
Node_8 [shape=record,label="{8\:\ ?|FINALLY_INSNS\lCatch:\{ IOException \-\> 0x0019 \}\lSplitter:B:7:0x0016\l|r4.close()     \/\/ Catch:\{ IOException \-\> 0x0019 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|throw r0\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:7:0x0016\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void pl.droidsonroids.gif.GifInfoHandle.\<init\>((r3v0 'this' pl.droidsonroids.gif.GifInfoHandle A[IMMUTABLE_TYPE, THIS]), (r4v0 android.content.res.AssetFileDescriptor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_9;
}

