digraph "CFG forpl.droidsonroids.gif.GifError.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"NO_ERROR\" \l0x0004: CONST_STR  (r2 I:java.lang.String) =  \"No error\" \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r3 I:int)\l  (r3 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x000a: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NO_ERROR pl.droidsonroids.gif.GifError \l0x000c: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"OPEN_FAILED\" \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Failed to open given input\" \l0x0012: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0013: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (101(0x65, float:1.42E\-43) ?[int, float, short, byte, char])\l \l0x0015: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0018: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.OPEN_FAILED pl.droidsonroids.gif.GifError \l0x001a: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"READ_FAILED\" \l0x001e: CONST_STR  (r2 I:java.lang.String) =  \"Failed to read from given input\" \l0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0021: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l0x0023: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0026: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.READ_FAILED pl.droidsonroids.gif.GifError \l0x0028: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x002a: CONST_STR  (r1 I:java.lang.String) =  \"NOT_GIF_FILE\" \l0x002c: CONST_STR  (r2 I:java.lang.String) =  \"Data is not in GIF format\" \l0x002e: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x002f: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (103(0x67, float:1.44E\-43) ?[int, float, short, byte, char])\l \l0x0031: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r6 I:int)\l  (r7 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0034: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NOT_GIF_FILE pl.droidsonroids.gif.GifError \l0x0036: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0038: CONST_STR  (r1 I:java.lang.String) =  \"NO_SCRN_DSCR\" \l0x003a: CONST_STR  (r2 I:java.lang.String) =  \"No screen descriptor detected\" \l0x003c: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x003d: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (104(0x68, float:1.46E\-43) ?[int, float, short, byte, char])\l \l0x003f: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r7 I:int)\l  (r8 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0042: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NO_SCRN_DSCR pl.droidsonroids.gif.GifError \l0x0044: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0046: CONST_STR  (r1 I:java.lang.String) =  \"NO_IMAG_DSCR\" \l0x0048: CONST_STR  (r2 I:java.lang.String) =  \"No image descriptor detected\" \l0x004a: CONST  (r8 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x004b: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (105(0x69, float:1.47E\-43) ?[int, float, short, byte, char])\l \l0x004d: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r8 I:int)\l  (r9 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0050: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NO_IMAG_DSCR pl.droidsonroids.gif.GifError \l0x0052: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0054: CONST_STR  (r1 I:java.lang.String) =  \"NO_COLOR_MAP\" \l0x0056: CONST_STR  (r2 I:java.lang.String) =  \"Neither global nor local color map found\" \l0x0058: CONST  (r9 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0059: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (106(0x6a, float:1.49E\-43) ?[int, float, short, byte, char])\l \l0x005b: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r9 I:int)\l  (r10 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x005e: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NO_COLOR_MAP pl.droidsonroids.gif.GifError \l0x0060: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0062: CONST_STR  (r1 I:java.lang.String) =  \"WRONG_RECORD\" \l0x0064: CONST_STR  (r2 I:java.lang.String) =  \"Wrong record type detected\" \l0x0066: CONST  (r10 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0067: CONST  (r11 I:?[int, float, short, byte, char]) = (107(0x6b, float:1.5E\-43) ?[int, float, short, byte, char]) \l0x0069: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r10 I:int)\l  (r11 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x006c: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.WRONG_RECORD pl.droidsonroids.gif.GifError \l0x006e: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0070: CONST_STR  (r1 I:java.lang.String) =  \"DATA_TOO_BIG\" \l0x0072: CONST_STR  (r2 I:java.lang.String) =  \"Number of pixels bigger than width * height\" \l0x0074: CONST  (r11 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0076: CONST  (r12 I:?[int, float, short, byte, char]) = \l  (108(0x6c, float:1.51E\-43) ?[int, float, short, byte, char])\l \l0x0078: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r11 I:int)\l  (r12 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x007b: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.DATA_TOO_BIG pl.droidsonroids.gif.GifError \l0x007d: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x007f: CONST_STR  (r1 I:java.lang.String) =  \"NOT_ENOUGH_MEM\" \l0x0081: CONST_STR  (r2 I:java.lang.String) =  \"Failed to allocate required memory\" \l0x0083: CONST  (r12 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0085: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (109(0x6d, float:1.53E\-43) ?[int, float, short, byte, char])\l \l0x0087: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r12 I:int)\l  (r13 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x008a: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NOT_ENOUGH_MEM pl.droidsonroids.gif.GifError \l0x008c: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x008e: CONST_STR  (r1 I:java.lang.String) =  \"CLOSE_FAILED\" \l0x0090: CONST_STR  (r2 I:java.lang.String) =  \"Failed to close given input\" \l0x0092: CONST  (r13 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0094: CONST  (r14 I:?[int, float, short, byte, char]) = \l  (110(0x6e, float:1.54E\-43) ?[int, float, short, byte, char])\l \l0x0096: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r13 I:int)\l  (r14 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0099: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.CLOSE_FAILED pl.droidsonroids.gif.GifError \l0x009b: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x009d: CONST_STR  (r1 I:java.lang.String) =  \"NOT_READABLE\" \l0x009f: CONST_STR  (r2 I:java.lang.String) =  \"Given file was not opened for read\" \l0x00a1: CONST  (r14 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x00a3: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (111(0x6f, float:1.56E\-43) ?[int, float, short, byte, char])\l \l0x00a5: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00a8: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NOT_READABLE pl.droidsonroids.gif.GifError \l0x00aa: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00ac: CONST_STR  (r1 I:java.lang.String) =  \"IMAGE_DEFECT\" \l0x00ae: CONST_STR  (r2 I:java.lang.String) =  \"Image is defective, decoding aborted\" \l0x00b0: CONST  (r15 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x00b2: CONST  (r14 I:?[int, float, short, byte, char]) = \l  (112(0x70, float:1.57E\-43) ?[int, float, short, byte, char])\l \l0x00b4: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r15 I:int)\l  (r14 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00b7: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.IMAGE_DEFECT pl.droidsonroids.gif.GifError \l0x00b9: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00bb: CONST_STR  (r1 I:java.lang.String) =  \"EOF_TOO_SOON\" \l0x00bd: CONST_STR  (r2 I:java.lang.String) =  \"Image EOF detected before image complete\" \l0x00bf: CONST  (r14 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x00c1: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (113(0x71, float:1.58E\-43) ?[int, float, short, byte, char])\l \l0x00c3: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00c6: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.EOF_TOO_SOON pl.droidsonroids.gif.GifError \l0x00c8: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00ca: CONST_STR  (r1 I:java.lang.String) =  \"NO_FRAMES\" \l0x00cc: CONST_STR  (r2 I:java.lang.String) =  \"No frames found, at least one frame required\" \l0x00ce: CONST  (r15 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x00d0: CONST  (r14 I:?[int, float, short, byte, char]) = \l  (1000(0x3e8, float:1.401E\-42) ?[int, float, short, byte, char])\l \l0x00d2: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r15 I:int)\l  (r14 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00d5: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.NO_FRAMES pl.droidsonroids.gif.GifError \l0x00d7: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00d9: CONST_STR  (r1 I:java.lang.String) =  \"INVALID_SCR_DIMS\" \l0x00db: CONST_STR  (r2 I:java.lang.String) =  \"Invalid screen size, dimensions must be positive\" \l0x00dd: CONST  (r14 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x00df: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (1001(0x3e9, float:1.403E\-42) ?[int, float, short, byte, char])\l \l0x00e1: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00e4: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.INVALID_SCR_DIMS pl.droidsonroids.gif.GifError \l0x00e6: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00e8: CONST_STR  (r1 I:java.lang.String) =  \"INVALID_IMG_DIMS\" \l0x00ea: CONST_STR  (r2 I:java.lang.String) =  \"Invalid image size, dimensions must be positive\" \l0x00ec: CONST  (r14 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x00ee: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (1002(0x3ea, float:1.404E\-42) ?[int, float, short, byte, char])\l \l0x00f0: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x00f3: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.INVALID_IMG_DIMS pl.droidsonroids.gif.GifError \l0x00f5: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x00f7: CONST_STR  (r1 I:java.lang.String) =  \"IMG_NOT_CONFINED\" \l0x00f9: CONST_STR  (r2 I:java.lang.String) =  \"Image size exceeds screen size\" \l0x00fb: CONST  (r14 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l0x00fd: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (1003(0x3eb, float:1.406E\-42) ?[int, float, short, byte, char])\l \l0x00ff: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0102: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.IMG_NOT_CONFINED pl.droidsonroids.gif.GifError \l0x0104: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0106: CONST_STR  (r1 I:java.lang.String) =  \"REWIND_FAILED\" \l0x0108: CONST_STR  (r2 I:java.lang.String) =  \"Input source rewind failed, animation stopped\" \l0x010a: CONST  (r14 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l0x010c: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (1004(0x3ec, float:1.407E\-42) ?[int, float, short, byte, char])\l \l0x010e: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0111: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.REWIND_FAILED pl.droidsonroids.gif.GifError \l0x0113: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0115: CONST_STR  (r1 I:java.lang.String) =  \"INVALID_BYTE_BUFFER\" \l0x0117: CONST_STR  (r2 I:java.lang.String) =  \"Invalid and\/or indirect byte buffer specified\" \l0x0119: CONST  (r14 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l0x011b: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (1005(0x3ed, float:1.408E\-42) ?[int, float, short, byte, char])\l \l0x011d: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x0120: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.INVALID_BYTE_BUFFER pl.droidsonroids.gif.GifError \l0x0122: NEW_INSTANCE  (r0 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError \l0x0124: CONST_STR  (r1 I:java.lang.String) =  \"UNKNOWN\" \l0x0126: CONST_STR  (r2 I:java.lang.String) =  \"Unknown error\" \l0x0128: CONST  (r14 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l0x012a: CONST  (r15 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x012b: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifError)\l  (r1 I:java.lang.String)\l  (r14 I:int)\l  (r15 I:int)\l  (r2 I:java.lang.String)\l pl.droidsonroids.gif.GifError.\<init\>(java.lang.String, int, int, java.lang.String):void type: DIRECT \l0x012e: SPUT  (r0 I:pl.droidsonroids.gif.GifError) pl.droidsonroids.gif.GifError.UNKNOWN pl.droidsonroids.gif.GifError \l0x0130: CONST  (r0 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0132: NEW_ARRAY  (r0 I:pl.droidsonroids.gif.GifError[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: pl.droidsonroids.gif.GifError[] \l0x0134: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NO_ERROR pl.droidsonroids.gif.GifError \l0x0136: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0138: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.OPEN_FAILED pl.droidsonroids.gif.GifError \l0x013a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x013c: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.READ_FAILED pl.droidsonroids.gif.GifError \l0x013e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0140: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NOT_GIF_FILE pl.droidsonroids.gif.GifError \l0x0142: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0144: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NO_SCRN_DSCR pl.droidsonroids.gif.GifError \l0x0146: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0148: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NO_IMAG_DSCR pl.droidsonroids.gif.GifError \l0x014a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x014c: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NO_COLOR_MAP pl.droidsonroids.gif.GifError \l0x014e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0150: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.WRONG_RECORD pl.droidsonroids.gif.GifError \l0x0152: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0154: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.DATA_TOO_BIG pl.droidsonroids.gif.GifError \l0x0156: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0158: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NOT_ENOUGH_MEM pl.droidsonroids.gif.GifError \l0x015a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r12 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x015c: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.CLOSE_FAILED pl.droidsonroids.gif.GifError \l0x015e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r13 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0160: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NOT_READABLE pl.droidsonroids.gif.GifError \l0x0162: CONST  (r2 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0164: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0166: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.IMAGE_DEFECT pl.droidsonroids.gif.GifError \l0x0168: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x016a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x016c: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.EOF_TOO_SOON pl.droidsonroids.gif.GifError \l0x016e: CONST  (r2 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0170: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0172: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.NO_FRAMES pl.droidsonroids.gif.GifError \l0x0174: CONST  (r2 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x0176: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0178: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.INVALID_SCR_DIMS pl.droidsonroids.gif.GifError \l0x017a: CONST  (r2 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x017c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x017e: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.INVALID_IMG_DIMS pl.droidsonroids.gif.GifError \l0x0180: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0182: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0184: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.IMG_NOT_CONFINED pl.droidsonroids.gif.GifError \l0x0186: CONST  (r2 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l0x0188: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x018a: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.REWIND_FAILED pl.droidsonroids.gif.GifError \l0x018c: CONST  (r2 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l0x018e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0190: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.INVALID_BYTE_BUFFER pl.droidsonroids.gif.GifError \l0x0192: CONST  (r2 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l0x0194: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0196: SGET  (r1 I:pl.droidsonroids.gif.GifError) =  pl.droidsonroids.gif.GifError.UNKNOWN pl.droidsonroids.gif.GifError \l0x0198: CONST  (r2 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l0x019a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x019c: SPUT  (r0 I:pl.droidsonroids.gif.GifError[]) pl.droidsonroids.gif.GifError.$VALUES pl.droidsonroids.gif.GifError[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x019e|0x019e: RETURN   \l}"];
MethodNode[shape=record,label="{static void pl.droidsonroids.gif.GifError.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

