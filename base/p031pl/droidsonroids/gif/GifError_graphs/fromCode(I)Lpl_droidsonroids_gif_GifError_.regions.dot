digraph "CFG forpl.droidsonroids.gif.GifError.fromCode(I)Lpl\/droidsonroids\/gif\/GifError;" {
subgraph cluster_Region_402310204 {
label = "R(4:0|(2:2|(2:(1:4)|(1:5)))|6|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r1 = values().length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_883016327 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:5:0x000f\l|if (r2 \< r1) goto L_0x0008\l}"];
subgraph cluster_Region_581423435 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|r3 = r0[r2]\l}"];
subgraph cluster_Region_826179053 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_631285498 {
label = "IF [B:3:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r3.errorCode == r5) goto L_0x000e\l}"];
subgraph cluster_Region_1741626238 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_1502390692 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:5:0x000f\l|r2++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0012|pl.droidsonroids.gif.GifError p031pl.droidsonroids.gif.GifError r0 = UNKNOWN\lr0.errorCode = r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r0\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ 0x0012|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static pl.droidsonroids.gif.GifError pl.droidsonroids.gif.GifError.fromCode((r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_9;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_4;
}

