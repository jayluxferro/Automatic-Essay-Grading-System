digraph "CFG forpl.droidsonroids.gif.GifViewUtils.setResource(Landroid\/widget\/ImageView;ZI)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.content.res.Resources) = (r2 I:android.widget.ImageView) android.widget.ImageView.getResources():android.content.res.Resources type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: NEW_INSTANCE  (r1 I:pl.droidsonroids.gif.GifDrawable) =  pl.droidsonroids.gif.GifDrawable A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}, TRY_ENTER]\l0x0008: INVOKE  \l  (r1 I:pl.droidsonroids.gif.GifDrawable)\l  (r0 I:android.content.res.Resources)\l  (r4 I:int)\l pl.droidsonroids.gif.GifDrawable.\<init\>(android.content.res.Resources, int):void type: DIRECT A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  \l  (r2 I:android.widget.ImageView)\l  (r1 I:android.graphics.drawable.Drawable)\l android.widget.ImageView.setImageDrawable(android.graphics.drawable.Drawable):void type: VIRTUAL A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l0x0010: GOTO  \-\> 0x001e A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: SGET  (r3 I:int) =  android.os.Build.VERSION.SDK_INT int A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l0x0013: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:9:0x001b A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: INVOKE  \l  (r2 I:android.widget.ImageView)\l  (r1 I:android.graphics.drawable.Drawable)\l android.widget.ImageView.setBackground(android.graphics.drawable.Drawable):void type: VIRTUAL A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l0x001a: GOTO  \-\> 0x001e A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  \l  (r2 I:android.widget.ImageView)\l  (r1 I:android.graphics.drawable.Drawable)\l android.widget.ImageView.setBackgroundDrawable(android.graphics.drawable.Drawable):void type: VIRTUAL A[Catch:\{ NotFoundException \| IOException \-\> 0x0020 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: NotFoundException \| IOException null\lSplitter:B:2:0x0006\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{static boolean pl.droidsonroids.gif.GifViewUtils.setResource((r2 I:android.widget.ImageView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_14;
Node_13 -> Node_12;
}

