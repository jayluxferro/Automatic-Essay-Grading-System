digraph "CFG forpl.droidsonroids.gif.InputSource.build(Lpl\/droidsonroids\/gif\/GifDrawable;Ljava\/util\/concurrent\/ScheduledThreadPoolExecutor;ZLpl\/droidsonroids\/gif\/GifOptions;)Lpl\/droidsonroids\/gif\/GifDrawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:pl.droidsonroids.gif.GifInfoHandle) = (r2 I:pl.droidsonroids.gif.InputSource) pl.droidsonroids.gif.InputSource.open():pl.droidsonroids.gif.GifInfoHandle type: VIRTUAL \l0x0004: IGET  (r1 I:char) = (r6 I:pl.droidsonroids.gif.GifOptions) pl.droidsonroids.gif.GifOptions.inSampleSize char \l0x0006: IGET  (r6 I:boolean) = (r6 I:pl.droidsonroids.gif.GifOptions) pl.droidsonroids.gif.GifOptions.inIsOpaque boolean \l0x0008: INVOKE  \l  (r0 I:pl.droidsonroids.gif.GifInfoHandle)\l  (r1 I:char)\l  (r6 I:boolean)\l pl.droidsonroids.gif.GifInfoHandle.setOptions(char, boolean):void type: VIRTUAL \l0x000b: NEW_INSTANCE  (r6 I:pl.droidsonroids.gif.GifDrawable) =  pl.droidsonroids.gif.GifDrawable \l0x000d: INVOKE  \l  (r6 I:pl.droidsonroids.gif.GifDrawable)\l  (r0 I:pl.droidsonroids.gif.GifInfoHandle)\l  (r3 I:pl.droidsonroids.gif.GifDrawable)\l  (r4 I:java.util.concurrent.ScheduledThreadPoolExecutor)\l  (r5 I:boolean)\l pl.droidsonroids.gif.GifDrawable.\<init\>(pl.droidsonroids.gif.GifInfoHandle, pl.droidsonroids.gif.GifDrawable, java.util.concurrent.ScheduledThreadPoolExecutor, boolean):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: RETURN  (r6 I:pl.droidsonroids.gif.GifDrawable) \l}"];
MethodNode[shape=record,label="{final pl.droidsonroids.gif.GifDrawable pl.droidsonroids.gif.InputSource.build((r2 'this' I:pl.droidsonroids.gif.InputSource A[IMMUTABLE_TYPE, THIS]), (r3 I:pl.droidsonroids.gif.GifDrawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.concurrent.ScheduledThreadPoolExecutor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:pl.droidsonroids.gif.GifOptions A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

