digraph "CFG forpl.droidsonroids.gif.InputSource.build(Lpl\/droidsonroids\/gif\/GifDrawable;Ljava\/util\/concurrent\/ScheduledThreadPoolExecutor;ZLpl\/droidsonroids\/gif\/GifOptions;)Lpl\/droidsonroids\/gif\/GifDrawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|pl.droidsonroids.gif.GifInfoHandle r0 = open()\lr0.setOptions(r6.inSampleSize, r6.inIsOpaque)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|RETURN\l|return new p031pl.droidsonroids.gif.GifDrawable(r0, r3, r4, r5)\l}"];
MethodNode[shape=record,label="{final pl.droidsonroids.gif.GifDrawable pl.droidsonroids.gif.InputSource.build((r2v0 'this' pl.droidsonroids.gif.InputSource A[IMMUTABLE_TYPE, THIS]), (r3v0 pl.droidsonroids.gif.GifDrawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.concurrent.ScheduledThreadPoolExecutor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 pl.droidsonroids.gif.GifOptions A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

