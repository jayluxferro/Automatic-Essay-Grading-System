digraph "CFG forpl.droidsonroids.gif.GifViewSavedState.\<init\>(Landroid\/os\/Parcel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:android.view.View$BaseSavedState)\l  (r4 I:android.os.Parcel)\l android.view.View.BaseSavedState.\<init\>(android.os.Parcel):void type: DIRECT \l0x0003: INVOKE  (r0 I:int) = (r4 I:android.os.Parcel) android.os.Parcel.readInt():int type: VIRTUAL \l0x0007: NEW_ARRAY  (r0 I:long[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: long[][] \l0x0009: IPUT  \l  (r0 I:long[][])\l  (r3 I:pl.droidsonroids.gif.GifViewSavedState)\l pl.droidsonroids.gif.GifViewSavedState.mStates long[][] \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IGET  (r1 I:long[][]) = (r3 I:pl.droidsonroids.gif.GifViewSavedState) pl.droidsonroids.gif.GifViewSavedState.mStates long[][] \l0x000e: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r1 I:long[][]) = (r3 I:pl.droidsonroids.gif.GifViewSavedState) pl.droidsonroids.gif.GifViewSavedState.mStates long[][] \l0x0013: INVOKE  (r2 I:long[]) = (r4 I:android.os.Parcel) android.os.Parcel.createLongArray():long[] type: VIRTUAL \l0x0017: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{private void pl.droidsonroids.gif.GifViewSavedState.\<init\>((r3 'this' I:pl.droidsonroids.gif.GifViewSavedState A[IMMUTABLE_TYPE, THIS]), (r4 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

