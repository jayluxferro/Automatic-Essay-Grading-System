digraph "CFG forpl.droidsonroids.gif.GifDecoder.checkBuffer(Landroid\/graphics\/Bitmap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.isRecycled():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x000a: IGET  (r1 I:pl.droidsonroids.gif.GifInfoHandle) = (r2 I:pl.droidsonroids.gif.GifDecoder) pl.droidsonroids.gif.GifDecoder.mGifInfoHandle pl.droidsonroids.gif.GifInfoHandle \l0x000c: INVOKE  (r1 I:int) = (r1 I:pl.droidsonroids.gif.GifInfoHandle) pl.droidsonroids.gif.GifInfoHandle.getWidth():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r3 I:int) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x0016: IGET  (r0 I:pl.droidsonroids.gif.GifInfoHandle) = (r2 I:pl.droidsonroids.gif.GifDecoder) pl.droidsonroids.gif.GifDecoder.mGifInfoHandle pl.droidsonroids.gif.GifInfoHandle \l0x0018: INVOKE  (r0 I:int) = (r0 I:pl.droidsonroids.gif.GifInfoHandle) pl.droidsonroids.gif.GifInfoHandle.getHeight():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0021: CONST_STR  (r0 I:java.lang.String) =  \"Bitmap ia too small, size must be greater than or equal to GIF size\" \l0x0023: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0029: CONST_STR  (r0 I:java.lang.String) =  \"Bitmap is recycled\" \l0x002b: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void pl.droidsonroids.gif.GifDecoder.checkBuffer((r2 'this' I:pl.droidsonroids.gif.GifDecoder A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

