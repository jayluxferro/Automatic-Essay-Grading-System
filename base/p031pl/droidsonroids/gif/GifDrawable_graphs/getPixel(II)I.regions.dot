digraph "CFG forpl.droidsonroids.gif.GifDrawable.getPixel(II)I" {
subgraph cluster_Region_1752951214 {
label = "R(1:(1:9)(1:(1:5)(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1795016534 {
label = "IF [B:1:0x0006] THEN: R(1:9) ELSE: R(1:(1:5)(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2 \>= r1.mNativeInfoHandle.getWidth()) goto L_0x001f\l}"];
subgraph cluster_Region_257752826 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0026|throw new java.lang.IllegalArgumentException(\"x must be \< width\")\l}"];
}
subgraph cluster_Region_1117355530 {
label = "R(1:(1:5)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1972947310 {
label = "IF [B:3:0x000e] THEN: R(1:5) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r3 \< r1.mNativeInfoHandle.getHeight()) goto L_0x0010\l}"];
subgraph cluster_Region_1901815804 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return r1.mBuffer.getPixel(r2, r3)\l}"];
}
subgraph cluster_Region_421067779 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|throw new java.lang.IllegalArgumentException(\"y must be \< height\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001f}"];
MethodNode[shape=record,label="{public int pl.droidsonroids.gif.GifDrawable.getPixel((r1v0 'this' pl.droidsonroids.gif.GifDrawable A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

