digraph "CFG forpl.droidsonroids.gif.GifAnimationMetaData.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_684988960 {
label = "R(3:1|4|(2:(1:8)|(2:6|7)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_4 [shape=record,label="{4\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String java.lang.String r0 = java.lang.String.format(java.util.Locale.ENGLISH, \"GIF: size: %dx%d, frames: %d, loops: %s, duration: %d\", new java.lang.Object[]\{java.lang.Integer.valueOf(r6.mWidth), java.lang.Integer.valueOf(r6.mHeight), java.lang.Integer.valueOf(r6.mImageCount), r6.mLoopCount == 0 ? \"Infinity\" : java.lang.Integer.toString(r6.mLoopCount), java.lang.Integer.valueOf(r6.mDuration)\})\l}"];
subgraph cluster_Region_1518578600 {
label = "R(2:(1:8)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1071331906 {
label = "IF [B:5:0x0043] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0043|if (isAnimated() != true) goto L_?\l}"];
subgraph cluster_Region_1103238981 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1338968255 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0045}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"Animated \" + r0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
MethodNode[shape=record,label="{public java.lang.String pl.droidsonroids.gif.GifAnimationMetaData.toString((r6v0 'this' pl.droidsonroids.gif.GifAnimationMetaData A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

