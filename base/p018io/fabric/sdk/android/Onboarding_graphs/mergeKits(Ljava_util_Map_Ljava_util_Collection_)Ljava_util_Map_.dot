digraph "CFG forio.fabric.sdk.android.Onboarding.mergeKits(Ljava\/util\/Map;Ljava\/util\/Collection;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r7 = r7.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lLOOP:0: B:1:0x0004\-\>B:7:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r7.hasNext() == false) goto L_0x0031\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|io.fabric.sdk.android.Kit r0 = r7.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r6.containsKey(r0.getIdentifier()) != false) goto L_0x0004\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|r6.put(r0.getIdentifier(), new p018io.fabric.sdk.android.KitInfo(r0.getIdentifier(), r0.getVersion(), BINARY_BUILD_TYPE))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|RETURN\l|return r6\l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0004\-\>B:7:0x0004\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0004|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.util.Map\<java.lang.String, io.fabric.sdk.android.KitInfo\> io.fabric.sdk.android.Onboarding.mergeKits((r5v0 'this' io.fabric.sdk.android.Onboarding A[IMMUTABLE_TYPE, THIS]), (r6v0 java.util.Map\<java.lang.String, io.fabric.sdk.android.KitInfo\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.Collection\<io.fabric.sdk.android.Kit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Lio\/fabric\/sdk\/android\/KitInfo;, \>;, Ljava\/util\/Collection\<, Lio\/fabric\/sdk\/android\/Kit;, \>;), Ljava\/util\/Map\<, Ljava\/lang\/String;, Lio\/fabric\/sdk\/android\/KitInfo;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_10;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

