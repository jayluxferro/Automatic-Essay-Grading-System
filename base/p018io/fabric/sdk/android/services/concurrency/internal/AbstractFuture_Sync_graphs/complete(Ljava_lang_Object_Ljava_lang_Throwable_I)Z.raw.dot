digraph "CFG forio.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.complete(Ljava\/lang\/Object;Ljava\/lang\/Throwable;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r1 I:boolean) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l  (r1 I:int)\l  (r0 I:int)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.compareAndSetState(int, int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IPUT  \l  (r3 I:V)\l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.value java.lang.Object \l0x000a: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (12 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: NEW_INSTANCE  (r4 I:java.util.concurrent.CancellationException) =  java.util.concurrent.CancellationException \l0x0010: CONST_STR  (r3 I:java.lang.String) =  \"Future.cancel() was called.\" \l0x0012: INVOKE  \l  (r4 I:java.util.concurrent.CancellationException)\l  (r3 I:java.lang.String)\l java.util.concurrent.CancellationException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IPUT  \l  (r4 I:java.lang.Throwable)\l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.exception java.lang.Throwable \l0x0017: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l  (r5 I:int)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.releaseShared(int):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: INVOKE  (r3 I:int) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.getState():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0022: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync)\l  (r3 I:int)\l io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.acquireShared(int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean io.fabric.sdk.android.services.concurrency.internal.AbstractFuture.Sync.complete((r2 'this' I:io.fabric.sdk.android.services.concurrency.internal.AbstractFuture$Sync A[IMMUTABLE_TYPE, THIS]), (r3 I:V A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TV;, Ljava\/lang\/Throwable;, I)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

