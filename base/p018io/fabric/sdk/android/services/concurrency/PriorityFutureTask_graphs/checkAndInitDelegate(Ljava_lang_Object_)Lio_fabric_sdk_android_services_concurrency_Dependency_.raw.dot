digraph "CFG forio.fabric.sdk.android.services.concurrency.PriorityFutureTask.checkAndInitDelegate(Ljava\/lang\/Object;)Lio\/fabric\/sdk\/android\/services\/concurrency\/Dependency;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:java.lang.Object) io.fabric.sdk.android.services.concurrency.PriorityTask.isProperDelegate(java.lang.Object):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CHECK_CAST  (r2 I:io.fabric.sdk.android.services.concurrency.Dependency) = (io.fabric.sdk.android.services.concurrency.Dependency) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r2 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:io.fabric.sdk.android.services.concurrency.PriorityTask) =  io.fabric.sdk.android.services.concurrency.PriorityTask \l0x000b: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.concurrency.PriorityTask)\l io.fabric.sdk.android.services.concurrency.PriorityTask.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  (r2 I:T) \l}"];
MethodNode[shape=record,label="{protected T io.fabric.sdk.android.services.concurrency.PriorityFutureTask.checkAndInitDelegate((r1 'this' I:io.fabric.sdk.android.services.concurrency.PriorityFutureTask A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Lio\/fabric\/sdk\/android\/services\/concurrency\/Dependency\<, Lio\/fabric\/sdk\/android\/services\/concurrency\/Task;, \>;:, Lio\/fabric\/sdk\/android\/services\/concurrency\/PriorityProvider;, :, Lio\/fabric\/sdk\/android\/services\/concurrency\/Task;, \>(, Ljava\/lang\/Object;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

