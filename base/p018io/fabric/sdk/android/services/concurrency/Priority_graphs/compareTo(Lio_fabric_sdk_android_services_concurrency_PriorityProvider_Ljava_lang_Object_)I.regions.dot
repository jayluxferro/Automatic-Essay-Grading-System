digraph "CFG forio.fabric.sdk.android.services.concurrency.Priority.compareTo(Lio\/fabric\/sdk\/android\/services\/concurrency\/PriorityProvider;Ljava\/lang\/Object;)I" {
subgraph cluster_Region_1946704533 {
label = "R(2:(1:2)(1:3)|5) | DECL_VAR: io.fabric.sdk.android.services.concurrency.Priority null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1894590016 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r2 instanceof p018io.fabric.sdk.android.services.concurrency.PriorityProvider) == true) goto L_0x0004\l}"];
subgraph cluster_Region_974292066 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|io.fabric.sdk.android.services.concurrency.Priority r2 = ((p018io.fabric.sdk.android.services.concurrency.PriorityProvider) r2).getPriority()\l}"];
}
subgraph cluster_Region_1120505896 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|io.fabric.sdk.android.services.concurrency.Priority r2 = NORMAL\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x001a|RETURN\l|return r2.ordinal() \- r1.getPriority().ordinal()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d|PHI: r2 \l  PHI: (r2v1 io.fabric.sdk.android.services.concurrency.Priority) = (r2v4 io.fabric.sdk.android.services.concurrency.Priority), (r2v6 io.fabric.sdk.android.services.concurrency.Priority) binds: [B:3:0x000b, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{static int io.fabric.sdk.android.services.concurrency.Priority.compareTo((r1v0 io.fabric.sdk.android.services.concurrency.PriorityProvider A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 Y A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<Y:, Ljava\/lang\/Object;, \>(, Lio\/fabric\/sdk\/android\/services\/concurrency\/PriorityProvider;, TY;)I]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_4 -> Node_5;
}

