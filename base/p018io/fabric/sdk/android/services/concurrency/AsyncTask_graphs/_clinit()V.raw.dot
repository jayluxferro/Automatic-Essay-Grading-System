digraph "CFG forio.fabric.sdk.android.services.concurrency.AsyncTask.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Runtime) =  java.lang.Runtime.getRuntime():java.lang.Runtime type: STATIC \l0x0004: INVOKE  (r0 I:int) = (r0 I:java.lang.Runtime) java.lang.Runtime.availableProcessors():int type: VIRTUAL \l0x0008: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.AsyncTask.CPU_COUNT int \l0x000a: SGET  (r0 I:int) =  io.fabric.sdk.android.services.concurrency.AsyncTask.CPU_COUNT int \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x000e: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.AsyncTask.CORE_POOL_SIZE int \l0x0010: SGET  (r0 I:int) =  io.fabric.sdk.android.services.concurrency.AsyncTask.CPU_COUNT int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0014: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0016: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.AsyncTask.MAXIMUM_POOL_SIZE int \l0x0018: NEW_INSTANCE  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$1) =  io.fabric.sdk.android.services.concurrency.AsyncTask$1 \l0x001a: INVOKE  \l  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$1)\l io.fabric.sdk.android.services.concurrency.AsyncTask.1.\<init\>():void type: DIRECT \l0x001d: SPUT  (r0 I:java.util.concurrent.ThreadFactory) io.fabric.sdk.android.services.concurrency.AsyncTask.threadFactory java.util.concurrent.ThreadFactory \l0x001f: NEW_INSTANCE  (r0 I:java.util.concurrent.LinkedBlockingQueue) =  java.util.concurrent.LinkedBlockingQueue \l0x0021: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x0023: INVOKE  (r0 I:java.util.concurrent.LinkedBlockingQueue), (r1 I:int) java.util.concurrent.LinkedBlockingQueue.\<init\>(int):void type: DIRECT \l0x0026: SPUT  \l  (r0 I:java.util.concurrent.BlockingQueue\<java.lang.Runnable\>)\l io.fabric.sdk.android.services.concurrency.AsyncTask.poolWorkQueue java.util.concurrent.BlockingQueue \l0x0028: NEW_INSTANCE  (r0 I:java.util.concurrent.ThreadPoolExecutor) =  java.util.concurrent.ThreadPoolExecutor \l0x002a: SGET  (r3 I:int) =  io.fabric.sdk.android.services.concurrency.AsyncTask.CORE_POOL_SIZE int \l0x002c: SGET  (r4 I:int) =  io.fabric.sdk.android.services.concurrency.AsyncTask.MAXIMUM_POOL_SIZE int \l0x002e: SGET  (r7 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x0030: SGET  (r8 I:java.util.concurrent.BlockingQueue\<java.lang.Runnable\>) =  io.fabric.sdk.android.services.concurrency.AsyncTask.poolWorkQueue java.util.concurrent.BlockingQueue \l0x0032: SGET  (r9 I:java.util.concurrent.ThreadFactory) =  io.fabric.sdk.android.services.concurrency.AsyncTask.threadFactory java.util.concurrent.ThreadFactory \l0x0034: CONST  (r5 I:?[long, double]) = (1 ?[long, double]) \l0x0036: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0037: INVOKE  \l  (r2 I:java.util.concurrent.ThreadPoolExecutor)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:long)\l  (r7 I:java.util.concurrent.TimeUnit)\l  (r8 I:java.util.concurrent.BlockingQueue)\l  (r9 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ThreadPoolExecutor.\<init\>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory):void type: DIRECT \l0x003a: SPUT  (r0 I:java.util.concurrent.Executor) io.fabric.sdk.android.services.concurrency.AsyncTask.THREAD_POOL_EXECUTOR java.util.concurrent.Executor \l0x003c: NEW_INSTANCE  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$SerialExecutor) =  io.fabric.sdk.android.services.concurrency.AsyncTask$SerialExecutor \l0x003e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003f: INVOKE  \l  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$SerialExecutor)\l  (r1 I:io.fabric.sdk.android.services.concurrency.AsyncTask$1)\l io.fabric.sdk.android.services.concurrency.AsyncTask.SerialExecutor.\<init\>(io.fabric.sdk.android.services.concurrency.AsyncTask$1):void type: DIRECT \l0x0042: SPUT  (r0 I:java.util.concurrent.Executor) io.fabric.sdk.android.services.concurrency.AsyncTask.SERIAL_EXECUTOR java.util.concurrent.Executor \l0x0044: NEW_INSTANCE  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$InternalHandler) =  io.fabric.sdk.android.services.concurrency.AsyncTask$InternalHandler \l0x0046: INVOKE  \l  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$InternalHandler)\l io.fabric.sdk.android.services.concurrency.AsyncTask.InternalHandler.\<init\>():void type: DIRECT \l0x0049: SPUT  \l  (r0 I:io.fabric.sdk.android.services.concurrency.AsyncTask$InternalHandler)\l io.fabric.sdk.android.services.concurrency.AsyncTask.handler io.fabric.sdk.android.services.concurrency.AsyncTask$InternalHandler \l0x004b: SGET  (r0 I:java.util.concurrent.Executor) =  io.fabric.sdk.android.services.concurrency.AsyncTask.SERIAL_EXECUTOR java.util.concurrent.Executor \l0x004d: SPUT  (r0 I:java.util.concurrent.Executor) io.fabric.sdk.android.services.concurrency.AsyncTask.defaultExecutor java.util.concurrent.Executor \l}"];
Node_1 [shape=record,label="{1\:\ 0x004f|0x004f: RETURN   \l}"];
MethodNode[shape=record,label="{static void io.fabric.sdk.android.services.concurrency.AsyncTask.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

