digraph "CFG forio.fabric.sdk.android.services.concurrency.AsyncTask.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|CPU_COUNT = java.lang.Runtime.getRuntime().availableProcessors()\lCORE_POOL_SIZE = CPU_COUNT + 1\lMAXIMUM_POOL_SIZE = (CPU_COUNT * 2) + 1\lthreadFactory = new p018io.fabric.sdk.android.services.concurrency.AsyncTask.C13081()\lpoolWorkQueue = new java.util.concurrent.LinkedBlockingQueue(128)\lTHREAD_POOL_EXECUTOR = new java.util.concurrent.ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, 1, java.util.concurrent.TimeUnit.SECONDS, poolWorkQueue, threadFactory)\lSERIAL_EXECUTOR = new p018io.fabric.sdk.android.services.concurrency.AsyncTask.SerialExecutor((p018io.fabric.sdk.android.services.concurrency.AsyncTask.C13081) null)\lhandler = new p018io.fabric.sdk.android.services.concurrency.AsyncTask.InternalHandler()\ldefaultExecutor = SERIAL_EXECUTOR\l}"];
Node_1 [shape=record,label="{1\:\ 0x004f|RETURN\l|return\l}"];
MethodNode[shape=record,label="{static void io.fabric.sdk.android.services.concurrency.AsyncTask.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

