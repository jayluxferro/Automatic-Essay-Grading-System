digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.recycleBlockedQueue()V" {
subgraph cluster_Region_1556810092 {
label = "R(1:(2:1|(2:4|(1:6)(0))))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_2058201234 {
label = "Try: R(2:1|(2:4|(1:6)(0))) finally: R(3:9|10|11)";
node [shape=record,color=blue];
subgraph cluster_Region_1724484533 {
label = "R(2:1|(2:4|(1:6)(0)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x002a \}\lSplitter:B:0:0x0000\l|r3.lock.lock()     \/\/ Catch:\{ all \-\> 0x002a \}\ljava.util.Iterator java.util.Iterator r0 = r3.blockedQueue.iterator()     \/\/ Catch:\{ all \-\> 0x002a \}\l}"];
subgraph cluster_LoopRegion_1687145094 {
label = "LOOP:0: (2:4|(1:6)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|Catch:\{ all \-\> 0x002a \}\l|if (r0.hasNext() != false) goto L_0x0011     \/\/ Catch:\{ all \-\> 0x002a \}\l}"];
subgraph cluster_Region_1526469437 {
label = "R(2:4|(1:6)(0))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|Catch:\{ all \-\> 0x002a \}\l|io.fabric.sdk.android.services.concurrency.Dependency p018io.fabric.sdk.android.services.concurrency.Dependency r1 = (p018io.fabric.sdk.android.services.concurrency.Dependency) r0.next()     \/\/ Catch:\{ all \-\> 0x002a \}\l}"];
subgraph cluster_IfRegion_197606207 {
label = "IF [B:5:0x001b] THEN: R(1:6) ELSE: R(0)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|Catch:\{ all \-\> 0x002a \}\l|if (canProcess(r1) == true) goto L_0x001d     \/\/ Catch:\{ all \-\> 0x002a \}\l}"];
subgraph cluster_Region_561612934 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001d|Catch:\{ all \-\> 0x002a \}\l|super.offer(r1)     \/\/ Catch:\{ all \-\> 0x002a \}\lr0.remove()     \/\/ Catch:\{ all \-\> 0x002a \}\l}"];
}
subgraph cluster_Region_1163336643 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
subgraph cluster_Region_1796629 {
label = "R(3:9|10|11) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002a|ExcHandler:  FINALLY\lSplitter:B:0:0x0000\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|FINALLY_INSNS\l|r3.lock.unlock()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|throw r0\l}"];
}
}
}
subgraph cluster_Region_1796629 {
label = "R(3:9|10|11) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002a|ExcHandler:  FINALLY\lSplitter:B:0:0x0000\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|FINALLY_INSNS\l|r3.lock.unlock()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|throw r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000b|LOOP_START\lCatch:\{ all \-\> 0x002a \}\lLOOP:0: B:2:0x000b\-\>B:12:0x000b\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0024|DONT_GENERATE\l|java.util.concurrent.locks.ReentrantLock r0 = r3.lock\lr0.unlock()\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0029}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000b|LOOP_END\lSYNTHETIC\lLOOP:0: B:2:0x000b\-\>B:12:0x000b\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0024|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000b|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.recycleBlockedQueue((r3v0 'this' io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14[style=dashed];
Node_6 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_2 -> Node_3;
Node_7 -> Node_8;
Node_12 -> Node_2;
Node_13 -> Node_7;
Node_14 -> Node_12;
Node_15 -> Node_12;
}

