digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.remove(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r1 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l0x0005: INVOKE  (r0 I:boolean) = \l  (r1 I:java.util.concurrent.PriorityBlockingQueue)\l  (r2 I:java.lang.Object)\l java.util.concurrent.PriorityBlockingQueue.remove(java.lang.Object):boolean type: SUPER A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.Queue\<E\>) = \l  (r1 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.blockedQueue java.util.Queue A[Catch:\{ all \-\> 0x001d \}]\l0x000d: INVOKE  (r2 I:boolean) = (r0 I:java.util.Queue), (r2 I:java.lang.Object) java.util.Queue.remove(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x001d \}]\l0x0010: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r1 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x0019: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN  (r2 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x001d: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r1 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x0020: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.remove((r1 'this' I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

