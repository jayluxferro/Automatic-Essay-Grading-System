digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.drainTo(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x0028 \}\lSplitter:B:0:0x0000\l|r2.lock.lock()     \/\/ Catch:\{ all \-\> 0x0028 \}\lint r0 = super.drainTo(r3) + r2.blockedQueue.size()     \/\/ Catch:\{ all \-\> 0x0028 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_START\lCatch:\{ all \-\> 0x0028 \}\lLOOP:0: B:2:0x0010\-\>B:4:0x0018\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|Catch:\{ all \-\> 0x0028 \}\l|if (r2.blockedQueue.isEmpty() != false) goto L_0x0022     \/\/ Catch:\{ all \-\> 0x0028 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|LOOP_END\lCatch:\{ all \-\> 0x0028 \}\lLOOP:0: B:2:0x0010\-\>B:4:0x0018\l|r3.add(r2.blockedQueue.poll())     \/\/ Catch:\{ all \-\> 0x0028 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|DONT_GENERATE\l|java.util.concurrent.locks.ReentrantLock r3 = r2.lock\lr3.unlock()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|ExcHandler:  FINALLY\lSplitter:B:0:0x0000\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|FINALLY_INSNS\l|r2.lock.unlock()\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|throw r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.drainTo((r2v0 'this' io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS]), (r3v0 java.util.Collection\<? super E\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, \-TE;\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_5;
}

