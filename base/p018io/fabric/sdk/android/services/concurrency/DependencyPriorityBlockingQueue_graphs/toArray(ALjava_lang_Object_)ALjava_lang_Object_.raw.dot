digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock A[Catch:\{ all \-\> 0x0019 \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x0019 \}]\l0x0005: INVOKE  (r0 I:java.lang.Object[]) = \l  (r2 I:java.util.concurrent.PriorityBlockingQueue)\l  (r3 I:java.lang.Object[])\l java.util.concurrent.PriorityBlockingQueue.toArray(java.lang.Object[]):java.lang.Object[] type: SUPER A[Catch:\{ all \-\> 0x0019 \}]\l0x0009: IGET  (r1 I:java.util.Queue\<E\>) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.blockedQueue java.util.Queue A[Catch:\{ all \-\> 0x0019 \}]\l0x000b: INVOKE  (r3 I:java.lang.Object[]) = (r1 I:java.util.Queue), (r3 I:java.lang.Object[]) java.util.Queue.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0019 \}]\l0x000f: INVOKE  (r3 I:java.lang.Object[]) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l  (r0 I:java.lang.Object[])\l  (r3 I:java.lang.Object[])\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.concatenate(java.lang.Object[], java.lang.Object[]):java.lang.Object[] type: VIRTUAL A[Catch:\{ all \-\> 0x0019 \}]\l0x0012: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x0015: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: RETURN  (r3 I:T[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x0019: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x001c: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T[] io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.toArray((r2 'this' I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS]), (r3 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

