digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.drainTo(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock A[Catch:\{ all \-\> 0x0028 \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x0028 \}]\l0x0005: INVOKE  (r0 I:int) = \l  (r2 I:java.util.concurrent.PriorityBlockingQueue)\l  (r3 I:java.util.Collection)\l java.util.concurrent.PriorityBlockingQueue.drainTo(java.util.Collection):int type: SUPER A[Catch:\{ all \-\> 0x0028 \}]\l0x0009: IGET  (r1 I:java.util.Queue\<E\>) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.blockedQueue java.util.Queue A[Catch:\{ all \-\> 0x0028 \}]\l0x000b: INVOKE  (r1 I:int) = (r1 I:java.util.Queue) java.util.Queue.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0028 \}]\l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) A[Catch:\{ all \-\> 0x0028 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r1 I:java.util.Queue\<E\>) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.blockedQueue java.util.Queue A[Catch:\{ all \-\> 0x0028 \}]\l0x0012: INVOKE  (r1 I:boolean) = (r1 I:java.util.Queue) java.util.Queue.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0028 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0022 A[Catch:\{ all \-\> 0x0028 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IGET  (r1 I:java.util.Queue\<E\>) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.blockedQueue java.util.Queue A[Catch:\{ all \-\> 0x0028 \}]\l0x001a: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Queue) java.util.Queue.poll():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0028 \}]\l0x001e: INVOKE  (r3 I:java.util.Collection), (r1 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0028 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IGET  (r3 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x0024: INVOKE  (r3 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x0028: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = \l  (r2 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue)\l io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.lock java.util.concurrent.locks.ReentrantLock \l0x002b: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.drainTo((r2 'this' I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.Collection\<? super E\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, \-TE;\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_2;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

