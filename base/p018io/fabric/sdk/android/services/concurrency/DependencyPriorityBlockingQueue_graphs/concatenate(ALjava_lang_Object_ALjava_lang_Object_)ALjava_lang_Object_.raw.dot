digraph "CFG forio.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.concatenate([Ljava\/lang\/Object;[Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0001: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l0x0002: INVOKE  (r2 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0006: INVOKE  (r2 I:java.lang.Class) = (r2 I:java.lang.Class) java.lang.Class.getComponentType():java.lang.Class type: VIRTUAL \l0x000a: ARITH  (r3 I:int) = (r0 I:int) + (r1 I:int) \l0x000c: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.Class), (r3 I:int) java.lang.reflect.Array.newInstance(java.lang.Class, int):java.lang.Object type: STATIC \l0x0010: CHECK_CAST  (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:?[OBJECT, ARRAY]) \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  \l  (r5 I:java.lang.Object)\l  (r3 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r0 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0016: INVOKE  \l  (r6 I:java.lang.Object)\l  (r3 I:int)\l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN  (r2 I:T[]) \l}"];
MethodNode[shape=record,label="{T[] io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue.concatenate((r4 'this' I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue A[IMMUTABLE_TYPE, THIS]), (r5 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;[TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

