digraph "CFG forio.fabric.sdk.android.services.concurrency.PriorityTask.isProperDelegate(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassCastException \-\> 0x0011 \}\lSplitter:B:1:0x0002\l|io.fabric.sdk.android.services.concurrency.Dependency r1 = (p018io.fabric.sdk.android.services.concurrency.Dependency) r3     \/\/ Catch:\{ ClassCastException \-\> 0x0011 \}\lio.fabric.sdk.android.services.concurrency.Task r2 = (p018io.fabric.sdk.android.services.concurrency.Task) r3     \/\/ Catch:\{ ClassCastException \-\> 0x0011 \}\lio.fabric.sdk.android.services.concurrency.PriorityProvider r3 = (p018io.fabric.sdk.android.services.concurrency.PriorityProvider) r3     \/\/ Catch:\{ ClassCastException \-\> 0x0011 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r1 == null) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r2 == null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r3 == null) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: ClassCastException (unused java.lang.ClassCastException)\lSplitter:B:1:0x0002\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static boolean io.fabric.sdk.android.services.concurrency.PriorityTask.isProperDelegate((r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_8 -> Node_7;
}

