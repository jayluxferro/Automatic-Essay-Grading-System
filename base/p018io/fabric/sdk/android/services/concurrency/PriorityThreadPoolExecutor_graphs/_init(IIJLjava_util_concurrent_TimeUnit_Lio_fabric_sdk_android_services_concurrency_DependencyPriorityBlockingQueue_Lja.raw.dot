digraph "CFG forio.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.\<init\>(IIJLjava\/util\/concurrent\/TimeUnit;Lio\/fabric\/sdk\/android\/services\/concurrency\/DependencyPriorityBlockingQueue;Ljava\/util\/concurrent\/ThreadFactory;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:java.util.concurrent.ThreadPoolExecutor)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:long)\l  (r5 I:java.util.concurrent.TimeUnit)\l  (r6 I:java.util.concurrent.BlockingQueue)\l  (r7 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ThreadPoolExecutor.\<init\>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory):void type: DIRECT \l0x0003: INVOKE  \l  (r0 I:io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor)\l io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.prestartAllCoreThreads():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: RETURN   \l}"];
MethodNode[shape=record,label="{void io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.\<init\>((r0 'this' I:io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.concurrent.TimeUnit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:io.fabric.sdk.android.services.concurrency.DependencyPriorityBlockingQueue\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.concurrent.ThreadFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Runnable;, :, Lio\/fabric\/sdk\/android\/services\/concurrency\/Dependency;, :, Lio\/fabric\/sdk\/android\/services\/concurrency\/Task;, :, Lio\/fabric\/sdk\/android\/services\/concurrency\/PriorityProvider;, \>(IIJ, Ljava\/util\/concurrent\/TimeUnit;, Lio\/fabric\/sdk\/android\/services\/concurrency\/DependencyPriorityBlockingQueue\<, TT;\>;, Ljava\/util\/concurrent\/ThreadFactory;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

