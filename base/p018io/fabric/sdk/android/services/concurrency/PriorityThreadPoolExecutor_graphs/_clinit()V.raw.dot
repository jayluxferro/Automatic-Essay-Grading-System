digraph "CFG forio.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Runtime) =  java.lang.Runtime.getRuntime():java.lang.Runtime type: STATIC \l0x0004: INVOKE  (r0 I:int) = (r0 I:java.lang.Runtime) java.lang.Runtime.availableProcessors():int type: VIRTUAL \l0x0008: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.CPU_COUNT int \l0x000a: SGET  (r0 I:int) =  io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.CPU_COUNT int \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x000e: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.CORE_POOL_SIZE int \l0x0010: SGET  (r0 I:int) =  io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.CPU_COUNT int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0014: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0016: SPUT  (r0 I:int) io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.MAXIMUM_POOL_SIZE int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{static void io.fabric.sdk.android.services.concurrency.PriorityThreadPoolExecutor.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

