digraph "CFG forio.fabric.sdk.android.services.concurrency.PriorityAsyncTask.addDependency(Lio\/fabric\/sdk\/android\/services\/concurrency\/Task;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (getStatus() != p018io.fabric.sdk.android.services.concurrency.AsyncTask.Status.PENDING) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|((p018io.fabric.sdk.android.services.concurrency.Dependency) ((p018io.fabric.sdk.android.services.concurrency.PriorityProvider) getDelegate())).addDependency(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014}"];
Node_5 [shape=record,label="{5\:\ 0x001b|throw new java.lang.IllegalStateException(\"Must not add Dependency after task is running\")\l}"];
MethodNode[shape=record,label="{public void io.fabric.sdk.android.services.concurrency.PriorityAsyncTask.addDependency((r2v0 'this' io.fabric.sdk.android.services.concurrency.PriorityAsyncTask A[IMMUTABLE_TYPE, THIS]), (r3v0 io.fabric.sdk.android.services.concurrency.Task A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

