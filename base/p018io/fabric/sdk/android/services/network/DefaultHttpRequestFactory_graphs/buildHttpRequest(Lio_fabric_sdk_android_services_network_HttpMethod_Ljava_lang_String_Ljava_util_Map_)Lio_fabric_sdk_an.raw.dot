digraph "CFG forio.fabric.sdk.android.services.network.DefaultHttpRequestFactory.buildHttpRequest(Lio\/fabric\/sdk\/android\/services\/network\/HttpMethod;Ljava\/lang\/String;Ljava\/util\/Map;)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  io.fabric.sdk.android.services.network.DefaultHttpRequestFactory.1.$SwitchMap$io$fabric$sdk$android$services$network$HttpMethod int[] \l0x0002: INVOKE  (r2 I:int) = (r2 I:io.fabric.sdk.android.services.network.HttpMethod) io.fabric.sdk.android.services.network.HttpMethod.ordinal():int type: VIRTUAL \l0x0006: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x0023, 0x001e, 0x0019, 0x0014] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000e: CONST_STR  (r3 I:java.lang.String) =  \"Unsupported HTTP method!\" \l0x0010: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r2 I:io.fabric.sdk.android.services.network.HttpRequest) = (r3 I:java.lang.CharSequence) io.fabric.sdk.android.services.network.HttpRequest.delete(java.lang.CharSequence):io.fabric.sdk.android.services.network.HttpRequest type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r2 I:io.fabric.sdk.android.services.network.HttpRequest) = (r3 I:java.lang.CharSequence) io.fabric.sdk.android.services.network.HttpRequest.put(java.lang.CharSequence):io.fabric.sdk.android.services.network.HttpRequest type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r2 I:io.fabric.sdk.android.services.network.HttpRequest) = \l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.util.Map)\l  (r0 I:boolean)\l io.fabric.sdk.android.services.network.HttpRequest.post(java.lang.CharSequence, java.util.Map, boolean):io.fabric.sdk.android.services.network.HttpRequest type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r2 I:io.fabric.sdk.android.services.network.HttpRequest) = \l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.util.Map)\l  (r0 I:boolean)\l io.fabric.sdk.android.services.network.HttpRequest.get(java.lang.CharSequence, java.util.Map, boolean):io.fabric.sdk.android.services.network.HttpRequest type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: INVOKE  (r3 I:boolean) = \l  (r1 I:io.fabric.sdk.android.services.network.DefaultHttpRequestFactory)\l  (r3 I:java.lang.String)\l io.fabric.sdk.android.services.network.DefaultHttpRequestFactory.isHttps(java.lang.String):boolean type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IGET  (r3 I:io.fabric.sdk.android.services.network.PinningInfoProvider) = \l  (r1 I:io.fabric.sdk.android.services.network.DefaultHttpRequestFactory)\l io.fabric.sdk.android.services.network.DefaultHttpRequestFactory.pinningInfo io.fabric.sdk.android.services.network.PinningInfoProvider \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: INVOKE  (r3 I:javax.net.ssl.SSLSocketFactory) = \l  (r1 I:io.fabric.sdk.android.services.network.DefaultHttpRequestFactory)\l io.fabric.sdk.android.services.network.DefaultHttpRequestFactory.getSSLSocketFactory():javax.net.ssl.SSLSocketFactory type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: INVOKE  (r4 I:java.net.HttpURLConnection) = (r2 I:io.fabric.sdk.android.services.network.HttpRequest) io.fabric.sdk.android.services.network.HttpRequest.getConnection():java.net.HttpURLConnection type: VIRTUAL \l0x003b: CHECK_CAST  (r4 I:javax.net.ssl.HttpsURLConnection) = (javax.net.ssl.HttpsURLConnection) (r4 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r4 I:javax.net.ssl.HttpsURLConnection)\l  (r3 I:javax.net.ssl.SSLSocketFactory)\l javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(javax.net.ssl.SSLSocketFactory):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: RETURN  (r2 I:io.fabric.sdk.android.services.network.HttpRequest) \l}"];
MethodNode[shape=record,label="{public io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.DefaultHttpRequestFactory.buildHttpRequest((r1 'this' I:io.fabric.sdk.android.services.network.DefaultHttpRequestFactory A[IMMUTABLE_TYPE, THIS]), (r2 I:io.fabric.sdk.android.services.network.HttpMethod A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lio\/fabric\/sdk\/android\/services\/network\/HttpMethod;, Ljava\/lang\/String;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_4 -> Node_8;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

