digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.RequestOutputStream.write(Ljava\/lang\/String;)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest$RequestOutputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.nio.charset.CharsetEncoder) = \l  (r2 I:io.fabric.sdk.android.services.network.HttpRequest$RequestOutputStream)\l io.fabric.sdk.android.services.network.HttpRequest.RequestOutputStream.encoder java.nio.charset.CharsetEncoder \l0x0002: INVOKE  (r3 I:java.nio.CharBuffer) = (r3 I:java.lang.CharSequence) java.nio.CharBuffer.wrap(java.lang.CharSequence):java.nio.CharBuffer type: STATIC \l0x0006: INVOKE  (r3 I:java.nio.ByteBuffer) = \l  (r0 I:java.nio.charset.CharsetEncoder)\l  (r3 I:java.nio.CharBuffer)\l java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer):java.nio.ByteBuffer type: VIRTUAL \l0x000a: INVOKE  (r0 I:byte[]) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l0x000e: INVOKE  (r3 I:int) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.limit():int type: VIRTUAL \l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  \l  (r2 I:java.io.BufferedOutputStream)\l  (r0 I:byte[])\l  (r1 I:int)\l  (r3 I:int)\l java.io.BufferedOutputStream.write(byte[], int, int):void type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: RETURN  \l  (r2 I:io.fabric.sdk.android.services.network.HttpRequest$RequestOutputStream)\l \l}"];
MethodNode[shape=record,label="{public io.fabric.sdk.android.services.network.HttpRequest$RequestOutputStream io.fabric.sdk.android.services.network.HttpRequest.RequestOutputStream.write((r2 'this' I:io.fabric.sdk.android.services.network.HttpRequest$RequestOutputStream A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

