digraph "CFG forio.fabric.sdk.android.services.network.SystemKeyStore.getTrustRootFor(Ljava\/security\/cert\/X509Certificate;)Ljava\/security\/cert\/X509Certificate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.security.Principal, java.security.cert.X509Certificate\>) = \l  (r4 I:io.fabric.sdk.android.services.network.SystemKeyStore)\l io.fabric.sdk.android.services.network.SystemKeyStore.trustRoots java.util.HashMap \l0x0002: INVOKE  (r1 I:javax.security.auth.x500.X500Principal) = (r5 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getIssuerX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:java.security.cert.X509Certificate) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r2 I:javax.security.auth.x500.X500Principal) = (r0 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL \l0x0014: INVOKE  (r3 I:javax.security.auth.x500.X500Principal) = (r5 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL \l0x0018: INVOKE  (r2 I:boolean) = \l  (r2 I:javax.security.auth.x500.X500Principal)\l  (r3 I:java.lang.Object)\l javax.security.auth.x500.X500Principal.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r1 I:java.security.cert.X509Certificate) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|SYNTHETIC\lSplitter:B:6:0x001f\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x001f\l|0x001f: INVOKE  (r2 I:java.security.PublicKey) = (r0 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getPublicKey():java.security.PublicKey type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x0027 \}, TRY_ENTER]\l0x0023: INVOKE  \l  (r5 I:java.security.cert.X509Certificate)\l  (r2 I:java.security.PublicKey)\l java.security.cert.X509Certificate.verify(java.security.PublicKey):void type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x0027 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN  (r0 I:java.security.cert.X509Certificate) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: RETURN  (r1 I:java.security.cert.X509Certificate) \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: GeneralSecurityException null\lSplitter:B:6:0x001f\l}"];
MethodNode[shape=record,label="{public java.security.cert.X509Certificate io.fabric.sdk.android.services.network.SystemKeyStore.getTrustRootFor((r4 'this' I:io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, THIS]), (r5 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_10 -> Node_9;
}

