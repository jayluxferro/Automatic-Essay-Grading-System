digraph "CFG forio.fabric.sdk.android.services.network.SystemKeyStore.getTrustStore(Ljava\/io\/InputStream;Ljava\/lang\/String;)Ljava\/security\/KeyStore;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"BKS\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r0 I:java.security.KeyStore) = (r0 I:java.lang.String) java.security.KeyStore.getInstance(java.lang.String):java.security.KeyStore type: STATIC A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}, TRY_ENTER]\l0x0006: NEW_INSTANCE  (r1 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}]\l0x0008: INVOKE  \l  (r1 I:java.io.BufferedInputStream)\l  (r3 I:java.io.InputStream)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|SYNTHETIC\lSplitter:B:3:0x000b\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000b\l|0x000b: INVOKE  (r3 I:char[]) = (r4 I:java.lang.String) java.lang.String.toCharArray():char[] type: VIRTUAL A[Catch:\{ all \-\> 0x0016 \}, TRY_ENTER]\l0x000f: INVOKE  \l  (r0 I:java.security.KeyStore)\l  (r1 I:java.io.InputStream)\l  (r3 I:char[])\l java.security.KeyStore.load(java.io.InputStream, char[]):void type: VIRTUAL A[Catch:\{ all \-\> 0x0016 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|SYNTHETIC\lSplitter:B:5:0x0012\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0012\l|0x0012: INVOKE  (r1 I:java.io.BufferedInputStream) java.io.BufferedInputStream.close():void type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}, TRY_ENTER]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r0 I:java.security.KeyStore) A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|ExcHandler: all null\lSplitter:B:3:0x000b\l|0x0016: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: INVOKE  (r1 I:java.io.BufferedInputStream) java.io.BufferedInputStream.close():void type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: THROW  (r3 I:java.lang.Throwable) A[Catch:\{ KeyStoreException \-\> 0x0030, NoSuchAlgorithmException \-\> 0x0029, CertificateException \-\> 0x0022, IOException \-\> 0x001b \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|ExcHandler: IOException null\lSplitter:B:1:0x0002\l|0x001b: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001e: INVOKE  (r4 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|ExcHandler: CertificateException null\lSplitter:B:1:0x0002\l|0x0022: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0025: INVOKE  (r4 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:1:0x0002\l|0x0029: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|0x002a: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x002c: INVOKE  (r4 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|ExcHandler: KeyStoreException null\lSplitter:B:1:0x0002\l|0x0030: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0033: INVOKE  (r4 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.security.KeyStore io.fabric.sdk.android.services.network.SystemKeyStore.getTrustStore((r2 'this' I:io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20;
Node_1 -> Node_17;
Node_1 -> Node_14;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_2 -> Node_20;
Node_2 -> Node_17;
Node_2 -> Node_14;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_3 -> Node_20;
Node_3 -> Node_17;
Node_3 -> Node_14;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_20;
Node_5 -> Node_17;
Node_5 -> Node_14;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

