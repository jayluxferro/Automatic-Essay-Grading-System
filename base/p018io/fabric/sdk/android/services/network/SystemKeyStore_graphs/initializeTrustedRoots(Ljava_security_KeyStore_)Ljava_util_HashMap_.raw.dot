digraph "CFG forio.fabric.sdk.android.services.network.SystemKeyStore.initializeTrustedRoots(Ljava\/security\/KeyStore;)Ljava\/util\/HashMap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap A[Catch:\{ KeyStoreException \-\> 0x0026 \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l0x0005: INVOKE  (r1 I:java.util.Enumeration) = (r5 I:java.security.KeyStore) java.security.KeyStore.aliases():java.util.Enumeration type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r2 I:boolean) = (r1 I:java.util.Enumeration) java.util.Enumeration.hasMoreElements():boolean type: INTERFACE A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Enumeration) java.util.Enumeration.nextElement():java.lang.Object type: INTERFACE A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l0x0013: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l0x0015: INVOKE  (r2 I:java.security.cert.Certificate) = (r5 I:java.security.KeyStore), (r2 I:java.lang.String) java.security.KeyStore.getCertificate(java.lang.String):java.security.cert.Certificate type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l0x0019: CHECK_CAST  (r2 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0009 A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: INVOKE  (r3 I:javax.security.auth.x500.X500Principal) = (r2 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0026 \}]\l0x0021: INVOKE  \l  (r0 I:java.util.HashMap)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ KeyStoreException \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: RETURN  \l  (r0 I:java.util.HashMap\<java.security.Principal, java.security.cert.X509Certificate\>)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|ExcHandler: KeyStoreException null\lSplitter:B:0:0x0000\l|0x0026: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0029: INVOKE  (r0 I:java.lang.AssertionError), (r5 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.util.HashMap\<java.security.Principal, java.security.cert.X509Certificate\> io.fabric.sdk.android.services.network.SystemKeyStore.initializeTrustedRoots((r4 'this' I:io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, THIS]), (r5 I:java.security.KeyStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/security\/KeyStore;, ), Ljava\/util\/HashMap\<, Ljava\/security\/Principal;, Ljava\/security\/cert\/X509Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_2;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

