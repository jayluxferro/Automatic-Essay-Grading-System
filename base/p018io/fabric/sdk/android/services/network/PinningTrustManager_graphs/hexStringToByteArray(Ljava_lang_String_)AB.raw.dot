digraph "CFG forio.fabric.sdk.android.services.network.PinningTrustManager.hexStringToByteArray(Ljava\/lang\/String;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: ARITH  (r1 I:int) = (r0 I:int) \/ (2 int) \l0x0006: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: ARITH  (r3 I:int) = (r2 I:int) \/ (2 int) \l0x000d: INVOKE  (r4 I:char) = (r8 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0011: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0013: INVOKE  (r4 I:int) = (r4 I:char), (r5 I:int) java.lang.Character.digit(char, int):int type: STATIC \l0x0017: ARITH  (r4 I:int) = (r4 I:int) \<\< (4 int) \l0x0019: ARITH  (r6 I:int) = (r2 I:int) + (1 int) \l0x001b: INVOKE  (r6 I:char) = (r8 I:java.lang.String), (r6 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001f: INVOKE  (r5 I:int) = (r6 I:char), (r5 I:int) java.lang.Character.digit(char, int):int type: STATIC \l0x0023: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0024: CAST  (r4 I:byte) = (byte) (r4 I:int) \l0x0025: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: RETURN  (r1 I:byte[]) \l}"];
MethodNode[shape=record,label="{private byte[] io.fabric.sdk.android.services.network.PinningTrustManager.hexStringToByteArray((r7 'this' I:io.fabric.sdk.android.services.network.PinningTrustManager A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

