digraph "CFG forio.fabric.sdk.android.services.network.PinningTrustManager.isValidPin(Ljava\/security\/cert\/X509Certificate;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"SHA1\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r0 I:java.security.MessageDigest) = (r0 I:java.lang.String) java.security.MessageDigest.getInstance(java.lang.String):java.security.MessageDigest type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}, TRY_ENTER]\l0x0006: INVOKE  (r3 I:java.security.PublicKey) = (r3 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getPublicKey():java.security.PublicKey type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x000a: INVOKE  (r3 I:byte[]) = (r3 I:java.security.PublicKey) java.security.PublicKey.getEncoded():byte[] type: INTERFACE A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x000e: INVOKE  (r3 I:byte[]) = (r0 I:java.security.MessageDigest), (r3 I:byte[]) java.security.MessageDigest.digest(byte[]):byte[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x0012: IGET  (r0 I:java.util.List\<byte[]\>) = \l  (r2 I:io.fabric.sdk.android.services.network.PinningTrustManager)\l io.fabric.sdk.android.services.network.PinningTrustManager.pins java.util.List A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x0014: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002c A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x0022: CHECK_CAST  (r1 I:byte[]) = (byte[]) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x0024: INVOKE  (r1 I:boolean) = (r1 I:byte[]), (r3 I:byte[]) java.util.Arrays.equals(byte[], byte[]):boolean type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x002e \}]\l0x0027: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: RETURN  (r3 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  (r3 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:1:0x0002\l|0x002e: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: NEW_INSTANCE  (r0 I:java.security.cert.CertificateException) =  java.security.cert.CertificateException \l0x0031: INVOKE  \l  (r0 I:java.security.cert.CertificateException)\l  (r3 I:java.lang.Throwable)\l java.security.cert.CertificateException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private boolean io.fabric.sdk.android.services.network.PinningTrustManager.isValidPin((r2 'this' I:io.fabric.sdk.android.services.network.PinningTrustManager A[IMMUTABLE_TYPE, THIS]), (r3 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.cert.CertificateException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

