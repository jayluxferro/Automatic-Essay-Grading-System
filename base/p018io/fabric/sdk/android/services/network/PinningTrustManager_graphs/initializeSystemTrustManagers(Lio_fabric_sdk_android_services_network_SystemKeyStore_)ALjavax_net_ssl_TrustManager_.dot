digraph "CFG forio.fabric.sdk.android.services.network.PinningTrustManager.initializeSystemTrustManagers(Lio\/fabric\/sdk\/android\/services\/network\/SystemKeyStore;)[Ljavax\/net\/ssl\/TrustManager;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}\lSplitter:B:1:0x0002\l|javax.net.ssl.TrustManagerFactory r0 = javax.net.ssl.TrustManagerFactory.getInstance(\"X509\")     \/\/ Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}\lr0.init(r2.trustStore)     \/\/ Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|return r0.getTrustManagers()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|ExcHandler: KeyStoreException (r2v2 'e' java.security.KeyStoreException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.security.KeyStoreException r2 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x0016|throw new java.lang.AssertionError(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|ExcHandler: NoSuchAlgorithmException (r2v1 'e' java.security.NoSuchAlgorithmException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.security.NoSuchAlgorithmException r2 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018}"];
Node_9 [shape=record,label="{9\:\ 0x001d|throw new java.lang.AssertionError(r2)\l}"];
MethodNode[shape=record,label="{private javax.net.ssl.TrustManager[] io.fabric.sdk.android.services.network.PinningTrustManager.initializeSystemTrustManagers((r1v0 'this' io.fabric.sdk.android.services.network.PinningTrustManager A[IMMUTABLE_TYPE, THIS]), (r2v0 io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

