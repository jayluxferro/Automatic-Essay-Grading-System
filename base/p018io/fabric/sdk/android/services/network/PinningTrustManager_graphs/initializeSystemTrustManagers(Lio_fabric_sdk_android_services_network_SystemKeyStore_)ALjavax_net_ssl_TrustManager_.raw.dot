digraph "CFG forio.fabric.sdk.android.services.network.PinningTrustManager.initializeSystemTrustManagers(Lio\/fabric\/sdk\/android\/services\/network\/SystemKeyStore;)[Ljavax\/net\/ssl\/TrustManager;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"X509\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r0 I:javax.net.ssl.TrustManagerFactory) = (r0 I:java.lang.String) javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String):javax.net.ssl.TrustManagerFactory type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}, TRY_ENTER]\l0x0006: IGET  (r2 I:java.security.KeyStore) = \l  (r2 I:io.fabric.sdk.android.services.network.SystemKeyStore)\l io.fabric.sdk.android.services.network.SystemKeyStore.trustStore java.security.KeyStore A[Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}]\l0x0008: INVOKE  \l  (r0 I:javax.net.ssl.TrustManagerFactory)\l  (r2 I:java.security.KeyStore)\l javax.net.ssl.TrustManagerFactory.init(java.security.KeyStore):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}]\l0x000b: INVOKE  (r2 I:javax.net.ssl.TrustManager[]) = (r0 I:javax.net.ssl.TrustManagerFactory) javax.net.ssl.TrustManagerFactory.getTrustManagers():javax.net.ssl.TrustManager[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x0017, KeyStoreException \-\> 0x0010 \}]\l0x000e: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r2 I:javax.net.ssl.TrustManager[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|ExcHandler: KeyStoreException null\lSplitter:B:1:0x0002\l|0x0010: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0013: INVOKE  (r0 I:java.lang.AssertionError), (r2 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:1:0x0002\l|0x0017: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001a: INVOKE  (r0 I:java.lang.AssertionError), (r2 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private javax.net.ssl.TrustManager[] io.fabric.sdk.android.services.network.PinningTrustManager.initializeSystemTrustManagers((r1 'this' I:io.fabric.sdk.android.services.network.PinningTrustManager A[IMMUTABLE_TYPE, THIS]), (r2 I:io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

