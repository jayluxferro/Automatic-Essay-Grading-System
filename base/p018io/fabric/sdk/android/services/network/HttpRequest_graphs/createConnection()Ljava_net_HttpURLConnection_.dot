digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.createConnection()Ljava\/net\/HttpURLConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x001f \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|Catch:\{ IOException \-\> 0x001f \}\l|if (r3.httpProxyHost == null) goto L_0x0011     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|Catch:\{ IOException \-\> 0x001f \}\l|java.net.HttpURLConnection r0 = CONNECTION_FACTORY.create(r3.url, createProxy())     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|Catch:\{ IOException \-\> 0x001f \}\l|java.net.HttpURLConnection r0 = CONNECTION_FACTORY.create(r3.url)     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|Catch:\{ IOException \-\> 0x001f \}\lPHI: r0 \l  PHI: (r0v2 java.net.HttpURLConnection) = (r0v4 java.net.HttpURLConnection), (r0v6 java.net.HttpURLConnection) binds: [B:4:0x0011, B:3:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|r0.setRequestMethod(r3.requestMethod)     \/\/ Catch:\{ IOException \-\> 0x001f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.io.IOException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020}"];
Node_9 [shape=record,label="{9\:\ 0x0025|throw new p018io.fabric.sdk.android.services.network.HttpRequest.HttpRequestException(r0)\l}"];
MethodNode[shape=record,label="{private java.net.HttpURLConnection io.fabric.sdk.android.services.network.HttpRequest.createConnection((r3v0 'this' io.fabric.sdk.android.services.network.HttpRequest A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

