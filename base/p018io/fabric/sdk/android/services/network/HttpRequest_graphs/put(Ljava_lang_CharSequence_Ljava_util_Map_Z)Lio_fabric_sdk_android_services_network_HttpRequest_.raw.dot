digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.put(Ljava\/lang\/CharSequence;Ljava\/util\/Map;Z)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r1 I:java.util.Map) io.fabric.sdk.android.services.network.HttpRequest.append(java.lang.CharSequence, java.util.Map):java.lang.String type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence) io.fabric.sdk.android.services.network.HttpRequest.encode(java.lang.CharSequence):java.lang.String type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:io.fabric.sdk.android.services.network.HttpRequest) = (r0 I:java.lang.CharSequence) io.fabric.sdk.android.services.network.HttpRequest.put(java.lang.CharSequence):io.fabric.sdk.android.services.network.HttpRequest type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r0 I:io.fabric.sdk.android.services.network.HttpRequest) \l}"];
MethodNode[shape=record,label="{public static io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.HttpRequest.put((r0 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.util.Map\<?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/util\/Map\<, **\>;Z), Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

