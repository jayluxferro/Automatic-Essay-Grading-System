digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.useProxy(Ljava\/lang\/String;I)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.net.HttpURLConnection) = (r1 I:io.fabric.sdk.android.services.network.HttpRequest) io.fabric.sdk.android.services.network.HttpRequest.connection java.net.HttpURLConnection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:io.fabric.sdk.android.services.network.HttpRequest)\l io.fabric.sdk.android.services.network.HttpRequest.httpProxyHost java.lang.String \l0x0006: IPUT  \l  (r3 I:int)\l  (r1 I:io.fabric.sdk.android.services.network.HttpRequest)\l io.fabric.sdk.android.services.network.HttpRequest.httpProxyPort int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r1 I:io.fabric.sdk.android.services.network.HttpRequest) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"The connection has already been created. This method must be called before reading or writing to the request.\" \l0x000d: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.HttpRequest.useProxy((r1 'this' I:io.fabric.sdk.android.services.network.HttpRequest A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

