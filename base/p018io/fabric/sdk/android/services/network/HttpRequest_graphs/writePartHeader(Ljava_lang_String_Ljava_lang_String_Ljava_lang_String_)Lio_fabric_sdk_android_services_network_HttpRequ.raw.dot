digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.writePartHeader(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"form\-data; name=\"\" \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000a: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CONST_STR  (r3 I:java.lang.String) =  \"\"; filename=\"\" \l0x0011: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x001c: CONST_STR  (r3 I:java.lang.String) =  \"Content\-Disposition\" \l0x001e: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0022: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.network.HttpRequest)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l io.fabric.sdk.android.services.network.HttpRequest.partHeader(java.lang.String, java.lang.String):io.fabric.sdk.android.services.network.HttpRequest type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"Content\-Type\" \l0x0029: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.network.HttpRequest)\l  (r3 I:java.lang.String)\l  (r5 I:java.lang.String)\l io.fabric.sdk.android.services.network.HttpRequest.partHeader(java.lang.String, java.lang.String):io.fabric.sdk.android.services.network.HttpRequest type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: CONST_STR  (r3 I:java.lang.String) =  \"\l\" \l0x002e: INVOKE  (r3 I:io.fabric.sdk.android.services.network.HttpRequest) = \l  (r2 I:io.fabric.sdk.android.services.network.HttpRequest)\l  (r3 I:java.lang.CharSequence)\l io.fabric.sdk.android.services.network.HttpRequest.send(java.lang.CharSequence):io.fabric.sdk.android.services.network.HttpRequest type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: RETURN  (r3 I:io.fabric.sdk.android.services.network.HttpRequest) \l}"];
MethodNode[shape=record,label="{protected io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.HttpRequest.writePartHeader((r2 'this' I:io.fabric.sdk.android.services.network.HttpRequest A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

