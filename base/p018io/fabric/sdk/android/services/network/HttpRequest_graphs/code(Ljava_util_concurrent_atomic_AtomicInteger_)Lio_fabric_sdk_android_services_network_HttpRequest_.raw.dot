digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.code(Ljava\/util\/concurrent\/atomic\/AtomicInteger;)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r1 I:io.fabric.sdk.android.services.network.HttpRequest) io.fabric.sdk.android.services.network.HttpRequest.code():int type: VIRTUAL \l0x0004: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicInteger)\l  (r0 I:int)\l java.util.concurrent.atomic.AtomicInteger.set(int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: RETURN  (r1 I:io.fabric.sdk.android.services.network.HttpRequest) \l}"];
MethodNode[shape=record,label="{public io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.HttpRequest.code((r1 'this' I:io.fabric.sdk.android.services.network.HttpRequest A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.concurrent.atomic.AtomicInteger A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[io.fabric.sdk.android.services.network.HttpRequest$HttpRequestException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

