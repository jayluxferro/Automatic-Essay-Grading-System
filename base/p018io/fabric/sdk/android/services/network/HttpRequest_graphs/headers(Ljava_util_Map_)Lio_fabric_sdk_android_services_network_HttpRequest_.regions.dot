digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.headers(Ljava\/util\/Map;)Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;" {
subgraph cluster_Region_813498959 {
label = "R(2:(2:2|(1:5))|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1325326055 {
label = "IF [B:1:0x0004] THEN: R(2:2|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.isEmpty() == false) goto L_0x0006\l}"];
subgraph cluster_Region_572259214 {
label = "R(2:2|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|java.util.Iterator r2 = r2.entrySet().iterator()\l}"];
subgraph cluster_LoopRegion_257664513 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r2.hasNext() != false) goto L_0x0014\l}"];
subgraph cluster_Region_1475130079 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x000e\-\>B:5:0x0014\l|header(r0)\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e|LOOP_START\lLOOP:0: B:3:0x000e\-\>B:5:0x0014\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public io.fabric.sdk.android.services.network.HttpRequest io.fabric.sdk.android.services.network.HttpRequest.headers((r1v0 'this' io.fabric.sdk.android.services.network.HttpRequest A[IMMUTABLE_TYPE, THIS]), (r2v0 java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Lio\/fabric\/sdk\/android\/services\/network\/HttpRequest;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_3;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_7 -> Node_6;
}

