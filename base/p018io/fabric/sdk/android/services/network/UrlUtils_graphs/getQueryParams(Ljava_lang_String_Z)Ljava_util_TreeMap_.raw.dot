digraph "CFG forio.fabric.sdk.android.services.network.UrlUtils.getQueryParams(Ljava\/lang\/String;Z)Ljava\/util\/TreeMap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.TreeMap) =  java.util.TreeMap \l0x0002: INVOKE  (r0 I:java.util.TreeMap) java.util.TreeMap.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  \l  (r0 I:java.util.TreeMap\<java.lang.String, java.lang.String\>)\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST_STR  (r1 I:java.lang.String) =  \"&\" \l0x000a: INVOKE  (r7 I:java.lang.String[]) = (r7 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x000e: ARRAY_LENGTH  (r1 I:int) = (r7 I:?[]) \l0x000f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:17:0x005a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: AGET  (r4 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0015: CONST_STR  (r5 I:java.lang.String) =  \"=\" \l0x0017: INVOKE  (r4 I:java.lang.String[]) = (r4 I:java.lang.String), (r5 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x001b: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x001c: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: AGET  (r6 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0024: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String) io.fabric.sdk.android.services.network.UrlUtils.urlDecode(java.lang.String):java.lang.String type: STATIC \l0x0028: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x002a: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) io.fabric.sdk.android.services.network.UrlUtils.urlDecode(java.lang.String):java.lang.String type: STATIC \l0x002e: INVOKE  \l  (r0 I:java.util.TreeMap)\l  (r6 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.TreeMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: AGET  (r6 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0034: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0036: INVOKE  \l  (r0 I:java.util.TreeMap)\l  (r6 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.TreeMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x003c: INVOKE  (r5 I:boolean) = (r5 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0046: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) io.fabric.sdk.android.services.network.UrlUtils.urlDecode(java.lang.String):java.lang.String type: STATIC \l0x004a: CONST_STR  (r5 I:java.lang.String) =  \"\" \l0x004c: INVOKE  \l  (r0 I:java.util.TreeMap)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.TreeMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0052: CONST_STR  (r5 I:java.lang.String) =  \"\" \l0x0054: INVOKE  \l  (r0 I:java.util.TreeMap)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.TreeMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: RETURN  \l  (r0 I:java.util.TreeMap\<java.lang.String, java.lang.String\>)\l \l}"];
MethodNode[shape=record,label="{public static java.util.TreeMap\<java.lang.String, java.lang.String\> io.fabric.sdk.android.services.network.UrlUtils.getQueryParams((r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Z), Ljava\/util\/TreeMap\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_16;
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_4;
}

