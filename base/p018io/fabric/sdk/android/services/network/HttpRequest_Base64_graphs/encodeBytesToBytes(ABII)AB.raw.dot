digraph "CFG forio.fabric.sdk.android.services.network.HttpRequest.Base64.encodeBytesToBytes([BII)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0092 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:23:0x007b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r10 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:21:0x0064 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: ARITH  (r0 I:int) = (r9 I:int) + (r10 I:int) \l0x0008: ARRAY_LENGTH  (r1 I:int) = (r8 I:?[]) \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:19:0x0040 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r0 I:int) = (r10 I:int) \/ (3 int) \l0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0011: ARITH  (r0 I:int) = (r0 I:int) * (4 int) \l0x0013: ARITH  (r5 I:int) = (r10 I:int) % (3 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x001a: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x001c: ARITH  (r1 I:int) = (r10 I:int) + (\-2 int) \l0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r5 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: ARITH  (r7 I:int) = (r5 I:int) + (r9 I:int) \l0x0024: INVOKE  \l  (r8 I:byte[])\l  (r7 I:int)\l  (r3 I:int)\l  (r0 I:byte[])\l  (r6 I:int)\l io.fabric.sdk.android.services.network.HttpRequest.Base64.encode3to4(byte[], int, int, byte[], int):byte[] type: STATIC \l0x0027: ARITH  (r5 I:int) = (r5 I:int) + (3 int) \l0x0029: ARITH  (r6 I:int) = (r6 I:int) + (4 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IF  (r5 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:14:0x0035 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: ARITH  (r9 I:int) = (r9 I:int) + (r5 I:int) \l0x002f: ARITH  (r10 I:int) = (r10 I:int) \- (r5 I:int) \l0x0030: INVOKE  \l  (r8 I:byte[])\l  (r9 I:int)\l  (r10 I:int)\l  (r0 I:byte[])\l  (r6 I:int)\l io.fabric.sdk.android.services.network.HttpRequest.Base64.encode3to4(byte[], int, int, byte[], int):byte[] type: STATIC \l0x0033: ARITH  (r6 I:int) = (r6 I:int) + (4 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: ARRAY_LENGTH  (r8 I:int) = (r0 I:?[]) \l0x0036: ARITH  (r8 I:int) = (r8 I:int) \- (r2 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r6 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: NEW_ARRAY  (r8 I:byte[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x003b: INVOKE  \l  (r0 I:java.lang.Object)\l  (r4 I:int)\l  (r8 I:java.lang.Object)\l  (r4 I:int)\l  (r6 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: RETURN  (r8 I:byte[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: RETURN  (r0 I:byte[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0042: SGET  (r1 I:java.util.Locale) =  java.util.Locale.ENGLISH java.util.Locale \l0x0044: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0046: INVOKE  (r9 I:java.lang.Integer) = (r9 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x004a: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x004c: INVOKE  (r9 I:java.lang.Integer) = (r10 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0050: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0052: ARRAY_LENGTH  (r8 I:int) = (r8 I:?[]) \l0x0053: INVOKE  (r8 I:java.lang.Integer) = (r8 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0057: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0058: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x005a: CONST_STR  (r8 I:java.lang.String) =  \"Cannot have offset of %d and length of %d with array of length %d\" \l0x005c: INVOKE  (r8 I:java.lang.String) = \l  (r1 I:java.util.Locale)\l  (r8 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0060: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|0x0064: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0066: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0068: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006b: CONST_STR  (r0 I:java.lang.String) =  \"Cannot have length offset: \" \l0x006d: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0070: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0077: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x007a|0x007a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007b|0x007b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007d: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007f: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0082: CONST_STR  (r0 I:java.lang.String) =  \"Cannot have negative offset: \" \l0x0084: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: INVOKE  (r10 I:java.lang.StringBuilder), (r9 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x008a: INVOKE  (r9 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008e: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0091|0x0091: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0092|0x0092: NEW_INSTANCE  (r8 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0094: CONST_STR  (r9 I:java.lang.String) =  \"Cannot serialize a null array.\" \l0x0096: INVOKE  \l  (r8 I:java.lang.NullPointerException)\l  (r9 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0099|0x0099: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static byte[] io.fabric.sdk.android.services.network.HttpRequest.Base64.encodeBytesToBytes((r8 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_25;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_10;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

