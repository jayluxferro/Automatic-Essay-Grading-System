digraph "CFG forio.fabric.sdk.android.services.network.NetworkUtils.getSSLSocketFactory(Lio\/fabric\/sdk\/android\/services\/network\/PinningInfoProvider;)Ljavax\/net\/ssl\/SSLSocketFactory;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"TLS\" \l0x0002: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:java.lang.String) javax.net.ssl.SSLContext.getInstance(java.lang.String):javax.net.ssl.SSLContext type: STATIC \l0x0006: NEW_INSTANCE  (r1 I:io.fabric.sdk.android.services.network.SystemKeyStore) =  io.fabric.sdk.android.services.network.SystemKeyStore \l0x0008: INVOKE  (r2 I:java.io.InputStream) = \l  (r4 I:io.fabric.sdk.android.services.network.PinningInfoProvider)\l io.fabric.sdk.android.services.network.PinningInfoProvider.getKeyStoreStream():java.io.InputStream type: INTERFACE \l0x000c: INVOKE  (r3 I:java.lang.String) = \l  (r4 I:io.fabric.sdk.android.services.network.PinningInfoProvider)\l io.fabric.sdk.android.services.network.PinningInfoProvider.getKeyStorePassword():java.lang.String type: INTERFACE \l0x0010: INVOKE  \l  (r1 I:io.fabric.sdk.android.services.network.SystemKeyStore)\l  (r2 I:java.io.InputStream)\l  (r3 I:java.lang.String)\l io.fabric.sdk.android.services.network.SystemKeyStore.\<init\>(java.io.InputStream, java.lang.String):void type: DIRECT \l0x0013: NEW_INSTANCE  (r2 I:io.fabric.sdk.android.services.network.PinningTrustManager) =  io.fabric.sdk.android.services.network.PinningTrustManager \l0x0015: INVOKE  \l  (r2 I:io.fabric.sdk.android.services.network.PinningTrustManager)\l  (r1 I:io.fabric.sdk.android.services.network.SystemKeyStore)\l  (r4 I:io.fabric.sdk.android.services.network.PinningInfoProvider)\l io.fabric.sdk.android.services.network.PinningTrustManager.\<init\>(io.fabric.sdk.android.services.network.SystemKeyStore, io.fabric.sdk.android.services.network.PinningInfoProvider):void type: DIRECT \l0x0018: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: NEW_ARRAY  (r4 I:javax.net.ssl.TrustManager[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: javax.net.ssl.TrustManager[] \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  \l  (r0 I:javax.net.ssl.SSLContext)\l  (r1 I:javax.net.ssl.KeyManager[])\l  (r4 I:javax.net.ssl.TrustManager[])\l  (r1 I:java.security.SecureRandom)\l javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom):void type: VIRTUAL \l0x0022: INVOKE  (r4 I:javax.net.ssl.SSLSocketFactory) = (r0 I:javax.net.ssl.SSLContext) javax.net.ssl.SSLContext.getSocketFactory():javax.net.ssl.SSLSocketFactory type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|0x0026: RETURN  (r4 I:javax.net.ssl.SSLSocketFactory) \l}"];
MethodNode[shape=record,label="{public static final javax.net.ssl.SSLSocketFactory io.fabric.sdk.android.services.network.NetworkUtils.getSSLSocketFactory((r4 I:io.fabric.sdk.android.services.network.PinningInfoProvider A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.KeyManagementException, java.security.NoSuchAlgorithmException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

