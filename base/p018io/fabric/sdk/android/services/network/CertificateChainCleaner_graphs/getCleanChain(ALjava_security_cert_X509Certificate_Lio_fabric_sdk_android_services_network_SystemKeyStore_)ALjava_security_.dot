digraph "CFG forio.fabric.sdk.android.services.network.CertificateChainCleaner.getCleanChain([Ljava\/security\/cert\/X509Certificate;Lio\/fabric\/sdk\/android\/services\/network\/SystemKeyStore;)[Ljava\/security\/cert\/X509Certificate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.LinkedList r0 = new java.util.LinkedList()\lboolean r2 = r7.isTrustRoot(r6[0])\lr0.add(r6[0])\lr1 = true\lr3 = r2\lr2 = 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|LOOP_START\lPHI: r2 r3 \l  PHI: (r2v3 int) = (r2v2 int), (r2v5 int) binds: [B:0:0x0000, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v3 boolean) binds: [B:0:0x0000, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:8:0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|if (r2 \>= r6.length) goto L_0x0034\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017}"];
Node_4 [shape=record,label="{4\:\ 0x001d|if (r7.isTrustRoot(r6[r2]) == false) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|r3 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|PHI: r3 \l  PHI: (r3v3 boolean) = (r3v1 boolean), (r3v4 boolean) binds: [B:4:0x001d, B:5:0x001f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|if (isValidLink(r6[r2], r6[r2 + \-1]) == false) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|LOOP_END\lLOOP:0: B:1:0x0014\-\>B:8:0x002c\l|r0.add(r6[r2])\lint r2 = r2 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v3 boolean) binds: [B:18:0x0034, B:19:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|java.security.cert.X509Certificate r6 = r7.getTrustRootFor(r6[r2 \- 1])\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|if (r6 == null) goto L_0x0041\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|r0.add(r6)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|r1 = r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|PHI: r1 \l  PHI: (r1v3 boolean) = (r1v4 boolean), (r1v2 boolean) binds: [B:12:0x0041, B:11:0x003d] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L_0x0051\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044}"];
Node_15 [shape=record,label="{15\:\ 0x0050|RETURN\l|return (java.security.cert.X509Certificate[]) r0.toArray(new java.security.cert.X509Certificate[r0.size()])\l}"];
Node_16 [shape=record,label="{16\:\ 0x0051}"];
Node_17 [shape=record,label="{17\:\ 0x0058|throw new java.security.cert.CertificateException(\"Didn't find a trust anchor in chain cleanup!\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.security.cert.X509Certificate[] io.fabric.sdk.android.services.network.CertificateChainCleaner.getCleanChain((r6v0 java.security.cert.X509Certificate[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 io.fabric.sdk.android.services.network.SystemKeyStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.cert.CertificateException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_9;
Node_19 -> Node_9;
}

