digraph "CFG forio.fabric.sdk.android.services.common.QueueFile.\<init\>(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0005: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0007: IPUT  \l  (r0 I:byte[])\l  (r1 I:io.fabric.sdk.android.services.common.QueueFile)\l io.fabric.sdk.android.services.common.QueueFile.buffer byte[] \l0x0009: INVOKE  (r0 I:boolean) = (r2 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r2 I:java.io.File) io.fabric.sdk.android.services.common.QueueFile.initialize(java.io.File):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r2 I:java.io.RandomAccessFile) = (r2 I:java.io.File) io.fabric.sdk.android.services.common.QueueFile.open(java.io.File):java.io.RandomAccessFile type: STATIC \l0x0016: IPUT  \l  (r2 I:java.io.RandomAccessFile)\l  (r1 I:io.fabric.sdk.android.services.common.QueueFile)\l io.fabric.sdk.android.services.common.QueueFile.raf java.io.RandomAccessFile \l0x0018: INVOKE  (r1 I:io.fabric.sdk.android.services.common.QueueFile) io.fabric.sdk.android.services.common.QueueFile.readHeader():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void io.fabric.sdk.android.services.common.QueueFile.\<init\>((r1 'this' I:io.fabric.sdk.android.services.common.QueueFile A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

