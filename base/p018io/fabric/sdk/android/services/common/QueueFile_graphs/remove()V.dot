digraph "CFG forio.fabric.sdk.android.services.common.QueueFile.remove()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (isEmpty() != false) goto L_0x0045\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r6.elementCount != 1) goto L_0x0010\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|clear()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|int r0 = wrapPosition((r6.first.position + 4) + r6.first.length)\lringRead(r0, r6.buffer, 0, 4)\lint r2 = readInt(r6.buffer, 0)\lwriteHeader(r6.fileLength, r6.elementCount \- 1, r0, r6.last.position)\lr6.elementCount = r6.elementCount \- 1\lr6.first = new p018io.fabric.sdk.android.services.common.QueueFile.Element(r0, r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|monitor\-exit(r6)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|SYNTHETIC\lSplitter:B:10:0x0045\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0045\l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|throw new java.util.NoSuchElementException()\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|REMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized void io.fabric.sdk.android.services.common.QueueFile.remove((r6v0 'this' io.fabric.sdk.android.services.common.QueueFile A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

