digraph "CFG forio.fabric.sdk.android.services.common.CommonUtils.copyStream(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:java.io.InputStream), (r4 I:byte[]) java.io.InputStream.read(byte[]):int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  \l  (r3 I:java.io.OutputStream)\l  (r4 I:byte[])\l  (r1 I:int)\l  (r0 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN   \l}"];
MethodNode[shape=record,label="{public static void io.fabric.sdk.android.services.common.CommonUtils.copyStream((r2 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_0;
}

