digraph "CFG forio.fabric.sdk.android.services.common.CommonUtils.copyStream(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:2:0x0007\l|int r0 = r2.read(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 == \-1) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:2:0x0007\l|r3.write(r4, 0, r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void io.fabric.sdk.android.services.common.CommonUtils.copyStream((r2v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_0;
Node_4 -> Node_3;
}

