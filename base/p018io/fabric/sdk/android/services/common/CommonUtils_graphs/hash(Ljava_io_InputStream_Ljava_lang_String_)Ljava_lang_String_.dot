digraph "CFG forio.fabric.sdk.android.services.common.CommonUtils.hash(Ljava\/io\/InputStream;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x001d \}\lSplitter:B:0:0x0000\l|java.security.MessageDigest r4 = java.security.MessageDigest.getInstance(r4)     \/\/ Catch:\{ Exception \-\> 0x001d \}\lbyte[] r0 = new byte[1024]     \/\/ Catch:\{ Exception \-\> 0x001d \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|LOOP_START\lCatch:\{ Exception \-\> 0x001d \}\lLOOP:0: B:2:0x0008\-\>B:4:0x000f\l|int r1 = r3.read(r0)     \/\/ Catch:\{ Exception \-\> 0x001d \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|Catch:\{ Exception \-\> 0x001d \}\l|if (r1 == \-1) goto L_0x0014     \/\/ Catch:\{ Exception \-\> 0x001d \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|LOOP_END\lCatch:\{ Exception \-\> 0x001d \}\lLOOP:0: B:2:0x0008\-\>B:4:0x000f\l|r4.update(r0, 0, r1)     \/\/ Catch:\{ Exception \-\> 0x001d \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|Catch:\{ Exception \-\> 0x001d \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return hexify(r4.digest())\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|ExcHandler: Exception (r3v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r3 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|p018io.fabric.sdk.android.Fabric.getLogger().mo22224e(p018io.fabric.sdk.android.Fabric.TAG, \"Could not calculate hash for app icon.\", r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|RETURN\l|return \"\"\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.String io.fabric.sdk.android.services.common.CommonUtils.hash((r3v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_5;
}

