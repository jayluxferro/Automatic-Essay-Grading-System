digraph "CFG forio.fabric.sdk.android.services.common.CommonUtils.streamToString(Ljava\/io\/InputStream;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.Scanner) =  java.util.Scanner \l0x0002: INVOKE  (r0 I:java.util.Scanner), (r1 I:java.io.InputStream) java.util.Scanner.\<init\>(java.io.InputStream):void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"A\" \l0x0007: INVOKE  (r1 I:java.util.Scanner) = (r0 I:java.util.Scanner), (r1 I:java.lang.String) java.util.Scanner.useDelimiter(java.lang.String):java.util.Scanner type: VIRTUAL \l0x000b: INVOKE  (r0 I:boolean) = (r1 I:java.util.Scanner) java.util.Scanner.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.String) = (r1 I:java.util.Scanner) java.util.Scanner.next():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST_STR  (r1 I:java.lang.String) =  \"\" \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String io.fabric.sdk.android.services.common.CommonUtils.streamToString((r1 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

