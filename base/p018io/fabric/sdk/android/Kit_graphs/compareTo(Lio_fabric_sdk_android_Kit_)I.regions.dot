digraph "CFG forio.fabric.sdk.android.Kit.compareTo(Lio\/fabric\/sdk\/android\/Kit;)I" {
subgraph cluster_Region_1059687654 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(1:(2:(1:10)|(1:(2:(1:17)|(1:15)))))))))";
node [shape=record,color=blue];
subgraph cluster_Region_916506030 {
label = "R(2:(1:2)|(1:(2:(1:5)|(1:(2:(1:10)|(1:(2:(1:17)|(1:15))))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1397451341 {
label = "IF [B:1:0x0005] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (containsAnnotatedDependency(r4) == true) goto L_0x0007\l}"];
subgraph cluster_Region_1640310811 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return 1\l}"];
}
}
subgraph cluster_Region_318293625 {
label = "R(1:(2:(1:5)|(1:(2:(1:10)|(1:(2:(1:17)|(1:15)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_583396413 {
label = "R(2:(1:5)|(1:(2:(1:10)|(1:(2:(1:17)|(1:15))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_718598954 {
label = "IF [B:4:0x000d] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r4.containsAnnotatedDependency(r3) == true) goto L_0x000f\l}"];
subgraph cluster_Region_1654227867 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_906386111 {
label = "R(1:(2:(1:10)|(1:(2:(1:17)|(1:15)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1001385030 {
label = "R(2:(1:10)|(1:(2:(1:17)|(1:15))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_913249722 {
label = "IF [B:7:0x0014, B:9:0x001a] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|if (hasAnnotatedDependency() != false) goto L_0x0016\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|ADDED_TO_REGION\l|if (r4.hasAnnotatedDependency() != true) goto L_0x001c\l}"];
subgraph cluster_Region_415550903 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|return 1\l}"];
}
}
subgraph cluster_Region_479444914 {
label = "R(1:(2:(1:17)|(1:15)))";
node [shape=record,color=blue];
subgraph cluster_Region_1486536122 {
label = "R(2:(1:17)|(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_370586070 {
label = "IF [B:12:0x0021, B:14:0x0027] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0021|if (hasAnnotatedDependency() == true) goto L_?\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|ADDED_TO_REGION\l|if (r4.hasAnnotatedDependency() == false) goto L_?\l}"];
subgraph cluster_Region_679571414 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_703474523 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0029|RETURN\l|return \-1\l}"];
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0016}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001d}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0023}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return 0\l}"];
MethodNode[shape=record,label="{public int io.fabric.sdk.android.Kit.compareTo((r3v0 'this' io.fabric.sdk.android.Kit A[IMMUTABLE_TYPE, THIS]), (r4v0 io.fabric.sdk.android.Kit A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

