digraph "CFG fortimber.log.Timber.plant([Ltimber\/log\/Timber$Tree;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0040 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: SGET  (r3 I:timber.log.Timber$Tree) =  timber.log.Timber.TREE_OF_SOULS timber.log.Timber$Tree \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0013: CONST_STR  (r0 I:java.lang.String) =  \"Cannot plant Timber into itself.\" \l0x0015: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x001b: CONST_STR  (r0 I:java.lang.String) =  \"trees contains null\" \l0x001d: INVOKE  \l  (r4 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: SGET  (r0 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|SYNTHETIC\lSplitter:B:14:0x0024\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0024\l|0x0024: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x003d \}, TRY_ENTER]\l0x0026: INVOKE  (r1 I:java.util.Collection), (r4 I:java.lang.Object[]) java.util.Collections.addAll(java.util.Collection, java.lang.Object[]):boolean type: STATIC A[Catch:\{ all \-\> 0x003d \}]\l0x0029: SGET  (r4 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x003d \}]\l0x002b: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x003d \}]\l0x002d: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x003d \}]\l0x0031: NEW_ARRAY  (r1 I:timber.log.Timber$Tree[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x003d \}]\l0x0033: INVOKE  (r4 I:java.lang.Object[]) = (r4 I:java.util.List), (r1 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x003d \}]\l0x0037: CHECK_CAST  (r4 I:timber.log.Timber$Tree[]) = (timber.log.Timber$Tree[]) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x003d \}]\l0x0039: SPUT  (r4 I:timber.log.Timber$Tree[]) timber.log.Timber.forestAsArray timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: RETURN   A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|ExcHandler: all null\lSplitter:B:14:0x0024\l|0x003d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0042: CONST_STR  (r0 I:java.lang.String) =  \"trees == null\" \l0x0044: INVOKE  \l  (r4 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void timber.log.Timber.plant((r4 I:timber.log.Timber$Tree[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_21;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_2;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

