digraph "CFG fortimber.log.Timber.plant(Ltimber\/log\/Timber$Tree;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SGET  (r0 I:timber.log.Timber$Tree) =  timber.log.Timber.TREE_OF_SOULS timber.log.Timber$Tree \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SGET  (r0 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|SYNTHETIC\lSplitter:B:5:0x0009\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0009\l|0x0009: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x000b: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0022 \}]\l0x000e: SGET  (r2 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0022 \}]\l0x0010: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0022 \}]\l0x0012: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0022 \}]\l0x0016: NEW_ARRAY  (r1 I:timber.log.Timber$Tree[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x0022 \}]\l0x0018: INVOKE  (r2 I:java.lang.Object[]) = (r2 I:java.util.List), (r1 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0022 \}]\l0x001c: CHECK_CAST  (r2 I:timber.log.Timber$Tree[]) = (timber.log.Timber$Tree[]) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}]\l0x001e: SPUT  (r2 I:timber.log.Timber$Tree[]) timber.log.Timber.forestAsArray timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: RETURN   A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|ExcHandler: all null\lSplitter:B:5:0x0009\l|0x0022: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0027: CONST_STR  (r0 I:java.lang.String) =  \"Cannot plant Timber into itself.\" \l0x0029: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x002f: CONST_STR  (r0 I:java.lang.String) =  \"tree == null\" \l0x0031: INVOKE  \l  (r2 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void timber.log.Timber.plant((r2 I:timber.log.Timber$Tree A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

