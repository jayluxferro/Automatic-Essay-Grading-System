digraph "CFG fortimber.log.Timber.uproot(Ltimber\/log\/Timber$Tree;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0036 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r4 I:java.lang.Object) java.util.List.remove(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: SGET  (r4 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0036 \}]\l0x000d: SGET  (r1 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0036 \}]\l0x000f: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x0013: NEW_ARRAY  (r1 I:timber.log.Timber$Tree[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x0036 \}]\l0x0015: INVOKE  (r4 I:java.lang.Object[]) = (r4 I:java.util.List), (r1 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x0019: CHECK_CAST  (r4 I:timber.log.Timber$Tree[]) = (timber.log.Timber$Tree[]) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0036 \}]\l0x001b: SPUT  (r4 I:timber.log.Timber$Tree[]) timber.log.Timber.forestAsArray timber.log.Timber$Tree[] A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: RETURN   A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x0036 \}]\l0x0021: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0036 \}]\l0x0023: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0036 \}]\l0x0026: CONST_STR  (r3 I:java.lang.String) =  \"Cannot uproot tree which is not planted: \" A[Catch:\{ all \-\> 0x0036 \}]\l0x0028: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x002b: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x002e: INVOKE  (r4 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x0032: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0036: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0036 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void timber.log.Timber.uproot((r4 I:timber.log.Timber$Tree A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

