digraph "CFG fortimber.log.Timber.forest()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x0010 \}, TRY_ENTER]\l0x0005: SGET  (r2 I:java.util.List\<timber.log.Timber$Tree\>) =  timber.log.Timber.FOREST java.util.List A[Catch:\{ all \-\> 0x0010 \}]\l0x0007: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT A[Catch:\{ all \-\> 0x0010 \}]\l0x000a: INVOKE  (r1 I:java.util.List) = (r1 I:java.util.List) java.util.Collections.unmodifiableList(java.util.List):java.util.List type: STATIC A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r1 I:java.util.List\<timber.log.Timber$Tree\>) A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0010: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0010 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<timber.log.Timber$Tree\> timber.log.Timber.forest()  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Ltimber\/log\/Timber$Tree;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

