digraph "CFG fortimber.log.Timber.Tree.prepareLog(ILjava\/lang\/Throwable;Ljava\/lang\/String;[Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r2 I:timber.log.Timber$Tree) timber.log.Timber.Tree.getTag():java.lang.String type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = \l  (r2 I:timber.log.Timber$Tree)\l  (r0 I:java.lang.String)\l  (r3 I:int)\l timber.log.Timber.Tree.isLoggable(java.lang.String, int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r1 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: INVOKE  (r5 I:java.lang.String) = (r2 I:timber.log.Timber$Tree), (r4 I:java.lang.Throwable) timber.log.Timber.Tree.getStackTraceString(java.lang.Throwable):java.lang.String type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0027 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0027 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:timber.log.Timber$Tree)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.Object[])\l timber.log.Timber.Tree.formatMessage(java.lang.String, java.lang.Object[]):java.lang.String type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002e: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: CONST_STR  (r5 I:java.lang.String) =  \"\l\" \l0x0033: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r5 I:java.lang.String) = (r2 I:timber.log.Timber$Tree), (r4 I:java.lang.Throwable) timber.log.Timber.Tree.getStackTraceString(java.lang.Throwable):java.lang.String type: DIRECT \l0x003a: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r5 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: INVOKE  \l  (r2 I:timber.log.Timber$Tree)\l  (r3 I:int)\l  (r0 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l timber.log.Timber.Tree.log(int, java.lang.String, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: RETURN   \l}"];
MethodNode[shape=record,label="{private void timber.log.Timber.Tree.prepareLog((r2 'this' I:timber.log.Timber$Tree A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_17;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

