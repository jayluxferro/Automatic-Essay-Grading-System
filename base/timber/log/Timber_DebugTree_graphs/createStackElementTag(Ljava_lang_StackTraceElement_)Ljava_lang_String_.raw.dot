digraph "CFG fortimber.log.Timber.DebugTree.createStackElementTag(Ljava\/lang\/StackTraceElement;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StackTraceElement) java.lang.StackTraceElement.getClassName():java.lang.String type: VIRTUAL \l0x0004: SGET  (r0 I:java.util.regex.Pattern) =  timber.log.Timber.DebugTree.ANONYMOUS_CLASS java.util.regex.Pattern \l0x0006: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r4 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.find():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST_STR  (r4 I:java.lang.String) =  \"\" \l0x0012: INVOKE  (r4 I:java.lang.String) = (r0 I:java.util.regex.Matcher), (r4 I:java.lang.String) java.util.regex.Matcher.replaceAll(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0018: INVOKE  (r0 I:int) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.lastIndexOf(int):int type: VIRTUAL \l0x001c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001e: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0022: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0026: CONST  (r1 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x002c: CONST  (r2 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int), (r1 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: RETURN  (r4 I:java.lang.String) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: RETURN  (r4 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{protected java.lang.String timber.log.Timber.DebugTree.createStackElementTag((r3 'this' I:timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.StackTraceElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10[style=dashed];
Node_8 -> Node_9;
}

