digraph "CFG fortimber.log.Timber.DebugTree.getTag()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r0 = super.getTag()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return r0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.StackTraceElement[] r0 = new java.lang.Throwable().getStackTrace()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r0.length \<= 5) goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014}"];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\l|return createStackElementTag(r0[5])\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x0022|throw new java.lang.IllegalStateException(\"Synthetic stacktrace didn't have enough elements: are you using proguard?\")\l}"];
MethodNode[shape=record,label="{final java.lang.String timber.log.Timber.DebugTree.getTag((r3v0 'this' timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

