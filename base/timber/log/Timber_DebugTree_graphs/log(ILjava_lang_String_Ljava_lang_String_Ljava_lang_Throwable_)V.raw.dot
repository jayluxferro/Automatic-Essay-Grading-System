digraph "CFG fortimber.log.Timber.DebugTree.log(ILjava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r8 I:int) = (r7 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (4000(0xfa0, float:5.605E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r8 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r6 I:java.lang.String), (r7 I:java.lang.String) android.util.Log.wtf(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  \l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.String)\l android.util.Log.println(int, java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: INVOKE  (r1 I:int) = (r7 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r8 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x001c: INVOKE  (r2 I:int) = (r7 I:java.lang.String), (r2 I:int), (r8 I:int) java.lang.String.indexOf(int, int):int type: VIRTUAL \l0x0020: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0024 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: ARITH  (r3 I:int) = (r8 I:int) + (4000 int) \l0x0027: INVOKE  (r3 I:int) = (r2 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x002b: INVOKE  (r8 I:java.lang.String) = (r7 I:java.lang.String), (r8 I:int), (r3 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: INVOKE  (r6 I:java.lang.String), (r8 I:java.lang.String) android.util.Log.wtf(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: INVOKE  \l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r8 I:java.lang.String)\l android.util.Log.println(int, java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r3 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:18:0x003d \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: ARITH  (r8 I:int) = (r3 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{protected void timber.log.Timber.DebugTree.log((r4 'this' I:timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_7;
Node_18 -> Node_12;
}

