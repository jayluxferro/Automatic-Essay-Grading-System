digraph "CFG fortimber.log.Timber.DebugTree.log(ILjava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r7.length() \>= MAX_LOG_LENGTH) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r5 != 7) goto L_0x000f\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|android.util.Log.wtf(r6, r7)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|android.util.Log.println(r5, r6, r7)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r8 = 0\lint r1 = r7.length()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|LOOP_START\lPHI: r8 \l  PHI: (r8v3 int) = (r8v2 int), (r8v6 int) binds: [B:5:0x0013, B:15:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0018\-\>B:15:0x003a\l|if (r8 \>= r1) goto L_0x003f\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|int r2 = r7.indexOf(10, r8)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r2 == \-1) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|r2 = r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|LOOP_START\lPHI: r8 \l  PHI: (r8v4 int) = (r8v3 int), (r8v7 int) binds: [B:20:0x0025, B:16:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:10:0x0025\-\>B:16:0x003d\l|int r3 = java.lang.Math.min(r2, r8 + MAX_LOG_LENGTH)\ljava.lang.String r8 = r7.substring(r8, r3)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if (r5 != 7) goto L_0x0035\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|android.util.Log.wtf(r6, r8)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|android.util.Log.println(r5, r6, r8)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|if (r3 \< r2) goto L_0x003d\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|LOOP_END\lLOOP:0: B:6:0x0018\-\>B:15:0x003a\l|int r8 = r3 + 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|LOOP_END\lLOOP:1: B:10:0x0025\-\>B:16:0x003d\l|r8 = r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|SYNTHETIC\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:8:0x0021, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void timber.log.Timber.DebugTree.log((r4v0 'this' timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_22;
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_20[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_19[style=dashed];
Node_15 -> Node_6;
Node_16 -> Node_10;
Node_18 -> Node_17;
Node_19 -> Node_15;
Node_20 -> Node_10;
}

