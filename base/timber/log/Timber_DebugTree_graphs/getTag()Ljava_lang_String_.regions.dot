digraph "CFG fortimber.log.Timber.DebugTree.getTag()Ljava\/lang\/String;" {
subgraph cluster_Region_1691886612 {
label = "R(2:0|(2:(1:2)|(2:3|(2:(1:6)|(1:8)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = super.getTag()\l}"];
subgraph cluster_Region_535050082 {
label = "R(2:(1:2)|(2:3|(2:(1:6)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_984150201 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 != null) goto L_0x0006\l}"];
subgraph cluster_Region_583688935 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_2142520817 {
label = "R(2:3|(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.StackTraceElement[] java.lang.StackTraceElement[] r0 = new java.lang.Throwable().getStackTrace()\l}"];
subgraph cluster_Region_1047149423 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1525229207 {
label = "IF [B:4:0x0012] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r0.length \> 5) goto L_0x0014\l}"];
subgraph cluster_Region_658061387 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\l|return createStackElementTag(r0[5])\l}"];
}
}
subgraph cluster_Region_1592470479 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0022|throw new java.lang.IllegalStateException(\"Synthetic stacktrace didn't have enough elements: are you using proguard?\")\l}"];
}
}
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0014}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001b}"];
MethodNode[shape=record,label="{final java.lang.String timber.log.Timber.DebugTree.getTag((r3v0 'this' timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

