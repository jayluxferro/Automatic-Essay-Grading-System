digraph "CFG fortimber.log.Timber.DebugTree.getTag()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r3 I:timber.log.Timber$Tree) timber.log.Timber.Tree.getTag():java.lang.String type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r0 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.Throwable) =  java.lang.Throwable \l0x0009: INVOKE  (r0 I:java.lang.Throwable) java.lang.Throwable.\<init\>():void type: DIRECT \l0x000c: INVOKE  (r0 I:java.lang.StackTraceElement[]) = (r0 I:java.lang.Throwable) java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] type: VIRTUAL \l0x0010: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0016: INVOKE  (r0 I:java.lang.String) = \l  (r3 I:timber.log.Timber$DebugTree)\l  (r0 I:java.lang.StackTraceElement)\l timber.log.Timber.DebugTree.createStackElementTag(java.lang.StackTraceElement):java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN  (r0 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001d: CONST_STR  (r1 I:java.lang.String) =  \"Synthetic stacktrace didn't have enough elements: are you using proguard?\" \l0x001f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{final java.lang.String timber.log.Timber.DebugTree.getTag((r3 'this' I:timber.log.Timber$DebugTree A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

