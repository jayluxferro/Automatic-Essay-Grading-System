digraph "CFG forokio.Pipe.\<init\>(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.buffer = new okio.Buffer()\lr3.sink = new okio.Pipe.PipeSink(r3)\lr3.source = new okio.Pipe.PipeSource(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|if ((r4 \> 1 ? 1 : (r4 == 1 ? 0 : \-1)) \< 0) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|r3.maxBufferSize = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"maxBufferSize \< 1: \")\lr1.append(r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void okio.Pipe.\<init\>((r3v0 'this' okio.Pipe A[IMMUTABLE_TYPE, THIS]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

