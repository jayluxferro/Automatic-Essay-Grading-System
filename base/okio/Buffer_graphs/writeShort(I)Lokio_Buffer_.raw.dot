digraph "CFG forokio.Buffer.writeShort(I)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r0 I:okio.Segment) = (r5 I:okio.Buffer), (r0 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x0005: IGET  (r1 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0007: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0009: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x000b: ARITH  (r4 I:int) = (r6 I:int) \>\>\> (8 int) \l0x000d: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000f: CAST  (r4 I:byte) = (byte) (r4 I:int) \l0x0010: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:byte A[IMMUTABLE_TYPE])\l \l0x0012: ARITH  (r2 I:int) = (r3 I:int) + (1 int) \l0x0014: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0016: CAST  (r6 I:byte) = (byte) (r6 I:int) \l0x0017: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r6 I:byte A[IMMUTABLE_TYPE])\l \l0x0019: IPUT  (r2 I:int), (r0 I:okio.Segment) okio.Segment.limit int \l0x001b: IGET  (r0 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x001d: CONST  (r2 I:?[long, double]) = (2 ?[long, double]) \l0x001f: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0020: IPUT  (r0 I:long), (r5 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0022|0x0022: RETURN  (r5 I:okio.Buffer) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeShort((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

