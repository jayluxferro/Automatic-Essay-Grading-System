digraph "CFG forokio.Buffer.skip(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0043 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000c: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x000e: IGET  (r1 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0010: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0013: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0014: INVOKE  (r0 I:long) = (r6 I:long), (r0 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0018: CAST  (r0 I:int) = (int) (r0 I:long) \l0x0019: IGET  (r1 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x001b: CAST  (r3 I:long) = (long) (r0 I:int) \l0x001c: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x001d: IPUT  (r1 I:long), (r5 I:okio.Buffer) okio.Buffer.size long \l0x001f: ARITH  (r6 I:long) = (r6 I:long) \- (r3 I:long) \l0x0020: IGET  (r1 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0022: IGET  (r2 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x0024: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0025: IPUT  (r2 I:int), (r1 I:okio.Segment) okio.Segment.pos int \l0x0027: IGET  (r0 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0029: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x002b: IGET  (r1 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x002d: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IGET  (r0 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0033: INVOKE  (r1 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0037: IPUT  (r1 I:okio.Segment), (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0039: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|0x003d: NEW_INSTANCE  (r6 I:java.io.EOFException) =  java.io.EOFException \l0x003f: INVOKE  (r6 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: RETURN   \l}"];
MethodNode[shape=record,label="{public void okio.Buffer.skip((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_0;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_0;
Node_7 -> Node_8;
}

