digraph "CFG forokio.Buffer.write([BII)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0030 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r10 I:?[]) \l0x0003: CAST  (r1 I:long) = (long) (r0 I:int) \l0x0004: CAST  (r3 I:long) = (long) (r11 I:int) \l0x0005: CAST  (r7 I:long) = (long) (r12 I:int) \l0x0006: MOVE  (r5 I:?[long, double]) = (r7 I:?[long, double]) \l0x0007: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x000a: ARITH  (r12 I:int) = (r12 I:int) + (r11 I:int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:4:0x002a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: INVOKE  (r0 I:okio.Segment) = (r9 I:okio.Buffer), (r0 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x0012: ARITH  (r1 I:int) = (r12 I:int) \- (r11 I:int) \l0x0014: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0016: ARITH  (r2 I:int) = (8192 int) \- (r2 I:int) \l0x0018: INVOKE  (r1 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x001c: IGET  (r2 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x001e: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0020: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0023: ARITH  (r11 I:int) = (r11 I:int) + (r1 I:int) \l0x0024: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0026: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0027: IPUT  (r2 I:int), (r0 I:okio.Segment) okio.Segment.limit int \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: IGET  (r10 I:long) = (r9 I:okio.Buffer) okio.Buffer.size long \l0x002c: ARITH  (r10 I:long) = (r10 I:long) + (r7 I:long) \l0x002d: IPUT  (r10 I:long), (r9 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: RETURN  (r9 I:okio.Buffer) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: NEW_INSTANCE  (r10 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: CONST_STR  (r11 I:java.lang.String) =  \"source == null\" \l0x0034: INVOKE  \l  (r10 I:java.lang.IllegalArgumentException)\l  (r11 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.write((r9 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_2;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

