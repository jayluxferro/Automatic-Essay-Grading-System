digraph "CFG forokio.Buffer.writeUtf8CodePoint(I)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r3 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2048(0x800, float:2.87E\-42) ?[int, float, short, byte, char])\l \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r4 I:int) \>\> (6 int) \l0x0010: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char]) \l0x0012: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0015: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0016: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0017: INVOKE  (r3 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (65536(0x10000, float:9.18355E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (55296(0xd800, float:7.7486E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r4 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (57343(0xdfff, float:8.0355E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r4 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: INVOKE  (r3 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r4 I:int) \>\> (12 int) \l0x002f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (224(0xe0, float:3.14E\-43) ?[int, float, short, byte, char]) \l0x0031: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0034: ARITH  (r1 I:int) = (r4 I:int) \>\> (6 int) \l0x0036: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0037: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0038: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x003b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x003c: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x003d: INVOKE  (r3 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1114111(0x10ffff, float:1.561202E\-39) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: IF  (r4 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:18:0x0061 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: ARITH  (r1 I:int) = (r4 I:int) \>\> (18 int) \l0x0048: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x004a: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x004d: ARITH  (r1 I:int) = (r4 I:int) \>\> (12 int) \l0x004f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0050: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0051: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0054: ARITH  (r1 I:int) = (r4 I:int) \>\> (6 int) \l0x0056: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0057: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0058: INVOKE  (r3 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x005b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x005c: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x005d: INVOKE  (r3 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0060|0x0060: RETURN  (r3 I:okio.Buffer) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0063: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0065: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0068: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected code point: \" \l0x006a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006d: INVOKE  (r4 I:java.lang.String) = (r4 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0071: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0074: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0078: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x007b|0x007b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeUtf8CodePoint((r3 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_17;
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

