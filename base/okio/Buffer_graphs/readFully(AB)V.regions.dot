digraph "CFG forokio.Buffer.readFully([B)V" {
subgraph cluster_Region_1807038366 {
label = "R(2:0|(2:3|(1:5)(1:7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_2026286768 {
label = "LOOP:0: (2:3|(1:5)(1:7))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|if (r0 \< r4.length) goto L_0x0004\l}"];
subgraph cluster_Region_72490078 {
label = "R(2:3|(1:5)(1:7))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|int int r1 = read(r4, r0, r4.length \- r0)\l}"];
subgraph cluster_IfRegion_1176093325 {
label = "IF [B:4:0x000b] THEN: R(1:5) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r1 != \-1) goto L_0x000d\l}"];
subgraph cluster_Region_196745638 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x000d\l|r0 += r1\l}"];
}
subgraph cluster_Region_180912938 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|throw new java.io.EOFException()\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x000d\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0015|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.Buffer.readFully((r3v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_1;
Node_1 -> Node_2;
Node_6 -> Node_7;
Node_9 -> Node_8;
Node_10 -> Node_6;
}

