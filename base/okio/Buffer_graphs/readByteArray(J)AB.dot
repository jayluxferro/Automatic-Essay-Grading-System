digraph "CFG forokio.Buffer.readByteArray(J)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount(r6.size, 0, r7)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if ((r7 \> 2147483647L ? 1 : (r7 == 2147483647L ? 0 : \-1)) \> 0) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|byte[] r7 = new byte[((int) r7)]\lreadFully(r7)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return r7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"byteCount \> Integer.MAX_VALUE: \")\lr1.append(r7)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public byte[] okio.Buffer.readByteArray((r6v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

