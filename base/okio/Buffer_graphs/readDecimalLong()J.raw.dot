digraph "CFG forokio.Buffer.readDecimalLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0004: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00b7 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r5 I:?[long, double]) = (\-7 ?[long, double]) \l0x000c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: MOVE  (r8 I:?[long, double]) = (r5 I:?[long, double]) \l0x000e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r10 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0012: IGET  (r11 I:byte[]) = (r10 I:okio.Segment) okio.Segment.data byte[] \l0x0014: IGET  (r12 I:int) = (r10 I:okio.Segment) okio.Segment.pos int \l0x0016: IGET  (r13 I:int) = (r10 I:okio.Segment) okio.Segment.limit int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r12 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:30:0x0098 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: AGET  (r15 I:byte A[IMMUTABLE_TYPE]) = \l  (r11 I:byte[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l \l0x001c: CONST  (r14 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r15 I:?[int, byte, short, char]) \< (r14 I:?[int, byte, short, char])  \-\> B:21:0x006a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: CONST  (r1 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IF  (r15 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:21:0x006a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: ARITH  (r14 I:int) = (r14 I:int) \- (r15 I:int) \l0x0025: CONST  (r1 I:?[long, double]) = \l  (\-922337203685477580(0xf333333333333334, double:\-8.390303882365713E246) ?[long, double])\l \l0x002a: CMP_L  (r16 I:int) = (r3 I:long), (r1 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r16 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x003d \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: CAST  (r1 I:long) = (long) (r14 I:int) \l0x0031: CMP_L  (r1 I:int) = (r1 I:long), (r8 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: CONST  (r1 I:?[long, double]) = (10 ?[long, double]) \l0x0038: ARITH  (r3 I:long) = (r3 I:long) * (r1 I:long) \l0x003a: CAST  (r1 I:long) = (long) (r14 I:int) \l0x003b: ARITH  (r3 I:long) = (r3 I:long) + (r1 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: NEW_INSTANCE  (r1 I:okio.Buffer) =  okio.Buffer \l0x003f: INVOKE  (r1 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0042: INVOKE  (r1 I:okio.Buffer) = (r1 I:okio.Buffer), (r3 I:long) okio.Buffer.writeDecimalLong(long):okio.Buffer type: VIRTUAL \l0x0046: INVOKE  (r1 I:okio.Buffer) = (r1 I:okio.Buffer), (r15 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004f \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: INVOKE  (r1 I:okio.Buffer) okio.Buffer.readByte():byte type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: NEW_INSTANCE  (r2 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x0051: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0053: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0056: CONST_STR  (r4 I:java.lang.String) =  \"Number too large: \" \l0x0058: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r1 I:java.lang.String) = (r1 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l0x005f: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0066: INVOKE  \l  (r2 I:java.lang.NumberFormatException)\l  (r1 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0069|0x0069: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|0x006a: CONST  (r1 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006c|0x006c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0079 \l}"];
Node_23 [shape=record,label="{23\:\ 0x006e|0x006e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0079 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0070|0x0070: CONST  (r1 I:?[long, double]) = (1 ?[long, double]) \l0x0072: ARITH  (r8 I:long) = (r8 I:long) \- (r1 I:long) \l0x0073: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0074|0x0074: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l0x0076: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0079|0x0079: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x007d \l}"];
Node_27 [shape=record,label="{27\:\ 0x007b|0x007b: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x007d|0x007d: NEW_INSTANCE  (r1 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x007f: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0081: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0084: CONST_STR  (r3 I:java.lang.String) =  \"Expected leading [0\-9] or '\-' character but was 0x\" \l0x0086: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0089: INVOKE  (r3 I:java.lang.String) = (r15 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x008d: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0090: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0094: INVOKE  \l  (r1 I:java.lang.NumberFormatException)\l  (r2 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x0097|0x0097: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0098|0x0098: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00a4 \l}"];
Node_31 [shape=record,label="{31\:\ 0x009a|0x009a: INVOKE  (r1 I:okio.Segment) = (r10 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x009e: IPUT  (r1 I:okio.Segment), (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x00a0: INVOKE  (r10 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a4|0x00a4: IPUT  (r12 I:int), (r10 I:okio.Segment) okio.Segment.pos int \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a6|0x00a6: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00ac \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a8|0x00a8: IGET  (r1 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_35 [shape=record,label="{35\:\ 0x00aa|0x00aa: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ac|0x00ac: IGET  (r1 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x00ae: CAST  (r6 I:long) = (long) (r7 I:int) \l0x00af: ARITH  (r1 I:long) = (r1 I:long) \- (r6 I:long) \l0x00b0: IPUT  (r1 I:long), (r0 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b2|0x00b2: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00b5 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b5|0x00b5: NEG  (r3 I:long) = (r3 I:long) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00b6|0x00b6: RETURN  (r3 I:long) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00b7|0x00b7: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x00b9: CONST_STR  (r2 I:java.lang.String) =  \"size == 0\" \l0x00bb: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x00be|0x00be: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.readDecimalLong((r17 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_41;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_30;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_21;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_4;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_3;
Node_35 -> Node_36[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_41 -> Node_42;
}

