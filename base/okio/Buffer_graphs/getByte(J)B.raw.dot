digraph "CFG forokio.Buffer.getByte(J)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r4 I:?[long, double]) = (1 ?[long, double]) \l0x0004: MOVE  (r2 I:?[long, double]) = (r7 I:?[long, double]) \l0x0005: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0008: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x000a: ARITH  (r0 I:long) = (r0 I:long) \- (r7 I:long) \l0x000b: CMP_L  (r0 I:int) = (r0 I:long), (r7 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0013: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0015: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0016: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0017: CMP_L  (r3 I:int) = (r7 I:long), (r1 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r1 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x001d: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x001f: CAST  (r7 I:int) = (int) (r7 I:long) \l0x0020: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x0021: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: RETURN  (r7 I:byte) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: ARITH  (r7 I:long) = (r7 I:long) \- (r1 I:long) \l0x0026: IGET  (r0 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x002b: ARITH  (r7 I:long) = (r7 I:long) \- (r0 I:long) \l0x002c: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IGET  (r0 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0030: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0032: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0034: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0035: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0036: ARITH  (r7 I:long) = (r7 I:long) + (r1 I:long) \l0x0037: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0039: CMP_L  (r1 I:int) = (r7 I:long), (r1 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: IGET  (r1 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x003f: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0041: CAST  (r7 I:int) = (int) (r7 I:long) \l0x0042: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x0043: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: RETURN  (r7 I:byte) \l}"];
MethodNode[shape=record,label="{public byte okio.Buffer.getByte((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
}

