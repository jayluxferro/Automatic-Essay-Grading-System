digraph "CFG forokio.Buffer.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0009: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: ARITH  (r1 I:int) = (r1 I:int) * (31 int) \l0x000f: IGET  (r4 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0011: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (r4 I:int) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r0 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.next okio.Segment \l0x0019: IGET  (r2 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.Buffer.hashCode((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_9 -> Node_10[style=dashed];
}

