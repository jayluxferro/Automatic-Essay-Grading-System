digraph "CFG forokio.Buffer.readShort()S" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (2 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x004a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okio.Segment) = (r8 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000a: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x000c: IGET  (r4 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x000e: ARITH  (r5 I:int) = (r4 I:int) \- (r1 I:int) \l0x0010: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r0 I:byte) = (r8 I:okio.Buffer) okio.Buffer.readByte():byte type: VIRTUAL \l0x0017: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0019: ARITH  (r0 I:int) = (r0 I:int) \<\< (8 int) \l0x001b: INVOKE  (r1 I:byte) = (r8 I:okio.Buffer) okio.Buffer.readByte():byte type: VIRTUAL \l0x001f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0021: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0022: CAST  (r0 I:short) = (short) (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: RETURN  (r0 I:short) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IGET  (r5 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0026: ARITH  (r6 I:int) = (r1 I:int) + (1 int) \l0x0028: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x002a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x002c: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) \l0x002e: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0030: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0032: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0034: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x0035: IGET  (r5 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x0037: ARITH  (r5 I:long) = (r5 I:long) \- (r2 I:long) \l0x0038: IPUT  (r5 I:long), (r8 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0046 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: INVOKE  (r2 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0040: IPUT  (r2 I:okio.Segment), (r8 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0042: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IPUT  (r7 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: CAST  (r0 I:short) = (short) (r1 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: RETURN  (r0 I:short) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x004c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0051: CONST_STR  (r2 I:java.lang.String) =  \"size \< 2: \" \l0x0053: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0056: IGET  (r2 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x0058: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public short okio.Buffer.readShort((r8 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

