digraph "CFG forokio.Buffer.readUtf8LineStrict(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r11 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x0093 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0008: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x000d: CMP_L  (r4 I:int) = (r11 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: ARITH  (r2 I:long) = (r11 I:long) + (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0017: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0019: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r8 I:?[long, double]) = (r2 I:?[long, double]) \l0x001b: INVOKE  (r4 I:long) = (r4 I:okio.Buffer), (r5 I:byte), (r6 I:long), (r8 I:long) okio.Buffer.indexOf(byte, long, long):long type: VIRTUAL \l0x001f: CONST  (r6 I:?[long, double]) = (\-1 ?[long, double]) \l0x0021: CMP_L  (r6 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: INVOKE  (r11 I:java.lang.String) = (r10 I:okio.Buffer), (r4 I:long) okio.Buffer.readUtf8Line(long):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: RETURN  (r11 I:java.lang.String) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r4 I:long) = (r10 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x002e: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:18:0x0049 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: ARITH  (r0 I:long) = (r2 I:long) \- (r0 I:long) \l0x0034: INVOKE  (r0 I:byte) = (r10 I:okio.Buffer), (r0 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0038: CONST  (r1 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0049 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: INVOKE  (r0 I:byte) = (r10 I:okio.Buffer), (r2 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0040: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: INVOKE  (r11 I:java.lang.String) = (r10 I:okio.Buffer), (r2 I:long) okio.Buffer.readUtf8Line(long):java.lang.String type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: RETURN  (r11 I:java.lang.String) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: NEW_INSTANCE  (r6 I:okio.Buffer) =  okio.Buffer \l0x004b: INVOKE  (r6 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x004e: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0050: CONST  (r0 I:?[long, double]) = (32 ?[long, double]) \l0x0052: INVOKE  (r4 I:long) = (r10 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0056: INVOKE  (r4 I:long) = (r0 I:long), (r4 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x005b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x005c: INVOKE  \l  (r0 I:okio.Buffer)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.Buffer.copyTo(okio.Buffer, long, long):okio.Buffer type: VIRTUAL \l0x005f: NEW_INSTANCE  (r0 I:java.io.EOFException) =  java.io.EOFException \l0x0061: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0063: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0066: CONST_STR  (r2 I:java.lang.String) =  \"n not found: limit=\" \l0x0068: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: INVOKE  (r2 I:long) = (r10 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x006f: INVOKE  (r11 I:long) = (r2 I:long), (r11 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0073: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0076: CONST_STR  (r11 I:java.lang.String) =  \" content=\" \l0x0078: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007b: INVOKE  (r11 I:okio.ByteString) = (r6 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x007f: INVOKE  (r11 I:java.lang.String) = (r11 I:okio.ByteString) okio.ByteString.hex():java.lang.String type: VIRTUAL \l0x0083: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0086: CONST  (r11 I:?[int, float, short, byte, char]) = \l  (8230(0x2026, float:1.1533E\-41) ?[int, float, short, byte, char])\l \l0x0088: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x008b: INVOKE  (r11 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008f: INVOKE  (r0 I:java.io.EOFException), (r11 I:java.lang.String) java.io.EOFException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0092|0x0092: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0093|0x0093: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0095: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0097: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x009a: CONST_STR  (r2 I:java.lang.String) =  \"limit \< 0: \" \l0x009c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009f: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x00a2: INVOKE  (r11 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a6: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r11 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a9|0x00a9: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okio.Buffer.readUtf8LineStrict((r10 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

