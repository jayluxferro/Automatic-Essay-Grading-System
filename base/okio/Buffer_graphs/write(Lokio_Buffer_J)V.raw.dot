digraph "CFG forokio.Buffer.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x009e \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0096 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long \l0x0006: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0008: MOVE  (r4 I:?[long, double]) = (r8 I:?[long, double]) \l0x0009: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r0 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:28:0x0095 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r0 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0014: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0016: IGET  (r1 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0018: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x001a: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x001b: CAST  (r0 I:long) = (long) (r0 I:int) \l0x001c: CMP_L  (r0 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:23:0x005e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0026: IGET  (r0 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.prev okio.Segment \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0055 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IGET  (r1 I:boolean) = (r0 I:okio.Segment) okio.Segment.owner boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0032: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0033: ARITH  (r1 I:long) = (r1 I:long) + (r8 I:long) \l0x0034: IGET  (r3 I:boolean) = (r0 I:okio.Segment) okio.Segment.shared boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: CAST  (r3 I:long) = (long) (r3 I:int) \l0x003d: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x003e: CONST  (r3 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0040: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:22:0x0055 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: IGET  (r1 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0046: CAST  (r2 I:int) = (int) (r8 I:long) \l0x0047: INVOKE  (r1 I:okio.Segment), (r0 I:okio.Segment), (r2 I:int) okio.Segment.writeTo(okio.Segment, int):void type: VIRTUAL \l0x004a: IGET  (r0 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long \l0x004c: ARITH  (r0 I:long) = (r0 I:long) \- (r8 I:long) \l0x004d: IPUT  (r0 I:long), (r7 I:okio.Buffer) okio.Buffer.size long \l0x004f: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0051: ARITH  (r0 I:long) = (r0 I:long) + (r8 I:long) \l0x0052: IPUT  (r0 I:long), (r6 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|0x0054: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x0055|0x0055: IGET  (r0 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0057: CAST  (r1 I:int) = (int) (r8 I:long) \l0x0058: INVOKE  (r0 I:okio.Segment) = (r0 I:okio.Segment), (r1 I:int) okio.Segment.split(int):okio.Segment type: VIRTUAL \l0x005c: IPUT  (r0 I:okio.Segment), (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|0x005e: IGET  (r0 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0060: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0062: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0064: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0065: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0066: INVOKE  (r3 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x006a: IPUT  (r3 I:okio.Segment), (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x006c: IGET  (r3 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_24 [shape=record,label="{24\:\ 0x006e|0x006e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0070|0x0070: IPUT  (r0 I:okio.Segment), (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0072: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0074: IGET  (r3 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0076: IGET  (r4 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0078: IPUT  (r4 I:okio.Segment), (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x007a: IPUT  (r4 I:okio.Segment), (r0 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_26 [shape=record,label="{26\:\ 0x007d|0x007d: IGET  (r3 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x007f: IGET  (r3 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0081: INVOKE  (r0 I:okio.Segment) = (r3 I:okio.Segment), (r0 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l0x0085: INVOKE  (r0 I:okio.Segment) okio.Segment.compact():void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0088|0x0088: IGET  (r3 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long \l0x008a: ARITH  (r3 I:long) = (r3 I:long) \- (r1 I:long) \l0x008b: IPUT  (r3 I:long), (r7 I:okio.Buffer) okio.Buffer.size long \l0x008d: IGET  (r3 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x008f: ARITH  (r3 I:long) = (r3 I:long) + (r1 I:long) \l0x0090: IPUT  (r3 I:long), (r6 I:okio.Buffer) okio.Buffer.size long \l0x0092: ARITH  (r8 I:long) = (r8 I:long) \- (r1 I:long) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0095|0x0095: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x0096|0x0096: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0098: CONST_STR  (r8 I:java.lang.String) =  \"source == this\" \l0x009a: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x009d|0x009d: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x009e|0x009e: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00a0: CONST_STR  (r8 I:java.lang.String) =  \"source == null\" \l0x00a2: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a5|0x00a5: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Buffer.write((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_31;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_28;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_3;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

