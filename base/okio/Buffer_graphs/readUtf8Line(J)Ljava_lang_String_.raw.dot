digraph "CFG forokio.Buffer.readUtf8Line(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r2 I:int) = (r7 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: ARITH  (r2 I:long) = (r7 I:long) \- (r0 I:long) \l0x000a: INVOKE  (r4 I:byte) = (r6 I:okio.Buffer), (r2 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x000e: CONST  (r5 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r7 I:java.lang.String) = (r6 I:okio.Buffer), (r2 I:long) okio.Buffer.readUtf8(long):java.lang.String type: VIRTUAL \l0x0016: CONST  (r0 I:?[long, double]) = (2 ?[long, double]) \l0x0018: INVOKE  (r6 I:okio.Buffer), (r0 I:long) okio.Buffer.skip(long):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: RETURN  (r7 I:java.lang.String) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r7 I:java.lang.String) = (r6 I:okio.Buffer), (r7 I:long) okio.Buffer.readUtf8(long):java.lang.String type: VIRTUAL \l0x0020: INVOKE  (r6 I:okio.Buffer), (r0 I:long) okio.Buffer.skip(long):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: RETURN  (r7 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{java.lang.String okio.Buffer.readUtf8Line((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

