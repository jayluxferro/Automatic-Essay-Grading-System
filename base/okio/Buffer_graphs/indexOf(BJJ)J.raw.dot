digraph "CFG forokio.Buffer.indexOf(BJJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:33:0x0078 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CMP_L  (r2 I:int) = (r14 I:long), (r12 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:33:0x0078 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r2 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l0x000c: CMP_L  (r2 I:int) = (r14 I:long), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r14 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0014: CMP_L  (r4 I:int) = (r12 I:long), (r14 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: RETURN  (r2 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IGET  (r4 I:okio.Segment) = (r10 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: RETURN  (r2 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: IGET  (r5 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l0x0020: ARITH  (r5 I:long) = (r5 I:long) \- (r12 I:long) \l0x0021: CMP_L  (r5 I:int) = (r5 I:long), (r12 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:19:0x0035 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: IGET  (r0 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: CMP_L  (r5 I:int) = (r0 I:long), (r12 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0044 \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x002d: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x002f: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0031: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x0032: CAST  (r5 I:long) = (long) (r5 I:int) \l0x0033: ARITH  (r0 I:long) = (r0 I:long) \- (r5 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0035|0x0035: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0037: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0039: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x003a: CAST  (r5 I:long) = (long) (r5 I:int) \l0x003b: ARITH  (r5 I:long) = (r5 I:long) + (r0 I:long) \l0x003c: CMP_L  (r7 I:int) = (r5 I:long), (r12 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|0x003e: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x0044 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.next okio.Segment \l0x0042: MOVE  (r0 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|0x0044: CMP_L  (r5 I:int) = (r0 I:long), (r14 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0046|0x0046: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:32:0x0077 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0048|0x0048: IGET  (r5 I:byte[]) = (r4 I:okio.Segment) okio.Segment.data byte[] \l0x004a: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x004c: CAST  (r6 I:long) = (long) (r6 I:int) \l0x004d: IGET  (r8 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x004f: CAST  (r8 I:long) = (long) (r8 I:int) \l0x0050: ARITH  (r8 I:long) = (r8 I:long) + (r14 I:long) \l0x0051: ARITH  (r8 I:long) = (r8 I:long) \- (r0 I:long) \l0x0052: INVOKE  (r6 I:long) = (r6 I:long), (r8 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0056: CAST  (r6 I:int) = (int) (r6 I:long) \l0x0057: IGET  (r7 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0059: CAST  (r7 I:long) = (long) (r7 I:int) \l0x005a: ARITH  (r7 I:long) = (r7 I:long) + (r12 I:long) \l0x005b: ARITH  (r7 I:long) = (r7 I:long) \- (r0 I:long) \l0x005c: CAST  (r12 I:int) = (int) (r7 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005d|0x005d: IF  (r12 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:31:0x006c \l}"];
Node_26 [shape=record,label="{26\:\ 0x005f|0x005f: AGET  (r13 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|0x0061: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0069 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|0x0063: IGET  (r11 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0065: ARITH  (r12 I:int) = (r12 I:int) \- (r11 I:int) \l0x0066: CAST  (r11 I:long) = (long) (r12 I:int) \l0x0067: ARITH  (r11 I:long) = (r11 I:long) + (r0 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|0x0068: RETURN  (r11 I:long) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0069|0x0069: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006c|0x006c: IGET  (r12 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x006e: IGET  (r13 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0070: ARITH  (r12 I:int) = (r12 I:int) \- (r13 I:int) \l0x0071: CAST  (r12 I:long) = (long) (r12 I:int) \l0x0072: ARITH  (r12 I:long) = (r12 I:long) + (r0 I:long) \l0x0073: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.next okio.Segment \l0x0075: MOVE  (r0 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0077|0x0077: RETURN  (r2 I:long) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0078|0x0078: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007a: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x007b: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x007d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007e: IGET  (r2 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l0x0080: INVOKE  (r2 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0084: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0086: INVOKE  (r12 I:java.lang.Long) = (r12 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x008a: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x008b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r13 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l \l0x008d: CONST  (r12 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x008e: INVOKE  (r13 I:java.lang.Long) = (r14 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0092: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r12 I:?[int, short, byte, char])\l  (r13 I:?[OBJECT, ARRAY])\l \l0x0094: CONST_STR  (r12 I:java.lang.String) =  \"size=%s fromIndex=%s toIndex=%s\" \l0x0096: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.String), (r0 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x009a: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r12 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x009d|0x009d: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.indexOf((r10 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r11 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_33;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_33;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_16;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_19;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_30 -> Node_25;
Node_31 -> Node_22;
Node_33 -> Node_34;
}

