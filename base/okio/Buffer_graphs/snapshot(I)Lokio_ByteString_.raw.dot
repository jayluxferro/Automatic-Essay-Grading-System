digraph "CFG forokio.Buffer.snapshot(I)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SGET  (r2 I:okio.ByteString) =  okio.ByteString.EMPTY okio.ByteString \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r2 I:okio.ByteString) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:okio.SegmentedByteString) =  okio.SegmentedByteString \l0x0007: INVOKE  \l  (r0 I:okio.SegmentedByteString)\l  (r1 I:okio.Buffer)\l  (r2 I:int)\l okio.SegmentedByteString.\<init\>(okio.Buffer, int):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN  (r0 I:okio.ByteString) \l}"];
MethodNode[shape=record,label="{public okio.ByteString okio.Buffer.snapshot((r1 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

