digraph "CFG forokio.Buffer.readByteArray(J)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: MOVE  (r4 I:?[long, double]) = (r7 I:?[long, double]) \l0x0005: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0008: CONST  (r0 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x000b: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CAST  (r7 I:int) = (int) (r7 I:long) \l0x0010: NEW_ARRAY  (r7 I:byte[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0012: INVOKE  (r6 I:okio.Buffer), (r7 I:byte[]) okio.Buffer.readFully(byte[]):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  (r7 I:byte[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"byteCount \> Integer.MAX_VALUE: \" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public byte[] okio.Buffer.readByteArray((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

