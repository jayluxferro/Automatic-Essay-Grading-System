digraph "CFG forokio.Buffer.segmentSizes()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:java.util.List\<java.lang.Integer\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x000b: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000e: IGET  (r1 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0010: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0012: IGET  (r2 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0014: IGET  (r2 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x0016: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0017: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001b: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x001e: IGET  (r1 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IGET  (r1 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.next okio.Segment \l0x0022: IGET  (r2 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r2 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0028: IGET  (r3 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x002a: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x002b: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x002f: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: RETURN  (r0 I:java.util.List\<java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{java.util.List\<java.lang.Integer\> okio.Buffer.segmentSizes((r4 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
}

