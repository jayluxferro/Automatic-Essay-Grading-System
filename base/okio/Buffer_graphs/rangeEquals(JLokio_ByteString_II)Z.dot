digraph "CFG forokio.Buffer.rangeEquals(JLokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((r6 \> 0 ? 1 : (r6 == 0 ? 0 : \-1)) \< 0) goto L_0x0032\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r9 \< 0) goto L_0x0032\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r10 \< 0) goto L_0x0032\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (((r5.size \- r6) \> ((long) r10) ? 1 : ((r5.size \- r6) == ((long) r10) ? 0 : \-1)) \< 0) goto L_0x0032\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013}"];
Node_7 [shape=record,label="{7\:\ 0x0018|if ((r8.size() \- r9) \>= r10) goto L_0x001b\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|r1 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_START\lPHI: r1 \l  PHI: (r1v8 int) = (r1v7 int), (r1v9 int) binds: [B:8:0x001b, B:13:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x001c\-\>B:13:0x002d\l|if (r1 \>= r10) goto L_0x0030\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e}"];
Node_11 [shape=record,label="{11\:\ 0x002a|if (getByte(((long) r1) + r6) == r8.getByte(r9 + r1)) goto L_0x002d\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|LOOP_END\lLOOP:0: B:9:0x001c\-\>B:13:0x002d\l|int r1 = r1 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean okio.Buffer.rangeEquals((r5v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_15[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_16[style=dashed];
Node_13 -> Node_9;
Node_16 -> Node_12;
Node_17 -> Node_14;
}

