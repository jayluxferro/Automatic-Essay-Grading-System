digraph "CFG forokio.Buffer.readByte()B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r9.size \> 0 ? 1 : (r9.size == 0 ? 0 : \-1)) == 0) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|okio.Segment r0 = r9.head\lint r1 = r0.pos\lint r2 = r0.limit\lint r4 = r1 + 1\lbyte r1 = r0.data[r1]\lr9.size = r9.size \- 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|if (r4 != r2) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|r9.head = r0.pop()\lokio.SegmentPool.recycle(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|r0.pos = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a}"];
Node_8 [shape=record,label="{8\:\ 0x0031|throw new java.lang.IllegalStateException(\"size == 0\")\l}"];
MethodNode[shape=record,label="{public byte okio.Buffer.readByte((r9v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

