digraph "CFG forokio.Buffer.indexOf(Lokio\/ByteString;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r2 I:int) = (r19 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00b2 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000a: CMP_L  (r4 I:int) = (r20 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:32:0x00aa \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r4 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0010: CONST  (r7 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN  (r7 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r9 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0017: ARITH  (r9 I:long) = (r9 I:long) \- (r20 I:long) \l0x0019: CMP_L  (r5 I:int) = (r9 I:long), (r20 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IGET  (r2 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CMP_L  (r5 I:int) = (r2 I:long), (r20 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0025: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0027: IGET  (r9 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0029: ARITH  (r5 I:int) = (r5 I:int) \- (r9 I:int) \l0x002a: CAST  (r9 I:long) = (long) (r5 I:int) \l0x002b: ARITH  (r2 I:long) = (r2 I:long) \- (r9 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x002f: IGET  (r9 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0031: ARITH  (r5 I:int) = (r5 I:int) \- (r9 I:int) \l0x0032: CAST  (r9 I:long) = (long) (r5 I:int) \l0x0033: ARITH  (r9 I:long) = (r9 I:long) + (r2 I:long) \l0x0034: CMP_L  (r5 I:int) = (r9 I:long), (r20 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.next okio.Segment \l0x003a: MOVE  (r2 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003d: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  (r10 I:byte) = (r9 I:okio.ByteString), (r5 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x0043: INVOKE  (r11 I:int) = (r19 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0047: IGET  (r12 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0049: CAST  (r14 I:long) = (long) (r11 I:int) \l0x004a: ARITH  (r12 I:long) = (r12 I:long) \- (r14 I:long) \l0x004b: CONST  (r14 I:?[long, double]) = (1 ?[long, double]) \l0x004d: ARITH  (r12 I:long) = (r12 I:long) + (r14 I:long) \l0x004e: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x0050: MOVE  (r14 I:?[long, double]) = (r2 I:?[long, double]) \l0x0051: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: CMP_L  (r2 I:int) = (r14 I:long), (r12 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|0x0054: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:30:0x00a8 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|0x0056: IGET  (r4 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] \l0x0058: IGET  (r2 I:int) = (r5 I:okio.Segment) okio.Segment.limit int \l0x005a: CAST  (r2 I:long) = (long) (r2 I:int) \l0x005b: IGET  (r7 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x005d: CAST  (r7 I:long) = (long) (r7 I:int) \l0x005e: ARITH  (r7 I:long) = (r7 I:long) + (r12 I:long) \l0x005f: ARITH  (r7 I:long) = (r7 I:long) \- (r14 I:long) \l0x0060: INVOKE  (r2 I:long) = (r2 I:long), (r7 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0064: CAST  (r7 I:int) = (int) (r2 I:long) \l0x0065: IGET  (r2 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0067: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0068: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l0x0069: ARITH  (r2 I:long) = (r2 I:long) \- (r14 I:long) \l0x006a: CAST  (r0 I:int) = (int) (r2 I:long) \l0x006b: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:29:0x0098 \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x008d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|0x0072: ARITH  (r2 I:int) = (r8 I:int) + (1 int) \l0x0074: CONST  (r16 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0076: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0078: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0079: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x007b: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x007d: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007f: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0080: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0081: INVOKE  (r0 I:boolean) = \l  (r0 I:okio.Buffer)\l  (r1 I:okio.Segment)\l  (r2 I:int)\l  (r3 I:okio.ByteString)\l  (r4 I:int)\l  (r5 I:int)\l okio.Buffer.rangeEquals(okio.Segment, int, okio.ByteString, int, int):boolean type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0085|0x0085: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0090 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0087|0x0087: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0089: ARITH  (r8 I:int) = (r8 I:int) \- (r0 I:int) \l0x008a: CAST  (r0 I:long) = (long) (r8 I:int) \l0x008b: ARITH  (r0 I:long) = (r0 I:long) + (r14 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x008c|0x008c: RETURN  (r0 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x008d|0x008d: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x008f: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0090|0x0090: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0092: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0093: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0095: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0098|0x0098: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0099: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x009b: IGET  (r1 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x009d: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x009e: CAST  (r0 I:long) = (long) (r0 I:int) \l0x009f: ARITH  (r0 I:long) = (r0 I:long) + (r14 I:long) \l0x00a0: IGET  (r5 I:okio.Segment) = (r6 I:okio.Segment) okio.Segment.next okio.Segment \l0x00a2: MOVE  (r14 I:?[long, double]) = (r0 I:?[long, double]) \l0x00a3: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00a5: CONST  (r7 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a8|0x00a8: MOVE  (r0 I:?[long, double]) = (r7 I:?[long, double]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00a9|0x00a9: RETURN  (r0 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00aa|0x00aa: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00ac: CONST_STR  (r1 I:java.lang.String) =  \"fromIndex \< 0\" \l0x00ae: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b1|0x00b1: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b2|0x00b2: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00b4: CONST_STR  (r1 I:java.lang.String) =  \"bytes is empty\" \l0x00b6: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x00b9|0x00b9: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.indexOf((r18 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r19 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_34;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_32;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_30;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_20;
Node_29 -> Node_17;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_34 -> Node_35;
}

