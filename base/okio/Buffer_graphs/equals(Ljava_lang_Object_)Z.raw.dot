digraph "CFG forokio.Buffer.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r14 I:?[OBJECT, ARRAY]) okio.Buffer \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r14 I:okio.Buffer) = (okio.Buffer) (r14 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r3 I:long) = (r13 I:okio.Buffer) okio.Buffer.size long \l0x000e: IGET  (r5 I:long) = (r14 I:okio.Buffer) okio.Buffer.size long \l0x0010: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IGET  (r3 I:long) = (r13 I:okio.Buffer) okio.Buffer.size long \l0x0017: CONST  (r5 I:?[long, double]) = (0 ?[long, double]) \l0x0019: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: RETURN  (r0 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r1 I:okio.Segment) = (r13 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0020: IGET  (r14 I:okio.Segment) = (r14 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0022: IGET  (r3 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x0024: IGET  (r4 I:int) = (r14 I:okio.Segment) okio.Segment.pos int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IGET  (r7 I:long) = (r13 I:okio.Buffer) okio.Buffer.size long \l0x0028: CMP_L  (r7 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x006a \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IGET  (r7 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x002e: ARITH  (r7 I:int) = (r7 I:int) \- (r3 I:int) \l0x002f: IGET  (r8 I:int) = (r14 I:okio.Segment) okio.Segment.limit int \l0x0031: ARITH  (r8 I:int) = (r8 I:int) \- (r4 I:int) \l0x0032: INVOKE  (r7 I:int) = (r7 I:int), (r8 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0036: CAST  (r7 I:long) = (long) (r7 I:int) \l0x0037: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0039: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: CAST  (r10 I:long) = (long) (r3 I:int) \l0x003b: CMP_L  (r10 I:int) = (r10 I:long), (r7 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x0053 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: IGET  (r10 I:byte[]) = (r1 I:okio.Segment) okio.Segment.data byte[] \l0x0041: ARITH  (r11 I:int) = (r4 I:int) + (1 int) \l0x0043: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0045: IGET  (r10 I:byte[]) = (r14 I:okio.Segment) okio.Segment.data byte[] \l0x0047: ARITH  (r12 I:int) = (r9 I:int) + (1 int) \l0x0049: AGET  (r9 I:byte A[IMMUTABLE_TYPE]) = \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004e \l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: RETURN  (r2 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|0x004e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0050: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0051: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|0x0053: IGET  (r3 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l}"];
Node_23 [shape=record,label="{23\:\ 0x0055|0x0055: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x005c \l}"];
Node_24 [shape=record,label="{24\:\ 0x0057|0x0057: IGET  (r1 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.next okio.Segment \l0x0059: IGET  (r3 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|0x005c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x005d|0x005d: IGET  (r4 I:int) = (r14 I:okio.Segment) okio.Segment.limit int \l}"];
Node_27 [shape=record,label="{27\:\ 0x005f|0x005f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0066 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0061|0x0061: IGET  (r14 I:okio.Segment) = (r14 I:okio.Segment) okio.Segment.next okio.Segment \l0x0063: IGET  (r4 I:int) = (r14 I:okio.Segment) okio.Segment.pos int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0066|0x0066: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0067|0x0067: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0068: ARITH  (r5 I:long) = (r5 I:long) + (r7 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006a|0x006a: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okio.Buffer.equals((r13 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r14 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_31;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_16;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_13;
}

