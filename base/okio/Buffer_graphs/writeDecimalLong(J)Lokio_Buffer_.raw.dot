digraph "CFG forokio.Buffer.writeDecimalLong(J)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r12 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x0008: INVOKE  (r12 I:okio.Buffer) = (r11 I:okio.Buffer), (r12 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r12 I:okio.Buffer) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: NEG  (r12 I:long) = (r12 I:long) \l0x0012: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST_STR  (r12 I:java.lang.String) =  \"\-9223372036854775808\" \l0x0018: INVOKE  (r12 I:okio.Buffer) = (r11 I:okio.Buffer), (r12 I:java.lang.String) okio.Buffer.writeUtf8(java.lang.String):okio.Buffer type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN  (r12 I:okio.Buffer) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: CONST  (r5 I:?[long, double]) = \l  (100000000(0x5f5e100, double:4.94065646E\-316) ?[long, double])\l \l0x0021: CONST  (r7 I:?[long, double]) = (10 ?[long, double]) \l0x0023: CMP_L  (r2 I:int) = (r12 I:long), (r5 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:35:0x006a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: CONST  (r5 I:?[long, double]) = (10000(0x2710, double:4.9407E\-320) ?[long, double]) \l0x0029: CMP_L  (r2 I:int) = (r12 I:long), (r5 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:25:0x0048 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: CONST  (r5 I:?[long, double]) = (100 ?[long, double]) \l0x002f: CMP_L  (r2 I:int) = (r12 I:long), (r5 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x003c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: CMP_L  (r2 I:int) = (r12 I:long), (r7 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x0039 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|0x003c: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x003e: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:24:0x0045 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0045|0x0045: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: CONST  (r4 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x004b: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004d|0x004d: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x005c \l}"];
Node_27 [shape=record,label="{27\:\ 0x004f|0x004f: CONST  (r4 I:?[long, double]) = (100000(0x186a0, double:4.94066E\-319) ?[long, double]) \l0x0052: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:30:0x0059 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0056|0x0056: CONST  (r4 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0059|0x0059: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x005c|0x005c: CONST  (r4 I:?[long, double]) = (10000000(0x989680, double:4.9406565E\-317) ?[long, double]) \l0x005f: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0061|0x0061: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:34:0x0066 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0063|0x0063: CONST  (r4 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0066|0x0066: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x006a|0x006a: CONST  (r4 I:?[long, double]) = \l  (1000000000000(0xe8d4a51000, double:4.94065645841E\-312) ?[long, double])\l \l0x006f: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0071|0x0071: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:47:0x0098 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0073|0x0073: CONST  (r4 I:?[long, double]) = \l  (10000000000(0x2540be400, double:4.9406564584E\-314) ?[long, double])\l \l0x0078: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_38 [shape=record,label="{38\:\ 0x007a|0x007a: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:43:0x0089 \l}"];
Node_39 [shape=record,label="{39\:\ 0x007c|0x007c: CONST  (r4 I:?[long, double]) = \l  (1000000000(0x3b9aca00, double:4.94065646E\-315) ?[long, double])\l \l0x007f: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0081|0x0081: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:42:0x0086 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0083|0x0083: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0086|0x0086: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0089|0x0089: CONST  (r4 I:?[long, double]) = \l  (100000000000(0x174876e800, double:4.9406564584E\-313) ?[long, double])\l \l0x008e: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0090|0x0090: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:46:0x0095 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0092|0x0092: CONST  (r4 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0095|0x0095: CONST  (r4 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0098|0x0098: CONST  (r4 I:?[long, double]) = \l  (1000000000000000(0x38d7ea4c68000, double:4.940656458412465E\-309) ?[long, double])\l \l0x009d: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_48 [shape=record,label="{48\:\ 0x009f|0x009f: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:56:0x00bc \l}"];
Node_49 [shape=record,label="{49\:\ 0x00a1|0x00a1: CONST  (r4 I:?[long, double]) = \l  (10000000000000(0x9184e72a000, double:4.9406564584125E\-311) ?[long, double])\l \l0x00a6: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_50 [shape=record,label="{50\:\ 0x00a8|0x00a8: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:52:0x00ad \l}"];
Node_51 [shape=record,label="{51\:\ 0x00aa|0x00aa: CONST  (r4 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00ad|0x00ad: CONST  (r4 I:?[long, double]) = \l  (100000000000000(0x5af3107a4000, double:4.94065645841247E\-310) ?[long, double])\l \l0x00b2: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_53 [shape=record,label="{53\:\ 0x00b4|0x00b4: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:55:0x00b9 \l}"];
Node_54 [shape=record,label="{54\:\ 0x00b6|0x00b6: CONST  (r4 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x00b9|0x00b9: CONST  (r4 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00bc|0x00bc: CONST  (r4 I:?[long, double]) = \l  (100000000000000000(0x16345785d8a0000, double:5.620395787888205E\-302) ?[long, double])\l \l0x00c1: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_57 [shape=record,label="{57\:\ 0x00c3|0x00c3: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:62:0x00d4 \l}"];
Node_58 [shape=record,label="{58\:\ 0x00c5|0x00c5: CONST  (r4 I:?[long, double]) = \l  (10000000000000000(0x2386f26fc10000, double:5.431165199810528E\-308) ?[long, double])\l \l0x00ca: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_59 [shape=record,label="{59\:\ 0x00cc|0x00cc: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:61:0x00d1 \l}"];
Node_60 [shape=record,label="{60\:\ 0x00ce|0x00ce: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x00d1|0x00d1: CONST  (r4 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x00d4|0x00d4: CONST  (r4 I:?[long, double]) = \l  (1000000000000000000(0xde0b6b3a7640000, double:7.832953389245686E\-242) ?[long, double])\l \l0x00d9: CMP_L  (r2 I:int) = (r12 I:long), (r4 I:long) \l}"];
Node_63 [shape=record,label="{63\:\ 0x00db|0x00db: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:65:0x00e0 \l}"];
Node_64 [shape=record,label="{64\:\ 0x00dd|0x00dd: CONST  (r4 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l}"];
Node_65 [shape=record,label="{65\:\ 0x00e0|0x00e0: CONST  (r4 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x00e2|0x00e2: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00e6 \l}"];
Node_67 [shape=record,label="{67\:\ 0x00e4|0x00e4: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_68 [shape=record,label="{68\:\ 0x00e6|0x00e6: INVOKE  (r2 I:okio.Segment) = (r11 I:okio.Buffer), (r4 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x00ea: IGET  (r5 I:byte[]) = (r2 I:okio.Segment) okio.Segment.data byte[] \l0x00ec: IGET  (r6 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x00ee: ARITH  (r6 I:int) = (r6 I:int) + (r4 I:int) \l}"];
Node_69 [shape=record,label="{69\:\ 0x00ef|0x00ef: CMP_L  (r9 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_70 [shape=record,label="{70\:\ 0x00f1|0x00f1: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0100 \l}"];
Node_71 [shape=record,label="{71\:\ 0x00f3|0x00f3: ARITH  (r9 I:long) = (r12 I:long) % (r7 I:long) \l0x00f5: CAST  (r9 I:int) = (int) (r9 I:long) \l0x00f6: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l0x00f8: SGET  (r10 I:byte[]) =  okio.Buffer.DIGITS byte[] \l0x00fa: AGET  (r9 I:byte A[IMMUTABLE_TYPE]) = \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x00fc: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r9 I:byte A[IMMUTABLE_TYPE])\l \l0x00fe: ARITH  (r12 I:long) = (r12 I:long) \/ (r7 I:long) \l}"];
Node_72 [shape=record,label="{72\:\ 0x0100|0x0100: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0108 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0102|0x0102: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l0x0104: CONST  (r12 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l0x0106: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r12 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_74 [shape=record,label="{74\:\ 0x0108|0x0108: IGET  (r12 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x010a: ARITH  (r12 I:int) = (r12 I:int) + (r4 I:int) \l0x010b: IPUT  (r12 I:int), (r2 I:okio.Segment) okio.Segment.limit int \l0x010d: IGET  (r12 I:long) = (r11 I:okio.Buffer) okio.Buffer.size long \l0x010f: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0110: ARITH  (r12 I:long) = (r12 I:long) + (r0 I:long) \l0x0111: IPUT  (r12 I:long), (r11 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_75 [shape=record,label="{75\:\ 0x0113|0x0113: RETURN  (r11 I:okio.Buffer) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeDecimalLong((r11 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_35;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_25;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_66[style=dashed];
Node_20 -> Node_66;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_66;
Node_24 -> Node_66;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_66;
Node_30 -> Node_66;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_66;
Node_34 -> Node_66;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_47;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_66;
Node_42 -> Node_66;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_66;
Node_46 -> Node_66;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_56;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_66;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_66;
Node_55 -> Node_66;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_62;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_66;
Node_61 -> Node_66;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_66;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_72;
Node_71 -> Node_69;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_73 -> Node_74;
Node_74 -> Node_75;
}

