digraph "CFG forokio.Buffer.writeLong(J)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Segment r1 = writableSegment(8)\lbyte[] r2 = r1.data\lint r3 = r1.limit\lint r4 = r3 + 1\lr2[r3] = (byte) ((int) ((r10 \>\>\> 56) & 255))\lint r3 = r4 + 1\lr2[r4] = (byte) ((int) ((r10 \>\>\> 48) & 255))\lint r4 = r3 + 1\lr2[r3] = (byte) ((int) ((r10 \>\>\> 40) & 255))\lint r3 = r4 + 1\lr2[r4] = (byte) ((int) ((r10 \>\>\> 32) & 255))\lint r4 = r3 + 1\lr2[r3] = (byte) ((int) ((r10 \>\>\> 24) & 255))\lint r3 = r4 + 1\lr2[r4] = (byte) ((int) ((r10 \>\>\> 16) & 255))\lint r4 = r3 + 1\lr2[r3] = (byte) ((int) ((r10 \>\>\> 8) & 255))\lr2[r4] = (byte) ((int) (r10 & 255))\lr1.limit = r4 + 1\lr9.size = r9.size + 8\l}"];
Node_1 [shape=record,label="{1\:\ 0x0067|RETURN\l|return r9\l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeLong((r9v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

