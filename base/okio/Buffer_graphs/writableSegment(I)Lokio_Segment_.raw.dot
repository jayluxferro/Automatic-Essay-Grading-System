digraph "CFG forokio.Buffer.writableSegment(I)Lokio\/Segment;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r1 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INVOKE  (r4 I:okio.Segment) =  okio.SegmentPool.take():okio.Segment type: STATIC \l0x000f: IPUT  (r4 I:okio.Segment), (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0011: IGET  (r4 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0013: IGET  (r0 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0015: IGET  (r1 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0017: IPUT  (r1 I:okio.Segment), (r0 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0019: IPUT  (r1 I:okio.Segment), (r4 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r1 I:okio.Segment) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IGET  (r1 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x001e: IGET  (r1 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0020: IGET  (r2 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0022: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:12:0x0029 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IGET  (r4 I:boolean) = (r1 I:okio.Segment) okio.Segment.owner boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: INVOKE  (r4 I:okio.Segment) =  okio.SegmentPool.take():okio.Segment type: STATIC \l0x002d: INVOKE  (r1 I:okio.Segment) = (r1 I:okio.Segment), (r4 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r1 I:okio.Segment) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0034: INVOKE  (r4 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{okio.Segment okio.Buffer.writableSegment((r3 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

