digraph "CFG forokio.Buffer.writeTo(Ljava\/io\/OutputStream;J)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0004: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0006: MOVE  (r4 I:?[long, double]) = (r8 I:?[long, double]) \l0x0007: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x000a: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r1 I:int) = (r8 I:long), (r1 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0014: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0016: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0017: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0018: INVOKE  (r1 I:long) = (r8 I:long), (r1 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x001c: CAST  (r1 I:int) = (int) (r1 I:long) \l0x001d: IGET  (r2 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x001f: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0021: INVOKE  \l  (r7 I:java.io.OutputStream)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r1 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL \l0x0024: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0026: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0027: IPUT  (r2 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l0x0029: IGET  (r2 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x002b: CAST  (r4 I:long) = (long) (r1 I:int) \l0x002c: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x002d: IPUT  (r2 I:long), (r6 I:okio.Buffer) okio.Buffer.size long \l0x002f: ARITH  (r8 I:long) = (r8 I:long) \- (r4 I:long) \l0x0030: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0032: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: INVOKE  (r1 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x003a: IPUT  (r1 I:okio.Segment), (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x003c: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l0x003f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: RETURN  (r6 I:okio.Buffer) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0044: CONST_STR  (r8 I:java.lang.String) =  \"out == null\" \l0x0046: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeTo((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_2;
Node_8 -> Node_9;
}

