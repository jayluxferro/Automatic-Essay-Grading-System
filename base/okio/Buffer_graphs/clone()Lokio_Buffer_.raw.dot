digraph "CFG forokio.Buffer.clone()Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x0002: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x0007: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0009: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: RETURN  (r0 I:okio.Buffer) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r1 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0010: INVOKE  (r1 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.sharedCopy():okio.Segment type: VIRTUAL \l0x0014: IPUT  (r1 I:okio.Segment), (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0016: IGET  (r1 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0018: IGET  (r2 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x001a: IGET  (r3 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x001c: IPUT  (r3 I:okio.Segment), (r2 I:okio.Segment) okio.Segment.prev okio.Segment \l0x001e: IPUT  (r3 I:okio.Segment), (r1 I:okio.Segment) okio.Segment.next okio.Segment \l0x0020: IGET  (r1 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IGET  (r1 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.next okio.Segment \l0x0024: IGET  (r2 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IGET  (r2 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x002a: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.prev okio.Segment \l0x002c: INVOKE  (r3 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.sharedCopy():okio.Segment type: VIRTUAL \l0x0030: INVOKE  (r2 I:okio.Segment), (r3 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IGET  (r1 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x0036: IPUT  (r1 I:long), (r0 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: RETURN  (r0 I:okio.Buffer) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.clone((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
}

