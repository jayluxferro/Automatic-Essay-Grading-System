digraph "CFG forokio.Buffer.readFrom(Ljava\/io\/InputStream;JZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 == null) goto L_0x003c\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r6 \l  PHI: (r6v2 long) = (r6v0 long), (r6v3 long) binds: [B:0:0x0000, B:11:0x002f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:11:0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if ((r6 \> 0 ? 1 : (r6 == 0 ? 0 : \-1)) \> 0) goto L_0x000c\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r8 == false) goto L_0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|okio.Segment r0 = writableSegment(1)\lbyte[] r2 = r0.data\lint r3 = r0.limit\lint r1 = r5.read(r2, r3, (int) java.lang.Math.min(r6, (long) (8192 \- r0.limit)))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r1 != \-1) goto L_0x002f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|if (r8 == false) goto L_0x0029\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029}"];
Node_10 [shape=record,label="{10\:\ 0x002e|throw new java.io.EOFException()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:11:0x002f\l|r0.limit = r0.limit + r1\llong r0 = (long) r1\lr4.size = r4.size + r0\llong r6 = r6 \- r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c}"];
Node_13 [shape=record,label="{13\:\ 0x0043|throw new java.lang.IllegalArgumentException(\"in == null\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okio.Buffer.readFrom((r4v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_11;
Node_6 -> Node_14[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_14 -> Node_7;
Node_15 -> Node_4;
}

