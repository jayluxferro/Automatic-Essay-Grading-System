digraph "CFG forokio.Buffer.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Segment r0 = r5.head\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r0 != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r1 = 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v1 okio.Segment) = (r0v0 okio.Segment), (r0v2 okio.Segment) binds: [B:3:0x0006, B:8:0x001b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:3:0x0006, B:8:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0007\-\>B:8:0x001b\l|int r2 = r0.pos\lint r3 = r0.limit\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v2 int) = (r1v1 int), (r1v4 int) binds: [B:4:0x0007, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:4:0x0007, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x000b\-\>B:6:0x000d\l|if (r2 \>= r3) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|LOOP_END\lLOOP:1: B:5:0x000b\-\>B:6:0x000d\l|int r1 = (r1 * 31) + r0.data[r2]\lint r2 = r2 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|okio.Segment r0 = r0.next\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|LOOP_END\lLOOP:0: B:4:0x0007\-\>B:8:0x001b\l|if (r0 != r5.head) goto L_0x0007\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int okio.Buffer.hashCode((r5v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_8 -> Node_10[style=dashed];
Node_10 -> Node_9;
Node_11 -> Node_7;
}

