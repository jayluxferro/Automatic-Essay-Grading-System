digraph "CFG forokio.Buffer.readFrom(Ljava\/io\/InputStream;JZ)V" {
subgraph cluster_Region_1936720986 {
label = "R(1:(1:(1:(2:5|(1:11)(1:(1:10)(1:8)))(1:4)))(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_102328284 {
label = "IF [B:0:0x0000] THEN: R(1:(1:(2:5|(1:11)(1:(1:10)(1:8)))(1:4))) ELSE: R(1:13)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 != null) goto L_0x0002\l}"];
subgraph cluster_Region_816468224 {
label = "R(1:(1:(2:5|(1:11)(1:(1:10)(1:8)))(1:4)))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_217132401 {
label = "LOOP:0: (1:(2:5|(1:11)(1:(1:10)(1:8)))(1:4))";
node [shape=record,color=blue];
subgraph cluster_Region_2144381537 {
label = "R(1:(2:5|(1:11)(1:(1:10)(1:8)))(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_851051968 {
label = "IF [B:2:0x0006, B:3:0x0008] THEN: R(2:5|(1:11)(1:(1:10)(1:8))) ELSE: R(1:4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r6 \> 0) goto L_0x000c\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (r8 == true) goto L_0x000c\l}"];
subgraph cluster_Region_1976069546 {
label = "R(2:5|(1:11)(1:(1:10)(1:8)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|okio.Segment okio.Segment r0 = writableSegment(1)\lint int r1 = r5.read(r0.data, r0.limit, (int) java.lang.Math.min(r6, (long) (8192 \- r0.limit)))\l}"];
subgraph cluster_IfRegion_1500768377 {
label = "IF [B:6:0x0024] THEN: R(1:11) ELSE: R(1:(1:10)(1:8))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r1 != \-1) goto L_0x002f\l}"];
subgraph cluster_Region_784795190 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002f|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:11:0x002f\l|r0.limit += r1\llong long r0 = (long) r1\lr4.size += r0\lr6 \-= r0\l}"];
}
subgraph cluster_Region_1350201542 {
label = "R(1:(1:10)(1:8)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1432704285 {
label = "IF [B:7:0x0026] THEN: R(1:10) ELSE: R(1:8) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0026|if (r8 != true) goto L_0x0029\l}"];
subgraph cluster_Region_790396530 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002e|throw new java.io.EOFException()\l}"];
}
subgraph cluster_Region_1298856532 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|RETURN\l|return\l}"];
}
}
}
}
}
subgraph cluster_Region_1318408063 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|RETURN\l|return\l}"];
}
}
}
}
}
subgraph cluster_Region_824653325 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0043|throw new java.lang.IllegalArgumentException(\"in == null\")\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|LOOP_START\lPHI: r6 \l  PHI: (r6v2 long) = (r6v0 long), (r6v3 long) binds: [B:0:0x0000, B:11:0x002f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:11:0x002f\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0029}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x003c}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0026|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okio.Buffer.readFrom((r4v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_12[style=dashed];
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_5;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_11;
Node_6 -> Node_14[style=dashed];
Node_11 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_1 -> Node_2;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_7;
Node_15 -> Node_4;
}

