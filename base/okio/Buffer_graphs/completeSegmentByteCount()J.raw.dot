digraph "CFG forokio.Buffer.completeSegmentByteCount()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN  (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r2 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000b: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.prev okio.Segment \l0x000d: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x000f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IGET  (r3 I:boolean) = (r2 I:okio.Segment) okio.Segment.owner boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0019: IGET  (r2 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x001b: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int) \l0x001c: CAST  (r2 I:long) = (long) (r3 I:int) \l0x001d: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.completeSegmentByteCount((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

