digraph "CFG forokio.Buffer.readUtf8LineStrict(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r11 \> 0 ? 1 : (r11 == 0 ? 0 : \-1)) \< 0) goto L_0x0093\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|r2 = kotlin.jvm.internal.LongCompanionObject.MAX_VALUE\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if ((r11 \> kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 1 : (r11 == kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 0 : \-1)) != 0) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|long r2 = r11 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|PHI: r2 \l  PHI: (r2v2 long) = (r2v1 long), (r2v7 long) binds: [B:3:0x000f, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|long r4 = indexOf((byte) 10, 0, r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if ((r4 \> \-1 ? 1 : (r4 == \-1 ? 0 : \-1)) == 0) goto L_0x002a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025}"];
Node_8 [shape=record,label="{8\:\ 0x0029|RETURN\l|return readUtf8Line(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a}"];
Node_10 [shape=record,label="{10\:\ 0x0030|if ((r2 \> size() ? 1 : (r2 == size() ? 0 : \-1)) \>= 0) goto L_0x0049\l}"];
Node_11 [shape=record,label="{11\:\ 0x0032}"];
Node_12 [shape=record,label="{12\:\ 0x003a|if (getByte(r2 \- 1) != 13) goto L_0x0049\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c}"];
Node_14 [shape=record,label="{14\:\ 0x0042|if (getByte(r2) != 10) goto L_0x0049\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044}"];
Node_16 [shape=record,label="{16\:\ 0x0048|RETURN\l|return readUtf8Line(r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|okio.Buffer r6 = new okio.Buffer()\lr0 = r10\lr1 = r6\lcopyTo(r1, 0, java.lang.Math.min(32, size()))\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"n not found: limit=\")\lr1.append(java.lang.Math.min(size(), r11))\lr1.append(\" content=\")\lr1.append(r6.readByteString().hex())\lr1.append(kotlin.text.Typography.ellipsis)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0092|throw new java.io.EOFException(r1.toString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x0093|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"limit \< 0: \")\lr1.append(r11)\l}"];
Node_20 [shape=record,label="{20\:\ 0x00a9|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public java.lang.String okio.Buffer.readUtf8LineStrict((r10v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r11v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

