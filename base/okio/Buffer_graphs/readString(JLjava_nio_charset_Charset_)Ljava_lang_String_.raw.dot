digraph "CFG forokio.Buffer.readString(JLjava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: MOVE  (r4 I:?[long, double]) = (r7 I:?[long, double]) \l0x0005: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x000d: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0013: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST_STR  (r7 I:java.lang.String) =  \"\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r7 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x001c: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x001e: CAST  (r1 I:long) = (long) (r1 I:int) \l0x001f: ARITH  (r1 I:long) = (r1 I:long) + (r7 I:long) \l0x0020: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0022: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0023: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x0029: INVOKE  (r7 I:byte[]) = (r6 I:okio.Buffer), (r7 I:long) okio.Buffer.readByteArray(long):byte[] type: VIRTUAL \l0x002d: INVOKE  \l  (r0 I:java.lang.String)\l  (r7 I:byte[])\l  (r9 I:java.nio.charset.Charset)\l java.lang.String.\<init\>(byte[], java.nio.charset.Charset):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: RETURN  (r0 I:java.lang.String) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: NEW_INSTANCE  (r1 I:java.lang.String) =  java.lang.String \l0x0033: IGET  (r2 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0035: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0037: CAST  (r4 I:int) = (int) (r7 I:long) \l0x0038: INVOKE  \l  (r1 I:java.lang.String)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l  (r9 I:java.nio.charset.Charset)\l java.lang.String.\<init\>(byte[], int, int, java.nio.charset.Charset):void type: DIRECT \l0x003b: IGET  (r9 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x003d: CAST  (r2 I:long) = (long) (r9 I:int) \l0x003e: ARITH  (r2 I:long) = (r2 I:long) + (r7 I:long) \l0x003f: CAST  (r9 I:int) = (int) (r2 I:long) \l0x0040: IPUT  (r9 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l0x0042: IGET  (r2 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0044: ARITH  (r2 I:long) = (r2 I:long) \- (r7 I:long) \l0x0045: IPUT  (r2 I:long), (r6 I:okio.Buffer) okio.Buffer.size long \l0x0047: IGET  (r7 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0049: IGET  (r8 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: INVOKE  (r7 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0051: IPUT  (r7 I:okio.Segment), (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0053: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: RETURN  (r1 I:java.lang.String) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: NEW_INSTANCE  (r9 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0059: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005b: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005e: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \> Integer.MAX_VALUE: \" \l0x0060: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0063: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0066: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006a: INVOKE  \l  (r9 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x006d|0x006d: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x006e|0x006e: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0070: CONST_STR  (r8 I:java.lang.String) =  \"charset == null\" \l0x0072: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0075|0x0075: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okio.Buffer.readString((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.EOFException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

