digraph "CFG forokio.Buffer.selectPrefix(Lokio\/Options;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r6 I:okio.Segment) = (r9 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0002: IGET  (r10 I:okio.ByteString[]) = (r10 I:okio.Options) okio.Options.byteStrings okio.ByteString[] \l0x0004: ARRAY_LENGTH  (r7 I:int) = (r10 I:?[]) \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:9:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l \l0x000b: IGET  (r0 I:long) = (r9 I:okio.Buffer) okio.Buffer.size long \l0x000d: INVOKE  (r2 I:int) = (r3 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0011: CAST  (r4 I:long) = (long) (r2 I:int) \l0x0012: INVOKE  (r0 I:long) = (r0 I:long), (r4 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0016: CAST  (r5 I:int) = (int) (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r2 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x001b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x001d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r0 I:boolean) = \l  (r0 I:okio.Buffer)\l  (r1 I:okio.Segment)\l  (r2 I:int)\l  (r3 I:okio.ByteString)\l  (r4 I:int)\l  (r5 I:int)\l okio.Buffer.rangeEquals(okio.Segment, int, okio.ByteString, int, int):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: RETURN  (r8 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: CONST  (r10 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: RETURN  (r10 I:int) \l}"];
MethodNode[shape=record,label="{int okio.Buffer.selectPrefix((r9 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r10 I:okio.Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_1;
Node_9 -> Node_10;
}

