digraph "CFG forokio.Buffer.readLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r15 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (8 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x008c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okio.Segment) = (r15 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000a: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x000c: IGET  (r4 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x000e: ARITH  (r5 I:int) = (r4 I:int) \- (r1 I:int) \l0x0010: CONST  (r6 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0012: CONST  (r7 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r5 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:6:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r0 I:int) = (r15 I:okio.Buffer) okio.Buffer.readInt():int type: VIRTUAL \l0x001a: CAST  (r0 I:long) = (long) (r0 I:int) \l0x001b: CONST  (r2 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x0020: ARITH  (r0 I:long) = (r0 I:long) & (r2 I:long) \l0x0021: ARITH  (r0 I:long) = (r0 I:long) \<\< (r6 I:long) \l0x0022: INVOKE  (r4 I:int) = (r15 I:okio.Buffer) okio.Buffer.readInt():int type: VIRTUAL \l0x0026: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0027: ARITH  (r2 I:long) = (r2 I:long) & (r4 I:long) \l0x0028: ARITH  (r0 I:long) = (r0 I:long) \| (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: RETURN  (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: IGET  (r5 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x002c: ARITH  (r8 I:int) = (r1 I:int) + (1 int) \l0x002e: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0030: CAST  (r9 I:long) = (long) (r1 I:int) \l0x0031: CONST  (r11 I:?[long, double]) = (255(0xff, double:1.26E\-321) ?[long, double]) \l0x0033: ARITH  (r9 I:long) = (r9 I:long) & (r11 I:long) \l0x0034: CONST  (r1 I:?[int, float, short, byte, char]) = (56 ?[int, float, short, byte, char]) \l0x0036: ARITH  (r9 I:long) = (r9 I:long) \<\< (r1 I:long) \l0x0037: ARITH  (r1 I:int) = (r8 I:int) + (1 int) \l0x0039: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l0x003b: CAST  (r13 I:long) = (long) (r8 I:int) \l0x003c: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x003d: CONST  (r8 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x003f: ARITH  (r13 I:long) = (r13 I:long) \<\< (r8 I:long) \l0x0040: ARITH  (r8 I:long) = (r9 I:long) \| (r13 I:long) \l0x0042: ARITH  (r10 I:int) = (r1 I:int) + (1 int) \l0x0044: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0046: CAST  (r13 I:long) = (long) (r1 I:int) \l0x0047: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x0048: CONST  (r1 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x004a: ARITH  (r13 I:long) = (r13 I:long) \<\< (r1 I:long) \l0x004b: ARITH  (r8 I:long) = (r8 I:long) \| (r13 I:long) \l0x004c: ARITH  (r1 I:int) = (r10 I:int) + (1 int) \l0x004e: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l0x0050: CAST  (r13 I:long) = (long) (r10 I:int) \l0x0051: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x0052: ARITH  (r13 I:long) = (r13 I:long) \<\< (r6 I:long) \l0x0053: ARITH  (r8 I:long) = (r8 I:long) \| (r13 I:long) \l0x0054: ARITH  (r6 I:int) = (r1 I:int) + (1 int) \l0x0056: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0058: CAST  (r13 I:long) = (long) (r1 I:int) \l0x0059: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x005a: CONST  (r1 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l0x005c: ARITH  (r13 I:long) = (r13 I:long) \<\< (r1 I:long) \l0x005d: ARITH  (r8 I:long) = (r8 I:long) \| (r13 I:long) \l0x005e: ARITH  (r1 I:int) = (r6 I:int) + (1 int) \l0x0060: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0062: CAST  (r13 I:long) = (long) (r6 I:int) \l0x0063: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x0064: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0066: ARITH  (r13 I:long) = (r13 I:long) \<\< (r6 I:long) \l0x0067: ARITH  (r8 I:long) = (r8 I:long) \| (r13 I:long) \l0x0068: ARITH  (r6 I:int) = (r1 I:int) + (1 int) \l0x006a: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x006c: CAST  (r13 I:long) = (long) (r1 I:int) \l0x006d: ARITH  (r13 I:long) = (r13 I:long) & (r11 I:long) \l0x006e: ARITH  (r13 I:long) = (r13 I:long) \<\< (r7 I:long) \l0x006f: ARITH  (r7 I:long) = (r8 I:long) \| (r13 I:long) \l0x0071: ARITH  (r1 I:int) = (r6 I:int) + (1 int) \l0x0073: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0075: CAST  (r5 I:long) = (long) (r5 I:int) \l0x0076: ARITH  (r5 I:long) = (r5 I:long) & (r11 I:long) \l0x0077: ARITH  (r5 I:long) = (r5 I:long) \| (r7 I:long) \l0x0078: IGET  (r7 I:long) = (r15 I:okio.Buffer) okio.Buffer.size long \l0x007a: ARITH  (r7 I:long) = (r7 I:long) \- (r2 I:long) \l0x007b: IPUT  (r7 I:long), (r15 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_7 [shape=record,label="{7\:\ 0x007d|0x007d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0089 \l}"];
Node_8 [shape=record,label="{8\:\ 0x007f|0x007f: INVOKE  (r1 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0083: IPUT  (r1 I:okio.Segment), (r15 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0085: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0089|0x0089: IPUT  (r1 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l}"];
Node_10 [shape=record,label="{10\:\ 0x008b|0x008b: RETURN  (r5 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x008c|0x008c: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x008e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0090: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0093: CONST_STR  (r2 I:java.lang.String) =  \"size \< 8: \" \l0x0095: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0098: IGET  (r2 I:long) = (r15 I:okio.Buffer) okio.Buffer.size long \l0x009a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x009d: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a1: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x00a4|0x00a4: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.readLong((r15 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

