digraph "CFG forokio.Buffer.select(Lokio\/Options;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r6 I:okio.Segment) = (r10 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:okio.ByteString) =  okio.ByteString.EMPTY okio.ByteString \l0x0006: INVOKE  (r11 I:int) = (r11 I:okio.Options), (r0 I:java.lang.Object) okio.Options.indexOf(java.lang.Object):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r11 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r11 I:okio.ByteString[]) = (r11 I:okio.Options) okio.Options.byteStrings okio.ByteString[] \l0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: ARRAY_LENGTH  (r7 I:int) = (r11 I:?[]) \l0x000f: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:17:0x0042 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: AGET  (r9 I:?[OBJECT, ARRAY]) = \l  (r11 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l \l0x0014: IGET  (r0 I:long) = (r10 I:okio.Buffer) okio.Buffer.size long \l0x0016: INVOKE  (r2 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x001a: CAST  (r2 I:long) = (long) (r2 I:int) \l0x001b: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x003f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IGET  (r2 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0021: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: INVOKE  (r5 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0026: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0027: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r0 I:boolean) = \l  (r0 I:okio.Buffer)\l  (r1 I:okio.Segment)\l  (r2 I:int)\l  (r3 I:okio.ByteString)\l  (r4 I:int)\l  (r5 I:int)\l okio.Buffer.rangeEquals(okio.Segment, int, okio.ByteString, int, int):boolean type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|SYNTHETIC\lSplitter:B:10:0x002f\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x002f\l|0x002f: INVOKE  (r11 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0038 \}, TRY_ENTER]\l0x0033: CAST  (r0 I:long) = (long) (r11 I:int) A[Catch:\{ EOFException \-\> 0x0038 \}]\l0x0034: INVOKE  (r10 I:okio.Buffer), (r0 I:long) okio.Buffer.skip(long):void type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0038 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: RETURN  (r8 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|ExcHandler: EOFException null\lSplitter:B:10:0x002f\l|0x0038: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x003b: INVOKE  (r0 I:java.lang.AssertionError), (r11 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: RETURN  (r11 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.Buffer.select((r10 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r11 I:okio.Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_5;
Node_17 -> Node_18;
}

