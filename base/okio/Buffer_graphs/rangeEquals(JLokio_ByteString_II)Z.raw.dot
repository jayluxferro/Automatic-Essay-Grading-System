digraph "CFG forokio.Buffer.rangeEquals(JLokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0003: CMP_L  (r1 I:int) = (r6 I:long), (r1 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r10 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r1 I:long) = (r5 I:okio.Buffer) okio.Buffer.size long \l0x000d: ARITH  (r1 I:long) = (r1 I:long) \- (r6 I:long) \l0x000e: CAST  (r3 I:long) = (long) (r10 I:int) \l0x000f: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r1 I:int) = (r8 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0017: ARITH  (r1 I:int) = (r1 I:int) \- (r9 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r1 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: CAST  (r2 I:long) = (long) (r1 I:int) \l0x001f: ARITH  (r2 I:long) = (r2 I:long) + (r6 I:long) \l0x0020: INVOKE  (r2 I:byte) = (r5 I:okio.Buffer), (r2 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0024: ARITH  (r3 I:int) = (r9 I:int) + (r1 I:int) \l0x0026: INVOKE  (r3 I:byte) = (r8 I:okio.ByteString), (r3 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: RETURN  (r0 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: RETURN  (r6 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okio.Buffer.rangeEquals((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_17[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_10;
Node_15 -> Node_16;
}

