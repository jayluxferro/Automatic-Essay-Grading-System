digraph "CFG forokio.Buffer.readLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r15.size \> 8 ? 1 : (r15.size == 8 ? 0 : \-1)) \< 0) goto L_0x008c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|okio.Segment r0 = r15.head\lint r1 = r0.pos\lint r4 = r0.limit\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if ((r4 \- r1) \>= 8) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x0029|RETURN\l|return ((((long) readInt()) & 4294967295L) \<\< 32) \| (4294967295L & ((long) readInt()))\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|byte[] r5 = r0.data\lint r8 = r1 + 1\lint r1 = r8 + 1\lint r10 = r1 + 1\lint r1 = r10 + 1\lint r6 = r1 + 1\lint r1 = r6 + 1\lint r6 = r1 + 1\lint r1 = r6 + 1\llong r5 = ((long) r5[r6]) & 255\llong r5 = r5 \| ((((((((((long) r5[r1]) & 255) \<\< 56) \| ((((long) r5[r8]) & 255) \<\< 48)) \| ((((long) r5[r1]) & 255) \<\< 40)) \| ((((long) r5[r10]) & 255) \<\< 32)) \| ((((long) r5[r1]) & 255) \<\< 24)) \| ((((long) r5[r6]) & 255) \<\< 16)) \| ((((long) r5[r1]) & 255) \<\< 8))\lr15.size = r15.size \- 8\l}"];
Node_7 [shape=record,label="{7\:\ 0x007d|if (r1 != r4) goto L_0x0089\l}"];
Node_8 [shape=record,label="{8\:\ 0x007f|r15.head = r0.pop()\lokio.SegmentPool.recycle(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0089|r0.pos = r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x008b|RETURN\l|return r5\l}"];
Node_11 [shape=record,label="{11\:\ 0x008c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"size \< 8: \")\lr1.append(r15.size)\l}"];
Node_12 [shape=record,label="{12\:\ 0x00a4|throw new java.lang.IllegalStateException(r1.toString())\l}"];
MethodNode[shape=record,label="{public long okio.Buffer.readLong((r15v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

