digraph "CFG forokio.Buffer.readHexadecimalUnsignedLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r14 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00ad \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r4 I:?[long, double]) = (r2 I:?[long, double]) \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r6 I:okio.Segment) = (r14 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000d: IGET  (r7 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l0x000f: IGET  (r8 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0011: IGET  (r9 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r8 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:29:0x0092 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: AGET  (r10 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l0x0017: CONST  (r11 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r10 I:?[int, byte, short, char]) \< (r11 I:?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r11 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r10 I:?[int, byte, short, char]) \> (r11 I:?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: ARITH  (r11 I:int) = (r10 I:int) + (\-48 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: CONST  (r11 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r10 I:?[int, byte, short, char]) \< (r11 I:?[int, byte, short, char])  \-\> B:15:0x002f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: CONST  (r11 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: IF  (r10 I:?[int, byte, short, char]) \> (r11 I:?[int, byte, short, char])  \-\> B:15:0x002f \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: ARITH  (r11 I:int) = (r10 I:int) + (\-97 int) \l0x002c: ARITH  (r11 I:int) = (r11 I:int) + (10 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: CONST  (r11 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: IF  (r10 I:?[int, byte, short, char]) \< (r11 I:?[int, byte, short, char])  \-\> B:25:0x0073 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: CONST  (r11 I:?[int, float, short, byte, char]) = (70 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: IF  (r10 I:?[int, byte, short, char]) \> (r11 I:?[int, byte, short, char])  \-\> B:25:0x0073 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: ARITH  (r11 I:int) = (r10 I:int) + (\-65 int) \l0x0039: ARITH  (r11 I:int) = (r11 I:int) + (10 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003b|0x003b: CONST  (r12 I:?[long, double]) = \l  (\-1152921504606846976(0xf000000000000000, double:\-3.105036184601418E231) ?[long, double])\l \l0x003d: ARITH  (r12 I:long) = (r12 I:long) & (r4 I:long) \l0x003e: CMP_L  (r12 I:int) = (r12 I:long), (r2 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004b \l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0043: ARITH  (r4 I:long) = (r4 I:long) \<\< (r10 I:long) \l0x0044: CAST  (r10 I:long) = (long) (r11 I:int) \l0x0045: ARITH  (r4 I:long) = (r4 I:long) \| (r10 I:long) \l0x0046: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0048: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004b|0x004b: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x004d: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0050: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.Buffer), (r4 I:long) okio.Buffer.writeHexadecimalUnsignedLong(long):okio.Buffer type: VIRTUAL \l0x0054: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.Buffer), (r10 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0058: NEW_INSTANCE  (r1 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x005a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005f: CONST_STR  (r3 I:java.lang.String) =  \"Number too large: \" \l0x0061: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r0 I:java.lang.String) = (r0 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l0x0068: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006f: INVOKE  \l  (r1 I:java.lang.NumberFormatException)\l  (r0 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0072|0x0072: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0073|0x0073: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0077 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0075|0x0075: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0077|0x0077: NEW_INSTANCE  (r0 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x0079: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007e: CONST_STR  (r2 I:java.lang.String) =  \"Expected leading [0\-9a\-fA\-F] character but was 0x\" \l0x0080: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0083: INVOKE  (r2 I:java.lang.String) = (r10 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0087: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008e: INVOKE  \l  (r0 I:java.lang.NumberFormatException)\l  (r1 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x0091|0x0091: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0092|0x0092: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x009e \l}"];
Node_30 [shape=record,label="{30\:\ 0x0094|0x0094: INVOKE  (r7 I:okio.Segment) = (r6 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0098: IPUT  (r7 I:okio.Segment), (r14 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x009a: INVOKE  (r6 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x009e|0x009e: IPUT  (r8 I:int), (r6 I:okio.Segment) okio.Segment.pos int \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a0|0x00a0: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00a6 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a2|0x00a2: IGET  (r6 I:okio.Segment) = (r14 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a4|0x00a4: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a6|0x00a6: IGET  (r1 I:long) = (r14 I:okio.Buffer) okio.Buffer.size long \l0x00a8: CAST  (r6 I:long) = (long) (r0 I:int) \l0x00a9: ARITH  (r1 I:long) = (r1 I:long) \- (r6 I:long) \l0x00aa: IPUT  (r1 I:long), (r14 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ac|0x00ac: RETURN  (r4 I:long) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ad|0x00ad: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x00af: CONST_STR  (r1 I:java.lang.String) =  \"size == 0\" \l0x00b1: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b4|0x00b4: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.readHexadecimalUnsignedLong((r14 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_37;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_29;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_4;
Node_23 -> Node_24;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_3;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_36;
Node_37 -> Node_38;
}

