digraph "CFG forokio.Buffer.hmac(Ljava\/lang\/String;Lokio\/ByteString;)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:javax.crypto.Mac) = (r5 I:java.lang.String) javax.crypto.Mac.getInstance(java.lang.String):javax.crypto.Mac type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}, TRY_ENTER]\l0x0004: NEW_INSTANCE  (r1 I:javax.crypto.spec.SecretKeySpec) =  javax.crypto.spec.SecretKeySpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0006: INVOKE  (r6 I:byte[]) = (r6 I:okio.ByteString) okio.ByteString.toByteArray():byte[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x000a: INVOKE  \l  (r1 I:javax.crypto.spec.SecretKeySpec)\l  (r6 I:byte[])\l  (r5 I:java.lang.String)\l javax.crypto.spec.SecretKeySpec.\<init\>(byte[], java.lang.String):void type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x000d: INVOKE  (r0 I:javax.crypto.Mac), (r1 I:java.security.Key) javax.crypto.Mac.init(java.security.Key):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0010: IGET  (r5 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003d A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r5 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0016: IGET  (r5 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0018: IGET  (r6 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x001a: IGET  (r6 I:int) = (r6 I:okio.Segment) okio.Segment.pos int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x001c: IGET  (r1 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x001e: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0020: IGET  (r2 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0022: IGET  (r2 I:int) = (r2 I:okio.Segment) okio.Segment.pos int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0024: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0025: INVOKE  \l  (r0 I:javax.crypto.Mac)\l  (r5 I:byte[])\l  (r6 I:int)\l  (r1 I:int)\l javax.crypto.Mac.update(byte[], int, int):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0028: IGET  (r5 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: IGET  (r5 I:okio.Segment) = (r5 I:okio.Segment) okio.Segment.next okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x002c: IGET  (r6 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003d A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IGET  (r6 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0032: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0034: IGET  (r2 I:int) = (r5 I:okio.Segment) okio.Segment.limit int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0036: IGET  (r3 I:int) = (r5 I:okio.Segment) okio.Segment.pos int A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0038: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0039: INVOKE  \l  (r0 I:javax.crypto.Mac)\l  (r6 I:byte[])\l  (r1 I:int)\l  (r2 I:int)\l javax.crypto.Mac.update(byte[], int, int):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x003c: GOTO  \-\> 0x002a A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|0x003d: INVOKE  (r5 I:byte[]) = (r0 I:javax.crypto.Mac) javax.crypto.Mac.doFinal():byte[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0041: INVOKE  (r5 I:okio.ByteString) = (r5 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x004d, InvalidKeyException \-\> 0x0046 \}]\l0x0044: NOP   A[TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: RETURN  (r5 I:okio.ByteString) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|ExcHandler: InvalidKeyException null\lSplitter:B:0:0x0000\l|0x0046: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0049: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: NEW_INSTANCE  (r5 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x004f: INVOKE  (r5 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: NoSuchAlgorithmException null\lSplitter:B:0:0x0000\l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okio.ByteString okio.Buffer.hmac((r4 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_13;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_14;
Node_13 -> Node_12;
}

