digraph "CFG forokio.Buffer.write(Lokio\/Source;J)Lokio\/BufferedSink;" {
subgraph cluster_Region_769807901 {
label = "R(2:(2:2|(1:4)(1:6))|7)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1643155967 {
label = "LOOP:0: (2:2|(1:4)(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r6 \> 0) goto L_0x0006\l}"];
subgraph cluster_Region_2012534212 {
label = "R(2:2|(1:4)(1:6))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|long long r0 = r5.read(r4, r6)\l}"];
subgraph cluster_IfRegion_625198711 {
label = "IF [B:3:0x000e] THEN: R(1:4) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r0 != \-1) goto L_0x0010\l}"];
subgraph cluster_Region_1279987065 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:4:0x0010\l|r6 \-= r0\l}"];
}
subgraph cluster_Region_1108536410 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|throw new java.io.EOFException()\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return r4\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r6 \l  PHI: (r6v1 long) = (r6v0 long), (r6v2 long) binds: [B:0:0x0000, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:4:0x0010\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0012}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public okio.BufferedSink okio.Buffer.write((r4v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5v0 okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_0;
Node_0 -> Node_1;
Node_5 -> Node_6;
Node_8 -> Node_7;
Node_9 -> Node_5;
}

