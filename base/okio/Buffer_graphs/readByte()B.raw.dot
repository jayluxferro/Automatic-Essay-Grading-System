digraph "CFG forokio.Buffer.readByte()B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r9 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okio.Segment) = (r9 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000a: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x000c: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x000e: IGET  (r3 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0010: ARITH  (r4 I:int) = (r1 I:int) + (1 int) \l0x0012: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0014: IGET  (r5 I:long) = (r9 I:okio.Buffer) okio.Buffer.size long \l0x0016: CONST  (r7 I:?[long, double]) = (1 ?[long, double]) \l0x0018: ARITH  (r5 I:long) = (r5 I:long) \- (r7 I:long) \l0x0019: IPUT  (r5 I:long), (r9 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: INVOKE  (r2 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0021: IPUT  (r2 I:okio.Segment), (r9 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0023: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IPUT  (r4 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: RETURN  (r1 I:byte) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002c: CONST_STR  (r1 I:java.lang.String) =  \"size == 0\" \l0x002e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public byte okio.Buffer.readByte((r9 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

