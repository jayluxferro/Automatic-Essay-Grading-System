digraph "CFG forokio.Buffer.rangeEquals(Lokio\/Segment;ILokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0002: IGET  (r1 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r9 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r6 I:okio.Segment) = (r6 I:okio.Segment) okio.Segment.next okio.Segment \l0x000a: IGET  (r7 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l0x000c: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x000e: IGET  (r1 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0010: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0012: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0016: INVOKE  (r3 I:byte) = (r8 I:okio.ByteString), (r9 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r6 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x0020: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: RETURN  (r6 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean okio.Buffer.rangeEquals((r5 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r6 I:okio.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_1;
Node_9 -> Node_10;
}

