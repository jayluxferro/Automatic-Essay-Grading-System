digraph "CFG forokio.Buffer.copyTo(Ljava\/io\/OutputStream;JJ)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0004: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l0x0005: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l0x0006: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0009: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000b: CMP_L  (r2 I:int) = (r10 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r6 I:okio.Buffer) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r2 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0014: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x0016: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0017: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0018: CMP_L  (r3 I:int) = (r8 I:long), (r3 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x001e: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x0020: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0021: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0022: ARITH  (r8 I:long) = (r8 I:long) \- (r3 I:long) \l0x0023: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CMP_L  (r3 I:int) = (r10 I:long), (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0043 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x002c: CAST  (r3 I:long) = (long) (r3 I:int) \l0x002d: ARITH  (r3 I:long) = (r3 I:long) + (r8 I:long) \l0x002e: CAST  (r8 I:int) = (int) (r3 I:long) \l0x002f: IGET  (r9 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0031: ARITH  (r9 I:int) = (r9 I:int) \- (r8 I:int) \l0x0032: CAST  (r3 I:long) = (long) (r9 I:int) \l0x0033: INVOKE  (r3 I:long) = (r3 I:long), (r10 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0037: CAST  (r9 I:int) = (int) (r3 I:long) \l0x0038: IGET  (r3 I:byte[]) = (r2 I:okio.Segment) okio.Segment.data byte[] \l0x003a: INVOKE  \l  (r7 I:java.io.OutputStream)\l  (r3 I:byte[])\l  (r8 I:int)\l  (r9 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL \l0x003d: CAST  (r8 I:long) = (long) (r9 I:int) \l0x003e: ARITH  (r10 I:long) = (r10 I:long) \- (r8 I:long) \l0x003f: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l0x0041: MOVE  (r8 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: RETURN  (r6 I:okio.Buffer) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0046: CONST_STR  (r8 I:java.lang.String) =  \"out == null\" \l0x0048: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.copyTo((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
Node_12 -> Node_13;
}

