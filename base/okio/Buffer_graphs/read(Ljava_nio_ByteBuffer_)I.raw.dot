digraph "CFG forokio.Buffer.read(Ljava\/nio\/ByteBuffer;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r7 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r1 I:int) = (r7 I:java.nio.ByteBuffer) java.nio.ByteBuffer.remaining():int type: VIRTUAL \l0x000a: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x000c: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x000e: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x000f: INVOKE  (r1 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0013: IGET  (r2 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0015: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0017: INVOKE  \l  (r7 I:java.nio.ByteBuffer)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r1 I:int)\l java.nio.ByteBuffer.put(byte[], int, int):java.nio.ByteBuffer type: VIRTUAL \l0x001a: IGET  (r7 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x001c: ARITH  (r7 I:int) = (r7 I:int) + (r1 I:int) \l0x001d: IPUT  (r7 I:int), (r0 I:okio.Segment) okio.Segment.pos int \l0x001f: IGET  (r2 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0021: CAST  (r4 I:long) = (long) (r1 I:int) \l0x0022: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x0023: IPUT  (r2 I:long), (r6 I:okio.Buffer) okio.Buffer.size long \l0x0025: IGET  (r7 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0027: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: INVOKE  (r7 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x002f: IPUT  (r7 I:okio.Segment), (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0031: INVOKE  (r0 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.Buffer.read((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

