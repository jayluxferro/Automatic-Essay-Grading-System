digraph "CFG forokio.Buffer.writeTo(Ljava\/io\/OutputStream;J)Lokio\/Buffer;" {
subgraph cluster_Region_211369111 {
label = "R(1:(2:(3:1|(2:4|(1:6)(0))|7)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1800725933 {
label = "R(2:(3:1|(2:4|(1:6)(0))|7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1258163400 {
label = "IF [B:0:0x0000] THEN: R(3:1|(2:4|(1:6)(0))|7) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 != null) goto L_0x0002\l}"];
subgraph cluster_Region_1103286410 {
label = "R(3:1|(2:4|(1:6)(0))|7)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|okio.Util.checkOffsetAndCount(r6.size, 0, r8)\lokio.Segment okio.Segment r0 = r6.head\l}"];
subgraph cluster_LoopRegion_1869526732 {
label = "LOOP:0: (2:4|(1:6)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r8 \> 0) goto L_0x0012\l}"];
subgraph cluster_Region_863738042 {
label = "R(2:4|(1:6)(0))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|int int r1 = (int) java.lang.Math.min(r8, (long) (r0.limit \- r0.pos))\lr7.write(r0.data, r0.pos, r1)\lr0.pos += r1\llong long r4 = (long) r1\lr6.size \-= r4\lr8 \-= r4\l}"];
subgraph cluster_IfRegion_2007180928 {
label = "IF [B:5:0x0034] THEN: R(1:6) ELSE: R(0)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0034|if (r0.pos == r0.limit) goto L_0x0036\l}"];
subgraph cluster_Region_722330856 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0036|okio.Segment okio.Segment r1 = r0.pop()\lr6.head = r1\lokio.SegmentPool.recycle(r0)\lr0 = r1\l}"];
}
subgraph cluster_Region_718688818 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0041|RETURN\l|return r6\l}"];
}
}
subgraph cluster_Region_1726194504 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0049|throw new java.lang.IllegalArgumentException(\"out == null\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c|LOOP_START\lPHI: r0 r8 \l  PHI: (r0v2 okio.Segment) = (r0v1 okio.Segment), (r0v3 okio.Segment) binds: [B:1:0x0002, B:10:0x000c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v2 long) = (r8v0 long), (r8v3 long) binds: [B:1:0x0002, B:10:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x000c\-\>B:10:0x000c\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0042}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000c|LOOP_END\lSYNTHETIC\lPHI: r0 \l  PHI: (r0v3 okio.Segment) = (r0v2 okio.Segment), (r0v4 okio.Segment) binds: [B:12:0x000c, B:13:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x000c\-\>B:10:0x000c\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0041|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000c|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.writeTo((r6v0 'this' okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_8[style=dashed];
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_11[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_12[style=dashed];
Node_6 -> Node_13;
Node_2 -> Node_3;
Node_8 -> Node_9;
Node_10 -> Node_2;
Node_11 -> Node_7;
Node_12 -> Node_10;
Node_13 -> Node_10;
}

