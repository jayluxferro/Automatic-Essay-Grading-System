digraph "CFG forokio.Buffer.readFrom(Ljava\/io\/InputStream;JZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  (r0 I:okio.Segment) = (r4 I:okio.Buffer), (r0 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x0011: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0013: ARITH  (r1 I:int) = (8192 int) \- (r1 I:int) \l0x0015: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0016: INVOKE  (r1 I:long) = (r6 I:long), (r1 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x001a: CAST  (r1 I:int) = (int) (r1 I:long) \l0x001b: IGET  (r2 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x001d: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x001f: INVOKE  (r1 I:int) = \l  (r5 I:java.io.InputStream)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r1 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l0x0023: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: NEW_INSTANCE  (r5 I:java.io.EOFException) =  java.io.EOFException \l0x002b: INVOKE  (r5 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0031: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0032: IPUT  (r2 I:int), (r0 I:okio.Segment) okio.Segment.limit int \l0x0034: IGET  (r2 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long \l0x0036: CAST  (r0 I:long) = (long) (r1 I:int) \l0x0037: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l0x0038: IPUT  (r2 I:long), (r4 I:okio.Buffer) okio.Buffer.size long \l0x003a: ARITH  (r6 I:long) = (r6 I:long) \- (r0 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003e: CONST_STR  (r6 I:java.lang.String) =  \"in == null\" \l0x0040: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okio.Buffer.readFrom((r4 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_13;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_1;
Node_13 -> Node_14;
}

