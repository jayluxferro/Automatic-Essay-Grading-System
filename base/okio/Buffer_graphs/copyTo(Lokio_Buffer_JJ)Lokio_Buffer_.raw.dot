digraph "CFG forokio.Buffer.copyTo(Lokio\/Buffer;JJ)Lokio\/Buffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0064 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size long \l0x0004: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l0x0005: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l0x0006: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0009: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000b: CMP_L  (r2 I:int) = (r10 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r6 I:okio.Buffer) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r2 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long \l0x0012: ARITH  (r2 I:long) = (r2 I:long) + (r10 I:long) \l0x0013: IPUT  (r2 I:long), (r7 I:okio.Buffer) okio.Buffer.size long \l0x0015: IGET  (r2 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0019: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x001b: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x001c: CAST  (r3 I:long) = (long) (r3 I:int) \l0x001d: CMP_L  (r3 I:int) = (r8 I:long), (r3 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0023: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x0025: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0026: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0027: ARITH  (r8 I:long) = (r8 I:long) \- (r3 I:long) \l0x0028: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: CMP_L  (r3 I:int) = (r10 I:long), (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0063 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: INVOKE  (r3 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.sharedCopy():okio.Segment type: VIRTUAL \l0x0033: IGET  (r4 I:int) = (r3 I:okio.Segment) okio.Segment.pos int \l0x0035: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0036: ARITH  (r4 I:long) = (r4 I:long) + (r8 I:long) \l0x0037: CAST  (r8 I:int) = (int) (r4 I:long) \l0x0038: IPUT  (r8 I:int), (r3 I:okio.Segment) okio.Segment.pos int \l0x003a: IGET  (r8 I:int) = (r3 I:okio.Segment) okio.Segment.pos int \l0x003c: CAST  (r9 I:int) = (int) (r10 I:long) \l0x003d: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l0x003e: IGET  (r9 I:int) = (r3 I:okio.Segment) okio.Segment.limit int \l0x0040: INVOKE  (r8 I:int) = (r8 I:int), (r9 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0044: IPUT  (r8 I:int), (r3 I:okio.Segment) okio.Segment.limit int \l0x0046: IGET  (r8 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0051 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: IPUT  (r3 I:okio.Segment), (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x004c: IPUT  (r3 I:okio.Segment), (r3 I:okio.Segment) okio.Segment.next okio.Segment \l0x004e: IPUT  (r3 I:okio.Segment), (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: IGET  (r8 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0053: IGET  (r8 I:okio.Segment) = (r8 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0055: INVOKE  (r8 I:okio.Segment), (r3 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|0x0058: IGET  (r8 I:int) = (r3 I:okio.Segment) okio.Segment.limit int \l0x005a: IGET  (r9 I:int) = (r3 I:okio.Segment) okio.Segment.pos int \l0x005c: ARITH  (r8 I:int) = (r8 I:int) \- (r9 I:int) \l0x005d: CAST  (r8 I:long) = (long) (r8 I:int) \l0x005e: ARITH  (r10 I:long) = (r10 I:long) \- (r8 I:long) \l0x005f: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l0x0061: MOVE  (r8 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0063|0x0063: RETURN  (r6 I:okio.Buffer) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0064|0x0064: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0066: CONST_STR  (r8 I:java.lang.String) =  \"out == null\" \l0x0068: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x006b|0x006b: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Buffer okio.Buffer.copyTo((r6 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_16;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_8;
Node_16 -> Node_17;
}

