digraph "CFG forokio.Buffer.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0034 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r2 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x001d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r2 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long \l0x000a: CMP_L  (r0 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r5 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r0 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long \l0x0013: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IGET  (r6 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: INVOKE  (r5 I:okio.Buffer), (r4 I:okio.Buffer), (r6 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: RETURN  (r6 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001f: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r6 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0036: CONST_STR  (r6 I:java.lang.String) =  \"sink == null\" \l0x0038: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.read((r4 'this' I:okio.Buffer A[IMMUTABLE_TYPE, THIS]), (r5 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

