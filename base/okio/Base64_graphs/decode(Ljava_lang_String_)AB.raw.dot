digraph "CFG forokio.Base64.decode(Ljava\/lang\/String;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r14 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0006: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0008: CONST  (r3 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x000a: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0024 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: ARITH  (r5 I:int) = (r0 I:int) + (\-1 int) \l0x0010: INVOKE  (r5 I:char) = (r14 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0014: CONST  (r6 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CAST  (r5 I:long) = (long) (r0 I:int) \l0x0025: CONST  (r7 I:?[long, double]) = (6 ?[long, double]) \l0x0027: ARITH  (r5 I:long) = (r5 I:long) * (r7 I:long) \l0x0029: CONST  (r7 I:?[long, double]) = (8 ?[long, double]) \l0x002b: ARITH  (r5 I:long) = (r5 I:long) \/ (r7 I:long) \l0x002c: CAST  (r5 I:int) = (int) (r5 I:long) \l0x002d: NEW_ARRAY  (r5 I:byte[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x002f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0031: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: IF  (r7 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:51:0x009e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: INVOKE  (r12 I:char) = (r14 I:java.lang.String), (r7 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x003b: CONST  (r13 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IF  (r12 I:?[int, byte, short, char]) \< (r13 I:?[int, byte, short, char])  \-\> B:19:0x0046 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: CONST  (r13 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: IF  (r12 I:?[int, byte, short, char]) \> (r13 I:?[int, byte, short, char])  \-\> B:19:0x0046 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: ARITH  (r12 I:int) = (r12 I:int) + (\-65 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: CONST  (r13 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|0x0048: IF  (r12 I:?[int, byte, short, char]) \< (r13 I:?[int, byte, short, char])  \-\> B:24:0x0051 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|0x004c: IF  (r12 I:?[int, byte, short, char]) \> (r13 I:?[int, byte, short, char])  \-\> B:24:0x0051 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|0x004e: ARITH  (r12 I:int) = (r12 I:int) + (\-71 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: CONST  (r13 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0053|0x0053: IF  (r12 I:?[int, byte, short, char]) \< (r13 I:?[int, byte, short, char])  \-\> B:29:0x005c \l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: CONST  (r13 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0057|0x0057: IF  (r12 I:?[int, byte, short, char]) \> (r13 I:?[int, byte, short, char])  \-\> B:29:0x005c \l}"];
Node_28 [shape=record,label="{28\:\ 0x0059|0x0059: ARITH  (r12 I:int) = (r12 I:int) + (4 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x005c|0x005c: CONST  (r13 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|0x005e: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x007b \l}"];
Node_31 [shape=record,label="{31\:\ 0x0060|0x0060: CONST  (r13 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0062|0x0062: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0065 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0065|0x0065: CONST  (r13 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0067|0x0067: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0078 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0069|0x0069: CONST  (r13 I:?[int, float, short, byte, char]) = (95 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x006b|0x006b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x006e \l}"];
Node_39 [shape=record,label="{39\:\ 0x006e|0x006e: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x009b \l}"];
Node_40 [shape=record,label="{40\:\ 0x0070|0x0070: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x009b \l}"];
Node_41 [shape=record,label="{41\:\ 0x0072|0x0072: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x009b \l}"];
Node_42 [shape=record,label="{42\:\ 0x0074|0x0074: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0077 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0077|0x0077: RETURN  (r11 I:byte[]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0078|0x0078: CONST  (r12 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x007b|0x007b: CONST  (r12 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x007d|0x007d: ARITH  (r9 I:int) = (r9 I:int) \<\< (6 int) \l0x007f: CAST  (r11 I:byte) = (byte) (r12 I:int) \l0x0080: ARITH  (r9 I:?[int, boolean, short, byte, char]) = (r9 I:?[int, boolean, short, byte, char]) \| (r11 I:?[int, boolean, short, byte, char]) \l0x0081: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0083: ARITH  (r11 I:int) = (r8 I:int) % (4 int) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0085|0x0085: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x009b \l}"];
Node_49 [shape=record,label="{49\:\ 0x0087|0x0087: ARITH  (r11 I:int) = (r10 I:int) + (1 int) \l0x0089: ARITH  (r12 I:int) = (r9 I:int) \>\> (16 int) \l0x008b: CAST  (r12 I:byte) = (byte) (r12 I:int) \l0x008c: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r12 I:byte A[IMMUTABLE_TYPE])\l \l0x008e: ARITH  (r10 I:int) = (r11 I:int) + (1 int) \l0x0090: ARITH  (r12 I:int) = (r9 I:int) \>\> (8 int) \l0x0092: CAST  (r12 I:byte) = (byte) (r12 I:int) \l0x0093: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r11 I:?[int, short, byte, char])\l  (r12 I:byte A[IMMUTABLE_TYPE])\l \l0x0095: ARITH  (r11 I:int) = (r10 I:int) + (1 int) \l0x0097: CAST  (r12 I:byte) = (byte) (r9 I:int) \l0x0098: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r12 I:byte A[IMMUTABLE_TYPE])\l \l0x009a: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x009b|0x009b: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_51 [shape=record,label="{51\:\ 0x009e|0x009e: ARITH  (r8 I:int) = (r8 I:int) % (4 int) \l0x00a0: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00a1|0x00a1: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00a4 \l}"];
Node_53 [shape=record,label="{53\:\ 0x00a3|0x00a3: RETURN  (r11 I:byte[]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x00a4|0x00a4: CONST  (r14 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x00a5|0x00a5: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x00b2 \l}"];
Node_56 [shape=record,label="{56\:\ 0x00a7|0x00a7: ARITH  (r14 I:int) = (r9 I:int) \<\< (12 int) \l0x00a9: ARITH  (r0 I:int) = (r10 I:int) + (1 int) \l0x00ab: ARITH  (r14 I:int) = (r14 I:int) \>\> (16 int) \l0x00ad: CAST  (r14 I:byte) = (byte) (r14 I:int) \l0x00ae: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r14 I:byte A[IMMUTABLE_TYPE])\l \l0x00b0: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_57 [shape=record,label="{57\:\ 0x00b2|0x00b2: CONST  (r14 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x00b3|0x00b3: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x00c5 \l}"];
Node_59 [shape=record,label="{59\:\ 0x00b5|0x00b5: ARITH  (r14 I:int) = (r9 I:int) \<\< (6 int) \l0x00b7: ARITH  (r0 I:int) = (r10 I:int) + (1 int) \l0x00b9: ARITH  (r1 I:int) = (r14 I:int) \>\> (16 int) \l0x00bb: CAST  (r1 I:byte) = (byte) (r1 I:int) \l0x00bc: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x00be: ARITH  (r10 I:int) = (r0 I:int) + (1 int) \l0x00c0: ARITH  (r14 I:int) = (r14 I:int) \>\> (8 int) \l0x00c2: CAST  (r14 I:byte) = (byte) (r14 I:int) \l0x00c3: APUT  \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r14 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_60 [shape=record,label="{60\:\ 0x00c5|0x00c5: ARRAY_LENGTH  (r14 I:int) = (r5 I:?[]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x00c6|0x00c6: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x00c9 \l}"];
Node_62 [shape=record,label="{62\:\ 0x00c8|0x00c8: RETURN  (r5 I:byte[]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x00c9|0x00c9: NEW_ARRAY  (r14 I:byte[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x00cb: INVOKE  \l  (r5 I:java.lang.Object)\l  (r6 I:int)\l  (r14 I:java.lang.Object)\l  (r6 I:int)\l  (r10 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_64 [shape=record,label="{64\:\ 0x00ce|0x00ce: RETURN  (r14 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] okio.Base64.decode((r14 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_51;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_47;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_47;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_47;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_46;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_46[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_45;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_45[style=dashed];
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_50;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_50;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_50;
Node_42 -> Node_44;
Node_42 -> Node_50[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_12;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_60;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_63 -> Node_64;
}

