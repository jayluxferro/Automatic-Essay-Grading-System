digraph "CFG forokio.RealBufferedSource.require(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:boolean) = (r0 I:okio.RealBufferedSource), (r1 I:long) okio.RealBufferedSource.request(long):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r1 I:java.io.EOFException) =  java.io.EOFException \l0x0009: INVOKE  (r1 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.RealBufferedSource.require((r0 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r1 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

