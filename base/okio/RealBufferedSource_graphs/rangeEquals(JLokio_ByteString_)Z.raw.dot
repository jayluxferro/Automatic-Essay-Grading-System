digraph "CFG forokio.RealBufferedSource.rangeEquals(JLokio\/ByteString;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0004: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r1 I:?[long, double]) = (r7 I:?[long, double]) \l0x0007: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r7 I:boolean) = \l  (r0 I:okio.RealBufferedSource)\l  (r1 I:long)\l  (r3 I:okio.ByteString)\l  (r4 I:int)\l  (r5 I:int)\l okio.RealBufferedSource.rangeEquals(long, okio.ByteString, int, int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN  (r7 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okio.RealBufferedSource.rangeEquals((r6 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

