digraph "CFG forokio.RealBufferedSource.readUtf8LineStrict(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:24:0x00aa \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0008: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x000d: CMP_L  (r4 I:int) = (r13 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: MOVE  (r4 I:?[long, double]) = (r2 I:?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: ARITH  (r4 I:long) = (r13 I:long) + (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: CONST  (r7 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0018: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x001a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x001b: MOVE  (r10 I:?[long, double]) = (r4 I:?[long, double]) \l0x001c: INVOKE  (r6 I:long) = \l  (r6 I:okio.RealBufferedSource)\l  (r7 I:byte)\l  (r8 I:long)\l  (r10 I:long)\l okio.RealBufferedSource.indexOf(byte, long, long):long type: VIRTUAL \l0x0020: CONST  (r8 I:?[long, double]) = (\-1 ?[long, double]) \l0x0022: CMP_L  (r8 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IGET  (r13 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0028: INVOKE  (r13 I:java.lang.String) = (r13 I:okio.Buffer), (r6 I:long) okio.Buffer.readUtf8Line(long):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: RETURN  (r13 I:java.lang.String) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: CMP_L  (r2 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: INVOKE  (r2 I:boolean) = (r12 I:okio.RealBufferedSource), (r4 I:long) okio.RealBufferedSource.request(long):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: IGET  (r2 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0039: ARITH  (r6 I:long) = (r4 I:long) \- (r0 I:long) \l0x003b: INVOKE  (r2 I:byte) = (r2 I:okio.Buffer), (r6 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x003f: CONST  (r3 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: ARITH  (r0 I:long) = (r0 I:long) + (r4 I:long) \l0x0044: INVOKE  (r0 I:boolean) = (r12 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.request(long):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: IGET  (r0 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x004c: INVOKE  (r0 I:byte) = (r0 I:okio.Buffer), (r4 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0050: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: IGET  (r13 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0056: INVOKE  (r13 I:java.lang.String) = (r13 I:okio.Buffer), (r4 I:long) okio.Buffer.readUtf8Line(long):java.lang.String type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|0x005a: RETURN  (r13 I:java.lang.String) \l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|0x005b: NEW_INSTANCE  (r6 I:okio.Buffer) =  okio.Buffer \l0x005d: INVOKE  (r6 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0060: IGET  (r0 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0062: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0064: CONST  (r4 I:?[long, double]) = (32 ?[long, double]) \l0x0066: IGET  (r1 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0068: INVOKE  (r7 I:long) = (r1 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x006c: INVOKE  (r4 I:long) = (r4 I:long), (r7 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0070: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0071: INVOKE  \l  (r0 I:okio.Buffer)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.Buffer.copyTo(okio.Buffer, long, long):okio.Buffer type: VIRTUAL \l0x0074: NEW_INSTANCE  (r0 I:java.io.EOFException) =  java.io.EOFException \l0x0076: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0078: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007b: CONST_STR  (r2 I:java.lang.String) =  \"n not found: limit=\" \l0x007d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0080: IGET  (r2 I:okio.Buffer) = (r12 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0082: INVOKE  (r2 I:long) = (r2 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0086: INVOKE  (r13 I:long) = (r2 I:long), (r13 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x008a: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x008d: CONST_STR  (r13 I:java.lang.String) =  \" content=\" \l0x008f: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0092: INVOKE  (r13 I:okio.ByteString) = (r6 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x0096: INVOKE  (r13 I:java.lang.String) = (r13 I:okio.ByteString) okio.ByteString.hex():java.lang.String type: VIRTUAL \l0x009a: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009d: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (8230(0x2026, float:1.1533E\-41) ?[int, float, short, byte, char])\l \l0x009f: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x00a2: INVOKE  (r13 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a6: INVOKE  (r0 I:java.io.EOFException), (r13 I:java.lang.String) java.io.EOFException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a9|0x00a9: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00aa|0x00aa: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00ac: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00ae: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00b1: CONST_STR  (r2 I:java.lang.String) =  \"limit \< 0: \" \l0x00b3: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b6: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x00b9: INVOKE  (r13 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00bd: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r13 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c0|0x00c0: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okio.RealBufferedSource.readUtf8LineStrict((r12 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

