digraph "CFG forokio.RealBufferedSource.readUtf8LineStrict(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1)) \< 0) goto L_0x00aa\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if ((r13 \> kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 1 : (r13 == kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 0 : \-1)) != 0) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|r4 = Long.MAX_VALUE\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|long r4 = r13 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|PHI: r4 \l  PHI: (r4v1 long) = (r4v5 long), (r4v6 long) binds: [B:5:0x0013, B:4:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|long r6 = indexOf((byte) 10, 0, r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if ((r6 \> \-1 ? 1 : (r6 == \-1 ? 0 : \-1)) == 0) goto L_0x002d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026}"];
Node_9 [shape=record,label="{9\:\ 0x002c|RETURN\l|return r12.buffer.readUtf8Line(r6)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if ((r4 \> kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 1 : (r4 == kotlin.jvm.internal.LongCompanionObject.MAX_VALUE ? 0 : \-1)) \>= 0) goto L_0x005b\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031}"];
Node_13 [shape=record,label="{13\:\ 0x0035|if (request(r4) == false) goto L_0x005b\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037}"];
Node_15 [shape=record,label="{15\:\ 0x0041|if (r12.buffer.getByte(r4 \- 1) != 13) goto L_0x005b\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043}"];
Node_17 [shape=record,label="{17\:\ 0x0048|if (request(1 + r4) == false) goto L_0x005b\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a}"];
Node_19 [shape=record,label="{19\:\ 0x0052|if (r12.buffer.getByte(r4) != 10) goto L_0x005b\l}"];
Node_20 [shape=record,label="{20\:\ 0x0054}"];
Node_21 [shape=record,label="{21\:\ 0x005a|RETURN\l|return r12.buffer.readUtf8Line(r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|okio.Buffer r6 = new okio.Buffer()\lr1 = r6\lr12.buffer.copyTo(r1, 0, java.lang.Math.min(32, r12.buffer.size()))\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"n not found: limit=\")\lr1.append(java.lang.Math.min(r12.buffer.size(), r13))\lr1.append(\" content=\")\lr1.append(r6.readByteString().hex())\lr1.append(kotlin.text.Typography.ellipsis)\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a9|throw new java.io.EOFException(r1.toString())\l}"];
Node_24 [shape=record,label="{24\:\ 0x00aa|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"limit \< 0: \")\lr1.append(r13)\l}"];
Node_25 [shape=record,label="{25\:\ 0x00c0|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public java.lang.String okio.RealBufferedSource.readUtf8LineStrict((r12v0 'this' okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r13v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

