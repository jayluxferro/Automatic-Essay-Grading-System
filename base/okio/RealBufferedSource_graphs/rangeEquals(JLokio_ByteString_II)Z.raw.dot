digraph "CFG forokio.RealBufferedSource.rangeEquals(JLokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r7 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CMP_L  (r0 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x003a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r11 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r12 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x003a \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r0 I:int) = (r10 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0013: ARITH  (r0 I:int) = (r0 I:int) \- (r11 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r0 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IF  (r0 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: CAST  (r3 I:long) = (long) (r0 I:int) \l0x001b: ARITH  (r3 I:long) = (r3 I:long) + (r8 I:long) \l0x001c: CONST  (r5 I:?[long, double]) = (1 ?[long, double]) \l0x001e: ARITH  (r5 I:long) = (r5 I:long) + (r3 I:long) \l0x001f: INVOKE  (r1 I:boolean) = (r7 I:okio.RealBufferedSource), (r5 I:long) okio.RealBufferedSource.request(long):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0026 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: RETURN  (r2 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: IGET  (r1 I:okio.Buffer) = (r7 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0028: INVOKE  (r1 I:byte) = (r1 I:okio.Buffer), (r3 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x002c: ARITH  (r3 I:int) = (r11 I:int) + (r0 I:int) \l0x002e: INVOKE  (r3 I:byte) = (r10 I:okio.ByteString), (r3 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0035 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: RETURN  (r2 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: RETURN  (r8 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003a|0x003a: RETURN  (r2 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003b|0x003b: NEW_INSTANCE  (r8 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x003d: CONST_STR  (r9 I:java.lang.String) =  \"closed\" \l0x003f: INVOKE  \l  (r8 I:java.lang.IllegalStateException)\l  (r9 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean okio.RealBufferedSource.rangeEquals((r7 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_20[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_10;
Node_18 -> Node_19;
Node_21 -> Node_22;
}

