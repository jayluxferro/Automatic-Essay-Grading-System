digraph "CFG forokio.RealBufferedSource.select(Lokio\/Options;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0006: INVOKE  (r0 I:int) = (r0 I:okio.Buffer), (r7 I:okio.Options) okio.Buffer.selectPrefix(okio.Options):int type: VIRTUAL \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r2 I:okio.ByteString[]) = (r7 I:okio.Options) okio.Options.byteStrings okio.ByteString[] \l0x0010: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0012: INVOKE  (r2 I:int) = (r2 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0016: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0017: IGET  (r4 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0019: IGET  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long \l0x001b: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r7 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0021: INVOKE  (r7 I:okio.Buffer), (r2 I:long) okio.Buffer.skip(long):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IGET  (r0 I:okio.Source) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0027: IGET  (r2 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0029: CONST  (r3 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x002b: INVOKE  (r2 I:long) = (r0 I:okio.Source), (r2 I:okio.Buffer), (r3 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x002f: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l0x0031: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0004 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: RETURN  (r1 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0038: CONST_STR  (r0 I:java.lang.String) =  \"closed\" \l0x003a: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int okio.RealBufferedSource.select((r6 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_11[style=dashed];
Node_12 -> Node_13;
}

