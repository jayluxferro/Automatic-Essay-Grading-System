digraph "CFG forokio.RealBufferedSource.readUtf8CodePoint()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0002: INVOKE  (r3 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL \l0x0005: IGET  (r0 I:okio.Buffer) = (r3 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0007: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0009: INVOKE  (r0 I:byte) = (r0 I:okio.Buffer), (r1 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x000d: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (224(0xe0, float:3.14E\-43) ?[int, float, short, byte, char]) \l0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: CONST  (r0 I:?[long, double]) = (2 ?[long, double]) \l0x0015: INVOKE  (r3 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (224(0xe0, float:3.14E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: CONST  (r0 I:?[long, double]) = (3 ?[long, double]) \l0x0021: INVOKE  (r3 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (248(0xf8, float:3.48E\-43) ?[int, float, short, byte, char]) \l0x0027: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: CONST  (r0 I:?[long, double]) = (4 ?[long, double]) \l0x002d: INVOKE  (r3 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IGET  (r0 I:okio.Buffer) = (r3 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0032: INVOKE  (r0 I:int) = (r0 I:okio.Buffer) okio.Buffer.readUtf8CodePoint():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.RealBufferedSource.readUtf8CodePoint((r3 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

