digraph "CFG forokio.RealBufferedSource.readUtf8Line()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:long) = (r4 I:okio.RealBufferedSource), (r0 I:byte) okio.RealBufferedSource.indexOf(byte):long type: VIRTUAL \l0x0006: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0008: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r0 I:okio.Buffer) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x000e: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0010: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0012: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r0 I:okio.Buffer) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0018: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x001a: INVOKE  (r0 I:java.lang.String) = (r4 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.readUtf8(long):java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN  (r0 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IGET  (r2 I:okio.Buffer) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0023: INVOKE  (r0 I:java.lang.String) = (r2 I:okio.Buffer), (r0 I:long) okio.Buffer.readUtf8Line(long):java.lang.String type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String okio.RealBufferedSource.readUtf8Line((r4 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

