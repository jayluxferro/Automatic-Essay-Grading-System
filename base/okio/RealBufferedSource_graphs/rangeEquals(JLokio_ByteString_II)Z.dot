digraph "CFG forokio.RealBufferedSource.rangeEquals(JLokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7.closed != false) goto L_0x003b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \< 0) goto L_0x003a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r11 \< 0) goto L_0x003a\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r12 \< 0) goto L_0x003a\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if ((r10.size() \- r11) \>= r12) goto L_0x0017\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|r0 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|LOOP_START\lPHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v7 int) binds: [B:8:0x0017, B:16:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0018\-\>B:16:0x0035\l|if (r0 \>= r12) goto L_0x0038\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|long r3 = ((long) r0) + r8\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|if (request(1 + r3) != false) goto L_0x0026\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026}"];
Node_14 [shape=record,label="{14\:\ 0x0032|if (r7.buffer.getByte(r3) == r10.getByte(r11 + r0)) goto L_0x0035\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|LOOP_END\lLOOP:0: B:9:0x0018\-\>B:16:0x0035\l|int r0 = r0 + 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|RETURN\l|return true\l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|RETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ 0x003b}"];
Node_20 [shape=record,label="{20\:\ 0x0042|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean okio.RealBufferedSource.rangeEquals((r7v0 'this' okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_18[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_22[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_21[style=dashed];
Node_16 -> Node_9;
Node_19 -> Node_20;
Node_21 -> Node_15;
Node_22 -> Node_12;
Node_23 -> Node_17;
}

