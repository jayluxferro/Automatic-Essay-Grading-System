digraph "CFG forokio.RealBufferedSource.readString(Ljava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:okio.Buffer) = (r2 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0004: IGET  (r1 I:okio.Source) = (r2 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0006: INVOKE  (r0 I:okio.Buffer), (r1 I:okio.Source) okio.Buffer.writeAll(okio.Source):long type: VIRTUAL \l0x0009: IGET  (r0 I:okio.Buffer) = (r2 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x000b: INVOKE  (r3 I:java.lang.String) = (r0 I:okio.Buffer), (r3 I:java.nio.charset.Charset) okio.Buffer.readString(java.nio.charset.Charset):java.lang.String type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r3 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0012: CONST_STR  (r0 I:java.lang.String) =  \"charset == null\" \l0x0014: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okio.RealBufferedSource.readString((r2 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r3 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

