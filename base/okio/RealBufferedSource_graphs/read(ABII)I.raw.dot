digraph "CFG forokio.RealBufferedSource.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r10 I:?[]) \l0x0001: CAST  (r1 I:long) = (long) (r0 I:int) \l0x0002: CAST  (r3 I:long) = (long) (r11 I:int) \l0x0003: CAST  (r7 I:long) = (long) (r12 I:int) \l0x0004: MOVE  (r5 I:?[long, double]) = (r7 I:?[long, double]) \l0x0005: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0008: IGET  (r12 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x000a: IGET  (r0 I:long) = (r12 I:okio.Buffer) okio.Buffer.size long \l0x000c: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r12 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r12 I:okio.Source) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0014: IGET  (r0 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0016: CONST  (r1 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0018: INVOKE  (r0 I:long) = (r12 I:okio.Source), (r0 I:okio.Buffer), (r1 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x001c: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x001e: CMP_L  (r12 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CONST  (r10 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: RETURN  (r10 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IGET  (r12 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0026: IGET  (r0 I:long) = (r12 I:okio.Buffer) okio.Buffer.size long \l0x0028: INVOKE  (r0 I:long) = (r7 I:long), (r0 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x002c: CAST  (r12 I:int) = (int) (r0 I:long) \l0x002d: IGET  (r0 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x002f: INVOKE  (r10 I:int) = \l  (r0 I:okio.Buffer)\l  (r10 I:byte[])\l  (r11 I:int)\l  (r12 I:int)\l okio.Buffer.read(byte[], int, int):int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: RETURN  (r10 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.RealBufferedSource.read((r9 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

