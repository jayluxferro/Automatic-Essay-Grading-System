digraph "CFG forokio.RealBufferedSource.indexOfElement(Lokio\/ByteString;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0006: INVOKE  (r0 I:long) = (r0 I:okio.Buffer), (r9 I:okio.ByteString), (r10 I:long) okio.Buffer.indexOfElement(okio.ByteString, long):long type: VIRTUAL \l0x000a: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x000c: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r0 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0013: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0015: IGET  (r4 I:okio.Source) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0017: IGET  (r5 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0019: CONST  (r6 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x001b: INVOKE  (r4 I:long) = (r4 I:okio.Source), (r5 I:okio.Buffer), (r6 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x001f: CMP_L  (r4 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: RETURN  (r2 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  (r10 I:long) = (r10 I:long), (r0 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: NEW_INSTANCE  (r9 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002b: CONST_STR  (r10 I:java.lang.String) =  \"closed\" \l0x002d: INVOKE  \l  (r9 I:java.lang.IllegalStateException)\l  (r10 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.RealBufferedSource.indexOfElement((r8 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r9 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_10;
}

