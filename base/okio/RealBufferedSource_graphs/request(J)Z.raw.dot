digraph "CFG forokio.RealBufferedSource.request(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r5 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:okio.Buffer) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x000c: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x000e: CMP_L  (r0 I:int) = (r0 I:long), (r5 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r0 I:okio.Source) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0014: IGET  (r1 I:okio.Buffer) = (r4 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0016: CONST  (r2 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0018: INVOKE  (r0 I:long) = (r0 I:okio.Source), (r1 I:okio.Buffer), (r2 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x001c: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x001e: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: RETURN  (r5 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: RETURN  (r5 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0028: CONST_STR  (r6 I:java.lang.String) =  \"closed\" \l0x002a: INVOKE  \l  (r5 I:java.lang.IllegalStateException)\l  (r6 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0030: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0032: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0035: CONST_STR  (r2 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean okio.RealBufferedSource.request((r4 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

