digraph "CFG forokio.RealBufferedSource.request(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r5 \> 0 ? 1 : (r5 == 0 ? 0 : \-1)) \< 0) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r4.closed != false) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_START\lLOOP:0: B:4:0x000a\-\>B:7:0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if ((r4.buffer.size \> r5 ? 1 : (r4.buffer.size == r5 ? 0 : \-1)) \>= 0) goto L_0x0024\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0020|LOOP_END\lLOOP:0: B:4:0x000a\-\>B:7:0x0020\l|if ((r4.source.read(r4.buffer, android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_URI) \> \-1 ? 1 : (r4.source.read(r4.buffer, android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_URI) == \-1 ? 0 : \-1)) != 0) goto L_0x000a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|RETURN\l|return true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026}"];
Node_11 [shape=record,label="{11\:\ 0x002d|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"byteCount \< 0: \")\lr1.append(r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean okio.RealBufferedSource.request((r4v0 'this' okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_14[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_8;
Node_15 -> Node_9;
}

