digraph "CFG forokio.RealBufferedSource.indexOfElement(Lokio\/ByteString;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r8.closed != false) goto L_0x0029\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|LOOP_START\lPHI: r10 \l  PHI: (r10v2 long) = (r10v0 long), (r10v3 long) binds: [B:1:0x0002, B:8:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0004\-\>B:8:0x0024\l|long r0 = r8.buffer.indexOfElement(r9, r10)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if ((r0 \> \-1 ? 1 : (r0 == \-1 ? 0 : \-1)) == 0) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|long r0 = r8.buffer.size\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|if ((r8.source.read(r8.buffer, android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_URI) \> \-1 ? 1 : (r8.source.read(r8.buffer, android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_URI) == \-1 ? 0 : \-1)) != 0) goto L_0x0024\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|RETURN\l|return \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|LOOP_END\lLOOP:0: B:2:0x0004\-\>B:8:0x0024\l|long r10 = java.lang.Math.max(r10, r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029}"];
Node_10 [shape=record,label="{10\:\ 0x0030|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public long okio.RealBufferedSource.indexOfElement((r8v0 'this' okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r9v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_12[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_2;
Node_9 -> Node_10;
Node_11 -> Node_7;
Node_12 -> Node_4;
}

