digraph "CFG forokio.RealBufferedSource.readDecimalLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (1 ?[long, double]) \l0x0002: INVOKE  (r6 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0009: CAST  (r3 I:long) = (long) (r2 I:int) \l0x000a: INVOKE  (r3 I:boolean) = (r6 I:okio.RealBufferedSource), (r3 I:long) okio.RealBufferedSource.request(long):boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0040 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r3 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0012: CAST  (r4 I:long) = (long) (r1 I:int) \l0x0013: INVOKE  (r3 I:byte) = (r3 I:okio.Buffer), (r4 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0017: CONST  (r4 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r3 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: CONST  (r4 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: NEW_INSTANCE  (r1 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x002d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002e: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0030: INVOKE  (r3 I:java.lang.Byte) = (r3 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x0034: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0036: CONST_STR  (r0 I:java.lang.String) =  \"Expected leading [0\-9] or '\-' character but was %#x\" \l0x0038: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r2 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x003c: INVOKE  \l  (r1 I:java.lang.NumberFormatException)\l  (r0 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: IGET  (r0 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0042: INVOKE  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.readDecimalLong():long type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long okio.RealBufferedSource.readDecimalLong((r6 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_1;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
}

