digraph "CFG forokio.RealBufferedSource.indexOf(BJJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_L  (r0 I:int) = (r11 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:19:0x0040 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CMP_L  (r0 I:int) = (r13 I:long), (r11 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:19:0x0040 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: CONST  (r7 I:?[long, double]) = (\-1 ?[long, double]) \l0x0010: CMP_L  (r0 I:int) = (r11 I:long), (r13 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IGET  (r1 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0016: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: MOVE  (r3 I:?[long, double]) = (r11 I:?[long, double]) \l0x0018: MOVE  (r5 I:?[long, double]) = (r13 I:?[long, double]) \l0x0019: INVOKE  (r0 I:long) = (r1 I:okio.Buffer), (r2 I:byte), (r3 I:long), (r5 I:long) okio.Buffer.indexOf(byte, long, long):long type: VIRTUAL \l0x001d: CMP_L  (r2 I:int) = (r0 I:long), (r7 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0022 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN  (r0 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IGET  (r0 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0024: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0026: CMP_L  (r2 I:int) = (r0 I:long), (r13 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IGET  (r2 I:okio.Source) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x002c: IGET  (r3 I:okio.Buffer) = (r9 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x002e: CONST  (r4 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0030: INVOKE  (r2 I:long) = (r2 I:okio.Source), (r3 I:okio.Buffer), (r4 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x0034: CMP_L  (r2 I:int) = (r2 I:long), (r7 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: INVOKE  (r11 I:long) = (r11 I:long), (r0 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: RETURN  (r7 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: RETURN  (r7 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: NEW_INSTANCE  (r10 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0042: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0043: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0045: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0046: INVOKE  (r11 I:java.lang.Long) = (r11 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x004a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x004c: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004d: INVOKE  (r12 I:java.lang.Long) = (r13 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0051: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l \l0x0053: CONST_STR  (r11 I:java.lang.String) =  \"fromIndex=%s toIndex=%s\" \l0x0055: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.String), (r0 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0059: INVOKE  \l  (r10 I:java.lang.IllegalArgumentException)\l  (r11 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x005c|0x005c: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: NEW_INSTANCE  (r10 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x005f: CONST_STR  (r11 I:java.lang.String) =  \"closed\" \l0x0061: INVOKE  \l  (r10 I:java.lang.IllegalStateException)\l  (r11 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0064|0x0064: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.RealBufferedSource.indexOf((r9 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r10 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_6;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

