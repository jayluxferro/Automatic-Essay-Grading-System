digraph "CFG forokio.RealBufferedSource.readAll(Lokio\/Sink;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0043 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0004: MOVE  (r2 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r4 I:okio.Source) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x0007: IGET  (r5 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0009: CONST  (r6 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x000b: INVOKE  (r4 I:long) = (r4 I:okio.Source), (r5 I:okio.Buffer), (r6 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x000f: CONST  (r6 I:?[long, double]) = (\-1 ?[long, double]) \l0x0011: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IGET  (r4 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0017: INVOKE  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.completeSegmentByteCount():long type: VIRTUAL \l0x001b: CMP_L  (r6 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:2:0x0005 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0020: IGET  (r6 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0022: INVOKE  (r9 I:okio.Sink), (r6 I:okio.Buffer), (r4 I:long) okio.Sink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r4 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0028: INVOKE  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x002c: CMP_L  (r0 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0042 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IGET  (r0 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0032: INVOKE  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0036: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l0x0037: IGET  (r0 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0039: IGET  (r1 I:okio.Buffer) = (r8 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x003b: INVOKE  (r4 I:long) = (r1 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x003f: INVOKE  (r9 I:okio.Sink), (r0 I:okio.Buffer), (r4 I:long) okio.Sink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: RETURN  (r2 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: NEW_INSTANCE  (r9 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0045: CONST_STR  (r0 I:java.lang.String) =  \"sink == null\" \l0x0047: INVOKE  \l  (r9 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.RealBufferedSource.readAll((r8 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r9 I:okio.Sink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

