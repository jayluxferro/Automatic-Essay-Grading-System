digraph "CFG forokio.RealBufferedSource.readFully([B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) A[Catch:\{ EOFException \-\> 0x000b \}, TRY_ENTER]\l0x0001: CAST  (r0 I:long) = (long) (r0 I:int) A[Catch:\{ EOFException \-\> 0x000b \}]\l0x0002: INVOKE  (r6 I:okio.RealBufferedSource), (r0 I:long) okio.RealBufferedSource.require(long):void type: VIRTUAL A[Catch:\{ EOFException \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0007: INVOKE  (r0 I:okio.Buffer), (r7 I:byte[]) okio.Buffer.readFully(byte[]):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|ExcHandler: EOFException null\lSplitter:B:0:0x0000\l|0x000b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r2 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x000f: IGET  (r2 I:long) = (r2 I:okio.Buffer) okio.Buffer.size long \l0x0011: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0013: CMP_L  (r2 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r2 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0019: IGET  (r3 I:okio.Buffer) = (r6 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x001b: IGET  (r3 I:long) = (r3 I:okio.Buffer) okio.Buffer.size long \l0x001d: CAST  (r3 I:int) = (int) (r3 I:long) \l0x001e: INVOKE  (r2 I:int) = (r2 I:okio.Buffer), (r7 I:byte[]), (r1 I:int), (r3 I:int) okio.Buffer.read(byte[], int, int):int type: VIRTUAL \l0x0022: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: NEW_INSTANCE  (r7 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0029: INVOKE  (r7 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.RealBufferedSource.readFully((r6 'this' I:okio.RealBufferedSource A[IMMUTABLE_TYPE, THIS]), (r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_6;
Node_11 -> Node_12;
}

