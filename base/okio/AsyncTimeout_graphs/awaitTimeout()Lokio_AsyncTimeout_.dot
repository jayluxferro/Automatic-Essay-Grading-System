digraph "CFG forokio.AsyncTimeout.awaitTimeout()Lokio\/AsyncTimeout;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.AsyncTimeout r0 = head.next\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 != null) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|long r2 = java.lang.System.nanoTime()\lokio.AsyncTimeout.class.wait(IDLE_TIMEOUT_MILLIS)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if (head.next != null) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018}"];
Node_5 [shape=record,label="{5\:\ 0x0021|if (((java.lang.System.nanoTime() \- r2) \> IDLE_TIMEOUT_NANOS ? 1 : ((java.lang.System.nanoTime() \- r2) == IDLE_TIMEOUT_NANOS ? 0 : \-1)) \< 0) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023}"];
Node_7 [shape=record,label="{7\:\ 0x0026|long r2 = r0.remainingNanos(java.lang.System.nanoTime())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|if ((r2 \> 0 ? 1 : (r2 == 0 ? 0 : \-1)) \<= 0) goto L_0x0043\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|long r6 = r2 \/ 1000000\lokio.AsyncTimeout.class.wait(r6, (int) (r2 \- (1000000 * r6)))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|okio.AsyncTimeout r2 = head\lr2.next = r0.next\lr0.next = null\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|RETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return head\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{static okio.AsyncTimeout okio.AsyncTimeout.awaitTimeout()  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

