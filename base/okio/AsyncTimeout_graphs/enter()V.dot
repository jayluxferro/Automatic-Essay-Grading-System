digraph "CFG forokio.AsyncTimeout.enter()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.inQueue != false) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|long r0 = timeoutNanos()\lboolean r2 = hasDeadline()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if ((r0 \> 0 ? 1 : (r0 == 0 ? 0 : \-1)) != 0) goto L_0x0015\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r2 != false) goto L_0x0015\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|r5.inQueue = true\lscheduleTimeout(r5, r0, r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c}"];
Node_9 [shape=record,label="{9\:\ 0x0023|throw new java.lang.IllegalStateException(\"Unbalanced enter\/exit\")\l}"];
MethodNode[shape=record,label="{public final void okio.AsyncTimeout.enter((r5v0 'this' okio.AsyncTimeout A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

