digraph "CFG forokio.AsyncTimeout.awaitTimeout()Lokio\/AsyncTimeout;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout \l0x0002: IGET  (r0 I:okio.AsyncTimeout) = (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x000b: CONST_CLASS  (r0 I:java.lang.Class\<okio.AsyncTimeout\>) =  okio.AsyncTimeout.class \l0x000d: SGET  (r4 I:long) =  okio.AsyncTimeout.IDLE_TIMEOUT_MILLIS long \l0x000f: INVOKE  (r0 I:java.lang.Object), (r4 I:long) java.lang.Object.wait(long):void type: VIRTUAL \l0x0012: SGET  (r0 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout \l0x0014: IGET  (r0 I:okio.AsyncTimeout) = (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INVOKE  (r4 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x001c: ARITH  (r4 I:long) = (r4 I:long) \- (r2 I:long) \l0x001d: SGET  (r2 I:long) =  okio.AsyncTimeout.IDLE_TIMEOUT_NANOS long \l0x001f: CMP_L  (r0 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: SGET  (r1 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r1 I:okio.AsyncTimeout) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: INVOKE  (r2 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x002a: INVOKE  (r2 I:long) = (r0 I:okio.AsyncTimeout), (r2 I:long) okio.AsyncTimeout.remainingNanos(long):long type: DIRECT \l0x002e: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0030: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0043 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: CONST  (r4 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x0037: ARITH  (r6 I:long) = (r2 I:long) \/ (r4 I:long) \l0x0039: ARITH  (r4 I:long) = (r4 I:long) * (r6 I:long) \l0x003b: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x003c: CONST_CLASS  (r0 I:java.lang.Class\<okio.AsyncTimeout\>) =  okio.AsyncTimeout.class \l0x003e: CAST  (r2 I:int) = (int) (r2 I:long) \l0x003f: INVOKE  (r0 I:java.lang.Object), (r6 I:long), (r2 I:int) java.lang.Object.wait(long, int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: RETURN  (r1 I:okio.AsyncTimeout) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: SGET  (r2 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout \l0x0045: IGET  (r3 I:okio.AsyncTimeout) = (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout \l0x0047: IPUT  (r3 I:okio.AsyncTimeout), (r2 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout \l0x0049: IPUT  (r1 I:okio.AsyncTimeout), (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: RETURN  (r0 I:okio.AsyncTimeout) \l}"];
MethodNode[shape=record,label="{static okio.AsyncTimeout okio.AsyncTimeout.awaitTimeout()  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}], Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

