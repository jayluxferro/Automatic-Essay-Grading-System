digraph "CFG forokio.AsyncTimeout.enter()V" {
subgraph cluster_Region_1839854895 {
label = "R(1:(2:(2:2|(2:(2:6|7)|(1:5)))|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_2023209503 {
label = "R(2:(2:2|(2:(2:6|7)|(1:5)))|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1590168170 {
label = "IF [B:1:0x0002] THEN: R(2:2|(2:(2:6|7)|(1:5))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.inQueue == false) goto L_0x0004\l}"];
subgraph cluster_Region_1774746474 {
label = "R(2:2|(2:(2:6|7)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|long long r0 = timeoutNanos()\lboolean boolean r2 = hasDeadline()\l}"];
subgraph cluster_Region_1997282922 {
label = "R(2:(2:6|7)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1318386060 {
label = "IF [B:3:0x0010, B:4:0x0012] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r0 != 0) goto L_0x0015\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|ADDED_TO_REGION\l|if (r2 == true) goto L_0x0015\l}"];
subgraph cluster_Region_857145266 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0015|r5.inQueue = true\lscheduleTimeout(r5, r0, r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1437506857 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|return\l}"];
}
}
}
}
subgraph cluster_Region_271352513 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0023|throw new java.lang.IllegalStateException(\"Unbalanced enter\/exit\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c}"];
MethodNode[shape=record,label="{public final void okio.AsyncTimeout.enter((r5v0 'this' okio.AsyncTimeout A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_8 -> Node_9;
}

