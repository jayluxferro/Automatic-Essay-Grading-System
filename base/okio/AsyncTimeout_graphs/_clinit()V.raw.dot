digraph "CFG forokio.AsyncTimeout.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x0002: CONST  (r1 I:?[long, double]) = (60 ?[long, double]) \l0x0004: INVOKE  (r0 I:long) = (r0 I:java.util.concurrent.TimeUnit), (r1 I:long) java.util.concurrent.TimeUnit.toMillis(long):long type: VIRTUAL \l0x0008: SPUT  (r0 I:long) okio.AsyncTimeout.IDLE_TIMEOUT_MILLIS long \l0x000a: SGET  (r0 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x000c: SGET  (r1 I:long) =  okio.AsyncTimeout.IDLE_TIMEOUT_MILLIS long \l0x000e: INVOKE  (r0 I:long) = (r0 I:java.util.concurrent.TimeUnit), (r1 I:long) java.util.concurrent.TimeUnit.toNanos(long):long type: VIRTUAL \l0x0012: SPUT  (r0 I:long) okio.AsyncTimeout.IDLE_TIMEOUT_NANOS long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{static void okio.AsyncTimeout.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

