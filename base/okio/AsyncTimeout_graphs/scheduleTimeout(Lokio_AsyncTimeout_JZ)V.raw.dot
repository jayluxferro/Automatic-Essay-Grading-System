digraph "CFG forokio.AsyncTimeout.scheduleTimeout(Lokio\/AsyncTimeout;JZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<okio.AsyncTimeout\>) =  okio.AsyncTimeout.class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r1 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: NEW_INSTANCE  (r1 I:okio.AsyncTimeout) =  okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x0009: INVOKE  (r1 I:okio.AsyncTimeout) okio.AsyncTimeout.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x006e \}]\l0x000c: SPUT  (r1 I:okio.AsyncTimeout) okio.AsyncTimeout.head okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x000e: NEW_INSTANCE  (r1 I:okio.AsyncTimeout$Watchdog) =  okio.AsyncTimeout$Watchdog A[Catch:\{ all \-\> 0x006e \}]\l0x0010: INVOKE  (r1 I:okio.AsyncTimeout$Watchdog) okio.AsyncTimeout.Watchdog.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x006e \}]\l0x0013: INVOKE  (r1 I:okio.AsyncTimeout$Watchdog) okio.AsyncTimeout.Watchdog.start():void type: VIRTUAL A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  (r1 I:long) =  java.lang.System.nanoTime():long type: STATIC A[Catch:\{ all \-\> 0x006e \}]\l0x001a: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x006e \}]\l0x001c: CMP_L  (r3 I:int) = (r6 I:long), (r3 I:long) A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r3 I:long) = (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.deadlineNanoTime():long type: VIRTUAL A[Catch:\{ all \-\> 0x006e \}]\l0x0026: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x006e \}]\l0x0027: ARITH  (r3 I:long) = (r3 I:long) \- (r1 I:long) A[Catch:\{ all \-\> 0x006e \}]\l0x0028: INVOKE  (r6 I:long) = (r6 I:long), (r3 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x006e \}]\l0x002c: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x006e \}]\l0x002d: ARITH  (r6 I:long) = (r6 I:long) + (r1 I:long) A[Catch:\{ all \-\> 0x006e \}]\l0x002e: IPUT  (r6 I:long), (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.timeoutAt long A[Catch:\{ all \-\> 0x006e \}]\l0x0030: GOTO  \-\> 0x003f A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0037 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: ARITH  (r6 I:long) = (r6 I:long) + (r1 I:long) A[Catch:\{ all \-\> 0x006e \}]\l0x0034: IPUT  (r6 I:long), (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.timeoutAt long A[Catch:\{ all \-\> 0x006e \}]\l0x0036: GOTO  \-\> 0x003f A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0068 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: INVOKE  (r6 I:long) = (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.deadlineNanoTime():long type: VIRTUAL A[Catch:\{ all \-\> 0x006e \}]\l0x003d: IPUT  (r6 I:long), (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.timeoutAt long A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: INVOKE  (r6 I:long) = (r5 I:okio.AsyncTimeout), (r1 I:long) okio.AsyncTimeout.remainingNanos(long):long type: DIRECT A[Catch:\{ all \-\> 0x006e \}]\l0x0043: SGET  (r8 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: IGET  (r3 I:okio.AsyncTimeout) = (r8 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0057 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: IGET  (r3 I:okio.AsyncTimeout) = (r8 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x004b: INVOKE  (r3 I:long) = (r3 I:okio.AsyncTimeout), (r1 I:long) okio.AsyncTimeout.remainingNanos(long):long type: DIRECT A[Catch:\{ all \-\> 0x006e \}]\l0x004f: CMP_L  (r3 I:int) = (r6 I:long), (r3 I:long) A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x0054 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|0x0053: GOTO  \-\> 0x0057 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: IGET  (r8 I:okio.AsyncTimeout) = (r8 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x0056: GOTO  \-\> 0x0045 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: IGET  (r6 I:okio.AsyncTimeout) = (r8 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x0059: IPUT  (r6 I:okio.AsyncTimeout), (r5 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x005b: IPUT  (r5 I:okio.AsyncTimeout), (r8 I:okio.AsyncTimeout) okio.AsyncTimeout.next okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l0x005d: SGET  (r5 I:okio.AsyncTimeout) =  okio.AsyncTimeout.head okio.AsyncTimeout A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|0x005f: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0066 A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|0x0061: CONST_CLASS  (r5 I:java.lang.Class\<okio.AsyncTimeout\>) =  okio.AsyncTimeout.class A[Catch:\{ all \-\> 0x006e \}]\l0x0063: INVOKE  (r5 I:java.lang.Object) java.lang.Object.notify():void type: VIRTUAL A[Catch:\{ all \-\> 0x006e \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0067|0x0067: RETURN   \l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|SYNTHETIC\lSplitter:B:26:0x0068\l}"];
Node_27 [shape=record,label="{27\:\ ?|Splitter:B:26:0x0068\l|0x0068: NEW_INSTANCE  (r5 I:java.lang.AssertionError) =  java.lang.AssertionError A[Catch:\{ all \-\> 0x006e \}, TRY_ENTER]\l0x006a: INVOKE  (r5 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x006e \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x006d|0x006d: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x006e \}, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x006e|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x006e: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x006f|0x006f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0070|0x0070: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static synchronized void okio.AsyncTimeout.scheduleTimeout((r5 I:okio.AsyncTimeout A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_29;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_15;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31;
}

