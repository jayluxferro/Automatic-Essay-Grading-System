digraph "CFG forokio.GzipSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:okio.GzipSink) okio.GzipSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|SYNTHETIC\lSplitter:B:4:0x0006\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0006\l|0x0006: IGET  (r1 I:okio.DeflaterSink) = (r2 I:okio.GzipSink) okio.GzipSink.deflaterSink okio.DeflaterSink A[Catch:\{ Throwable \-\> 0x000f \}, TRY_ENTER]\l0x0008: INVOKE  (r1 I:okio.DeflaterSink) okio.DeflaterSink.finishDeflate():void type: VIRTUAL A[Catch:\{ Throwable \-\> 0x000f \}]\l0x000b: INVOKE  (r2 I:okio.GzipSink) okio.GzipSink.writeFooter():void type: DIRECT A[Catch:\{ Throwable \-\> 0x000f \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|ExcHandler: Throwable null\lSplitter:B:4:0x0006\l|0x000f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|SYNTHETIC\lSplitter:B:8:0x0010\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0010\l|0x0010: IGET  (r1 I:java.util.zip.Deflater) = (r2 I:okio.GzipSink) okio.GzipSink.deflater java.util.zip.Deflater A[Catch:\{ Throwable \-\> 0x0016 \}, TRY_ENTER]\l0x0012: INVOKE  (r1 I:java.util.zip.Deflater) java.util.zip.Deflater.end():void type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0016 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|ExcHandler: Throwable null\lSplitter:B:8:0x0010\l|0x0016: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|SYNTHETIC\lSplitter:B:14:0x001a\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x001a\l|0x001a: IGET  (r1 I:okio.BufferedSink) = (r2 I:okio.GzipSink) okio.GzipSink.sink okio.BufferedSink A[Catch:\{ Throwable \-\> 0x0020 \}, TRY_ENTER]\l0x001c: INVOKE  (r1 I:okio.BufferedSink) okio.BufferedSink.close():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0020 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0020|ExcHandler: Throwable null\lSplitter:B:14:0x001a\l|0x0020: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|0x0023: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|0x0024: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0025: IPUT  (r1 I:boolean), (r2 I:okio.GzipSink) okio.GzipSink.closed boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x002c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|0x0029: INVOKE  (r0 I:java.lang.Throwable) okio.Util.sneakyRethrow(java.lang.Throwable):void type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{public void okio.GzipSink.close((r2 'this' I:okio.GzipSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_11;
Node_9 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_15 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
}

