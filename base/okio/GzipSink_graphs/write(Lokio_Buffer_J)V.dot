digraph "CFG forokio.GzipSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 \< 0) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r0 != 0) goto L_0x0009\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|updateCrc(r3, r4)\lr2.deflaterSink.write(r3, r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"byteCount \< 0: \")\lr0.append(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public void okio.GzipSink.write((r2v0 'this' okio.GzipSink A[IMMUTABLE_TYPE, THIS]), (r3v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

