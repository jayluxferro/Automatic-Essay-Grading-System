digraph "CFG forokio.SegmentPool.recycle(Lokio\/Segment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Segment) = (r7 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Segment) = (r7 I:okio.Segment) okio.Segment.prev okio.Segment \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:boolean) = (r7 I:okio.Segment) okio.Segment.shared boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: CONST_CLASS  (r0 I:java.lang.Class\<okio.SegmentPool\>) =  okio.SegmentPool.class \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|SYNTHETIC\lSplitter:B:9:0x0010\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0010\l|0x0010: SGET  (r1 I:long) =  okio.SegmentPool.byteCount long A[Catch:\{ all \-\> 0x0031 \}, TRY_ENTER]\l0x0012: CONST  (r3 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) A[Catch:\{ all \-\> 0x0031 \}]\l0x0014: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) A[Catch:\{ all \-\> 0x0031 \}]\l0x0015: CONST  (r5 I:?[long, double]) = (65536(0x10000, double:3.2379E\-319) ?[long, double]) A[Catch:\{ all \-\> 0x0031 \}]\l0x0018: CMP_L  (r1 I:int) = (r1 I:long), (r5 I:long) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x001e A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: RETURN   A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: SGET  (r1 I:long) =  okio.SegmentPool.byteCount long A[Catch:\{ all \-\> 0x0031 \}]\l0x0020: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0031 \}]\l0x0021: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) A[Catch:\{ all \-\> 0x0031 \}]\l0x0022: SPUT  (r1 I:long) okio.SegmentPool.byteCount long A[Catch:\{ all \-\> 0x0031 \}]\l0x0024: SGET  (r1 I:okio.Segment) =  okio.SegmentPool.next okio.Segment A[Catch:\{ all \-\> 0x0031 \}]\l0x0026: IPUT  (r1 I:okio.Segment), (r7 I:okio.Segment) okio.Segment.next okio.Segment A[Catch:\{ all \-\> 0x0031 \}]\l0x0028: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0031 \}]\l0x0029: IPUT  (r1 I:int), (r7 I:okio.Segment) okio.Segment.limit int A[Catch:\{ all \-\> 0x0031 \}]\l0x002b: IPUT  (r1 I:int), (r7 I:okio.Segment) okio.Segment.pos int A[Catch:\{ all \-\> 0x0031 \}]\l0x002d: SPUT  (r7 I:okio.Segment) okio.SegmentPool.next okio.Segment A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: RETURN   A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|ExcHandler: all null\lSplitter:B:9:0x0010\l|0x0031: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0036: INVOKE  (r7 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0039|0x0039: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static void okio.SegmentPool.recycle((r7 I:okio.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

