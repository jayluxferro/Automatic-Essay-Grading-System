digraph "CFG forokio.SegmentPool.take()Lokio\/Segment;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<okio.SegmentPool\>) =  okio.SegmentPool.class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r1 I:okio.Segment) =  okio.SegmentPool.next okio.Segment A[Catch:\{ all \-\> 0x0020 \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: SGET  (r1 I:okio.Segment) =  okio.SegmentPool.next okio.Segment A[Catch:\{ all \-\> 0x0020 \}]\l0x0009: IGET  (r2 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.next okio.Segment A[Catch:\{ all \-\> 0x0020 \}]\l0x000b: SPUT  (r2 I:okio.Segment) okio.SegmentPool.next okio.Segment A[Catch:\{ all \-\> 0x0020 \}]\l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0020 \}]\l0x000e: IPUT  (r2 I:okio.Segment), (r1 I:okio.Segment) okio.Segment.next okio.Segment A[Catch:\{ all \-\> 0x0020 \}]\l0x0010: SGET  (r2 I:long) =  okio.SegmentPool.byteCount long A[Catch:\{ all \-\> 0x0020 \}]\l0x0012: CONST  (r4 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) A[Catch:\{ all \-\> 0x0020 \}]\l0x0014: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) A[Catch:\{ all \-\> 0x0020 \}]\l0x0015: SPUT  (r2 I:long) okio.SegmentPool.byteCount long A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN  (r1 I:okio.Segment) A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0020 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:okio.Segment) =  okio.Segment \l0x001c: INVOKE  (r0 I:okio.Segment) okio.Segment.\<init\>():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: RETURN  (r0 I:okio.Segment) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0020: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|SYNTHETIC\lSplitter:B:12:0x0021\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0021\l|0x0021: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0020 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static okio.Segment okio.SegmentPool.take() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

