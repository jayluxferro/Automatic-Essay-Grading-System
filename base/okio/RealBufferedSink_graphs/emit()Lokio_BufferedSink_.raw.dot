digraph "CFG forokio.RealBufferedSink.emit()Lokio\/BufferedSink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Buffer) = (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer \l0x0006: INVOKE  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x000a: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000c: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r2 I:okio.Sink) = (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.sink okio.Sink \l0x0012: IGET  (r3 I:okio.Buffer) = (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer \l0x0014: INVOKE  (r2 I:okio.Sink), (r3 I:okio.Buffer), (r0 I:long) okio.Sink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r4 I:okio.BufferedSink) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001a: CONST_STR  (r1 I:java.lang.String) =  \"closed\" \l0x001c: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.BufferedSink okio.RealBufferedSink.emit((r4 'this' I:okio.RealBufferedSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

