digraph "CFG forokio.RealBufferedSink.write(Lokio\/Source;J)Lokio\/BufferedSink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:okio.Buffer) = (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer \l0x0008: INVOKE  (r0 I:long) = (r5 I:okio.Source), (r0 I:okio.Buffer), (r6 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x000c: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x000e: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: ARITH  (r6 I:long) = (r6 I:long) \- (r0 I:long) \l0x0013: INVOKE  (r4 I:okio.RealBufferedSink) okio.RealBufferedSink.emitCompleteSegments():okio.BufferedSink type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: NEW_INSTANCE  (r5 I:java.io.EOFException) =  java.io.EOFException \l0x0019: INVOKE  (r5 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r4 I:okio.BufferedSink) \l}"];
MethodNode[shape=record,label="{public okio.BufferedSink okio.RealBufferedSink.write((r4 'this' I:okio.RealBufferedSink A[IMMUTABLE_TYPE, THIS]), (r5 I:okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_0;
Node_5 -> Node_6;
}

