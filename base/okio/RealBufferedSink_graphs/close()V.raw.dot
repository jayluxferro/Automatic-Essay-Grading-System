digraph "CFG forokio.RealBufferedSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|SYNTHETIC\lSplitter:B:4:0x0006\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0006\l|0x0006: IGET  (r1 I:okio.Buffer) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer A[Catch:\{ Throwable \-\> 0x001c \}, TRY_ENTER]\l0x0008: IGET  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ Throwable \-\> 0x001c \}]\l0x000a: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ Throwable \-\> 0x001c \}]\l0x000c: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ Throwable \-\> 0x001c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x001d A[Catch:\{ Throwable \-\> 0x001c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r1 I:okio.Sink) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.sink okio.Sink A[Catch:\{ Throwable \-\> 0x001c \}]\l0x0012: IGET  (r2 I:okio.Buffer) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer A[Catch:\{ Throwable \-\> 0x001c \}]\l0x0014: IGET  (r3 I:okio.Buffer) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer A[Catch:\{ Throwable \-\> 0x001c \}]\l0x0016: IGET  (r3 I:long) = (r3 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ Throwable \-\> 0x001c \}]\l0x0018: INVOKE  (r1 I:okio.Sink), (r2 I:okio.Buffer), (r3 I:long) okio.Sink.write(okio.Buffer, long):void type: INTERFACE A[Catch:\{ Throwable \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|ExcHandler: Throwable null\lSplitter:B:4:0x0006\l|0x001c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\lSplitter:B:10:0x001d\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001d\l|0x001d: IGET  (r1 I:okio.Sink) = (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.sink okio.Sink A[Catch:\{ Throwable \-\> 0x0023 \}, TRY_ENTER]\l0x001f: INVOKE  (r1 I:okio.Sink) okio.Sink.close():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|ExcHandler: Throwable null\lSplitter:B:10:0x001d\l|0x0023: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0027 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0028: IPUT  (r1 I:boolean), (r5 I:okio.RealBufferedSink) okio.RealBufferedSink.closed boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002f \l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|0x002c: INVOKE  (r0 I:java.lang.Throwable) okio.Util.sneakyRethrow(java.lang.Throwable):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public void okio.RealBufferedSink.close((r5 'this' I:okio.RealBufferedSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_13;
Node_11 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

