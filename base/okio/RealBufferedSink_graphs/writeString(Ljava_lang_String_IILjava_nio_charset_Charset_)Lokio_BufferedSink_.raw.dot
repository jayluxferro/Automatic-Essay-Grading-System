digraph "CFG forokio.RealBufferedSink.writeString(Ljava\/lang\/String;IILjava\/nio\/charset\/Charset;)Lokio\/BufferedSink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:okio.RealBufferedSink) okio.RealBufferedSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Buffer) = (r1 I:okio.RealBufferedSink) okio.RealBufferedSink.buffer okio.Buffer \l0x0006: INVOKE  \l  (r0 I:okio.Buffer)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:java.nio.charset.Charset)\l okio.Buffer.writeString(java.lang.String, int, int, java.nio.charset.Charset):okio.Buffer type: VIRTUAL \l0x0009: INVOKE  (r2 I:okio.BufferedSink) = (r1 I:okio.RealBufferedSink) okio.RealBufferedSink.emitCompleteSegments():okio.BufferedSink type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:okio.BufferedSink) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0010: CONST_STR  (r3 I:java.lang.String) =  \"closed\" \l0x0012: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.BufferedSink okio.RealBufferedSink.writeString((r1 'this' I:okio.RealBufferedSink A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

