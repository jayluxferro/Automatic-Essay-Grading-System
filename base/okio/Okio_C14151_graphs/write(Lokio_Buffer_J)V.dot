digraph "CFG forokio.Okio.1.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount(r7.size, 0, r8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r8 \l  PHI: (r8v1 long) = (r8v0 long), (r8v2 long) binds: [B:0:0x0000, B:7:0x0008] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:7:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \<= 0) goto L_0x0045\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|r2.throwIfReached()\lokio.Segment r0 = r7.head\lint r1 = (int) java.lang.Math.min(r8, (long) (r0.limit \- r0.pos))\lr1.write(r0.data, r0.pos, r1)\lr0.pos = r0.pos + r1\llong r1 = (long) r1\llong r8 = r8 \- r1\lr7.size = r7.size \- r1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0039|if (r0.pos != r0.limit) goto L_0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|r7.head = r0.pop()\lokio.SegmentPool.recycle(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0008\-\>B:7:0x0008\l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0008|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0008|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.Okio.1.write((r6v0 'this' okio.Okio$1 A[IMMUTABLE_TYPE, THIS]), (r7v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_10;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

