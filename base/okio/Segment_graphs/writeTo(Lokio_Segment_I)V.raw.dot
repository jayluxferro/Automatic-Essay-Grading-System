digraph "CFG forokio.Segment.writeTo(Lokio\/Segment;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:okio.Segment) okio.Segment.owner boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0052 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:13:0x003c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r0 I:boolean) = (r6 I:okio.Segment) okio.Segment.shared boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0036 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x0012: IGET  (r2 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r0 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l0x0019: IGET  (r1 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x001b: IGET  (r2 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l0x001d: IGET  (r3 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x001f: IGET  (r4 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0021: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0022: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r4 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0026: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0028: IGET  (r1 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x002a: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x002b: IPUT  (r0 I:int), (r6 I:okio.Segment) okio.Segment.limit int \l0x002d: IPUT  (r4 I:int), (r6 I:okio.Segment) okio.Segment.pos int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: INVOKE  (r6 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: INVOKE  (r6 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IGET  (r0 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] \l0x003e: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0040: IGET  (r2 I:byte[]) = (r6 I:okio.Segment) okio.Segment.data byte[] \l0x0042: IGET  (r3 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0044: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r7 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0047: IGET  (r0 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0049: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x004a: IPUT  (r0 I:int), (r6 I:okio.Segment) okio.Segment.limit int \l0x004c: IGET  (r6 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x004e: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x004f: IPUT  (r6 I:int), (r5 I:okio.Segment) okio.Segment.pos int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|0x0051: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0054: INVOKE  (r6 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Segment.writeTo((r5 'this' I:okio.Segment A[IMMUTABLE_TYPE, THIS]), (r6 I:okio.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

