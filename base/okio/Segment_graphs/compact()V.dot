digraph "CFG forokio.Segment.compact()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.prev == r3) goto L_0x0032\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r3.prev.owner != false) goto L_0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|int r0 = r3.limit \- r3.pos\lint r1 = 8192 \- r3.prev.limit\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r3.prev.shared == false) goto L_0x001e\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r2 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|int r2 = r3.prev.pos\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|PHI: r2 \l  PHI: (r2v2 int) = (r2v4 int), (r2v5 int) binds: [B:8:0x001e, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r0 \<= (r1 + r2)) goto L_0x0026\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|writeTo(r3.prev, r0)\lpop()\lokio.SegmentPool.recycle(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032}"];
Node_15 [shape=record,label="{15\:\ 0x0037|throw new java.lang.IllegalStateException()\l}"];
MethodNode[shape=record,label="{public void okio.Segment.compact((r3v0 'this' okio.Segment A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

