digraph "CFG forokio.Segment.split(I)Lokio\/Segment;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:int) = (r5 I:okio.Segment) okio.Segment.limit int \l0x0004: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0006: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r6 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r6 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:okio.Segment) = (r5 I:okio.Segment) okio.Segment.sharedCopy():okio.Segment type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r0 I:okio.Segment) =  okio.SegmentPool.take():okio.Segment type: STATIC \l0x0016: IGET  (r1 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] \l0x0018: IGET  (r2 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x001a: IGET  (r3 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x001c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r6 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0022: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) \l0x0023: IPUT  (r1 I:int), (r0 I:okio.Segment) okio.Segment.limit int \l0x0025: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0027: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) \l0x0028: IPUT  (r1 I:int), (r5 I:okio.Segment) okio.Segment.pos int \l0x002a: IGET  (r6 I:okio.Segment) = (r5 I:okio.Segment) okio.Segment.prev okio.Segment \l0x002c: INVOKE  (r6 I:okio.Segment), (r0 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: RETURN  (r0 I:okio.Segment) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: INVOKE  (r6 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Segment okio.Segment.split((r5 'this' I:okio.Segment A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

