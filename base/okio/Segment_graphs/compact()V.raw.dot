digraph "CFG forokio.Segment.compact()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0006: IGET  (r0 I:boolean) = (r0 I:okio.Segment) okio.Segment.owner boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r3 I:okio.Segment) okio.Segment.limit int \l0x000d: IGET  (r1 I:int) = (r3 I:okio.Segment) okio.Segment.pos int \l0x000f: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0010: IGET  (r1 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0012: IGET  (r1 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0014: ARITH  (r1 I:int) = (8192 int) \- (r1 I:int) \l0x0016: IGET  (r2 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0018: IGET  (r2 I:boolean) = (r2 I:okio.Segment) okio.Segment.shared boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IGET  (r2 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0020: IGET  (r2 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0026 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IGET  (r1 I:okio.Segment) = (r3 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0028: INVOKE  (r3 I:okio.Segment), (r1 I:okio.Segment), (r0 I:int) okio.Segment.writeTo(okio.Segment, int):void type: VIRTUAL \l0x002b: INVOKE  (r3 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x002e: INVOKE  (r3 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0034: INVOKE  (r0 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Segment.compact((r3 'this' I:okio.Segment A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

