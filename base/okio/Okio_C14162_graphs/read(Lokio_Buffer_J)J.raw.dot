digraph "CFG forokio.Okio.2.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r5 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0047 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lSplitter:B:4:0x0009\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0009\l|0x0009: IGET  (r0 I:okio.Timeout) = (r3 I:okio.Okio$2) okio.Okio.2.val$timeout okio.Timeout A[Catch:\{ AssertionError \-\> 0x0039 \}, TRY_ENTER]\l0x000b: INVOKE  (r0 I:okio.Timeout) okio.Timeout.throwIfReached():void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x000e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x000f: INVOKE  (r0 I:okio.Segment) = (r4 I:okio.Buffer), (r0 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0013: IGET  (r1 I:int) = (r0 I:okio.Segment) okio.Segment.limit int A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0015: ARITH  (r1 I:int) = (8192 int) \- (r1 I:int) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0017: CAST  (r1 I:long) = (long) (r1 I:int) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0018: INVOKE  (r5 I:long) = (r5 I:long), (r1 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x001c: CAST  (r5 I:int) = (int) (r5 I:long) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x001d: IGET  (r6 I:java.io.InputStream) = (r3 I:okio.Okio$2) okio.Okio.2.val$in java.io.InputStream A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x001f: IGET  (r1 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0021: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0023: INVOKE  (r5 I:int) = \l  (r6 I:java.io.InputStream)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r5 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0027: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d A[Catch:\{ AssertionError \-\> 0x0039 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: RETURN  (r4 I:long) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IGET  (r6 I:int) = (r0 I:okio.Segment) okio.Segment.limit int A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x002f: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0030: IPUT  (r6 I:int), (r0 I:okio.Segment) okio.Segment.limit int A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0032: IGET  (r0 I:long) = (r4 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0034: CAST  (r5 I:long) = (long) (r5 I:int) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0035: ARITH  (r0 I:long) = (r0 I:long) + (r5 I:long) A[Catch:\{ AssertionError \-\> 0x0039 \}]\l0x0036: IPUT  (r0 I:long), (r4 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ AssertionError \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: RETURN  (r5 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|ExcHandler: AssertionError null\lSplitter:B:4:0x0009\l|0x0039: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: INVOKE  (r5 I:boolean) = (r4 I:java.lang.AssertionError) okio.Okio.isAndroidGetsocknameError(java.lang.AssertionError):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0046 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: NEW_INSTANCE  (r5 I:java.io.IOException) =  java.io.IOException \l0x0042: INVOKE  (r5 I:java.io.IOException), (r4 I:java.lang.Throwable) java.io.IOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0049: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004b: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004e: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0050: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0056: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005a: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Okio.2.read((r3 'this' I:okio.Okio$2 A[IMMUTABLE_TYPE, THIS]), (r4 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_17 -> Node_18;
}

