digraph "CFG forokio.SegmentedByteString.toByteArray()[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0002: IGET  (r1 I:byte[][]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0005: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0007: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0009: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000b: IGET  (r1 I:byte[][]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x000d: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r4 I:int[]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0014: ARITH  (r5 I:int) = (r1 I:int) + (r2 I:int) \l0x0016: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0018: IGET  (r5 I:int[]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x001a: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x001c: IGET  (r6 I:byte[][]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x001e: AGET  (r6 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0020: ARITH  (r7 I:int) = (r5 I:int) \- (r3 I:int) \l0x0022: INVOKE  \l  (r6 I:java.lang.Object)\l  (r4 I:int)\l  (r0 I:java.lang.Object)\l  (r3 I:int)\l  (r7 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0025: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0027: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: RETURN  (r0 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] okio.SegmentedByteString.toByteArray((r8 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

