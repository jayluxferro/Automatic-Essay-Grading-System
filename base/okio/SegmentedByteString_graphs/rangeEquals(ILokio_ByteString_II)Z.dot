digraph "CFG forokio.SegmentedByteString.rangeEquals(ILokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 \< 0) goto L_0x0044\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r7 \<= (size() \- r10)) goto L_0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|int r1 = segment(r7)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_START\lPHI: r1 r7 r9 r10 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:4:0x000b, B:12:0x003c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v3 int) binds: [B:4:0x000b, B:12:0x003c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:4:0x000b, B:12:0x003c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 int) = (r10v0 int), (r10v2 int) binds: [B:4:0x000b, B:12:0x003c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000f\-\>B:12:0x003c\l|if (r10 \<= 0) goto L_0x0042\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r1 != 0) goto L_0x0015\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|r2 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|r2 = r6.directory[r1 + \-1]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|PHI: r2 \l  PHI: (r2v0 int) = (r2v5 int), (r2v6 int) binds: [B:8:0x0015, B:7:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = java.lang.Math.min(r10, ((r6.directory[r1] \- r2) + r2) \- r7)\lint r2 = r7 \- r2\lint r2 = r2 + r6.directory[r6.segments.length + r1]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|if (r8.rangeEquals(r9, r6.segments[r1], r2, r3) != false) goto L_0x003c\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|RETURN\l|return false\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|LOOP_END\lLOOP:0: B:5:0x000f\-\>B:12:0x003c\l|int r7 = r7 + r3\lint r9 = r9 + r3\lint r10 = r10 \- r3\lint r1 = r1 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|RETURN\l|return true\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean okio.SegmentedByteString.rangeEquals((r6v0 'this' okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_15[style=dashed];
Node_12 -> Node_5;
Node_15 -> Node_11;
Node_16 -> Node_13;
}

