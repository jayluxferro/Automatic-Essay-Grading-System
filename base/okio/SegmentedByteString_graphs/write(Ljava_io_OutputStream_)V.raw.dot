digraph "CFG forokio.SegmentedByteString.write(Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0021 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:byte[][]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x0020 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r3 I:int[]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x000b: ARITH  (r4 I:int) = (r0 I:int) + (r1 I:int) \l0x000d: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x000f: IGET  (r4 I:int[]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0011: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0013: IGET  (r5 I:byte[][]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0015: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0017: ARITH  (r2 I:int) = (r4 I:int) \- (r2 I:int) \l0x0019: INVOKE  \l  (r7 I:java.io.OutputStream)\l  (r5 I:byte[])\l  (r3 I:int)\l  (r2 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL \l0x001c: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"out == null\" \l0x0025: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.SegmentedByteString.write((r6 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_2;
Node_5 -> Node_6;
}

