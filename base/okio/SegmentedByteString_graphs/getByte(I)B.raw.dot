digraph "CFG forokio.SegmentedByteString.getByte(I)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0002: IGET  (r1 I:byte[][]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0005: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0007: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0009: CAST  (r1 I:long) = (long) (r0 I:int) \l0x000a: CAST  (r3 I:long) = (long) (r8 I:int) \l0x000b: CONST  (r5 I:?[long, double]) = (1 ?[long, double]) \l0x000d: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0010: INVOKE  (r0 I:int) = (r7 I:okio.SegmentedByteString), (r8 I:int) okio.SegmentedByteString.segment(int):int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IGET  (r1 I:int[]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x001a: ARITH  (r2 I:int) = (r0 I:int) + (\-1 int) \l0x001c: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IGET  (r2 I:int[]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0020: IGET  (r3 I:byte[][]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0022: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0023: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) \l0x0024: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0026: IGET  (r3 I:byte[][]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0028: AGET  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002a: ARITH  (r8 I:int) = (r8 I:int) \- (r1 I:int) \l0x002b: ARITH  (r8 I:int) = (r8 I:int) + (r2 I:int) \l0x002c: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: RETURN  (r8 I:byte) \l}"];
MethodNode[shape=record,label="{public byte okio.SegmentedByteString.getByte((r7 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

