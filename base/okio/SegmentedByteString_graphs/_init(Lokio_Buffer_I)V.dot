digraph "CFG forokio.SegmentedByteString.\<init\>(Lokio\/Buffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super((byte[]) null)\lokio.Util.checkOffsetAndCount(r8.size, 0, (long) r9)\lr1 = 0\lr2 = r8.head\lr0 = 0\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|LOOP_START\lPHI: r0 r2 r3 \l  PHI: (r0v3 int) = (r0v2 int), (r0v9 int) binds: [B:0:0x0000, B:4:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 okio.Segment) = (r2v0 okio.Segment), (r2v8 okio.Segment) binds: [B:0:0x0000, B:4:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 int) = (r3v1 int), (r3v9 int) binds: [B:0:0x0000, B:4:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:4:0x001a\l|if (r0 \>= r9) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014}"];
Node_3 [shape=record,label="{3\:\ 0x0018|if (r2.limit == r2.pos) goto L_0x0025\l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x0012\-\>B:4:0x001a\l|int r0 = r0 + (r2.limit \- r2.pos)\lint r3 = r3 + 1\lokio.Segment r2 = r2.next\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025}"];
Node_6 [shape=record,label="{6\:\ 0x002c|throw new java.lang.AssertionError(\"s.limit == s.pos\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|r7.segments = new byte[r3][]\lr7.directory = new int[(r3 * 2)]\lr0 = r8.head\lr8 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|LOOP_START\lPHI: r0 r1 r8 \l  PHI: (r0v7 okio.Segment) = (r0v6 okio.Segment), (r0v8 okio.Segment) binds: [B:7:0x002d, B:12:0x004c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 int) = (r1v1 int), (r1v4 int) binds: [B:7:0x002d, B:12:0x004c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v3 int) = (r8v2 int), (r8v4 int) binds: [B:7:0x002d, B:12:0x004c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x003b\-\>B:12:0x004c\l|if (r1 \>= r9) goto L_0x0062\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|r7.segments[r8] = r0.data\lint r1 = r1 + (r0.limit \- r0.pos)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|if (r1 \<= r9) goto L_0x004c\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|r1 = r9\l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|LOOP_END\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v5 int) binds: [B:18:0x004c, B:17:0x004c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x003b\-\>B:12:0x004c\l|r7.directory[r8] = r1\lr7.directory[r7.segments.length + r8] = r0.pos\lr0.shared = true\lint r8 = r8 + 1\lokio.Segment r0 = r0.next\l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0062|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okio.SegmentedByteString.\<init\>((r7v0 'this' okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_17;
Node_12 -> Node_8;
Node_14 -> Node_7;
Node_15 -> Node_5;
Node_16 -> Node_13;
Node_17 -> Node_12;
Node_18 -> Node_12;
}

