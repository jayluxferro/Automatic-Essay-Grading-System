digraph "CFG forokio.SegmentedByteString.write(Lokio\/Buffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte[][]) = (r11 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r3 I:int[]) = (r11 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0009: ARITH  (r4 I:int) = (r0 I:int) + (r1 I:int) \l0x000b: AGET  (r7 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x000d: IGET  (r3 I:int[]) = (r11 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x000f: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0011: NEW_INSTANCE  (r4 I:okio.Segment) =  okio.Segment \l0x0013: IGET  (r5 I:byte[][]) = (r11 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0015: AGET  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0017: ARITH  (r5 I:int) = (r7 I:int) + (r3 I:int) \l0x0019: ARITH  (r8 I:int) = (r5 I:int) \- (r2 I:int) \l0x001b: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001c: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  \l  (r5 I:okio.Segment)\l  (r6 I:byte[])\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:boolean)\l  (r10 I:boolean)\l okio.Segment.\<init\>(byte[], int, int, boolean, boolean):void type: DIRECT \l0x0021: IGET  (r2 I:okio.Segment) = (r12 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IPUT  (r4 I:okio.Segment), (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0027: IPUT  (r4 I:okio.Segment), (r4 I:okio.Segment) okio.Segment.next okio.Segment \l0x0029: IPUT  (r4 I:okio.Segment), (r12 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IGET  (r2 I:okio.Segment) = (r12 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x002e: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0030: INVOKE  (r2 I:okio.Segment), (r4 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0035: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IGET  (r0 I:long) = (r12 I:okio.Buffer) okio.Buffer.size long \l0x0039: CAST  (r2 I:long) = (long) (r2 I:int) \l0x003a: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x003b: IPUT  (r0 I:long), (r12 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: RETURN   \l}"];
MethodNode[shape=record,label="{void okio.SegmentedByteString.write((r11 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r12 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

