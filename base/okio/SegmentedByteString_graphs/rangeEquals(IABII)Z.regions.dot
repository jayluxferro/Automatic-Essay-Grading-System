digraph "CFG forokio.SegmentedByteString.rangeEquals(I[BII)Z" {
subgraph cluster_Region_844010969 {
label = "R(1:(2:(1:17)|(3:7|(3:(1:10)(1:11)|12|(2:(1:14)|(1:15)))|16))) | DECL_VAR: int null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1016297749 {
label = "R(2:(1:17)|(3:7|(3:(1:10)(1:11)|12|(2:(1:14)|(1:15)))|16))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_495165731 {
label = "IF [B:1:0x0001, B:3:0x0008, B:4:0x000a, B:6:0x000e] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 \< 0) goto L_0x004a\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (r7 \> (size() \- r10)) goto L_0x004a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|ADDED_TO_REGION\l|if (r9 \< 0) goto L_0x004a\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|ADDED_TO_REGION\l|if (r9 \> (r8.length \- r10)) goto L_0x004a\l}"];
subgraph cluster_Region_836791982 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x004a|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_938440670 {
label = "R(3:7|(3:(1:10)(1:11)|12|(2:(1:14)|(1:15)))|16)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0011|int int r1 = segment(r7)\l}"];
subgraph cluster_LoopRegion_2009519382 {
label = "LOOP:0: (3:(1:10)(1:11)|12|(2:(1:14)|(1:15)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0015|LOOP_START\lPHI: r1 r7 r9 r10 \l  PHI: (r1v5 int) = (r1v4 int), (r1v6 int) binds: [B:7:0x0011, B:15:0x0042] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v3 int) binds: [B:7:0x0011, B:15:0x0042] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:7:0x0011, B:15:0x0042] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 int) = (r10v0 int), (r10v2 int) binds: [B:7:0x0011, B:15:0x0042] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0015\-\>B:15:0x0042\l|if (r10 \> 0) goto L_0x0017\l}"];
subgraph cluster_Region_1222891852 {
label = "R(3:(1:10)(1:11)|12|(2:(1:14)|(1:15)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1730911997 {
label = "IF [B:9:0x0017] THEN: R(1:10) ELSE: R(1:11)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0017|if (r1 == 0) goto L_0x0019\l}"];
subgraph cluster_Region_437392156 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0019|r2 = 0\l}"];
}
subgraph cluster_Region_83758986 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001b|r2 = r6.directory[r1 \- 1]\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0021|PHI: r2 \l  PHI: (r2v0 int) = (r2v5 int), (r2v6 int) binds: [B:11:0x001b, B:10:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|int int r3 = java.lang.Math.min(r10, ((r6.directory[r1] \- r2) + r2) \- r7)\l}"];
subgraph cluster_Region_1345995050 {
label = "R(2:(1:14)|(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_561364409 {
label = "IF [B:13:0x003f] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x003f|if (okio.Util.arrayRangeEquals(r6.segments[r1], (r7 \- r2) + r6.directory[r6.segments.length + r1], r8, r9, r3) == false) goto L_0x0041\l}"];
subgraph cluster_Region_1353742519 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0041|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_195840635 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0042|LOOP_END\lLOOP:0: B:8:0x0015\-\>B:15:0x0042\l|r7 += r3\lr9 += r3\lr10 \-= r3\lr1++\l}"];
}
}
}
}
Node_16 [shape=record,label="{16\:\ 0x0048|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0003}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0048|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0041|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean okio.SegmentedByteString.rangeEquals((r6v0 'this' okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_18[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15[style=dashed];
Node_13 -> Node_19;
Node_15 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_18 -> Node_16;
Node_19 -> Node_14;
}

