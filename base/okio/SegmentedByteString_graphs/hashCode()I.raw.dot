digraph "CFG forokio.SegmentedByteString.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.hashCode int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:byte[][]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0007: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r4 I:byte[][]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0010: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0012: IGET  (r5 I:int[]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0014: ARITH  (r6 I:int) = (r0 I:int) + (r1 I:int) \l0x0016: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0018: IGET  (r6 I:int[]) = (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x001a: AGET  (r6 I:?[int, float]) = (r6 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001c: ARITH  (r2 I:int) = (r6 I:int) \- (r2 I:int) \l0x001e: ARITH  (r2 I:int) = (r2 I:int) + (r5 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r5 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x0029 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: ARITH  (r3 I:int) = (r3 I:int) * (31 int) \l0x0023: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x0025: ARITH  (r3 I:int) = (r3 I:int) + (r7 I:int) \l0x0026: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x002b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IPUT  (r3 I:int), (r8 I:okio.SegmentedByteString) okio.SegmentedByteString.hashCode int \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.SegmentedByteString.hashCode((r8 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_4;
Node_9 -> Node_10;
}

