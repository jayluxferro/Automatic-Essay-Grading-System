digraph "CFG forokio.SegmentedByteString.\<init\>(Lokio\/Buffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r7 I:okio.ByteString), (r0 I:byte[]) okio.ByteString.\<init\>(byte[]):void type: DIRECT \l0x0004: IGET  (r1 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x0006: CAST  (r5 I:long) = (long) (r9 I:int) \l0x0007: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0009: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x000c: IGET  (r0 I:okio.Segment) = (r8 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0016: IGET  (r5 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x001c: IGET  (r5 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x001e: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x001f: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) \l0x0020: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0022: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: NEW_INSTANCE  (r8 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0027: CONST_STR  (r9 I:java.lang.String) =  \"s.limit == s.pos\" \l0x0029: INVOKE  (r8 I:java.lang.AssertionError), (r9 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: NEW_ARRAY  (r0 I:byte[][]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[][] \l0x002f: IPUT  (r0 I:byte[][]), (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0031: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0033: NEW_ARRAY  (r0 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0035: IPUT  (r0 I:int[]), (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0037: IGET  (r8 I:okio.Segment) = (r8 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x003a: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: IF  (r1 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:13:0x0062 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IGET  (r2 I:byte[][]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x003f: IGET  (r3 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0041: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0043: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0045: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0047: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0048: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: IF  (r1 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char])  \-\> B:12:0x004c \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: IGET  (r2 I:int[]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x004e: APUT  \l  (r2 I:?[int, float][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x0050: IGET  (r2 I:int[]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0052: IGET  (r3 I:byte[][]) = (r7 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0054: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0055: ARITH  (r3 I:int) = (r3 I:int) + (r8 I:int) \l0x0056: IGET  (r4 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0058: APUT  \l  (r2 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x005a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x005b: IPUT  (r2 I:boolean), (r0 I:okio.Segment) okio.Segment.shared boolean \l0x005d: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x005f: IGET  (r0 I:okio.Segment) = (r0 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: RETURN   \l}"];
MethodNode[shape=record,label="{void okio.SegmentedByteString.\<init\>((r7 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r8 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_8;
}

