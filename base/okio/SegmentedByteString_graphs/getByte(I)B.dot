digraph "CFG forokio.SegmentedByteString.getByte(I)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount((long) r7.directory[r7.segments.length + \-1], (long) r8, 1)\lint r0 = segment(r8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r0 != 0) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|r1 = r7.directory[r0 + \-1]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|PHI: r1 \l  PHI: (r1v4 int) = (r1v6 int), (r1v7 int) binds: [B:3:0x0018, B:2:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r7.directory[r7.segments.length + r0]\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|RETURN\l|return r7.segments[r0][(r8 \- r1) + r2]\l}"];
MethodNode[shape=record,label="{public byte okio.SegmentedByteString.getByte((r7v0 'this' okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

