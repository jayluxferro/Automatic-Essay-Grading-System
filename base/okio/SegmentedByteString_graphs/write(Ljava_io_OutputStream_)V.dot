digraph "CFG forokio.SegmentedByteString.write(Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 == null) goto L_0x0021\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|int r0 = r6.segments.length\lr1 = 0\lr2 = 0\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:1:0x0002, B:3:0x0009] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:1:0x0002, B:3:0x0009] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0007\-\>B:3:0x0009\l|if (r1 \>= r0) goto L_0x0020\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_END\lLOOP:0: B:2:0x0007\-\>B:3:0x0009\l|r3 = r6.directory[r0 + r1]\lr4 = r6.directory[r1]\lr7.write(r6.segments[r1], r3, r4 \- r2)\lint r1 = r1 + 1\lr2 = r4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021}"];
Node_6 [shape=record,label="{6\:\ 0x0028|throw new java.lang.IllegalArgumentException(\"out == null\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.SegmentedByteString.write((r6v0 'this' okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r7v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_4;
}

