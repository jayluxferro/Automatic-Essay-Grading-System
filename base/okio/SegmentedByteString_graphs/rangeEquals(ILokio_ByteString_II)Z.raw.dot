digraph "CFG forokio.SegmentedByteString.rangeEquals(ILokio\/ByteString;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.size():int type: VIRTUAL \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \- (r10 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r7 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  (r1 I:int) = (r6 I:okio.SegmentedByteString), (r7 I:int) okio.SegmentedByteString.segment(int):int type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0042 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IGET  (r2 I:int[]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0017: ARITH  (r3 I:int) = (r1 I:int) + (\-1 int) \l0x0019: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IGET  (r3 I:int[]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x001d: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001f: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int) \l0x0020: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x0021: ARITH  (r3 I:int) = (r3 I:int) \- (r7 I:int) \l0x0022: INVOKE  (r3 I:int) = (r10 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0026: IGET  (r4 I:int[]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.directory int[] \l0x0028: IGET  (r5 I:byte[][]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x002a: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x002b: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x002c: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x002e: ARITH  (r2 I:int) = (r7 I:int) \- (r2 I:int) \l0x0030: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x0031: IGET  (r4 I:byte[][]) = (r6 I:okio.SegmentedByteString) okio.SegmentedByteString.segments byte[][] \l0x0033: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0035: INVOKE  (r2 I:boolean) = \l  (r8 I:okio.ByteString)\l  (r9 I:int)\l  (r4 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l okio.ByteString.rangeEquals(int, byte[], int, int):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003c \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: RETURN  (r0 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int) \l0x003d: ARITH  (r9 I:int) = (r9 I:int) + (r3 I:int) \l0x003e: ARITH  (r10 I:int) = (r10 I:int) \- (r3 I:int) \l0x003f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: RETURN  (r7 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okio.SegmentedByteString.rangeEquals((r6 'this' I:okio.SegmentedByteString A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_16[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_6;
Node_14 -> Node_15;
}

