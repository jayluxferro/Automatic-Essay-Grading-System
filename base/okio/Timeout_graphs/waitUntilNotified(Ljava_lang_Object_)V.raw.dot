digraph "CFG forokio.Timeout.waitUntilNotified(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:boolean) = (r9 I:okio.Timeout) okio.Timeout.hasDeadline():boolean type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}, TRY_ENTER]\l0x0004: INVOKE  (r1 I:long) = (r9 I:okio.Timeout) okio.Timeout.timeoutNanos():long type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0008: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CMP_L  (r5 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  (r10 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN   A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r5 I:long) =  java.lang.System.nanoTime():long type: STATIC A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0029 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: CMP_L  (r7 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0029 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: INVOKE  (r7 I:long) = (r9 I:okio.Timeout) okio.Timeout.deadlineNanoTime():long type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0022: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0023: ARITH  (r7 I:long) = (r7 I:long) \- (r5 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0024: INVOKE  (r1 I:long) = (r1 I:long), (r7 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0028: GOTO  \-\> 0x0032 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: INVOKE  (r0 I:long) = (r9 I:okio.Timeout) okio.Timeout.deadlineNanoTime():long type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x002f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0030: ARITH  (r1 I:long) = (r0 I:long) \- (r5 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: CMP_L  (r0 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x004a A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: CONST  (r3 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0039: ARITH  (r7 I:long) = (r1 I:long) \/ (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x003b: ARITH  (r3 I:long) = (r3 I:long) * (r7 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x003d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x003e: ARITH  (r3 I:long) = (r1 I:long) \- (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0040: CAST  (r0 I:int) = (int) (r3 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0041: INVOKE  (r10 I:java.lang.Object), (r7 I:long), (r0 I:int) java.lang.Object.wait(long, int):void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0044: INVOKE  (r3 I:long) =  java.lang.System.nanoTime():long type: STATIC A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0048: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0049: ARITH  (r3 I:long) = (r3 I:long) \- (r5 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: CMP_L  (r10 I:int) = (r3 I:long), (r1 I:long) A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x004f A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: RETURN   A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: NEW_INSTANCE  (r10 I:java.io.InterruptedIOException) =  java.io.InterruptedIOException A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0051: CONST_STR  (r0 I:java.lang.String) =  \"timeout\" A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l0x0053: INVOKE  \l  (r10 I:java.io.InterruptedIOException)\l  (r0 I:java.lang.String)\l java.io.InterruptedIOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ InterruptedException \-\> 0x0057 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: THROW  (r10 I:java.lang.Throwable) A[Catch:\{ InterruptedException \-\> 0x0057 \}, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|0x0057: NEW_INSTANCE  (r10 I:java.io.InterruptedIOException) =  java.io.InterruptedIOException \l0x0059: CONST_STR  (r0 I:java.lang.String) =  \"interrupted\" \l0x005b: INVOKE  \l  (r10 I:java.io.InterruptedIOException)\l  (r0 I:java.lang.String)\l java.io.InterruptedIOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lExcHandler: InterruptedException null\lSplitter:B:0:0x0000\l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void okio.Timeout.waitUntilNotified((r9 'this' I:okio.Timeout A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.InterruptedIOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_23;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_24;
Node_23 -> Node_22;
}

