digraph "CFG forokio.Pipe.PipeSource.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Pipe) = (r3 I:okio.Pipe$PipeSource) okio.Pipe.PipeSource.this$0 okio.Pipe \l0x0002: IGET  (r0 I:okio.Buffer) = (r0 I:okio.Pipe) okio.Pipe.buffer okio.Buffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r1 I:okio.Pipe) = (r3 I:okio.Pipe$PipeSource) okio.Pipe.PipeSource.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0013 \}, TRY_ENTER]\l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0013 \}]\l0x0008: IPUT  (r2 I:boolean), (r1 I:okio.Pipe) okio.Pipe.sourceClosed boolean A[Catch:\{ all \-\> 0x0013 \}]\l0x000a: IGET  (r1 I:okio.Pipe) = (r3 I:okio.Pipe$PipeSource) okio.Pipe.PipeSource.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0013 \}]\l0x000c: IGET  (r1 I:okio.Buffer) = (r1 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x0013 \}]\l0x000e: INVOKE  (r1 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN   A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x0013: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0013 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSource.close((r3 'this' I:okio.Pipe$PipeSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

