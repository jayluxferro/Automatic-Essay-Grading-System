digraph "CFG forokio.Okio.4.timedOut()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x0029, AssertionError \-\> 0x0006 \}\lSplitter:B:0:0x0000\l|r1.close()     \/\/ Catch:\{ Exception \-\> 0x0029, AssertionError \-\> 0x0006 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|ExcHandler: AssertionError (r0v1 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.AssertionError r0 = move\-exception\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (okio.Okio.isAndroidGetsocknameError(r0) == false) goto L_0x0028\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|java.util.logging.Logger r1 = okio.Okio.logger\ljava.util.logging.Level r2 = java.util.logging.Level.WARNING\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Failed to close timed out socket \")\lr3.append(r1)\lr1.log(r2, r3.toString(), r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|throw r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|ExcHandler: Exception (r0v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|java.util.logging.Logger r1 = okio.Okio.logger\ljava.util.logging.Level r2 = java.util.logging.Level.WARNING\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Failed to close timed out socket \")\lr3.append(r1)\lr1.log(r2, r3.toString(), r0)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void okio.Okio.4.timedOut((r5v0 'this' okio.Okio$4 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_0 -> Node_2;
Node_1 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

