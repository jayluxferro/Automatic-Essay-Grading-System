digraph "CFG forokio.AsyncTimeout.2.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.AsyncTimeout) = (r1 I:okio.AsyncTimeout$2) okio.AsyncTimeout.2.this$0 okio.AsyncTimeout \l0x0002: INVOKE  (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.enter():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: IGET  (r0 I:okio.Source) = (r1 I:okio.AsyncTimeout$2) okio.AsyncTimeout.2.val$source okio.Source A[Catch:\{ IOException \-\> 0x0014 \}, TRY_ENTER]\l0x0007: INVOKE  (r2 I:long) = (r0 I:okio.Source), (r2 I:okio.Buffer), (r3 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE A[Catch:\{ IOException \-\> 0x0014 \}]\l0x000a: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: IGET  (r0 I:okio.AsyncTimeout) = (r1 I:okio.AsyncTimeout$2) okio.AsyncTimeout.2.this$0 okio.AsyncTimeout \l0x000e: INVOKE  (r0 I:okio.AsyncTimeout), (r4 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ExcHandler: all null\lSplitter:B:8:0x0015\l|0x0012: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|ExcHandler: IOException null\lSplitter:B:1:0x0005\l|0x0014: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|SYNTHETIC\lSplitter:B:8:0x0015\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0015\l|0x0015: IGET  (r3 I:okio.AsyncTimeout) = (r1 I:okio.AsyncTimeout$2) okio.AsyncTimeout.2.this$0 okio.AsyncTimeout A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l0x0017: INVOKE  (r2 I:java.io.IOException) = (r3 I:okio.AsyncTimeout), (r2 I:java.io.IOException) okio.AsyncTimeout.exit(java.io.IOException):java.io.IOException type: VIRTUAL A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0012 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IGET  (r3 I:okio.AsyncTimeout) = (r1 I:okio.AsyncTimeout$2) okio.AsyncTimeout.2.this$0 okio.AsyncTimeout \l0x001e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  (r3 I:okio.AsyncTimeout), (r4 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.AsyncTimeout.2.read((r1 'this' I:okio.AsyncTimeout$2 A[IMMUTABLE_TYPE, THIS]), (r2 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

