digraph "CFG forokio.Buffer.UnsafeCursor.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Buffer) = (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IPUT  (r0 I:okio.Buffer), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0007: IPUT  (r0 I:okio.Segment), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0009: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) \l0x000b: IPUT  (r1 I:long), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x000d: IPUT  (r0 I:byte[]), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x000f: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0010: IPUT  (r0 I:int), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x0012: IPUT  (r0 I:int), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"not attached to a buffer\" \l0x0019: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Buffer.UnsafeCursor.close((r3 'this' I:okio.Buffer$UnsafeCursor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

