digraph "CFG forokio.Buffer.UnsafeCursor.resizeBuffer(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00a7 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:boolean) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.readWrite boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x009f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x000a: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x000c: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r4 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CMP_L  (r4 I:int) = (r13 I:long), (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x004d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: ARITH  (r4 I:long) = (r0 I:long) \- (r13 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CMP_L  (r6 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IGET  (r6 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x001e: IGET  (r6 I:okio.Segment) = (r6 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0020: IGET  (r6 I:okio.Segment) = (r6 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0022: IGET  (r7 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x0024: IGET  (r8 I:int) = (r6 I:okio.Segment) okio.Segment.pos int \l0x0026: ARITH  (r7 I:int) = (r7 I:int) \- (r8 I:int) \l0x0027: CAST  (r7 I:long) = (long) (r7 I:int) \l0x0028: CMP_L  (r9 I:int) = (r7 I:long), (r4 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r9 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: IGET  (r9 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x002e: INVOKE  (r10 I:okio.Segment) = (r6 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0032: IPUT  (r10 I:okio.Segment), (r9 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0034: INVOKE  (r6 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l0x0037: ARITH  (r4 I:long) = (r4 I:long) \- (r7 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IGET  (r2 I:int) = (r6 I:okio.Segment) okio.Segment.limit int \l0x003b: CAST  (r2 I:long) = (long) (r2 I:int) \l0x003c: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x003d: CAST  (r2 I:int) = (int) (r2 I:long) \l0x003e: IPUT  (r2 I:int), (r6 I:okio.Segment) okio.Segment.limit int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: IPUT  (r2 I:okio.Segment), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0043: IPUT  (r13 I:long), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x0045: IPUT  (r2 I:byte[]), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x0047: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0048: IPUT  (r2 I:int), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x004a: IPUT  (r2 I:int), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0051: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0054: CONST_STR  (r2 I:java.lang.String) =  \"newSize \< 0: \" \l0x0056: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r13 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r13 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:25:0x009a \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: ARITH  (r4 I:long) = (r13 I:long) \- (r0 I:long) \l0x0068: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0069: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|0x006a: CMP_L  (r8 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006c|0x006c: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:25:0x009a \l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: IGET  (r8 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0070: INVOKE  (r8 I:okio.Segment) = (r8 I:okio.Buffer), (r6 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x0074: IGET  (r9 I:int) = (r8 I:okio.Segment) okio.Segment.limit int \l0x0076: ARITH  (r9 I:int) = (8192 int) \- (r9 I:int) \l0x0078: CAST  (r9 I:long) = (long) (r9 I:int) \l0x0079: INVOKE  (r9 I:long) = (r4 I:long), (r9 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x007d: CAST  (r9 I:int) = (int) (r9 I:long) \l0x007e: IGET  (r10 I:int) = (r8 I:okio.Segment) okio.Segment.limit int \l0x0080: ARITH  (r10 I:int) = (r10 I:int) + (r9 I:int) \l0x0081: IPUT  (r10 I:int), (r8 I:okio.Segment) okio.Segment.limit int \l0x0083: CAST  (r10 I:long) = (long) (r9 I:int) \l0x0084: ARITH  (r4 I:long) = (r4 I:long) \- (r10 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0085|0x0085: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_24 [shape=record,label="{24\:\ 0x0087|0x0087: IPUT  (r8 I:okio.Segment), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0089: IPUT  (r0 I:long), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x008b: IGET  (r7 I:byte[]) = (r8 I:okio.Segment) okio.Segment.data byte[] \l0x008d: IPUT  (r7 I:byte[]), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x008f: IGET  (r7 I:int) = (r8 I:okio.Segment) okio.Segment.limit int \l0x0091: ARITH  (r7 I:int) = (r7 I:int) \- (r9 I:int) \l0x0092: IPUT  (r7 I:int), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x0094: IGET  (r7 I:int) = (r8 I:okio.Segment) okio.Segment.limit int \l0x0096: IPUT  (r7 I:int), (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l0x0098: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x009a|0x009a: IGET  (r2 I:okio.Buffer) = (r12 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x009c: IPUT  (r13 I:long), (r2 I:okio.Buffer) okio.Buffer.size long \l}"];
Node_26 [shape=record,label="{26\:\ 0x009e|0x009e: RETURN  (r0 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x009f|0x009f: NEW_INSTANCE  (r13 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x00a1: CONST_STR  (r14 I:java.lang.String) =  \"resizeBuffer() only permitted for read\/write buffers\" \l0x00a3: INVOKE  \l  (r13 I:java.lang.IllegalStateException)\l  (r14 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a6|0x00a6: THROW  (r13 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a7|0x00a7: NEW_INSTANCE  (r13 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x00a9: CONST_STR  (r14 I:java.lang.String) =  \"not attached to a buffer\" \l0x00ab: INVOKE  \l  (r13 I:java.lang.IllegalStateException)\l  (r14 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ae|0x00ae: THROW  (r13 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.UnsafeCursor.resizeBuffer((r12 'this' I:okio.Buffer$UnsafeCursor A[IMMUTABLE_TYPE, THIS]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_20;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_20;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
}

