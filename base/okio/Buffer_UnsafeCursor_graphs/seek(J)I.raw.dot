digraph "CFG forokio.Buffer.UnsafeCursor.seek(J)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r11 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:35:0x00b5 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0008: IGET  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size long \l0x000a: CMP_L  (r1 I:int) = (r11 I:long), (r1 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:35:0x00b5 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00a8 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0012: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0014: CMP_L  (r0 I:int) = (r11 I:long), (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x001c: IGET  (r2 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x001e: IGET  (r2 I:long) = (r2 I:okio.Buffer) okio.Buffer.size long \l0x0020: IGET  (r4 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0022: IGET  (r4 I:okio.Segment) = (r4 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0024: IGET  (r5 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0026: IGET  (r5 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0028: IGET  (r6 I:okio.Segment) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0042 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r6 I:long) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x002e: IGET  (r8 I:int) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x0030: IGET  (r9 I:okio.Segment) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0032: IGET  (r9 I:int) = (r9 I:okio.Segment) okio.Segment.pos int \l0x0034: ARITH  (r8 I:int) = (r8 I:int) \- (r9 I:int) \l0x0035: CAST  (r8 I:long) = (long) (r8 I:int) \l0x0036: ARITH  (r6 I:long) = (r6 I:long) \- (r8 I:long) \l0x0037: CMP_L  (r8 I:int) = (r6 I:long), (r11 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x003f \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IGET  (r5 I:okio.Segment) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x003d: MOVE  (r2 I:?[long, double]) = (r6 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: IGET  (r4 I:okio.Segment) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0041: MOVE  (r0 I:?[long, double]) = (r6 I:?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: ARITH  (r6 I:long) = (r2 I:long) \- (r11 I:long) \l0x0045: ARITH  (r8 I:long) = (r11 I:long) \- (r0 I:long) \l0x0047: CMP_L  (r6 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:19:0x0060 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: IGET  (r2 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x004d: IGET  (r3 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x004f: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0050: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0051: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l0x0052: CMP_L  (r2 I:int) = (r11 I:long), (r2 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:23:0x0070 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IGET  (r2 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0058: IGET  (r3 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x005a: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x005b: CAST  (r2 I:long) = (long) (r2 I:int) \l0x005c: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x005d: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_19 [shape=record,label="{19\:\ 0x0060|0x0060: MOVE  (r0 I:?[long, double]) = (r2 I:?[long, double]) \l0x0061: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|0x0062: CMP_L  (r2 I:int) = (r0 I:long), (r11 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|0x0064: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:23:0x0070 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0066|0x0066: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0068: IGET  (r2 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x006a: IGET  (r3 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x006c: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x006d: CAST  (r2 I:long) = (long) (r2 I:int) \l0x006e: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0070|0x0070: IGET  (r2 I:boolean) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.readWrite boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x0072|0x0072: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008f \l}"];
Node_25 [shape=record,label="{25\:\ 0x0074|0x0074: IGET  (r2 I:boolean) = (r4 I:okio.Segment) okio.Segment.shared boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x0076|0x0076: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008f \l}"];
Node_27 [shape=record,label="{27\:\ 0x0078|0x0078: INVOKE  (r2 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.unsharedCopy():okio.Segment type: VIRTUAL \l0x007c: IGET  (r3 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x007e: IGET  (r3 I:okio.Segment) = (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_28 [shape=record,label="{28\:\ 0x0080|0x0080: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0086 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0082|0x0082: IGET  (r3 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0084: IPUT  (r2 I:okio.Segment), (r3 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_30 [shape=record,label="{30\:\ 0x0086|0x0086: INVOKE  (r4 I:okio.Segment) = (r4 I:okio.Segment), (r2 I:okio.Segment) okio.Segment.push(okio.Segment):okio.Segment type: VIRTUAL \l0x008a: IGET  (r2 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x008c: INVOKE  (r2 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x008f|0x008f: IPUT  (r4 I:okio.Segment), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0091: IPUT  (r11 I:long), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x0093: IGET  (r2 I:byte[]) = (r4 I:okio.Segment) okio.Segment.data byte[] \l0x0095: IPUT  (r2 I:byte[]), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x0097: IGET  (r2 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0099: ARITH  (r11 I:long) = (r11 I:long) \- (r0 I:long) \l0x009a: CAST  (r11 I:int) = (int) (r11 I:long) \l0x009b: ARITH  (r2 I:int) = (r2 I:int) + (r11 I:int) \l0x009c: IPUT  (r2 I:int), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x009e: IGET  (r11 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x00a0: IPUT  (r11 I:int), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l0x00a2: IGET  (r11 I:int) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l0x00a4: IGET  (r12 I:int) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x00a6: ARITH  (r11 I:int) = (r11 I:int) \- (r12 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a7|0x00a7: RETURN  (r11 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a8|0x00a8: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a9: IPUT  (r0 I:okio.Segment), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x00ab: IPUT  (r11 I:long), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x00ad: IPUT  (r0 I:byte[]), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x00af: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00b0: IPUT  (r11 I:int), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x00b2: IPUT  (r11 I:int), (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b4|0x00b4: RETURN  (r11 I:int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00b5|0x00b5: NEW_INSTANCE  (r0 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x00b7: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00b8: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00ba: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bb: INVOKE  (r11 I:java.lang.Long) = (r11 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00bf: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x00c1: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00c2: IGET  (r12 I:okio.Buffer) = (r10 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x00c4: IGET  (r2 I:long) = (r12 I:okio.Buffer) okio.Buffer.size long \l0x00c6: INVOKE  (r12 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00ca: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l \l0x00cc: CONST_STR  (r11 I:java.lang.String) =  \"offset=%s \> size=%s\" \l0x00ce: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.String), (r1 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x00d2: INVOKE  \l  (r0 I:java.lang.ArrayIndexOutOfBoundsException)\l  (r11 I:java.lang.String)\l java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x00d5|0x00d5: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int okio.Buffer.UnsafeCursor.seek((r10 'this' I:okio.Buffer$UnsafeCursor A[IMMUTABLE_TYPE, THIS]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_35;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_35;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_33;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_33[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_16;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_20;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_35 -> Node_36;
}

