digraph "CFG forokio.Buffer.UnsafeCursor.expandBuffer(I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x005b \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r10 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r1 I:okio.Buffer) = (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r1 I:boolean) = (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.readWrite boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IGET  (r1 I:okio.Buffer) = (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0010: IGET  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size long \l0x0012: IGET  (r3 I:okio.Buffer) = (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0014: INVOKE  (r10 I:okio.Segment) = (r3 I:okio.Buffer), (r10 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l0x0018: IGET  (r3 I:int) = (r10 I:okio.Segment) okio.Segment.limit int \l0x001a: ARITH  (r3 I:int) = (8192 int) \- (r3 I:int) \l0x001c: IPUT  (r0 I:int), (r10 I:okio.Segment) okio.Segment.limit int \l0x001e: IGET  (r4 I:okio.Buffer) = (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.buffer okio.Buffer \l0x0020: CAST  (r5 I:long) = (long) (r3 I:int) \l0x0021: ARITH  (r7 I:long) = (r1 I:long) + (r5 I:long) \l0x0023: IPUT  (r7 I:long), (r4 I:okio.Buffer) okio.Buffer.size long \l0x0025: IPUT  (r10 I:okio.Segment), (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.segment okio.Segment \l0x0027: IPUT  (r1 I:long), (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.offset long \l0x0029: IGET  (r10 I:byte[]) = (r10 I:okio.Segment) okio.Segment.data byte[] \l0x002b: IPUT  (r10 I:byte[]), (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.data byte[] \l0x002d: ARITH  (r10 I:int) = (8192 int) \- (r3 I:int) \l0x002f: IPUT  (r10 I:int), (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.start int \l0x0031: IPUT  (r0 I:int), (r9 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.end int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: RETURN  (r5 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: NEW_INSTANCE  (r10 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0036: CONST_STR  (r0 I:java.lang.String) =  \"expandBuffer() only permitted for read\/write buffers\" \l0x0038: INVOKE  \l  (r10 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: NEW_INSTANCE  (r10 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x003e: CONST_STR  (r0 I:java.lang.String) =  \"not attached to a buffer\" \l0x0040: INVOKE  \l  (r10 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0046: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004b: CONST_STR  (r2 I:java.lang.String) =  \"minByteCount \> Segment.SIZE: \" \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r10 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0057: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r10 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|0x005b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0062: CONST_STR  (r2 I:java.lang.String) =  \"minByteCount \<= 0: \" \l0x0064: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0067: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r10 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006e: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r10 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0071|0x0071: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.Buffer.UnsafeCursor.expandBuffer((r9 'this' I:okio.Buffer$UnsafeCursor A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

