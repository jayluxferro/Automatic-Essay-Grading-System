digraph "CFG forokio.Buffer.UnsafeCursor.resizeBuffer(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r12.buffer == null) goto L_0x00a7\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r12.readWrite == false) goto L_0x009f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|long r0 = r12.buffer.size\lint r4 = (r13 \> r0 ? 1 : (r13 == r0 ? 0 : \-1))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r4 \> 0) goto L_0x0064\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if ((r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1)) \< 0) goto L_0x004d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|long r4 = r0 \- r13\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|LOOP_START\lPHI: r4 \l  PHI: (r4v6 long) = (r4v5 long), (r4v7 long) binds: [B:8:0x0016, B:13:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0018\-\>B:13:0x002c\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|if ((r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1)) \<= 0) goto L_0x0040\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|okio.Segment r6 = r12.buffer.head.prev\llong r7 = (long) (r6.limit \- r6.pos)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|if ((r7 \> r4 ? 1 : (r7 == r4 ? 0 : \-1)) \> 0) goto L_0x0039\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|LOOP_END\lLOOP:0: B:9:0x0018\-\>B:13:0x002c\l|okio.Buffer r9 = r12.buffer\lr9.head = r6.pop()\lokio.SegmentPool.recycle(r6)\llong r4 = r4 \- r7\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|r6.limit = (int) (((long) r6.limit) \- r4)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|r12.segment = null\lr12.offset = r13\lr12.data = null\lr12.start = \-1\lr12.end = \-1\l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"newSize \< 0: \")\lr1.append(r13)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|if (r4 \<= 0) goto L_0x009a\l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|long r4 = r13 \- r0\lr7 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|LOOP_START\lPHI: r4 r7 \l  PHI: (r4v2 long) = (r4v1 long), (r4v3 long) binds: [B:19:0x0066, B:33:0x006a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 boolean) = (r7v0 boolean), (r7v2 boolean) binds: [B:19:0x0066, B:33:0x006a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:20:0x006a\-\>B:33:0x006a\l}"];
Node_21 [shape=record,label="{21\:\ 0x006c|if ((r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1)) \<= 0) goto L_0x009a\l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|okio.Segment r8 = r12.buffer.writableSegment(1)\lint r9 = (int) java.lang.Math.min(r4, (long) (8192 \- r8.limit))\lr8.limit = r8.limit + r9\llong r4 = r4 \- ((long) r9)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0085|if (r7 == false) goto L_0x006a\l}"];
Node_24 [shape=record,label="{24\:\ 0x0087|r12.segment = r8\lr12.offset = r0\lr12.data = r8.data\lr12.start = r8.limit \- r9\lr12.end = r8.limit\lr7 = false\l}"];
Node_25 [shape=record,label="{25\:\ 0x009a|r12.buffer.size = r13\l}"];
Node_26 [shape=record,label="{26\:\ 0x009e|RETURN\l|return r0\l}"];
Node_27 [shape=record,label="{27\:\ 0x009f}"];
Node_28 [shape=record,label="{28\:\ 0x00a6|throw new java.lang.IllegalStateException(\"resizeBuffer() only permitted for read\/write buffers\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x00a7}"];
Node_30 [shape=record,label="{30\:\ 0x00ae|throw new java.lang.IllegalStateException(\"not attached to a buffer\")\l}"];
Node_31 [shape=record,label="{31\:\ 0x0039|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0040|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x006a|LOOP_END\lSYNTHETIC\lPHI: r7 \l  PHI: (r7v2 boolean) = (r7v1 boolean), (r7v7 boolean) binds: [B:35:0x006a, B:36:0x006a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:20:0x006a\-\>B:33:0x006a\l}"];
Node_34 [shape=record,label="{34\:\ 0x009a|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x006a|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x006a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public long okio.Buffer.UnsafeCursor.resizeBuffer((r12v0 'this' okio.Buffer$UnsafeCursor A[IMMUTABLE_TYPE, THIS]), (r13v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_32;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_31;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_34;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_35;
Node_24 -> Node_36;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_14;
Node_32 -> Node_15;
Node_33 -> Node_20;
Node_34 -> Node_25;
Node_35 -> Node_33;
Node_36 -> Node_33;
}

