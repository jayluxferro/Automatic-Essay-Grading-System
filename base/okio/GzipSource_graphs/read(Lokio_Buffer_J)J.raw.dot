digraph "CFG forokio.GzipSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:22:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:int) = (r11 I:okio.GzipSource) okio.GzipSource.section int \l0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r11 I:okio.GzipSource) okio.GzipSource.consumeHeader():void type: DIRECT \l0x0011: IPUT  (r1 I:int), (r11 I:okio.GzipSource) okio.GzipSource.section int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r0 I:int) = (r11 I:okio.GzipSource) okio.GzipSource.section int \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0016: CONST  (r3 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r7 I:long) = (r12 I:okio.Buffer) okio.Buffer.size long \l0x001c: IGET  (r0 I:okio.InflaterSource) = (r11 I:okio.GzipSource) okio.GzipSource.inflaterSource okio.InflaterSource \l0x001e: INVOKE  (r13 I:long) = \l  (r0 I:okio.InflaterSource)\l  (r12 I:okio.Buffer)\l  (r13 I:long)\l okio.InflaterSource.read(okio.Buffer, long):long type: VIRTUAL \l0x0022: CMP_L  (r0 I:int) = (r13 I:long), (r3 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0027: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r9 I:?[long, double]) = (r13 I:?[long, double]) \l0x0029: INVOKE  \l  (r5 I:okio.GzipSource)\l  (r6 I:okio.Buffer)\l  (r7 I:long)\l  (r9 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: RETURN  (r13 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IPUT  (r2 I:int), (r11 I:okio.GzipSource) okio.GzipSource.section int \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IGET  (r12 I:int) = (r11 I:okio.GzipSource) okio.GzipSource.section int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: INVOKE  (r11 I:okio.GzipSource) okio.GzipSource.consumeTrailer():void type: DIRECT \l0x0036: CONST  (r12 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0037: IPUT  (r12 I:int), (r11 I:okio.GzipSource) okio.GzipSource.section int \l0x0039: IGET  (r12 I:okio.BufferedSource) = (r11 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x003b: INVOKE  (r12 I:boolean) = (r12 I:okio.BufferedSource) okio.BufferedSource.exhausted():boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0042 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: NEW_INSTANCE  (r12 I:java.io.IOException) =  java.io.IOException \l0x0044: CONST_STR  (r13 I:java.lang.String) =  \"gzip finished without exhausting source\" \l0x0046: INVOKE  (r12 I:java.io.IOException), (r13 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|0x0049: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: RETURN  (r3 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: NEW_INSTANCE  (r12 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0052: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0054: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0057: INVOKE  (r0 I:java.lang.StringBuilder), (r13 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x005a: INVOKE  (r13 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005e: INVOKE  \l  (r12 I:java.lang.IllegalArgumentException)\l  (r13 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|0x0061: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.GzipSource.read((r11 'this' I:okio.GzipSource A[IMMUTABLE_TYPE, THIS]), (r12 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_22 -> Node_23;
}

