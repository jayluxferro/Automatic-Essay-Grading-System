digraph "CFG forokio.GzipSource.consumeTrailer()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"CRC\" \l0x0002: IGET  (r1 I:okio.BufferedSource) = (r4 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0004: INVOKE  (r1 I:int) = (r1 I:okio.BufferedSource) okio.BufferedSource.readIntLe():int type: INTERFACE \l0x0008: IGET  (r2 I:java.util.zip.CRC32) = (r4 I:okio.GzipSource) okio.GzipSource.crc java.util.zip.CRC32 \l0x000a: INVOKE  (r2 I:long) = (r2 I:java.util.zip.CRC32) java.util.zip.CRC32.getValue():long type: VIRTUAL \l0x000e: CAST  (r2 I:int) = (int) (r2 I:long) \l0x000f: INVOKE  \l  (r4 I:okio.GzipSource)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l okio.GzipSource.checkEqual(java.lang.String, int, int):void type: DIRECT \l0x0012: CONST_STR  (r0 I:java.lang.String) =  \"ISIZE\" \l0x0014: IGET  (r1 I:okio.BufferedSource) = (r4 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0016: INVOKE  (r1 I:int) = (r1 I:okio.BufferedSource) okio.BufferedSource.readIntLe():int type: INTERFACE \l0x001a: IGET  (r2 I:java.util.zip.Inflater) = (r4 I:okio.GzipSource) okio.GzipSource.inflater java.util.zip.Inflater \l0x001c: INVOKE  (r2 I:long) = (r2 I:java.util.zip.Inflater) java.util.zip.Inflater.getBytesWritten():long type: VIRTUAL \l0x0020: CAST  (r2 I:int) = (int) (r2 I:long) \l0x0021: INVOKE  \l  (r4 I:okio.GzipSource)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l okio.GzipSource.checkEqual(java.lang.String, int, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{private void okio.GzipSource.consumeTrailer((r4 'this' I:okio.GzipSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

