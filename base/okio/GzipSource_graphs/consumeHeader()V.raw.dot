digraph "CFG forokio.GzipSource.consumeHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0004: CONST  (r1 I:?[long, double]) = (10 ?[long, double]) \l0x0006: INVOKE  (r0 I:okio.BufferedSource), (r1 I:long) okio.BufferedSource.require(long):void type: INTERFACE \l0x0009: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x000b: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x000f: CONST  (r1 I:?[long, double]) = (3 ?[long, double]) \l0x0011: INVOKE  (r7 I:byte) = (r0 I:okio.Buffer), (r1 I:long) okio.Buffer.getByte(long):byte type: VIRTUAL \l0x0015: ARITH  (r0 I:int) = (r7 I:int) \>\> (1 int) \l0x0017: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0018: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r8 I:?[int, boolean, short, byte, char]) \l0x0019: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0030 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0023: INVOKE  (r1 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x0027: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0029: CONST  (r4 I:?[long, double]) = (10 ?[long, double]) \l0x002b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  \l  (r0 I:okio.GzipSource)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0032: INVOKE  (r0 I:short) = (r0 I:okio.BufferedSource) okio.BufferedSource.readShort():short type: INTERFACE \l0x0036: CONST_STR  (r1 I:java.lang.String) =  \"ID1ID2\" \l0x0038: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (8075(0x1f8b, float:1.1315E\-41) ?[int, float, short, byte, char])\l \l0x003a: INVOKE  \l  (r6 I:okio.GzipSource)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r0 I:int)\l okio.GzipSource.checkEqual(java.lang.String, int, int):void type: DIRECT \l0x003d: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x003f: CONST  (r1 I:?[long, double]) = (8 ?[long, double]) \l0x0041: INVOKE  (r0 I:okio.BufferedSource), (r1 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0044: ARITH  (r0 I:int) = (r7 I:int) \>\> (2 int) \l0x0046: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r8 I:?[int, boolean, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|0x0047: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0086 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|0x0049: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x004b: CONST  (r1 I:?[long, double]) = (2 ?[long, double]) \l0x004d: INVOKE  (r0 I:okio.BufferedSource), (r1 I:long) okio.BufferedSource.require(long):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|0x0050: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0061 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|0x0052: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0054: INVOKE  (r1 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x0058: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x005a: CONST  (r4 I:?[long, double]) = (2 ?[long, double]) \l0x005c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x005e: INVOKE  \l  (r0 I:okio.GzipSource)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0061|0x0061: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0063: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x0067: INVOKE  (r0 I:short) = (r0 I:okio.Buffer) okio.Buffer.readShortLe():short type: VIRTUAL \l0x006b: IGET  (r1 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x006d: CAST  (r11 I:long) = (long) (r0 I:int) \l0x006e: INVOKE  (r1 I:okio.BufferedSource), (r11 I:long) okio.BufferedSource.require(long):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0071|0x0071: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0081 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0073|0x0073: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0075: INVOKE  (r1 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x0079: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x007b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x007d: MOVE  (r4 I:?[long, double]) = (r11 I:?[long, double]) \l0x007e: INVOKE  \l  (r0 I:okio.GzipSource)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0081|0x0081: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0083: INVOKE  (r0 I:okio.BufferedSource), (r11 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0086|0x0086: ARITH  (r0 I:int) = (r7 I:int) \>\> (3 int) \l0x0088: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r8 I:?[int, boolean, short, byte, char]) \l0x0089: CONST  (r11 I:?[long, double]) = (\-1 ?[long, double]) \l0x008b: CONST  (r13 I:?[long, double]) = (1 ?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x008d|0x008d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00b8 \l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|0x008f: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x0091: INVOKE  (r15 I:long) = (r0 I:okio.BufferedSource), (r9 I:byte) okio.BufferedSource.indexOf(byte):long type: INTERFACE \l0x0095: CMP_L  (r0 I:int) = (r15 I:long), (r11 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0097|0x0097: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00b2 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0099|0x0099: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00aa \l}"];
Node_20 [shape=record,label="{20\:\ 0x009b|0x009b: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x009d: INVOKE  (r1 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x00a1: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x00a3: ARITH  (r4 I:long) = (r15 I:long) + (r13 I:long) \l0x00a5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00a7: INVOKE  \l  (r0 I:okio.GzipSource)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x00aa|0x00aa: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x00ac: ARITH  (r1 I:long) = (r15 I:long) + (r13 I:long) \l0x00ae: INVOKE  (r0 I:okio.BufferedSource), (r1 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b2|0x00b2: NEW_INSTANCE  (r0 I:java.io.EOFException) =  java.io.EOFException \l0x00b4: INVOKE  (r0 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b7|0x00b7: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00b8|0x00b8: ARITH  (r0 I:int) = (r7 I:int) \>\> (4 int) \l0x00ba: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r8 I:?[int, boolean, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00bb|0x00bb: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00e5 \l}"];
Node_26 [shape=record,label="{26\:\ 0x00bd|0x00bd: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x00bf: INVOKE  (r7 I:long) = (r0 I:okio.BufferedSource), (r9 I:byte) okio.BufferedSource.indexOf(byte):long type: INTERFACE \l0x00c3: CMP_L  (r0 I:int) = (r7 I:long), (r11 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c5|0x00c5: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00df \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c7|0x00c7: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00d8 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c9|0x00c9: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x00cb: INVOKE  (r1 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x00cf: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x00d1: ARITH  (r4 I:long) = (r7 I:long) + (r13 I:long) \l0x00d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00d5: INVOKE  \l  (r0 I:okio.GzipSource)\l  (r1 I:okio.Buffer)\l  (r2 I:long)\l  (r4 I:long)\l okio.GzipSource.updateCrc(okio.Buffer, long, long):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x00d8|0x00d8: IGET  (r0 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x00da: ARITH  (r7 I:long) = (r7 I:long) + (r13 I:long) \l0x00db: INVOKE  (r0 I:okio.BufferedSource), (r7 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_31 [shape=record,label="{31\:\ 0x00df|0x00df: NEW_INSTANCE  (r0 I:java.io.EOFException) =  java.io.EOFException \l0x00e1: INVOKE  (r0 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x00e4|0x00e4: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00e5|0x00e5: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00ff \l}"];
Node_34 [shape=record,label="{34\:\ 0x00e7|0x00e7: CONST_STR  (r0 I:java.lang.String) =  \"FHCRC\" \l0x00e9: IGET  (r1 I:okio.BufferedSource) = (r6 I:okio.GzipSource) okio.GzipSource.source okio.BufferedSource \l0x00eb: INVOKE  (r1 I:short) = (r1 I:okio.BufferedSource) okio.BufferedSource.readShortLe():short type: INTERFACE \l0x00ef: IGET  (r2 I:java.util.zip.CRC32) = (r6 I:okio.GzipSource) okio.GzipSource.crc java.util.zip.CRC32 \l0x00f1: INVOKE  (r2 I:long) = (r2 I:java.util.zip.CRC32) java.util.zip.CRC32.getValue():long type: VIRTUAL \l0x00f5: CAST  (r2 I:int) = (int) (r2 I:long) \l0x00f6: CAST  (r2 I:short) = (short) (r2 I:int) \l0x00f7: INVOKE  \l  (r6 I:okio.GzipSource)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l okio.GzipSource.checkEqual(java.lang.String, int, int):void type: DIRECT \l0x00fa: IGET  (r0 I:java.util.zip.CRC32) = (r6 I:okio.GzipSource) okio.GzipSource.crc java.util.zip.CRC32 \l0x00fc: INVOKE  (r0 I:java.util.zip.CRC32) java.util.zip.CRC32.reset():void type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ff|0x00ff: RETURN   \l}"];
MethodNode[shape=record,label="{private void okio.GzipSource.consumeHeader((r17 'this' I:okio.GzipSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
}

