digraph "CFG forokio.GzipSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r2 = (r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2 \< 0) goto L_0x004b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r2 != 0) goto L_0x0009\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r11.section != 0) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|consumeHeader()\lr11.section = 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013}"];
Node_8 [shape=record,label="{8\:\ 0x0018|if (r11.section != 1) goto L_0x002f\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|long r7 = r12.size\llong r13 = r11.inflaterSource.read(r12, r13)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|if ((r13 \> \-1 ? 1 : (r13 == \-1 ? 0 : \-1)) == 0) goto L_0x002d\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|updateCrc(r12, r7, r13)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|RETURN\l|return r13\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|r11.section = 2\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f}"];
Node_15 [shape=record,label="{15\:\ 0x0031|if (r11.section != 2) goto L_0x004a\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|consumeTrailer()\lr11.section = 3\l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|if (r11.source.exhausted() == false) goto L_0x0042\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042}"];
Node_19 [shape=record,label="{19\:\ 0x0049|throw new java.io.IOException(\"gzip finished without exhausting source\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|RETURN\l|return \-1\l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"byteCount \< 0: \")\lr0.append(r13)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0061|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public long okio.GzipSource.read((r11v0 'this' okio.GzipSource A[IMMUTABLE_TYPE, THIS]), (r12v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_21 -> Node_22;
}

