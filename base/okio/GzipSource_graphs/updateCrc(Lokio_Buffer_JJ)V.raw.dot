digraph "CFG forokio.GzipSource.updateCrc(Lokio\/Buffer;JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:okio.Segment) = (r5 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:int) = (r5 I:okio.Segment) okio.Segment.limit int \l0x0004: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0006: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0007: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0008: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r0 I:int) = (r5 I:okio.Segment) okio.Segment.limit int \l0x000e: IGET  (r1 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x0010: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0011: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0012: ARITH  (r6 I:long) = (r6 I:long) \- (r0 I:long) \l0x0013: IGET  (r5 I:okio.Segment) = (r5 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CMP_L  (r2 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r2 I:int) = (r5 I:okio.Segment) okio.Segment.pos int \l0x001e: CAST  (r2 I:long) = (long) (r2 I:int) \l0x001f: ARITH  (r2 I:long) = (r2 I:long) + (r6 I:long) \l0x0020: CAST  (r6 I:int) = (int) (r2 I:long) \l0x0021: IGET  (r7 I:int) = (r5 I:okio.Segment) okio.Segment.limit int \l0x0023: ARITH  (r7 I:int) = (r7 I:int) \- (r6 I:int) \l0x0024: CAST  (r2 I:long) = (long) (r7 I:int) \l0x0025: INVOKE  (r2 I:long) = (r2 I:long), (r8 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0029: CAST  (r7 I:int) = (int) (r2 I:long) \l0x002a: IGET  (r2 I:java.util.zip.CRC32) = (r4 I:okio.GzipSource) okio.GzipSource.crc java.util.zip.CRC32 \l0x002c: IGET  (r3 I:byte[]) = (r5 I:okio.Segment) okio.Segment.data byte[] \l0x002e: INVOKE  \l  (r2 I:java.util.zip.CRC32)\l  (r3 I:byte[])\l  (r6 I:int)\l  (r7 I:int)\l java.util.zip.CRC32.update(byte[], int, int):void type: VIRTUAL \l0x0031: CAST  (r6 I:long) = (long) (r7 I:int) \l0x0032: ARITH  (r8 I:long) = (r8 I:long) \- (r6 I:long) \l0x0033: IGET  (r5 I:okio.Segment) = (r5 I:okio.Segment) okio.Segment.next okio.Segment \l0x0035: MOVE  (r6 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: RETURN   \l}"];
MethodNode[shape=record,label="{private void okio.GzipSource.updateCrc((r4 'this' I:okio.GzipSource A[IMMUTABLE_TYPE, THIS]), (r5 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
}

