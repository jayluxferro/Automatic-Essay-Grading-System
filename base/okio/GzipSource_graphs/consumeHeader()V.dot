digraph "CFG forokio.GzipSource.consumeHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6 = r17\lr6.source.require(10)\lbyte r7 = r6.source.buffer().getByte(3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|if (((r7 \>\> 1) & 1) != 1) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|r10 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|r10 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|PHI: r10 \l  PHI: (r10v0 boolean) = (r10v1 boolean), (r10v2 boolean) binds: [B:3:0x001e, B:2:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|if (r10 == false) goto L_0x0030\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|okio.Buffer r1 = r6.source.buffer()\lupdateCrc(r1, 0, 10)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|checkEqual(\"ID1ID2\", 8075, r6.source.readShort())\lr6.source.skip(8)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|if (((r7 \>\> 2) & 1) != 1) goto L_0x0086\l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|r6.source.require(2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|if (r10 == false) goto L_0x0061\l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|okio.Buffer r1 = r6.source.buffer()\lupdateCrc(r1, 0, 2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0061|short r0 = r6.source.buffer().readShortLe()\llong r11 = (long) r0\lr6.source.require(r11)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0071|if (r10 == false) goto L_0x0081\l}"];
Node_13 [shape=record,label="{13\:\ 0x0073|okio.Buffer r1 = r6.source.buffer()\lupdateCrc(r1, 0, r11)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0081|r6.source.skip(r11)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0086}"];
Node_16 [shape=record,label="{16\:\ 0x008d|if (((r7 \>\> 3) & 1) != 1) goto L_0x00b8\l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|long r15 = r6.source.indexOf((byte) 0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0097|if ((r15 \> \-1 ? 1 : (r15 == \-1 ? 0 : \-1)) == 0) goto L_0x00b2\l}"];
Node_19 [shape=record,label="{19\:\ 0x0099|if (r10 == false) goto L_0x00aa\l}"];
Node_20 [shape=record,label="{20\:\ 0x009b|r0 = r17\lupdateCrc(r6.source.buffer(), 0, r15 + 1)\l}"];
Node_21 [shape=record,label="{21\:\ 0x00aa|r6.source.skip(r15 + 1)\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b2}"];
Node_23 [shape=record,label="{23\:\ 0x00b7|throw new java.io.EOFException()\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b8}"];
Node_25 [shape=record,label="{25\:\ 0x00bb|if (((r7 \>\> FCOMMENT) & 1) != 1) goto L_0x00e5\l}"];
Node_26 [shape=record,label="{26\:\ 0x00bd|long r7 = r6.source.indexOf((byte) 0)\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c5|if ((r7 \> \-1 ? 1 : (r7 == \-1 ? 0 : \-1)) == 0) goto L_0x00df\l}"];
Node_28 [shape=record,label="{28\:\ 0x00c7|if (r10 == false) goto L_0x00d8\l}"];
Node_29 [shape=record,label="{29\:\ 0x00c9|r0 = r17\lupdateCrc(r6.source.buffer(), 0, r7 + 1)\l}"];
Node_30 [shape=record,label="{30\:\ 0x00d8|r6.source.skip(r7 + 1)\l}"];
Node_31 [shape=record,label="{31\:\ 0x00df}"];
Node_32 [shape=record,label="{32\:\ 0x00e4|throw new java.io.EOFException()\l}"];
Node_33 [shape=record,label="{33\:\ 0x00e5|if (r10 == false) goto L_?\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e7|checkEqual(\"FHCRC\", r6.source.readShortLe(), (short) ((int) r6.crc.getValue()))\lr6.crc.reset()\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okio.GzipSource.consumeHeader((r17v0 'this' okio.GzipSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
}

