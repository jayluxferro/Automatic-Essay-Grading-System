digraph "CFG forokio.GzipSource.updateCrc(Lokio\/Buffer;JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Segment r5 = r5.head\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r5 r6 \l  PHI: (r5v2 okio.Segment) = (r5v1 okio.Segment), (r5v5 okio.Segment) binds: [B:0:0x0000, B:3:0x000c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 long) = (r6v0 long), (r6v6 long) binds: [B:0:0x0000, B:3:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:3:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if ((r6 \> ((long) (r5.limit \- r5.pos)) ? 1 : (r6 == ((long) (r5.limit \- r5.pos)) ? 0 : \-1)) \< 0) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:3:0x000c\l|long r6 = r6 \- ((long) (r5.limit \- r5.pos))\lokio.Segment r5 = r5.next\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x0018|LOOP_START\lPHI: r5 r6 r8 \l  PHI: (r5v3 okio.Segment) = (r5v2 okio.Segment), (r5v4 okio.Segment) binds: [B:4:0x0016, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 long) = (r6v1 long), (r6v5 long) binds: [B:4:0x0016, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 long) = (r8v0 long), (r8v2 long) binds: [B:4:0x0016, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0018\-\>B:7:0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \<= 0) goto L_0x0037\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|LOOP_END\lLOOP:1: B:5:0x0018\-\>B:7:0x001c\l|int r6 = (int) (((long) r5.pos) + r6)\lint r7 = (int) java.lang.Math.min((long) (r5.limit \- r6), r8)\lr4.crc.update(r5.data, r6, r7)\llong r8 = r8 \- ((long) r7)\lokio.Segment r5 = r5.next\lr6 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okio.GzipSource.updateCrc((r4v0 'this' okio.GzipSource A[IMMUTABLE_TYPE, THIS]), (r5v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_5;
Node_9 -> Node_4;
Node_10 -> Node_8;
}

