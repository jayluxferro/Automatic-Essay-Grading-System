digraph "CFG forokio.Pipe.PipeSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Buffer r0 = r8.this$0.buffer\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r8.this$0.sinkClosed != false) goto L_0x0052\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|LOOP_START\lPHI: r10 \l  PHI: (r10v2 long) = (r10v0 long), (r10v4 long) binds: [B:4:0x0009, B:22:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000b\-\>B:22:0x000b\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if ((r10 \> 0 ? 1 : (r10 == 0 ? 0 : \-1)) \<= 0) goto L_0x0050\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x0015|if (r8.this$0.sourceClosed != false) goto L_0x0048\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|long r3 = r8.this$0.maxBufferSize \- r8.this$0.buffer.size()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|if ((r3 \> 0 ? 1 : (r3 == 0 ? 0 : \-1)) != 0) goto L_0x0033\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|r8.timeout.waitUntilNotified(r8.this$0.buffer)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|long r1 = java.lang.Math.min(r3, r10)\lr8.this$0.buffer.write(r9, r1)\llong r10 = r10 \- r1\lr8.this$0.buffer.notifyAll()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0048}"];
Node_14 [shape=record,label="{14\:\ 0x004f|throw new java.io.IOException(\"source is closed\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|monitor\-exit(r0)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ 0x0052}"];
Node_18 [shape=record,label="{18\:\ 0x0059|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|REMOVE\l|java.lang.Throwable r9 = move\-exception\l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|REMOVE\l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|REMOVE\l|throw r9\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|LOOP_END\lSYNTHETIC\lPHI: r10 \l  PHI: (r10v4 long) = (r10v5 long), (r10v2 long) binds: [B:26:0x000b, B:25:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000b\-\>B:22:0x000b\l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSink.write((r8v0 'this' okio.Pipe$PipeSink A[IMMUTABLE_TYPE, THIS]), (r9v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_24;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_25;
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_5;
Node_23 -> Node_13;
Node_24 -> Node_15;
Node_25 -> Node_22;
Node_26 -> Node_22;
}

