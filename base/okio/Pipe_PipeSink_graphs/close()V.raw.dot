digraph "CFG forokio.Pipe.PipeSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe \l0x0002: IGET  (r0 I:okio.Buffer) = (r0 I:okio.Pipe) okio.Pipe.buffer okio.Buffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r1 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0038 \}, TRY_ENTER]\l0x0007: IGET  (r1 I:boolean) = (r1 I:okio.Pipe) okio.Pipe.sinkClosed boolean A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN   A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IGET  (r1 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0038 \}]\l0x000f: IGET  (r1 I:boolean) = (r1 I:okio.Pipe) okio.Pipe.sourceClosed boolean A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002a A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r1 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0038 \}]\l0x0015: IGET  (r1 I:okio.Buffer) = (r1 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x0038 \}]\l0x0017: INVOKE  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x0038 \}]\l0x001b: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0038 \}]\l0x001d: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0022 A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: GOTO  \-\> 0x002a A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0038 \}]\l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"source is closed\" A[Catch:\{ all \-\> 0x0038 \}]\l0x0026: INVOKE  (r1 I:java.io.IOException), (r2 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: IGET  (r1 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0038 \}]\l0x002c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0038 \}]\l0x002d: IPUT  (r2 I:boolean), (r1 I:okio.Pipe) okio.Pipe.sinkClosed boolean A[Catch:\{ all \-\> 0x0038 \}]\l0x002f: IGET  (r1 I:okio.Pipe) = (r5 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x0038 \}]\l0x0031: IGET  (r1 I:okio.Buffer) = (r1 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x0038 \}]\l0x0033: INVOKE  (r1 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: RETURN   A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x0038: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0038 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSink.close((r5 'this' I:okio.Pipe$PipeSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

