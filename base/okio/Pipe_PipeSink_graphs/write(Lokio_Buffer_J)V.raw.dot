digraph "CFG forokio.Pipe.PipeSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe \l0x0002: IGET  (r0 I:okio.Buffer) = (r0 I:okio.Pipe) okio.Pipe.buffer okio.Buffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r1 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}, TRY_ENTER]\l0x0007: IGET  (r1 I:boolean) = (r1 I:okio.Pipe) okio.Pipe.sinkClosed boolean A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0052 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x005a \}]\l0x000d: CMP_L  (r3 I:int) = (r10 I:long), (r1 I:long) A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0050 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r3 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x0013: IGET  (r3 I:boolean) = (r3 I:okio.Pipe) okio.Pipe.sourceClosed boolean A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0048 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IGET  (r3 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x0019: IGET  (r3 I:long) = (r3 I:okio.Pipe) okio.Pipe.maxBufferSize long A[Catch:\{ all \-\> 0x005a \}]\l0x001b: IGET  (r5 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x001d: IGET  (r5 I:okio.Buffer) = (r5 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x005a \}]\l0x001f: INVOKE  (r5 I:long) = (r5 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l0x0023: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x005a \}]\l0x0024: ARITH  (r3 I:long) = (r3 I:long) \- (r5 I:long) A[Catch:\{ all \-\> 0x005a \}]\l0x0025: CMP_L  (r1 I:int) = (r3 I:long), (r1 I:long) A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IGET  (r1 I:okio.Timeout) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.timeout okio.Timeout A[Catch:\{ all \-\> 0x005a \}]\l0x002b: IGET  (r2 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x002d: IGET  (r2 I:okio.Buffer) = (r2 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x005a \}]\l0x002f: INVOKE  (r1 I:okio.Timeout), (r2 I:java.lang.Object) okio.Timeout.waitUntilNotified(java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l0x0032: GOTO  \-\> 0x000b A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: INVOKE  (r1 I:long) = (r3 I:long), (r10 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x005a \}]\l0x0037: IGET  (r3 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x0039: IGET  (r3 I:okio.Buffer) = (r3 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x005a \}]\l0x003b: INVOKE  (r3 I:okio.Buffer), (r9 I:okio.Buffer), (r1 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l0x003e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x005a \}]\l0x003f: ARITH  (r10 I:long) = (r10 I:long) \- (r1 I:long) A[Catch:\{ all \-\> 0x005a \}]\l0x0040: IGET  (r1 I:okio.Pipe) = (r8 I:okio.Pipe$PipeSink) okio.Pipe.PipeSink.this$0 okio.Pipe A[Catch:\{ all \-\> 0x005a \}]\l0x0042: IGET  (r1 I:okio.Buffer) = (r1 I:okio.Pipe) okio.Pipe.buffer okio.Buffer A[Catch:\{ all \-\> 0x005a \}]\l0x0044: INVOKE  (r1 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l0x0047: GOTO  \-\> 0x000b A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: NEW_INSTANCE  (r9 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x005a \}]\l0x004a: CONST_STR  (r10 I:java.lang.String) =  \"source is closed\" A[Catch:\{ all \-\> 0x005a \}]\l0x004c: INVOKE  (r9 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: RETURN   A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: NEW_INSTANCE  (r9 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x005a \}]\l0x0054: CONST_STR  (r10 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x005a \}]\l0x0056: INVOKE  \l  (r9 I:java.lang.IllegalStateException)\l  (r10 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x005a: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|0x005b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005a \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|0x005c: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSink.write((r8 'this' I:okio.Pipe$PipeSink A[IMMUTABLE_TYPE, THIS]), (r9 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_5;
Node_12 -> Node_5;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

