digraph "CFG forokio.Pipe.PipeSink.flush()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Buffer r0 = r5.this$0.buffer\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r5.this$0.sinkClosed != false) goto L_0x002a\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r5.this$0.sourceClosed == false) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if ((r5.this$0.buffer.size() \> 0 ? 1 : (r5.this$0.buffer.size() == 0 ? 0 : \-1)) \> 0) goto L_0x0020\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0027|throw new java.io.IOException(\"source is closed\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|monitor\-exit(r0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a}"];
Node_15 [shape=record,label="{15\:\ 0x0031|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|REMOVE\l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSink.flush((r5v0 'this' okio.Pipe$PipeSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

