digraph "CFG forokio.Pipe.PipeSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Buffer r0 = r5.this$0.buffer\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r5.this$0.sinkClosed == false) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|monitor\-exit(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d}"];
Node_8 [shape=record,label="{8\:\ 0x0011|if (r5.this$0.sourceClosed == false) goto L_0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013}"];
Node_10 [shape=record,label="{10\:\ 0x001f|if ((r5.this$0.buffer.size() \> 0 ? 1 : (r5.this$0.buffer.size() == 0 ? 0 : \-1)) \> 0) goto L_0x0022\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021}"];
Node_12 [shape=record,label="{12\:\ 0x0022}"];
Node_13 [shape=record,label="{13\:\ 0x0029|throw new java.io.IOException(\"source is closed\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|r5.this$0.sinkClosed = true\lr5.this$0.buffer.notifyAll()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|monitor\-exit(r0)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|REMOVE\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public void okio.Pipe.PipeSink.close((r5v0 'this' okio.Pipe$PipeSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

