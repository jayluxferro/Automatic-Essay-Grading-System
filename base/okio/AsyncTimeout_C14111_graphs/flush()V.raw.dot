digraph "CFG forokio.AsyncTimeout.1.flush()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.AsyncTimeout) = (r3 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x0002: INVOKE  (r0 I:okio.AsyncTimeout) okio.AsyncTimeout.enter():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: IGET  (r0 I:okio.Sink) = (r3 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.val$sink okio.Sink A[Catch:\{ IOException \-\> 0x0013 \}, TRY_ENTER]\l0x0007: INVOKE  (r0 I:okio.Sink) okio.Sink.flush():void type: INTERFACE A[Catch:\{ IOException \-\> 0x0013 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: IGET  (r1 I:okio.AsyncTimeout) = (r3 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x000d: INVOKE  (r1 I:okio.AsyncTimeout), (r0 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|ExcHandler: all null\lSplitter:B:8:0x0014\l|0x0011: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|ExcHandler: IOException null\lSplitter:B:1:0x0005\l|0x0013: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|SYNTHETIC\lSplitter:B:8:0x0014\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0014\l|0x0014: IGET  (r1 I:okio.AsyncTimeout) = (r3 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout A[Catch:\{ all \-\> 0x0011 \}, TRY_ENTER]\l0x0016: INVOKE  (r0 I:java.io.IOException) = (r1 I:okio.AsyncTimeout), (r0 I:java.io.IOException) okio.AsyncTimeout.exit(java.io.IOException):java.io.IOException type: VIRTUAL A[Catch:\{ all \-\> 0x0011 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IGET  (r1 I:okio.AsyncTimeout) = (r3 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: INVOKE  (r1 I:okio.AsyncTimeout), (r2 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okio.AsyncTimeout.1.flush((r3 'this' I:okio.AsyncTimeout$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_5 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

