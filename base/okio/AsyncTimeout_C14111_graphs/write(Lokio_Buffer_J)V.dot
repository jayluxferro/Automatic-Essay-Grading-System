digraph "CFG forokio.AsyncTimeout.1.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount(r7.size, 0, r8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r8 \l  PHI: (r8v1 long) = (r8v0 long), (r8v4 long) binds: [B:0:0x0000, B:13:0x0032] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:13:0x0032\l|r0 = 0\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \<= 0) goto L_0x004b\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|okio.Segment r2 = r7.head\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v2 long) = (r0v1 long), (r0v5 long) binds: [B:3:0x000e, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v3 okio.Segment) = (r2v2 okio.Segment), (r2v6 okio.Segment) binds: [B:3:0x000e, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0010\-\>B:9:0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if ((r0 \> android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH ? 1 : (r0 == android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH ? 0 : \-1)) \>= 0) goto L_0x0027\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|long r0 = r0 + ((long) (r2.limit \- r2.pos))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if ((r0 \> r8 ? 1 : (r0 == r8 ? 0 : \-1)) \< 0) goto L_0x0024\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|r0 = r8\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|LOOP_END\lLOOP:1: B:4:0x0010\-\>B:9:0x0024\l|okio.Segment r2 = r2.next\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|PHI: r0 \l  PHI: (r0v3 long) = (r0v2 long), (r0v6 long) binds: [B:24:0x0027, B:8:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|r6.this$0.enter()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|SYNTHETIC\lSplitter:B:11:0x002d\l}"];
Node_12 [shape=record,label="{12\:\ ?|Catch:\{ IOException \-\> 0x003d, all \-\> 0x003b \}\lSplitter:B:11:0x002d\l|r2.write(r7, r0)     \/\/ Catch:\{ IOException \-\> 0x003d, all \-\> 0x003b \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:13:0x0032\l|long r8 = r8 \- r0\lr6.this$0.exit(true)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|ExcHandler: all (r7v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:16:0x003e\l|java.lang.Throwable r7 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|ExcHandler: IOException (r7v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:11:0x002d\l|java.io.IOException r7 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|SYNTHETIC\lSplitter:B:16:0x003e\l}"];
Node_17 [shape=record,label="{17\:\ ?|Catch:\{ IOException \-\> 0x003d, all \-\> 0x003b \}\lSplitter:B:16:0x003e\l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|Catch:\{ IOException \-\> 0x003d, all \-\> 0x003b \}\l|throw r6.this$0.exit(r7)     \/\/ Catch:\{ IOException \-\> 0x003d, all \-\> 0x003b \}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|r6.this$0.exit(false)\l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|throw r7\l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.AsyncTimeout.1.write((r6v0 'this' okio.AsyncTimeout$1 A[IMMUTABLE_TYPE, THIS]), (r7v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_23[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_1;
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_22 -> Node_21;
Node_23 -> Node_8;
Node_24 -> Node_10;
}

