digraph "CFG forokio.AsyncTimeout.1.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: MOVE  (r4 I:?[long, double]) = (r8 I:?[long, double]) \l0x0005: INVOKE  (r0 I:long), (r2 I:long), (r4 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000a: CMP_L  (r2 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x004b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r2 I:okio.Segment) = (r7 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r3 I:?[long, double]) = (65536(0x10000, double:3.2379E\-319) ?[long, double]) \l0x0013: CMP_L  (r3 I:int) = (r0 I:long), (r3 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r3 I:int) = (r2 I:okio.Segment) okio.Segment.limit int \l0x0019: IGET  (r4 I:int) = (r2 I:okio.Segment) okio.Segment.pos int \l0x001b: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x001c: CAST  (r3 I:long) = (long) (r3 I:int) \l0x001d: ARITH  (r0 I:long) = (r0 I:long) + (r3 I:long) \l0x001e: CMP_L  (r3 I:int) = (r0 I:long), (r8 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: MOVE  (r0 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IGET  (r2 I:okio.Segment) = (r2 I:okio.Segment) okio.Segment.next okio.Segment \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: IGET  (r3 I:okio.AsyncTimeout) = (r6 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x002a: INVOKE  (r3 I:okio.AsyncTimeout) okio.AsyncTimeout.enter():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|SYNTHETIC\lSplitter:B:11:0x002d\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x002d\l|0x002d: IGET  (r3 I:okio.Sink) = (r6 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.val$sink okio.Sink A[Catch:\{ IOException \-\> 0x003d \}, TRY_ENTER]\l0x002f: INVOKE  (r3 I:okio.Sink), (r7 I:okio.Buffer), (r0 I:long) okio.Sink.write(okio.Buffer, long):void type: INTERFACE A[Catch:\{ IOException \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: ARITH  (r8 I:long) = (r8 I:long) \- (r0 I:long) \l0x0034: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0035: IGET  (r1 I:okio.AsyncTimeout) = (r6 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x0037: INVOKE  (r1 I:okio.AsyncTimeout), (r0 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|ExcHandler: all null\lSplitter:B:17:0x003e\l|0x003b: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|ExcHandler: IOException null\lSplitter:B:11:0x002d\l|0x003d: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|SYNTHETIC\lSplitter:B:17:0x003e\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x003e\l|0x003e: IGET  (r8 I:okio.AsyncTimeout) = (r6 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout A[Catch:\{ all \-\> 0x003b \}, TRY_ENTER]\l0x0040: INVOKE  (r7 I:java.io.IOException) = (r8 I:okio.AsyncTimeout), (r7 I:java.io.IOException) okio.AsyncTimeout.exit(java.io.IOException):java.io.IOException type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: THROW  (r7 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003b \}, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IGET  (r8 I:okio.AsyncTimeout) = (r6 I:okio.AsyncTimeout$1) okio.AsyncTimeout.1.this$0 okio.AsyncTimeout \l0x0047: INVOKE  (r8 I:okio.AsyncTimeout), (r2 I:boolean) okio.AsyncTimeout.exit(boolean):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: RETURN   \l}"];
MethodNode[shape=record,label="{public void okio.AsyncTimeout.1.write((r6 'this' I:okio.AsyncTimeout$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_1;
Node_14 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

