digraph "CFG forokio.Util.checkOffsetAndCount(JJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:long) = (r6 I:long) \| (r8 I:long) \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CMP_L  (r0 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r0 I:long) = (r4 I:long) \- (r6 I:long) \l0x000e: CMP_L  (r0 I:int) = (r0 I:long), (r8 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x0015: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0016: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: INVOKE  (r4 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x001d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x001f: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: INVOKE  (r5 I:java.lang.Long) = (r6 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0024: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0026: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0027: INVOKE  (r5 I:java.lang.Long) = (r8 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x002b: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x002d: CONST_STR  (r4 I:java.lang.String) =  \"size=%s offset=%s byteCount=%s\" \l0x002f: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r1 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0033: INVOKE  \l  (r0 I:java.lang.ArrayIndexOutOfBoundsException)\l  (r4 I:java.lang.String)\l java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void okio.Util.checkOffsetAndCount((r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
}

