digraph "CFG forokio.Util.reverseBytesInt(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-16777216(0xffffffffff000000, float:\-1.7014118E38) ?[int, float, short, byte, char])\l \l0x0002: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) \>\>\> (24 int) \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (16711680(0xff0000, float:2.3418052E\-38) ?[int, float, short, byte, char])\l \l0x0007: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x0008: ARITH  (r1 I:int) = (r1 I:int) \>\>\> (8 int) \l0x000a: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (65280(0xff00, float:9.1477E\-41) ?[int, float, short, byte, char])\l \l0x000e: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x000f: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) \l0x0011: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0012: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) \<\< (24 int) \l0x0016: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int okio.Util.reverseBytesInt((r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

