digraph "CFG forokio.Util.arrayRangeEquals([BI[BII)Z" {
subgraph cluster_Region_983420449 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
subgraph cluster_LoopRegion_1347015782 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000f\l|if (r1 \< r8) goto L_0x0004\l}"];
subgraph cluster_Region_995287690 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_699735115 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1989704646 {
label = "IF [B:3:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r4[r1 + r5] != r6[r1 + r7]) goto L_0x000e\l}"];
subgraph cluster_Region_1077984549 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_440244918 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000f\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0012|RETURN\l|return true\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0012|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static boolean okio.Util.arrayRangeEquals((r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

