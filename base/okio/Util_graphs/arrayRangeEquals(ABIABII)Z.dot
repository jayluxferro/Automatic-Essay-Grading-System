digraph "CFG forokio.Util.arrayRangeEquals([BI[BII)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000f\l|if (r1 \>= r8) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r4[r1 + r5] == r6[r1 + r7]) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return false\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000f\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|RETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static boolean okio.Util.arrayRangeEquals((r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_8[style=dashed];
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

