digraph "CFG forokio.Util.arrayRangeEquals([BI[BII)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: ARITH  (r2 I:int) = (r1 I:int) + (r5 I:int) \l0x0006: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0008: ARITH  (r3 I:int) = (r1 I:int) + (r7 I:int) \l0x000a: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r6 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean okio.Util.arrayRangeEquals((r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

