digraph "CFG forokio.RealBufferedSource.1.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.RealBufferedSource) = (r7 I:okio.RealBufferedSource$1) okio.RealBufferedSource.1.this$0 okio.RealBufferedSource \l0x0002: IGET  (r0 I:boolean) = (r0 I:okio.RealBufferedSource) okio.RealBufferedSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r0 I:int) = (r8 I:?[]) \l0x0007: CAST  (r1 I:long) = (long) (r0 I:int) \l0x0008: CAST  (r3 I:long) = (long) (r9 I:int) \l0x0009: CAST  (r5 I:long) = (long) (r10 I:int) \l0x000a: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x000d: IGET  (r0 I:okio.RealBufferedSource) = (r7 I:okio.RealBufferedSource$1) okio.RealBufferedSource.1.this$0 okio.RealBufferedSource \l0x000f: IGET  (r0 I:okio.Buffer) = (r0 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0011: IGET  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0013: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0015: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:okio.RealBufferedSource) = (r7 I:okio.RealBufferedSource$1) okio.RealBufferedSource.1.this$0 okio.RealBufferedSource \l0x001b: IGET  (r0 I:okio.Source) = (r0 I:okio.RealBufferedSource) okio.RealBufferedSource.source okio.Source \l0x001d: IGET  (r1 I:okio.RealBufferedSource) = (r7 I:okio.RealBufferedSource$1) okio.RealBufferedSource.1.this$0 okio.RealBufferedSource \l0x001f: IGET  (r1 I:okio.Buffer) = (r1 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0021: CONST  (r2 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0023: INVOKE  (r0 I:long) = (r0 I:okio.Source), (r1 I:okio.Buffer), (r2 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE \l0x0027: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0029: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002f \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: RETURN  (r8 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IGET  (r0 I:okio.RealBufferedSource) = (r7 I:okio.RealBufferedSource$1) okio.RealBufferedSource.1.this$0 okio.RealBufferedSource \l0x0031: IGET  (r0 I:okio.Buffer) = (r0 I:okio.RealBufferedSource) okio.RealBufferedSource.buffer okio.Buffer \l0x0033: INVOKE  (r8 I:int) = (r0 I:okio.Buffer), (r8 I:byte[]), (r9 I:int), (r10 I:int) okio.Buffer.read(byte[], int, int):int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN  (r8 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: NEW_INSTANCE  (r8 I:java.io.IOException) =  java.io.IOException \l0x003a: CONST_STR  (r9 I:java.lang.String) =  \"closed\" \l0x003c: INVOKE  (r8 I:java.io.IOException), (r9 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int okio.RealBufferedSource.1.read((r7 'this' I:okio.RealBufferedSource$1 A[IMMUTABLE_TYPE, THIS]), (r8 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

