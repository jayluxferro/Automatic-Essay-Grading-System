digraph "CFG forokio.DeflaterSink.deflate(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.BufferedSink) = (r7 I:okio.DeflaterSink) okio.DeflaterSink.sink okio.BufferedSink \l0x0002: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.BufferedSink) okio.BufferedSink.buffer():okio.Buffer type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: INVOKE  (r1 I:okio.Segment) = (r0 I:okio.Buffer), (r1 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r2 I:java.util.zip.Deflater) = (r7 I:okio.DeflaterSink) okio.DeflaterSink.deflater java.util.zip.Deflater \l0x000f: IGET  (r3 I:byte[]) = (r1 I:okio.Segment) okio.Segment.data byte[] \l0x0011: IGET  (r4 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0013: IGET  (r5 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0015: ARITH  (r5 I:int) = (8192 int) \- (r5 I:int) \l0x0017: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0018: INVOKE  (r2 I:int) = \l  (r2 I:java.util.zip.Deflater)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l java.util.zip.Deflater.deflate(byte[], int, int, int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IGET  (r2 I:java.util.zip.Deflater) = (r7 I:okio.DeflaterSink) okio.DeflaterSink.deflater java.util.zip.Deflater \l0x001f: IGET  (r3 I:byte[]) = (r1 I:okio.Segment) okio.Segment.data byte[] \l0x0021: IGET  (r4 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0023: IGET  (r5 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x0025: ARITH  (r5 I:int) = (8192 int) \- (r5 I:int) \l0x0027: INVOKE  (r2 I:int) = \l  (r2 I:java.util.zip.Deflater)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r5 I:int)\l java.util.zip.Deflater.deflate(byte[], int, int):int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x003e \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IGET  (r3 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l0x002f: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x0030: IPUT  (r3 I:int), (r1 I:okio.Segment) okio.Segment.limit int \l0x0032: IGET  (r3 I:long) = (r0 I:okio.Buffer) okio.Buffer.size long \l0x0034: CAST  (r1 I:long) = (long) (r2 I:int) \l0x0035: ARITH  (r3 I:long) = (r3 I:long) + (r1 I:long) \l0x0036: IPUT  (r3 I:long), (r0 I:okio.Buffer) okio.Buffer.size long \l0x0038: IGET  (r1 I:okio.BufferedSink) = (r7 I:okio.DeflaterSink) okio.DeflaterSink.sink okio.BufferedSink \l0x003a: INVOKE  (r1 I:okio.BufferedSink) okio.BufferedSink.emitCompleteSegments():okio.BufferedSink type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: IGET  (r2 I:java.util.zip.Deflater) = (r7 I:okio.DeflaterSink) okio.DeflaterSink.deflater java.util.zip.Deflater \l0x0040: INVOKE  (r2 I:boolean) = (r2 I:java.util.zip.Deflater) java.util.zip.Deflater.needsInput():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IGET  (r8 I:int) = (r1 I:okio.Segment) okio.Segment.pos int \l0x0048: IGET  (r2 I:int) = (r1 I:okio.Segment) okio.Segment.limit int \l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|0x004a: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0055 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: INVOKE  (r8 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL \l0x0050: IPUT  (r8 I:okio.Segment), (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0052: INVOKE  (r1 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: RETURN   \l}"];
MethodNode[shape=record,label="{private void okio.DeflaterSink.deflate((r7 'this' I:okio.DeflaterSink A[IMMUTABLE_TYPE, THIS]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[BUILD, org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

