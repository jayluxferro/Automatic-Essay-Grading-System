digraph "CFG forokio.DeflaterSink.write(Lokio\/Buffer;J)V" {
subgraph cluster_Region_364712072 {
label = "R(2:0|(3:3|(1:5)(0)|6))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount(r7.size, 0, r8)\l}"];
subgraph cluster_LoopRegion_567997669 {
label = "LOOP:0: (3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r8 \> 0) goto L_0x000e\l}"];
subgraph cluster_Region_679960166 {
label = "R(3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|okio.Segment okio.Segment r0 = r7.head\lint int r1 = (int) java.lang.Math.min(r8, (long) (r0.limit \- r0.pos))\lr6.deflater.setInput(r0.data, r0.pos, r1)\ldeflate(false)\llong long r4 = (long) r1\lr7.size \-= r4\lr0.pos += r1\l}"];
subgraph cluster_IfRegion_1197273636 {
label = "IF [B:4:0x0037] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0037|if (r0.pos == r0.limit) goto L_0x0039\l}"];
subgraph cluster_Region_587956800 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0039|r7.head = r0.pop()\lokio.SegmentPool.recycle(r0)\l}"];
}
subgraph cluster_Region_1774758163 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x0042|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:6:0x0042\l|r8 \-= r4\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0008|LOOP_START\lPHI: r8 \l  PHI: (r8v1 long) = (r8v0 long), (r8v2 long) binds: [B:0:0x0000, B:6:0x0042] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:6:0x0042\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0045}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0045|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0042|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.DeflaterSink.write((r6v0 'this' okio.DeflaterSink A[IMMUTABLE_TYPE, THIS]), (r7v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

