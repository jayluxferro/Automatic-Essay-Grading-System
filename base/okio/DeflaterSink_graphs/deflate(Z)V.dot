digraph "CFG forokio.DeflaterSink.deflate(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Buffer r0 = r7.sink.buffer()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:12:0x0006\l|okio.Segment r1 = r0.writableSegment(1)\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r8 == false) goto L_0x001d\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|int r2 = r7.deflater.deflate(r1.data, r1.limit, 8192 \- r1.limit, 2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|int r2 = r7.deflater.deflate(r1.data, r1.limit, 8192 \- r1.limit)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|PHI: r2 \l  PHI: (r2v0 int) = (r2v5 int), (r2v7 int) binds: [B:4:0x001d, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \<= 0) goto L_0x003e\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|r1.limit = r1.limit + r2\lr0.size = r0.size + ((long) r2)\lr7.sink.emitCompleteSegments()\l}"];
Node_7 [shape=record,label="{7\:\ 0x003e}"];
Node_8 [shape=record,label="{8\:\ 0x0044|if (r7.deflater.needsInput() == false) goto L_0x0006\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046}"];
Node_10 [shape=record,label="{10\:\ 0x004a|if (r1.pos != r1.limit) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|r0.head = r1.pop()\lokio.SegmentPool.recycle(r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0006\-\>B:12:0x0006\l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okio.DeflaterSink.deflate((r7v0 'this' okio.DeflaterSink A[IMMUTABLE_TYPE, THIS]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[BUILD, org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_13[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_16;
Node_12 -> Node_1;
Node_13 -> Node_9;
Node_14 -> Node_12;
Node_15 -> Node_12;
}

