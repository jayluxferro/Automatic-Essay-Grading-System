digraph "CFG forokio.Okio.source(Ljava\/nio\/file\/Path;[Ljava\/nio\/file\/OpenOption;)Lokio\/Source;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:java.io.InputStream) = \l  (r0 I:java.nio.file.Path)\l  (r1 I:java.nio.file.OpenOption[])\l java.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.InputStream type: STATIC \l0x0006: INVOKE  (r0 I:okio.Source) = (r0 I:java.io.InputStream) okio.Okio.source(java.io.InputStream):okio.Source type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  (r0 I:okio.Source) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"path == null\" \l0x000f: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okio.Source okio.Okio.source((r0 I:java.nio.file.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.nio.file.OpenOption[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[BUILD, org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

