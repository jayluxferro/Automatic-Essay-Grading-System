digraph "CFG forokio.Okio.appendingSink(Ljava\/io\/File;)Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r0 I:java.io.FileOutputStream) =  java.io.FileOutputStream \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: INVOKE  \l  (r0 I:java.io.FileOutputStream)\l  (r2 I:java.io.File)\l  (r1 I:boolean)\l java.io.FileOutputStream.\<init\>(java.io.File, boolean):void type: DIRECT \l0x0008: INVOKE  (r2 I:okio.Sink) = (r0 I:java.io.OutputStream) okio.Okio.sink(java.io.OutputStream):okio.Sink type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r2 I:okio.Sink) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"file == null\" \l0x0011: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okio.Sink okio.Okio.appendingSink((r2 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.FileNotFoundException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

