digraph "CFG forokio.Okio.source(Ljava\/net\/Socket;)Lokio\/Source;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:java.io.InputStream) = (r1 I:java.net.Socket) java.net.Socket.getInputStream():java.io.InputStream type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:okio.AsyncTimeout) = (r1 I:java.net.Socket) okio.Okio.timeout(java.net.Socket):okio.AsyncTimeout type: STATIC \l0x000c: INVOKE  (r1 I:java.io.InputStream) = (r1 I:java.net.Socket) java.net.Socket.getInputStream():java.io.InputStream type: VIRTUAL \l0x0010: INVOKE  (r1 I:okio.Source) = (r1 I:java.io.InputStream), (r0 I:okio.Timeout) okio.Okio.source(java.io.InputStream, okio.Timeout):okio.Source type: STATIC \l0x0014: INVOKE  (r1 I:okio.Source) = (r0 I:okio.AsyncTimeout), (r1 I:okio.Source) okio.AsyncTimeout.source(okio.Source):okio.Source type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN  (r1 I:okio.Source) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: NEW_INSTANCE  (r1 I:java.io.IOException) =  java.io.IOException \l0x001b: CONST_STR  (r0 I:java.lang.String) =  \"socket's input stream == null\" \l0x001d: INVOKE  (r1 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"socket == null\" \l0x0025: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okio.Source okio.Okio.source((r1 I:java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

