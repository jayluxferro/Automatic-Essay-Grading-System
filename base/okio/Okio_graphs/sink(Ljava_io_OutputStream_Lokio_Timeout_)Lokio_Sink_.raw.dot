digraph "CFG forokio.Okio.sink(Ljava\/io\/OutputStream;Lokio\/Timeout;)Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:okio.Okio$1) =  okio.Okio$1 \l0x0006: INVOKE  \l  (r0 I:okio.Okio$1)\l  (r2 I:okio.Timeout)\l  (r1 I:java.io.OutputStream)\l okio.Okio.1.\<init\>(okio.Timeout, java.io.OutputStream):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:okio.Sink) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000c: CONST_STR  (r2 I:java.lang.String) =  \"timeout == null\" \l0x000e: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0014: CONST_STR  (r2 I:java.lang.String) =  \"out == null\" \l0x0016: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static okio.Sink okio.Okio.sink((r1 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okio.Timeout A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

