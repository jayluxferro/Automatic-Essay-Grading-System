digraph "CFG forokio.InflaterSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:31:0x0078 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r3 I:boolean) = (r6 I:okio.InflaterSource) okio.InflaterSource.closed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0070 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) = (r6 I:okio.InflaterSource) okio.InflaterSource.refill():boolean type: VIRTUAL \l0x0011: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\lSplitter:B:7:0x0012\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0012\l|0x0012: INVOKE  (r1 I:okio.Segment) = (r7 I:okio.Buffer), (r1 I:int) okio.Buffer.writableSegment(int):okio.Segment type: VIRTUAL A[Catch:\{ DataFormatException \-\> 0x0069 \}, TRY_ENTER]\l0x0016: IGET  (r2 I:int) = (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0018: ARITH  (r2 I:int) = (8192 int) \- (r2 I:int) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x001a: CAST  (r2 I:long) = (long) (r2 I:int) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x001b: INVOKE  (r2 I:long) = (r8 I:long), (r2 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x001f: CAST  (r2 I:int) = (int) (r2 I:long) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0020: IGET  (r3 I:java.util.zip.Inflater) = (r6 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0022: IGET  (r4 I:byte[]) = (r1 I:okio.Segment) okio.Segment.data byte[] A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0024: IGET  (r5 I:int) = (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0026: INVOKE  (r2 I:int) = \l  (r3 I:java.util.zip.Inflater)\l  (r4 I:byte[])\l  (r5 I:int)\l  (r2 I:int)\l java.util.zip.Inflater.inflate(byte[], int, int):int type: VIRTUAL A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0038 A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r8 I:int) = (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x002e: ARITH  (r8 I:int) = (r8 I:int) + (r2 I:int) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x002f: IPUT  (r8 I:int), (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0031: IGET  (r8 I:long) = (r7 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0033: CAST  (r0 I:long) = (long) (r2 I:int) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0034: ARITH  (r8 I:long) = (r8 I:long) + (r0 I:long) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0035: IPUT  (r8 I:long), (r7 I:okio.Buffer) okio.Buffer.size long A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: RETURN  (r0 I:long) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IGET  (r2 I:java.util.zip.Inflater) = (r6 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x003a: INVOKE  (r2 I:boolean) = (r2 I:java.util.zip.Inflater) java.util.zip.Inflater.finished():boolean type: VIRTUAL A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0054 A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IGET  (r2 I:java.util.zip.Inflater) = (r6 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0042: INVOKE  (r2 I:boolean) = (r2 I:java.util.zip.Inflater) java.util.zip.Inflater.needsDictionary():boolean type: VIRTUAL A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0049 A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: GOTO  \-\> 0x0054 A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004c A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|0x004b: GOTO  \-\> 0x000d A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|0x004c: NEW_INSTANCE  (r7 I:java.io.EOFException) =  java.io.EOFException A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x004e: CONST_STR  (r8 I:java.lang.String) =  \"source exhausted prematurely\" A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0050: INVOKE  (r7 I:java.io.EOFException), (r8 I:java.lang.String) java.io.EOFException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|0x0053: THROW  (r7 I:java.lang.Throwable) A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|0x0054: INVOKE  (r6 I:okio.InflaterSource) okio.InflaterSource.releaseInflatedBytes():void type: DIRECT A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0057: IGET  (r8 I:int) = (r1 I:okio.Segment) okio.Segment.pos int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0059: IGET  (r9 I:int) = (r1 I:okio.Segment) okio.Segment.limit int A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|0x005b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0066 A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|0x005d: INVOKE  (r8 I:okio.Segment) = (r1 I:okio.Segment) okio.Segment.pop():okio.Segment type: VIRTUAL A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0061: IPUT  (r8 I:okio.Segment), (r7 I:okio.Buffer) okio.Buffer.head okio.Segment A[Catch:\{ DataFormatException \-\> 0x0069 \}]\l0x0063: INVOKE  (r1 I:okio.Segment) okio.SegmentPool.recycle(okio.Segment):void type: STATIC A[Catch:\{ DataFormatException \-\> 0x0069 \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: CONST  (r7 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: RETURN  (r7 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|ExcHandler: DataFormatException null\lSplitter:B:7:0x0012\l|0x0069: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x006a|0x006a: NEW_INSTANCE  (r8 I:java.io.IOException) =  java.io.IOException \l0x006c: INVOKE  (r8 I:java.io.IOException), (r7 I:java.lang.Throwable) java.io.IOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x006f|0x006f: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0070|0x0070: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0072: CONST_STR  (r8 I:java.lang.String) =  \"closed\" \l0x0074: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r8 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0077|0x0077: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0078|0x0078: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007a: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007c: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007f: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0081: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0084: INVOKE  (r0 I:java.lang.StringBuilder), (r8 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0087: INVOKE  (r8 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008b: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x008e|0x008e: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okio.InflaterSource.read((r6 'this' I:okio.InflaterSource A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_29;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_26;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_21;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_6;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

