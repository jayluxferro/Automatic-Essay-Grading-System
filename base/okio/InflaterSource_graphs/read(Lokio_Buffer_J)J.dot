digraph "CFG forokio.InflaterSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r2 = (r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2 \< 0) goto L_0x0078\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r6.closed != false) goto L_0x0070\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r2 != 0) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|RETURN\l|return 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|LOOP_START\lLOOP:0: B:6:0x000d\-\>B:18:0x004b\l|boolean r0 = refill()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\lSplitter:B:7:0x0012\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ DataFormatException \-\> 0x0069 \}\lSplitter:B:7:0x0012\l|okio.Segment r1 = r7.writableSegment(1)     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\ljava.util.zip.Inflater r3 = r6.inflater     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\lbyte[] r4 = r1.data     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\lint r5 = r1.limit     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\lint r2 = r3.inflate(r4, r5, (int) java.lang.Math.min(r8, (long) (8192 \- r1.limit)))     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|Catch:\{ DataFormatException \-\> 0x0069 \}\l|if (r2 \<= 0) goto L_0x0038     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|Catch:\{ DataFormatException \-\> 0x0069 \}\l|r1.limit = r1.limit + r2     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\llong r0 = (long) r2     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\lr7.size = r7.size + r0     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|RETURN\lCatch:\{ DataFormatException \-\> 0x0069 \}\l|return r0     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|Catch:\{ DataFormatException \-\> 0x0069 \}\l|if (r6.inflater.finished() != false) goto L_0x0054     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|Catch:\{ DataFormatException \-\> 0x0069 \}\l|if (r6.inflater.needsDictionary() == false) goto L_0x0049     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|Catch:\{ DataFormatException \-\> 0x0069 \}\l|if (r0 != false) goto L_0x004c     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|LOOP_END\lCatch:\{ DataFormatException \-\> 0x0069 \}\lLOOP:0: B:6:0x000d\-\>B:18:0x004b\l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|Catch:\{ DataFormatException \-\> 0x0069 \}\l|throw new java.io.EOFException(\"source exhausted prematurely\")     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|Catch:\{ DataFormatException \-\> 0x0069 \}\l|releaseInflatedBytes()     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|Catch:\{ DataFormatException \-\> 0x0069 \}\l|if (r1.pos != r1.limit) goto L_?     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|Catch:\{ DataFormatException \-\> 0x0069 \}\l|r7.head = r1.pop()     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\lokio.SegmentPool.recycle(r1)     \/\/ Catch:\{ DataFormatException \-\> 0x0069 \}\l}"];
Node_24 [shape=record,label="{24\:\ 0x0069|ExcHandler: DataFormatException (r7v3 'e' java.util.zip.DataFormatException A[CUSTOM_DECLARE])\lSplitter:B:7:0x0012\l|java.util.zip.DataFormatException r7 = move\-exception\l}"];
Node_25 [shape=record,label="{25\:\ 0x006a}"];
Node_26 [shape=record,label="{26\:\ 0x006f|throw new java.io.IOException(r7)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0070}"];
Node_28 [shape=record,label="{28\:\ 0x0077|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x0078|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"byteCount \< 0: \")\lr0.append(r8)\l}"];
Node_30 [shape=record,label="{30\:\ 0x008e|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_31 [shape=record,label="{31\:\ 0x0048|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x004c|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x002c|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0054|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public long okio.InflaterSource.read((r6v0 'this' okio.InflaterSource A[IMMUTABLE_TYPE, THIS]), (r7v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_24;
Node_8 -> Node_9;
Node_9 -> Node_12;
Node_9 -> Node_33[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_34;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_31[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_32;
Node_18 -> Node_6;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_36;
Node_23 -> Node_35;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_16;
Node_32 -> Node_19;
Node_33 -> Node_10;
Node_34 -> Node_21;
}

