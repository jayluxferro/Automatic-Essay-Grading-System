digraph "CFG forokio.InflaterSource.refill()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.zip.Inflater) = (r5 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.zip.Inflater) java.util.zip.Inflater.needsInput():boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r5 I:okio.InflaterSource) okio.InflaterSource.releaseInflatedBytes():void type: DIRECT \l0x000d: IGET  (r0 I:java.util.zip.Inflater) = (r5 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater \l0x000f: INVOKE  (r0 I:int) = (r0 I:java.util.zip.Inflater) java.util.zip.Inflater.getRemaining():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r0 I:okio.BufferedSource) = (r5 I:okio.InflaterSource) okio.InflaterSource.source okio.BufferedSource \l0x0017: INVOKE  (r0 I:boolean) = (r0 I:okio.BufferedSource) okio.BufferedSource.exhausted():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IGET  (r0 I:okio.BufferedSource) = (r5 I:okio.InflaterSource) okio.InflaterSource.source okio.BufferedSource \l0x0021: INVOKE  (r0 I:okio.Buffer) = (r0 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x0025: IGET  (r0 I:okio.Segment) = (r0 I:okio.Buffer) okio.Buffer.head okio.Segment \l0x0027: IGET  (r2 I:int) = (r0 I:okio.Segment) okio.Segment.limit int \l0x0029: IGET  (r3 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x002b: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x002c: IPUT  (r2 I:int), (r5 I:okio.InflaterSource) okio.InflaterSource.bufferBytesHeldByInflater int \l0x002e: IGET  (r2 I:java.util.zip.Inflater) = (r5 I:okio.InflaterSource) okio.InflaterSource.inflater java.util.zip.Inflater \l0x0030: IGET  (r3 I:byte[]) = (r0 I:okio.Segment) okio.Segment.data byte[] \l0x0032: IGET  (r0 I:int) = (r0 I:okio.Segment) okio.Segment.pos int \l0x0034: IGET  (r4 I:int) = (r5 I:okio.InflaterSource) okio.InflaterSource.bufferBytesHeldByInflater int \l0x0036: INVOKE  \l  (r2 I:java.util.zip.Inflater)\l  (r3 I:byte[])\l  (r0 I:int)\l  (r4 I:int)\l java.util.zip.Inflater.setInput(byte[], int, int):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x003c: CONST_STR  (r1 I:java.lang.String) =  \"?\" \l0x003e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean okio.InflaterSource.refill((r5 'this' I:okio.InflaterSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

