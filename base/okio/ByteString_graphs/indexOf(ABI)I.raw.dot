digraph "CFG forokio.ByteString.indexOf([BI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r6 I:int) = (r6 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0005: IGET  (r1 I:byte[]) = (r4 I:okio.ByteString) okio.ByteString.data byte[] \l0x0007: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0008: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[]) \l0x0009: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r6 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r2 I:byte[]) = (r4 I:okio.ByteString) okio.ByteString.data byte[] \l0x000e: ARRAY_LENGTH  (r3 I:int) = (r5 I:?[]) \l0x000f: INVOKE  (r2 I:boolean) = \l  (r2 I:byte[])\l  (r6 I:int)\l  (r5 I:byte[])\l  (r0 I:int)\l  (r3 I:int)\l okio.Util.arrayRangeEquals(byte[], int, byte[], int, int):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r6 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.ByteString.indexOf((r4 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

