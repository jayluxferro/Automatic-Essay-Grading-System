digraph "CFG forokio.ByteString.codePointIndexToCharIndex(Ljava\/lang\/String;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:15:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r3 I:int) = (r5 I:java.lang.String), (r1 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l0x000f: INVOKE  (r4 I:boolean) = (r3 I:int) java.lang.Character.isISOControl(int):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: CONST  (r4 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (65533(0xfffd, float:9.1831E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0024 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: RETURN  (r5 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0026: INVOKE  (r3 I:int) = (r3 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x002a: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: INVOKE  (r5 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{static int okio.ByteString.codePointIndexToCharIndex((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_1;
Node_15 -> Node_16;
}

