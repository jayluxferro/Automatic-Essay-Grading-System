digraph "CFG forokio.ByteString.substring(II)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:byte[]) = (r3 I:okio.ByteString) okio.ByteString.data byte[] \l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r5 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: ARITH  (r0 I:int) = (r5 I:int) \- (r4 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r1 I:byte[]) = (r3 I:okio.ByteString) okio.ByteString.data byte[] \l0x000f: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r3 I:okio.ByteString) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: NEW_ARRAY  (r5 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0015: IGET  (r1 I:byte[]) = (r3 I:okio.ByteString) okio.ByteString.data byte[] \l0x0017: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: INVOKE  \l  (r1 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:java.lang.Object)\l  (r2 I:int)\l  (r0 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x001b: NEW_INSTANCE  (r4 I:okio.ByteString) =  okio.ByteString \l0x001d: INVOKE  (r4 I:okio.ByteString), (r5 I:byte[]) okio.ByteString.\<init\>(byte[]):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: RETURN  (r4 I:okio.ByteString) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r5 I:java.lang.String) =  \"endIndex \< beginIndex\" \l0x0025: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002b: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002d: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0030: CONST_STR  (r0 I:java.lang.String) =  \"endIndex \> length(\" \l0x0032: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0035: IGET  (r0 I:byte[]) = (r3 I:okio.ByteString) okio.ByteString.data byte[] \l0x0037: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0038: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x003b: CONST_STR  (r0 I:java.lang.String) =  \")\" \l0x003d: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0044: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004a: CONST_STR  (r5 I:java.lang.String) =  \"beginIndex \< 0\" \l0x004c: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.ByteString okio.ByteString.substring((r3 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

