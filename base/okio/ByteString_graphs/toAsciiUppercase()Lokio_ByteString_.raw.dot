digraph "CFG forokio.ByteString.toAsciiUppercase()Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:byte[]) = (r6 I:okio.ByteString) okio.ByteString.data byte[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:20:0x003d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r1 I:byte[]) = (r6 I:okio.ByteString) okio.ByteString.data byte[] \l0x0008: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:19:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r4 I:byte[]) = (r6 I:okio.ByteString) okio.ByteString.data byte[] \l0x0015: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x0019: CHECK_CAST  (r4 I:byte[]) = (byte[]) (r4 I:?[OBJECT, ARRAY]) \l0x001b: ARITH  (r5 I:int) = (r0 I:int) + (1 int) \l0x001d: ARITH  (r1 I:int) = (r1 I:int) + (\-32 int) \l0x001f: CAST  (r1 I:byte) = (byte) (r1 I:int) \l0x0020: APUT  \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:17:0x0034 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r0 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:15:0x002c \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: ARITH  (r0 I:int) = (r0 I:int) + (\-32 int) \l0x002e: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x002f: APUT  \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: NEW_INSTANCE  (r0 I:okio.ByteString) =  okio.ByteString \l0x0036: INVOKE  (r0 I:okio.ByteString), (r4 I:byte[]) okio.ByteString.\<init\>(byte[]):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: RETURN  (r0 I:okio.ByteString) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|0x003d: RETURN  (r6 I:okio.ByteString) \l}"];
MethodNode[shape=record,label="{public okio.ByteString okio.ByteString.toAsciiUppercase((r6 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_19[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_9;
Node_17 -> Node_18;
Node_19 -> Node_1;
}

