digraph "CFG forokio.ByteString.substring(II)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 \< 0) goto L_0x0048\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r5 \> r3.data.length) goto L_0x0029\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|int r0 = r5 \- r4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r0 \< 0) goto L_0x0021\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r4 != 0) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r5 != r3.data.length) goto L_0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return r3\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|byte[] r5 = new byte[r0]\ljava.lang.System.arraycopy(r3.data, r4, r5, 0, r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\l|return new okio.ByteString(r5)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021}"];
Node_12 [shape=record,label="{12\:\ 0x0028|throw new java.lang.IllegalArgumentException(\"endIndex \< beginIndex\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"endIndex \> length(\")\lr5.append(r3.data.length)\lr5.append(\")\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048}"];
Node_16 [shape=record,label="{16\:\ 0x004f|throw new java.lang.IllegalArgumentException(\"beginIndex \< 0\")\l}"];
MethodNode[shape=record,label="{public okio.ByteString okio.ByteString.substring((r3v0 'this' okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

