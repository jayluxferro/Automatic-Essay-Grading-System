digraph "CFG forokio.ByteString.of([BII)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l0x0003: CAST  (r1 I:long) = (long) (r0 I:int) \l0x0004: CAST  (r3 I:long) = (long) (r8 I:int) \l0x0005: CAST  (r5 I:long) = (long) (r9 I:int) \l0x0006: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okio.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x0009: NEW_ARRAY  (r0 I:byte[]) = (r9 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: INVOKE  \l  (r7 I:java.lang.Object)\l  (r8 I:int)\l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r9 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x000f: NEW_INSTANCE  (r7 I:okio.ByteString) =  okio.ByteString \l0x0011: INVOKE  (r7 I:okio.ByteString), (r0 I:byte[]) okio.ByteString.\<init\>(byte[]):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: RETURN  (r7 I:okio.ByteString) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0017: CONST_STR  (r8 I:java.lang.String) =  \"data == null\" \l0x0019: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okio.ByteString okio.ByteString.of((r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

