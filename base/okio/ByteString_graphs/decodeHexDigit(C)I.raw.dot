digraph "CFG forokio.ByteString.decodeHexDigit(C)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r3 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:12:0x0016 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:12:0x0016 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int) \l0x0013: ARITH  (r3 I:int) = (r3 I:int) + (10 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: RETURN  (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|0x0018: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:18:0x0022 \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, short, byte, char]) = (70 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:18:0x0022 \l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|0x001e: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int) \l0x001f: ARITH  (r3 I:int) = (r3 I:int) + (10 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0021|0x0021: RETURN  (r3 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0024: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0026: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0029: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected hex digit: \" \l0x002b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0035: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|0x0038: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static int okio.ByteString.decodeHexDigit((r3 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

