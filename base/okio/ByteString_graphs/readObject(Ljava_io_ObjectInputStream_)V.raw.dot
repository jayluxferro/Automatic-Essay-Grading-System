digraph "CFG forokio.ByteString.readObject(Ljava\/io\/ObjectInputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.io.ObjectInputStream) java.io.ObjectInputStream.readInt():int type: VIRTUAL \l0x0004: INVOKE  (r3 I:okio.ByteString) = (r3 I:java.io.InputStream), (r0 I:int) okio.ByteString.read(java.io.InputStream, int):okio.ByteString type: STATIC \l0x0008: CONST_CLASS  (r0 I:java.lang.Class\<okio.ByteString\>) =  okio.ByteString.class \l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"data\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|SYNTHETIC\lSplitter:B:1:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000c\l|0x000c: INVOKE  (r0 I:java.lang.reflect.Field) = (r0 I:java.lang.Class), (r1 I:java.lang.String) java.lang.Class.getDeclaredField(java.lang.String):java.lang.reflect.Field type: VIRTUAL A[Catch:\{ NoSuchFieldException \-\> 0x0020, IllegalAccessException \-\> 0x001a \}, TRY_ENTER]\l0x0010: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NoSuchFieldException \-\> 0x0020, IllegalAccessException \-\> 0x001a \}]\l0x0011: INVOKE  (r0 I:java.lang.reflect.Field), (r1 I:boolean) java.lang.reflect.Field.setAccessible(boolean):void type: VIRTUAL A[Catch:\{ NoSuchFieldException \-\> 0x0020, IllegalAccessException \-\> 0x001a \}]\l0x0014: IGET  (r3 I:byte[]) = (r3 I:okio.ByteString) okio.ByteString.data byte[] A[Catch:\{ NoSuchFieldException \-\> 0x0020, IllegalAccessException \-\> 0x001a \}]\l0x0016: INVOKE  \l  (r0 I:java.lang.reflect.Field)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.lang.reflect.Field.set(java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ NoSuchFieldException \-\> 0x0020, IllegalAccessException \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: NEW_INSTANCE  (r3 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001c: INVOKE  (r3 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException null\lSplitter:B:1:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: NEW_INSTANCE  (r3 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0022: INVOKE  (r3 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: NoSuchFieldException null\lSplitter:B:1:0x000c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okio.ByteString.readObject((r2 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.ObjectInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_2 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

