digraph "CFG forokio.ByteString.hmac(Ljava\/lang\/String;Lokio\/ByteString;)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:javax.crypto.Mac) = (r3 I:java.lang.String) javax.crypto.Mac.getInstance(java.lang.String):javax.crypto.Mac type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}, TRY_ENTER]\l0x0004: NEW_INSTANCE  (r1 I:javax.crypto.spec.SecretKeySpec) =  javax.crypto.spec.SecretKeySpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x0006: INVOKE  (r4 I:byte[]) = (r4 I:okio.ByteString) okio.ByteString.toByteArray():byte[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x000a: INVOKE  \l  (r1 I:javax.crypto.spec.SecretKeySpec)\l  (r4 I:byte[])\l  (r3 I:java.lang.String)\l javax.crypto.spec.SecretKeySpec.\<init\>(byte[], java.lang.String):void type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x000d: INVOKE  (r0 I:javax.crypto.Mac), (r1 I:java.security.Key) javax.crypto.Mac.init(java.security.Key):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x0010: IGET  (r3 I:byte[]) = (r2 I:okio.ByteString) okio.ByteString.data byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x0012: INVOKE  (r3 I:byte[]) = (r0 I:javax.crypto.Mac), (r3 I:byte[]) javax.crypto.Mac.doFinal(byte[]):byte[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x0016: INVOKE  (r3 I:okio.ByteString) = (r3 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}]\l0x0019: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: RETURN  (r3 I:okio.ByteString) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|ExcHandler: InvalidKeyException null\lSplitter:B:0:0x0000\l|0x001b: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001e: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:0:0x0000\l|0x0022: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0025: INVOKE  (r4 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okio.ByteString okio.ByteString.hmac((r2 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

