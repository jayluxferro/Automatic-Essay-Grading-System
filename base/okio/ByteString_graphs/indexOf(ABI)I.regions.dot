digraph "CFG forokio.ByteString.indexOf([BI)I" {
subgraph cluster_Region_1725834116 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r6 = java.lang.Math.max(r6, 0)\lint int r1 = r4.data.length \- r5.length\l}"];
subgraph cluster_LoopRegion_1135632877 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r6 \l  PHI: (r6v2 int) = (r6v1 int), (r6v3 int) binds: [B:0:0x0000, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:5:0x0016\l|if (r6 \<= r1) goto L_0x000c\l}"];
subgraph cluster_Region_1840011151 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1477971791 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_924485944 {
label = "IF [B:3:0x0013] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0013|if (okio.Util.arrayRangeEquals(r4.data, r6, r5, 0, r5.length) == true) goto L_0x0015\l}"];
subgraph cluster_Region_542068316 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|RETURN\l|return r6\l}"];
}
}
subgraph cluster_Region_430427272 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:5:0x0016\l|r6++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\l|return \-1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int okio.ByteString.indexOf((r4v0 'this' okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

