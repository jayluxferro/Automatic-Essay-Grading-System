digraph "CFG forokio.ByteString.compareTo(Lokio\/ByteString;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = size()\lint r1 = r10.size()\lint r2 = java.lang.Math.min(r0, r1)\lr4 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:0:0x0000, B:5:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:5:0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|if (r4 \>= r2) goto L_0x0028\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|r7 = getByte(r4) & 255\lr8 = r10.getByte(r4) & 255\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|if (r7 != r8) goto L_0x0023\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|LOOP_END\lLOOP:0: B:1:0x000e\-\>B:5:0x0020\l|int r4 = r4 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if (r7 \>= r8) goto L_0x0026\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|if (r0 != r1) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|RETURN\l|return 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (r0 \>= r1) goto L_0x002e\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public int okio.ByteString.compareTo((r9v0 'this' okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r10v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_6 -> Node_14[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_15[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_6;
}

