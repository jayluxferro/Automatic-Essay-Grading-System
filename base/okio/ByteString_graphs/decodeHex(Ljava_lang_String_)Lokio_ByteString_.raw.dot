digraph "CFG forokio.ByteString.decodeHex(Ljava\/lang\/String;)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004f \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0006: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0038 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000e: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x0010: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: ARITH  (r2 I:int) = (r1 I:int) * (2 int) \l0x0018: INVOKE  (r3 I:char) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001c: INVOKE  (r3 I:int) = (r3 I:char) okio.ByteString.decodeHexDigit(char):int type: STATIC \l0x0020: ARITH  (r3 I:int) = (r3 I:int) \<\< (4 int) \l0x0022: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0024: INVOKE  (r2 I:char) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0028: INVOKE  (r2 I:int) = (r2 I:char) okio.ByteString.decodeHexDigit(char):int type: STATIC \l0x002c: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x002d: CAST  (r2 I:byte) = (byte) (r3 I:int) \l0x002e: APUT  \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0030: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: INVOKE  (r4 I:okio.ByteString) = (r0 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: RETURN  (r4 I:okio.ByteString) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003f: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected hex string: \" \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0051: CONST_STR  (r0 I:java.lang.String) =  \"hex == null\" \l0x0053: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0056|0x0056: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okio.ByteString okio.ByteString.decodeHex((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

