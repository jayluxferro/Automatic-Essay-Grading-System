digraph "CFG forokio.ByteString.compareTo(Lokio\/ByteString;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r10 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0008: INVOKE  (r2 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000f: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r7 I:byte) = (r9 I:okio.ByteString), (r4 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x0016: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0018: INVOKE  (r8 I:byte) = (r10 I:okio.ByteString), (r4 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x001c: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IF  (r7 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: RETURN  (r5 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: RETURN  (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public int okio.ByteString.compareTo((r9 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r10 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
}

