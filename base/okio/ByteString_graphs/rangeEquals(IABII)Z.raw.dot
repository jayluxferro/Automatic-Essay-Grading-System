digraph "CFG forokio.ByteString.rangeEquals(I[BII)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:byte[]) = (r1 I:okio.ByteString) okio.ByteString.data byte[] \l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0005: ARITH  (r0 I:int) = (r0 I:int) \- (r5 I:int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: ARRAY_LENGTH  (r0 I:int) = (r3 I:?[]) \l0x000b: ARITH  (r0 I:int) = (r0 I:int) \- (r5 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r0 I:byte[]) = (r1 I:okio.ByteString) okio.ByteString.data byte[] \l0x0010: INVOKE  (r2 I:boolean) = \l  (r0 I:byte[])\l  (r2 I:int)\l  (r3 I:byte[])\l  (r4 I:int)\l  (r5 I:int)\l okio.Util.arrayRangeEquals(byte[], int, byte[], int, int):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okio.ByteString.rangeEquals((r1 'this' I:okio.ByteString A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

