digraph "CFG forokio.HashingSink.\<init\>(Lokio\/Sink;Lokio\/ByteString;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}\lSplitter:B:1:0x0003\l|r1.mac = javax.crypto.Mac.getInstance(r4)     \/\/ Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}\lr1.mac.init(new javax.crypto.spec.SecretKeySpec(r3.toByteArray(), r4))     \/\/ Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}\lr1.messageDigest = null     \/\/ Catch:\{ NoSuchAlgorithmException \-\> 0x0022, InvalidKeyException \-\> 0x001b \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|ExcHandler: InvalidKeyException (r2v2 'e' java.security.InvalidKeyException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0003\l|java.security.InvalidKeyException r2 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c}"];
Node_6 [shape=record,label="{6\:\ 0x0021|throw new java.lang.IllegalArgumentException(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: NoSuchAlgorithmException (unused java.security.NoSuchAlgorithmException)\lSplitter:B:1:0x0003\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|throw new java.lang.AssertionError()\l}"];
MethodNode[shape=record,label="{private void okio.HashingSink.\<init\>((r1v0 'this' okio.HashingSink A[IMMUTABLE_TYPE, THIS]), (r2v0 okio.Sink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

