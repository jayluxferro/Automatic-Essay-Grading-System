digraph "CFG forokio.HashingSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Util.checkOffsetAndCount(r8.size, 0, r9)\lokio.Segment r0 = r8.head\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v2 okio.Segment) = (r0v1 okio.Segment), (r0v3 okio.Segment) binds: [B:0:0x0000, B:7:0x0034] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 long) = (r1v0 long), (r1v2 long) binds: [B:0:0x0000, B:7:0x0034] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:7:0x0034\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|if ((r1 \> r9 ? 1 : (r1 == r9 ? 0 : \-1)) \>= 0) goto L_0x0039\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|int r3 = (int) java.lang.Math.min(r9 \- r1, (long) (r0.limit \- r0.pos))\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (r7.messageDigest == null) goto L_0x002b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|r7.messageDigest.update(r0.data, r0.pos, r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|r7.mac.update(r0.data, r0.pos, r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:7:0x0034\l|long r1 = r1 + ((long) r3)\lokio.Segment r0 = r0.next\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|super.write(r8, r9)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okio.HashingSink.write((r7v0 'this' okio.HashingSink A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_11;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_10 -> Node_8;
Node_11 -> Node_7;
Node_12 -> Node_7;
}

