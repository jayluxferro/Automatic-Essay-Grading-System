digraph "CFG forokio.HashingSource.read(Lokio\/Buffer;J)J" {
subgraph cluster_Region_1646587638 {
label = "R(3:0|(3:2|(1:5)|(3:8|(1:10)(1:11)|12))|13)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r9 = super.read(r8, r9)\l}"];
subgraph cluster_IfRegion_1245951965 {
label = "IF [B:1:0x0008] THEN: R(3:2|(1:5)|(3:8|(1:10)(1:11)|12)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r9 != \-1) goto L_0x000a\l}"];
subgraph cluster_Region_2115484530 {
label = "R(3:2|(1:5)|(3:8|(1:10)(1:11)|12))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|long long r0 = r8.size \- r9\llong long r2 = r8.size\lokio.Segment okio.Segment r4 = r8.head\l}"];
subgraph cluster_LoopRegion_1519554670 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r2 \> r0) goto L_0x0015\l}"];
subgraph cluster_Region_221788606 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_END\lLOOP:0: B:3:0x0011\-\>B:5:0x0015\l|okio.Segment r4 = r4.prev\lr2 \-= (long) (r4.limit \- r4.pos)\l}"];
}
}
subgraph cluster_LoopRegion_1312284480 {
label = "LOOP:1: (3:8|(1:10)(1:11)|12)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0023|if (r2 \< r8.size) goto L_0x0025\l}"];
subgraph cluster_Region_528784950 {
label = "R(3:8|(1:10)(1:11)|12)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0025|int int r0 = (int) ((((long) r4.pos) + r0) \- r2)\l}"];
subgraph cluster_IfRegion_1731010816 {
label = "IF [B:9:0x002d] THEN: R(1:10) ELSE: R(1:11)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002d|if (r7.messageDigest != null) goto L_0x002f\l}"];
subgraph cluster_Region_1970904478 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002f|r7.messageDigest.update(r4.data, r0, r4.limit \- r0)\l}"];
}
subgraph cluster_Region_1000764095 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x003a|r7.mac.update(r4.data, r0, r4.limit \- r0)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0044|LOOP_END\lLOOP:1: B:6:0x001f\-\>B:12:0x0044\l|long r0 = ((long) (r4.limit \- r4.pos)) + r2\lokio.Segment r4 = r4.next\lr2 = r0\l}"];
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x004f|RETURN\l|return r9\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011|LOOP_START\lPHI: r2 r4 \l  PHI: (r2v1 long) = (r2v0 long), (r2v4 long) binds: [B:2:0x000a, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 okio.Segment) = (r4v0 okio.Segment), (r4v4 okio.Segment) binds: [B:2:0x000a, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0011\-\>B:5:0x0015\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001f|LOOP_START\lPHI: r0 r2 r4 \l  PHI: (r0v4 long) = (r0v3 long), (r0v9 long) binds: [B:14:0x001f, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 long) = (r2v1 long), (r2v3 long) binds: [B:14:0x001f, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 okio.Segment) = (r4v1 okio.Segment), (r4v3 okio.Segment) binds: [B:14:0x001f, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:6:0x001f\-\>B:12:0x0044\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001f|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x004f|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0044|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0044|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public long okio.HashingSource.read((r7v0 'this' okio.HashingSource A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_14[style=dashed];
Node_5 -> Node_3;
Node_7 -> Node_8;
Node_7 -> Node_15[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_16;
Node_12 -> Node_6;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_14 -> Node_6;
Node_15 -> Node_13;
Node_16 -> Node_12;
Node_17 -> Node_12;
}

