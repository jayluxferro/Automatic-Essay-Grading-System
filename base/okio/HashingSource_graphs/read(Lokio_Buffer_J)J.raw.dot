digraph "CFG forokio.HashingSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r9 I:long) = \l  (r7 I:okio.ForwardingSource)\l  (r8 I:okio.Buffer)\l  (r9 I:long)\l okio.ForwardingSource.read(okio.Buffer, long):long type: SUPER \l0x0004: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0006: CMP_L  (r0 I:int) = (r9 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x000c: ARITH  (r0 I:long) = (r0 I:long) \- (r9 I:long) \l0x000d: IGET  (r2 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x000f: IGET  (r4 I:okio.Segment) = (r8 I:okio.Buffer) okio.Buffer.head okio.Segment \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CMP_L  (r5 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.prev okio.Segment \l0x0017: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0019: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x001b: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x001c: CAST  (r5 I:long) = (long) (r5 I:int) \l0x001d: ARITH  (r2 I:long) = (r2 I:long) \- (r5 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IGET  (r5 I:long) = (r8 I:okio.Buffer) okio.Buffer.size long \l0x0021: CMP_L  (r5 I:int) = (r2 I:long), (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x004f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IGET  (r5 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0027: CAST  (r5 I:long) = (long) (r5 I:int) \l0x0028: ARITH  (r5 I:long) = (r5 I:long) + (r0 I:long) \l0x0029: ARITH  (r5 I:long) = (r5 I:long) \- (r2 I:long) \l0x002a: CAST  (r0 I:int) = (int) (r5 I:long) \l0x002b: IGET  (r1 I:java.security.MessageDigest) = (r7 I:okio.HashingSource) okio.HashingSource.messageDigest java.security.MessageDigest \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003a \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IGET  (r1 I:java.security.MessageDigest) = (r7 I:okio.HashingSource) okio.HashingSource.messageDigest java.security.MessageDigest \l0x0031: IGET  (r5 I:byte[]) = (r4 I:okio.Segment) okio.Segment.data byte[] \l0x0033: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0035: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l0x0036: INVOKE  \l  (r1 I:java.security.MessageDigest)\l  (r5 I:byte[])\l  (r0 I:int)\l  (r6 I:int)\l java.security.MessageDigest.update(byte[], int, int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IGET  (r1 I:javax.crypto.Mac) = (r7 I:okio.HashingSource) okio.HashingSource.mac javax.crypto.Mac \l0x003c: IGET  (r5 I:byte[]) = (r4 I:okio.Segment) okio.Segment.data byte[] \l0x003e: IGET  (r6 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0040: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l0x0041: INVOKE  \l  (r1 I:javax.crypto.Mac)\l  (r5 I:byte[])\l  (r0 I:int)\l  (r6 I:int)\l javax.crypto.Mac.update(byte[], int, int):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: IGET  (r0 I:int) = (r4 I:okio.Segment) okio.Segment.limit int \l0x0046: IGET  (r1 I:int) = (r4 I:okio.Segment) okio.Segment.pos int \l0x0048: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0049: CAST  (r0 I:long) = (long) (r0 I:int) \l0x004a: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x004b: IGET  (r4 I:okio.Segment) = (r4 I:okio.Segment) okio.Segment.next okio.Segment \l0x004d: MOVE  (r2 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|0x004f: RETURN  (r9 I:long) \l}"];
MethodNode[shape=record,label="{public long okio.HashingSource.read((r7 'this' I:okio.HashingSource A[IMMUTABLE_TYPE, THIS]), (r8 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_6;
}

