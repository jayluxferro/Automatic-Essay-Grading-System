digraph "CFG formil.nga.tiff.FieldType.getFieldType(II)Lmil\/nga\/tiff\/FieldType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0029, 0x0018, 0x000b] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: SGET  (r3 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.DOUBLE mil.nga.tiff.FieldType \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: SGET  (r3 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.FLOAT mil.nga.tiff.FieldType \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0025 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001f \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.SLONG mil.nga.tiff.FieldType \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.SSHORT mil.nga.tiff.FieldType \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.SBYTE mil.nga.tiff.FieldType \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0033 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|0x002d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0030 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|0x0030: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.LONG mil.nga.tiff.FieldType \l}"];
Node_22 [shape=record,label="{22\:\ 0x0033|0x0033: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.SHORT mil.nga.tiff.FieldType \l}"];
Node_23 [shape=record,label="{23\:\ 0x0036|0x0036: SGET  (r0 I:mil.nga.tiff.FieldType) =  mil.nga.tiff.FieldType.BYTE mil.nga.tiff.FieldType \l}"];
Node_24 [shape=record,label="{24\:\ 0x0039|0x0039: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x003c \l}"];
Node_25 [shape=record,label="{25\:\ 0x003b|0x003b: RETURN  (r3 I:mil.nga.tiff.FieldType) \l}"];
Node_26 [shape=record,label="{26\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x003e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0040: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0043: CONST_STR  (r2 I:java.lang.String) =  \"Unsupported field type for sample format: \" \l0x0045: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x004b: CONST_STR  (r4 I:java.lang.String) =  \", bits per sample: \" \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0057: INVOKE  \l  (r0 I:mil.nga.tiff.util.TiffException)\l  (r4 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x005a|0x005a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static mil.nga.tiff.FieldType mil.nga.tiff.FieldType.getFieldType((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_9;
Node_1 -> Node_17;
Node_1 -> Node_24;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_24[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_24;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_13;
Node_11 -> Node_24[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_24;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_21;
Node_19 -> Node_24[style=dashed];
Node_21 -> Node_16;
Node_22 -> Node_16;
Node_23 -> Node_16;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
}

