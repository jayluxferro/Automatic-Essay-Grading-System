digraph "CFG formil.nga.tiff.Rasters.getPixel(II)[Ljava\/lang\/Number;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|validateCoordinates(r4, r5)\ljava.lang.Number[] r0 = new java.lang.Number[getSamplesPerPixel()]\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r3.sampleValues == null) goto L_0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|int r4 = getSampleIndex(r4, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|LOOP_START\lPHI: r2 \l  PHI: (r2v3 int) = (r2v0 int), (r2v4 int) binds: [B:2:0x000e, B:5:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0012\-\>B:5:0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (r2 \>= getSamplesPerPixel()) goto L_0x004d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|LOOP_END\lLOOP:0: B:3:0x0012\-\>B:5:0x0018\l|r1 = r3.sampleValues[r2]\lr0[r2] = getSampleFromByteBuffer(r1, r3.fieldTypes[r2].getBytes() * r4, r2)\lint r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|int r4 = getInterleaveIndex(r4, r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|LOOP_START\lPHI: r2 r4 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:6:0x002f, B:9:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 int) = (r4v1 int), (r4v3 int) binds: [B:6:0x002f, B:9:0x0039] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0033\-\>B:9:0x0039\l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|if (r2 \>= getSamplesPerPixel()) goto L_0x004d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|LOOP_END\lLOOP:1: B:7:0x0033\-\>B:9:0x0039\l|r0[r2] = getSampleFromByteBuffer(r3.interleaveValues, r4, r2)\lint r4 = r4 + r3.fieldTypes[r2].getBytes()\lint r2 = r2 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.Number[] mil.nga.tiff.Rasters.getPixel((r3v0 'this' mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_7;
Node_11 -> Node_10;
Node_12 -> Node_10;
}

