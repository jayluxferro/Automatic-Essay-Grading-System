digraph "CFG formil.nga.tiff.Rasters.calculateRowsPerStrip(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r4 I:int) = (r3 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sizePixel():int type: VIRTUAL \l0x0007: INVOKE  (r4 I:int) = (r3 I:mil.nga.tiff.Rasters), (r4 I:int), (r5 I:int) mil.nga.tiff.Rasters.rowsPerStrip(int, int):int type: DIRECT \l0x000b: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r1 I:int) = (r3 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getSamplesPerPixel():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r1 I:mil.nga.tiff.FieldType[]) = (r3 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x001a: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x001c: INVOKE  (r1 I:int) = (r1 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x0020: INVOKE  (r1 I:int) = (r3 I:mil.nga.tiff.Rasters), (r1 I:int), (r5 I:int) mil.nga.tiff.Rasters.rowsPerStrip(int, int):int type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: INVOKE  (r2 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x0030 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r0 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public int mil.nga.tiff.Rasters.calculateRowsPerStrip((r3 'this' I:mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

