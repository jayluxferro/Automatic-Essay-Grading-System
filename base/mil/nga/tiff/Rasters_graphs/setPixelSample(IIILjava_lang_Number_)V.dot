digraph "CFG formil.nga.tiff.Rasters.setPixelSample(IIILjava\/lang\/Number;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|validateCoordinates(r4, r5)\lvalidateSample(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r2.sampleValues == null) goto L_0x001f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|int r0 = getSampleIndex(r4, r5) * r2.fieldTypes[r3].getBytes()\lupdateSampleInByteBuffer(r2.sampleValues[r3], r0, r3, r6)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f}"];
Node_4 [shape=record,label="{4\:\ 0x0021|if (r2.interleaveValues == null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|int r4 = getSampleIndex(r4, r5) * sizePixel()\lr5 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|LOOP_START\lPHI: r4 r5 \l  PHI: (r4v3 int) = (r4v2 int), (r4v4 int) binds: [B:5:0x0023, B:7:0x0030] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 int) = (r5v2 int), (r5v5 int) binds: [B:5:0x0023, B:7:0x0030] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x002e\-\>B:7:0x0030\l|if (r5 \>= r3) goto L_0x003c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|LOOP_END\lLOOP:0: B:6:0x002e\-\>B:7:0x0030\l|int r4 = r4 + r2.fieldTypes[r3].getBytes()\lint r5 = r5 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|updateSampleInByteBuffer(r2.interleaveValues, r4, r3, r6)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void mil.nga.tiff.Rasters.setPixelSample((r2v0 'this' mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_6;
Node_8 -> Node_10;
Node_9 -> Node_8;
}

