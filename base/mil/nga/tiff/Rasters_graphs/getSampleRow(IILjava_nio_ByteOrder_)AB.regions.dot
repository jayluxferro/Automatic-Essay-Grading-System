digraph "CFG formil.nga.tiff.Rasters.getSampleRow(IILjava\/nio\/ByteOrder;)[B" {
subgraph cluster_Region_375589938 {
label = "R(3:0|(2:2|(1:5))(3:6|(1:8)|(1:11))|13)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.nio.ByteBuffer java.nio.ByteBuffer r0 = java.nio.ByteBuffer.allocate(getWidth() * r5.fieldTypes[r7].getBytes())\lr0.order(r8)\lint r1 = 0\l}"];
subgraph cluster_IfRegion_865742507 {
label = "IF [B:1:0x0018] THEN: R(2:2|(1:5)) ELSE: R(3:6|(1:8)|(1:11))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0018|if (r5.sampleValues != null) goto L_0x001a\l}"];
subgraph cluster_Region_839416896 {
label = "R(2:2|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001a|r5.sampleValues[r7].position(r6 * getWidth() * r5.fieldTypes[r7].getBytes())\l}"];
subgraph cluster_LoopRegion_68232186 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0035|if (r1 \< getWidth()) goto L_0x0037\l}"];
subgraph cluster_Region_1046548125 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0037|LOOP_END\lLOOP:0: B:3:0x0031\-\>B:5:0x0037\l|writeSample(r0, r5.sampleValues[r7], r5.fieldTypes[r7])\lr1++\l}"];
}
}
}
subgraph cluster_Region_850575363 {
label = "R(3:6|(1:8)|(1:11))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0045|int r8 = 0\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_57261292 {
label = "LOOP:1: (1:8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0047|LOOP_START\lPHI: r2 r8 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:6:0x0045, B:8:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v3 int) = (r8v2 int), (r8v7 int) binds: [B:6:0x0045, B:8:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0047\-\>B:8:0x0049\l|if (r8 \< r7) goto L_0x0049\l}"];
subgraph cluster_Region_1685312898 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0049|LOOP_END\lLOOP:1: B:7:0x0047\-\>B:8:0x0049\l|r2 += r5.fieldTypes[r7].getBytes()\lr8++\l}"];
}
}
subgraph cluster_LoopRegion_169716759 {
label = "LOOP:2: (1:11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0059|if (r1 \< getWidth()) goto L_0x005b\l}"];
subgraph cluster_Region_1865144361 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x005b|LOOP_END\lLOOP:2: B:9:0x0055\-\>B:11:0x005b\l|r5.interleaveValues.position((((getWidth() * r6) + r1) * sizePixel()) + r2)\lwriteSample(r0, r5.interleaveValues, r5.fieldTypes[r7])\lr1++\l}"];
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x007e|RETURN\l|return r0.array()\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0031|LOOP_START\lPHI: r1 \l  PHI: (r1v6 int) = (r1v3 int), (r1v7 int) binds: [B:2:0x001a, B:5:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0031\-\>B:5:0x0037\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0055|LOOP_START\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v5 int) binds: [B:15:0x0055, B:11:0x005b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:9:0x0055\-\>B:11:0x005b\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x007a}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x007a|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0055|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x007a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.Rasters.getSampleRow((r5v0 'this' mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_14[style=dashed];
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_15[style=dashed];
Node_8 -> Node_7;
Node_10 -> Node_11;
Node_10 -> Node_16[style=dashed];
Node_11 -> Node_9;
Node_3 -> Node_4;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_12;
Node_15 -> Node_9;
Node_16 -> Node_12;
}

