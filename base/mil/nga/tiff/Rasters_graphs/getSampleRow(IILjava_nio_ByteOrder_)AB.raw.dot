digraph "CFG formil.nga.tiff.Rasters.getSampleRow(IILjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x0004: IGET  (r1 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0006: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0008: INVOKE  (r1 I:int) = (r1 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x000c: ARITH  (r0 I:int) = (r0 I:int) * (r1 I:int) \l0x000e: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x0012: INVOKE  (r0 I:java.nio.ByteBuffer), (r8 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x0015: IGET  (r8 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: IGET  (r8 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x001c: AGET  (r8 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x001e: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x0022: ARITH  (r6 I:int) = (r6 I:int) * (r2 I:int) \l0x0024: IGET  (r2 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0026: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0028: INVOKE  (r2 I:int) = (r2 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x002c: ARITH  (r6 I:int) = (r6 I:int) * (r2 I:int) \l0x002e: INVOKE  (r8 I:java.nio.ByteBuffer), (r6 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|0x0031: INVOKE  (r6 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|0x0035: IF  (r1 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:12:0x007a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|0x0037: IGET  (r6 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x0039: AGET  (r6 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x003b: IGET  (r8 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x003d: AGET  (r8 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x003f: INVOKE  \l  (r5 I:mil.nga.tiff.Rasters)\l  (r0 I:java.nio.ByteBuffer)\l  (r6 I:java.nio.ByteBuffer)\l  (r8 I:mil.nga.tiff.FieldType)\l mil.nga.tiff.Rasters.writeSample(java.nio.ByteBuffer, java.nio.ByteBuffer, mil.nga.tiff.FieldType):void type: DIRECT \l0x0042: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|0x0045: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0046: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|0x0047: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:9:0x0055 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|0x0049: IGET  (r3 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x004b: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x004d: INVOKE  (r3 I:int) = (r3 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x0051: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0052: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: INVOKE  (r8 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: IF  (r1 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:12:0x007a \l}"];
Node_11 [shape=record,label="{11\:\ 0x005b|0x005b: IGET  (r8 I:java.nio.ByteBuffer) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l0x005d: INVOKE  (r3 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x0061: ARITH  (r3 I:int) = (r3 I:int) * (r6 I:int) \l0x0063: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x0064: INVOKE  (r4 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sizePixel():int type: VIRTUAL \l0x0068: ARITH  (r3 I:int) = (r3 I:int) * (r4 I:int) \l0x006a: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x006b: INVOKE  (r8 I:java.nio.ByteBuffer), (r3 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x006e: IGET  (r8 I:java.nio.ByteBuffer) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l0x0070: IGET  (r3 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0072: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0074: INVOKE  \l  (r5 I:mil.nga.tiff.Rasters)\l  (r0 I:java.nio.ByteBuffer)\l  (r8 I:java.nio.ByteBuffer)\l  (r3 I:mil.nga.tiff.FieldType)\l mil.nga.tiff.Rasters.writeSample(java.nio.ByteBuffer, java.nio.ByteBuffer, mil.nga.tiff.FieldType):void type: DIRECT \l0x0077: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: INVOKE  (r6 I:byte[]) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x007e|0x007e: RETURN  (r6 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.Rasters.getSampleRow((r5 'this' I:mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_13;
}

