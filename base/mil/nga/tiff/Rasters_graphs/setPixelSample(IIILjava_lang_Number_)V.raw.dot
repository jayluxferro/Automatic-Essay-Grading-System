digraph "CFG formil.nga.tiff.Rasters.setPixelSample(IIILjava\/lang\/Number;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:mil.nga.tiff.Rasters), (r4 I:int), (r5 I:int) mil.nga.tiff.Rasters.validateCoordinates(int, int):void type: DIRECT \l0x0003: INVOKE  (r2 I:mil.nga.tiff.Rasters), (r3 I:int) mil.nga.tiff.Rasters.validateSample(int):void type: DIRECT \l0x0006: IGET  (r0 I:java.nio.ByteBuffer[]) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r2 I:mil.nga.tiff.Rasters), (r4 I:int), (r5 I:int) mil.nga.tiff.Rasters.getSampleIndex(int, int):int type: VIRTUAL \l0x000e: IGET  (r1 I:mil.nga.tiff.FieldType[]) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0010: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0012: INVOKE  (r1 I:int) = (r1 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x0016: ARITH  (r0 I:int) = (r0 I:int) * (r1 I:int) \l0x0018: IGET  (r1 I:java.nio.ByteBuffer[]) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x001a: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x001c: INVOKE  \l  (r2 I:mil.nga.tiff.Rasters)\l  (r1 I:java.nio.ByteBuffer)\l  (r0 I:int)\l  (r3 I:int)\l  (r6 I:java.lang.Number)\l mil.nga.tiff.Rasters.updateSampleInByteBuffer(java.nio.ByteBuffer, int, int, java.lang.Number):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IGET  (r0 I:java.nio.ByteBuffer) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r4 I:int) = (r2 I:mil.nga.tiff.Rasters), (r4 I:int), (r5 I:int) mil.nga.tiff.Rasters.getSampleIndex(int, int):int type: VIRTUAL \l0x0027: INVOKE  (r5 I:int) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sizePixel():int type: VIRTUAL \l0x002b: ARITH  (r4 I:int) = (r4 I:int) * (r5 I:int) \l0x002d: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IF  (r5 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x003c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: IGET  (r0 I:mil.nga.tiff.FieldType[]) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0032: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0034: INVOKE  (r0 I:int) = (r0 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x0038: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int) \l0x0039: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: IGET  (r5 I:java.nio.ByteBuffer) = (r2 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l0x003e: INVOKE  \l  (r2 I:mil.nga.tiff.Rasters)\l  (r5 I:java.nio.ByteBuffer)\l  (r4 I:int)\l  (r3 I:int)\l  (r6 I:java.lang.Number)\l mil.nga.tiff.Rasters.updateSampleInByteBuffer(java.nio.ByteBuffer, int, int, java.lang.Number):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{public void mil.nga.tiff.Rasters.setPixelSample((r2 'this' I:mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
}

