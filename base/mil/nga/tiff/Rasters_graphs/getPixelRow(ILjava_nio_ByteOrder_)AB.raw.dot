digraph "CFG formil.nga.tiff.Rasters.getPixelRow(ILjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sizePixel():int type: VIRTUAL \l0x0008: ARITH  (r0 I:int) = (r0 I:int) * (r1 I:int) \l0x000a: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x000e: INVOKE  (r0 I:java.nio.ByteBuffer), (r7 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x0011: IGET  (r7 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x0013: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0056 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getSamplesPerPixel():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r7 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r2 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x001f: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0021: INVOKE  (r3 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x0025: ARITH  (r3 I:int) = (r3 I:int) * (r6 I:int) \l0x0027: IGET  (r4 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0029: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x002b: INVOKE  (r4 I:int) = (r4 I:mil.nga.tiff.FieldType) mil.nga.tiff.FieldType.getBytes():int type: VIRTUAL \l0x002f: ARITH  (r3 I:int) = (r3 I:int) * (r4 I:int) \l0x0031: INVOKE  (r2 I:java.nio.ByteBuffer), (r3 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0034: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: INVOKE  (r7 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: IF  (r6 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:22:0x0084 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getSamplesPerPixel():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r7 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:13:0x0053 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: IGET  (r2 I:java.nio.ByteBuffer[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sampleValues java.nio.ByteBuffer[] \l0x0047: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0049: IGET  (r3 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x004b: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x004d: INVOKE  \l  (r5 I:mil.nga.tiff.Rasters)\l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:java.nio.ByteBuffer)\l  (r3 I:mil.nga.tiff.FieldType)\l mil.nga.tiff.Rasters.writeSample(java.nio.ByteBuffer, java.nio.ByteBuffer, mil.nga.tiff.FieldType):void type: DIRECT \l0x0050: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: IGET  (r7 I:java.nio.ByteBuffer) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l0x0058: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l0x005c: ARITH  (r6 I:int) = (r6 I:int) * (r2 I:int) \l0x005e: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.sizePixel():int type: VIRTUAL \l0x0062: ARITH  (r6 I:int) = (r6 I:int) * (r2 I:int) \l0x0064: INVOKE  (r7 I:java.nio.ByteBuffer), (r6 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0067: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0068|0x0068: INVOKE  (r7 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getWidth():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x006c|0x006c: IF  (r6 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:22:0x0084 \l}"];
Node_17 [shape=record,label="{17\:\ 0x006e|0x006e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x006f|0x006f: INVOKE  (r2 I:int) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.getSamplesPerPixel():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0073|0x0073: IF  (r7 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:21:0x0081 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|0x0075: IGET  (r2 I:java.nio.ByteBuffer) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.interleaveValues java.nio.ByteBuffer \l0x0077: IGET  (r3 I:mil.nga.tiff.FieldType[]) = (r5 I:mil.nga.tiff.Rasters) mil.nga.tiff.Rasters.fieldTypes mil.nga.tiff.FieldType[] \l0x0079: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x007b: INVOKE  \l  (r5 I:mil.nga.tiff.Rasters)\l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:java.nio.ByteBuffer)\l  (r3 I:mil.nga.tiff.FieldType)\l mil.nga.tiff.Rasters.writeSample(java.nio.ByteBuffer, java.nio.ByteBuffer, mil.nga.tiff.FieldType):void type: DIRECT \l0x007e: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0081|0x0081: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0084|0x0084: INVOKE  (r6 I:byte[]) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0088|0x0088: RETURN  (r6 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.Rasters.getPixelRow((r5 'this' I:mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_22;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_7;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_18;
Node_21 -> Node_15;
Node_22 -> Node_23;
}

