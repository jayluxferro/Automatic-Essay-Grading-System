digraph "CFG formil.nga.tiff.Rasters.sizePixel()I" {
subgraph cluster_Region_38202147 {
label = "R(1:(2:(1:3)|(4:4|(1:7)|8|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1076598988 {
label = "R(2:(1:3)|(4:4|(1:7)|8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_7186531 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.pixelSize != null) goto L_0x0004\l}"];
subgraph cluster_Region_2076440652 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r3.pixelSize.intValue()\l}"];
}
}
subgraph cluster_Region_230324676 {
label = "R(4:4|(1:7)|8|9)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|int r0 = 0\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_952579350 {
label = "LOOP:0: (1:7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r0 \< getSamplesPerPixel()) goto L_0x0013\l}"];
subgraph cluster_Region_672724704 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0013|LOOP_END\lLOOP:0: B:5:0x000d\-\>B:7:0x0013\l|r1 += r3.fieldTypes[r0].getBytes()\lr0++\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x001f|r3.pixelSize = java.lang.Integer.valueOf(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return r1\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v2 int) = (r0v1 int), (r0v4 int) binds: [B:4:0x000b, B:7:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:4:0x000b, B:7:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000d\-\>B:7:0x0013\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int mil.nga.tiff.Rasters.sizePixel((r3v0 'this' mil.nga.tiff.Rasters A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_10[style=dashed];
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_10 -> Node_8;
}

