digraph "CFG formil.nga.tiff.TiffWriter.writeTiff(Lmil\/nga\/tiff\/io\/ByteWriter;Lmil\/nga\/tiff\/TIFFImage;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.nio.ByteOrder) = (r2 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x0004: SGET  (r1 I:java.nio.ByteOrder) =  java.nio.ByteOrder.BIG_ENDIAN java.nio.ByteOrder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"MM\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST_STR  (r0 I:java.lang.String) =  \"II\" \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r2 I:mil.nga.tiff.io.ByteWriter), (r0 I:java.lang.String) mil.nga.tiff.io.ByteWriter.writeString(java.lang.String):int type: VIRTUAL \l0x0010: CONST  (r0 I:?[int, float, short, byte, char]) = (42 ?[int, float, short, byte, char]) \l0x0012: INVOKE  (r2 I:mil.nga.tiff.io.ByteWriter), (r0 I:int) mil.nga.tiff.io.ByteWriter.writeUnsignedShort(int):void type: VIRTUAL \l0x0015: CONST  (r0 I:?[long, double]) = (8 ?[long, double]) \l0x0017: INVOKE  (r2 I:mil.nga.tiff.io.ByteWriter), (r0 I:long) mil.nga.tiff.io.ByteWriter.writeUnsignedInt(long):void type: VIRTUAL \l0x001a: INVOKE  \l  (r2 I:mil.nga.tiff.io.ByteWriter)\l  (r3 I:mil.nga.tiff.TIFFImage)\l mil.nga.tiff.TiffWriter.writeImageFileDirectories(mil.nga.tiff.io.ByteWriter, mil.nga.tiff.TIFFImage):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{public static void mil.nga.tiff.TiffWriter.writeTiff((r2 I:mil.nga.tiff.io.ByteWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:mil.nga.tiff.TIFFImage A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

