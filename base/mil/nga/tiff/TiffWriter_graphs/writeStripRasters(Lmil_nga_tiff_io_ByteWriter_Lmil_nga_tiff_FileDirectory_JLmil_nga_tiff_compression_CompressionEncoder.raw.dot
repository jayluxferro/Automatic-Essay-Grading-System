digraph "CFG formil.nga.tiff.TiffWriter.writeStripRasters(Lmil\/nga\/tiff\/io\/ByteWriter;Lmil\/nga\/tiff\/FileDirectory;JLmil\/nga\/tiff\/compression\/CompressionEncoder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  (r2 I:mil.nga.tiff.Rasters) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getWriteRasters():mil.nga.tiff.Rasters type: VIRTUAL \l0x0008: INVOKE  (r3 I:java.lang.Number) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getRowsPerStrip():java.lang.Number type: VIRTUAL \l0x000c: INVOKE  (r3 I:int) = (r3 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l0x0010: INVOKE  (r4 I:java.lang.Number) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getImageHeight():java.lang.Number type: VIRTUAL \l0x0014: INVOKE  (r4 I:int) = (r4 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l0x0018: ARITH  (r5 I:int) = (r4 I:int) + (r3 I:int) \l0x001a: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x001c: ARITH  (r5 I:int) = (r5 I:int) \/ (r3 I:int) \l0x001d: INVOKE  (r6 I:java.lang.Integer) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getPlanarConfiguration():java.lang.Integer type: VIRTUAL \l0x0021: INVOKE  (r6 I:int) = (r6 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0025: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|0x0026: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0028|0x0028: INVOKE  (r6 I:int) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getSamplesPerPixel():int type: VIRTUAL \l0x002c: ARITH  (r6 I:int) = (r6 I:int) * (r5 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002f|0x002f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0030|0x0030: NEW_INSTANCE  (r8 I:java.util.ArrayList) =  java.util.ArrayList \l0x0032: INVOKE  (r8 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0035: NEW_INSTANCE  (r9 I:java.util.ArrayList) =  java.util.ArrayList \l0x0037: INVOKE  (r9 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x003a: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003b: MOVE  (r11 I:?[long, double]) = (r20 I:?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|0x003d: IF  (r10 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:23:0x00d8 \l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|0x003f: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: INVOKE  (r14 I:java.lang.Integer) = (r19 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getPlanarConfiguration():java.lang.Integer type: VIRTUAL \l0x0044: INVOKE  (r14 I:int) = (r14 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0048|0x0048: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0055 \l}"];
Node_8 [shape=record,label="{8\:\ 0x004a|0x004a: ARITH  (r13 I:int) = (r10 I:int) \/ (r5 I:int) \l0x004c: INVOKE  (r13 I:java.lang.Integer) = (r13 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0050: ARITH  (r14 I:int) = (r10 I:int) % (r5 I:int) \l0x0052: ARITH  (r14 I:int) = (r14 I:int) * (r3 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: ARITH  (r14 I:int) = (r10 I:int) * (r3 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0057|0x0057: NEW_INSTANCE  (r15 I:mil.nga.tiff.io.ByteWriter) =  mil.nga.tiff.io.ByteWriter \l0x0059: INVOKE  (r7 I:java.nio.ByteOrder) = (r18 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x005d: INVOKE  \l  (r15 I:mil.nga.tiff.io.ByteWriter)\l  (r7 I:java.nio.ByteOrder)\l mil.nga.tiff.io.ByteWriter.\<init\>(java.nio.ByteOrder):void type: DIRECT \l0x0060: ARITH  (r7 I:int) = (r14 I:int) + (r3 I:int) \l0x0062: INVOKE  (r7 I:int) = (r7 I:int), (r4 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0066|0x0066: IF  (r14 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:19:0x009f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0068|0x0068: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x007b \l}"];
Node_13 [shape=record,label="{13\:\ 0x006a|0x006a: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006c: INVOKE  (r3 I:int) = (r13 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0070: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0072: INVOKE  (r4 I:java.nio.ByteOrder) = (r18 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x0076: INVOKE  (r3 I:byte[]) = \l  (r2 I:mil.nga.tiff.Rasters)\l  (r14 I:int)\l  (r3 I:int)\l  (r4 I:java.nio.ByteOrder)\l mil.nga.tiff.Rasters.getSampleRow(int, int, java.nio.ByteOrder):byte[] type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x007b|0x007b: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007d: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007f: INVOKE  (r3 I:java.nio.ByteOrder) = (r18 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x0083: INVOKE  (r3 I:byte[]) = \l  (r2 I:mil.nga.tiff.Rasters)\l  (r14 I:int)\l  (r3 I:java.nio.ByteOrder)\l mil.nga.tiff.Rasters.getPixelRow(int, java.nio.ByteOrder):byte[] type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0087|0x0087: INVOKE  (r4 I:boolean) = (r22 I:mil.nga.tiff.compression.CompressionEncoder) mil.nga.tiff.compression.CompressionEncoder.rowEncoding():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x008b|0x008b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0095 \l}"];
Node_17 [shape=record,label="{17\:\ 0x008d|0x008d: INVOKE  (r4 I:java.nio.ByteOrder) = (r18 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x0091: INVOKE  (r3 I:byte[]) = \l  (r1 I:mil.nga.tiff.compression.CompressionEncoder)\l  (r3 I:byte[])\l  (r4 I:java.nio.ByteOrder)\l mil.nga.tiff.compression.CompressionEncoder.encode(byte[], java.nio.ByteOrder):byte[] type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x0095|0x0095: INVOKE  (r15 I:mil.nga.tiff.io.ByteWriter), (r3 I:byte[]) mil.nga.tiff.io.ByteWriter.writeBytes(byte[]):void type: VIRTUAL \l0x0098: ARITH  (r14 I:int) = (r14 I:int) + (1 int) \l0x009a: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x009f|0x009f: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a1: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a3: INVOKE  (r3 I:byte[]) = (r15 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getBytes():byte[] type: VIRTUAL \l0x00a7: INVOKE  (r15 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.close():void type: VIRTUAL \l0x00aa: INVOKE  (r4 I:boolean) = (r22 I:mil.nga.tiff.compression.CompressionEncoder) mil.nga.tiff.compression.CompressionEncoder.rowEncoding():boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ae|0x00ae: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00b8 \l}"];
Node_21 [shape=record,label="{21\:\ 0x00b0|0x00b0: INVOKE  (r4 I:java.nio.ByteOrder) = (r18 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.getByteOrder():java.nio.ByteOrder type: VIRTUAL \l0x00b4: INVOKE  (r3 I:byte[]) = \l  (r1 I:mil.nga.tiff.compression.CompressionEncoder)\l  (r3 I:byte[])\l  (r4 I:java.nio.ByteOrder)\l mil.nga.tiff.compression.CompressionEncoder.encode(byte[], java.nio.ByteOrder):byte[] type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b8|0x00b8: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x00b9: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00bb: INVOKE  (r3 I:mil.nga.tiff.io.ByteWriter), (r4 I:byte[]) mil.nga.tiff.io.ByteWriter.writeBytes(byte[]):void type: VIRTUAL \l0x00be: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x00bf: INVOKE  (r7 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x00c3: INVOKE  (r9 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00c6: INVOKE  (r7 I:java.lang.Long) = (r11 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00ca: INVOKE  (r8 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00cd: CAST  (r13 I:long) = (long) (r4 I:int) \l0x00ce: ARITH  (r11 I:long) = (r11 I:long) + (r13 I:long) \l0x00cf: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l0x00d1: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d3: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d5: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00d8|0x00d8: INVOKE  (r0 I:mil.nga.tiff.FileDirectory), (r8 I:java.util.List) mil.nga.tiff.FileDirectory.setStripOffsetsAsLongs(java.util.List):void type: VIRTUAL \l0x00db: INVOKE  (r0 I:mil.nga.tiff.FileDirectory), (r9 I:java.util.List) mil.nga.tiff.FileDirectory.setStripByteCounts(java.util.List):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00de|0x00de: RETURN   \l}"];
MethodNode[shape=record,label="{private static void mil.nga.tiff.TiffWriter.writeStripRasters((r18 I:mil.nga.tiff.io.ByteWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:mil.nga.tiff.FileDirectory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:mil.nga.tiff.compression.CompressionEncoder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_23;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_5;
Node_23 -> Node_24;
}

