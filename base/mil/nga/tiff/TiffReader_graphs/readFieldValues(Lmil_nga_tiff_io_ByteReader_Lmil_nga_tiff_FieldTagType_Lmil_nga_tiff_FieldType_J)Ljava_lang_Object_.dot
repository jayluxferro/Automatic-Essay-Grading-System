digraph "CFG formil.nga.tiff.TiffReader.readFieldValues(Lmil\/nga\/tiff\/io\/ByteReader;Lmil\/nga\/tiff\/FieldTagType;Lmil\/nga\/tiff\/FieldType;J)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (((((long) r6.getBytes()) * r7) \> 4 ? 1 : ((((long) r6.getBytes()) * r7) == 4 ? 0 : \-1)) \<= 0) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|r4.setNextByte((int) r4.readUnsignedInt())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|java.util.List r4 = getValues(r4, r6, r7)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|if ((r7 \> 1 ? 1 : (r7 == 1 ? 0 : \-1)) != 0) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if (r5.isArray() != false) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025}"];
Node_8 [shape=record,label="{8\:\ 0x0027|if (r6 == mil.nga.tiff.FieldType.RATIONAL) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (r6 == mil.nga.tiff.FieldType.SRATIONAL) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r4.get(0)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
MethodNode[shape=record,label="{private static java.lang.Object mil.nga.tiff.TiffReader.readFieldValues((r4v0 mil.nga.tiff.io.ByteReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 mil.nga.tiff.FieldTagType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 mil.nga.tiff.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
}

