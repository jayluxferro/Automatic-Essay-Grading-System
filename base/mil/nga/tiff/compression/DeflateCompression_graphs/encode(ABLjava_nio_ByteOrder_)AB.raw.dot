digraph "CFG formil.nga.tiff.compression.DeflateCompression.encode([BLjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r5 I:java.util.zip.Deflater) =  java.util.zip.Deflater A[Catch:\{ IOException \-\> 0x002c \}, TRY_ENTER]\l0x0002: INVOKE  (r5 I:java.util.zip.Deflater) java.util.zip.Deflater.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x002c \}]\l0x0005: INVOKE  (r5 I:java.util.zip.Deflater), (r4 I:byte[]) java.util.zip.Deflater.setInput(byte[]):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x0008: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream A[Catch:\{ IOException \-\> 0x002c \}]\l0x000a: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) A[Catch:\{ IOException \-\> 0x002c \}]\l0x000b: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r4 I:int) java.io.ByteArrayOutputStream.\<init\>(int):void type: DIRECT A[Catch:\{ IOException \-\> 0x002c \}]\l0x000e: INVOKE  (r5 I:java.util.zip.Deflater) java.util.zip.Deflater.finish():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x0011: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l A[Catch:\{ IOException \-\> 0x002c \}]\l0x0013: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ IOException \-\> 0x002c \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: INVOKE  (r1 I:boolean) = (r5 I:java.util.zip.Deflater) java.util.zip.Deflater.finished():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0024 A[Catch:\{ IOException \-\> 0x002c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: INVOKE  (r1 I:int) = (r5 I:java.util.zip.Deflater), (r4 I:byte[]) java.util.zip.Deflater.deflate(byte[]):int type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x002c \}]\l0x0020: INVOKE  \l  (r0 I:java.io.ByteArrayOutputStream)\l  (r4 I:byte[])\l  (r2 I:int)\l  (r1 I:int)\l java.io.ByteArrayOutputStream.write(byte[], int, int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x0023: GOTO  \-\> 0x0015 A[Catch:\{ IOException \-\> 0x002c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x0027: INVOKE  (r4 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ IOException \-\> 0x002c \}]\l0x002a: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: RETURN  (r4 I:byte[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: NEW_INSTANCE  (r5 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x002f: CONST_STR  (r0 I:java.lang.String) =  \"Failed close encoded stream\" \l0x0031: INVOKE  \l  (r5 I:mil.nga.tiff.util.TiffException)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.compression.DeflateCompression.encode((r3 'this' I:mil.nga.tiff.compression.DeflateCompression A[IMMUTABLE_TYPE, THIS]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

