digraph "CFG formil.nga.tiff.compression.PackbitsCompression.decode([BLjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:mil.nga.tiff.io.ByteReader) =  mil.nga.tiff.io.ByteReader \l0x0002: INVOKE  \l  (r0 I:mil.nga.tiff.io.ByteReader)\l  (r4 I:byte[])\l  (r5 I:java.nio.ByteOrder)\l mil.nga.tiff.io.ByteReader.\<init\>(byte[], java.nio.ByteOrder):void type: DIRECT \l0x0005: NEW_INSTANCE  (r4 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0007: INVOKE  (r4 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r5 I:boolean) = (r0 I:mil.nga.tiff.io.ByteReader) mil.nga.tiff.io.ByteReader.hasByte():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r5 I:byte) = (r0 I:mil.nga.tiff.io.ByteReader) mil.nga.tiff.io.ByteReader.readByte():byte type: VIRTUAL \l0x0014: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-128(0xffffffffffffff80, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r2 I:short) = (r0 I:mil.nga.tiff.io.ByteReader) mil.nga.tiff.io.ByteReader.readUnsignedByte():short type: VIRTUAL \l0x001f: NEG  (r5 I:int) = (r5 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r1 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r4 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l0x0025: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r1 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: INVOKE  (r2 I:short) = (r0 I:mil.nga.tiff.io.ByteReader) mil.nga.tiff.io.ByteReader.readUnsignedByte():short type: VIRTUAL \l0x002e: INVOKE  (r4 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l0x0031: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: INVOKE  (r4 I:byte[]) = (r4 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: RETURN  (r4 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.compression.PackbitsCompression.decode((r3 'this' I:mil.nga.tiff.compression.PackbitsCompression A[IMMUTABLE_TYPE, THIS]), (r4 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_8;
Node_10 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_10;
Node_12 -> Node_13;
}

