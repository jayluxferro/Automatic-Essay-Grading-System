digraph "CFG formil.nga.tiff.compression.LZWCompression.decode([BLjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|mil.nga.tiff.io.ByteReader r0 = new mil.nga.tiff.p023io.ByteReader(r6, r7)\ljava.io.ByteArrayOutputStream r6 = new java.io.ByteArrayOutputStream()\linitializeTable()\lr5.position = 0\lint r1 = getNextCode(r0)\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:0:0x0000, B:17:0x00a3] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:17:0x00a3] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0015\-\>B:17:0x00a3\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r1 == 257) goto L_0x00aa\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r1 != 256) goto L_0x0058\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|initializeTable()\lint r1 = getNextCode(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|LOOP_START\lPHI: r1 \l  PHI: (r1v5 int) = (r1v4 int), (r1v6 int) binds: [B:5:0x001d, B:7:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:6:0x0024\-\>B:7:0x0026\l|if (r1 != 256) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|LOOP_END\lLOOP:1: B:6:0x0024\-\>B:7:0x0026\l|int r1 = getNextCode(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|if (r1 != 257) goto L_0x002f\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|if (r1 \> 256) goto L_0x0041\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|writeValue(r6, r5.table.get(java.lang.Integer.valueOf(r1)))\l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Corrupted code at scan line: \")\lr7.append(r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|throw new mil.nga.tiff.util.TiffException(r7.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0058|java.lang.Integer[] r3 = r5.table.get(java.lang.Integer.valueOf(r1))\l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|if (r3 == null) goto L_0x008b\l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|writeValue(r6, r3)\laddToTable(concat(r5.table.get(java.lang.Integer.valueOf(r2)), r5.table.get(java.lang.Integer.valueOf(r1))[0]))\l}"];
Node_16 [shape=record,label="{16\:\ 0x008b|java.lang.Integer[] r2 = r5.table.get(java.lang.Integer.valueOf(r2))\ljava.lang.Integer[] r2 = concat(r2, r2[0])\lwriteValue(r6, r2)\laddToTable(r1, r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x00a3|LOOP_END\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v1 int), (r1v5 int) binds: [B:23:0x00a3, B:25:0x00a3, B:24:0x00a3] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0015\-\>B:17:0x00a3\l|r2 = r1\lint r1 = getNextCode(r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x00aa}"];
Node_19 [shape=record,label="{19\:\ 0x00ae|RETURN\l|return r6.toByteArray()\l}"];
Node_20 [shape=record,label="{20\:\ 0x00aa|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x00aa|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a3|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a3|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a3|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.compression.LZWCompression.decode((r5v0 'this' mil.nga.tiff.compression.LZWCompression A[IMMUTABLE_TYPE, THIS]), (r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_26;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_20[style=dashed];
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_24;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_25;
Node_16 -> Node_23;
Node_17 -> Node_1;
Node_18 -> Node_19;
Node_20 -> Node_18;
Node_21 -> Node_11;
Node_22 -> Node_18;
Node_23 -> Node_17;
Node_24 -> Node_17;
Node_25 -> Node_17;
Node_26 -> Node_8;
}

