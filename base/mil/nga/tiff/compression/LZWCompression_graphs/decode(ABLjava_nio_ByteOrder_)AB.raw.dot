digraph "CFG formil.nga.tiff.compression.LZWCompression.decode([BLjava\/nio\/ByteOrder;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:mil.nga.tiff.io.ByteReader) =  mil.nga.tiff.io.ByteReader \l0x0002: INVOKE  \l  (r0 I:mil.nga.tiff.io.ByteReader)\l  (r6 I:byte[])\l  (r7 I:java.nio.ByteOrder)\l mil.nga.tiff.io.ByteReader.\<init\>(byte[], java.nio.ByteOrder):void type: DIRECT \l0x0005: NEW_INSTANCE  (r6 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0007: INVOKE  (r6 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x000a: INVOKE  (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.initializeTable():void type: DIRECT \l0x000d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: IPUT  (r7 I:int), (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.position int \l0x0010: INVOKE  (r1 I:int) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r0 I:mil.nga.tiff.io.ByteReader)\l mil.nga.tiff.compression.LZWCompression.getNextCode(mil.nga.tiff.io.ByteReader):int type: DIRECT \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (257(0x101, float:3.6E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00aa \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0058 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.initializeTable():void type: DIRECT \l0x0020: INVOKE  (r1 I:int) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r0 I:mil.nga.tiff.io.ByteReader)\l mil.nga.tiff.compression.LZWCompression.getNextCode(mil.nga.tiff.io.ByteReader):int type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r1 I:int) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r0 I:mil.nga.tiff.io.ByteReader)\l mil.nga.tiff.compression.LZWCompression.getNextCode(mil.nga.tiff.io.ByteReader):int type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IGET  (r2 I:java.util.Map\<java.lang.Integer, java.lang.Integer[]\>) = (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.table java.util.Map \l0x0033: INVOKE  (r3 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0037: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r2 I:java.lang.Integer[]) = (java.lang.Integer[]) (r2 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r6 I:java.io.ByteArrayOutputStream)\l  (r2 I:java.lang.Integer[])\l mil.nga.tiff.compression.LZWCompression.writeValue(java.io.ByteArrayOutputStream, java.lang.Integer[]):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: NEW_INSTANCE  (r6 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x0043: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0045: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0048: CONST_STR  (r0 I:java.lang.String) =  \"Corrupted code at scan line: \" \l0x004a: INVOKE  (r7 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: INVOKE  (r7 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0054: INVOKE  \l  (r6 I:mil.nga.tiff.util.TiffException)\l  (r7 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|0x0058: IGET  (r3 I:java.util.Map\<java.lang.Integer, java.lang.Integer[]\>) = (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.table java.util.Map \l0x005a: INVOKE  (r4 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x005e: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0062: CHECK_CAST  (r3 I:java.lang.Integer[]) = (java.lang.Integer[]) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x008b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0066|0x0066: INVOKE  \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r6 I:java.io.ByteArrayOutputStream)\l  (r3 I:java.lang.Integer[])\l mil.nga.tiff.compression.LZWCompression.writeValue(java.io.ByteArrayOutputStream, java.lang.Integer[]):void type: DIRECT \l0x0069: IGET  (r3 I:java.util.Map\<java.lang.Integer, java.lang.Integer[]\>) = (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.table java.util.Map \l0x006b: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x006f: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0073: CHECK_CAST  (r2 I:java.lang.Integer[]) = (java.lang.Integer[]) (r2 I:?[OBJECT, ARRAY]) \l0x0075: IGET  (r3 I:java.util.Map\<java.lang.Integer, java.lang.Integer[]\>) = (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.table java.util.Map \l0x0077: INVOKE  (r4 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x007b: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x007f: CHECK_CAST  (r3 I:java.lang.Integer[]) = (java.lang.Integer[]) (r3 I:?[OBJECT, ARRAY]) \l0x0081: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0083: INVOKE  (r2 I:java.lang.Integer[]) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r2 I:java.lang.Integer[])\l  (r3 I:java.lang.Integer)\l mil.nga.tiff.compression.LZWCompression.concat(java.lang.Integer[], java.lang.Integer):java.lang.Integer[] type: DIRECT \l0x0087: INVOKE  \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r2 I:java.lang.Integer[])\l mil.nga.tiff.compression.LZWCompression.addToTable(java.lang.Integer[]):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x008b|0x008b: IGET  (r3 I:java.util.Map\<java.lang.Integer, java.lang.Integer[]\>) = (r5 I:mil.nga.tiff.compression.LZWCompression) mil.nga.tiff.compression.LZWCompression.table java.util.Map \l0x008d: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0091: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0095: CHECK_CAST  (r2 I:java.lang.Integer[]) = (java.lang.Integer[]) (r2 I:?[OBJECT, ARRAY]) \l0x0097: AGET  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0099: INVOKE  (r2 I:java.lang.Integer[]) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r2 I:java.lang.Integer[])\l  (r3 I:java.lang.Integer)\l mil.nga.tiff.compression.LZWCompression.concat(java.lang.Integer[], java.lang.Integer):java.lang.Integer[] type: DIRECT \l0x009d: INVOKE  \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r6 I:java.io.ByteArrayOutputStream)\l  (r2 I:java.lang.Integer[])\l mil.nga.tiff.compression.LZWCompression.writeValue(java.io.ByteArrayOutputStream, java.lang.Integer[]):void type: DIRECT \l0x00a0: INVOKE  \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r1 I:int)\l  (r2 I:java.lang.Integer[])\l mil.nga.tiff.compression.LZWCompression.addToTable(int, java.lang.Integer[]):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x00a3|0x00a3: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a4: INVOKE  (r1 I:int) = \l  (r5 I:mil.nga.tiff.compression.LZWCompression)\l  (r0 I:mil.nga.tiff.io.ByteReader)\l mil.nga.tiff.compression.LZWCompression.getNextCode(mil.nga.tiff.io.ByteReader):int type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x00aa|0x00aa: INVOKE  (r6 I:byte[]) = (r6 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ae|0x00ae: RETURN  (r6 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.tiff.compression.LZWCompression.decode((r5 'this' I:mil.nga.tiff.compression.LZWCompression A[IMMUTABLE_TYPE, THIS]), (r6 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_10;
Node_8 -> Node_19[style=dashed];
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_19 -> Node_20;
}

