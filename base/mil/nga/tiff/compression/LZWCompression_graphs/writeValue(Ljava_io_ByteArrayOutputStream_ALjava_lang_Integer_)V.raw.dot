digraph "CFG formil.nga.tiff.compression.LZWCompression.writeValue(Ljava\/io\/ByteArrayOutputStream;[Ljava\/lang\/Integer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: AGET  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0006: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x000a: INVOKE  (r3 I:java.io.ByteArrayOutputStream), (r1 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l0x000d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{private void mil.nga.tiff.compression.LZWCompression.writeValue((r2 'this' I:mil.nga.tiff.compression.LZWCompression A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.ByteArrayOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Integer[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

