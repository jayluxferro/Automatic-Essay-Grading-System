digraph "CFG formil.nga.tiff.io.ByteWriter.writeUnsignedInt(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r1 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0003: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x0007: IGET  (r2 I:java.nio.ByteOrder) = (r4 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.byteOrder java.nio.ByteOrder \l0x0009: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:java.nio.ByteBuffer), (r2 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x000d: CONST  (r2 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x0012: ARITH  (r5 I:long) = (r5 I:long) & (r2 I:long) \l0x0013: CAST  (r5 I:int) = (int) (r5 I:long) \l0x0014: INVOKE  (r5 I:java.nio.ByteBuffer) = (r0 I:java.nio.ByteBuffer), (r5 I:int) java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x0018: INVOKE  (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.flip():java.nio.Buffer type: VIRTUAL \l0x001b: INVOKE  (r5 I:java.nio.ByteBuffer), (r1 I:byte[]) java.nio.ByteBuffer.get(byte[]):java.nio.ByteBuffer type: VIRTUAL \l0x001e: IGET  (r5 I:java.io.ByteArrayOutputStream) = (r4 I:mil.nga.tiff.io.ByteWriter) mil.nga.tiff.io.ByteWriter.os java.io.ByteArrayOutputStream \l0x0020: INVOKE  (r5 I:java.io.ByteArrayOutputStream), (r1 I:byte[]) java.io.ByteArrayOutputStream.write(byte[]):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|0x0023: RETURN   \l}"];
MethodNode[shape=record,label="{public void mil.nga.tiff.io.ByteWriter.writeUnsignedInt((r4 'this' I:mil.nga.tiff.io.ByteWriter A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

