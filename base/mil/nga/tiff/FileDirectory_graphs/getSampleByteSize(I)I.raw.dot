digraph "CFG formil.nga.tiff.FileDirectory.getSampleByteSize(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r3 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getBitsPerSample():java.util.List type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0014: ARITH  (r0 I:int) = (r4 I:int) % (8 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: ARITH  (r4 I:int) = (r4 I:int) \/ (8 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN  (r4 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x001d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0022: CONST_STR  (r2 I:java.lang.String) =  \"Sample bit\-width of \" \l0x0024: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002a: CONST_STR  (r4 I:java.lang.String) =  \" is not supported\" \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  \l  (r0 I:mil.nga.tiff.util.TiffException)\l  (r4 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x0039: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003e: CONST_STR  (r2 I:java.lang.String) =  \"Sample index \" \l0x0040: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0046: CONST_STR  (r4 I:java.lang.String) =  \" is out of range\" \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004f: INVOKE  \l  (r0 I:mil.nga.tiff.util.TiffException)\l  (r4 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0052|0x0052: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private int mil.nga.tiff.FileDirectory.getSampleByteSize((r3 'this' I:mil.nga.tiff.FileDirectory A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

