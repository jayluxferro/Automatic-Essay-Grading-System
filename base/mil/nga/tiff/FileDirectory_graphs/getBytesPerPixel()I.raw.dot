digraph "CFG formil.nga.tiff.FileDirectory.getBytesPerPixel()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r7 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getBitsPerSample():java.util.List type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r4 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:12:0x0072 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0017: ARITH  (r5 I:int) = (r4 I:int) % (8 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0056 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001f: CHECK_CAST  (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x0028: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: NEW_INSTANCE  (r3 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x002d: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002f: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0032: CONST_STR  (r6 I:java.lang.String) =  \"Differing size of samples in a pixel are not supported. sample 0 = \" \l0x0034: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003b: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003e: CONST_STR  (r0 I:java.lang.String) =  \", sample \" \l0x0040: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0046: CONST_STR  (r0 I:java.lang.String) =  \" = \" \l0x0048: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: INVOKE  (r5 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r0 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0052: INVOKE  \l  (r3 I:mil.nga.tiff.util.TiffException)\l  (r0 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: NEW_INSTANCE  (r0 I:mil.nga.tiff.util.TiffException) =  mil.nga.tiff.util.TiffException \l0x0058: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005d: CONST_STR  (r2 I:java.lang.String) =  \"Sample bit\-width of \" \l0x005f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0065: CONST_STR  (r2 I:java.lang.String) =  \" is not supported\" \l0x0067: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006e: INVOKE  \l  (r0 I:mil.nga.tiff.util.TiffException)\l  (r1 I:java.lang.String)\l mil.nga.tiff.util.TiffException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0071|0x0071: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0072|0x0072: ARITH  (r3 I:int) = (r3 I:int) \/ (8 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0074|0x0074: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private int mil.nga.tiff.FileDirectory.getBytesPerPixel((r7 'this' I:mil.nga.tiff.FileDirectory A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

