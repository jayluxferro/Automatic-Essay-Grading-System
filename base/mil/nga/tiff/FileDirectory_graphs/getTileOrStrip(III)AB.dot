digraph "CFG formil.nga.tiff.FileDirectory.getTileOrStrip(III)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = getImageWidth().intValue()\lint r1 = getImageHeight().intValue()\lint r2 = getTileWidth().intValue()\lint r3 = getTileHeight().intValue()\lint r0 = ((r0 + r2) \- 1) \/ r2\lint r1 = ((r1 + r3) \- 1) \/ r3\l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|if (r5.planarConfiguration != 1) goto L_0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x002b|int r7 = (r7 * r0) + r6\l}"];
Node_3 [shape=record,label="{3\:\ 0x002f}"];
Node_4 [shape=record,label="{4\:\ 0x0032|if (r5.planarConfiguration != 2) goto L_0x003e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|int r7 = (((r8 * r0) * r1) + (r7 * r0)) + r6\l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|r7 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|PHI: r7 \l  PHI: (r7v1 int) = (r7v4 int), (r7v6 int), (r7v8 int) binds: [B:6:0x003e, B:5:0x0034, B:2:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0041|if (r5.cache == null) goto L_0x005c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0043}"];
Node_10 [shape=record,label="{10\:\ 0x004d|if (r5.cache.containsKey(java.lang.Integer.valueOf(r7)) == false) goto L_0x005c\l}"];
Node_11 [shape=record,label="{11\:\ 0x004f}"];
Node_12 [shape=record,label="{12\:\ 0x005c}"];
Node_13 [shape=record,label="{13\:\ 0x005e|if (r5.lastBlockIndex != r7) goto L_0x0067\l}"];
Node_14 [shape=record,label="{14\:\ 0x0060}"];
Node_15 [shape=record,label="{15\:\ 0x0062|if (r5.lastBlock == null) goto L_0x0067\l}"];
Node_16 [shape=record,label="{16\:\ 0x0064}"];
Node_17 [shape=record,label="{17\:\ 0x0067}"];
Node_18 [shape=record,label="{18\:\ 0x0069|if (r5.tiled == false) goto L_0x0088\l}"];
Node_19 [shape=record,label="{19\:\ 0x006b|int r6 = getTileOffsets().get(r7).intValue()\lint r8 = getTileByteCounts().get(r7).intValue()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0088|int r6 = getStripOffsets().get(r7).intValue()\lint r8 = getStripByteCounts().get(r7).intValue()\l}"];
Node_21 [shape=record,label="{21\:\ 0x00a4|PHI: r6 r8 \l  PHI: (r6v4 int) = (r6v11 int), (r6v15 int) binds: [B:20:0x0088, B:19:0x006b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 int) = (r8v8 int), (r8v12 int) binds: [B:20:0x0088, B:19:0x006b] A[DONT_GENERATE, DONT_INLINE]\l|r5.reader.setNextByte(r6)\lbyte[] r6 = r5.reader.readBytes(r8)\lbyte[] r6 = r5.decoder.decode(r6, r5.reader.getByteOrder())\l}"];
Node_22 [shape=record,label="{22\:\ 0x00bd|if (r5.cache == null) goto L_0x00c9\l}"];
Node_23 [shape=record,label="{23\:\ 0x00bf|r5.cache.put(java.lang.Integer.valueOf(r7), r6)\l}"];
Node_24 [shape=record,label="{24\:\ 0x00c9|r5.lastBlockIndex = r7\lr5.lastBlock = r6\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r6\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return r5.cache.get(java.lang.Integer.valueOf(r7))\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return r5.lastBlock\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return r6\l}"];
MethodNode[shape=record,label="{private byte[] mil.nga.tiff.FileDirectory.getTileOrStrip((r5v0 'this' mil.nga.tiff.FileDirectory A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_26;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_28;
Node_24 -> Node_25;
}

