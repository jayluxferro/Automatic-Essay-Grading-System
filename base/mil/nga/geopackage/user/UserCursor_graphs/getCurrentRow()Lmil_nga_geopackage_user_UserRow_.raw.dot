digraph "CFG formil.nga.geopackage.user.UserCursor.getCurrentRow()Lmil\/nga\/geopackage\/user\/UserRow;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:TTable) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.table mil.nga.geopackage.user.UserTable \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:TTable) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.table mil.nga.geopackage.user.UserTable \l0x0006: INVOKE  (r0 I:int) = (r0 I:mil.nga.geopackage.user.UserTable) mil.nga.geopackage.user.UserTable.columnCount():int type: VIRTUAL \l0x000a: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000c: IGET  (r1 I:TTable) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.table mil.nga.geopackage.user.UserTable \l0x000e: INVOKE  (r1 I:int) = (r1 I:mil.nga.geopackage.user.UserTable) mil.nga.geopackage.user.UserTable.columnCount():int type: VIRTUAL \l0x0012: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: IGET  (r3 I:TTable) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.table mil.nga.geopackage.user.UserTable \l0x0017: INVOKE  (r3 I:java.util.List) = (r3 I:mil.nga.geopackage.user.UserTable) mil.nga.geopackage.user.UserTable.getColumns():java.util.List type: VIRTUAL \l0x001b: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l0x0023: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0046 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r4 I:mil.nga.geopackage.user.UserColumn) = (mil.nga.geopackage.user.UserColumn) (r4 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  (r6 I:int) = (r4 I:mil.nga.geopackage.user.UserColumn) mil.nga.geopackage.user.UserColumn.getIndex():int type: VIRTUAL \l0x0030: INVOKE  (r7 I:int) = (r9 I:mil.nga.geopackage.user.UserCursor), (r6 I:int) mil.nga.geopackage.user.UserCursor.getType(int):int type: VIRTUAL \l0x0034: INVOKE  (r8 I:boolean) = (r4 I:mil.nga.geopackage.user.UserColumn) mil.nga.geopackage.user.UserColumn.isPrimaryKey():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003d \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003d \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: APUT  \l  (r0 I:?[int, float][])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x003f: INVOKE  (r4 I:java.lang.Object) = \l  (r9 I:mil.nga.geopackage.user.UserCursor)\l  (r4 I:mil.nga.geopackage.user.UserColumn)\l mil.nga.geopackage.user.UserCursor.getValue(mil.nga.geopackage.user.UserColumn):java.lang.Object type: VIRTUAL \l0x0043: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: INVOKE  (r0 I:mil.nga.geopackage.user.UserCoreRow) = \l  (r9 I:mil.nga.geopackage.user.UserCursor)\l  (r0 I:int[])\l  (r1 I:java.lang.Object[])\l mil.nga.geopackage.user.UserCursor.getRow(int[], java.lang.Object[]):mil.nga.geopackage.user.UserCoreRow type: VIRTUAL \l0x004a: CHECK_CAST  (r0 I:mil.nga.geopackage.user.UserRow) = (mil.nga.geopackage.user.UserRow) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0060 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IGET  (r1 I:java.util.Set\<java.lang.Integer\>) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.invalidPositions java.util.Set \l0x0050: INVOKE  (r2 I:int) = (r9 I:mil.nga.geopackage.user.UserCursor) mil.nga.geopackage.user.UserCursor.getPosition():int type: VIRTUAL \l0x0054: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0058: INVOKE  (r1 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l0x005b: INVOKE  (r0 I:mil.nga.geopackage.user.UserRow), (r5 I:boolean) mil.nga.geopackage.user.UserRow.setValid(boolean):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|0x005f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|0x0060: RETURN  (r0 I:TRow) \l}"];
MethodNode[shape=record,label="{private TRow mil.nga.geopackage.user.UserCursor.getCurrentRow((r9 'this' I:mil.nga.geopackage.user.UserCursor A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TTRow;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_14;
}

