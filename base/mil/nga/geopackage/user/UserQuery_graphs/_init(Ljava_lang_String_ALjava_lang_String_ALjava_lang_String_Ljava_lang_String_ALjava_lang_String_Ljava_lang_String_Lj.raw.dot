digraph "CFG formil.nga.geopackage.user.UserQuery.\<init\>(Ljava\/lang\/String;[Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0005: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:java.util.Map\<mil.nga.geopackage.user.UserQueryParamType, java.lang.Object\>)\l  (r1 I:mil.nga.geopackage.user.UserQuery)\l mil.nga.geopackage.user.UserQuery.params java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: SGET  (r0 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.TABLE mil.nga.geopackage.user.UserQueryParamType \l0x000e: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r0 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r2 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.COLUMNS mil.nga.geopackage.user.UserQueryParamType \l0x0015: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r3 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.COLUMNS_AS mil.nga.geopackage.user.UserQueryParamType \l0x001c: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r4 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.SELECTION mil.nga.geopackage.user.UserQueryParamType \l0x0023: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r5 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.SELECTION_ARGS mil.nga.geopackage.user.UserQueryParamType \l0x002a: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r6 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.GROUP_BY mil.nga.geopackage.user.UserQueryParamType \l0x0031: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r7 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.HAVING mil.nga.geopackage.user.UserQueryParamType \l0x0038: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r8 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0042 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.ORDER_BY mil.nga.geopackage.user.UserQueryParamType \l0x003f: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r9 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0049 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: SGET  (r2 I:mil.nga.geopackage.user.UserQueryParamType) =  mil.nga.geopackage.user.UserQueryParamType.LIMIT mil.nga.geopackage.user.UserQueryParamType \l0x0046: INVOKE  \l  (r1 I:mil.nga.geopackage.user.UserQuery)\l  (r2 I:mil.nga.geopackage.user.UserQueryParamType)\l  (r10 I:java.lang.Object)\l mil.nga.geopackage.user.UserQuery.set(mil.nga.geopackage.user.UserQueryParamType, java.lang.Object):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: RETURN   \l}"];
MethodNode[shape=record,label="{public void mil.nga.geopackage.user.UserQuery.\<init\>((r1 'this' I:mil.nga.geopackage.user.UserQuery A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

