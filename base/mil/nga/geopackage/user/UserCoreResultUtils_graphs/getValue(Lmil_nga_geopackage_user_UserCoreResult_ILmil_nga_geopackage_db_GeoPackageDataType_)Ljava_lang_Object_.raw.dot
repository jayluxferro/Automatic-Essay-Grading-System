digraph "CFG formil.nga.geopackage.user.UserCoreResultUtils.getValue(Lmil\/nga\/geopackage\/user\/UserCoreResult;ILmil\/nga\/geopackage\/db\/GeoPackageDataType;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r1 I:mil.nga.geopackage.user.UserCoreResult), (r2 I:int) mil.nga.geopackage.user.UserCoreResult.getType(int):int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x0028, 0x0023, 0x000e, 0x0009] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r1 I:byte[]) = (r1 I:mil.nga.geopackage.user.UserCoreResult), (r2 I:int) mil.nga.geopackage.user.UserCoreResult.getBlob(int):byte[] type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.String) = (r1 I:mil.nga.geopackage.user.UserCoreResult), (r2 I:int) mil.nga.geopackage.user.UserCoreResult.getString(int):java.lang.String type: INTERFACE \l0x0012: SGET  (r2 I:mil.nga.geopackage.db.GeoPackageDataType) =  mil.nga.geopackage.db.GeoPackageDataType.DATE mil.nga.geopackage.db.GeoPackageDataType \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: SGET  (r2 I:mil.nga.geopackage.db.GeoPackageDataType) =  mil.nga.geopackage.db.GeoPackageDataType.DATETIME mil.nga.geopackage.db.GeoPackageDataType \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r2 I:mil.nga.geopackage.db.DateConverter) = (r3 I:mil.nga.geopackage.db.GeoPackageDataType) mil.nga.geopackage.db.DateConverter.converter(mil.nga.geopackage.db.GeoPackageDataType):mil.nga.geopackage.db.DateConverter type: STATIC \l0x001e: INVOKE  (r1 I:java.util.Date) = \l  (r2 I:mil.nga.geopackage.db.DateConverter)\l  (r1 I:java.lang.String)\l mil.nga.geopackage.db.DateConverter.dateValue(java.lang.String):java.util.Date type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:mil.nga.geopackage.user.UserCoreResult)\l  (r2 I:int)\l  (r3 I:mil.nga.geopackage.db.GeoPackageDataType)\l mil.nga.geopackage.user.UserCoreResultUtils.getFloatValue(mil.nga.geopackage.user.UserCoreResult, int, mil.nga.geopackage.db.GeoPackageDataType):java.lang.Object type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:mil.nga.geopackage.user.UserCoreResult)\l  (r2 I:int)\l  (r3 I:mil.nga.geopackage.db.GeoPackageDataType)\l mil.nga.geopackage.user.UserCoreResultUtils.getIntegerValue(mil.nga.geopackage.user.UserCoreResult, int, mil.nga.geopackage.db.GeoPackageDataType):java.lang.Object type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public static java.lang.Object mil.nga.geopackage.user.UserCoreResultUtils.getValue((r1 I:mil.nga.geopackage.user.UserCoreResult\<?, ?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:mil.nga.geopackage.db.GeoPackageDataType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/geopackage\/user\/UserCoreResult\<, ***\>;I, Lmil\/nga\/geopackage\/db\/GeoPackageDataType;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_1 -> Node_4;
Node_1 -> Node_9;
Node_1 -> Node_10;
Node_2 -> Node_11;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_11;
Node_9 -> Node_11;
Node_10 -> Node_11;
}

