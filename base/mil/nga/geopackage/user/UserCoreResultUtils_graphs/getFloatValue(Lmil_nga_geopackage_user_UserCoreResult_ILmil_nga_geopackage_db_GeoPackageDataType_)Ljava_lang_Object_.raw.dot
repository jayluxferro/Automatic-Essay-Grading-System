digraph "CFG formil.nga.geopackage.user.UserCoreResultUtils.getFloatValue(Lmil\/nga\/geopackage\/user\/UserCoreResult;ILmil\/nga\/geopackage\/db\/GeoPackageDataType;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  mil.nga.geopackage.user.UserCoreResultUtils.1.$SwitchMap$mil$nga$geopackage$db$GeoPackageDataType int[] \l0x0002: INVOKE  (r1 I:int) = (r4 I:mil.nga.geopackage.db.GeoPackageDataType) mil.nga.geopackage.db.GeoPackageDataType.ordinal():int type: VIRTUAL \l0x0006: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[5, 6, 7, 8, 9] t:[0x0030, 0x0030, 0x0027, 0x0030, 0x0030] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: NEW_INSTANCE  (r2 I:mil.nga.geopackage.GeoPackageException) =  mil.nga.geopackage.GeoPackageException \l0x000d: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r0 I:java.lang.String) =  \"Data Type \" \l0x0014: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x001a: CONST_STR  (r4 I:java.lang.String) =  \" is not a float type\" \l0x001c: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0023: INVOKE  \l  (r2 I:mil.nga.geopackage.GeoPackageException)\l  (r3 I:java.lang.String)\l mil.nga.geopackage.GeoPackageException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: INVOKE  (r3 I:float) = (r2 I:mil.nga.geopackage.user.UserCoreResult), (r3 I:int) mil.nga.geopackage.user.UserCoreResult.getFloat(int):float type: INTERFACE \l0x002b: INVOKE  (r3 I:java.lang.Float) = (r3 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: INVOKE  (r3 I:double) = (r2 I:mil.nga.geopackage.user.UserCoreResult), (r3 I:int) mil.nga.geopackage.user.UserCoreResult.getDouble(int):double type: INTERFACE \l0x0034: INVOKE  (r3 I:java.lang.Double) = (r3 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: INVOKE  (r2 I:boolean) = (r2 I:mil.nga.geopackage.user.UserCoreResult) mil.nga.geopackage.user.UserCoreResult.wasNull():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003f \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: RETURN  (r3 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public static java.lang.Object mil.nga.geopackage.user.UserCoreResultUtils.getFloatValue((r2 I:mil.nga.geopackage.user.UserCoreResult\<?, ?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:mil.nga.geopackage.db.GeoPackageDataType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/geopackage\/user\/UserCoreResult\<, ***\>;I, Lmil\/nga\/geopackage\/db\/GeoPackageDataType;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

