digraph "CFG formil.nga.geopackage.user.UserColumn.validateMax()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.max == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r3.dataType == null) goto L_0x0062\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r3.dataType == mil.nga.geopackage.p021db.GeoPackageDataType.TEXT) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r3.dataType != mil.nga.geopackage.p021db.GeoPackageDataType.BLOB) goto L_0x0015\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Column max is only supported for \")\lr1.append(mil.nga.geopackage.p021db.GeoPackageDataType.TEXT.name())\lr1.append(\" and \")\lr1.append(mil.nga.geopackage.p021db.GeoPackageDataType.BLOB.name())\lr1.append(\" columns. column: \")\lr1.append(r3.name)\lr1.append(\", max: \")\lr1.append(r3.max)\lr1.append(\", type: \")\lr1.append(r3.dataType.name())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0061|throw new mil.nga.geopackage.GeoPackageException(r1.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0062|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Column max is only supported for data typed columns. column: \")\lr1.append(r3.name)\lr1.append(\", max: \")\lr1.append(r3.max)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0084|throw new mil.nga.geopackage.GeoPackageException(r1.toString())\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void mil.nga.geopackage.user.UserColumn.validateMax((r3v0 'this' mil.nga.geopackage.user.UserColumn A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_14[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
}

