digraph "CFG formil.nga.geopackage.user.UserCoreDao.buildColumnsArray(Ljava\/util\/List;)[Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r2 I:mil.nga.geopackage.user.UserColumn) = (mil.nga.geopackage.user.UserColumn) (r2 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r2 I:java.lang.String) = (r2 I:mil.nga.geopackage.user.UserColumn) mil.nga.geopackage.user.UserColumn.getName():java.lang.String type: VIRTUAL \l0x0017: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0019: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN  (r0 I:java.lang.String[]) \l}"];
MethodNode[shape=record,label="{private java.lang.String[] mil.nga.geopackage.user.UserCoreDao.buildColumnsArray((r3 'this' I:mil.nga.geopackage.user.UserCoreDao A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.List\<TColumn\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, TTColumn;\>;)[, Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

