digraph "CFG formil.nga.geopackage.features.index.FeatureIndexManager.index(Ljava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: INVOKE  (r1 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r1 I:mil.nga.geopackage.features.index.FeatureIndexType) = (mil.nga.geopackage.features.index.FeatureIndexType) (r1 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:int) = \l  (r2 I:mil.nga.geopackage.features.index.FeatureIndexManager)\l  (r1 I:mil.nga.geopackage.features.index.FeatureIndexType)\l mil.nga.geopackage.features.index.FeatureIndexManager.index(mil.nga.geopackage.features.index.FeatureIndexType):int type: VIRTUAL \l0x0015: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int mil.nga.geopackage.features.index.FeatureIndexManager.index((r2 'this' I:mil.nga.geopackage.features.index.FeatureIndexManager A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.List\<mil.nga.geopackage.features.index.FeatureIndexType\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lmil\/nga\/geopackage\/features\/index\/FeatureIndexType;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

