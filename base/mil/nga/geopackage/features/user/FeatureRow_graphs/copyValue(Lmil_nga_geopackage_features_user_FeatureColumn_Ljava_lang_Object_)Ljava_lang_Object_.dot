digraph "CFG formil.nga.geopackage.features.user.FeatureRow.copyValue(Lmil\/nga\/geopackage\/features\/user\/FeatureColumn;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4.isGeometry() == false) goto L_0x0037\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if ((r5 instanceof mil.nga.geopackage.geom.GeoPackageGeometryData) == false) goto L_0x0037\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000c|SYNTHETIC\lSplitter:B:5:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ IOException \-\> 0x001b \}\lSplitter:B:5:0x000c\l|byte[] r5 = ((mil.nga.geopackage.geom.GeoPackageGeometryData) r5).toBytes()     \/\/ Catch:\{ IOException \-\> 0x001b \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|ExcHandler: IOException (r5v2 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:5:0x000c\l|java.io.IOException r5 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Failed to copy Geometry Data bytes. column: \")\lr1.append(r4.getName())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|throw new mil.nga.geopackage.GeoPackageException(r1.toString(), r5)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return super.copyValue(r4, r5)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return new mil.nga.geopackage.geom.GeoPackageGeometryData(java.util.Arrays.copyOf(r5, r5.length))\l}"];
MethodNode[shape=record,label="{protected java.lang.Object mil.nga.geopackage.features.user.FeatureRow.copyValue((r3v0 'this' mil.nga.geopackage.features.user.FeatureRow A[IMMUTABLE_TYPE, THIS]), (r4v0 mil.nga.geopackage.features.user.FeatureColumn A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

