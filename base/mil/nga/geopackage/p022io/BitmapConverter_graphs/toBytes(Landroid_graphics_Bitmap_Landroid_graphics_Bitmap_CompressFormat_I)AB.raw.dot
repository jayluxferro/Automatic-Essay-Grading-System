digraph "CFG formil.nga.geopackage.io.BitmapConverter.toBytes(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Bitmap$CompressFormat;I)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0002: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: INVOKE  \l  (r1 I:android.graphics.Bitmap)\l  (r2 I:android.graphics.Bitmap$CompressFormat)\l  (r3 I:int)\l  (r0 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}, TRY_ENTER]\l0x0008: INVOKE  (r1 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x000b: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r1 I:byte[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler: all null\lSplitter:B:1:0x0005\l|0x0010: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static byte[] mil.nga.geopackage.io.BitmapConverter.toBytes((r1 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.graphics.Bitmap$CompressFormat A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

