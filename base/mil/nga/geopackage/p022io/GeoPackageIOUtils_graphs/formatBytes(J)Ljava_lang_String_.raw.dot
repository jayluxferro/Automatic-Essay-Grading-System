digraph "CFG formil.nga.geopackage.io.GeoPackageIOUtils.formatBytes(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CAST  (r0 I:double) = (double) (r7 I:long) \l0x0001: CONST_STR  (r2 I:java.lang.String) =  \"B\" \l0x0003: CONST  (r3 I:?[long, double]) = (1024(0x400, double:5.06E\-321) ?[long, double]) \l0x0005: CMP_L  (r7 I:int) = (r7 I:long), (r3 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r7 I:double) = (r0 I:double) java.lang.Math.log(double):double type: STATIC \l0x000d: CONST  (r3 I:?[long, double]) = \l  (4652218415073722368(0x4090000000000000, double:1024.0) ?[long, double])\l \l0x000f: INVOKE  (r5 I:double) = (r3 I:double) java.lang.Math.log(double):double type: STATIC \l0x0013: ARITH  (r7 I:double) = (r7 I:double) \/ (r5 I:double) \l0x0014: CAST  (r7 I:int) = (int) (r7 I:double) \l0x0015: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r7 I:int) = (r7 I:int), (r8 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: SWITCH  \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x0027, 0x0024, 0x0021, 0x001e] \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CONST_STR  (r8 I:java.lang.String) =  \"TB\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: CONST_STR  (r8 I:java.lang.String) =  \"GB\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST_STR  (r8 I:java.lang.String) =  \"MB\" \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: CONST_STR  (r8 I:java.lang.String) =  \"KB\" \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CAST  (r7 I:double) = (double) (r7 I:int) \l0x002b: INVOKE  (r7 I:double) = (r3 I:double), (r7 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x002f: ARITH  (r0 I:double) = (r0 I:double) \/ (r7 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: NEW_INSTANCE  (r7 I:java.text.DecimalFormat) =  java.text.DecimalFormat \l0x0032: CONST_STR  (r8 I:java.lang.String) =  \"#.##\" \l0x0034: INVOKE  (r7 I:java.text.DecimalFormat), (r8 I:java.lang.String) java.text.DecimalFormat.\<init\>(java.lang.String):void type: DIRECT \l0x0037: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003c: INVOKE  (r7 I:java.lang.String) = (r7 I:java.text.DecimalFormat), (r0 I:double) java.text.DecimalFormat.format(double):java.lang.String type: VIRTUAL \l0x0040: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: CONST_STR  (r7 I:java.lang.String) =  \" \" \l0x0045: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r8 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: INVOKE  (r7 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|0x004f: RETURN  (r7 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String mil.nga.geopackage.io.GeoPackageIOUtils.formatBytes((r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_8;
Node_3 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

