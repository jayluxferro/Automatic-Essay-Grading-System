digraph "CFG formil.nga.geopackage.io.GeoPackageIOUtils.copyStream(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;Lmil\/nga\/geopackage\/io\/GeoPackageProgress;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] r0 = new byte[1024]\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lLOOP:0: B:1:0x0004\-\>B:11:0x0004\l|if (r5 == null) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r5.isActive() == false) goto L_0x001c\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|int r1 = r3.read(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r1 \<= 0) goto L_0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|r4.write(r0, 0, r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r5 == null) goto L_0x0004\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|r5.addProgress(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|r4.flush()\lr4.close()\lr3.close()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0004\-\>B:11:0x0004\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void mil.nga.geopackage.io.GeoPackageIOUtils.copyStream((r3v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 mil.nga.geopackage.io.GeoPackageProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_11 -> Node_1;
Node_12 -> Node_9;
Node_13 -> Node_9;
Node_14 -> Node_11;
Node_15 -> Node_11;
}

