digraph "CFG formil.nga.geopackage.io.ResourceIOUtils.parseSQLStatements(Ljava\/io\/InputStream;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r1 I:java.util.Scanner) =  java.util.Scanner \l0x0007: INVOKE  (r1 I:java.util.Scanner), (r2 I:java.io.InputStream) java.util.Scanner.\<init\>(java.io.InputStream):void type: DIRECT \l0x000a: CONST_STR  (r2 I:java.lang.String) =  \"ns*n\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|SYNTHETIC\lSplitter:B:1:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000c\l|0x000c: INVOKE  (r2 I:java.util.regex.Pattern) = (r2 I:java.lang.String) java.util.regex.Pattern.compile(java.lang.String):java.util.regex.Pattern type: STATIC A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0010: INVOKE  (r1 I:java.util.Scanner), (r2 I:java.util.regex.Pattern) java.util.Scanner.useDelimiter(java.util.regex.Pattern):java.util.Scanner type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r2 I:boolean) = (r1 I:java.util.Scanner) java.util.Scanner.hasNext():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r2 I:java.lang.String) = (r1 I:java.util.Scanner) java.util.Scanner.next():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x001d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0021: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: INVOKE  (r1 I:java.util.Scanner) java.util.Scanner.close():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x000c\l|0x0029: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r1 I:java.util.Scanner) java.util.Scanner.close():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<java.lang.String\> mil.nga.geopackage.io.ResourceIOUtils.parseSQLStatements((r2 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/InputStream;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

