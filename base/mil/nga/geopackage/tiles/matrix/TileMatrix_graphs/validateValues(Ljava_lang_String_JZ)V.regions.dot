digraph "CFG formil.nga.geopackage.tiles.matrix.TileMatrix.validateValues(Ljava\/lang\/String;JZ)V" {
subgraph cluster_Region_2120392523 {
label = "R(2:0|(1:(3:4|8|9)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = (r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1))\l}"];
subgraph cluster_Region_1510223035 {
label = "R(1:(3:4|8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_225058868 {
label = "IF [B:1:0x0004, B:2:0x0006, B:3:0x0008] THEN: R(3:4|8|9) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 \< 0) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|ADDED_TO_REGION\l|if (r0 == 0) goto L_0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (r6 == false) goto L_0x000c\l}"];
subgraph cluster_Region_1124099701 {
label = "R(3:4|8|9)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|java.lang.StringBuilder java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r3)\lr1.append(\" value must be greater than \")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|PHI: r3 \l  PHI: (r3v2 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(r6 ? \"or equal to \" : \"\")\lr1.append(\"0: \")\lr1.append(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|throw new mil.nga.geopackage.GeoPackageException(r1.toString())\l}"];
}
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x001b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001d}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0020}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void mil.nga.geopackage.tiles.matrix.TileMatrix.validateValues((r2v0 'this' mil.nga.geopackage.tiles.matrix.TileMatrix A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_10[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_11[style=dashed];
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

