digraph "CFG formil.nga.geopackage.tiles.user.TileDaoUtils.getZoomLevel([D[DLjava\/util\/List;DDZ)Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = java.util.Arrays.binarySearch(r7, r10)\lr1 = \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 \>= 0) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|int r0 = (r0 + 1) * \-1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|PHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v5 int) binds: [B:1:0x0005, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = java.util.Arrays.binarySearch(r8, r12)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r2 \>= 0) goto L_0x0015\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|int r2 = (r2 + 1) * \-1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:4:0x000f, B:5:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != 0) goto L_0x0023\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if (r14 == false) goto L_0x0044\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019}"];
Node_9 [shape=record,label="{9\:\ 0x001f|if ((r10 \> getMinLength(r7) ? 1 : (r10 == getMinLength(r7) ? 0 : \-1)) \>= 0) goto L_0x0044\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|r7 = \-1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023}"];
Node_12 [shape=record,label="{12\:\ 0x0024|if (r0 != r7.length) goto L_0x0034\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|if (r14 == false) goto L_0x0031\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028}"];
Node_15 [shape=record,label="{15\:\ 0x002e|if ((r10 \> getMaxLength(r7) ? 1 : (r10 == getMaxLength(r7) ? 0 : \-1)) \< 0) goto L_0x0031\l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|int r7 = r0 + \-1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0034}"];
Node_18 [shape=record,label="{18\:\ 0x003f|if (((r10 \- r7[r0 + \-1]) \> (r7[r0] \- r10) ? 1 : ((r10 \- r7[r0 + \-1]) == (r7[r0] \- r10) ? 0 : \-1)) \>= 0) goto L_0x0044\l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|int r7 = r0 + \-1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|r7 = r0\l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|PHI: r7 \l  PHI: (r7v1 int) = (r7v10 int), (r7v12 int), (r7v13 int), (r7v15 int) binds: [B:20:0x0044, B:19:0x0041, B:16:0x0031, B:10:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 != 0) goto L_0x0052\l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|if (r14 == false) goto L_0x0073\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049}"];
Node_24 [shape=record,label="{24\:\ 0x004f|if ((r12 \> getMinLength(r8) ? 1 : (r12 == getMinLength(r8) ? 0 : \-1)) \>= 0) goto L_0x0073\l}"];
Node_25 [shape=record,label="{25\:\ 0x0052}"];
Node_26 [shape=record,label="{26\:\ 0x0053|if (r2 != r8.length) goto L_0x0063\l}"];
Node_27 [shape=record,label="{27\:\ 0x0055|if (r14 == false) goto L_0x0060\l}"];
Node_28 [shape=record,label="{28\:\ 0x0057}"];
Node_29 [shape=record,label="{29\:\ 0x005d|if ((r12 \> getMaxLength(r8) ? 1 : (r12 == getMaxLength(r8) ? 0 : \-1)) \< 0) goto L_0x0060\l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|int r1 = r2 + \-1\l}"];
Node_31 [shape=record,label="{31\:\ 0x0063}"];
Node_32 [shape=record,label="{32\:\ 0x006e|if (((r12 \- r8[r2 + \-1]) \> (r8[r2] \- r12) ? 1 : ((r12 \- r8[r2 + \-1]) == (r8[r2] \- r12) ? 0 : \-1)) \>= 0) goto L_0x0073\l}"];
Node_33 [shape=record,label="{33\:\ 0x0070|int r1 = r2 + \-1\l}"];
Node_34 [shape=record,label="{34\:\ 0x0073|r1 = r2\l}"];
Node_35 [shape=record,label="{35\:\ 0x0074|PHI: r1 \l  PHI: (r1v1 int) = (r1v2 int), (r1v3 int), (r1v4 int), (r1v0 int), (r1v0 int) binds: [B:34:0x0073, B:33:0x0070, B:30:0x0060, B:29:0x005d, B:24:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 \>= 0) goto L_0x007b\l}"];
Node_36 [shape=record,label="{36\:\ 0x0076|if (r1 \< 0) goto L_0x0079\l}"];
Node_37 [shape=record,label="{37\:\ 0x0079|SYNTHETIC\lRETURN\l|return null\l}"];
Node_38 [shape=record,label="{38\:\ 0x007b|if (r7 \>= 0) goto L_0x007f\l}"];
Node_39 [shape=record,label="{39\:\ 0x007d|r7 = r1\l}"];
Node_40 [shape=record,label="{40\:\ 0x007f|if (r1 \>= 0) goto L_0x0082\l}"];
Node_41 [shape=record,label="{41\:\ 0x0082|int r7 = java.lang.Math.min(r7, r1)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0086|PHI: r7 \l  PHI: (r7v2 int) = (r7v1 int), (r7v7 int), (r7v8 int) binds: [B:40:0x007f, B:41:0x0082, B:39:0x007d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.lang.Long.valueOf(r9.get((r9.size() \- r7) + \-1).getZoomLevel())\l}"];
MethodNode[shape=record,label="{private static java.lang.Long mil.nga.geopackage.tiles.user.TileDaoUtils.getZoomLevel((r7v0 double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.util.List\<mil.nga.geopackage.tiles.matrix.TileMatrix\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([D[D, Ljava\/util\/List\<, Lmil\/nga\/geopackage\/tiles\/matrix\/TileMatrix;, \>;DDZ), Ljava\/lang\/Long;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_10[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_34;
Node_23 -> Node_24;
Node_24 -> Node_34;
Node_24 -> Node_35[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_35[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_36 -> Node_38[style=dashed];
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_40 -> Node_42[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_43;
}

