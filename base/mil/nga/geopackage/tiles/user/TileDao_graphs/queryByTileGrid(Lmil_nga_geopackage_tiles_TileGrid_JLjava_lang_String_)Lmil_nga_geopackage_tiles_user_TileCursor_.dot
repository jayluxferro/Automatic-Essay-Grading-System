digraph "CFG formil.nga.geopackage.tiles.user.TileDao.queryByTileGrid(Lmil\/nga\/geopackage\/tiles\/TileGrid;JLjava\/lang\/String;)Lmil\/nga\/geopackage\/tiles\/user\/TileCursor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 == null) goto L_0x00bd\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(buildWhere(\"zoom_level\", (java.lang.Object) java.lang.Long.valueOf(r10)))\lr0.append(\" AND \")\lr0.append(buildWhere(\"tile_column\", java.lang.Long.valueOf(r9.getMinX()), com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_EQUAL_TO_OPERATION))\lr0.append(\" AND \")\lr0.append(buildWhere(\"tile_column\", java.lang.Long.valueOf(r9.getMaxX()), com.j256.ormlite.stmt.query.SimpleComparison.LESS_THAN_EQUAL_TO_OPERATION))\lr0.append(\" AND \")\lr0.append(buildWhere(\"tile_row\", java.lang.Long.valueOf(r9.getMinY()), com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_EQUAL_TO_OPERATION))\lr0.append(\" AND \")\lr0.append(buildWhere(\"tile_row\", java.lang.Long.valueOf(r9.getMaxY()), com.j256.ormlite.stmt.query.SimpleComparison.LESS_THAN_EQUAL_TO_OPERATION))\ljava.lang.Object[] r1 = new java.lang.Object[]\{java.lang.Long.valueOf(r10), java.lang.Long.valueOf(r9.getMinX()), java.lang.Long.valueOf(r9.getMaxX()), java.lang.Long.valueOf(r9.getMinY()), java.lang.Long.valueOf(r9.getMaxY())\}\ljava.lang.String[] r4 = buildWhereArgs(r1)\lr2 = r8\l}"];
Node_2 [shape=record,label="{2\:\ 0x00bd|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lRETURN\l|return (mil.nga.geopackage.tiles.user.TileCursor) query(r0.toString(), r4, (java.lang.String) null, (java.lang.String) null, r12)\l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.tiles.user.TileCursor mil.nga.geopackage.tiles.user.TileDao.queryByTileGrid((r8v0 'this' mil.nga.geopackage.tiles.user.TileDao A[IMMUTABLE_TYPE, THIS]), (r9v0 mil.nga.geopackage.tiles.TileGrid A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
}

