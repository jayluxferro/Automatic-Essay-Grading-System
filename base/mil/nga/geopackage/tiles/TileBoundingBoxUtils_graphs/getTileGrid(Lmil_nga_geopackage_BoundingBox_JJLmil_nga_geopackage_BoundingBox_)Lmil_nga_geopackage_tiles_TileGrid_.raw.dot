digraph "CFG formil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileGrid(Lmil\/nga\/geopackage\/BoundingBox;JJLmil\/nga\/geopackage\/BoundingBox;)Lmil\/nga\/geopackage\/tiles\/TileGrid;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[long, double]) = (r23 I:?[long, double]) \l0x0004: MOVE  (r3 I:?[long, double]) = (r25 I:?[long, double]) \l0x0006: INVOKE  (r5 I:double) = (r27 I:mil.nga.geopackage.BoundingBox) mil.nga.geopackage.BoundingBox.getMinLongitude():double type: VIRTUAL \l0x000a: INVOKE  (r5 I:long) = \l  (r0 I:mil.nga.geopackage.BoundingBox)\l  (r1 I:long)\l  (r5 I:double)\l mil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileColumn(mil.nga.geopackage.BoundingBox, long, double):long type: STATIC \l0x000e: INVOKE  (r7 I:double) = (r27 I:mil.nga.geopackage.BoundingBox) mil.nga.geopackage.BoundingBox.getMaxLongitude():double type: VIRTUAL \l0x0012: INVOKE  (r7 I:long) = \l  (r0 I:mil.nga.geopackage.BoundingBox)\l  (r1 I:long)\l  (r7 I:double)\l mil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileColumn(mil.nga.geopackage.BoundingBox, long, double):long type: STATIC \l0x0016: CONST  (r9 I:?[long, double]) = (1 ?[long, double]) \l0x0018: CONST  (r11 I:?[long, double]) = (0 ?[long, double]) \l0x001a: CMP_L  (r13 I:int) = (r5 I:long), (r1 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r13 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: CMP_L  (r13 I:int) = (r7 I:long), (r11 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r13 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CMP_L  (r13 I:int) = (r5 I:long), (r11 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r13 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: MOVE  (r5 I:?[long, double]) = (r11 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: CMP_L  (r13 I:int) = (r7 I:long), (r1 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r13 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: ARITH  (r7 I:long) = (r1 I:long) \- (r9 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: MOVE  (r14 I:?[long, double]) = (r5 I:?[long, double]) \l0x002e: MOVE  (r18 I:?[long, double]) = (r7 I:?[long, double]) \l0x0030: INVOKE  (r1 I:double) = (r27 I:mil.nga.geopackage.BoundingBox) mil.nga.geopackage.BoundingBox.getMinLatitude():double type: VIRTUAL \l0x0034: INVOKE  (r1 I:long) = \l  (r0 I:mil.nga.geopackage.BoundingBox)\l  (r3 I:long)\l  (r1 I:double)\l mil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileRow(mil.nga.geopackage.BoundingBox, long, double):long type: STATIC \l0x0038: INVOKE  (r5 I:double) = (r27 I:mil.nga.geopackage.BoundingBox) mil.nga.geopackage.BoundingBox.getMaxLatitude():double type: VIRTUAL \l0x003c: INVOKE  (r5 I:long) = \l  (r0 I:mil.nga.geopackage.BoundingBox)\l  (r3 I:long)\l  (r5 I:double)\l mil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileRow(mil.nga.geopackage.BoundingBox, long, double):long type: STATIC \l0x0040: CMP_L  (r0 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:23:0x005c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: CMP_L  (r0 I:int) = (r1 I:long), (r11 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:23:0x005c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: CMP_L  (r0 I:int) = (r5 I:long), (r11 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: MOVE  (r11 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: CMP_L  (r0 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:21:0x0057 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: ARITH  (r0 I:long) = (r3 I:long) \- (r9 I:long) \l0x0054: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: MOVE  (r20 I:?[long, double]) = (r1 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: MOVE  (r16 I:?[long, double]) = (r11 I:?[long, double]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x005c|0x005c: MOVE  (r20 I:?[long, double]) = (r1 I:?[long, double]) \l0x005e: MOVE  (r16 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0060|0x0060: NEW_INSTANCE  (r0 I:mil.nga.geopackage.tiles.TileGrid) =  mil.nga.geopackage.tiles.TileGrid \l0x0062: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0063: INVOKE  \l  (r13 I:mil.nga.geopackage.tiles.TileGrid)\l  (r14 I:long)\l  (r16 I:long)\l  (r18 I:long)\l  (r20 I:long)\l mil.nga.geopackage.tiles.TileGrid.\<init\>(long, long, long, long):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|0x0066: RETURN  (r0 I:mil.nga.geopackage.tiles.TileGrid) \l}"];
MethodNode[shape=record,label="{public static mil.nga.geopackage.tiles.TileGrid mil.nga.geopackage.tiles.TileBoundingBoxUtils.getTileGrid((r22 I:mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

