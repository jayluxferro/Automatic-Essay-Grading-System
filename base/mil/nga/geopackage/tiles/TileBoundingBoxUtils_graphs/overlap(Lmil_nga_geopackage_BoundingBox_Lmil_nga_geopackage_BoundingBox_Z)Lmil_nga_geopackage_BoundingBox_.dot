digraph "CFG formil.nga.geopackage.tiles.TileBoundingBoxUtils.overlap(Lmil\/nga\/geopackage\/BoundingBox;Lmil\/nga\/geopackage\/BoundingBox;Z)Lmil\/nga\/geopackage\/BoundingBox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r5 = java.lang.Math.max(r13.getMinLongitude(), r14.getMinLongitude())\ldouble r9 = java.lang.Math.min(r13.getMaxLongitude(), r14.getMaxLongitude())\ldouble r7 = java.lang.Math.max(r13.getMinLatitude(), r14.getMinLatitude())\ldouble r11 = java.lang.Math.min(r13.getMaxLatitude(), r14.getMaxLatitude())\lint r13 = (r5 \> r9 ? 1 : (r5 == r9 ? 0 : \-1))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|if (r13 \>= 0) goto L_0x0038\l}"];
Node_2 [shape=record,label="{2\:\ 0x0034}"];
Node_3 [shape=record,label="{3\:\ 0x0036|if ((r7 \> r11 ? 1 : (r7 == r11 ? 0 : \-1)) \< 0) goto L_0x0040\l}"];
Node_4 [shape=record,label="{4\:\ 0x0038|if (r15 == false) goto L_0x0047\l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|if (r13 \> 0) goto L_0x0047\l}"];
Node_6 [shape=record,label="{6\:\ 0x003c}"];
Node_7 [shape=record,label="{7\:\ 0x003e|if ((r7 \> r11 ? 1 : (r7 == r11 ? 0 : \-1)) \> 0) goto L_0x0047\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040}"];
Node_9 [shape=record,label="{9\:\ 0x0047|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return new mil.nga.geopackage.BoundingBox(r5, r7, r9, r11)\l}"];
MethodNode[shape=record,label="{public static mil.nga.geopackage.BoundingBox mil.nga.geopackage.tiles.TileBoundingBoxUtils.overlap((r13v0 mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
}

