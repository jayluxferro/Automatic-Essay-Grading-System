digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataPng.validateImageType(Lar\/com\/hjg\/pngj\/PngReader;)V" {
subgraph cluster_Region_1490773938 {
label = "R(1:(1:9)(1:(2:6|7)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1477226746 {
label = "IF [B:0:0x0000] THEN: R(1:9) ELSE: R(1:(2:6|7)(0))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 == null) goto L_0x0039\l}"];
subgraph cluster_Region_85777034 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0040|throw new mil.nga.geopackage.GeoPackageException(\"The image is null\")\l}"];
}
subgraph cluster_Region_1929006665 {
label = "R(1:(2:6|7)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1897877843 {
label = "IF [B:2:0x0007, B:4:0x000f] THEN: R(2:6|7) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r3.imgInfo.channels != 1) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|ADDED_TO_REGION\l|if (r3.imgInfo.bitDepth != 16) goto L_0x0012\l}"];
subgraph cluster_Region_1286190314 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0038|throw new mil.nga.geopackage.GeoPackageException(\"The coverage data tile is expected to be a single channel 16 bit unsigned short, channels: \" + r3.imgInfo.channels + \", bits: \" + r3.imgInfo.bitDepth)\l}"];
}
subgraph cluster_Region_797114239 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0009}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0039}"];
MethodNode[shape=record,label="{public static void mil.nga.geopackage.extension.coverage.CoverageDataPng.validateImageType((r3v0 ar.com.hjg.pngj.PngReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_8;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_8 -> Node_9;
}

