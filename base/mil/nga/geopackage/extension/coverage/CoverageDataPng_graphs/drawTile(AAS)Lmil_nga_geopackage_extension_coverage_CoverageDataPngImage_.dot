digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataPng.drawTile([[S)Lmil\/nga\/geopackage\/extension\/coverage\/CoverageDataPngImage;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = r11[0].length\lint r2 = r11.length\lmil.nga.geopackage.extension.coverage.CoverageDataPngImage r3 = createImage(r1, r2)\lar.com.hjg.pngj.PngWriter r4 = r3.getWriter()\lr5 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:0:0x0000, B:5:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:5:0x002a\l|if (r5 \>= r2) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|ar.com.hjg.pngj.ImageLineInt r6 = new p004ar.com.hjg.pngj.ImageLineInt(r4.imgInfo, new int[r1])\lint[] r7 = r6.getScanline()\lr8 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|LOOP_START\lPHI: r8 \l  PHI: (r8v2 int) = (r8v1 int), (r8v3 int) binds: [B:2:0x0010, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:3:0x001e\-\>B:4:0x0020\l|if (r8 \>= r1) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|LOOP_END\lLOOP:1: B:3:0x001e\-\>B:4:0x0020\l|setPixelValue(r7, r8, r11[r5][r8])\lint r8 = r8 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|LOOP_END\lLOOP:0: B:1:0x000e\-\>B:5:0x002a\l|r4.writeRow(r6)\lint r5 = r5 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|r4.end()\lr3.flushStream()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|RETURN\l|return r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.extension.coverage.CoverageDataPngImage mil.nga.geopackage.extension.coverage.CoverageDataPng.drawTile((r10v0 'this' mil.nga.geopackage.extension.coverage.CoverageDataPng A[IMMUTABLE_TYPE, THIS]), (r11v0 short[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_3;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_5;
}

