digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataPng.getPixelValues([B)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:ar.com.hjg.pngj.PngReaderInt) =  ar.com.hjg.pngj.PngReaderInt \l0x0002: NEW_INSTANCE  (r1 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream \l0x0004: INVOKE  (r1 I:java.io.ByteArrayInputStream), (r7 I:byte[]) java.io.ByteArrayInputStream.\<init\>(byte[]):void type: DIRECT \l0x0007: INVOKE  \l  (r0 I:ar.com.hjg.pngj.PngReaderInt)\l  (r1 I:java.io.InputStream)\l ar.com.hjg.pngj.PngReaderInt.\<init\>(java.io.InputStream):void type: DIRECT \l0x000a: INVOKE  (r0 I:ar.com.hjg.pngj.PngReader) mil.nga.geopackage.extension.coverage.CoverageDataPng.validateImageType(ar.com.hjg.pngj.PngReader):void type: STATIC \l0x000d: IGET  (r7 I:ar.com.hjg.pngj.ImageInfo) = (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x000f: IGET  (r7 I:int) = (r7 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x0011: IGET  (r1 I:ar.com.hjg.pngj.ImageInfo) = (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x0013: IGET  (r1 I:int) = (r1 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.rows int \l0x0015: ARITH  (r7 I:int) = (r7 I:int) * (r1 I:int) \l0x0017: NEW_ARRAY  (r7 I:int[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: INVOKE  (r3 I:boolean) = (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.hasMoreRows():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: INVOKE  (r3 I:ar.com.hjg.pngj.ImageLineInt) = (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.readRowInt():ar.com.hjg.pngj.ImageLineInt type: VIRTUAL \l0x0025: INVOKE  (r3 I:int[]) = (r3 I:ar.com.hjg.pngj.ImageLineInt) ar.com.hjg.pngj.ImageLineInt.getScanline():int[] type: VIRTUAL \l0x0029: IGET  (r4 I:ar.com.hjg.pngj.ImageInfo) = (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.imgInfo ar.com.hjg.pngj.ImageInfo \l0x002b: IGET  (r4 I:int) = (r4 I:ar.com.hjg.pngj.ImageInfo) ar.com.hjg.pngj.ImageInfo.cols int \l0x002d: ARITH  (r4 I:int) = (r4 I:int) * (r2 I:int) \l0x002f: ARRAY_LENGTH  (r5 I:int) = (r3 I:?[]) \l0x0030: INVOKE  \l  (r3 I:java.lang.Object)\l  (r1 I:int)\l  (r7 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0033: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: INVOKE  (r0 I:ar.com.hjg.pngj.PngReaderInt) ar.com.hjg.pngj.PngReaderInt.close():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|0x0039: RETURN  (r7 I:int[]) \l}"];
MethodNode[shape=record,label="{public int[] mil.nga.geopackage.extension.coverage.CoverageDataPng.getPixelValues((r6 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataPng A[IMMUTABLE_TYPE, THIS]), (r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

