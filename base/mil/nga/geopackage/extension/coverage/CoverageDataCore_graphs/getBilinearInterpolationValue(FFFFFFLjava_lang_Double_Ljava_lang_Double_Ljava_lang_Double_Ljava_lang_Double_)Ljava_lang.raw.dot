digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataCore.getBilinearInterpolationValue(FFFFFFLjava\/lang\/Double;Ljava\/lang\/Double;Ljava\/lang\/Double;Ljava\/lang\/Double;)Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r24 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CMP_L  (r8 I:int) = (r19 I:float), (r20 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r25 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CMP_L  (r9 I:int) = (r21 I:float), (r22 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r26 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: CMP_L  (r10 I:int) = (r19 I:float), (r20 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: CMP_L  (r10 I:int) = (r21 I:float), (r22 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0069 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: ARITH  (r2 I:float) = (r20 I:float) \- (r19 I:float) \l0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: CMP_L  (r10 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: INVOKE  (r6 I:double) = (r23 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0023: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: ARITH  (r10 I:float) = (r2 I:float) \- (r17 I:float) \l0x0028: ARITH  (r10 I:float) = (r10 I:float) \/ (r2 I:float) \l0x0029: CAST  (r10 I:double) = (double) (r10 I:float) \l0x002a: INVOKE  (r12 I:double) = (r23 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x002e: ARITH  (r12 I:double) = (r12 I:double) * (r10 I:double) \l0x0030: ARITH  (r0 I:float) = (r17 I:float) \/ (r2 I:float) \l0x0032: CAST  (r14 I:double) = (double) (r0 I:float) \l0x0033: INVOKE  (r6 I:double) = (r24 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0037: ARITH  (r6 I:double) = (r6 I:double) * (r14 I:double) \l0x0039: ARITH  (r6 I:double) = (r6 I:double) + (r12 I:double) \l0x003a: INVOKE  (r12 I:double) = (r25 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x003e: ARITH  (r10 I:double) = (r10 I:double) * (r12 I:double) \l0x0040: INVOKE  (r8 I:double) = (r26 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0044: ARITH  (r14 I:double) = (r14 I:double) * (r8 I:double) \l0x0046: ARITH  (r10 I:double) = (r10 I:double) + (r14 I:double) \l0x0047: INVOKE  (r0 I:java.lang.Double) = (r10 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x004b: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: ARITH  (r0 I:float) = (r22 I:float) \- (r21 I:float) \l0x004e: CMP_L  (r2 I:int) = (r0 I:float), (r3 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0050|0x0050: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0053 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|0x0053: ARITH  (r2 I:float) = (r0 I:float) \- (r18 I:float) \l0x0055: ARITH  (r2 I:float) = (r2 I:float) \/ (r0 I:float) \l0x0056: CAST  (r2 I:double) = (double) (r2 I:float) \l0x0057: ARITH  (r2 I:double) = (r2 I:double) * (r6 I:double) \l0x0059: ARITH  (r0 I:float) = (r18 I:float) \/ (r0 I:float) \l0x005b: CAST  (r0 I:double) = (double) (r0 I:float) \l0x005c: INVOKE  (r4 I:double) = (r8 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0060: ARITH  (r0 I:double) = (r0 I:double) * (r4 I:double) \l0x0062: ARITH  (r6 I:double) = (r2 I:double) + (r0 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0064|0x0064: INVOKE  (r0 I:java.lang.Double) = (r6 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0069|0x0069: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x006a|0x006a: RETURN  (r0 I:java.lang.Double) \l}"];
MethodNode[shape=record,label="{protected java.lang.Double mil.nga.geopackage.extension.coverage.CoverageDataCore.getBilinearInterpolationValue((r16 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataCore A[IMMUTABLE_TYPE, THIS]), (r17 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_21;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_21 -> Node_22;
}

