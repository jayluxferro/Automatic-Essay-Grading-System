digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataCore.formatUnboundedResults(Lmil\/nga\/geopackage\/tiles\/matrix\/TileMatrix;Ljava\/util\/Map;IJJJJ)[[Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0002: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CHECK_CAST  (r6 I:java.lang.Double[][]) = (java.lang.Double[][]) (r6 I:?[OBJECT, ARRAY]) \l0x0005: INVOKE  (r7 I:boolean) = (r21 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x011f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Long) = (r23 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0014: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r1 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:java.lang.Long) = (r27 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x001e: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r1 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0023: CHECK_CAST  (r6 I:java.lang.Double[][]) = (java.lang.Double[][]) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: INVOKE  (r6 I:java.lang.Long) = (r23 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x002b: INVOKE  (r6 I:java.lang.Object) = (r0 I:java.util.Map), (r6 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x002f: CHECK_CAST  (r6 I:java.util.Map) = (java.util.Map) (r6 I:?[OBJECT, ARRAY]) \l0x0031: INVOKE  (r7 I:java.lang.Long) = (r27 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0035: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.Map), (r7 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0039: CHECK_CAST  (r6 I:java.lang.Double[][]) = (java.lang.Double[][]) (r6 I:?[OBJECT, ARRAY]) \l0x003b: INVOKE  (r7 I:java.lang.Long) = (r25 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x003f: INVOKE  (r7 I:java.lang.Object) = (r0 I:java.util.Map), (r7 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0043: CHECK_CAST  (r7 I:java.util.Map) = (java.util.Map) (r7 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  (r8 I:java.lang.Long) = (r29 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0049: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.Map), (r8 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x004d: CHECK_CAST  (r7 I:java.lang.Double[][]) = (java.lang.Double[][]) (r7 I:?[OBJECT, ARRAY]) \l0x004f: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0050: AGET  (r9 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0052: ARRAY_LENGTH  (r9 I:int) = (r9 I:?[]) \l0x0053: ARRAY_LENGTH  (r6 I:int) = (r6 I:?[]) \l0x0054: CONST  (r12 I:?[long, double]) = (1 ?[long, double]) \l0x0056: CMP_L  (r14 I:int) = (r27 I:long), (r29 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0058|0x0058: IF  (r14 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x0073 \l}"];
Node_7 [shape=record,label="{7\:\ 0x005a|0x005a: AGET  (r10 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x005c: ARRAY_LENGTH  (r10 I:int) = (r10 I:?[]) \l0x005d: ARITH  (r10 I:int) = (r10 I:int) + (r9 I:int) \l0x005e: ARITH  (r4 I:long) = (r29 I:long) \- (r27 I:long) \l0x0060: ARITH  (r4 I:long) = (r4 I:long) \- (r12 I:long) \l0x0061: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l0x0063: CMP_L  (r11 I:int) = (r4 I:long), (r14 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0065|0x0065: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0071 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0067|0x0067: CAST  (r10 I:long) = (long) (r10 I:int) \l0x0068: INVOKE  (r16 I:long) = (r20 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileWidth():long type: VIRTUAL \l0x006c: ARITH  (r4 I:long) = (r4 I:long) * (r16 I:long) \l0x006e: ARITH  (r10 I:long) = (r10 I:long) + (r4 I:long) \l0x006f: CAST  (r4 I:int) = (int) (r10 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0071|0x0071: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0073|0x0073: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0074|0x0074: CMP_L  (r5 I:int) = (r23 I:long), (r25 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0076|0x0076: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x008e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0078|0x0078: ARRAY_LENGTH  (r5 I:int) = (r7 I:?[]) \l0x0079: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x007a: ARITH  (r2 I:long) = (r25 I:long) \- (r23 I:long) \l0x007c: ARITH  (r2 I:long) = (r2 I:long) \- (r12 I:long) \l0x007d: CONST  (r10 I:?[long, double]) = (0 ?[long, double]) \l0x007f: CMP_L  (r7 I:int) = (r2 I:long), (r10 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0081|0x0081: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x008f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0083|0x0083: CAST  (r10 I:long) = (long) (r5 I:int) \l0x0084: INVOKE  (r14 I:long) = (r20 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileHeight():long type: VIRTUAL \l0x0088: ARITH  (r2 I:long) = (r2 I:long) * (r14 I:long) \l0x008a: ARITH  (r10 I:long) = (r10 I:long) + (r2 I:long) \l0x008b: CAST  (r2 I:int) = (int) (r10 I:long) \l0x008c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|0x008e: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x008f|0x008f: FILLED_NEW_ARRAY  (r2 I:int[]) = (r5 I:int A[IMMUTABLE_TYPE]), (r4 I:int A[IMMUTABLE_TYPE]) elemType: int \l0x0093: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.Double\>) =  java.lang.Double.class \l0x0095: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.lang.Class), (r2 I:int[]) java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object type: STATIC \l0x0099: CHECK_CAST  (r2 I:java.lang.Double[][]) = (java.lang.Double[][]) (r2 I:?[OBJECT, ARRAY]) \l0x009b: INVOKE  (r0 I:java.util.Set) = (r21 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x009f: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a3|0x00a3: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a7|0x00a7: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x011e \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a9|0x00a9: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00ad: CHECK_CAST  (r3 I:java.util.Map$Entry) = (java.util.Map$Entry) (r3 I:?[OBJECT, ARRAY]) \l0x00af: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x00b3: CHECK_CAST  (r4 I:java.lang.Long) = (java.lang.Long) (r4 I:?[OBJECT, ARRAY]) \l0x00b5: INVOKE  (r4 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x00b9: CMP_L  (r7 I:int) = (r23 I:long), (r4 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00bb|0x00bb: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:24:0x00c9 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00bd|0x00bd: ARITH  (r4 I:long) = (r4 I:long) \- (r23 I:long) \l0x00bf: ARITH  (r4 I:long) = (r4 I:long) \- (r12 I:long) \l0x00c0: INVOKE  (r10 I:long) = (r20 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileHeight():long type: VIRTUAL \l0x00c4: ARITH  (r4 I:long) = (r4 I:long) * (r10 I:long) \l0x00c6: CAST  (r4 I:int) = (int) (r4 I:long) \l0x00c7: ARITH  (r4 I:int) = (r4 I:int) + (r6 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c9|0x00c9: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x00ca|0x00ca: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x00ce: CHECK_CAST  (r3 I:java.util.Map) = (java.util.Map) (r3 I:?[OBJECT, ARRAY]) \l0x00d0: INVOKE  (r3 I:java.util.Set) = (r3 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x00d4: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d8|0x00d8: INVOKE  (r5 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x00dc|0x00dc: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00a3 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00de|0x00de: INVOKE  (r5 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00e2: CHECK_CAST  (r5 I:java.util.Map$Entry) = (java.util.Map$Entry) (r5 I:?[OBJECT, ARRAY]) \l0x00e4: INVOKE  (r7 I:java.lang.Object) = (r5 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x00e8: CHECK_CAST  (r7 I:java.lang.Long) = (java.lang.Long) (r7 I:?[OBJECT, ARRAY]) \l0x00ea: INVOKE  (r10 I:long) = (r7 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x00ee: CMP_L  (r7 I:int) = (r27 I:long), (r10 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00f0|0x00f0: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x00fe \l}"];
Node_30 [shape=record,label="{30\:\ 0x00f2|0x00f2: ARITH  (r10 I:long) = (r10 I:long) \- (r27 I:long) \l0x00f4: ARITH  (r10 I:long) = (r10 I:long) \- (r12 I:long) \l0x00f5: INVOKE  (r14 I:long) = (r20 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileWidth():long type: VIRTUAL \l0x00f9: ARITH  (r10 I:long) = (r10 I:long) * (r14 I:long) \l0x00fb: CAST  (r7 I:int) = (int) (r10 I:long) \l0x00fc: ARITH  (r7 I:int) = (r7 I:int) + (r9 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00fe|0x00fe: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x00ff|0x00ff: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0103: CHECK_CAST  (r5 I:java.lang.Double[][]) = (java.lang.Double[][]) (r5 I:?[OBJECT, ARRAY]) \l0x0105: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0106|0x0106: ARRAY_LENGTH  (r11 I:int) = (r5 I:?[]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0107|0x0107: IF  (r10 I:?[int, byte, short, char]) \>= (r11 I:?[int, byte, short, char])  \-\> B:26:0x00d8 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0109|0x0109: ARITH  (r11 I:int) = (r4 I:int) + (r10 I:int) \l0x010b: AGET  (r12 I:?[OBJECT, ARRAY]) = \l  (r5 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l \l0x010d: AGET  (r11 I:?[OBJECT, ARRAY]) = \l  (r2 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l \l0x010f: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0111: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r5 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l \l0x0113: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0114: INVOKE  \l  (r12 I:java.lang.Object)\l  (r8 I:int)\l  (r11 I:java.lang.Object)\l  (r7 I:int)\l  (r0 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0117: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l0x0119: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x011b: CONST  (r12 I:?[long, double]) = (1 ?[long, double]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x011e|0x011e: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x011f|0x011f: RETURN  (r6 I:java.lang.Double[][]) \l}"];
MethodNode[shape=record,label="{protected java.lang.Double[][] mil.nga.geopackage.extension.coverage.CoverageDataCore.formatUnboundedResults((r19 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataCore A[IMMUTABLE_TYPE, THIS]), (r20 I:mil.nga.geopackage.tiles.matrix.TileMatrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:java.util.Map\<java.lang.Long, java.util.Map\<java.lang.Long, java.lang.Double[][]\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/geopackage\/tiles\/matrix\/TileMatrix;, Ljava\/util\/Map\<, Ljava\/lang\/Long;, Ljava\/util\/Map\<, Ljava\/lang\/Long;, [[, Ljava\/lang\/Double;, \>;\>;IJJJJ)[[, Ljava\/lang\/Double;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_37;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_37;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_36;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_19;
Node_27 -> Node_28[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_26;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_33;
Node_36 -> Node_37;
}

