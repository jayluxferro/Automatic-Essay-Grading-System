digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataCore.valueToPixelValue(Lmil\/nga\/geopackage\/extension\/coverage\/GriddedTile;D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage) = \l  (r2 I:mil.nga.geopackage.extension.coverage.CoverageDataCore)\l mil.nga.geopackage.extension.coverage.CoverageDataCore.griddedCoverage mil.nga.geopackage.extension.coverage.GriddedCoverage \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage) = \l  (r2 I:mil.nga.geopackage.extension.coverage.CoverageDataCore)\l mil.nga.geopackage.extension.coverage.CoverageDataCore.griddedCoverage mil.nga.geopackage.extension.coverage.GriddedCoverage \l0x0006: INVOKE  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverageDataType) = \l  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage)\l mil.nga.geopackage.extension.coverage.GriddedCoverage.getDataType():mil.nga.geopackage.extension.coverage.GriddedCoverageDataType type: VIRTUAL \l0x000a: SGET  (r1 I:mil.nga.geopackage.extension.coverage.GriddedCoverageDataType) =  mil.nga.geopackage.extension.coverage.GriddedCoverageDataType.INTEGER mil.nga.geopackage.extension.coverage.GriddedCoverageDataType \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage) = \l  (r2 I:mil.nga.geopackage.extension.coverage.CoverageDataCore)\l mil.nga.geopackage.extension.coverage.CoverageDataCore.griddedCoverage mil.nga.geopackage.extension.coverage.GriddedCoverage \l0x0010: INVOKE  (r0 I:double) = \l  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage)\l mil.nga.geopackage.extension.coverage.GriddedCoverage.getOffset():double type: VIRTUAL \l0x0014: ARITH  (r4 I:double) = (r4 I:double) \- (r0 I:double) \l0x0015: IGET  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage) = \l  (r2 I:mil.nga.geopackage.extension.coverage.CoverageDataCore)\l mil.nga.geopackage.extension.coverage.CoverageDataCore.griddedCoverage mil.nga.geopackage.extension.coverage.GriddedCoverage \l0x0017: INVOKE  (r0 I:double) = \l  (r0 I:mil.nga.geopackage.extension.coverage.GriddedCoverage)\l mil.nga.geopackage.extension.coverage.GriddedCoverage.getScale():double type: VIRTUAL \l0x001b: ARITH  (r4 I:double) = (r4 I:double) \/ (r0 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r0 I:double) = (r3 I:mil.nga.geopackage.extension.coverage.GriddedTile) mil.nga.geopackage.extension.coverage.GriddedTile.getOffset():double type: VIRTUAL \l0x0022: ARITH  (r4 I:double) = (r4 I:double) \- (r0 I:double) \l0x0023: INVOKE  (r0 I:double) = (r3 I:mil.nga.geopackage.extension.coverage.GriddedTile) mil.nga.geopackage.extension.coverage.GriddedTile.getScale():double type: VIRTUAL \l0x0027: ARITH  (r4 I:double) = (r4 I:double) \/ (r0 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: RETURN  (r4 I:double) \l}"];
MethodNode[shape=record,label="{private double mil.nga.geopackage.extension.coverage.CoverageDataCore.valueToPixelValue((r2 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataCore A[IMMUTABLE_TYPE, THIS]), (r3 I:mil.nga.geopackage.extension.coverage.GriddedTile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

