digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataCore.getValueOverBorders(Lmil\/nga\/geopackage\/extension\/coverage\/GriddedTile;Lmil\/nga\/geopackage\/extension\/coverage\/CoverageDataImage;[[Ljava\/lang\/Double;[[Ljava\/lang\/Double;[[Ljava\/lang\/Double;II)Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r4 I:mil.nga.geopackage.extension.coverage.CoverageDataImage)\l mil.nga.geopackage.extension.coverage.CoverageDataImage.getWidth():int type: INTERFACE \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r8 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = \l  (r4 I:mil.nga.geopackage.extension.coverage.CoverageDataImage)\l mil.nga.geopackage.extension.coverage.CoverageDataImage.getHeight():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r9 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.Double) = \l  (r2 I:mil.nga.geopackage.extension.coverage.CoverageDataCore)\l  (r3 I:mil.nga.geopackage.extension.coverage.GriddedTile)\l  (r4 I:mil.nga.geopackage.extension.coverage.CoverageDataImage)\l  (r8 I:int)\l  (r9 I:int)\l mil.nga.geopackage.extension.coverage.CoverageDataCore.getValue(mil.nga.geopackage.extension.coverage.GriddedTile, mil.nga.geopackage.extension.coverage.CoverageDataImage, int, int):java.lang.Double type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: ARITH  (r9 I:int) = (r9 I:int) * (\-1 int) \l0x001e: ARITH  (r9 I:int) = (r9 I:int) + (\-1 int) \l0x0020: ARRAY_LENGTH  (r3 I:int) = (r6 I:?[]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IF  (r9 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l0x0025: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0026: ARITH  (r8 I:int) = (r8 I:int) + (r3 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l0x002b: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x0043 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: ARITH  (r8 I:int) = (r8 I:int) * (\-1 int) \l0x0034: ARITH  (r8 I:int) = (r8 I:int) + (\-1 int) \l0x0036: ARRAY_LENGTH  (r3 I:int) = (r5 I:?[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IF  (r8 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x003b: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: IF  (r9 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_21 [shape=record,label="{21\:\ 0x003e|0x003e: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0040: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: ARITH  (r9 I:int) = (r9 I:int) * (\-1 int) \l0x0047: ARITH  (r9 I:int) = (r9 I:int) + (\-1 int) \l0x0049: ARRAY_LENGTH  (r3 I:int) = (r7 I:?[]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x004a|0x004a: IF  (r9 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004c|0x004c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l0x004e: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004f|0x004f: IF  (r8 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:28:0x0055 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0051|0x0051: AGET  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l0x0053: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0055|0x0055: RETURN  (r1 I:java.lang.Double) \l}"];
MethodNode[shape=record,label="{private java.lang.Double mil.nga.geopackage.extension.coverage.CoverageDataCore.getValueOverBorders((r2 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataCore A[IMMUTABLE_TYPE, THIS]), (r3 I:mil.nga.geopackage.extension.coverage.GriddedTile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:TImage A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Double[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Double[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Double[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/geopackage\/extension\/coverage\/GriddedTile;, TTImage;[[, Ljava\/lang\/Double;, [[, Ljava\/lang\/Double;, [[, Ljava\/lang\/Double;, II), Ljava\/lang\/Double;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_28;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_28;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_28;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_28;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_28;
Node_14 -> Node_28;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_28;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_28;
Node_21 -> Node_28;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
}

