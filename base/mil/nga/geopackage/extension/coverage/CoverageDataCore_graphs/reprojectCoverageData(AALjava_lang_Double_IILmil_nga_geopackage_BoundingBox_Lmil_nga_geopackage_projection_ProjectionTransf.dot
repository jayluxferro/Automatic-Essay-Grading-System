digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataCore.reprojectCoverageData([[Ljava\/lang\/Double;IILmil\/nga\/geopackage\/BoundingBox;Lmil\/nga\/geopackage\/projection\/ProjectionTransform;Lmil\/nga\/geopackage\/BoundingBox;)[[Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r23\lr1 = r24\lr2 = r25\ldouble r3 = (r26.getMaxLongitude() \- r26.getMinLongitude()) \/ ((double) r1)\ldouble r5 = (r26.getMaxLatitude() \- r26.getMinLatitude()) \/ ((double) r2)\ldouble r7 = r28.getMaxLongitude() \- r28.getMinLongitude()\ldouble r9 = r28.getMaxLatitude() \- r28.getMinLatitude()\lr11 = 0\lint r12 = r0[0].length\lint r13 = r0.length\ljava.lang.Class\<java.lang.Double\> r15 = java.lang.Double.class\ljava.lang.Double[][] r14 = (java.lang.Double[][]) java.lang.reflect.Array.newInstance(r15, new int[]\{r2, r1\})\lr15 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0040|LOOP_START\lPHI: r1 r2 r3 r5 r11 r15 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 double) = (r3v2 double), (r3v6 double) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v5 double) = (r5v4 double), (r5v6 double) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v2 int) = (r11v1 int), (r11v4 int) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v2 int) = (r15v1 int), (r15v3 int) binds: [B:0:0x0000, B:4:0x00ae] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0040\-\>B:4:0x00ae\l|if (r15 \>= r2) goto L_0x00bd\l}"];
Node_2 [shape=record,label="{2\:\ 0x0042|LOOP_START\lPHI: r1 r3 r5 r11 \l  PHI: (r1v2 int) = (r1v1 int), (r1v14 int) binds: [B:1:0x0040, B:3:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 double) = (r3v3 double), (r3v15 double) binds: [B:1:0x0040, B:3:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v6 double) = (r5v5 double), (r5v9 double) binds: [B:1:0x0040, B:3:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v3 int) = (r11v2 int), (r11v5 int) binds: [B:1:0x0040, B:3:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:2:0x0042\-\>B:3:0x0044\l|if (r11 \>= r1) goto L_0x00ae\l}"];
Node_3 [shape=record,label="{3\:\ 0x0044|LOOP_END\lLOOP:1: B:2:0x0042\-\>B:3:0x0044\l|r18 = r3\lr20 = r5\lorg.osgeo.proj4j.ProjCoordinate r5 = new org.osgeo.proj4j.ProjCoordinate(r26.getMinLongitude() + (((double) r11) * r3), r26.getMaxLatitude() \- (((double) r15) * r5))\lorg.osgeo.proj4j.ProjCoordinate r2 = r27.transform(r5)\ldouble r3 = r2.f294x\ldouble r5 = r2.f295y\lint r4 = r12 + \-1\lint r1 = java.lang.Math.min(r4, java.lang.Math.max(0, (int) java.lang.Math.round(((r3 \- r28.getMinLongitude()) \/ r7) * ((double) r12))))\lint r4 = r13 + \-1\lr1 = r0[java.lang.Math.min(r4, java.lang.Math.max(0, (int) java.lang.Math.round(((r28.getMaxLatitude() \- r5) \/ r9) * ((double) r13))))][r1]\lr14[r15][r11] = r1\lint r11 = r11 + 1\lr3 = r18\lr5 = r20\lr1 = r24\lr2 = r25\l}"];
Node_4 [shape=record,label="{4\:\ 0x00ae|LOOP_END\lLOOP:0: B:1:0x0040\-\>B:4:0x00ae\l|r20 = r5\lint r15 = r15 + 1\lr3 = r3\lr1 = r24\lr2 = r25\lr11 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x00bd|RETURN\l|return r14\l}"];
Node_6 [shape=record,label="{6\:\ 0x00bd|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x00ae|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected java.lang.Double[][] mil.nga.geopackage.extension.coverage.CoverageDataCore.reprojectCoverageData((r22v0 'this' mil.nga.geopackage.extension.coverage.CoverageDataCore A[IMMUTABLE_TYPE, THIS]), (r23v0 java.lang.Double[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27v0 mil.nga.geopackage.projection.ProjectionTransform A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28v0 mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_2;
Node_4 -> Node_1;
Node_6 -> Node_5;
Node_7 -> Node_4;
}

