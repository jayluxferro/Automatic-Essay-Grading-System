digraph "CFG formil.nga.geopackage.extension.coverage.CoverageData.getCoverageData(Lmil\/nga\/geopackage\/GeoPackage;Lmil\/nga\/geopackage\/tiles\/user\/TileDao;Ljava\/lang\/Integer;Ljava\/lang\/Integer;Lmil\/nga\/geopackage\/projection\/Projection;)Lmil\/nga\/geopackage\/extension\/coverage\/CoverageData;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|mil.nga.geopackage.tiles.matrixset.TileMatrixSet r0 = r9.getTileMatrixSet()\lmil.nga.geopackage.extension.coverage.GriddedCoverageDao r1 = r8.getGriddedCoverageDao()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLException \-\> 0x0052 \}\lSplitter:B:1:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|Catch:\{ SQLException \-\> 0x0052 \}\l|if (r1.isTableExists() == false) goto L_0x0013     \/\/ Catch:\{ SQLException \-\> 0x0052 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|Catch:\{ SQLException \-\> 0x0052 \}\l|mil.nga.geopackage.extension.coverage.GriddedCoverage r1 = r1.query(r0)     \/\/ Catch:\{ SQLException \-\> 0x0052 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r1 = null\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|PHI: r1 \l  PHI: (r1v1 mil.nga.geopackage.extension.coverage.GriddedCoverage) = (r1v5 mil.nga.geopackage.extension.coverage.GriddedCoverage), (r1v6 mil.nga.geopackage.extension.coverage.GriddedCoverage) binds: [B:5:0x0013, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|mil.nga.geopackage.extension.coverage.GriddedCoverageDataType r0 = r1.getDataType()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|switch(r0) \{\l    case mil.nga.geopackage.extension.coverage.GriddedCoverageDataType.INTEGER :mil.nga.geopackage.extension.coverage.GriddedCoverageDataType: goto L_0x0046;\l    case mil.nga.geopackage.extension.coverage.GriddedCoverageDataType.FLOAT :mil.nga.geopackage.extension.coverage.GriddedCoverageDataType: goto L_0x003a;\l    default: goto L_0x0023;\l\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Unsupported Gridded Coverage Data Type: \")\lr9.append(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|throw new mil.nga.geopackage.GeoPackageException(r9.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a}"];
Node_11 [shape=record,label="{11\:\ 0x0046}"];
Node_12 [shape=record,label="{12\:\ 0x0052|ExcHandler: SQLException (r8v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0008\l|java.sql.SQLException r8 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|java.lang.StringBuilder r10 = new java.lang.StringBuilder()\lr10.append(\"Failed to get Gridded Coverage for table name: \")\lr10.append(r0.getTableName())\l}"];
Node_14 [shape=record,label="{14\:\ 0x006d|throw new mil.nga.geopackage.GeoPackageException(r10.toString(), r8)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new mil.nga.geopackage.extension.coverage.CoverageDataPng(r8, r9, r10, r11, r12)\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return new mil.nga.geopackage.extension.coverage.CoverageDataTiff(r8, r9, r10, r11, r12)\l}"];
MethodNode[shape=record,label="{public static mil.nga.geopackage.extension.coverage.CoverageData\<?\> mil.nga.geopackage.extension.coverage.CoverageData.getCoverageData((r8v0 mil.nga.geopackage.GeoPackage A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 mil.nga.geopackage.tiles.user.TileDao A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.Integer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.Integer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 mil.nga.geopackage.projection.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/geopackage\/GeoPackage;, Lmil\/nga\/geopackage\/tiles\/user\/TileDao;, Ljava\/lang\/Integer;, Ljava\/lang\/Integer;, Lmil\/nga\/geopackage\/projection\/Projection;, ), Lmil\/nga\/geopackage\/extension\/coverage\/CoverageData\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_10 -> Node_16;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

