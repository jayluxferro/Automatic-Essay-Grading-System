digraph "CFG formil.nga.geopackage.extension.coverage.CoverageData.getValuesUnbounded(Lmil\/nga\/geopackage\/tiles\/matrix\/TileMatrix;Lmil\/nga\/geopackage\/tiles\/user\/TileCursor;Lmil\/nga\/geopackage\/extension\/coverage\/CoverageDataRequest;)[[Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0002: NEW_INSTANCE  (r2 I:java.util.TreeMap) =  java.util.TreeMap \l0x0004: INVOKE  (r2 I:java.util.TreeMap) java.util.TreeMap.\<init\>():void type: DIRECT \l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x000b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: INVOKE  (r6 I:boolean) = (r29 I:mil.nga.geopackage.tiles.user.TileCursor) mil.nga.geopackage.tiles.user.TileCursor.moveToNext():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x014b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r6 I:mil.nga.geopackage.user.UserRow) = (r29 I:mil.nga.geopackage.tiles.user.TileCursor) mil.nga.geopackage.tiles.user.TileCursor.getRow():mil.nga.geopackage.user.UserRow type: VIRTUAL \l0x0017: CHECK_CAST  (r6 I:mil.nga.geopackage.tiles.user.TileRow) = (mil.nga.geopackage.tiles.user.TileRow) (r6 I:?[OBJECT, ARRAY]) \l0x0019: IGET  (r13 I:mil.nga.geopackage.BoundingBox) = (r12 I:mil.nga.geopackage.extension.coverage.CoverageData) mil.nga.geopackage.extension.coverage.CoverageData.coverageBoundingBox mil.nga.geopackage.BoundingBox \l0x001b: INVOKE  (r15 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l0x001f: INVOKE  (r17 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l0x0023: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r7 I:mil.nga.geopackage.BoundingBox) = \l  (r13 I:mil.nga.geopackage.BoundingBox)\l  (r14 I:mil.nga.geopackage.tiles.matrix.TileMatrix)\l  (r15 I:long)\l  (r17 I:long)\l mil.nga.geopackage.tiles.TileBoundingBoxUtils.getBoundingBox(mil.nga.geopackage.BoundingBox, mil.nga.geopackage.tiles.matrix.TileMatrix, long, long):mil.nga.geopackage.BoundingBox type: STATIC \l0x0029: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l0x002b: INVOKE  (r24 I:mil.nga.geopackage.BoundingBox) = \l  (r8 I:mil.nga.geopackage.extension.coverage.CoverageDataRequest)\l  (r7 I:mil.nga.geopackage.BoundingBox)\l mil.nga.geopackage.extension.coverage.CoverageDataRequest.overlap(mil.nga.geopackage.BoundingBox):mil.nga.geopackage.BoundingBox type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: IF  (r24 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0145 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: INVOKE  (r19 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileWidth():long type: VIRTUAL \l0x0035: INVOKE  (r21 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileHeight():long type: VIRTUAL \l0x0039: MOVE  (r23 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x003b: INVOKE  (r7 I:android.graphics.Rect) = \l  (r19 I:long)\l  (r21 I:long)\l  (r23 I:mil.nga.geopackage.BoundingBox)\l  (r24 I:mil.nga.geopackage.BoundingBox)\l mil.nga.geopackage.tiles.TileBoundingBoxAndroidUtils.getRectangle(long, long, mil.nga.geopackage.BoundingBox, mil.nga.geopackage.BoundingBox):android.graphics.Rect type: STATIC \l0x003f: INVOKE  (r9 I:boolean) = (r7 I:android.graphics.Rect) mil.nga.geopackage.tiles.TileBoundingBoxAndroidUtils.isValidAllowEmpty(android.graphics.Rect):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0043|0x0043: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0145 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: IGET  (r9 I:int) = (r7 I:android.graphics.Rect) android.graphics.Rect.top int \l0x0047: INVOKE  (r10 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileHeight():long type: VIRTUAL \l0x004b: CAST  (r10 I:int) = (int) (r10 I:long) \l0x004c: ARITH  (r10 I:int) = (r10 I:int) + (\-1 int) \l0x004e: INVOKE  (r9 I:int) = (r9 I:int), (r10 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0052: IGET  (r10 I:int) = (r7 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x0054: INVOKE  (r13 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileHeight():long type: VIRTUAL \l0x0058: CAST  (r11 I:int) = (int) (r13 I:long) \l0x0059: ARITH  (r11 I:int) = (r11 I:int) + (\-1 int) \l0x005b: INVOKE  (r10 I:int) = (r10 I:int), (r11 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x005f: IGET  (r11 I:int) = (r7 I:android.graphics.Rect) android.graphics.Rect.left int \l0x0061: INVOKE  (r13 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileWidth():long type: VIRTUAL \l0x0065: CAST  (r13 I:int) = (int) (r13 I:long) \l0x0066: ARITH  (r13 I:int) = (r13 I:int) + (\-1 int) \l0x0068: INVOKE  (r11 I:int) = (r11 I:int), (r13 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x006c: IGET  (r7 I:int) = (r7 I:android.graphics.Rect) android.graphics.Rect.right int \l0x006e: INVOKE  (r13 I:long) = (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix) mil.nga.geopackage.tiles.matrix.TileMatrix.getTileWidth():long type: VIRTUAL \l0x0072: CAST  (r13 I:int) = (int) (r13 I:long) \l0x0073: ARITH  (r13 I:int) = (r13 I:int) + (\-1 int) \l0x0075: INVOKE  (r7 I:int) = (r7 I:int), (r13 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0079: INVOKE  (r13 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getId():long type: VIRTUAL \l0x007d: INVOKE  (r13 I:mil.nga.geopackage.extension.coverage.GriddedTile) = \l  (r12 I:mil.nga.geopackage.extension.coverage.CoverageData)\l  (r13 I:long)\l mil.nga.geopackage.extension.coverage.CoverageData.getGriddedTile(long):mil.nga.geopackage.extension.coverage.GriddedTile type: VIRTUAL \l0x0081: INVOKE  (r14 I:mil.nga.geopackage.extension.coverage.CoverageDataImage) = \l  (r12 I:mil.nga.geopackage.extension.coverage.CoverageData)\l  (r6 I:mil.nga.geopackage.tiles.user.TileRow)\l mil.nga.geopackage.extension.coverage.CoverageData.createImage(mil.nga.geopackage.tiles.user.TileRow):mil.nga.geopackage.extension.coverage.CoverageDataImage type: VIRTUAL \l0x0085: ARITH  (r15 I:int) = (r10 I:int) \- (r9 I:int) \l0x0087: ARITH  (r15 I:int) = (r15 I:int) + (1 int) \l0x0089: ARITH  (r16 I:int) = (r7 I:int) \- (r11 I:int) \l0x008b: ARITH  (r8 I:int) = (r16 I:int) + (1 int) \l0x008d: FILLED_NEW_ARRAY  (r8 I:int[]) = (r15 I:int A[IMMUTABLE_TYPE]), (r8 I:int A[IMMUTABLE_TYPE]) elemType: int \l0x0091: CONST_CLASS  (r15 I:java.lang.Class\<java.lang.Double\>) =  java.lang.Double.class \l0x0093: INVOKE  (r8 I:java.lang.Object) = (r15 I:java.lang.Class), (r8 I:int[]) java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object type: STATIC \l0x0097: CHECK_CAST  (r8 I:java.lang.Double[][]) = (java.lang.Double[][]) (r8 I:?[OBJECT, ARRAY]) \l0x0099: INVOKE  (r15 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l0x009d: INVOKE  (r15 I:java.lang.Long) = (r15 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00a1: INVOKE  (r15 I:java.lang.Object) = (r2 I:java.util.Map), (r15 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x00a5: CHECK_CAST  (r15 I:java.util.Map) = (java.util.Map) (r15 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x00a7|0x00a7: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x00bc \l}"];
Node_9 [shape=record,label="{9\:\ 0x00a9|0x00a9: NEW_INSTANCE  (r15 I:java.util.TreeMap) =  java.util.TreeMap \l0x00ab: INVOKE  (r15 I:java.util.TreeMap) java.util.TreeMap.\<init\>():void type: DIRECT \l0x00ae: INVOKE  (r16 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l0x00b2: MOVE  (r25 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x00b4: INVOKE  (r5 I:java.lang.Long) = (r16 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00b8: INVOKE  \l  (r2 I:java.util.Map)\l  (r5 I:java.lang.Object)\l  (r15 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x00bc|0x00bc: MOVE  (r25 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x00be|0x00be: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x00bf|0x00bf: IF  (r5 I:?[int, byte, short, char]) \> (r10 I:?[int, byte, short, char])  \-\> B:17:0x00da \l}"];
Node_13 [shape=record,label="{13\:\ 0x00c1|0x00c1: MOVE  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c3: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x00c4|0x00c4: IF  (r10 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:16:0x00d5 \l}"];
Node_15 [shape=record,label="{15\:\ 0x00c6|0x00c6: INVOKE  (r16 I:java.lang.Double) = \l  (r12 I:mil.nga.geopackage.extension.coverage.CoverageData)\l  (r13 I:mil.nga.geopackage.extension.coverage.GriddedTile)\l  (r14 I:mil.nga.geopackage.extension.coverage.CoverageDataImage)\l  (r10 I:int)\l  (r5 I:int)\l mil.nga.geopackage.extension.coverage.CoverageData.getValue(mil.nga.geopackage.extension.coverage.GriddedTile, mil.nga.geopackage.extension.coverage.CoverageDataImage, int, int):java.lang.Double type: VIRTUAL \l0x00ca: ARITH  (r17 I:int) = (r5 I:int) \- (r9 I:int) \l0x00cc: AGET  (r17 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY][])\l  (r17 I:?[int, short, byte, char])\l \l0x00ce: ARITH  (r18 I:int) = (r10 I:int) \- (r11 I:int) \l0x00d0: APUT  \l  (r17 I:?[OBJECT, ARRAY][])\l  (r18 I:?[int, short, byte, char])\l  (r16 I:?[OBJECT, ARRAY])\l \l0x00d2: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x00d5|0x00d5: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x00d7: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x00da|0x00da: INVOKE  (r9 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l0x00de: INVOKE  (r5 I:java.lang.Long) = (r9 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x00e2: INVOKE  \l  (r15 I:java.util.Map)\l  (r5 I:java.lang.Object)\l  (r8 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x00e5: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x00e7|0x00e7: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00ee \l}"];
Node_19 [shape=record,label="{19\:\ 0x00e9|0x00e9: INVOKE  (r7 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ee|0x00ee: INVOKE  (r7 I:long) = (r0 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x00f2: INVOKE  (r9 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l0x00f6: INVOKE  (r7 I:long) = (r7 I:long), (r9 I:long) java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x00fa|0x00fa: INVOKE  (r0 I:java.lang.Long) = (r7 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x00fe|0x00fe: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0105 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0100|0x0100: INVOKE  (r7 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0105|0x0105: INVOKE  (r7 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0109: INVOKE  (r9 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileRow():long type: VIRTUAL \l0x010d: INVOKE  (r7 I:long) = (r7 I:long), (r9 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0111|0x0111: INVOKE  (r1 I:java.lang.Long) = (r7 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0115|0x0115: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x011c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0117|0x0117: INVOKE  (r4 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x011c|0x011c: INVOKE  (r4 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0120: INVOKE  (r7 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l0x0124: INVOKE  (r4 I:long) = (r4 I:long), (r7 I:long) java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x0128|0x0128: INVOKE  (r4 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ 0x012c|0x012c: IF  (r25 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0133 \l}"];
Node_31 [shape=record,label="{31\:\ 0x012e|0x012e: INVOKE  (r5 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x0133|0x0133: INVOKE  (r7 I:long) = (r25 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0137: INVOKE  (r5 I:long) = (r6 I:mil.nga.geopackage.tiles.user.TileRow) mil.nga.geopackage.tiles.user.TileRow.getTileColumn():long type: VIRTUAL \l0x013b: INVOKE  (r5 I:long) = (r7 I:long), (r5 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x013f|0x013f: INVOKE  (r5 I:java.lang.Long) = (r5 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_34 [shape=record,label="{34\:\ 0x0145|0x0145: MOVE  (r25 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0147: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x014b|0x014b: MOVE  (r25 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x014d: INVOKE  (r5 I:long) = (r0 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0151: INVOKE  (r7 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0155: INVOKE  (r9 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0159: INVOKE  (r13 I:long) = (r25 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x015d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x015f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l0x0161: MOVE  (r4 I:?[long, double]) = (r5 I:?[long, double]) \l0x0162: MOVE  (r6 I:?[long, double]) = (r7 I:?[long, double]) \l0x0163: MOVE  (r8 I:?[long, double]) = (r9 I:?[long, double]) \l0x0164: MOVE  (r10 I:?[long, double]) = (r13 I:?[long, double]) \l0x0165: INVOKE  (r0 I:java.lang.Double[][]) = \l  (r0 I:mil.nga.geopackage.extension.coverage.CoverageData)\l  (r1 I:mil.nga.geopackage.tiles.matrix.TileMatrix)\l  (r2 I:java.util.Map)\l  (r3 I:int)\l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l mil.nga.geopackage.extension.coverage.CoverageData.formatUnboundedResults(mil.nga.geopackage.tiles.matrix.TileMatrix, java.util.Map, int, long, long, long, long):java.lang.Double[][] type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x0169|0x0169: RETURN  (r0 I:java.lang.Double[][]) \l}"];
MethodNode[shape=record,label="{private java.lang.Double[][] mil.nga.geopackage.extension.coverage.CoverageData.getValuesUnbounded((r27 'this' I:mil.nga.geopackage.extension.coverage.CoverageData A[IMMUTABLE_TYPE, THIS]), (r28 I:mil.nga.geopackage.tiles.matrix.TileMatrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:mil.nga.geopackage.tiles.user.TileCursor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:mil.nga.geopackage.extension.coverage.CoverageDataRequest A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_35;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_34;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_34;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_14;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_1;
Node_34 -> Node_1;
Node_35 -> Node_36;
}

