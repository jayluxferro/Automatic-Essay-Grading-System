digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataTiff.validateImageType(Lmil\/nga\/tiff\/FileDirectory;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getSamplesPerPixel():int type: VIRTUAL \l0x0006: INVOKE  (r1 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getBitsPerSample():java.util.List type: VIRTUAL \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r1 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getBitsPerSample():java.util.List type: VIRTUAL \l0x0012: INVOKE  (r1 I:boolean) = (r1 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: INVOKE  (r1 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getBitsPerSample():java.util.List type: VIRTUAL \l0x001c: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0020: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: INVOKE  (r4 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getSampleFormat():java.util.List type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: INVOKE  (r4 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getSampleFormat():java.util.List type: VIRTUAL \l0x002e: INVOKE  (r4 I:boolean) = (r4 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: INVOKE  (r5 I:java.util.List) = (r5 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.getSampleFormat():java.util.List type: VIRTUAL \l0x0038: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x003d: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: INVOKE  (r5 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0048: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|0x004a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: INVOKE  (r5 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0052: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|0x0053: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|0x0055: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: NEW_INSTANCE  (r5 I:mil.nga.geopackage.GeoPackageException) =  mil.nga.geopackage.GeoPackageException \l0x0058: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005a: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005d: CONST_STR  (r4 I:java.lang.String) =  \"The coverage data tile is expected to be a single sample 32 bit float. Samples Per Pixel: \" \l0x005f: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0065: CONST_STR  (r0 I:java.lang.String) =  \", Bits Per Sample: \" \l0x0067: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x006d: CONST_STR  (r0 I:java.lang.String) =  \", Sample Format: \" \l0x006f: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0072: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0075: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0079: INVOKE  \l  (r5 I:mil.nga.geopackage.GeoPackageException)\l  (r0 I:java.lang.String)\l mil.nga.geopackage.GeoPackageException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x007c|0x007c: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007d|0x007d: NEW_INSTANCE  (r5 I:mil.nga.geopackage.GeoPackageException) =  mil.nga.geopackage.GeoPackageException \l0x007f: CONST_STR  (r0 I:java.lang.String) =  \"The image is null\" \l0x0081: INVOKE  \l  (r5 I:mil.nga.geopackage.GeoPackageException)\l  (r0 I:java.lang.String)\l mil.nga.geopackage.GeoPackageException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0084|0x0084: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void mil.nga.geopackage.extension.coverage.CoverageDataTiff.validateImageType((r5 I:mil.nga.tiff.FileDirectory A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_23;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
}

