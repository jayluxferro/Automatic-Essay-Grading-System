digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataTiff.createImage(II)Lmil\/nga\/geopackage\/extension\/coverage\/CoverageDataTiffImage;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r6 I:mil.nga.tiff.Rasters) =  mil.nga.tiff.Rasters \l0x0002: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0005: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  \l  (r0 I:mil.nga.tiff.Rasters)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l mil.nga.tiff.Rasters.\<init\>(int, int, int, int, int):void type: DIRECT \l0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  (r1 I:int) = (r6 I:mil.nga.tiff.Rasters), (r0 I:int) mil.nga.tiff.Rasters.calculateRowsPerStrip(int):int type: VIRTUAL \l0x0011: NEW_INSTANCE  (r2 I:mil.nga.tiff.FileDirectory) =  mil.nga.tiff.FileDirectory \l0x0013: INVOKE  (r2 I:mil.nga.tiff.FileDirectory) mil.nga.tiff.FileDirectory.\<init\>():void type: DIRECT \l0x0016: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r8 I:int) mil.nga.tiff.FileDirectory.setImageWidth(int):void type: VIRTUAL \l0x0019: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r9 I:int) mil.nga.tiff.FileDirectory.setImageHeight(int):void type: VIRTUAL \l0x001c: CONST  (r8 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x001e: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r8 I:int) mil.nga.tiff.FileDirectory.setBitsPerSample(int):void type: VIRTUAL \l0x0021: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r0 I:int) mil.nga.tiff.FileDirectory.setCompression(int):void type: VIRTUAL \l0x0024: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r0 I:int) mil.nga.tiff.FileDirectory.setPhotometricInterpretation(int):void type: VIRTUAL \l0x0027: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r0 I:int) mil.nga.tiff.FileDirectory.setSamplesPerPixel(int):void type: VIRTUAL \l0x002a: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r1 I:int) mil.nga.tiff.FileDirectory.setRowsPerStrip(int):void type: VIRTUAL \l0x002d: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r0 I:int) mil.nga.tiff.FileDirectory.setPlanarConfiguration(int):void type: VIRTUAL \l0x0030: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0031: INVOKE  (r2 I:mil.nga.tiff.FileDirectory), (r8 I:int) mil.nga.tiff.FileDirectory.setSampleFormat(int):void type: VIRTUAL \l0x0034: INVOKE  \l  (r2 I:mil.nga.tiff.FileDirectory)\l  (r6 I:mil.nga.tiff.Rasters)\l mil.nga.tiff.FileDirectory.setWriteRasters(mil.nga.tiff.Rasters):void type: VIRTUAL \l0x0037: NEW_INSTANCE  (r8 I:mil.nga.geopackage.extension.coverage.CoverageDataTiffImage) =  mil.nga.geopackage.extension.coverage.CoverageDataTiffImage \l0x0039: INVOKE  \l  (r8 I:mil.nga.geopackage.extension.coverage.CoverageDataTiffImage)\l  (r2 I:mil.nga.tiff.FileDirectory)\l mil.nga.geopackage.extension.coverage.CoverageDataTiffImage.\<init\>(mil.nga.tiff.FileDirectory):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x003c|0x003c: RETURN  \l  (r8 I:mil.nga.geopackage.extension.coverage.CoverageDataTiffImage)\l \l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.extension.coverage.CoverageDataTiffImage mil.nga.geopackage.extension.coverage.CoverageDataTiff.createImage((r7 'this' I:mil.nga.geopackage.extension.coverage.CoverageDataTiff A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

