digraph "CFG formil.nga.geopackage.extension.coverage.CoverageDataTiff.drawTile(Lmil\/nga\/geopackage\/extension\/coverage\/GriddedTile;[Ljava\/lang\/Double;II)Lmil\/nga\/geopackage\/extension\/coverage\/CoverageDataTiffImage;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|mil.nga.geopackage.extension.coverage.CoverageDataTiffImage r0 = createImage(r8, r9)\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:5:0x001b\l|if (r2 \>= r8) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:2:0x0008, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:3:0x0009\-\>B:4:0x000b\l|if (r3 \>= r9) goto L_0x001b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_END\lLOOP:1: B:3:0x0009\-\>B:4:0x000b\l|setPixelValue(r0, r2, r3, (float) getPixelValue(r6, r7[(r3 * r8) + r2]))\lint r3 = r3 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:5:0x001b\l|int r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|r0.writeTiff()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.extension.coverage.CoverageDataTiffImage mil.nga.geopackage.extension.coverage.CoverageDataTiff.drawTile((r5v0 'this' mil.nga.geopackage.extension.coverage.CoverageDataTiff A[IMMUTABLE_TYPE, THIS]), (r6v0 mil.nga.geopackage.extension.coverage.GriddedTile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_3;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_5;
}

