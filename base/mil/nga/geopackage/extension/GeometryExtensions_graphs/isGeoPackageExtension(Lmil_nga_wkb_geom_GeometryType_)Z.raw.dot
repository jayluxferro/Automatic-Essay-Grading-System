digraph "CFG formil.nga.geopackage.extension.GeometryExtensions.isGeoPackageExtension(Lmil\/nga\/wkb\/geom\/GeometryType;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:mil.nga.wkb.geom.GeometryType) mil.nga.wkb.geom.GeometryType.getCode():int type: VIRTUAL \l0x0004: SGET  (r1 I:mil.nga.wkb.geom.GeometryType) =  mil.nga.wkb.geom.GeometryType.CIRCULARSTRING mil.nga.wkb.geom.GeometryType \l0x0006: INVOKE  (r1 I:int) = (r1 I:mil.nga.wkb.geom.GeometryType) mil.nga.wkb.geom.GeometryType.getCode():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r2 I:int) = (r2 I:mil.nga.wkb.geom.GeometryType) mil.nga.wkb.geom.GeometryType.getCode():int type: VIRTUAL \l0x0010: SGET  (r0 I:mil.nga.wkb.geom.GeometryType) =  mil.nga.wkb.geom.GeometryType.SURFACE mil.nga.wkb.geom.GeometryType \l0x0012: INVOKE  (r0 I:int) = (r0 I:mil.nga.wkb.geom.GeometryType) mil.nga.wkb.geom.GeometryType.getCode():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean mil.nga.geopackage.extension.GeometryExtensions.isGeoPackageExtension((r2 I:mil.nga.wkb.geom.GeometryType A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

