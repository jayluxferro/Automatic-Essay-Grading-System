digraph "CFG formil.nga.geopackage.schema.constraints.DataColumnConstraintsDao.deleteCascade(Lmil\/nga\/geopackage\/schema\/constraints\/DataColumnConstraints;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0068 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:java.lang.String) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintName():java.lang.String type: VIRTUAL \l0x0007: INVOKE  (r1 I:java.util.List) = \l  (r4 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao)\l  (r1 I:java.lang.String)\l mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao.queryByConstraintName(java.lang.String):java.util.List type: VIRTUAL \l0x000b: INVOKE  (r2 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r0 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints) = (mil.nga.geopackage.schema.constraints.DataColumnConstraints) (r0 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r1 I:java.lang.String) = \l  (r0 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintName():java.lang.String type: VIRTUAL \l0x001c: INVOKE  (r2 I:java.lang.String) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintName():java.lang.String type: VIRTUAL \l0x0020: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  (r1 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintType) = \l  (r0 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintType():mil.nga.geopackage.schema.constraints.DataColumnConstraintType type: VIRTUAL \l0x002a: INVOKE  (r2 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintType) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintType():mil.nga.geopackage.schema.constraints.DataColumnConstraintType type: VIRTUAL \l0x002e: INVOKE  (r1 I:boolean) = \l  (r1 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintType)\l  (r2 I:java.lang.Object)\l mil.nga.geopackage.schema.constraints.DataColumnConstraintType.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: INVOKE  (r1 I:java.lang.String) = \l  (r0 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getValue():java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: INVOKE  (r0 I:java.lang.String) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getValue():java.lang.String type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: INVOKE  (r0 I:java.lang.String) = \l  (r0 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getValue():java.lang.String type: VIRTUAL \l0x0045: INVOKE  (r1 I:java.lang.String) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getValue():java.lang.String type: VIRTUAL \l0x0049: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: INVOKE  (r0 I:mil.nga.geopackage.schema.columns.DataColumnsDao) = \l  (r4 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao)\l mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao.getDataColumnsDao():mil.nga.geopackage.schema.columns.DataColumnsDao type: DIRECT \l0x0053: INVOKE  (r1 I:java.lang.String) = \l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraints.getConstraintName():java.lang.String type: VIRTUAL \l0x0057: INVOKE  (r1 I:java.util.List) = \l  (r0 I:mil.nga.geopackage.schema.columns.DataColumnsDao)\l  (r1 I:java.lang.String)\l mil.nga.geopackage.schema.columns.DataColumnsDao.queryByConstraintName(java.lang.String):java.util.List type: VIRTUAL \l0x005b: INVOKE  (r2 I:boolean) = (r1 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|0x005f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0064 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: INVOKE  \l  (r0 I:mil.nga.geopackage.schema.columns.DataColumnsDao)\l  (r1 I:java.util.Collection)\l mil.nga.geopackage.schema.columns.DataColumnsDao.delete(java.util.Collection):int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: INVOKE  (r0 I:int) = \l  (r4 I:mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao)\l  (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints)\l mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao.delete(mil.nga.geopackage.schema.constraints.DataColumnConstraints):int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|0x0068: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao.deleteCascade((r4 'this' I:mil.nga.geopackage.schema.constraints.DataColumnConstraintsDao A[IMMUTABLE_TYPE, THIS]), (r5 I:mil.nga.geopackage.schema.constraints.DataColumnConstraints A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_18;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

