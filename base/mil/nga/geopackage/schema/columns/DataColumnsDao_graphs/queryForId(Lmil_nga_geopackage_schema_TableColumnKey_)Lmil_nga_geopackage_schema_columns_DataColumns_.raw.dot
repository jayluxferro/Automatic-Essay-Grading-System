digraph "CFG formil.nga.geopackage.schema.columns.DataColumnsDao.queryForId(Lmil\/nga\/geopackage\/schema\/TableColumnKey;)Lmil\/nga\/geopackage\/schema\/columns\/DataColumns;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0067 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0004: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"table_name\" \l0x0009: INVOKE  (r2 I:java.lang.String) = (r4 I:mil.nga.geopackage.schema.TableColumnKey) mil.nga.geopackage.schema.TableColumnKey.getTableName():java.lang.String type: VIRTUAL \l0x000d: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"column_name\" \l0x0012: INVOKE  (r2 I:java.lang.String) = (r4 I:mil.nga.geopackage.schema.TableColumnKey) mil.nga.geopackage.schema.TableColumnKey.getColumnName():java.lang.String type: VIRTUAL \l0x0016: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0019: INVOKE  (r0 I:java.util.List) = \l  (r3 I:mil.nga.geopackage.schema.columns.DataColumnsDao)\l  (r0 I:java.util.Map)\l mil.nga.geopackage.schema.columns.DataColumnsDao.queryForFieldValues(java.util.Map):java.util.List type: VIRTUAL \l0x001d: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0067 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: INVOKE  (r1 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0027: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:6:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002f: CHECK_CAST  (r4 I:mil.nga.geopackage.schema.columns.DataColumns) = (mil.nga.geopackage.schema.columns.DataColumns) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|0x0032: NEW_INSTANCE  (r0 I:java.sql.SQLException) =  java.sql.SQLException \l0x0034: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0039: CONST_STR  (r2 I:java.lang.String) =  \"More than one \" \l0x003b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: CONST_CLASS  (r2 I:java.lang.Class\<mil.nga.geopackage.schema.columns.DataColumns\>) =  mil.nga.geopackage.schema.columns.DataColumns.class \l0x0040: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Class) java.lang.Class.getSimpleName():java.lang.String type: VIRTUAL \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: CONST_STR  (r2 I:java.lang.String) =  \" returned for key. Table Name: \" \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  (r2 I:java.lang.String) = (r4 I:mil.nga.geopackage.schema.TableColumnKey) mil.nga.geopackage.schema.TableColumnKey.getTableName():java.lang.String type: VIRTUAL \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: CONST_STR  (r2 I:java.lang.String) =  \", Column Name: \" \l0x0055: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: INVOKE  (r4 I:java.lang.String) = (r4 I:mil.nga.geopackage.schema.TableColumnKey) mil.nga.geopackage.schema.TableColumnKey.getColumnName():java.lang.String type: VIRTUAL \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0063: INVOKE  (r0 I:java.sql.SQLException), (r4 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0066|0x0066: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0067|0x0067: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0068|0x0068: RETURN  (r4 I:mil.nga.geopackage.schema.columns.DataColumns) \l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.schema.columns.DataColumns mil.nga.geopackage.schema.columns.DataColumnsDao.queryForId((r3 'this' I:mil.nga.geopackage.schema.columns.DataColumnsDao A[IMMUTABLE_TYPE, THIS]), (r4 I:mil.nga.geopackage.schema.TableColumnKey A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

