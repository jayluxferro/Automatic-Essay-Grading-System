digraph "CFG formil.nga.geopackage.db.GeoPackageCoreConnection.setApplicationId(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:byte[]) = (r4 I:java.lang.String) java.lang.String.getBytes():byte[] type: VIRTUAL \l0x0004: INVOKE  (r4 I:java.nio.ByteBuffer) = (r4 I:byte[]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x0008: INVOKE  (r4 I:java.nio.IntBuffer) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.asIntBuffer():java.nio.IntBuffer type: VIRTUAL \l0x000c: INVOKE  (r4 I:int) = (r4 I:java.nio.IntBuffer) java.nio.IntBuffer.get():int type: VIRTUAL \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"PRAGMA application_id = %d;\" \l0x0012: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0013: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0015: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x001c: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0020: INVOKE  \l  (r3 I:mil.nga.geopackage.db.GeoPackageCoreConnection)\l  (r4 I:java.lang.String)\l mil.nga.geopackage.db.GeoPackageCoreConnection.execSQL(java.lang.String):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|0x0023: RETURN   \l}"];
MethodNode[shape=record,label="{public void mil.nga.geopackage.db.GeoPackageCoreConnection.setApplicationId((r3 'this' I:mil.nga.geopackage.db.GeoPackageCoreConnection A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

