digraph "CFG formil.nga.geopackage.geom.GeoPackageGeometryData.toBytes()[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:mil.nga.wkb.io.ByteWriter) =  mil.nga.wkb.io.ByteWriter \l0x0002: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter) mil.nga.wkb.io.ByteWriter.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"GP\" \l0x0007: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter), (r1 I:java.lang.String) mil.nga.wkb.io.ByteWriter.writeString(java.lang.String):void type: VIRTUAL \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter), (r1 I:byte) mil.nga.wkb.io.ByteWriter.writeByte(byte):void type: VIRTUAL \l0x000e: INVOKE  (r1 I:byte) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.buildFlagsByte():byte type: DIRECT \l0x0012: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter), (r1 I:byte) mil.nga.wkb.io.ByteWriter.writeByte(byte):void type: VIRTUAL \l0x0015: IGET  (r1 I:java.nio.ByteOrder) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.byteOrder java.nio.ByteOrder \l0x0017: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter), (r1 I:java.nio.ByteOrder) mil.nga.wkb.io.ByteWriter.setByteOrder(java.nio.ByteOrder):void type: VIRTUAL \l0x001a: IGET  (r1 I:int) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.srsId int \l0x001c: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter), (r1 I:int) mil.nga.wkb.io.ByteWriter.writeInt(int):void type: VIRTUAL \l0x001f: INVOKE  \l  (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData)\l  (r0 I:mil.nga.wkb.io.ByteWriter)\l mil.nga.geopackage.geom.GeoPackageGeometryData.writeEnvelope(mil.nga.wkb.io.ByteWriter):void type: DIRECT \l0x0022: INVOKE  (r1 I:int) = (r0 I:mil.nga.wkb.io.ByteWriter) mil.nga.wkb.io.ByteWriter.size():int type: VIRTUAL \l0x0026: IPUT  \l  (r1 I:int)\l  (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData)\l mil.nga.geopackage.geom.GeoPackageGeometryData.wkbGeometryIndex int \l0x0028: IGET  (r1 I:boolean) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.empty boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x002a|0x002a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x002c|0x002c: IGET  (r1 I:mil.nga.wkb.geom.Geometry) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.geometry mil.nga.wkb.geom.Geometry \l0x002e: INVOKE  \l  (r0 I:mil.nga.wkb.io.ByteWriter)\l  (r1 I:mil.nga.wkb.geom.Geometry)\l mil.nga.wkb.io.WkbGeometryWriter.writeGeometry(mil.nga.wkb.io.ByteWriter, mil.nga.wkb.geom.Geometry):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|0x0031: INVOKE  (r1 I:byte[]) = (r0 I:mil.nga.wkb.io.ByteWriter) mil.nga.wkb.io.ByteWriter.getBytes():byte[] type: VIRTUAL \l0x0035: IPUT  \l  (r1 I:byte[])\l  (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData)\l mil.nga.geopackage.geom.GeoPackageGeometryData.bytes byte[] \l0x0037: INVOKE  (r0 I:mil.nga.wkb.io.ByteWriter) mil.nga.wkb.io.ByteWriter.close():void type: VIRTUAL \l0x003a: IGET  (r0 I:byte[]) = (r2 I:mil.nga.geopackage.geom.GeoPackageGeometryData) mil.nga.geopackage.geom.GeoPackageGeometryData.bytes byte[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x003c|0x003c: RETURN  (r0 I:byte[]) \l}"];
MethodNode[shape=record,label="{public byte[] mil.nga.geopackage.geom.GeoPackageGeometryData.toBytes((r2 'this' I:mil.nga.geopackage.geom.GeoPackageGeometryData A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

