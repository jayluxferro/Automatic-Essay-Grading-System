digraph "CFG formil.nga.geopackage.geom.GeoPackageGeometryData.readEnvelope(ILmil\/nga\/wkb\/io\/ByteReader;)Lmil\/nga\/wkb\/geom\/GeometryEnvelope;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:20:0x0072 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0008: INVOKE  (r4 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x000c: INVOKE  (r6 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0010: INVOKE  (r8 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0014: CONST  (r10 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0015: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: CONST  (r12 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0017: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r14 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0025: INVOKE  (r10 I:java.lang.Double) = (r14 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x0029: INVOKE  (r14 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x002d: INVOKE  (r14 I:java.lang.Double) = (r14 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x0031: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0032: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0033: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003a \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: INVOKE  (r0 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0041: INVOKE  (r1 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x0045: INVOKE  (r12 I:double) = (r19 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.readDouble():double type: VIRTUAL \l0x0049: INVOKE  (r0 I:java.lang.Double) = (r12 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x004d: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: NEW_INSTANCE  (r11 I:mil.nga.wkb.geom.GeometryEnvelope) =  mil.nga.wkb.geom.GeometryEnvelope \l0x0050: INVOKE  \l  (r11 I:mil.nga.wkb.geom.GeometryEnvelope)\l  (r10 I:boolean)\l  (r13 I:boolean)\l mil.nga.wkb.geom.GeometryEnvelope.\<init\>(boolean, boolean):void type: DIRECT \l0x0053: INVOKE  (r11 I:mil.nga.wkb.geom.GeometryEnvelope), (r2 I:double) mil.nga.wkb.geom.GeometryEnvelope.setMinX(double):void type: VIRTUAL \l0x0056: INVOKE  (r11 I:mil.nga.wkb.geom.GeometryEnvelope), (r4 I:double) mil.nga.wkb.geom.GeometryEnvelope.setMaxX(double):void type: VIRTUAL \l0x0059: INVOKE  (r11 I:mil.nga.wkb.geom.GeometryEnvelope), (r6 I:double) mil.nga.wkb.geom.GeometryEnvelope.setMinY(double):void type: VIRTUAL \l0x005c: INVOKE  (r11 I:mil.nga.wkb.geom.GeometryEnvelope), (r8 I:double) mil.nga.wkb.geom.GeometryEnvelope.setMaxY(double):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x005f|0x005f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0067 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: INVOKE  \l  (r11 I:mil.nga.wkb.geom.GeometryEnvelope)\l  (r14 I:java.lang.Double)\l mil.nga.wkb.geom.GeometryEnvelope.setMinZ(java.lang.Double):void type: VIRTUAL \l0x0064: INVOKE  \l  (r11 I:mil.nga.wkb.geom.GeometryEnvelope)\l  (r15 I:java.lang.Double)\l mil.nga.wkb.geom.GeometryEnvelope.setMaxZ(java.lang.Double):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x006f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|0x0069: INVOKE  \l  (r11 I:mil.nga.wkb.geom.GeometryEnvelope)\l  (r1 I:java.lang.Double)\l mil.nga.wkb.geom.GeometryEnvelope.setMinM(java.lang.Double):void type: VIRTUAL \l0x006c: INVOKE  \l  (r11 I:mil.nga.wkb.geom.GeometryEnvelope)\l  (r0 I:java.lang.Double)\l mil.nga.wkb.geom.GeometryEnvelope.setMaxM(java.lang.Double):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|0x006f: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0072|0x0072: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|0x0074: RETURN  (r16 I:mil.nga.wkb.geom.GeometryEnvelope) \l}"];
MethodNode[shape=record,label="{private mil.nga.wkb.geom.GeometryEnvelope mil.nga.geopackage.geom.GeoPackageGeometryData.readEnvelope((r17 'this' I:mil.nga.geopackage.geom.GeoPackageGeometryData A[IMMUTABLE_TYPE, THIS]), (r18 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:mil.nga.wkb.io.ByteReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_20 -> Node_21;
}

