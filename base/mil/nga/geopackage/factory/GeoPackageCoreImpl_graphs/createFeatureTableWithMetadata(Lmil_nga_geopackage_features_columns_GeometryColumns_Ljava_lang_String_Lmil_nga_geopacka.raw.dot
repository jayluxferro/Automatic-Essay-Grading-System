digraph "CFG formil.nga.geopackage.factory.GeoPackageCoreImpl.createFeatureTableWithMetadata(Lmil\/nga\/geopackage\/features\/columns\/GeometryColumns;Ljava\/lang\/String;Lmil\/nga\/geopackage\/BoundingBox;J)Lmil\/nga\/geopackage\/features\/columns\/GeometryColumns;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0005: MOVE  (r5 I:?[long, double]) = (r11 I:?[long, double]) \l0x0006: INVOKE  (r8 I:mil.nga.geopackage.features.columns.GeometryColumns) = \l  (r0 I:mil.nga.geopackage.factory.GeoPackageCoreImpl)\l  (r1 I:mil.nga.geopackage.features.columns.GeometryColumns)\l  (r2 I:java.lang.String)\l  (r3 I:java.util.List)\l  (r4 I:mil.nga.geopackage.BoundingBox)\l  (r5 I:long)\l mil.nga.geopackage.factory.GeoPackageCoreImpl.createFeatureTableWithMetadata(mil.nga.geopackage.features.columns.GeometryColumns, java.lang.String, java.util.List, mil.nga.geopackage.BoundingBox, long):mil.nga.geopackage.features.columns.GeometryColumns type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: RETURN  (r8 I:mil.nga.geopackage.features.columns.GeometryColumns) \l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.features.columns.GeometryColumns mil.nga.geopackage.factory.GeoPackageCoreImpl.createFeatureTableWithMetadata((r7 'this' I:mil.nga.geopackage.factory.GeoPackageCoreImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:mil.nga.geopackage.features.columns.GeometryColumns A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

