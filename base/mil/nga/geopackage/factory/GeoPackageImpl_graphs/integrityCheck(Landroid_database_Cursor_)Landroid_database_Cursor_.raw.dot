digraph "CFG formil.nga.geopackage.factory.GeoPackageImpl.integrityCheck(Landroid\/database\/Cursor;)Landroid\/database\/Cursor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:android.database.Cursor) android.database.Cursor.moveToNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  (r0 I:java.lang.String) = (r3 I:android.database.Cursor), (r0 I:int) android.database.Cursor.getString(int):java.lang.String type: INTERFACE \l0x000b: CONST_STR  (r1 I:java.lang.String) =  \"ok\" \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l0x0016: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r3 I:android.database.Cursor) \l}"];
MethodNode[shape=record,label="{private android.database.Cursor mil.nga.geopackage.factory.GeoPackageImpl.integrityCheck((r2 'this' I:mil.nga.geopackage.factory.GeoPackageImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:android.database.Cursor A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

