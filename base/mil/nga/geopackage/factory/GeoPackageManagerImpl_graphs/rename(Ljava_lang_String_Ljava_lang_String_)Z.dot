digraph "CFG formil.nga.geopackage.factory.GeoPackageManagerImpl.rename(Ljava\/lang\/String;Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|mil.nga.geopackage.db.metadata.GeoPackageMetadata r0 = getGeoPackageMetadata(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == null) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|mil.nga.geopackage.db.metadata.GeoPackageMetadataDb r1 = new mil.nga.geopackage.p021db.metadata.GeoPackageMetadataDb(r3.context)\lr1.open()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ all \-\> 0x001c \}\lSplitter:B:3:0x0010\l|new mil.nga.geopackage.p021db.metadata.GeoPackageMetadataDataSource(r1).rename(r0, r5)     \/\/ Catch:\{ all \-\> 0x001c \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|DONT_GENERATE\l|r1.close()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|ExcHandler:  FINALLY\lSplitter:B:3:0x0010\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|FINALLY_INSNS\l|r1.close()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|throw r4\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|if (r0 == null) goto L_0x0029\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023}"];
Node_11 [shape=record,label="{11\:\ 0x0027|if (r0.isExternal() != false) goto L_0x0032\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029}"];
Node_13 [shape=record,label="{13\:\ 0x002d|if (copy(r4, r5) == false) goto L_0x0032\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|delete(r4)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032}"];
Node_16 [shape=record,label="{16\:\ 0x0036|RETURN\l|return exists(r5)\l}"];
MethodNode[shape=record,label="{public boolean mil.nga.geopackage.factory.GeoPackageManagerImpl.rename((r3v0 'this' mil.nga.geopackage.factory.GeoPackageManagerImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

