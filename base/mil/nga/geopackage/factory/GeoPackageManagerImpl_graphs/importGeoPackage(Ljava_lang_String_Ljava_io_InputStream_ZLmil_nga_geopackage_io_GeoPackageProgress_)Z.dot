digraph "CFG formil.nga.geopackage.factory.GeoPackageManagerImpl.importGeoPackage(Ljava\/lang\/String;Ljava\/io\/InputStream;ZLmil\/nga\/geopackage\/io\/GeoPackageProgress;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r8 == null) goto L_0x0027\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IOException \-\> 0x000c \}\lSplitter:B:1:0x0002\l|int r0 = r6.available()     \/\/ Catch:\{ IOException \-\> 0x000c \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|Catch:\{ IOException \-\> 0x000c \}\l|if (r0 \<= 0) goto L_0x0027     \/\/ Catch:\{ IOException \-\> 0x000c \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|Catch:\{ IOException \-\> 0x000c \}\l|r8.setMax(r0)     \/\/ Catch:\{ IOException \-\> 0x000c \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.io.IOException r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|java.lang.String r1 = mil.nga.geopackage.factory.GeoPackageManagerImpl.class.getSimpleName()\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Could not determine stream available size. Database: \")\lr2.append(r5)\landroid.util.Log.w(r1, r2.toString(), r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027}"];
Node_8 [shape=record,label="{8\:\ 0x002b|RETURN\l|return importGeoPackage(r5, r7, r6, r8)\l}"];
MethodNode[shape=record,label="{public boolean mil.nga.geopackage.factory.GeoPackageManagerImpl.importGeoPackage((r4v0 'this' mil.nga.geopackage.factory.GeoPackageManagerImpl A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 mil.nga.geopackage.io.GeoPackageProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

