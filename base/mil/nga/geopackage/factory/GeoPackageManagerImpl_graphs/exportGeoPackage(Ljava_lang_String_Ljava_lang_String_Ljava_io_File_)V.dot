digraph "CFG formil.nga.geopackage.factory.GeoPackageManagerImpl.exportGeoPackage(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.File r0 = new java.io.File(r6, r5)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (mil.nga.geopackage.validate.GeoPackageValidate.hasGeoPackageExtension(r0) != false) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r5)\lr0.append(\".gpkg\")\ljava.io.File r0 = new java.io.File(r6, r0.toString())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|PHI: r0 \l  PHI: (r0v1 java.io.File) = (r0v0 java.io.File), (r0v3 java.io.File) binds: [B:1:0x0009, B:2:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|SYNTHETIC\lSplitter:B:4:0x0025\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x0029 \}\lSplitter:B:4:0x0025\l|mil.nga.geopackage.p022io.GeoPackageIOUtils.copyFile(getFile(r4), r0)     \/\/ Catch:\{ IOException \-\> 0x0029 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|ExcHandler: IOException (r5v2 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0025\l|java.io.IOException r5 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Failed read or write GeoPackage database '\")\lr1.append(r4)\lr1.append(\"' to file: '\")\lr1.append(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|throw new mil.nga.geopackage.GeoPackageException(r1.toString(), r5)\l}"];
MethodNode[shape=record,label="{public void mil.nga.geopackage.factory.GeoPackageManagerImpl.exportGeoPackage((r3v0 'this' mil.nga.geopackage.factory.GeoPackageManagerImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

