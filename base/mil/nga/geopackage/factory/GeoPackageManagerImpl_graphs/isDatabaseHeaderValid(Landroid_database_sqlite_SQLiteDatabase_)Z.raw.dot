digraph "CFG formil.nga.geopackage.factory.GeoPackageManagerImpl.isDatabaseHeaderValid(Landroid\/database\/sqlite\/SQLiteDatabase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: NEW_INSTANCE  (r2 I:java.io.FileInputStream) =  java.io.FileInputStream A[Catch:\{ Exception \-\> 0x003c \}, TRY_ENTER]\l0x0004: INVOKE  (r5 I:java.lang.String) = (r5 I:android.database.sqlite.SQLiteDatabase) android.database.sqlite.SQLiteDatabase.getPath():java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x003c \}]\l0x0008: INVOKE  (r2 I:java.io.FileInputStream), (r5 I:java.lang.String) java.io.FileInputStream.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ Exception \-\> 0x003c \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|SYNTHETIC\lSplitter:B:4:0x000d\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000d\l|0x000d: NEW_ARRAY  (r1 I:byte[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}, TRY_ENTER]\l0x000f: INVOKE  (r3 I:int) = (r2 I:java.io.FileInputStream), (r1 I:byte[]) java.io.FileInputStream.read(byte[]):int type: VIRTUAL A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: NEW_INSTANCE  (r5 I:mil.nga.wkb.io.ByteReader) =  mil.nga.wkb.io.ByteReader A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x0017: INVOKE  (r5 I:mil.nga.wkb.io.ByteReader), (r1 I:byte[]) mil.nga.wkb.io.ByteReader.\<init\>(byte[]):void type: DIRECT A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x001a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x001b: INVOKE  (r5 I:java.lang.String) = (r5 I:mil.nga.wkb.io.ByteReader), (r1 I:int) mil.nga.wkb.io.ByteReader.readString(int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x001f: CONST_STR  (r1 I:java.lang.String) =  \"SQLite format 3\" A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x0021: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x0025: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r0 I:int), (r1 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"SQLite format 3\" A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x002b: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL A[Catch:\{ Exception \-\> 0x0036, all \-\> 0x0034 \}]\l0x002e: NOP   A[TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|SYNTHETIC\lSplitter:B:9:0x0030\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0030\l|0x0030: INVOKE  (r2 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x004d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|ExcHandler: all null\lSplitter:B:4:0x000d\l|0x0034: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|ExcHandler: Exception null\lSplitter:B:4:0x000d\l|0x0036: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|ExcHandler: all null\lSplitter:B:20:0x003f\l|0x0039: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|ExcHandler: Exception null\lSplitter:B:1:0x0002\l|0x003c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: CONST_CLASS  (r2 I:java.lang.Class\<mil.nga.geopackage.factory.GeoPackageManagerImpl\>) =  mil.nga.geopackage.factory.GeoPackageManagerImpl.class \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|SYNTHETIC\lSplitter:B:20:0x003f\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x003f\l|0x003f: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Class) java.lang.Class.getSimpleName():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER]\l0x0043: CONST_STR  (r3 I:java.lang.String) =  \"Failed to retrieve database header\" A[Catch:\{ all \-\> 0x0039 \}]\l0x0045: INVOKE  \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r5 I:java.lang.Throwable)\l android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004d \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|SYNTHETIC\lSplitter:B:23:0x004a\l}"];
Node_24 [shape=record,label="{24\:\ ?|Splitter:B:23:0x004a\l|0x004a: INVOKE  (r1 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x004d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: RETURN  (r0 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:9:0x0030\l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0053 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0050|SYNTHETIC\lSplitter:B:28:0x0050\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0050\l|0x0050: INVOKE  (r2 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0053 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0053|0x0053: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:28:0x0050\l}"];
MethodNode[shape=record,label="{private boolean mil.nga.geopackage.factory.GeoPackageManagerImpl.isDatabaseHeaderValid((r4 'this' I:mil.nga.geopackage.factory.GeoPackageManagerImpl A[IMMUTABLE_TYPE, THIS]), (r5 I:android.database.sqlite.SQLiteDatabase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_14;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_26;
Node_10 -> Node_26;
Node_10 -> Node_25;
Node_12 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_27;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_21 -> Node_16;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_25;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_30;
}

