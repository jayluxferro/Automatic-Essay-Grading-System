digraph "CFG formil.nga.geopackage.metadata.reference.MetadataReference.setColumnName(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.referenceScope == null) goto L_0x003f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r4 == null) goto L_0x003f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|mil.nga.geopackage.metadata.reference.ReferenceScopeType r0 = getReferenceScope()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r0.equals(mil.nga.geopackage.metadata.reference.ReferenceScopeType.GEOPACKAGE) != false) goto L_0x0023\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r0.equals(mil.nga.geopackage.metadata.reference.ReferenceScopeType.TABLE) != false) goto L_0x0023\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if (r0.equals(mil.nga.geopackage.metadata.reference.ReferenceScopeType.ROW) != false) goto L_0x0023\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"The column name must be null for \")\lr1.append(r0)\lr1.append(\" reference scope\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|throw new mil.nga.geopackage.GeoPackageException(r1.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|r3.columnName = r4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void mil.nga.geopackage.metadata.reference.MetadataReference.setColumnName((r3v0 'this' mil.nga.geopackage.metadata.reference.MetadataReference A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
}

