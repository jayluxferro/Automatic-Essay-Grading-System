digraph "CFG formil.nga.geopackage.BoundingBox.complementary(D)Lmil\/nga\/geopackage\/BoundingBox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((r5.maxLongitude \> r6 ? 1 : (r5.maxLongitude == r6 ? 0 : \-1)) \<= 0) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r5.minLongitude \> (\-r6) ? 1 : (r5.minLongitude == (\-r6) ? 0 : \-1)) \< 0) goto L_0x002d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|java.lang.Double r6 = java.lang.Double.valueOf(r6 * \-2.0d)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if ((r5.minLongitude \> (\-r6) ? 1 : (r5.minLongitude == (\-r6) ? 0 : \-1)) \>= 0) goto L_0x002d\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e}"];
Node_8 [shape=record,label="{8\:\ 0x0022|if ((r5.maxLongitude \> r6 ? 1 : (r5.maxLongitude == r6 ? 0 : \-1)) \> 0) goto L_0x002d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|java.lang.Double r6 = java.lang.Double.valueOf(r6 * 2.0d)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|r6 = null\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|PHI: r6 \l  PHI: (r6v1 java.lang.Double) = (r6v3 java.lang.Double), (r6v5 java.lang.Double), (r6v7 java.lang.Double) binds: [B:10:0x002d, B:9:0x0024, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == null) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|mil.nga.geopackage.BoundingBox r2 = new mil.nga.geopackage.BoundingBox(r5)\lr2.setMinLongitude(r2.getMinLongitude() + r6.doubleValue())\lr2.setMaxLongitude(r2.getMaxLongitude() + r6.doubleValue())\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public mil.nga.geopackage.BoundingBox mil.nga.geopackage.BoundingBox.complementary((r5v0 'this' mil.nga.geopackage.BoundingBox A[IMMUTABLE_TYPE, THIS]), (r6v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
}

