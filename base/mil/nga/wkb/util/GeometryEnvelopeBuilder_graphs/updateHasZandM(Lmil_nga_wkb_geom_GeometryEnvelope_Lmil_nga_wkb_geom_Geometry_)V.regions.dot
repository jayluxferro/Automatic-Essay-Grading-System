digraph "CFG formil.nga.wkb.util.GeometryEnvelopeBuilder.updateHasZandM(Lmil\/nga\/wkb\/geom\/GeometryEnvelope;Lmil\/nga\/wkb\/geom\/Geometry;)V" {
subgraph cluster_Region_569824408 {
label = "R(2:(1:4)|(1:(1:9)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_240484427 {
label = "IF [B:1:0x0005, B:3:0x000b] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|ADDED_TO_REGION\l|if (r2.hasZ() == false) goto L_0x0007\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|ADDED_TO_REGION\l|if (r3.hasZ() == true) goto L_0x000d\l}"];
subgraph cluster_Region_2010709028 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|r2.setHasZ(true)\l}"];
}
}
subgraph cluster_Region_1882835425 {
label = "R(1:(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1736212842 {
label = "IF [B:6:0x0014, B:8:0x001a] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0014|if (r2.hasM() != true) goto L_0x0016\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|ADDED_TO_REGION\l|if (r3.hasM() != false) goto L_0x001c\l}"];
subgraph cluster_Region_1158218262 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001c|r2.setHasM(true)\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0010}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0016}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void mil.nga.wkb.util.GeometryEnvelopeBuilder.updateHasZandM((r2v0 mil.nga.wkb.geom.GeometryEnvelope A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 mil.nga.wkb.geom.Geometry A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_8 -> Node_12[style=dashed];
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

