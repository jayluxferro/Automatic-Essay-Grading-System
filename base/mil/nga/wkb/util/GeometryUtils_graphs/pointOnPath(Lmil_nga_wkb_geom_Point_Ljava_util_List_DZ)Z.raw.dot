digraph "CFG formil.nga.wkb.util.GeometryUtils.pointOnPath(Lmil\/nga\/wkb\/geom\/Point;Ljava\/util\/List;DZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r3 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r3 I:java.lang.Object) = (r6 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r3 I:mil.nga.wkb.geom.Point) = (mil.nga.wkb.geom.Point) (r3 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r9 I:java.lang.Object) = (r6 I:java.util.List), (r9 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r9 I:mil.nga.wkb.geom.Point) = (mil.nga.wkb.geom.Point) (r9 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  (r9 I:boolean) = \l  (r5 I:mil.nga.wkb.geom.Point)\l  (r3 I:mil.nga.wkb.geom.Point)\l  (r9 I:mil.nga.wkb.geom.Point)\l  (r7 I:double)\l mil.nga.wkb.util.GeometryUtils.pointOnPath(mil.nga.wkb.geom.Point, mil.nga.wkb.geom.Point, mil.nga.wkb.geom.Point, double):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: ARITH  (r9 I:int) = (r0 I:int) + (1 int) \l0x0029: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean mil.nga.wkb.util.GeometryUtils.pointOnPath((r5 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.List\<mil.nga.wkb.geom.Point\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/wkb\/geom\/Point;, Ljava\/util\/List\<, Lmil\/nga\/wkb\/geom\/Point;, \>;DZ)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_11[style=dashed];
Node_9 -> Node_4;
Node_10 -> Node_11;
}

