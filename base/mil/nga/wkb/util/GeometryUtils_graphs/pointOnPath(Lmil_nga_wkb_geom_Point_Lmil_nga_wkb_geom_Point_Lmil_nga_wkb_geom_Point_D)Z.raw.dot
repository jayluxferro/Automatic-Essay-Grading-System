digraph "CFG formil.nga.wkb.util.GeometryUtils.pointOnPath(Lmil\/nga\/wkb\/geom\/Point;Lmil\/nga\/wkb\/geom\/Point;Lmil\/nga\/wkb\/geom\/Point;D)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r12 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0004: INVOKE  (r2 I:double) = (r11 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0008: ARITH  (r0 I:double) = (r0 I:double) \- (r2 I:double) \l0x0009: INVOKE  (r2 I:double) = (r12 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x000d: INVOKE  (r4 I:double) = (r11 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x0011: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0012: INVOKE  (r4 I:double) = (r10 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0016: INVOKE  (r6 I:double) = (r11 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x001a: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) \l0x001b: INVOKE  (r6 I:double) = (r10 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x001f: INVOKE  (r10 I:double) = (r11 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x0023: ARITH  (r6 I:double) = (r6 I:double) \- (r10 I:double) \l0x0024: ARITH  (r10 I:double) = (r4 I:double) * (r0 I:double) \l0x0026: ARITH  (r8 I:double) = (r6 I:double) * (r2 I:double) \l0x0028: ARITH  (r10 I:double) = (r10 I:double) + (r8 I:double) \l0x0029: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x002c: CMP_L  (r8 I:int) = (r10 I:double), (r8 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x004d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0030|0x0030: ARITH  (r4 I:double) = (r4 I:double) * (r4 I:double) \l0x0032: ARITH  (r6 I:double) = (r6 I:double) * (r6 I:double) \l0x0034: ARITH  (r4 I:double) = (r4 I:double) + (r6 I:double) \l0x0035: ARITH  (r0 I:double) = (r0 I:double) * (r0 I:double) \l0x0037: ARITH  (r2 I:double) = (r2 I:double) * (r2 I:double) \l0x0039: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x003a: CMP_G  (r2 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|0x003c: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x004d \l}"];
Node_4 [shape=record,label="{4\:\ 0x003e|0x003e: ARITH  (r10 I:double) = (r10 I:double) * (r10 I:double) \l0x0040: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double) \l0x0042: ARITH  (r10 I:double) = (r10 I:double) \- (r4 I:double) \l0x0043: INVOKE  (r10 I:double) = (r10 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0047: CMP_G  (r10 I:int) = (r10 I:double), (r13 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0049|0x0049: IF  (r10 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x004d \l}"];
Node_6 [shape=record,label="{6\:\ 0x004b|0x004b: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004c: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: RETURN  (r12 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean mil.nga.wkb.util.GeometryUtils.pointOnPath((r10 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

