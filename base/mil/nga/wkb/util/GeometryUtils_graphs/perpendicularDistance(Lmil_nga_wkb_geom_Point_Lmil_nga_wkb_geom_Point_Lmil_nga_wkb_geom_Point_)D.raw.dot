digraph "CFG formil.nga.wkb.util.GeometryUtils.perpendicularDistance(Lmil\/nga\/wkb\/geom\/Point;Lmil\/nga\/wkb\/geom\/Point;Lmil\/nga\/wkb\/geom\/Point;)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r22 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0004: INVOKE  (r2 I:double) = (r22 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x0008: INVOKE  (r4 I:double) = (r23 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x000c: INVOKE  (r6 I:double) = (r23 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x0010: INVOKE  (r8 I:double) = (r24 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0014: INVOKE  (r10 I:double) = (r24 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getY():double type: VIRTUAL \l0x0018: ARITH  (r12 I:double) = (r8 I:double) \- (r4 I:double) \l0x001a: ARITH  (r14 I:double) = (r10 I:double) \- (r6 I:double) \l0x001c: ARITH  (r16 I:double) = (r0 I:double) \- (r4 I:double) \l0x001e: ARITH  (r18 I:double) = (r2 I:double) \- (r6 I:double) \l0x0020: ARITH  (r16 I:double) = (r16 I:double) * (r12 I:double) \l0x0022: ARITH  (r18 I:double) = (r18 I:double) * (r14 I:double) \l0x0024: ARITH  (r16 I:double) = (r16 I:double) + (r18 I:double) \l0x0026: ARITH  (r18 I:double) = (r12 I:double) * (r12 I:double) \l0x0028: ARITH  (r20 I:double) = (r14 I:double) * (r14 I:double) \l0x002a: ARITH  (r18 I:double) = (r18 I:double) + (r20 I:double) \l0x002c: CONST  (r20 I:?[long, double]) = (0 ?[long, double]) \l0x002e: CMP_G  (r20 I:int) = (r16 I:double), (r20 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0030|0x0030: IF  (r20 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0033 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0033|0x0033: CMP_G  (r20 I:int) = (r18 I:double), (r16 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|0x0035: IF  (r20 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:6:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|0x0037: MOVE  (r4 I:?[long, double]) = (r8 I:?[long, double]) \l0x0038: MOVE  (r6 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: ARITH  (r16 I:double) = (r16 I:double) \/ (r18 I:double) \l0x003c: ARITH  (r12 I:double) = (r12 I:double) * (r16 I:double) \l0x003e: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003f: ARITH  (r4 I:double) = (r4 I:double) + (r12 I:double) \l0x0040: ARITH  (r16 I:double) = (r16 I:double) * (r14 I:double) \l0x0042: ARITH  (r6 I:double) = (r6 I:double) + (r16 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: ARITH  (r4 I:double) = (r4 I:double) \- (r0 I:double) \l0x0046: CONST  (r0 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0048: INVOKE  (r4 I:double) = (r4 I:double), (r0 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x004c: ARITH  (r6 I:double) = (r6 I:double) \- (r2 I:double) \l0x004d: INVOKE  (r0 I:double) = (r6 I:double), (r0 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0051: ARITH  (r4 I:double) = (r4 I:double) + (r0 I:double) \l0x0052: INVOKE  (r0 I:double) = (r4 I:double) java.lang.Math.sqrt(double):double type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0056|0x0056: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public static double mil.nga.wkb.util.GeometryUtils.perpendicularDistance((r22 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

