digraph "CFG formil.nga.wkb.util.GeometryUtils.normalize(Lmil\/nga\/wkb\/geom\/Point;D)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r6 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0004: NEG  (r2 I:double) = (r7 I:double) \l0x0005: CONST  (r4 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0007: CMP_G  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r0 I:double) = (r6 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x000f: ARITH  (r7 I:double) = (r7 I:double) * (r4 I:double) \l0x0011: ARITH  (r0 I:double) = (r0 I:double) + (r7 I:double) \l0x0012: INVOKE  (r6 I:mil.nga.wkb.geom.Point), (r0 I:double) mil.nga.wkb.geom.Point.setX(double):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r0 I:double) = (r6 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x001a: CMP_L  (r0 I:int) = (r0 I:double), (r7 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: INVOKE  (r0 I:double) = (r6 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getX():double type: VIRTUAL \l0x0022: ARITH  (r7 I:double) = (r7 I:double) * (r4 I:double) \l0x0024: ARITH  (r0 I:double) = (r0 I:double) \- (r7 I:double) \l0x0025: INVOKE  (r6 I:mil.nga.wkb.geom.Point), (r0 I:double) mil.nga.wkb.geom.Point.setX(double):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: RETURN   \l}"];
MethodNode[shape=record,label="{private static void mil.nga.wkb.util.GeometryUtils.normalize((r6 I:mil.nga.wkb.geom.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

