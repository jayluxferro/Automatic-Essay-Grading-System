digraph "CFG formil.nga.wkb.util.GeometryPrinter.addPolygonMessage(Ljava\/lang\/StringBuilder;Lmil\/nga\/wkb\/geom\/Polygon;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"Rings: \" \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000a: INVOKE  (r1 I:int) = (r5 I:mil.nga.wkb.geom.Polygon) mil.nga.wkb.geom.Polygon.numRings():int type: VIRTUAL \l0x000e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0011: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0015: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0018: INVOKE  (r5 I:java.util.List) = (r5 I:mil.nga.wkb.geom.Polygon) mil.nga.wkb.geom.Polygon.getRings():java.util.List type: VIRTUAL \l0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: INVOKE  (r1 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|0x0021: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x004f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: INVOKE  (r1 I:java.lang.Object) = (r5 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r1 I:mil.nga.wkb.geom.LineString) = (mil.nga.wkb.geom.LineString) (r1 I:?[OBJECT, ARRAY]) \l0x0029: CONST_STR  (r2 I:java.lang.String) =  \"\l\l\" \l0x002b: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0049 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0032: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0035: CONST_STR  (r3 I:java.lang.String) =  \"Hole \" \l0x0037: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: CONST_STR  (r2 I:java.lang.String) =  \"\l\" \l0x0046: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0049|0x0049: INVOKE  \l  (r4 I:java.lang.StringBuilder)\l  (r1 I:mil.nga.wkb.geom.LineString)\l mil.nga.wkb.util.GeometryPrinter.addLineStringMessage(java.lang.StringBuilder, mil.nga.wkb.geom.LineString):void type: STATIC \l0x004c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004f|0x004f: RETURN   \l}"];
MethodNode[shape=record,label="{private static void mil.nga.wkb.util.GeometryPrinter.addPolygonMessage((r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:mil.nga.wkb.geom.Polygon A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

