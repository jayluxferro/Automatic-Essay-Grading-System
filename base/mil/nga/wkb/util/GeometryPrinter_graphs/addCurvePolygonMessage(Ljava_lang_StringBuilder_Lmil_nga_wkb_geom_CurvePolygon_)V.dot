digraph "CFG formil.nga.wkb.util.GeometryPrinter.addCurvePolygonMessage(Ljava\/lang\/StringBuilder;Lmil\/nga\/wkb\/geom\/CurvePolygon;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Rings: \")\lr0.append(r5.numRings())\lr4.append(r0.toString())\ljava.util.List r5 = r5.getRings()\lr0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:6:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001d\-\>B:6:0x0049\l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|if (r0 \>= r5.size()) goto L_0x0053\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|mil.nga.wkb.geom.Curve r1 = r5.get(r0)\lr4.append(\"nn\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|if (r0 \<= 0) goto L_0x0049\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Hole \")\lr2.append(r0)\lr4.append(r2.toString())\lr4.append(\"n\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0049|LOOP_END\lLOOP:0: B:1:0x001d\-\>B:6:0x0049\l|r4.append(getGeometryString(r1))\lint r0 = r0 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0053|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0053|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void mil.nga.wkb.util.GeometryPrinter.addCurvePolygonMessage((r4v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 mil.nga.wkb.geom.CurvePolygon\<mil.nga.wkb.geom.Curve\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Lmil\/nga\/wkb\/geom\/CurvePolygon\<, Lmil\/nga\/wkb\/geom\/Curve;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

