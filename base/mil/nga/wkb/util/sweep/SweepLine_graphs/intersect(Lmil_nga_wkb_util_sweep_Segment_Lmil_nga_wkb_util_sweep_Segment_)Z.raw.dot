digraph "CFG formil.nga.wkb.util.sweep.SweepLine.intersect(Lmil\/nga\/wkb\/util\/sweep\/Segment;Lmil\/nga\/wkb\/util\/sweep\/Segment;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0067 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0067 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r2 I:int) = (r7 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l0x000a: INVOKE  (r3 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: INVOKE  (r3 I:int) = (r7 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l0x0019: INVOKE  (r4 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l0x001d: IGET  (r5 I:java.util.List\<mil.nga.wkb.geom.LineString\>) = (r6 I:mil.nga.wkb.util.sweep.SweepLine) mil.nga.wkb.util.sweep.SweepLine.rings java.util.List \l0x001f: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0023: CHECK_CAST  (r2 I:mil.nga.wkb.geom.LineString) = (mil.nga.wkb.geom.LineString) (r2 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:int) = (r2 I:mil.nga.wkb.geom.LineString) mil.nga.wkb.geom.LineString.numPoints():int type: VIRTUAL \l0x0029: ARITH  (r5 I:int) = (r3 I:int) + (1 int) \l0x002b: ARITH  (r5 I:int) = (r5 I:int) % (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: ARITH  (r4 I:int) = (r4 I:int) + (r1 I:int) \l0x002f: ARITH  (r4 I:int) = (r4 I:int) % (r2 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0067 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: INVOKE  (r2 I:mil.nga.wkb.geom.Point) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getLeftPoint():mil.nga.wkb.geom.Point type: VIRTUAL \l0x003c: INVOKE  (r2 I:double) = \l  (r7 I:mil.nga.wkb.util.sweep.Segment)\l  (r2 I:mil.nga.wkb.geom.Point)\l mil.nga.wkb.util.sweep.SweepLine.isLeft(mil.nga.wkb.util.sweep.Segment, mil.nga.wkb.geom.Point):double type: STATIC \l0x0040: INVOKE  (r4 I:mil.nga.wkb.geom.Point) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRightPoint():mil.nga.wkb.geom.Point type: VIRTUAL \l0x0044: INVOKE  (r4 I:double) = \l  (r7 I:mil.nga.wkb.util.sweep.Segment)\l  (r4 I:mil.nga.wkb.geom.Point)\l mil.nga.wkb.util.sweep.SweepLine.isLeft(mil.nga.wkb.util.sweep.Segment, mil.nga.wkb.geom.Point):double type: STATIC \l0x0048: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x004a: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x004c: CMP_G  (r2 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:21:0x0067 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|0x0050: INVOKE  (r2 I:mil.nga.wkb.geom.Point) = (r7 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getLeftPoint():mil.nga.wkb.geom.Point type: VIRTUAL \l0x0054: INVOKE  (r2 I:double) = \l  (r8 I:mil.nga.wkb.util.sweep.Segment)\l  (r2 I:mil.nga.wkb.geom.Point)\l mil.nga.wkb.util.sweep.SweepLine.isLeft(mil.nga.wkb.util.sweep.Segment, mil.nga.wkb.geom.Point):double type: STATIC \l0x0058: INVOKE  (r7 I:mil.nga.wkb.geom.Point) = (r7 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRightPoint():mil.nga.wkb.geom.Point type: VIRTUAL \l0x005c: INVOKE  (r7 I:double) = \l  (r8 I:mil.nga.wkb.util.sweep.Segment)\l  (r7 I:mil.nga.wkb.geom.Point)\l mil.nga.wkb.util.sweep.SweepLine.isLeft(mil.nga.wkb.util.sweep.Segment, mil.nga.wkb.geom.Point):double type: STATIC \l0x0060: ARITH  (r2 I:double) = (r2 I:double) * (r7 I:double) \l0x0062: CMP_G  (r7 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|0x0064: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:21:0x0067 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0067|0x0067: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean mil.nga.wkb.util.sweep.SweepLine.intersect((r6 'this' I:mil.nga.wkb.util.sweep.SweepLine A[IMMUTABLE_TYPE, THIS]), (r7 I:mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
}

