digraph "CFG formil.nga.wkb.util.sweep.SweepLine.SegmentComparator.compare(Lmil\/nga\/wkb\/util\/sweep\/Segment;Lmil\/nga\/wkb\/util\/sweep\/Segment;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:mil.nga.wkb.util.sweep.SweepLine) = (r7 I:mil.nga.wkb.util.sweep.SweepLine$SegmentComparator) mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.this$0 mil.nga.wkb.util.sweep.SweepLine \l0x0002: IGET  (r1 I:double) = (r7 I:mil.nga.wkb.util.sweep.SweepLine$SegmentComparator) mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.x double \l0x0004: INVOKE  (r0 I:double) = \l  (r0 I:mil.nga.wkb.util.sweep.SweepLine)\l  (r8 I:mil.nga.wkb.util.sweep.Segment)\l  (r1 I:double)\l mil.nga.wkb.util.sweep.SweepLine.access$000(mil.nga.wkb.util.sweep.SweepLine, mil.nga.wkb.util.sweep.Segment, double):double type: STATIC \l0x0008: IGET  (r2 I:mil.nga.wkb.util.sweep.SweepLine) = (r7 I:mil.nga.wkb.util.sweep.SweepLine$SegmentComparator) mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.this$0 mil.nga.wkb.util.sweep.SweepLine \l0x000a: IGET  (r3 I:double) = (r7 I:mil.nga.wkb.util.sweep.SweepLine$SegmentComparator) mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.x double \l0x000c: INVOKE  (r2 I:double) = \l  (r2 I:mil.nga.wkb.util.sweep.SweepLine)\l  (r9 I:mil.nga.wkb.util.sweep.Segment)\l  (r3 I:double)\l mil.nga.wkb.util.sweep.SweepLine.access$000(mil.nga.wkb.util.sweep.SweepLine, mil.nga.wkb.util.sweep.Segment, double):double type: STATIC \l0x0010: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0012: CMP_G  (r6 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: CMP_G  (r0 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: INVOKE  (r0 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l0x0021: INVOKE  (r1 I:int) = (r9 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: INVOKE  (r0 I:int) = (r9 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l0x002c: INVOKE  (r1 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getRing():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: INVOKE  (r0 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l0x0037: INVOKE  (r1 I:int) = (r9 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x003e \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: INVOKE  (r9 I:int) = (r9 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l0x0042: INVOKE  (r8 I:int) = (r8 I:mil.nga.wkb.util.sweep.Segment) mil.nga.wkb.util.sweep.Segment.getEdge():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r9 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:18:0x0049 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public int mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.compare((r7 'this' I:mil.nga.wkb.util.sweep.SweepLine$SegmentComparator A[IMMUTABLE_TYPE, THIS]), (r8 I:mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_19[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_2[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_19[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_2[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_19;
}

