digraph "CFG formil.nga.wkb.util.sweep.SweepLine.SegmentComparator.compare(Lmil\/nga\/wkb\/util\/sweep\/Segment;Lmil\/nga\/wkb\/util\/sweep\/Segment;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = mil.nga.wkb.util.sweep.SweepLine.access$000(r7.this$0, r8, r7.f259x)\ldouble r2 = mil.nga.wkb.util.sweep.SweepLine.access$000(r7.this$0, r9, r7.f259x)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if ((r0 \> r2 ? 1 : (r0 == r2 ? 0 : \-1)) \>= 0) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|SYNTHETIC\lRETURN\l|return \-1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018}"];
Node_4 [shape=record,label="{4\:\ 0x001a|if ((r2 \> r0 ? 1 : (r2 == r0 ? 0 : \-1)) \>= 0) goto L_0x001d\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d}"];
Node_6 [shape=record,label="{6\:\ 0x0025|if (r8.getRing() \>= r9.getRing()) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (r9.getRing() \>= r8.getRing()) goto L_0x0033\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033}"];
Node_10 [shape=record,label="{10\:\ 0x003b|if (r8.getEdge() \>= r9.getEdge()) goto L_0x003e\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e}"];
Node_12 [shape=record,label="{12\:\ 0x0046|if (r9.getEdge() \>= r8.getEdge()) goto L_0x0049\l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
MethodNode[shape=record,label="{public int mil.nga.wkb.util.sweep.SweepLine.SegmentComparator.compare((r7v0 'this' mil.nga.wkb.util.sweep.SweepLine$SegmentComparator A[IMMUTABLE_TYPE, THIS]), (r8v0 mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 mil.nga.wkb.util.sweep.Segment A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_14[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_2[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_15[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_2[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
}

