digraph "CFG formil.nga.wkb.io.WkbGeometryReader.readGeometry(Lmil\/nga\/wkb\/io\/ByteReader;Ljava\/lang\/Class;)Lmil\/nga\/wkb\/geom\/Geometry;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r6.readByte() != 0) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.nio.ByteOrder r0 = java.nio.ByteOrder.BIG_ENDIAN\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|java.nio.ByteOrder r0 = java.nio.ByteOrder.LITTLE_ENDIAN\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r0 \l  PHI: (r0v1 java.nio.ByteOrder) = (r0v29 java.nio.ByteOrder), (r0v30 java.nio.ByteOrder) binds: [B:3:0x0009, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|java.nio.ByteOrder r1 = r6.getByteOrder()\lr6.setByteOrder(r0)\lint r0 = r6.readInt()\lint r2 = r0 % 1000\lr3 = false\lr4 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|switch((r0 \/ 1000)) \{\l    case 0: goto L_0x0023;\l    case 1: goto L_0x0022;\l    case 2: goto L_0x0024;\l    case 3: goto L_0x0020;\l    default: goto L_0x001f;\l\}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|r3 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|r3 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v0 boolean), (r3v3 boolean) binds: [B:5:0x001c, B:7:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|r4 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|PHI: r3 r4 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean), (r3v4 boolean) binds: [B:5:0x001c, B:8:0x0023, B:6:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean), (r4v0 boolean) binds: [B:5:0x001c, B:8:0x0023, B:6:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|mil.nga.wkb.geom.GeometryType r0 = mil.nga.wkb.geom.GeometryType.fromCode(r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|switch(r0) \{\l    case mil.nga.wkb.geom.GeometryType.GEOMETRY :mil.nga.wkb.geom.GeometryType: goto L_0x014b;\l    case mil.nga.wkb.geom.GeometryType.POINT :mil.nga.wkb.geom.GeometryType: goto L_0x0109;\l    case mil.nga.wkb.geom.GeometryType.LINESTRING :mil.nga.wkb.geom.GeometryType: goto L_0x0104;\l    case mil.nga.wkb.geom.GeometryType.POLYGON :mil.nga.wkb.geom.GeometryType: goto L_0x00ff;\l    case mil.nga.wkb.geom.GeometryType.MULTIPOINT :mil.nga.wkb.geom.GeometryType: goto L_0x00fa;\l    case mil.nga.wkb.geom.GeometryType.MULTILINESTRING :mil.nga.wkb.geom.GeometryType: goto L_0x00f5;\l    case mil.nga.wkb.geom.GeometryType.MULTIPOLYGON :mil.nga.wkb.geom.GeometryType: goto L_0x00f0;\l    case mil.nga.wkb.geom.GeometryType.GEOMETRYCOLLECTION :mil.nga.wkb.geom.GeometryType: goto L_0x00eb;\l    case mil.nga.wkb.geom.GeometryType.CIRCULARSTRING :mil.nga.wkb.geom.GeometryType: goto L_0x00e6;\l    case mil.nga.wkb.geom.GeometryType.COMPOUNDCURVE :mil.nga.wkb.geom.GeometryType: goto L_0x00e1;\l    case mil.nga.wkb.geom.GeometryType.CURVEPOLYGON :mil.nga.wkb.geom.GeometryType: goto L_0x00dc;\l    case mil.nga.wkb.geom.GeometryType.MULTICURVE :mil.nga.wkb.geom.GeometryType: goto L_0x00bc;\l    case mil.nga.wkb.geom.GeometryType.MULTISURFACE :mil.nga.wkb.geom.GeometryType: goto L_0x009c;\l    case mil.nga.wkb.geom.GeometryType.CURVE :mil.nga.wkb.geom.GeometryType: goto L_0x007c;\l    case mil.nga.wkb.geom.GeometryType.SURFACE :mil.nga.wkb.geom.GeometryType: goto L_0x005c;\l    case mil.nga.wkb.geom.GeometryType.POLYHEDRALSURFACE :mil.nga.wkb.geom.GeometryType: goto L_0x0056;\l    case mil.nga.wkb.geom.GeometryType.TIN :mil.nga.wkb.geom.GeometryType: goto L_0x0050;\l    case mil.nga.wkb.geom.GeometryType.TRIANGLE :mil.nga.wkb.geom.GeometryType: goto L_0x004a;\l    default: goto L_0x0033;\l\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Geometry Type not supported: \")\lr7.append(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|mil.nga.wkb.geom.Triangle r0 = readTriangle(r6, r3, r4)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|mil.nga.wkb.geom.TIN r0 = readTIN(r6, r3, r4)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|mil.nga.wkb.geom.PolyhedralSurface r0 = readPolyhedralSurface(r6, r3, r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Unexpected Geometry Type of \")\lr7.append(r0.name())\lr7.append(\" which is abstract\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x007b|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x007c|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Unexpected Geometry Type of \")\lr7.append(r0.name())\lr7.append(\" which is abstract\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x009b|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
Node_20 [shape=record,label="{20\:\ 0x009c|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Unexpected Geometry Type of \")\lr7.append(r0.name())\lr7.append(\" which is abstract\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x00bb|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x00bc|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Unexpected Geometry Type of \")\lr7.append(r0.name())\lr7.append(\" which is abstract\")\l}"];
Node_23 [shape=record,label="{23\:\ 0x00db|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
Node_24 [shape=record,label="{24\:\ 0x00dc|mil.nga.wkb.geom.CurvePolygon r0 = readCurvePolygon(r6, r3, r4)\l}"];
Node_25 [shape=record,label="{25\:\ 0x00e1|mil.nga.wkb.geom.CompoundCurve r0 = readCompoundCurve(r6, r3, r4)\l}"];
Node_26 [shape=record,label="{26\:\ 0x00e6|mil.nga.wkb.geom.CircularString r0 = readCircularString(r6, r3, r4)\l}"];
Node_27 [shape=record,label="{27\:\ 0x00eb|mil.nga.wkb.geom.GeometryCollection r0 = readGeometryCollection(r6, r3, r4)\l}"];
Node_28 [shape=record,label="{28\:\ 0x00f0|mil.nga.wkb.geom.MultiPolygon r0 = readMultiPolygon(r6, r3, r4)\l}"];
Node_29 [shape=record,label="{29\:\ 0x00f5|mil.nga.wkb.geom.MultiLineString r0 = readMultiLineString(r6, r3, r4)\l}"];
Node_30 [shape=record,label="{30\:\ 0x00fa|mil.nga.wkb.geom.MultiPoint r0 = readMultiPoint(r6, r3, r4)\l}"];
Node_31 [shape=record,label="{31\:\ 0x00ff|mil.nga.wkb.geom.Polygon r0 = readPolygon(r6, r3, r4)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0104|mil.nga.wkb.geom.LineString r0 = readLineString(r6, r3, r4)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0109|mil.nga.wkb.geom.Point r0 = readPoint(r6, r3, r4)\l}"];
Node_34 [shape=record,label="{34\:\ 0x010d|PHI: r0 \l  PHI: (r0v7 T) = (r0v8 T), (r0v9 T), (r0v10 T), (r0v11 T), (r0v12 T), (r0v13 T), (r0v14 T), (r0v15 T), (r0v16 T), (r0v17 T), (r0v26 T), (r0v27 T), (r0v28 T) binds: [B:33:0x0109, B:32:0x0104, B:31:0x00ff, B:30:0x00fa, B:29:0x00f5, B:28:0x00f0, B:27:0x00eb, B:26:0x00e6, B:25:0x00e1, B:24:0x00dc, B:15:0x0056, B:14:0x0050, B:13:0x004a] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == null) goto L_0x0147\l}"];
Node_35 [shape=record,label="{35\:\ 0x010f|if (r0 == null) goto L_0x0147\l}"];
Node_36 [shape=record,label="{36\:\ 0x0111}"];
Node_37 [shape=record,label="{37\:\ 0x0119|if (r7.isAssignableFrom(r0.getClass()) == false) goto L_0x011c\l}"];
Node_38 [shape=record,label="{38\:\ 0x011c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unexpected Geometry Type. Expected: \")\lr1.append(r7.getSimpleName())\lr1.append(\", Actual: \")\lr1.append(r0.getClass().getSimpleName())\l}"];
Node_39 [shape=record,label="{39\:\ 0x0146|throw new mil.nga.wkb.util.WkbException(r1.toString())\l}"];
Node_40 [shape=record,label="{40\:\ 0x0147|r6.setByteOrder(r1)\l}"];
Node_41 [shape=record,label="{41\:\ 0x014a|RETURN\l|return r0\l}"];
Node_42 [shape=record,label="{42\:\ 0x014b|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Unexpected Geometry Type of \")\lr7.append(r0.name())\lr7.append(\" which is abstract\")\l}"];
Node_43 [shape=record,label="{43\:\ 0x016a|throw new mil.nga.wkb.util.WkbException(r7.toString())\l}"];
MethodNode[shape=record,label="{public static T mil.nga.wkb.io.WkbGeometryReader.readGeometry((r6v0 mil.nga.wkb.io.ByteReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Lmil\/nga\/wkb\/geom\/Geometry;, \>(, Lmil\/nga\/wkb\/io\/ByteReader;, Ljava\/lang\/Class\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_10 -> Node_14;
Node_10 -> Node_15;
Node_10 -> Node_16;
Node_10 -> Node_18;
Node_10 -> Node_20;
Node_10 -> Node_22;
Node_10 -> Node_24;
Node_10 -> Node_25;
Node_10 -> Node_26;
Node_10 -> Node_27;
Node_10 -> Node_28;
Node_10 -> Node_29;
Node_10 -> Node_30;
Node_10 -> Node_31;
Node_10 -> Node_32;
Node_10 -> Node_33;
Node_10 -> Node_42;
Node_11 -> Node_12;
Node_13 -> Node_34;
Node_14 -> Node_34;
Node_15 -> Node_34;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_34;
Node_25 -> Node_34;
Node_26 -> Node_34;
Node_27 -> Node_34;
Node_28 -> Node_34;
Node_29 -> Node_34;
Node_30 -> Node_34;
Node_31 -> Node_34;
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_40[style=dashed];
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_42 -> Node_43;
}

