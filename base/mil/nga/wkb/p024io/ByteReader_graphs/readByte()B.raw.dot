digraph "CFG formil.nga.wkb.io.ByteReader.readByte()B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  (r3 I:mil.nga.wkb.io.ByteReader), (r0 I:int) mil.nga.wkb.io.ByteReader.verifyRemainingBytes(int):void type: DIRECT \l0x0004: IGET  (r1 I:byte[]) = (r3 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.bytes byte[] \l0x0006: IGET  (r2 I:int) = (r3 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.nextByte int \l0x0008: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x000a: IGET  (r2 I:int) = (r3 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.nextByte int \l0x000c: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x000d: IPUT  (r2 I:int), (r3 I:mil.nga.wkb.io.ByteReader) mil.nga.wkb.io.ByteReader.nextByte int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN  (r1 I:byte) \l}"];
MethodNode[shape=record,label="{public byte mil.nga.wkb.io.ByteReader.readByte((r3 'this' I:mil.nga.wkb.io.ByteReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

