digraph "CFG formil.nga.wkb.io.WkbGeometryWriter.writePolygon(Lmil\/nga\/wkb\/io\/ByteWriter;Lmil\/nga\/wkb\/geom\/Polygon;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:mil.nga.wkb.geom.Polygon) mil.nga.wkb.geom.Polygon.numRings():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:mil.nga.wkb.io.ByteWriter), (r0 I:int) mil.nga.wkb.io.ByteWriter.writeInt(int):void type: VIRTUAL \l0x0007: INVOKE  (r2 I:java.util.List) = (r2 I:mil.nga.wkb.geom.Polygon) mil.nga.wkb.geom.Polygon.getRings():java.util.List type: VIRTUAL \l0x000b: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r0 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r0 I:mil.nga.wkb.geom.LineString) = (mil.nga.wkb.geom.LineString) (r0 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  \l  (r1 I:mil.nga.wkb.io.ByteWriter)\l  (r0 I:mil.nga.wkb.geom.LineString)\l mil.nga.wkb.io.WkbGeometryWriter.writeLineString(mil.nga.wkb.io.ByteWriter, mil.nga.wkb.geom.LineString):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public static void mil.nga.wkb.io.WkbGeometryWriter.writePolygon((r1 I:mil.nga.wkb.io.ByteWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:mil.nga.wkb.geom.Polygon A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

