digraph "CFG formil.nga.wkb.io.WkbGeometryWriter.writeGeometryCollection(Lmil\/nga\/wkb\/io\/ByteWriter;Lmil\/nga\/wkb\/geom\/GeometryCollection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.writeInt(r2.numGeometries())\ljava.util.Iterator r2 = r2.getGeometries().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lLOOP:0: B:1:0x000f\-\>B:3:0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r2.hasNext() == false) goto L_0x001f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:3:0x0015\l|writeGeometry(r1, (mil.nga.wkb.geom.Geometry) r2.next())\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void mil.nga.wkb.io.WkbGeometryWriter.writeGeometryCollection((r1v0 mil.nga.wkb.io.ByteWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 mil.nga.wkb.geom.GeometryCollection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lmil\/nga\/wkb\/io\/ByteWriter;, Lmil\/nga\/wkb\/geom\/GeometryCollection\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

