digraph "CFG forokhttp3.Headers.values(Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:java.lang.String) = (r4 I:okhttp3.Headers), (r2 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x000c: INVOKE  (r3 I:boolean) = (r5 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r1 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: INVOKE  (r3 I:java.lang.String) = (r4 I:okhttp3.Headers), (r2 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x001e: INVOKE  (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: INVOKE  (r5 I:java.util.List) = (r1 I:java.util.List) java.util.Collections.unmodifiableList(java.util.List):java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: INVOKE  (r5 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN  (r5 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public java.util.List\<java.lang.String\> okhttp3.Headers.values((r4 'this' I:okhttp3.Headers A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
}

