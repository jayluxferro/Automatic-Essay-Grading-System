digraph "CFG forokhttp3.Headers.get([Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_2000700369 {
label = "R(3:0|(1:(2:(1:5)|(1:6)))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r2.length \- 2\l}"];
subgraph cluster_LoopRegion_546361293 {
label = "LOOP:0: (1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v4 int) binds: [B:0:0x0000, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:6:0x0012\l|if (r0 \>= 0) goto L_0x0005\l}"];
subgraph cluster_Region_326024546 {
label = "R(1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1838408783 {
label = "R(2:(1:5)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_720458904 {
label = "IF [B:3:0x000b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r3.equalsIgnoreCase(r2[r0]) == true) goto L_0x000d\l}"];
subgraph cluster_Region_1608172764 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\l|return r2[r0 + 1]\l}"];
}
}
subgraph cluster_Region_82009898 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:6:0x0012\l|r0 \-= 2\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return null\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.String okhttp3.Headers.get((r2v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_6[style=dashed];
Node_3 -> Node_9;
Node_6 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_8 -> Node_7;
Node_9 -> Node_4;
}

