digraph "CFG forokhttp3.Headers.byteCount()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String[]) = (r6 I:okhttp3.Headers) okhttp3.Headers.namesAndValues java.lang.String[] \l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0005: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0006: IGET  (r2 I:java.lang.String[]) = (r6 I:okhttp3.Headers) okhttp3.Headers.namesAndValues java.lang.String[] \l0x0008: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r4 I:java.lang.String[]) = (r6 I:okhttp3.Headers) okhttp3.Headers.namesAndValues java.lang.String[] \l0x000e: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0010: INVOKE  (r4 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0014: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0015: ARITH  (r0 I:long) = (r0 I:long) + (r4 I:long) \l0x0016: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long okhttp3.Headers.byteCount((r6 'this' I:okhttp3.Headers A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

