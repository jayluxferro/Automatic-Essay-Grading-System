digraph "CFG forokhttp3.Headers.of([Ljava\/lang\/String;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0076 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x006e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x000b: CHECK_CAST  (r6 I:java.lang.String[]) = (java.lang.String[]) (r6 I:?[OBJECT, ARRAY]) \l0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARRAY_LENGTH  (r2 I:int) = (r6 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: AGET  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: AGET  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0018: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x001c: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x001e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"Headers cannot be null\" \l0x0025: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: ARRAY_LENGTH  (r2 I:int) = (r6 I:?[]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:23:0x0068 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x002f: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x0031: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0033: INVOKE  (r4 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: INVOKE  (r4 I:int) = (r2 I:java.lang.String), (r0 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x003d: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: INVOKE  (r4 I:int) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004b: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004d: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0050: CONST_STR  (r1 I:java.lang.String) =  \"Unexpected header: \" \l0x0052: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: CONST_STR  (r1 I:java.lang.String) =  \": \" \l0x005a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005d: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0064: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0067|0x0067: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|0x0068: NEW_INSTANCE  (r0 I:okhttp3.Headers) =  okhttp3.Headers \l0x006a: INVOKE  (r0 I:okhttp3.Headers), (r6 I:java.lang.String[]) okhttp3.Headers.\<init\>(java.lang.String[]):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x006d|0x006d: RETURN  (r0 I:okhttp3.Headers) \l}"];
Node_25 [shape=record,label="{25\:\ 0x006e|0x006e: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0070: CONST_STR  (r0 I:java.lang.String) =  \"Expected alternating header names and values\" \l0x0072: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0075|0x0075: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0076|0x0076: NEW_INSTANCE  (r6 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0078: CONST_STR  (r0 I:java.lang.String) =  \"namesAndValues == null\" \l0x007a: INVOKE  \l  (r6 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x007d|0x007d: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Headers okhttp3.Headers.of((r6 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_27;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_12;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
}

