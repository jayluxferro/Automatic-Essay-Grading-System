digraph "CFG forokhttp3.Headers.of(Ljava\/util\/Map;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0089 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r7 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l0x0006: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0008: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x000a: INVOKE  (r7 I:java.util.Set) = (r7 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x000e: INVOKE  (r7 I:java.util.Iterator) = (r7 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: INVOKE  (r3 I:boolean) = (r7 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0083 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: INVOKE  (r3 I:java.lang.Object) = (r7 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r3 I:java.util.Map$Entry) = (java.util.Map$Entry) (r3 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x007b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x007b \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0030: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x003a: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x003c: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0040: INVOKE  (r5 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: INVOKE  (r5 I:int) = (r4 I:java.lang.String), (r1 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x004a: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005c \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: INVOKE  (r5 I:int) = (r3 I:java.lang.String), (r1 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0055: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x0057: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0059: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005c|0x005c: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0060: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0063: CONST_STR  (r1 I:java.lang.String) =  \"Unexpected header: \" \l0x0065: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0068: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: CONST_STR  (r1 I:java.lang.String) =  \": \" \l0x006d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0070: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0077: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x007a|0x007a: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x007b|0x007b: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007d: CONST_STR  (r0 I:java.lang.String) =  \"Headers cannot be null\" \l0x007f: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0082|0x0082: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0083|0x0083: NEW_INSTANCE  (r7 I:okhttp3.Headers) =  okhttp3.Headers \l0x0085: INVOKE  (r7 I:okhttp3.Headers), (r0 I:java.lang.String[]) okhttp3.Headers.\<init\>(java.lang.String[]):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0088|0x0088: RETURN  (r7 I:okhttp3.Headers) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0089|0x0089: NEW_INSTANCE  (r7 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x008b: CONST_STR  (r0 I:java.lang.String) =  \"headers == null\" \l0x008d: INVOKE  \l  (r7 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0090|0x0090: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Headers okhttp3.Headers.of((r7 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Lokhttp3\/Headers;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_21;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_2;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

