digraph "CFG forokhttp3.internal.publicsuffix.PublicSuffixDatabase.readTheList()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<okhttp3.internal.publicsuffix.PublicSuffixDatabase\>) =  okhttp3.internal.publicsuffix.PublicSuffixDatabase.class \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"publicsuffixes.gz\" \l0x0004: INVOKE  (r0 I:java.io.InputStream) = (r0 I:java.lang.Class), (r1 I:java.lang.String) java.lang.Class.getResourceAsStream(java.lang.String):java.io.InputStream type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:okio.GzipSource) =  okio.GzipSource \l0x000d: INVOKE  (r0 I:okio.Source) = (r0 I:java.io.InputStream) okio.Okio.source(java.io.InputStream):okio.Source type: STATIC \l0x0011: INVOKE  (r1 I:okio.GzipSource), (r0 I:okio.Source) okio.GzipSource.\<init\>(okio.Source):void type: DIRECT \l0x0014: INVOKE  (r0 I:okio.BufferedSource) = (r1 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|SYNTHETIC\lSplitter:B:4:0x0018\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0018\l|0x0018: INVOKE  (r1 I:int) = (r0 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE A[Catch:\{ all \-\> 0x003c \}, TRY_ENTER]\l0x001c: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x003c \}]\l0x001e: INVOKE  (r0 I:okio.BufferedSource), (r1 I:byte[]) okio.BufferedSource.readFully(byte[]):void type: INTERFACE A[Catch:\{ all \-\> 0x003c \}]\l0x0021: INVOKE  (r2 I:int) = (r0 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE A[Catch:\{ all \-\> 0x003c \}]\l0x0025: NEW_ARRAY  (r2 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x003c \}]\l0x0027: INVOKE  (r0 I:okio.BufferedSource), (r2 I:byte[]) okio.BufferedSource.readFully(byte[]):void type: INTERFACE A[Catch:\{ all \-\> 0x003c \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: INVOKE  (r0 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|SYNTHETIC\lSplitter:B:8:0x002e\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x002e\l|0x002e: IPUT  \l  (r1 I:byte[])\l  (r3 I:okhttp3.internal.publicsuffix.PublicSuffixDatabase)\l okhttp3.internal.publicsuffix.PublicSuffixDatabase.publicSuffixListBytes byte[] A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER]\l0x0030: IPUT  \l  (r2 I:byte[])\l  (r3 I:okhttp3.internal.publicsuffix.PublicSuffixDatabase)\l okhttp3.internal.publicsuffix.PublicSuffixDatabase.publicSuffixExceptionListBytes byte[] A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IGET  (r0 I:java.util.concurrent.CountDownLatch) = (r3 I:okhttp3.internal.publicsuffix.PublicSuffixDatabase) okhttp3.internal.publicsuffix.PublicSuffixDatabase.readCompleteLatch java.util.concurrent.CountDownLatch \l0x0035: INVOKE  (r0 I:java.util.concurrent.CountDownLatch) java.util.concurrent.CountDownLatch.countDown():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|ExcHandler: all null\lSplitter:B:8:0x002e\l|0x0039: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|SYNTHETIC\lSplitter:B:14:0x003a\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x003a\l|0x003a: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|ExcHandler: all null\lSplitter:B:4:0x0018\l|0x003c: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: INVOKE  (r0 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.publicsuffix.PublicSuffixDatabase.readTheList((r3 'this' I:okhttp3.internal.publicsuffix.PublicSuffixDatabase A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16;
Node_15 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

