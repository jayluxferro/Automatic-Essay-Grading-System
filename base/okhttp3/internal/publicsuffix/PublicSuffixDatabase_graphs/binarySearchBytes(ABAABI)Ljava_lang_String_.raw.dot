digraph "CFG forokhttp3.internal.publicsuffix.PublicSuffixDatabase.binarySearchBytes([B[[BI)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:42:0x0089 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: ARITH  (r5 I:int) = (r2 I:int) + (r4 I:int) \l0x000c: ARITH  (r5 I:int) = (r5 I:int) \/ (2 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r6 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0010: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r5 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x001c: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001d: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: ARITH  (r10 I:int) = (r5 I:int) + (r9 I:int) \l0x0020: AGET  (r11 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: ARITH  (r6 I:int) = (r10 I:int) \- (r5 I:int) \l0x0029: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: CONST  (r9 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0032: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: CONST  (r14 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: AGET  (r14 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l \l0x0038: AGET  (r14 I:byte A[IMMUTABLE_TYPE]) = \l  (r14 I:byte[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l \l0x003a: ARITH  (r14 I:?[int, boolean, short, byte, char]) = (r14 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: ARITH  (r15 I:int) = (r5 I:int) + (r13 I:int) \l0x003e: AGET  (r15 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r15 I:?[int, short, byte, char])\l \l0x0040: ARITH  (r15 I:?[int, boolean, short, byte, char]) = (r15 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0042: ARITH  (r14 I:int) = (r14 I:int) \- (r15 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0046 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: ARITH  (r13 I:int) = (r13 I:int) + (1 int) \l0x0048: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x004d \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: AGET  (r15 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l \l0x004f: ARRAY_LENGTH  (r15 I:int) = (r15 I:?[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002e \l}"];
Node_24 [shape=record,label="{24\:\ 0x0052|0x0052: ARRAY_LENGTH  (r9 I:int) = (r1 I:?[]) \l0x0053: ARITH  (r9 I:int) = (r9 I:int) \- (r8 I:int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|0x0054: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0084 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0056|0x0056: IF  (r14 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:29:0x005c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|0x0058: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|0x005a: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x005c|0x005c: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:32:0x0062 \l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|0x005e: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0060|0x0060: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0062|0x0062: ARITH  (r7 I:int) = (r6 I:int) \- (r13 I:int) \l0x0064: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l \l0x0066: ARRAY_LENGTH  (r8 I:int) = (r8 I:?[]) \l0x0067: ARITH  (r8 I:int) = (r8 I:int) \- (r12 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|0x0068: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l0x006a: ARRAY_LENGTH  (r9 I:int) = (r1 I:?[]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x006b|0x006b: IF  (r11 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:36:0x0072 \l}"];
Node_35 [shape=record,label="{35\:\ 0x006d|0x006d: AGET  (r9 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l \l0x006f: ARRAY_LENGTH  (r9 I:int) = (r9 I:?[]) \l0x0070: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0072|0x0072: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:38:0x0077 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0074|0x0074: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0077|0x0077: IF  (r8 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:40:0x007c \l}"];
Node_39 [shape=record,label="{39\:\ 0x0079|0x0079: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_40 [shape=record,label="{40\:\ 0x007c|0x007c: NEW_INSTANCE  (r1 I:java.lang.String) =  java.lang.String \l0x007e: SGET  (r2 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l0x0080: INVOKE  \l  (r1 I:java.lang.String)\l  (r0 I:byte[])\l  (r5 I:int)\l  (r6 I:int)\l  (r2 I:java.nio.charset.Charset)\l java.lang.String.\<init\>(byte[], int, int, java.nio.charset.Charset):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x0084|0x0084: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l0x0086: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0087: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0089|0x0089: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x008a|0x008a: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String okhttp3.internal.publicsuffix.PublicSuffixDatabase.binarySearchBytes((r16 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:byte[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_42;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_26[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_26[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_41;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_1;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_1;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_33;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_28;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_31;
Node_40 -> Node_43;
Node_41 -> Node_13;
Node_42 -> Node_43;
}

