digraph "CFG forokhttp3.internal.publicsuffix.PublicSuffixDatabase.getEffectiveTldPlusOne(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005b \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:java.lang.String) = (r7 I:java.lang.String) java.net.IDN.toUnicode(java.lang.String):java.lang.String type: STATIC \l0x0006: CONST_STR  (r1 I:java.lang.String) =  \".\" \l0x0008: INVOKE  (r0 I:java.lang.String[]) = (r0 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x000c: INVOKE  (r1 I:java.lang.String[]) = \l  (r6 I:okhttp3.internal.publicsuffix.PublicSuffixDatabase)\l  (r0 I:java.lang.String[])\l okhttp3.internal.publicsuffix.PublicSuffixDatabase.findMatchingRule(java.lang.String[]):java.lang.String[] type: DIRECT \l0x0010: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0011: ARRAY_LENGTH  (r3 I:int) = (r1 I:?[]) \l0x0012: CONST  (r4 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l0x0014: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: AGET  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0019: INVOKE  (r2 I:char) = (r2 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN  (r7 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: AGET  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0023: INVOKE  (r2 I:char) = (r2 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x002a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x002b: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x002e: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x002f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0031: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0034: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0037: CONST_STR  (r2 I:java.lang.String) =  \".\" \l0x0039: INVOKE  (r7 I:java.lang.String[]) = (r7 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: ARRAY_LENGTH  (r2 I:int) = (r7 I:?[]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:15:0x004d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: AGET  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: CONST  (r2 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0047: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x004a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|0x004d: INVOKE  (r7 I:int) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.length():int type: VIRTUAL \l0x0051: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l0x0053: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.deleteCharAt(int):java.lang.StringBuilder type: VIRTUAL \l0x0056: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|0x005a: RETURN  (r7 I:java.lang.String) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: NEW_INSTANCE  (r7 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x005d: CONST_STR  (r0 I:java.lang.String) =  \"domain == null\" \l0x005f: INVOKE  \l  (r7 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0062|0x0062: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.publicsuffix.PublicSuffixDatabase.getEffectiveTldPlusOne((r6 'this' I:okhttp3.internal.publicsuffix.PublicSuffixDatabase A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_17;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

