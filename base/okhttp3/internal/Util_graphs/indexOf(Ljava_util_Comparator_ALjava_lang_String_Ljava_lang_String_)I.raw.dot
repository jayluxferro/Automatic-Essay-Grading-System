digraph "CFG forokhttp3.internal.Util.indexOf(Ljava\/util\/Comparator;[Ljava\/lang\/String;Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0006: INVOKE  (r2 I:int) = \l  (r3 I:java.util.Comparator)\l  (r2 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.Comparator.compare(java.lang.Object, java.lang.Object):int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.Util.indexOf((r3 I:java.util.Comparator\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Comparator\<, Ljava\/lang\/String;, \>;[, Ljava\/lang\/String;, Ljava\/lang\/String;, )I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

