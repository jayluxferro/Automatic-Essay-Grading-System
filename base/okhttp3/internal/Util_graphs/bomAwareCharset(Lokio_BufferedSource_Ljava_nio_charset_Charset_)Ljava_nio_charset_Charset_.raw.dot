digraph "CFG forokhttp3.internal.Util.bomAwareCharset(Lokio\/BufferedSource;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/charset\/Charset;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.Util.UTF_8_BOM okio.ByteString \l0x0002: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0004: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.Util.UTF_8_BOM okio.ByteString \l0x000c: INVOKE  (r4 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0010: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0011: INVOKE  (r3 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0014: SGET  (r3 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN  (r3 I:java.nio.charset.Charset) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.Util.UTF_16_BE_BOM okio.ByteString \l0x0019: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.Util.UTF_16_BE_BOM okio.ByteString \l0x0021: INVOKE  (r4 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0025: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0026: INVOKE  (r3 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0029: SGET  (r3 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_16_BE java.nio.charset.Charset \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: RETURN  (r3 I:java.nio.charset.Charset) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.Util.UTF_16_LE_BOM okio.ByteString \l0x002e: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.Util.UTF_16_LE_BOM okio.ByteString \l0x0036: INVOKE  (r4 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x003a: CAST  (r0 I:long) = (long) (r4 I:int) \l0x003b: INVOKE  (r3 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x003e: SGET  (r3 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_16_LE java.nio.charset.Charset \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: RETURN  (r3 I:java.nio.charset.Charset) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.Util.UTF_32_BE_BOM okio.ByteString \l0x0043: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.Util.UTF_32_BE_BOM okio.ByteString \l0x004b: INVOKE  (r4 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x004f: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0050: INVOKE  (r3 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0053: SGET  (r3 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_32_BE java.nio.charset.Charset \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: RETURN  (r3 I:java.nio.charset.Charset) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.Util.UTF_32_LE_BOM okio.ByteString \l0x0058: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x005c|0x005c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006b \l}"];
Node_18 [shape=record,label="{18\:\ 0x005e|0x005e: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.Util.UTF_32_LE_BOM okio.ByteString \l0x0060: INVOKE  (r4 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0064: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0065: INVOKE  (r3 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0068: SGET  (r3 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_32_LE java.nio.charset.Charset \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: RETURN  (r3 I:java.nio.charset.Charset) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|0x006b: RETURN  (r4 I:java.nio.charset.Charset) \l}"];
MethodNode[shape=record,label="{public static java.nio.charset.Charset okhttp3.internal.Util.bomAwareCharset((r3 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
}

