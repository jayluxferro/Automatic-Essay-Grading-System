digraph "CFG forokhttp3.internal.Util.isAndroidGetsocknameError(Ljava\/lang\/AssertionError;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Throwable) = (r1 I:java.lang.AssertionError) java.lang.AssertionError.getCause():java.lang.Throwable type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.AssertionError) java.lang.AssertionError.getMessage():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.AssertionError) java.lang.AssertionError.getMessage():java.lang.String type: VIRTUAL \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"getsockname failed\" \l0x0012: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean okhttp3.internal.Util.isAndroidGetsocknameError((r1 I:java.lang.AssertionError A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

