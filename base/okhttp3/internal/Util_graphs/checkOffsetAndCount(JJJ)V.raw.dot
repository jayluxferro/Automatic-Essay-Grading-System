digraph "CFG forokhttp3.internal.Util.checkOffsetAndCount(JJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:long) = (r6 I:long) \| (r8 I:long) \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CMP_L  (r0 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r4 I:long) = (r4 I:long) \- (r6 I:long) \l0x000d: CMP_L  (r4 I:int) = (r4 I:long), (r8 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: NEW_INSTANCE  (r4 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x0014: INVOKE  (r4 I:java.lang.ArrayIndexOutOfBoundsException) java.lang.ArrayIndexOutOfBoundsException.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void okhttp3.internal.Util.checkOffsetAndCount((r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
}

