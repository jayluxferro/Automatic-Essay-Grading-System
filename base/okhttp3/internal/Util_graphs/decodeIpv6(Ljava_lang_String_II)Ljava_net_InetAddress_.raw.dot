digraph "CFG forokhttp3.internal.Util.decodeIpv6(Ljava\/lang\/String;II)Ljava\/net\/InetAddress;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:41:0x007c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: ARRAY_LENGTH  (r7 I:int) = (r0 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: ARITH  (r7 I:int) = (r11 I:int) + (2 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r7 I:?[int, byte, short, char]) \> (r12 I:?[int, byte, short, char])  \-\> B:16:0x0029 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: CONST_STR  (r8 I:java.lang.String) =  \"::\" \l0x0016: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r8 I:boolean) = \l  (r10 I:java.lang.String)\l  (r11 I:int)\l  (r8 I:java.lang.String)\l  (r2 I:int)\l  (r9 I:int)\l java.lang.String.regionMatches(int, java.lang.String, int, int):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0029 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c \l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|0x002b: CONST_STR  (r7 I:java.lang.String) =  \":\" \l0x002d: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002e: INVOKE  (r7 I:boolean) = \l  (r10 I:java.lang.String)\l  (r11 I:int)\l  (r7 I:java.lang.String)\l  (r2 I:int)\l  (r8 I:int)\l java.lang.String.regionMatches(int, java.lang.String, int, int):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0037 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0037|0x0037: CONST_STR  (r7 I:java.lang.String) =  \".\" \l0x0039: INVOKE  (r11 I:boolean) = \l  (r10 I:java.lang.String)\l  (r11 I:int)\l  (r7 I:java.lang.String)\l  (r2 I:int)\l  (r8 I:int)\l java.lang.String.regionMatches(int, java.lang.String, int, int):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|0x003d: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004b \l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|0x003f: ARITH  (r11 I:int) = (r3 I:int) + (\-2 int) \l0x0041: INVOKE  (r10 I:boolean) = \l  (r10 I:java.lang.String)\l  (r5 I:int)\l  (r12 I:int)\l  (r0 I:byte[])\l  (r11 I:int)\l okhttp3.internal.Util.decodeIpv4Suffix(java.lang.String, int, int, byte[], int):boolean type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0048 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0047|0x0047: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: ARITH  (r3 I:int) = (r3 I:int) + (2 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004b|0x004b: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x004d|0x004d: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|0x004f: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:34:0x0062 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|0x0051: INVOKE  (r8 I:char) = (r10 I:java.lang.String), (r11 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0055: INVOKE  (r8 I:int) = (r8 I:char) okhttp3.internal.Util.decodeHexDigit(char):int type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x0059|0x0059: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x005c \l}"];
Node_33 [shape=record,label="{33\:\ 0x005c|0x005c: ARITH  (r7 I:int) = (r7 I:int) \<\< (4 int) \l0x005e: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x005f: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0062|0x0062: ARITH  (r8 I:int) = (r11 I:int) \- (r5 I:int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0064|0x0064: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x007b \l}"];
Node_36 [shape=record,label="{36\:\ 0x0066|0x0066: CONST  (r9 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0067|0x0067: IF  (r8 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char])  \-\> B:39:0x006a \l}"];
Node_39 [shape=record,label="{39\:\ 0x006a|0x006a: ARITH  (r6 I:int) = (r3 I:int) + (1 int) \l0x006c: ARITH  (r8 I:int) = (r7 I:int) \>\>\> (8 int) \l0x006e: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0070: CAST  (r8 I:byte) = (byte) (r8 I:int) \l0x0071: APUT  \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x0073: ARITH  (r3 I:int) = (r6 I:int) + (1 int) \l0x0075: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0077: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x0078: APUT  \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:byte A[IMMUTABLE_TYPE])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x007b|0x007b: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_41 [shape=record,label="{41\:\ 0x007c|0x007c: ARRAY_LENGTH  (r10 I:int) = (r0 I:?[]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x007d|0x007d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x008f \l}"];
Node_43 [shape=record,label="{43\:\ 0x007f|0x007f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0082 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0081|0x0081: RETURN  (r6 I:java.net.InetAddress) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0082|0x0082: ARRAY_LENGTH  (r10 I:int) = (r0 I:?[]) \l0x0083: ARITH  (r11 I:int) = (r3 I:int) \- (r4 I:int) \l0x0085: ARITH  (r10 I:int) = (r10 I:int) \- (r11 I:int) \l0x0086: INVOKE  \l  (r0 I:java.lang.Object)\l  (r4 I:int)\l  (r0 I:java.lang.Object)\l  (r10 I:int)\l  (r11 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0089: ARRAY_LENGTH  (r10 I:int) = (r0 I:?[]) \l0x008a: ARITH  (r10 I:int) = (r10 I:int) \- (r3 I:int) \l0x008b: ARITH  (r10 I:int) = (r10 I:int) + (r4 I:int) \l0x008c: INVOKE  (r0 I:byte[]), (r4 I:int), (r10 I:int), (r2 I:byte) java.util.Arrays.fill(byte[], int, int, byte):void type: STATIC \l}"];
Node_46 [shape=record,label="{46\:\ 0x008f|SYNTHETIC\lSplitter:B:46:0x008f\l}"];
Node_47 [shape=record,label="{47\:\ ?|Splitter:B:46:0x008f\l|0x008f: INVOKE  (r10 I:java.net.InetAddress) = (r0 I:byte[]) java.net.InetAddress.getByAddress(byte[]):java.net.InetAddress type: STATIC A[Catch:\{ UnknownHostException \-\> 0x0094 \}, TRY_ENTER]\l0x0092: NOP   A[TRY_LEAVE]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0093|0x0093: RETURN  (r10 I:java.net.InetAddress) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0094|0x0094: NEW_INSTANCE  (r10 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0096: INVOKE  (r10 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lExcHandler: UnknownHostException null\lSplitter:B:46:0x008f\l}"];
Node_51 [shape=record,label="{51\:\ 0x0099|0x0099: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static java.net.InetAddress okhttp3.internal.Util.decodeIpv6((r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_41;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_41;
Node_15 -> Node_28;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_41;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_34[style=dashed];
Node_33 -> Node_29;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_40[style=dashed];
Node_39 -> Node_1;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_46;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_49 -> Node_51;
Node_50 -> Node_49;
}

