digraph "CFG forokhttp3.internal.Util.closeQuietly(Ljava\/net\/Socket;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r1 == null) goto L_?\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ AssertionError \-\> 0x0008, RuntimeException \-\> 0x0006, Exception \-\> 0x0011 \}\lSplitter:B:1:0x0002\l|r1.close()     \/\/ Catch:\{ AssertionError \-\> 0x0008, RuntimeException \-\> 0x0006, Exception \-\> 0x0011 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|ExcHandler: RuntimeException (r1v2 'e' java.lang.RuntimeException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.lang.RuntimeException r1 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|throw r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|ExcHandler: AssertionError (r1v1 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.lang.AssertionError r1 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009}"];
Node_7 [shape=record,label="{7\:\ 0x000d|if (isAndroidGetsocknameError(r1) == false) goto L_0x0010\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|throw r1\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: Exception (unused java.lang.Exception)\lSplitter:B:1:0x0002\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void okhttp3.internal.Util.closeQuietly((r1v0 java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_1 -> Node_3;
Node_1 -> Node_9;
Node_2 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_13[style=dashed];
Node_9 -> Node_10;
}

