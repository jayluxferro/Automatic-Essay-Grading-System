digraph "CFG forokhttp3.internal.Util.skipTrailingAsciiWhitespace(Ljava\/lang\/String;II)I" {
subgraph cluster_Region_1427179097 {
label = "R(3:0|(1:3)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r3 = r3 \- 1\l}"];
subgraph cluster_LoopRegion_1934857409 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v4 int) binds: [B:0:0x0000, B:6:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:6:0x000e\l|if (r3 \>= r2) goto L_0x0004\l}"];
subgraph cluster_Region_961312919 {
label = "R(1:3)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_195903245 {
label = "Switch: 1, default: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|switch(r1.charAt(r3)) \{\l    case 9: goto L_0x000e;\l    case 10: goto L_0x000e;\l    case 12: goto L_0x000e;\l    case 13: goto L_0x000e;\l    case 32: goto L_0x000e;\l    default: goto L_0x000b;\l\}\l}"];
subgraph cluster_Region_623687908 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:6:0x000e\l|r3\-\-\l}"];
}
subgraph cluster_Region_1448330223 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\l|return r3 + 1\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|return r2\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.Util.skipTrailingAsciiWhitespace((r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_6;
Node_3 -> Node_9;
Node_6 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_8 -> Node_7;
Node_9 -> Node_4;
}

