digraph "CFG forokhttp3.internal.Util.platformTrustManager()Ljavax\/net\/ssl\/X509TrustManager;" {
subgraph cluster_Region_156677551 {
label = "R(1:(2:1|(2:(1:6)|(2:7|8))))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_512388996 {
label = "Try: R(2:1|(2:(1:6)|(2:7|8))) catches: R(2:9|11)";
node [shape=record,color=blue];
subgraph cluster_Region_242768318 {
label = "R(2:1|(2:(1:6)|(2:7|8)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ GeneralSecurityException \-\> 0x003d \}\lSplitter:B:0:0x0000\l|javax.net.ssl.TrustManagerFactory javax.net.ssl.TrustManagerFactory r0 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm())     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\lr0.init((java.security.KeyStore) null)     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\ljavax.net.ssl.TrustManager[] javax.net.ssl.TrustManager[] r0 = r0.getTrustManagers()     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
subgraph cluster_Region_99883532 {
label = "R(2:(1:6)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_448391487 {
label = "IF [B:2:0x0014, B:4:0x001b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0014|Catch:\{ GeneralSecurityException \-\> 0x003d \}\l|if (r0.length == 1) goto L_0x0016     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|ADDED_TO_REGION\lCatch:\{ GeneralSecurityException \-\> 0x003d \}\l|if ((r0[0] instanceof javax.net.ssl.X509TrustManager) != false) goto L_0x001d     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
subgraph cluster_Region_1658188991 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|RETURN\lCatch:\{ GeneralSecurityException \-\> 0x003d \}\l|return (javax.net.ssl.X509TrustManager) r0[0]     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
}
}
subgraph cluster_Region_1474278053 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0022|Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|Catch:\{ GeneralSecurityException \-\> 0x003d \}\l|throw new java.lang.IllegalStateException(\"Unexpected default trust managers:\" + java.util.Arrays.toString(r0))     \/\/ Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
}
}
}
subgraph cluster_Region_1096092367 {
label = "R(2:9|11) | ExcHandler: GeneralSecurityException (r0v0 'e' java.security.GeneralSecurityException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003d|ExcHandler: GeneralSecurityException (r0v0 'e' java.security.GeneralSecurityException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|throw assertionError(\"No System TLS\", r0)\l}"];
}
}
}
subgraph cluster_Region_1096092367 {
label = "R(2:9|11) | ExcHandler: GeneralSecurityException (r0v0 'e' java.security.GeneralSecurityException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003d|ExcHandler: GeneralSecurityException (r0v0 'e' java.security.GeneralSecurityException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|throw assertionError(\"No System TLS\", r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0016|Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001d|Catch:\{ GeneralSecurityException \-\> 0x003d \}\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x003e}"];
MethodNode[shape=record,label="{public static javax.net.ssl.X509TrustManager okhttp3.internal.Util.platformTrustManager() }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_10 -> Node_11;
}

