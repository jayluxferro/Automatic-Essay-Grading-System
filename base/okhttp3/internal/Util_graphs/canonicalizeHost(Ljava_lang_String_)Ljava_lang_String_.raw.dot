digraph "CFG forokhttp3.internal.Util.canonicalizeHost(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \":\" \l0x0002: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x005a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST_STR  (r0 I:java.lang.String) =  \"[\" \l0x000b: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST_STR  (r0 I:java.lang.String) =  \"]\" \l0x0013: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.endsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001e: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x001f: INVOKE  (r0 I:java.net.InetAddress) = (r3 I:java.lang.String), (r2 I:int), (r0 I:int) okhttp3.internal.Util.decodeIpv6(java.lang.String, int, int):java.net.InetAddress type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: INVOKE  (r2 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0029: INVOKE  (r0 I:java.net.InetAddress) = (r3 I:java.lang.String), (r0 I:int), (r2 I:int) okhttp3.internal.Util.decodeIpv6(java.lang.String, int, int):java.net.InetAddress type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0030 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: RETURN  (r1 I:java.lang.String) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: INVOKE  (r0 I:byte[]) = (r0 I:java.net.InetAddress) java.net.InetAddress.getAddress():byte[] type: VIRTUAL \l0x0034: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0035: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: INVOKE  (r3 I:java.lang.String) = (r0 I:byte[]) okhttp3.internal.Util.inet6AddressToAscii(byte[]):java.lang.String type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: RETURN  (r3 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0040: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0045: CONST_STR  (r2 I:java.lang.String) =  \"Invalid IPv6 address: '\" \l0x0047: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004a: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: CONST_STR  (r3 I:java.lang.String) =  \"'\" \l0x004f: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0056: INVOKE  (r0 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|SYNTHETIC\lSplitter:B:16:0x005a\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x005a\l|0x005a: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.net.IDN.toASCII(java.lang.String):java.lang.String type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}, TRY_ENTER]\l0x005e: SGET  (r0 I:java.util.Locale) =  java.util.Locale.US java.util.Locale A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l0x0060: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l0x0064: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|0x0068: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006b A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: RETURN  (r1 I:java.lang.String) A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|0x006b: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String) okhttp3.internal.Util.containsInvalidHostnameAsciiCodes(java.lang.String):boolean type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x0073 \}]\l0x006e: NOP   A[TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0072 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|0x0071: RETURN  (r1 I:java.lang.String) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|0x0072: RETURN  (r3 I:java.lang.String) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0073|0x0073: RETURN  (r1 I:java.lang.String) \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:16:0x005a\l}"];
MethodNode[shape=record,label="{public static java.lang.String okhttp3.internal.Util.canonicalizeHost((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_25 -> Node_24;
}

