digraph "CFG forokhttp3.internal.Util.indexOfControlOrNonAscii(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:char) = (r4 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000b: CONST  (r3 I:?[int, float, short, byte, char]) = (31 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r1 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.Util.indexOfControlOrNonAscii((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_1;
Node_9 -> Node_10;
}

