digraph "CFG forokhttp3.internal.Util.canonicalizeHost(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3.contains(\":\") == false) goto L_0x005a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r3.startsWith(\"[\") == false) goto L_0x0024\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r3.endsWith(\"]\") == false) goto L_0x0024\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|java.net.InetAddress r0 = decodeIpv6(r3, 1, r3.length() \- 1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|java.net.InetAddress r0 = decodeIpv6(r3, 0, r3.length())\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|PHI: r0 \l  PHI: (r0v7 java.net.InetAddress) = (r0v11 java.net.InetAddress), (r0v16 java.net.InetAddress) binds: [B:7:0x0024, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L_0x0030\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|byte[] r0 = r0.getAddress()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|if (r0.length != 16) goto L_0x003e\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039}"];
Node_13 [shape=record,label="{13\:\ 0x003d|RETURN\l|return inet6AddressToAscii(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Invalid IPv6 address: '\")\lr1.append(r3)\lr1.append(\"'\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|throw new java.lang.AssertionError(r1.toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|SYNTHETIC\lSplitter:B:16:0x005a\l}"];
Node_17 [shape=record,label="{17\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0073 \}\lSplitter:B:16:0x005a\l|java.lang.String r3 = java.net.IDN.toASCII(r3).toLowerCase(java.util.Locale.US)     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0073 \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|Catch:\{ IllegalArgumentException \-\> 0x0073 \}\l|if (r3.isEmpty() == false) goto L_0x006b     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0073 \}\l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|RETURN\lCatch:\{ IllegalArgumentException \-\> 0x0073 \}\l|return null     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0073 \}\l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|Catch:\{ IllegalArgumentException \-\> 0x0073 \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|if (containsInvalidHostnameAsciiCodes(r3) == false) goto L_0x0072\l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|RETURN\l|return null\l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|RETURN\l|return r3\l}"];
Node_24 [shape=record,label="{24\:\ 0x0073|RETURN\l|return null\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:16:0x005a\l}"];
MethodNode[shape=record,label="{public static java.lang.String okhttp3.internal.Util.canonicalizeHost((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_25 -> Node_24;
}

