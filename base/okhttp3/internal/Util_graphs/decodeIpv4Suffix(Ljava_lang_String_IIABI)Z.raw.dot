digraph "CFG forokhttp3.internal.Util.decodeIpv4Suffix(Ljava\/lang\/String;II[BI)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r8 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:29:0x0044 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: ARRAY_LENGTH  (r2 I:int) = (r10 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0008 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0015 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: INVOKE  (r2 I:char) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0013 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: RETURN  (r1 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IF  (r2 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:25:0x0037 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: INVOKE  (r4 I:char) = (r7 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001d: CONST  (r5 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:25:0x0037 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|0x0021: CONST  (r6 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: IF  (r4 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:18:0x0026 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0028|0x0028: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002b \l}"];
Node_20 [shape=record,label="{20\:\ 0x002a|0x002a: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002b: ARITH  (r3 I:int) = (r3 I:int) * (10 int) \l0x002d: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x002e: ARITH  (r3 I:int) = (r3 I:int) \- (r5 I:int) \l0x002f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0031|0x0031: IF  (r3 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:24:0x0034 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0033|0x0033: RETURN  (r1 I:boolean) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0034|0x0034: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0037|0x0037: ARITH  (r8 I:int) = (r2 I:int) \- (r8 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0039|0x0039: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x003c \l}"];
Node_27 [shape=record,label="{27\:\ 0x003b|0x003b: RETURN  (r1 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x003c|0x003c: ARITH  (r8 I:int) = (r0 I:int) + (1 int) \l0x003e: CAST  (r1 I:byte) = (byte) (r3 I:int) \l0x003f: APUT  \l  (r10 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:byte A[IMMUTABLE_TYPE])\l \l0x0041: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0042: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0044|0x0044: ARITH  (r11 I:int) = (r11 I:int) + (4 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0049 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0048|0x0048: RETURN  (r1 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0049|0x0049: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x004a|0x004a: RETURN  (r7 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean okhttp3.internal.Util.decodeIpv4Suffix((r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_29;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_25;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_25[style=dashed];
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_24 -> Node_12;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_1;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_32 -> Node_33;
}

