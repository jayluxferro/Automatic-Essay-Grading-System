digraph "CFG forokhttp3.internal.Util.platformTrustManager()Ljavax\/net\/ssl\/X509TrustManager;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:java.lang.String) =  javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm():java.lang.String type: STATIC A[Catch:\{ GeneralSecurityException \-\> 0x003d \}, TRY_ENTER]\l0x0004: INVOKE  (r0 I:javax.net.ssl.TrustManagerFactory) = (r0 I:java.lang.String) javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String):javax.net.ssl.TrustManagerFactory type: STATIC A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0009: CHECK_CAST  (r1 I:java.security.KeyStore) = (java.security.KeyStore) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x000b: INVOKE  \l  (r0 I:javax.net.ssl.TrustManagerFactory)\l  (r1 I:java.security.KeyStore)\l javax.net.ssl.TrustManagerFactory.init(java.security.KeyStore):void type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x000e: INVOKE  (r0 I:javax.net.ssl.TrustManager[]) = (r0 I:javax.net.ssl.TrustManagerFactory) javax.net.ssl.TrustManagerFactory.getTrustManagers():javax.net.ssl.TrustManager[] type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0012: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0017: AGET  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0019: INSTANCE_OF  (r2 I:boolean) = (r2 I:?[OBJECT, ARRAY]) javax.net.ssl.X509TrustManager A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x001f: CHECK_CAST  (r0 I:javax.net.ssl.X509TrustManager) = (javax.net.ssl.X509TrustManager) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: RETURN  (r0 I:javax.net.ssl.X509TrustManager) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0024: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0026: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0029: CONST_STR  (r3 I:java.lang.String) =  \"Unexpected default trust managers:\" A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x002b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x002e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object[]) java.util.Arrays.toString(java.lang.Object[]):java.lang.String type: STATIC A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0032: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0035: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l0x0039: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ GeneralSecurityException \-\> 0x003d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ GeneralSecurityException \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|ExcHandler: GeneralSecurityException null\lSplitter:B:0:0x0000\l|0x003d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: CONST_STR  (r1 I:java.lang.String) =  \"No System TLS\" \l0x0040: INVOKE  (r0 I:java.lang.AssertionError) = (r1 I:java.lang.String), (r0 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static javax.net.ssl.X509TrustManager okhttp3.internal.Util.platformTrustManager() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

