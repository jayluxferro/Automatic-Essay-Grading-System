digraph "CFG forokhttp3.internal.Util.inet6AddressToAscii([B)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: ARRAY_LENGTH  (r4 I:int) = (r8 I:?[]) \l0x0006: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:16:0x0026 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: ARITH  (r6 I:int) = (r4 I:int) + (1 int) \l0x0013: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: ARITH  (r4 I:int) = (r4 I:int) + (2 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: ARITH  (r5 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r5 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:15:0x0023 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: IF  (r5 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:15:0x0023 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: ARITH  (r1 I:int) = (r4 I:int) + (2 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:okio.Buffer) =  okio.Buffer \l0x0028: INVOKE  (r1 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|0x002b: ARRAY_LENGTH  (r4 I:int) = (r8 I:?[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|0x002c: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:27:0x0055 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: CONST  (r4 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x003c \l}"];
Node_21 [shape=record,label="{21\:\ 0x0032|0x0032: INVOKE  (r1 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0035: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002b \l}"];
Node_23 [shape=record,label="{23\:\ 0x0038|0x0038: INVOKE  (r1 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x003c|0x003c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:26:0x0041 \l}"];
Node_25 [shape=record,label="{25\:\ 0x003e|0x003e: INVOKE  (r1 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0041|0x0041: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0043: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0045: ARITH  (r4 I:int) = (r4 I:int) \<\< (8 int) \l0x0047: ARITH  (r6 I:int) = (r0 I:int) + (1 int) \l0x0049: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x004b: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x004d: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x004e: CAST  (r6 I:long) = (long) (r4 I:int) \l0x004f: INVOKE  (r1 I:okio.Buffer), (r6 I:long) okio.Buffer.writeHexadecimalUnsignedLong(long):okio.Buffer type: VIRTUAL \l0x0052: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0055|0x0055: INVOKE  (r8 I:java.lang.String) = (r1 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0059|0x0059: RETURN  (r8 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String okhttp3.internal.Util.inet6AddressToAscii((r8 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_17;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_17;
Node_27 -> Node_28;
}

