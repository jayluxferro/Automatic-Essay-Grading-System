digraph "CFG forokhttp3.internal.Util.skipAll(Lokio\/Source;ILjava\/util\/concurrent\/TimeUnit;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0004: INVOKE  (r2 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0008: INVOKE  (r2 I:boolean) = (r2 I:okio.Timeout) okio.Timeout.hasDeadline():boolean type: VIRTUAL \l0x000c: CONST  (r3 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  (r2 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0017: INVOKE  (r5 I:long) = (r2 I:okio.Timeout) okio.Timeout.deadlineNanoTime():long type: VIRTUAL \l0x001b: ARITH  (r5 I:long) = (r5 I:long) \- (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: MOVE  (r5 I:?[long, double]) = (r3 I:?[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: INVOKE  (r2 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0022: CAST  (r7 I:long) = (long) (r12 I:int) \l0x0023: INVOKE  (r12 I:long) = (r13 I:java.util.concurrent.TimeUnit), (r7 I:long) java.util.concurrent.TimeUnit.toNanos(long):long type: VIRTUAL \l0x0027: INVOKE  (r12 I:long) = (r5 I:long), (r12 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x002b: ARITH  (r12 I:long) = (r12 I:long) + (r0 I:long) \l0x002c: INVOKE  (r2 I:okio.Timeout), (r12 I:long) okio.Timeout.deadlineNanoTime(long):okio.Timeout type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|SYNTHETIC\lSplitter:B:5:0x002f\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x002f\l|0x002f: NEW_INSTANCE  (r12 I:okio.Buffer) =  okio.Buffer A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}, TRY_ENTER]\l0x0031: INVOKE  (r12 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: CONST  (r7 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l0x0036: INVOKE  (r7 I:long) = (r11 I:okio.Source), (r12 I:okio.Buffer), (r7 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l0x003a: CONST  (r9 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l0x003c: CMP_L  (r13 I:int) = (r7 I:long), (r9 I:long) A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0044 A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|0x0040: INVOKE  (r12 I:okio.Buffer) okio.Buffer.clear():void type: VIRTUAL A[Catch:\{ InterruptedIOException \-\> 0x0070, all \-\> 0x005a \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0045: CMP_L  (r13 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0051 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x004d: INVOKE  (r11 I:okio.Timeout) okio.Timeout.clearDeadline():okio.Timeout type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|0x0051: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0055: ARITH  (r0 I:long) = (r0 I:long) + (r5 I:long) \l0x0056: INVOKE  (r11 I:okio.Timeout), (r0 I:long) okio.Timeout.deadlineNanoTime(long):okio.Timeout type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: RETURN  (r12 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|ExcHandler: all null\lSplitter:B:5:0x002f\l|0x005a: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: CMP_L  (r13 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0067 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0063: INVOKE  (r11 I:okio.Timeout) okio.Timeout.clearDeadline():okio.Timeout type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0067|0x0067: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x006b: ARITH  (r0 I:long) = (r0 I:long) + (r5 I:long) \l0x006c: INVOKE  (r11 I:okio.Timeout), (r0 I:long) okio.Timeout.deadlineNanoTime(long):okio.Timeout type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0071: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0072: CMP_L  (r13 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lExcHandler: InterruptedIOException null\lSplitter:B:5:0x002f\l}"];
Node_24 [shape=record,label="{24\:\ 0x0074|0x0074: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007e \l}"];
Node_25 [shape=record,label="{25\:\ 0x0076|0x0076: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x007a: INVOKE  (r11 I:okio.Timeout) okio.Timeout.clearDeadline():okio.Timeout type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x007e|0x007e: INVOKE  (r11 I:okio.Timeout) = (r11 I:okio.Source) okio.Source.timeout():okio.Timeout type: INTERFACE \l0x0082: ARITH  (r0 I:long) = (r0 I:long) + (r5 I:long) \l0x0083: INVOKE  (r11 I:okio.Timeout), (r0 I:long) okio.Timeout.deadlineNanoTime(long):okio.Timeout type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0086|0x0086: RETURN  (r12 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean okhttp3.internal.Util.skipAll((r11 I:okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.util.concurrent.TimeUnit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_23;
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_7;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_22 -> Node_24;
Node_23 -> Node_22;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
}

