digraph "CFG forokhttp3.internal.Util.closeQuietly(Ljava\/net\/Socket;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0011 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r1 I:java.net.Socket) java.net.Socket.close():void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0008, RuntimeException \-\> 0x0006, Exception \-\> 0x0011 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|ExcHandler: RuntimeException null\lSplitter:B:1:0x0002\l|0x0006: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|ExcHandler: AssertionError null\lSplitter:B:1:0x0002\l|0x0008: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: INVOKE  (r0 I:boolean) = (r1 I:java.lang.AssertionError) okhttp3.internal.Util.isAndroidGetsocknameError(java.lang.AssertionError):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0010 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:1:0x0002\l}"];
MethodNode[shape=record,label="{public static void okhttp3.internal.Util.closeQuietly((r1 I:java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_4;
Node_1 -> Node_12;
Node_2 -> Node_6;
Node_2 -> Node_4;
Node_2 -> Node_12;
Node_2 -> Node_11;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_12 -> Node_11;
}

