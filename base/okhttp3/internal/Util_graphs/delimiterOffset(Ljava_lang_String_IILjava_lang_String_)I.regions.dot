digraph "CFG forokhttp3.internal.Util.delimiterOffset(Ljava\/lang\/String;IILjava\/lang\/String;)I" {
subgraph cluster_Region_1037421041 {
label = "R(2:(1:(2:(1:3)|(1:4)))|5)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_512519708 {
label = "LOOP:0: (1:(2:(1:3)|(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:4:0x000e\l|if (r3 \< r4) goto L_0x0002\l}"];
subgraph cluster_Region_1213500940 {
label = "R(1:(2:(1:3)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_1135747076 {
label = "R(2:(1:3)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1354494914 {
label = "IF [B:2:0x000b] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r5.indexOf(r2.charAt(r3)) != \-1) goto L_0x000d\l}"];
subgraph cluster_Region_758815559 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_1106396162 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:4:0x000e\l|r3++\l}"];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\l|return r4\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.Util.delimiterOffset((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6[style=dashed];
Node_2 -> Node_4[style=dashed];
Node_2 -> Node_7;
Node_4 -> Node_0;
Node_1 -> Node_2;
Node_6 -> Node_5;
Node_7 -> Node_3;
}

