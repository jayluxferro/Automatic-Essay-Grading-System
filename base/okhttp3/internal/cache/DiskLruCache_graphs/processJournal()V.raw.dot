digraph "CFG forokhttp3.internal.cache.DiskLruCache.processJournal()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.io.FileSystem) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.fileSystem okhttp3.internal.io.FileSystem \l0x0002: IGET  (r1 I:java.io.File) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.journalFileTmp java.io.File \l0x0004: INVOKE  (r0 I:okhttp3.internal.io.FileSystem), (r1 I:java.io.File) okhttp3.internal.io.FileSystem.delete(java.io.File):void type: INTERFACE \l0x0007: IGET  (r0 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap \l0x0009: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.values():java.util.Collection type: VIRTUAL \l0x000d: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0052 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001b: CHECK_CAST  (r1 I:okhttp3.internal.cache.DiskLruCache$Entry) = (okhttp3.internal.cache.DiskLruCache$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x001d: IGET  (r2 I:okhttp3.internal.cache.DiskLruCache$Editor) = (r1 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor \l0x001f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IGET  (r2 I:int) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.valueCount int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:1:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r4 I:long) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.size long \l0x0028: IGET  (r2 I:long[]) = (r1 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.lengths long[] \l0x002a: AGET  (r6 I:?[long, double]) = (r2 I:?[long, double][]), (r3 I:?[int, short, byte, char]) \l0x002c: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x002d: IPUT  (r4 I:long), (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.size long \l0x002f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: IPUT  \l  (r2 I:okhttp3.internal.cache.DiskLruCache$Editor)\l  (r1 I:okhttp3.internal.cache.DiskLruCache$Entry)\l okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r2 I:int) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.valueCount int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:12:0x004e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IGET  (r2 I:okhttp3.internal.io.FileSystem) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.fileSystem okhttp3.internal.io.FileSystem \l0x003b: IGET  (r4 I:java.io.File[]) = (r1 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.cleanFiles java.io.File[] \l0x003d: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x003f: INVOKE  (r2 I:okhttp3.internal.io.FileSystem), (r4 I:java.io.File) okhttp3.internal.io.FileSystem.delete(java.io.File):void type: INTERFACE \l0x0042: IGET  (r2 I:okhttp3.internal.io.FileSystem) = (r8 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.fileSystem okhttp3.internal.io.FileSystem \l0x0044: IGET  (r4 I:java.io.File[]) = (r1 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.dirtyFiles java.io.File[] \l0x0046: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0048: INVOKE  (r2 I:okhttp3.internal.io.FileSystem), (r4 I:java.io.File) okhttp3.internal.io.FileSystem.delete(java.io.File):void type: INTERFACE \l0x004b: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: INVOKE  (r0 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.cache.DiskLruCache.processJournal((r8 'this' I:okhttp3.internal.cache.DiskLruCache A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_1;
}

