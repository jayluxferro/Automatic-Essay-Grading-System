digraph "CFG forokhttp3.internal.cache.DiskLruCache.edit(Ljava\/lang\/String;J)Lokhttp3\/internal\/cache\/DiskLruCache$Editor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.initialize():void type: VIRTUAL A[Catch:\{ all \-\> 0x0074 \}, TRY_ENTER]\l0x0004: INVOKE  (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.checkNotClosed():void type: DIRECT A[Catch:\{ all \-\> 0x0074 \}]\l0x0007: INVOKE  \l  (r4 I:okhttp3.internal.cache.DiskLruCache)\l  (r5 I:java.lang.String)\l okhttp3.internal.cache.DiskLruCache.validateKey(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0074 \}]\l0x000a: IGET  (r0 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0074 \}]\l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.LinkedHashMap), (r5 I:java.lang.Object) java.util.LinkedHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0074 \}]\l0x0010: CHECK_CAST  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry) = (okhttp3.internal.cache.DiskLruCache$Entry) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0074 \}]\l0x0012: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0074 \}]\l0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0074 \}]\l0x0015: CMP_L  (r1 I:int) = (r6 I:long), (r1 I:long) A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r1 I:long) = (r0 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.sequenceNumber long A[Catch:\{ all \-\> 0x0074 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: CMP_L  (r6 I:int) = (r1 I:long), (r6 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: RETURN  (r3 I:okhttp3.internal.cache.DiskLruCache$Editor) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|SYNTHETIC\lSplitter:B:11:0x0025\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0025\l|0x0025: IGET  (r6 I:okhttp3.internal.cache.DiskLruCache$Editor) = (r0 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor A[Catch:\{ all \-\> 0x0074 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: RETURN  (r3 I:okhttp3.internal.cache.DiskLruCache$Editor) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|SYNTHETIC\lSplitter:B:16:0x002b\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x002b\l|0x002b: IGET  (r6 I:boolean) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.mostRecentTrimFailed boolean A[Catch:\{ all \-\> 0x0074 \}, TRY_ENTER]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x006b A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: IGET  (r6 I:boolean) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.mostRecentRebuildFailed boolean A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0031|0x0031: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0034 A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0033|0x0033: GOTO  \-\> 0x006b A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|0x0034: IGET  (r6 I:okio.BufferedSink) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.journalWriter okio.BufferedSink A[Catch:\{ all \-\> 0x0074 \}]\l0x0036: CONST_STR  (r7 I:java.lang.String) =  \"DIRTY\" A[Catch:\{ all \-\> 0x0074 \}]\l0x0038: INVOKE  (r6 I:okio.BufferedSink) = (r6 I:okio.BufferedSink), (r7 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}]\l0x003c: CONST  (r7 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0074 \}]\l0x003e: INVOKE  (r6 I:okio.BufferedSink) = (r6 I:okio.BufferedSink), (r7 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}]\l0x0042: INVOKE  (r6 I:okio.BufferedSink) = (r6 I:okio.BufferedSink), (r5 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}]\l0x0046: CONST  (r7 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0074 \}]\l0x0048: INVOKE  (r6 I:okio.BufferedSink), (r7 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}]\l0x004b: IGET  (r6 I:okio.BufferedSink) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.journalWriter okio.BufferedSink A[Catch:\{ all \-\> 0x0074 \}]\l0x004d: INVOKE  (r6 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}]\l0x0050: IGET  (r6 I:boolean) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.hasJournalErrors boolean A[Catch:\{ all \-\> 0x0074 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0052|0x0052: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0056 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0055|0x0055: RETURN  (r3 I:okhttp3.internal.cache.DiskLruCache$Editor) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0056|0x0056: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0062 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|SYNTHETIC\lSplitter:B:27:0x0058\l}"];
Node_28 [shape=record,label="{28\:\ ?|Splitter:B:27:0x0058\l|0x0058: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry) =  okhttp3.internal.cache.DiskLruCache$Entry A[Catch:\{ all \-\> 0x0074 \}, TRY_ENTER]\l0x005a: INVOKE  \l  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry)\l  (r4 I:okhttp3.internal.cache.DiskLruCache)\l  (r5 I:java.lang.String)\l okhttp3.internal.cache.DiskLruCache.Entry.\<init\>(okhttp3.internal.cache.DiskLruCache, java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0074 \}]\l0x005d: IGET  (r6 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0074 \}]\l0x005f: INVOKE  \l  (r6 I:java.util.LinkedHashMap)\l  (r5 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0074 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0062|0x0062: NEW_INSTANCE  (r5 I:okhttp3.internal.cache.DiskLruCache$Editor) =  okhttp3.internal.cache.DiskLruCache$Editor A[Catch:\{ all \-\> 0x0074 \}]\l0x0064: INVOKE  \l  (r5 I:okhttp3.internal.cache.DiskLruCache$Editor)\l  (r4 I:okhttp3.internal.cache.DiskLruCache)\l  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry)\l okhttp3.internal.cache.DiskLruCache.Editor.\<init\>(okhttp3.internal.cache.DiskLruCache, okhttp3.internal.cache.DiskLruCache$Entry):void type: DIRECT A[Catch:\{ all \-\> 0x0074 \}]\l0x0067: IPUT  \l  (r5 I:okhttp3.internal.cache.DiskLruCache$Editor)\l  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry)\l okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor A[Catch:\{ all \-\> 0x0074 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0069|0x0069: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006a|0x006a: RETURN  (r5 I:okhttp3.internal.cache.DiskLruCache$Editor) \l}"];
Node_32 [shape=record,label="{32\:\ 0x006b|SYNTHETIC\lSplitter:B:32:0x006b\l}"];
Node_33 [shape=record,label="{33\:\ ?|Splitter:B:32:0x006b\l|0x006b: IGET  (r5 I:java.util.concurrent.Executor) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.executor java.util.concurrent.Executor A[Catch:\{ all \-\> 0x0074 \}, TRY_ENTER]\l0x006d: IGET  (r6 I:java.lang.Runnable) = (r4 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.cleanupRunnable java.lang.Runnable A[Catch:\{ all \-\> 0x0074 \}]\l0x006f: INVOKE  \l  (r5 I:java.util.concurrent.Executor)\l  (r6 I:java.lang.Runnable)\l java.util.concurrent.Executor.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ all \-\> 0x0074 \}, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0072|0x0072: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0073|0x0073: RETURN  (r3 I:okhttp3.internal.cache.DiskLruCache$Editor) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0074|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0074: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x0075|0x0075: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0076|0x0076: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized okhttp3.internal.cache.DiskLruCache$Editor okhttp3.internal.cache.DiskLruCache.edit((r4 'this' I:okhttp3.internal.cache.DiskLruCache A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_36;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_11 -> Node_36;
Node_12 -> Node_13;
Node_12 -> Node_36;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_36;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_32;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
}

