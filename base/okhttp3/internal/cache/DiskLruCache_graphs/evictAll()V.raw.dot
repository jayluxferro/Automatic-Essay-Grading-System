digraph "CFG forokhttp3.internal.cache.DiskLruCache.evictAll()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r5 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.initialize():void type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0004: IGET  (r0 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r5 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0029 \}]\l0x0006: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.values():java.util.Collection type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x000a: IGET  (r1 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r5 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0029 \}]\l0x000c: INVOKE  (r1 I:int) = (r1 I:java.util.LinkedHashMap) java.util.LinkedHashMap.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0010: NEW_ARRAY  (r1 I:okhttp3.internal.cache.DiskLruCache$Entry[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.cache.DiskLruCache$Entry[] A[Catch:\{ all \-\> 0x0029 \}]\l0x0012: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r1 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}]\l0x0016: CHECK_CAST  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry[]) = (okhttp3.internal.cache.DiskLruCache$Entry[]) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0029 \}]\l0x0018: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) A[Catch:\{ all \-\> 0x0029 \}]\l0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0025 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0029 \}]\l0x001f: INVOKE  \l  (r5 I:okhttp3.internal.cache.DiskLruCache)\l  (r4 I:okhttp3.internal.cache.DiskLruCache$Entry)\l okhttp3.internal.cache.DiskLruCache.removeEntry(okhttp3.internal.cache.DiskLruCache$Entry):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0022: ARITH  (r3 I:int) = (r3 I:int) + (1 int) A[Catch:\{ all \-\> 0x0029 \}]\l0x0024: GOTO  \-\> 0x001b A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IPUT  (r2 I:boolean), (r5 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.mostRecentTrimFailed boolean A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.cache.DiskLruCache.evictAll((r5 'this' I:okhttp3.internal.cache.DiskLruCache A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

