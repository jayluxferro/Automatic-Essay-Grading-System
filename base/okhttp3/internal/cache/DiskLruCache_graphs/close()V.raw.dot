digraph "CFG forokhttp3.internal.cache.DiskLruCache.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.initialized boolean A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0040 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.closed boolean A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000b A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: GOTO  \-\> 0x0040 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: IGET  (r0 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0044 \}]\l0x000d: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.values():java.util.Collection type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}]\l0x0011: IGET  (r2 I:java.util.LinkedHashMap\<java.lang.String, okhttp3.internal.cache.DiskLruCache$Entry\>) = (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.lruEntries java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0044 \}]\l0x0013: INVOKE  (r2 I:int) = (r2 I:java.util.LinkedHashMap) java.util.LinkedHashMap.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}]\l0x0017: NEW_ARRAY  (r2 I:okhttp3.internal.cache.DiskLruCache$Entry[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.cache.DiskLruCache$Entry[] A[Catch:\{ all \-\> 0x0044 \}]\l0x0019: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r2 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x001d: CHECK_CAST  (r0 I:okhttp3.internal.cache.DiskLruCache$Entry[]) = (okhttp3.internal.cache.DiskLruCache$Entry[]) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}]\l0x001f: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0020: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:13:0x0031 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0025: IGET  (r5 I:okhttp3.internal.cache.DiskLruCache$Editor) = (r4 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IGET  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor) = (r4 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.currentEditor okhttp3.internal.cache.DiskLruCache$Editor A[Catch:\{ all \-\> 0x0044 \}]\l0x002b: INVOKE  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor) okhttp3.internal.cache.DiskLruCache.Editor.abort():void type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) A[Catch:\{ all \-\> 0x0044 \}]\l0x0030: GOTO  \-\> 0x0021 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: INVOKE  (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.trimToSize():void type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}]\l0x0034: IGET  (r0 I:okio.BufferedSink) = (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.journalWriter okio.BufferedSink A[Catch:\{ all \-\> 0x0044 \}]\l0x0036: INVOKE  (r0 I:okio.BufferedSink) okio.BufferedSink.close():void type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x0039: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0044 \}]\l0x003a: IPUT  \l  (r0 I:okio.BufferedSink)\l  (r6 I:okhttp3.internal.cache.DiskLruCache)\l okhttp3.internal.cache.DiskLruCache.journalWriter okio.BufferedSink A[Catch:\{ all \-\> 0x0044 \}]\l0x003c: IPUT  (r1 I:boolean), (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.closed boolean A[Catch:\{ all \-\> 0x0044 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|SYNTHETIC\lSplitter:B:16:0x0040\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0040\l|0x0040: IPUT  (r1 I:boolean), (r6 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.closed boolean A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0044: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.cache.DiskLruCache.close((r6 'this' I:okhttp3.internal.cache.DiskLruCache A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

