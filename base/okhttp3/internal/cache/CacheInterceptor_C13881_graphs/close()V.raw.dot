digraph "CFG forokhttp3.internal.cache.CacheInterceptor.1.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x0006: SGET  (r1 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0008: INVOKE  (r0 I:boolean) = \l  (r2 I:okio.Source)\l  (r0 I:int)\l  (r1 I:java.util.concurrent.TimeUnit)\l okhttp3.internal.Util.discard(okio.Source, int, java.util.concurrent.TimeUnit):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: IPUT  \l  (r0 I:boolean)\l  (r2 I:okhttp3.internal.cache.CacheInterceptor$1)\l okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l0x0011: IGET  (r0 I:okhttp3.internal.cache.CacheRequest) = (r2 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$cacheRequest okhttp3.internal.cache.CacheRequest \l0x0013: INVOKE  (r0 I:okhttp3.internal.cache.CacheRequest) okhttp3.internal.cache.CacheRequest.abort():void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r0 I:okio.BufferedSource) = (r2 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$source okio.BufferedSource \l0x0018: INVOKE  (r0 I:okio.BufferedSource) okio.BufferedSource.close():void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache.CacheInterceptor.1.close((r2 'this' I:okhttp3.internal.cache.CacheInterceptor$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

