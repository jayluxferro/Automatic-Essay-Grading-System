digraph "CFG forokhttp3.internal.cache.CacheInterceptor.1.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:okio.BufferedSource) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$source okio.BufferedSource A[Catch:\{ IOException \-\> 0x0030 \}, TRY_ENTER]\l0x0003: INVOKE  (r10 I:long) = \l  (r1 I:okio.BufferedSource)\l  (r9 I:okio.Buffer)\l  (r10 I:long)\l okio.BufferedSource.read(okio.Buffer, long):long type: INTERFACE A[Catch:\{ IOException \-\> 0x0030 \}]\l0x0006: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) \l0x0009: CMP_L  (r3 I:int) = (r10 I:long), (r1 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r9 I:boolean) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IPUT  \l  (r0 I:boolean)\l  (r8 I:okhttp3.internal.cache.CacheInterceptor$1)\l okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l0x0013: IGET  (r9 I:okio.BufferedSink) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$cacheBody okio.BufferedSink \l0x0015: INVOKE  (r9 I:okio.BufferedSink) okio.BufferedSink.close():void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: RETURN  (r1 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IGET  (r0 I:okio.BufferedSink) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$cacheBody okio.BufferedSink \l0x001b: INVOKE  (r3 I:okio.Buffer) = (r0 I:okio.BufferedSink) okio.BufferedSink.buffer():okio.Buffer type: INTERFACE \l0x001f: INVOKE  (r0 I:long) = (r9 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0023: ARITH  (r4 I:long) = (r0 I:long) \- (r10 I:long) \l0x0025: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0026: MOVE  (r6 I:?[long, double]) = (r10 I:?[long, double]) \l0x0027: INVOKE  \l  (r2 I:okio.Buffer)\l  (r3 I:okio.Buffer)\l  (r4 I:long)\l  (r6 I:long)\l okio.Buffer.copyTo(okio.Buffer, long, long):okio.Buffer type: VIRTUAL \l0x002a: IGET  (r9 I:okio.BufferedSink) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$cacheBody okio.BufferedSink \l0x002c: INVOKE  (r9 I:okio.BufferedSink) okio.BufferedSink.emitCompleteSegments():okio.BufferedSink type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: RETURN  (r10 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|ExcHandler: IOException null\lSplitter:B:1:0x0001\l|0x0030: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: IGET  (r10 I:boolean) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IPUT  \l  (r0 I:boolean)\l  (r8 I:okhttp3.internal.cache.CacheInterceptor$1)\l okhttp3.internal.cache.CacheInterceptor.1.cacheRequestClosed boolean \l0x0037: IGET  (r10 I:okhttp3.internal.cache.CacheRequest) = (r8 I:okhttp3.internal.cache.CacheInterceptor$1) okhttp3.internal.cache.CacheInterceptor.1.val$cacheRequest okhttp3.internal.cache.CacheRequest \l0x0039: INVOKE  (r10 I:okhttp3.internal.cache.CacheRequest) okhttp3.internal.cache.CacheRequest.abort():void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.cache.CacheInterceptor.1.read((r8 'this' I:okhttp3.internal.cache.CacheInterceptor$1 A[IMMUTABLE_TYPE, THIS]), (r9 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

