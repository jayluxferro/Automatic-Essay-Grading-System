digraph "CFG forokhttp3.internal.cache.DiskLruCache.1.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ all \-\> 0x0041 \}, TRY_ENTER]\l0x0005: IGET  (r1 I:boolean) = (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.initialized boolean A[Catch:\{ all \-\> 0x0041 \}]\l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0041 \}]\l0x0008: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) A[Catch:\{ all \-\> 0x0041 \}]\l0x0009: IGET  (r3 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ all \-\> 0x0041 \}]\l0x000b: IGET  (r3 I:boolean) = (r3 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.closed boolean A[Catch:\{ all \-\> 0x0041 \}]\l0x000d: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\lSplitter:B:7:0x0012\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0012\l|0x0012: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x0018 \}, TRY_ENTER]\l0x0014: INVOKE  (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.trimToSize():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0018 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|SYNTHETIC\lSplitter:B:10:0x0018\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0018\l|0x0018: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ all \-\> 0x0041 \}, ExcHandler: IOException null, TRY_ENTER]\l0x001a: IPUT  (r2 I:boolean), (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.mostRecentTrimFailed boolean A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\lSplitter:B:12:0x001c\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x001c\l|0x001c: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x002f \}, TRY_ENTER]\l0x001e: INVOKE  (r1 I:boolean) = (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.journalRebuildRequired():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x002f \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003f A[Catch:\{ IOException \-\> 0x002f \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x002f \}]\l0x0026: INVOKE  (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.rebuildJournal():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002f \}]\l0x0029: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x002f \}]\l0x002b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x002f \}]\l0x002c: IPUT  (r3 I:int), (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.redundantOpCount int A[Catch:\{ IOException \-\> 0x002f \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|SYNTHETIC\lSplitter:B:17:0x002f\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x002f\l|0x002f: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ all \-\> 0x0041 \}, ExcHandler: IOException null, TRY_ENTER]\l0x0031: IPUT  (r2 I:boolean), (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.mostRecentRebuildFailed boolean A[Catch:\{ all \-\> 0x0041 \}]\l0x0033: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.internal.cache.DiskLruCache$1) okhttp3.internal.cache.DiskLruCache.1.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ all \-\> 0x0041 \}]\l0x0035: INVOKE  (r2 I:okio.Sink) =  okio.Okio.blackhole():okio.Sink type: STATIC A[Catch:\{ all \-\> 0x0041 \}]\l0x0039: INVOKE  (r2 I:okio.BufferedSink) = (r2 I:okio.Sink) okio.Okio.buffer(okio.Sink):okio.BufferedSink type: STATIC A[Catch:\{ all \-\> 0x0041 \}]\l0x003d: IPUT  \l  (r2 I:okio.BufferedSink)\l  (r1 I:okhttp3.internal.cache.DiskLruCache)\l okhttp3.internal.cache.DiskLruCache.journalWriter okio.BufferedSink A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: RETURN   A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0041: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0043|0x0043: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache.DiskLruCache.1.run((r4 'this' I:okhttp3.internal.cache.DiskLruCache$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_12;
Node_10 -> Node_11;
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_19;
Node_17 -> Node_18;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

