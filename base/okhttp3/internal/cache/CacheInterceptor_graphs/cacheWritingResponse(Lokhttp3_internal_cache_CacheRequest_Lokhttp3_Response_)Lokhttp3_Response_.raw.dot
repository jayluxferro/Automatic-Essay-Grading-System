digraph "CFG forokhttp3.internal.cache.CacheInterceptor.cacheWritingResponse(Lokhttp3\/internal\/cache\/CacheRequest;Lokhttp3\/Response;)Lokhttp3\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN  (r6 I:okhttp3.Response) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r0 I:okio.Sink) = (r5 I:okhttp3.internal.cache.CacheRequest) okhttp3.internal.cache.CacheRequest.body():okio.Sink type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN  (r6 I:okhttp3.Response) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: INVOKE  (r1 I:okhttp3.ResponseBody) = (r6 I:okhttp3.Response) okhttp3.Response.body():okhttp3.ResponseBody type: VIRTUAL \l0x000e: INVOKE  (r1 I:okio.BufferedSource) = (r1 I:okhttp3.ResponseBody) okhttp3.ResponseBody.source():okio.BufferedSource type: VIRTUAL \l0x0012: INVOKE  (r0 I:okio.BufferedSink) = (r0 I:okio.Sink) okio.Okio.buffer(okio.Sink):okio.BufferedSink type: STATIC \l0x0016: NEW_INSTANCE  (r2 I:okhttp3.internal.cache.CacheInterceptor$1) =  okhttp3.internal.cache.CacheInterceptor$1 \l0x0018: INVOKE  \l  (r2 I:okhttp3.internal.cache.CacheInterceptor$1)\l  (r4 I:okhttp3.internal.cache.CacheInterceptor)\l  (r1 I:okio.BufferedSource)\l  (r5 I:okhttp3.internal.cache.CacheRequest)\l  (r0 I:okio.BufferedSink)\l okhttp3.internal.cache.CacheInterceptor.1.\<init\>(okhttp3.internal.cache.CacheInterceptor, okio.BufferedSource, okhttp3.internal.cache.CacheRequest, okio.BufferedSink):void type: DIRECT \l0x001b: CONST_STR  (r5 I:java.lang.String) =  \"Content\-Type\" \l0x001d: INVOKE  (r5 I:java.lang.String) = (r6 I:okhttp3.Response), (r5 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r0 I:okhttp3.ResponseBody) = (r6 I:okhttp3.Response) okhttp3.Response.body():okhttp3.ResponseBody type: VIRTUAL \l0x0025: INVOKE  (r0 I:long) = (r0 I:okhttp3.ResponseBody) okhttp3.ResponseBody.contentLength():long type: VIRTUAL \l0x0029: INVOKE  (r6 I:okhttp3.Response$Builder) = (r6 I:okhttp3.Response) okhttp3.Response.newBuilder():okhttp3.Response$Builder type: VIRTUAL \l0x002d: NEW_INSTANCE  (r3 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x002f: INVOKE  (r2 I:okio.BufferedSource) = (r2 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0033: INVOKE  \l  (r3 I:okhttp3.internal.http.RealResponseBody)\l  (r5 I:java.lang.String)\l  (r0 I:long)\l  (r2 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l0x0036: INVOKE  (r5 I:okhttp3.Response$Builder) = \l  (r6 I:okhttp3.Response$Builder)\l  (r3 I:okhttp3.ResponseBody)\l okhttp3.Response.Builder.body(okhttp3.ResponseBody):okhttp3.Response$Builder type: VIRTUAL \l0x003a: INVOKE  (r5 I:okhttp3.Response) = (r5 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: RETURN  (r5 I:okhttp3.Response) \l}"];
MethodNode[shape=record,label="{private okhttp3.Response okhttp3.internal.cache.CacheInterceptor.cacheWritingResponse((r4 'this' I:okhttp3.internal.cache.CacheInterceptor A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.cache.CacheRequest A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

