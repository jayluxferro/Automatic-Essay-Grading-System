digraph "CFG forokhttp3.internal.cache.CacheInterceptor.combine(Lokhttp3\/Headers;Lokhttp3\/Headers;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.Headers$Builder r0 = new okhttp3.Headers.Builder()\lint r1 = r7.size()\lr2 = 0\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v5 int) binds: [B:0:0x0000, B:13:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:13:0x003d\l|if (r3 \>= r1) goto L_0x0040\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|java.lang.String r4 = r7.name(r3)\ljava.lang.String r5 = r7.value(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|if (p004ar.com.hjg.pngj.chunks.PngChunkTextVar.KEY_Warning.equalsIgnoreCase(r4) == false) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d}"];
Node_5 [shape=record,label="{5\:\ 0x0023|if (r5.startsWith(\"1\") == false) goto L_0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026}"];
Node_7 [shape=record,label="{7\:\ 0x002a|if (isContentSpecificHeader(r4) != false) goto L_0x0038\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c}"];
Node_9 [shape=record,label="{9\:\ 0x0030|if (isEndToEnd(r4) == false) goto L_0x0038\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032}"];
Node_11 [shape=record,label="{11\:\ 0x0036|if (r8.get(r4) != null) goto L_0x003d\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|okhttp3.internal.Internal.instance.addLenient(r0, r4, r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:13:0x003d\l|int r3 = r3 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|int r7 = r8.size()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:14:0x0040, B:21:0x005f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:15:0x0044\-\>B:21:0x005f\l|if (r2 \>= r7) goto L_0x0062\l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|java.lang.String r1 = r8.name(r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|if (isContentSpecificHeader(r1) != false) goto L_0x005f\l}"];
Node_18 [shape=record,label="{18\:\ 0x0050}"];
Node_19 [shape=record,label="{19\:\ 0x0054|if (isEndToEnd(r1) == false) goto L_0x005f\l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|okhttp3.internal.Internal.instance.addLenient(r0, r1, r8.value(r2))\l}"];
Node_21 [shape=record,label="{21\:\ 0x005f|LOOP_END\lLOOP:1: B:15:0x0044\-\>B:21:0x005f\l|int r2 = r2 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0062}"];
Node_23 [shape=record,label="{23\:\ 0x0066|RETURN\l|return r0.build()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0040|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x003d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x003d|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0062|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x005f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x005f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x005f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static okhttp3.Headers okhttp3.internal.cache.CacheInterceptor.combine((r7v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_27[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_26;
Node_12 -> Node_25;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_28;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_30;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_29;
Node_21 -> Node_15;
Node_22 -> Node_23;
Node_24 -> Node_14;
Node_25 -> Node_13;
Node_26 -> Node_13;
Node_27 -> Node_13;
Node_28 -> Node_22;
Node_29 -> Node_21;
Node_30 -> Node_21;
Node_31 -> Node_21;
}

