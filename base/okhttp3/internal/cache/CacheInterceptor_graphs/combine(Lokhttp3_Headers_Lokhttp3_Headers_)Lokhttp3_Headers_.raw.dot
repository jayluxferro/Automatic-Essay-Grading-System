digraph "CFG forokhttp3.internal.cache.CacheInterceptor.combine(Lokhttp3\/Headers;Lokhttp3\/Headers;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0002: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r7 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r4 I:java.lang.String) = (r7 I:okhttp3.Headers), (r3 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r5 I:java.lang.String) = (r7 I:okhttp3.Headers), (r3 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x0015: CONST_STR  (r6 I:java.lang.String) =  \"Warning\" \l0x0017: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: CONST_STR  (r6 I:java.lang.String) =  \"1\" \l0x001f: INVOKE  (r6 I:boolean) = (r5 I:java.lang.String), (r6 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r6 I:boolean) = (r4 I:java.lang.String) okhttp3.internal.cache.CacheInterceptor.isContentSpecificHeader(java.lang.String):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: INVOKE  (r6 I:boolean) = (r4 I:java.lang.String) okhttp3.internal.cache.CacheInterceptor.isEndToEnd(java.lang.String):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: INVOKE  (r6 I:java.lang.String) = (r8 I:okhttp3.Headers), (r4 I:java.lang.String) okhttp3.Headers.get(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: SGET  (r6 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x003a: INVOKE  \l  (r6 I:okhttp3.internal.Internal)\l  (r0 I:okhttp3.Headers$Builder)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l okhttp3.internal.Internal.addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: INVOKE  (r7 I:int) = (r8 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IF  (r2 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:23:0x0062 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: INVOKE  (r1 I:java.lang.String) = (r8 I:okhttp3.Headers), (r2 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x004a: INVOKE  (r3 I:boolean) = (r1 I:java.lang.String) okhttp3.internal.cache.CacheInterceptor.isContentSpecificHeader(java.lang.String):boolean type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: INVOKE  (r3 I:boolean) = (r1 I:java.lang.String) okhttp3.internal.cache.CacheInterceptor.isEndToEnd(java.lang.String):boolean type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005f \l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: SGET  (r3 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0058: INVOKE  (r4 I:java.lang.String) = (r8 I:okhttp3.Headers), (r2 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x005c: INVOKE  \l  (r3 I:okhttp3.internal.Internal)\l  (r0 I:okhttp3.Headers$Builder)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.internal.Internal.addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|0x005f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: INVOKE  (r7 I:okhttp3.Headers) = (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: RETURN  (r7 I:okhttp3.Headers) \l}"];
MethodNode[shape=record,label="{private static okhttp3.Headers okhttp3.internal.cache.CacheInterceptor.combine((r7 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_14[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_16;
Node_23 -> Node_24;
}

