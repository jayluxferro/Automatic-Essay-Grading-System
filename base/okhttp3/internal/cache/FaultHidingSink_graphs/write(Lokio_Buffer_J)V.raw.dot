digraph "CFG forokhttp3.internal.cache.FaultHidingSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.cache.FaultHidingSink) okhttp3.internal.cache.FaultHidingSink.hasErrors boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:okio.Buffer), (r3 I:long) okio.Buffer.skip(long):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|SYNTHETIC\lSplitter:B:4:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0008\l|0x0008: INVOKE  (r1 I:okio.ForwardingSink), (r2 I:okio.Buffer), (r3 I:long) okio.ForwardingSink.write(okio.Buffer, long):void type: SUPER A[Catch:\{ IOException \-\> 0x000c \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|ExcHandler: IOException null\lSplitter:B:4:0x0008\l|0x000c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: IPUT  \l  (r3 I:boolean)\l  (r1 I:okhttp3.internal.cache.FaultHidingSink)\l okhttp3.internal.cache.FaultHidingSink.hasErrors boolean \l0x0010: INVOKE  \l  (r1 I:okhttp3.internal.cache.FaultHidingSink)\l  (r2 I:java.io.IOException)\l okhttp3.internal.cache.FaultHidingSink.onException(java.io.IOException):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache.FaultHidingSink.write((r1 'this' I:okhttp3.internal.cache.FaultHidingSink A[IMMUTABLE_TYPE, THIS]), (r2 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

