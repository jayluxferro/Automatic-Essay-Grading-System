digraph "CFG forokhttp3.internal.cache.CacheStrategy.Factory.\<init\>(JLokhttp3\/Request;Lokhttp3\/Response;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: IPUT  \l  (r0 I:int)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.ageSeconds int \l0x0006: IPUT  \l  (r4 I:long)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.nowMillis long \l0x0008: IPUT  \l  (r6 I:okhttp3.Request)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x000a: IPUT  \l  (r7 I:okhttp3.Response)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x007a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r4 I:long) = (r7 I:okhttp3.Response) okhttp3.Response.sentRequestAtMillis():long type: VIRTUAL \l0x0012: IPUT  \l  (r4 I:long)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.sentRequestMillis long \l0x0014: INVOKE  (r4 I:long) = (r7 I:okhttp3.Response) okhttp3.Response.receivedResponseAtMillis():long type: VIRTUAL \l0x0018: IPUT  \l  (r4 I:long)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.receivedResponseMillis long \l0x001a: INVOKE  (r4 I:okhttp3.Headers) = (r7 I:okhttp3.Response) okhttp3.Response.headers():okhttp3.Headers type: VIRTUAL \l0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  (r6 I:int) = (r4 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:20:0x007a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: INVOKE  (r7 I:java.lang.String) = (r4 I:okhttp3.Headers), (r5 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r1 I:java.lang.String) = (r4 I:okhttp3.Headers), (r5 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x002d: CONST_STR  (r2 I:java.lang.String) =  \"Date\" \l0x002f: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: INVOKE  (r7 I:java.util.Date) = (r1 I:java.lang.String) okhttp3.internal.http.HttpDate.parse(java.lang.String):java.util.Date type: STATIC \l0x0039: IPUT  \l  (r7 I:java.util.Date)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.servedDate java.util.Date \l0x003b: IPUT  \l  (r1 I:java.lang.String)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.servedDateString java.lang.String \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: CONST_STR  (r2 I:java.lang.String) =  \"Expires\" \l0x0040: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: INVOKE  (r7 I:java.util.Date) = (r1 I:java.lang.String) okhttp3.internal.http.HttpDate.parse(java.lang.String):java.util.Date type: STATIC \l0x004a: IPUT  \l  (r7 I:java.util.Date)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.expires java.util.Date \l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|0x004d: CONST_STR  (r2 I:java.lang.String) =  \"Last\-Modified\" \l0x004f: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|0x0053: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: INVOKE  (r7 I:java.util.Date) = (r1 I:java.lang.String) okhttp3.internal.http.HttpDate.parse(java.lang.String):java.util.Date type: STATIC \l0x0059: IPUT  \l  (r7 I:java.util.Date)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.lastModified java.util.Date \l0x005b: IPUT  \l  (r1 I:java.lang.String)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.lastModifiedString java.lang.String \l}"];
Node_13 [shape=record,label="{13\:\ 0x005e|0x005e: CONST_STR  (r2 I:java.lang.String) =  \"ETag\" \l0x0060: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0069 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|0x0066: IPUT  \l  (r1 I:java.lang.String)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.etag java.lang.String \l}"];
Node_16 [shape=record,label="{16\:\ 0x0069|0x0069: CONST_STR  (r2 I:java.lang.String) =  \"Age\" \l0x006b: INVOKE  (r7 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x006f|0x006f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0077 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0071|0x0071: INVOKE  (r7 I:int) = (r1 I:java.lang.String), (r0 I:int) okhttp3.internal.http.HttpHeaders.parseSeconds(java.lang.String, int):int type: STATIC \l0x0075: IPUT  \l  (r7 I:int)\l  (r3 I:okhttp3.internal.cache.CacheStrategy$Factory)\l okhttp3.internal.cache.CacheStrategy.Factory.ageSeconds int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0077|0x0077: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x007a|0x007a: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache.CacheStrategy.Factory.\<init\>((r3 'this' I:okhttp3.internal.cache.CacheStrategy$Factory A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_19;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_3;
}

