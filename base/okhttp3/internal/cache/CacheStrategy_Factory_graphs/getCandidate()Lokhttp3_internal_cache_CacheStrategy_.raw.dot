digraph "CFG forokhttp3.internal.cache.CacheStrategy.Factory.getCandidate()Lokhttp3\/internal\/cache\/CacheStrategy;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x0007: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0009: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r2 I:okhttp3.Request)\l  (r1 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r0 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x000f: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.Request) okhttp3.Request.isHttps():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IGET  (r0 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x0017: INVOKE  (r0 I:okhttp3.Handshake) = (r0 I:okhttp3.Response) okhttp3.Response.handshake():okhttp3.Handshake type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x001f: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0021: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r2 I:okhttp3.Request)\l  (r1 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IGET  (r0 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x0027: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0029: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.Response), (r2 I:okhttp3.Request) okhttp3.internal.cache.CacheStrategy.isCacheable(okhttp3.Response, okhttp3.Request):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x0031: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0033: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r2 I:okhttp3.Request)\l  (r1 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: IGET  (r0 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0039: INVOKE  (r0 I:okhttp3.CacheControl) = (r0 I:okhttp3.Request) okhttp3.Request.cacheControl():okhttp3.CacheControl type: VIRTUAL \l0x003d: INVOKE  (r2 I:boolean) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.noCache():boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0131 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0045: INVOKE  (r2 I:boolean) = (r2 I:okhttp3.Request) okhttp3.internal.cache.CacheStrategy.Factory.hasConditions(okhttp3.Request):boolean type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004d \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: IGET  (r2 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x004f: INVOKE  (r2 I:okhttp3.CacheControl) = (r2 I:okhttp3.Response) okhttp3.Response.cacheControl():okhttp3.CacheControl type: VIRTUAL \l0x0053: INVOKE  (r3 I:boolean) = (r2 I:okhttp3.CacheControl) okhttp3.CacheControl.immutable():boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0061 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|0x0059: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x005b: IGET  (r2 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x005d: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r1 I:okhttp3.Request)\l  (r2 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0060|0x0060: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|0x0061: INVOKE  (r3 I:long) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponseAge():long type: DIRECT \l0x0065: INVOKE  (r5 I:long) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.computeFreshnessLifetime():long type: DIRECT \l0x0069: INVOKE  (r7 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.maxAgeSeconds():int type: VIRTUAL \l0x006d: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x006e|0x006e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007f \l}"];
Node_25 [shape=record,label="{25\:\ 0x0070|0x0070: SGET  (r7 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x0072: INVOKE  (r9 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.maxAgeSeconds():int type: VIRTUAL \l0x0076: CAST  (r9 I:long) = (long) (r9 I:int) \l0x0077: INVOKE  (r9 I:long) = (r7 I:java.util.concurrent.TimeUnit), (r9 I:long) java.util.concurrent.TimeUnit.toMillis(long):long type: VIRTUAL \l0x007b: INVOKE  (r5 I:long) = (r5 I:long), (r9 I:long) java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x007f|0x007f: INVOKE  (r7 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.minFreshSeconds():int type: VIRTUAL \l0x0083: CONST  (r9 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0085|0x0085: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0093 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0087|0x0087: SGET  (r7 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x0089: INVOKE  (r11 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.minFreshSeconds():int type: VIRTUAL \l0x008d: CAST  (r11 I:long) = (long) (r11 I:int) \l0x008e: INVOKE  (r11 I:long) = (r7 I:java.util.concurrent.TimeUnit), (r11 I:long) java.util.concurrent.TimeUnit.toMillis(long):long type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0093|0x0093: MOVE  (r11 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0094|0x0094: INVOKE  (r7 I:boolean) = (r2 I:okhttp3.CacheControl) okhttp3.CacheControl.mustRevalidate():boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0098|0x0098: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00ab \l}"];
Node_32 [shape=record,label="{32\:\ 0x009a|0x009a: INVOKE  (r7 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.maxStaleSeconds():int type: VIRTUAL \l}"];
Node_33 [shape=record,label="{33\:\ 0x009e|0x009e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00ab \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a0|0x00a0: SGET  (r7 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x00a2: INVOKE  (r0 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.maxStaleSeconds():int type: VIRTUAL \l0x00a6: CAST  (r8 I:long) = (long) (r0 I:int) \l0x00a7: INVOKE  (r9 I:long) = (r7 I:java.util.concurrent.TimeUnit), (r8 I:long) java.util.concurrent.TimeUnit.toMillis(long):long type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ab|0x00ab: INVOKE  (r0 I:boolean) = (r2 I:okhttp3.CacheControl) okhttp3.CacheControl.noCache():boolean type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00af|0x00af: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00e6 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b1|0x00b1: ARITH  (r11 I:long) = (r11 I:long) + (r3 I:long) \l0x00b2: ARITH  (r9 I:long) = (r9 I:long) + (r5 I:long) \l0x00b3: CMP_L  (r0 I:int) = (r11 I:long), (r9 I:long) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b5|0x00b5: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:49:0x00e6 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b7|0x00b7: IGET  (r0 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x00b9: INVOKE  (r0 I:okhttp3.Response$Builder) = (r0 I:okhttp3.Response) okhttp3.Response.newBuilder():okhttp3.Response$Builder type: VIRTUAL \l0x00bd: CMP_L  (r2 I:int) = (r11 I:long), (r5 I:long) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00bf|0x00bf: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:42:0x00c8 \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c1|0x00c1: CONST_STR  (r2 I:java.lang.String) =  \"Warning\" \l0x00c3: CONST_STR  (r5 I:java.lang.String) =  \"110 HttpURLConnection \"Response is stale\"\" \l0x00c5: INVOKE  \l  (r0 I:okhttp3.Response$Builder)\l  (r2 I:java.lang.String)\l  (r5 I:java.lang.String)\l okhttp3.Response.Builder.addHeader(java.lang.String, java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l}"];
Node_42 [shape=record,label="{42\:\ 0x00c8|0x00c8: CONST  (r5 I:?[long, double]) = \l  (86400000(0x5265c00, double:4.2687272E\-316) ?[long, double])\l \l0x00cb: CMP_L  (r2 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_43 [shape=record,label="{43\:\ 0x00cd|0x00cd: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:47:0x00dc \l}"];
Node_44 [shape=record,label="{44\:\ 0x00cf|0x00cf: INVOKE  (r2 I:boolean) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.isFreshnessLifetimeHeuristic():boolean type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d3|0x00d3: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00dc \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d5|0x00d5: CONST_STR  (r2 I:java.lang.String) =  \"Warning\" \l0x00d7: CONST_STR  (r3 I:java.lang.String) =  \"113 HttpURLConnection \"Heuristic expiration\"\" \l0x00d9: INVOKE  \l  (r0 I:okhttp3.Response$Builder)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l okhttp3.Response.Builder.addHeader(java.lang.String, java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l}"];
Node_47 [shape=record,label="{47\:\ 0x00dc|0x00dc: NEW_INSTANCE  (r2 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x00de: INVOKE  (r0 I:okhttp3.Response) = (r0 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l0x00e2: INVOKE  \l  (r2 I:okhttp3.internal.cache.CacheStrategy)\l  (r1 I:okhttp3.Request)\l  (r0 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_48 [shape=record,label="{48\:\ 0x00e5|0x00e5: RETURN  (r2 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00e6|0x00e6: IGET  (r0 I:java.lang.String) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.etag java.lang.String \l}"];
Node_50 [shape=record,label="{50\:\ 0x00e8|0x00e8: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x00ef \l}"];
Node_51 [shape=record,label="{51\:\ 0x00ea|0x00ea: CONST_STR  (r0 I:java.lang.String) =  \"If\-None\-Match\" \l0x00ec: IGET  (r1 I:java.lang.String) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.etag java.lang.String \l}"];
Node_52 [shape=record,label="{52\:\ 0x00ef|0x00ef: IGET  (r0 I:java.util.Date) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.lastModified java.util.Date \l}"];
Node_53 [shape=record,label="{53\:\ 0x00f1|0x00f1: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00f8 \l}"];
Node_54 [shape=record,label="{54\:\ 0x00f3|0x00f3: CONST_STR  (r0 I:java.lang.String) =  \"If\-Modified\-Since\" \l0x00f5: IGET  (r1 I:java.lang.String) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.lastModifiedString java.lang.String \l}"];
Node_55 [shape=record,label="{55\:\ 0x00f8|0x00f8: IGET  (r0 I:java.util.Date) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.servedDate java.util.Date \l}"];
Node_56 [shape=record,label="{56\:\ 0x00fa|0x00fa: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0129 \l}"];
Node_57 [shape=record,label="{57\:\ 0x00fc|0x00fc: CONST_STR  (r0 I:java.lang.String) =  \"If\-Modified\-Since\" \l0x00fe: IGET  (r1 I:java.lang.String) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.servedDateString java.lang.String \l}"];
Node_58 [shape=record,label="{58\:\ 0x0100|0x0100: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0102: INVOKE  (r2 I:okhttp3.Headers) = (r2 I:okhttp3.Request) okhttp3.Request.headers():okhttp3.Headers type: VIRTUAL \l0x0106: INVOKE  (r2 I:okhttp3.Headers$Builder) = (r2 I:okhttp3.Headers) okhttp3.Headers.newBuilder():okhttp3.Headers$Builder type: VIRTUAL \l0x010a: SGET  (r3 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x010c: INVOKE  \l  (r3 I:okhttp3.internal.Internal)\l  (r2 I:okhttp3.Headers$Builder)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l okhttp3.internal.Internal.addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String):void type: VIRTUAL \l0x010f: IGET  (r0 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0111: INVOKE  (r0 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request) okhttp3.Request.newBuilder():okhttp3.Request$Builder type: VIRTUAL \l0x0115: INVOKE  (r1 I:okhttp3.Headers) = (r2 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l0x0119: INVOKE  (r0 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request$Builder), (r1 I:okhttp3.Headers) okhttp3.Request.Builder.headers(okhttp3.Headers):okhttp3.Request$Builder type: VIRTUAL \l0x011d: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x0121: NEW_INSTANCE  (r1 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x0123: IGET  (r2 I:okhttp3.Response) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x0125: INVOKE  \l  (r1 I:okhttp3.internal.cache.CacheStrategy)\l  (r0 I:okhttp3.Request)\l  (r2 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_59 [shape=record,label="{59\:\ 0x0128|0x0128: RETURN  (r1 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0129|0x0129: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x012b: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x012d: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r2 I:okhttp3.Request)\l  (r1 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_61 [shape=record,label="{61\:\ 0x0130|0x0130: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0131|0x0131: NEW_INSTANCE  (r0 I:okhttp3.internal.cache.CacheStrategy) =  okhttp3.internal.cache.CacheStrategy \l0x0133: IGET  (r2 I:okhttp3.Request) = (r13 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.request okhttp3.Request \l0x0135: INVOKE  \l  (r0 I:okhttp3.internal.cache.CacheStrategy)\l  (r2 I:okhttp3.Request)\l  (r1 I:okhttp3.Response)\l okhttp3.internal.cache.CacheStrategy.\<init\>(okhttp3.Request, okhttp3.Response):void type: DIRECT \l}"];
Node_63 [shape=record,label="{63\:\ 0x0138|0x0138: RETURN  (r0 I:okhttp3.internal.cache.CacheStrategy) \l}"];
MethodNode[shape=record,label="{private okhttp3.internal.cache.CacheStrategy okhttp3.internal.cache.CacheStrategy.Factory.getCandidate((r13 'this' I:okhttp3.internal.cache.CacheStrategy$Factory A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_62;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_62[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_49;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_49;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_58;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_58;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_60;
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_60 -> Node_61;
Node_62 -> Node_63;
}

