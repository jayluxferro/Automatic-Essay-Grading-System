digraph "CFG forokhttp3.internal.cache.CacheStrategy.Factory.isFreshnessLifetimeHeuristic()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Response) = (r2 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.cacheResponse okhttp3.Response \l0x0002: INVOKE  (r0 I:okhttp3.CacheControl) = (r0 I:okhttp3.Response) okhttp3.Response.cacheControl():okhttp3.CacheControl type: VIRTUAL \l0x0006: INVOKE  (r0 I:int) = (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.maxAgeSeconds():int type: VIRTUAL \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r0 I:java.util.Date) = (r2 I:okhttp3.internal.cache.CacheStrategy$Factory) okhttp3.internal.cache.CacheStrategy.Factory.expires java.util.Date \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.cache.CacheStrategy.Factory.isFreshnessLifetimeHeuristic((r2 'this' I:okhttp3.internal.cache.CacheStrategy$Factory A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

