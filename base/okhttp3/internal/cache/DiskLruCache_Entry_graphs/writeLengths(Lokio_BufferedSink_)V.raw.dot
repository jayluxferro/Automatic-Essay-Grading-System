digraph "CFG forokhttp3.internal.cache.DiskLruCache.Entry.writeLengths(Lokio\/BufferedSink;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long[]) = (r6 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.lengths long[] \l0x0002: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: AGET  (r3 I:?[long, double]) = (r0 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x000a: INVOKE  (r5 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r5 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x000e: INVOKE  (r5 I:okio.BufferedSink), (r3 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x0011: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.cache.DiskLruCache.Entry.writeLengths((r6 'this' I:okhttp3.internal.cache.DiskLruCache$Entry A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

