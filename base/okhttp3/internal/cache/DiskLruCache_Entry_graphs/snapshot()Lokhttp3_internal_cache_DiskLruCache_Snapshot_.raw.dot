digraph "CFG forokhttp3.internal.cache.DiskLruCache.Entry.snapshot()Lokhttp3\/internal\/cache\/DiskLruCache$Snapshot;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object) java.lang.Thread.holdsLock(java.lang.Object):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0057 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache \l0x000a: IGET  (r0 I:int) = (r0 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.valueCount int \l0x000c: NEW_ARRAY  (r0 I:okio.Source[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okio.Source[] \l0x000e: IGET  (r1 I:long[]) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.lengths long[] \l0x0010: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x0014: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0015: CHECK_CAST  (r7 I:long[]) = (long[]) (r7 I:?[OBJECT, ARRAY]) \l0x0017: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|SYNTHETIC\lSplitter:B:3:0x0019\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0019\l|0x0019: IGET  (r2 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ FileNotFoundException \-\> 0x003e \}, TRY_ENTER]\l0x001b: IGET  (r2 I:int) = (r2 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.valueCount int A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0030 A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IGET  (r2 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0021: IGET  (r2 I:okhttp3.internal.io.FileSystem) = (r2 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.fileSystem okhttp3.internal.io.FileSystem A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0023: IGET  (r3 I:java.io.File[]) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.cleanFiles java.io.File[] A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0025: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0027: INVOKE  (r2 I:okio.Source) = (r2 I:okhttp3.internal.io.FileSystem), (r3 I:java.io.File) okhttp3.internal.io.FileSystem.source(java.io.File):okio.Source type: INTERFACE A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x002b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x002d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x002f: GOTO  \-\> 0x0019 A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: NEW_INSTANCE  (r9 I:okhttp3.internal.cache.DiskLruCache$Snapshot) =  okhttp3.internal.cache.DiskLruCache$Snapshot A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0032: IGET  (r2 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0034: IGET  (r3 I:java.lang.String) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.key java.lang.String A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0036: IGET  (r4 I:long) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.sequenceNumber long A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0038: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x0039: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ FileNotFoundException \-\> 0x003e \}]\l0x003a: INVOKE  \l  (r1 I:okhttp3.internal.cache.DiskLruCache$Snapshot)\l  (r2 I:okhttp3.internal.cache.DiskLruCache)\l  (r3 I:java.lang.String)\l  (r4 I:long)\l  (r6 I:okio.Source[])\l  (r7 I:long[])\l okhttp3.internal.cache.DiskLruCache.Snapshot.\<init\>(okhttp3.internal.cache.DiskLruCache, java.lang.String, long, okio.Source[], long[]):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: RETURN  (r9 I:okhttp3.internal.cache.DiskLruCache$Snapshot) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache \l0x0040: IGET  (r1 I:int) = (r1 I:okhttp3.internal.cache.DiskLruCache) okhttp3.internal.cache.DiskLruCache.valueCount int \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: FileNotFoundException null\lSplitter:B:3:0x0019\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: IF  (r8 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: AGET  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: AGET  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x004a: INVOKE  (r1 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l0x004d: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|SYNTHETIC\lSplitter:B:15:0x0050\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0050\l|0x0050: IGET  (r0 I:okhttp3.internal.cache.DiskLruCache) = (r10 I:okhttp3.internal.cache.DiskLruCache$Entry) okhttp3.internal.cache.DiskLruCache.Entry.this$0 okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x0055 \}, TRY_ENTER]\l0x0052: INVOKE  \l  (r0 I:okhttp3.internal.cache.DiskLruCache)\l  (r10 I:okhttp3.internal.cache.DiskLruCache$Entry)\l okhttp3.internal.cache.DiskLruCache.removeEntry(okhttp3.internal.cache.DiskLruCache$Entry):boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:15:0x0050\l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|0x0056: RETURN  (r0 I:okhttp3.internal.cache.DiskLruCache$Snapshot) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0059: INVOKE  (r0 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|0x005c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{okhttp3.internal.cache.DiskLruCache$Snapshot okhttp3.internal.cache.DiskLruCache.Entry.snapshot((r10 'this' I:okhttp3.internal.cache.DiskLruCache$Entry A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_9;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_17;
Node_20 -> Node_21;
}

