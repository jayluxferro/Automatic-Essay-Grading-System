digraph "CFG forokhttp3.internal.http2.Http2Reader.readHeaders(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 == 0) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if ((r6 & 1) == 0) goto L_0x0009\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|r1 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|r1 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v2 boolean), (r1v3 boolean) binds: [B:5:0x0009, B:4:0x0007] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|if ((r6 & 8) == 0) goto L_0x0017\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|short r0 = (short) (r3.source.readByte() & 255)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|PHI: r0 \l  PHI: (r0v1 short) = (r0v0 short), (r0v5 short) binds: [B:7:0x000c, B:8:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|if ((r6 & 32) == 0) goto L_0x0020\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|readPriority(r4, r7)\lint r5 = r5 + \-5\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|PHI: r5 \l  PHI: (r5v2 int) = (r5v0 int), (r5v5 int) binds: [B:10:0x0019, B:11:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|r4.headers(r1, r7, \-1, readHeaderBlock(lengthWithoutPadding(r5, r6, r0), r0, r6, r7))\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d}"];
Node_15 [shape=record,label="{15\:\ 0x0035|throw okhttp3.internal.http2.Http2.ioException(\"PROTOCOL_ERROR: TYPE_HEADERS streamId == 0\", new java.lang.Object[0])\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readHeaders((r3v0 'this' okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r4v0 okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

