digraph "CFG forokhttp3.internal.http2.Http2Reader.readPing(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r5 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x000a: INVOKE  (r5 I:int) = (r5 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x000e: IGET  (r7 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0010: INVOKE  (r7 I:int) = (r7 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x0014: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r0 I:boolean)\l  (r5 I:int)\l  (r7 I:int)\l okhttp3.internal.http2.Http2Reader.Handler.ping(boolean, int, int):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001e: CONST_STR  (r5 I:java.lang.String) =  \"TYPE_PING streamId != 0\" \l0x0020: INVOKE  (r4 I:java.io.IOException) = (r5 I:java.lang.String), (r4 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0027: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x002b: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"TYPE_PING length != 8: %s\" \l0x002f: INVOKE  (r4 I:java.io.IOException) = (r5 I:java.lang.String), (r4 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readPing((r3 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

