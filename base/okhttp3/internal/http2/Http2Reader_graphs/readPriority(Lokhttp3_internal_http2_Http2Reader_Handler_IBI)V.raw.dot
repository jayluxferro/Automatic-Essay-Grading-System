digraph "CFG forokhttp3.internal.http2.Http2Reader.readPriority(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  \l  (r1 I:okhttp3.internal.http2.Http2Reader)\l  (r2 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r5 I:int)\l okhttp3.internal.http2.Http2Reader.readPriority(okhttp3.internal.http2.Http2Reader$Handler, int):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000c: CONST_STR  (r3 I:java.lang.String) =  \"TYPE_PRIORITY streamId == 0\" \l0x000e: INVOKE  (r2 I:java.io.IOException) = (r3 I:java.lang.String), (r2 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0014: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0016: INVOKE  (r3 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001a: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x001c: CONST_STR  (r3 I:java.lang.String) =  \"TYPE_PRIORITY length: %d != 5\" \l0x001e: INVOKE  (r2 I:java.io.IOException) = (r3 I:java.lang.String), (r2 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readPriority((r1 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r2 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

