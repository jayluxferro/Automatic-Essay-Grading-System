digraph "CFG forokhttp3.internal.http2.Http2Reader.readSettings(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0085 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (r9 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r6 I:okhttp3.internal.http2.Http2Reader$Handler) okhttp3.internal.http2.Http2Reader.Handler.ackSettings():void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000f: CONST_STR  (r7 I:java.lang.String) =  \"FRAME_SIZE_ERROR ack frame should be empty!\" \l0x0011: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: ARITH  (r8 I:int) = (r7 I:int) % (6 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0076 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: NEW_INSTANCE  (r8 I:okhttp3.internal.http2.Settings) =  okhttp3.internal.http2.Settings \l0x001c: INVOKE  (r8 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.\<init\>():void type: DIRECT \l0x001f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IF  (r1 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:35:0x0072 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IGET  (r2 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0024: INVOKE  (r2 I:short) = (r2 I:okio.BufferedSource) okio.BufferedSource.readShort():short type: INTERFACE \l0x0028: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (65535(0xffff, float:9.1834E\-41) ?[int, float, short, byte, char])\l \l0x002b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (r3 I:?[int, boolean, short, byte, char]) \l0x002c: IGET  (r3 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x002e: INVOKE  (r3 I:int) = (r3 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6] t:[0x006c, 0x005e, 0x005c, 0x004f, 0x0036, 0x006c] \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:21:0x0040 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (16777215(0xffffff, float:2.3509886E\-38) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:21:0x0040 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r9 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0042: INVOKE  (r7 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0046: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0048: CONST_STR  (r7 I:java.lang.String) =  \"PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s\" \l0x004a: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|0x0050: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:26:0x0053 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0053|0x0053: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0055: CONST_STR  (r7 I:java.lang.String) =  \"PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE \> 2^31 \- 1\" \l0x0057: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|0x005b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x005c|0x005c: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x005e|0x005e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x006c \l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|0x0060: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0063 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0063|0x0063: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0065: CONST_STR  (r7 I:java.lang.String) =  \"PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1\" \l0x0067: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x006b|0x006b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x006c|0x006c: INVOKE  \l  (r8 I:okhttp3.internal.http2.Settings)\l  (r2 I:int)\l  (r3 I:int)\l okhttp3.internal.http2.Settings.set(int, int):okhttp3.internal.http2.Settings type: VIRTUAL \l0x006f: ARITH  (r1 I:int) = (r1 I:int) + (6 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0072|0x0072: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r0 I:boolean)\l  (r8 I:okhttp3.internal.http2.Settings)\l okhttp3.internal.http2.Http2Reader.Handler.settings(boolean, okhttp3.internal.http2.Settings):void type: INTERFACE \l}"];
Node_36 [shape=record,label="{36\:\ 0x0075|0x0075: RETURN   \l}"];
Node_37 [shape=record,label="{37\:\ 0x0076|0x0076: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r9 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0078: INVOKE  (r7 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x007c: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x007e: CONST_STR  (r7 I:java.lang.String) =  \"TYPE_SETTINGS length %% 6 != 0: %s\" \l0x0080: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_38 [shape=record,label="{38\:\ 0x0084|0x0084: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0085|0x0085: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0087: CONST_STR  (r7 I:java.lang.String) =  \"TYPE_SETTINGS streamId != 0\" \l0x0089: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_40 [shape=record,label="{40\:\ 0x008d|0x008d: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readSettings((r5 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r6 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_39;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_37;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_35;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_23;
Node_14 -> Node_28;
Node_14 -> Node_29;
Node_14 -> Node_34;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_34[style=dashed];
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_34[style=dashed];
Node_26 -> Node_27;
Node_28 -> Node_34;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_32;
Node_30 -> Node_34[style=dashed];
Node_32 -> Node_33;
Node_34 -> Node_12;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_39 -> Node_40;
}

