digraph "CFG forokhttp3.internal.http2.Http2Reader.readData(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0010 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0020 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|0x0017: IGET  (r0 I:okio.BufferedSource) = (r4 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0019: INVOKE  (r0 I:byte) = (r0 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x001d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001f: CAST  (r0 I:short) = (short) (r0 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: INVOKE  (r6 I:int) = (r6 I:int), (r7 I:byte), (r0 I:short) okhttp3.internal.http2.Http2Reader.lengthWithoutPadding(int, byte, short):int type: STATIC \l0x0024: IGET  (r7 I:okio.BufferedSource) = (r4 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0026: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:boolean)\l  (r8 I:int)\l  (r7 I:okio.BufferedSource)\l  (r6 I:int)\l okhttp3.internal.http2.Http2Reader.Handler.data(boolean, int, okio.BufferedSource, int):void type: INTERFACE \l0x0029: IGET  (r5 I:okio.BufferedSource) = (r4 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x002b: CAST  (r6 I:long) = (long) (r0 I:int) \l0x002c: INVOKE  (r5 I:okio.BufferedSource), (r6 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0032: CONST_STR  (r6 I:java.lang.String) =  \"PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA\" \l0x0034: INVOKE  (r5 I:java.io.IOException) = (r6 I:java.lang.String), (r5 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x003b: CONST_STR  (r6 I:java.lang.String) =  \"PROTOCOL_ERROR: TYPE_DATA streamId == 0\" \l0x003d: INVOKE  (r5 I:java.io.IOException) = (r6 I:java.lang.String), (r5 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readData((r4 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

