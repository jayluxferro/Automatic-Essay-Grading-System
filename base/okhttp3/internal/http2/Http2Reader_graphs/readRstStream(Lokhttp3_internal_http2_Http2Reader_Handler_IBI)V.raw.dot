digraph "CFG forokhttp3.internal.http2.Http2Reader.readRstStream(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r4 I:okio.BufferedSource) = (r2 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0009: INVOKE  (r4 I:int) = (r4 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x000d: INVOKE  (r1 I:okhttp3.internal.http2.ErrorCode) = (r4 I:int) okhttp3.internal.http2.ErrorCode.fromHttp2(int):okhttp3.internal.http2.ErrorCode type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r6 I:int)\l  (r1 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Reader.Handler.rstStream(int, okhttp3.internal.http2.ErrorCode):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0019: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x001f: CONST_STR  (r4 I:java.lang.String) =  \"TYPE_RST_STREAM unexpected error code: %d\" \l0x0021: INVOKE  (r3 I:java.io.IOException) = (r4 I:java.lang.String), (r3 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0028: CONST_STR  (r4 I:java.lang.String) =  \"TYPE_RST_STREAM streamId == 0\" \l0x002a: INVOKE  (r3 I:java.io.IOException) = (r4 I:java.lang.String), (r3 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0031: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0035: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0037: CONST_STR  (r4 I:java.lang.String) =  \"TYPE_RST_STREAM length: %d != 4\" \l0x0039: INVOKE  (r3 I:java.io.IOException) = (r4 I:java.lang.String), (r3 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readRstStream((r2 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

