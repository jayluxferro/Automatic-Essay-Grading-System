digraph "CFG forokhttp3.internal.http2.Http2Reader.nextFrame(ZLokhttp3\/internal\/http2\/Http2Reader$Handler;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource A[Catch:\{ IOException \-\> 0x0096 \}, TRY_ENTER]\l0x0003: CONST  (r2 I:?[long, double]) = (9 ?[long, double]) A[Catch:\{ IOException \-\> 0x0096 \}]\l0x0005: INVOKE  (r1 I:okio.BufferedSource), (r2 I:long) okio.BufferedSource.require(long):void type: INTERFACE A[Catch:\{ IOException \-\> 0x0096 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r1 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x000a: INVOKE  (r1 I:int) = (r1 I:okio.BufferedSource) okhttp3.internal.http2.Http2Reader.readMedium(okio.BufferedSource):int type: STATIC \l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:29:0x0087 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r1 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:29:0x0087 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r3 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0017: INVOKE  (r3 I:byte) = (r3 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x001b: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001d: CAST  (r3 I:byte) = (byte) (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0033 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0026: INVOKE  (r8 I:java.lang.Byte) = (r3 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x002a: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x002c: CONST_STR  (r8 I:java.lang.String) =  \"Expected a SETTINGS frame but was %s\" \l0x002e: INVOKE  (r7 I:java.io.IOException) = (r8 I:java.lang.String), (r7 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IGET  (r7 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0035: INVOKE  (r7 I:byte) = (r7 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x0039: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x003b: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x003c: IGET  (r0 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x003e: INVOKE  (r0 I:int) = (r0 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x0042: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0045: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0046: SGET  (r4 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x0048: SGET  (r5 I:java.util.logging.Level) =  java.util.logging.Level.FINE java.util.logging.Level \l0x004a: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.logging.Logger)\l  (r5 I:java.util.logging.Level)\l java.util.logging.Logger.isLoggable(java.util.logging.Level):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: SGET  (r4 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x0052: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:boolean)\l  (r0 I:int)\l  (r1 I:int)\l  (r3 I:byte)\l  (r7 I:byte)\l okhttp3.internal.http2.Http2.frameLog(boolean, int, int, byte, byte):java.lang.String type: STATIC \l0x0056: INVOKE  (r4 I:java.util.logging.Logger), (r5 I:java.lang.String) java.util.logging.Logger.fine(java.lang.String):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5, 6, 7, 8] t:[0x0083, 0x007f, 0x007b, 0x0077, 0x0073, 0x006f, 0x006b, 0x0067, 0x0063] \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: IGET  (r7 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x005e: CAST  (r0 I:long) = (long) (r1 I:int) \l0x005f: INVOKE  (r7 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|0x0063: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readWindowUpdate(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0067|0x0067: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readGoAway(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x006b|0x006b: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readPing(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readPushPromise(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0073|0x0073: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readSettings(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|0x0077: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readRstStream(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x007b|0x007b: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readPriority(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x007f|0x007f: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readHeaders(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0083|0x0083: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r8 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r1 I:int)\l  (r7 I:byte)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Reader.readData(okhttp3.internal.http2.Http2Reader$Handler, int, byte, int):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x0086|0x0086: RETURN  (r2 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0087|0x0087: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0089: INVOKE  (r8 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x008d: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x008f: CONST_STR  (r8 I:java.lang.String) =  \"FRAME_SIZE_ERROR: %s\" \l0x0091: INVOKE  (r7 I:java.io.IOException) = (r8 I:java.lang.String), (r7 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ 0x0095|0x0095: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0096|0x0096: RETURN  (r0 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:1:0x0001\l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.http2.Http2Reader.nextFrame((r6 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_32;
Node_2 -> Node_3;
Node_2 -> Node_32;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_29;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_29;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19;
Node_17 -> Node_20;
Node_17 -> Node_21;
Node_17 -> Node_22;
Node_17 -> Node_23;
Node_17 -> Node_24;
Node_17 -> Node_25;
Node_17 -> Node_26;
Node_17 -> Node_27;
Node_18 -> Node_28;
Node_19 -> Node_28;
Node_20 -> Node_28;
Node_21 -> Node_28;
Node_22 -> Node_28;
Node_23 -> Node_28;
Node_24 -> Node_28;
Node_25 -> Node_28;
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_32 -> Node_31;
}

