digraph "CFG forokhttp3.internal.http2.Http2Reader.readPriority(Lokhttp3\/internal\/http2\/Http2Reader$Handler;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.BufferedSource) = (r4 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0002: INVOKE  (r0 I:int) = (r0 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l0x0008: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0012: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r3 I:?[int, boolean, short, byte, char]) \l0x0013: IGET  (r3 I:okio.BufferedSource) = (r4 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0015: INVOKE  (r3 I:byte) = (r3 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x0019: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001b: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x001c: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r6 I:int)\l  (r0 I:int)\l  (r3 I:int)\l  (r1 I:boolean)\l okhttp3.internal.http2.Http2Reader.Handler.priority(int, int, int, boolean):void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readPriority((r4 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

