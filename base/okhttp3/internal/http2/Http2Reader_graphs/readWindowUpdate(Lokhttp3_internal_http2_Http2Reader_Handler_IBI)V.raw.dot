digraph "CFG forokhttp3.internal.http2.Http2Reader.readWindowUpdate(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r7 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0007: INVOKE  (r7 I:int) = (r7 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x000b: CAST  (r1 I:long) = (long) (r7 I:int) \l0x000c: CONST  (r3 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x000f: ARITH  (r1 I:long) = (r1 I:long) & (r3 I:long) \l0x0010: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0012: CMP_L  (r7 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r9 I:int)\l  (r1 I:long)\l okhttp3.internal.http2.Http2Reader.Handler.windowUpdate(int, long):void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001c: INVOKE  (r7 I:java.lang.Long) = (r1 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0020: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0022: CONST_STR  (r7 I:java.lang.String) =  \"windowSizeIncrement was 0\" \l0x0024: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002b: INVOKE  (r7 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x002f: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0031: CONST_STR  (r7 I:java.lang.String) =  \"TYPE_WINDOW_UPDATE length !=4: %s\" \l0x0033: INVOKE  (r6 I:java.io.IOException) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readWindowUpdate((r5 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r6 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

