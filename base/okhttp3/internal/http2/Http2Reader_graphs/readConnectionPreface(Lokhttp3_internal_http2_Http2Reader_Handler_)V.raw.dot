digraph "CFG forokhttp3.internal.http2.Http2Reader.readConnectionPreface(Lokhttp3\/internal\/http2\/Http2Reader$Handler;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.client boolean \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r7 I:boolean) = \l  (r6 I:okhttp3.internal.http2.Http2Reader)\l  (r2 I:boolean)\l  (r7 I:okhttp3.internal.http2.Http2Reader$Handler)\l okhttp3.internal.http2.Http2Reader.nextFrame(boolean, okhttp3.internal.http2.Http2Reader$Handler):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"Required SETTINGS preface not received\" \l0x0011: INVOKE  (r7 I:java.io.IOException) = (r0 I:java.lang.String), (r7 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r7 I:okio.BufferedSource) = (r6 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0018: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.http2.Http2.CONNECTION_PREFACE okio.ByteString \l0x001a: INVOKE  (r0 I:int) = (r0 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x001e: CAST  (r3 I:long) = (long) (r0 I:int) \l0x001f: INVOKE  (r7 I:okio.ByteString) = (r7 I:okio.BufferedSource), (r3 I:long) okio.BufferedSource.readByteString(long):okio.ByteString type: INTERFACE \l0x0023: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x0025: SGET  (r3 I:java.util.logging.Level) =  java.util.logging.Level.FINE java.util.logging.Level \l0x0027: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.logging.Logger)\l  (r3 I:java.util.logging.Level)\l java.util.logging.Logger.isLoggable(java.util.logging.Level):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x002f: CONST_STR  (r3 I:java.lang.String) =  \"\<\< CONNECTION %s\" \l0x0031: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0033: INVOKE  (r5 I:java.lang.String) = (r7 I:okio.ByteString) okio.ByteString.hex():java.lang.String type: VIRTUAL \l0x0037: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0039: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r4 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x003d: INVOKE  (r0 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.fine(java.lang.String):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: SGET  (r0 I:okio.ByteString) =  okhttp3.internal.http2.Http2.CONNECTION_PREFACE okio.ByteString \l0x0042: INVOKE  (r0 I:boolean) = (r0 I:okio.ByteString), (r7 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0049 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|0x0048: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x004b: INVOKE  (r7 I:java.lang.String) = (r7 I:okio.ByteString) okio.ByteString.utf8():java.lang.String type: VIRTUAL \l0x004f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0051: CONST_STR  (r7 I:java.lang.String) =  \"Expected a connection header but was %s\" \l0x0053: INVOKE  (r7 I:java.io.IOException) = (r7 I:java.lang.String), (r0 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|0x0057: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Reader.readConnectionPreface((r6 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r7 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_12[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
}

