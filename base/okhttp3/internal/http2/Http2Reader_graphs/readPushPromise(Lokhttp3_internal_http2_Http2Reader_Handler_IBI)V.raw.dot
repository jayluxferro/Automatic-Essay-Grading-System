digraph "CFG forokhttp3.internal.http2.Http2Reader.readPushPromise(Lokhttp3\/internal\/http2\/Http2Reader$Handler;IBI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0009: INVOKE  (r0 I:byte) = (r0 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x000d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000f: CAST  (r0 I:short) = (short) (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r1 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Http2Reader) okhttp3.internal.http2.Http2Reader.source okio.BufferedSource \l0x0012: INVOKE  (r1 I:int) = (r1 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0019: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l0x001a: ARITH  (r5 I:int) = (r5 I:int) + (\-4 int) \l0x001c: INVOKE  (r5 I:int) = (r5 I:int), (r6 I:byte), (r0 I:short) okhttp3.internal.http2.Http2Reader.lengthWithoutPadding(int, byte, short):int type: STATIC \l0x0020: INVOKE  (r5 I:java.util.List) = \l  (r3 I:okhttp3.internal.http2.Http2Reader)\l  (r5 I:int)\l  (r0 I:short)\l  (r6 I:byte)\l  (r7 I:int)\l okhttp3.internal.http2.Http2Reader.readHeaderBlock(int, short, byte, int):java.util.List type: DIRECT \l0x0024: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Reader$Handler)\l  (r7 I:int)\l  (r1 I:int)\l  (r5 I:java.util.List)\l okhttp3.internal.http2.Http2Reader.Handler.pushPromise(int, int, java.util.List):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002a: CONST_STR  (r5 I:java.lang.String) =  \"PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0\" \l0x002c: INVOKE  (r4 I:java.io.IOException) = (r5 I:java.lang.String), (r4 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.readPushPromise((r3 'this' I:okhttp3.internal.http2.Http2Reader A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.internal.http2.Http2Reader$Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

