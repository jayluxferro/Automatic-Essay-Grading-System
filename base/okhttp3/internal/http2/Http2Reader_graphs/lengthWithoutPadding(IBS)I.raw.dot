digraph "CFG forokhttp3.internal.http2.Http2Reader.lengthWithoutPadding(IBS)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: ARITH  (r1 I:int) = (r1 I:int) \- (r3 I:int) \l0x0009: CAST  (r1 I:short) = (short) (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN  (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000c: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: INVOKE  (r3 I:java.lang.Short) = (r3 I:short) java.lang.Short.valueOf(short):java.lang.Short type: STATIC \l0x0013: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0015: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001a: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"PROTOCOL_ERROR padding %s \> remaining length %s\" \l0x001e: INVOKE  (r1 I:java.io.IOException) = (r1 I:java.lang.String), (r2 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static int okhttp3.internal.http2.Http2Reader.lengthWithoutPadding((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:short A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

