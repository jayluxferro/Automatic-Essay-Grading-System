digraph "CFG forokhttp3.internal.http2.Http2Codec.StreamFinishingSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:okio.Source) = \l  (r2 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.delegate():okio.Source type: VIRTUAL A[Catch:\{ IOException \-\> 0x0015 \}, TRY_ENTER]\l0x0004: INVOKE  (r3 I:long) = (r0 I:okio.Source), (r3 I:okio.Buffer), (r4 I:long) okio.Source.read(okio.Buffer, long):long type: INTERFACE A[Catch:\{ IOException \-\> 0x0015 \}]\l0x0008: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ IOException \-\> 0x0015 \}]\l0x000a: CMP_L  (r5 I:int) = (r3 I:long), (r0 I:long) A[Catch:\{ IOException \-\> 0x0015 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0014 A[Catch:\{ IOException \-\> 0x0015 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r0 I:long) = \l  (r2 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.bytesRead long A[Catch:\{ IOException \-\> 0x0015 \}]\l0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x0015 \}]\l0x0011: ARITH  (r0 I:long) = (r0 I:long) + (r3 I:long) A[Catch:\{ IOException \-\> 0x0015 \}]\l0x0012: IPUT  \l  (r0 I:long)\l  (r2 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.bytesRead long A[Catch:\{ IOException \-\> 0x0015 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN  (r3 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x0015: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l  (r3 I:java.io.IOException)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.endOfInput(java.io.IOException):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http2.Http2Codec.StreamFinishingSource.read((r2 'this' I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource A[IMMUTABLE_TYPE, THIS]), (r3 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

