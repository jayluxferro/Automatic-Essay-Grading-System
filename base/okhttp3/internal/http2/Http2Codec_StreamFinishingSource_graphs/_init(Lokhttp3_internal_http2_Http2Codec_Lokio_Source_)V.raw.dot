digraph "CFG forokhttp3.internal.http2.Http2Codec.StreamFinishingSource.\<init\>(Lokhttp3\/internal\/http2\/Http2Codec;Lokio\/Source;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r1 I:okhttp3.internal.http2.Http2Codec)\l  (r0 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.this$0 okhttp3.internal.http2.Http2Codec \l0x0002: INVOKE  (r0 I:okio.ForwardingSource), (r2 I:okio.Source) okio.ForwardingSource.\<init\>(okio.Source):void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: IPUT  \l  (r1 I:boolean)\l  (r0 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.completed boolean \l0x0008: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x000a: IPUT  \l  (r1 I:long)\l  (r0 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.bytesRead long \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Codec.StreamFinishingSource.\<init\>((r0 'this' I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource A[IMMUTABLE_TYPE, THIS]), (r1 I:okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

