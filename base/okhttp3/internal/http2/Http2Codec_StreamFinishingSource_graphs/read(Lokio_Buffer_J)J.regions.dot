digraph "CFG forokhttp3.internal.http2.Http2Codec.StreamFinishingSource.read(Lokio\/Buffer;J)J" {
subgraph cluster_Region_878836553 {
label = "R(1:(3:1|(1:3)|4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_852618632 {
label = "Try: R(3:1|(1:3)|4) catches: R(3:5|6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_867122185 {
label = "R(3:1|(1:3)|4)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x0015 \}\lSplitter:B:0:0x0000\l|long long r3 = delegate().read(r3, r4)     \/\/ Catch:\{ IOException \-\> 0x0015 \}\l}"];
subgraph cluster_IfRegion_1659382226 {
label = "IF [B:2:0x000c] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000c|Catch:\{ IOException \-\> 0x0015 \}\l|if (r3 \> 0) goto L_0x000e     \/\/ Catch:\{ IOException \-\> 0x0015 \}\l}"];
subgraph cluster_Region_961890800 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|Catch:\{ IOException \-\> 0x0015 \}\l|r2.bytesRead += r3\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0014|RETURN\l|return r3\l}"];
}
subgraph cluster_Region_1132439865 {
label = "R(3:5|6|7) | ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|endOfInput(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|throw r3\l}"];
}
}
}
subgraph cluster_Region_1132439865 {
label = "R(3:5|6|7) | ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|endOfInput(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|throw r3\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http2.Http2Codec.StreamFinishingSource.read((r2v0 'this' okhttp3.internal.http2.Http2Codec$StreamFinishingSource A[IMMUTABLE_TYPE, THIS]), (r3v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_0 -> Node_5;
}

