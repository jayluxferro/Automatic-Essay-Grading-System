digraph "CFG forokhttp3.internal.http2.Http2Reader.ContinuationSource.readContinuationHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.streamId int \l0x0002: IGET  (r1 I:okio.BufferedSource) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x0004: INVOKE  (r1 I:int) = (r1 I:okio.BufferedSource) okhttp3.internal.http2.Http2Reader.readMedium(okio.BufferedSource):int type: STATIC \l0x0008: IPUT  \l  (r1 I:int)\l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.left int \l0x000a: IPUT  \l  (r1 I:int)\l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.length int \l0x000c: IGET  (r1 I:okio.BufferedSource) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x000e: INVOKE  (r1 I:byte) = (r1 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x0012: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0014: CAST  (r1 I:byte) = (byte) (r1 I:int) \l0x0015: IGET  (r2 I:okio.BufferedSource) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x0017: INVOKE  (r2 I:byte) = (r2 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x001b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001d: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x001e: IPUT  \l  (r2 I:byte)\l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.flags byte \l0x0020: SGET  (r2 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x0022: SGET  (r3 I:java.util.logging.Level) =  java.util.logging.Level.FINE java.util.logging.Level \l0x0024: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.logging.Logger)\l  (r3 I:java.util.logging.Level)\l java.util.logging.Logger.isLoggable(java.util.logging.Level):boolean type: VIRTUAL \l0x0028: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x002b|0x002b: SGET  (r2 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Reader.logger java.util.logging.Logger \l0x002d: IGET  (r4 I:int) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.streamId int \l0x002f: IGET  (r5 I:int) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.length int \l0x0031: IGET  (r6 I:byte) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.flags byte \l0x0033: INVOKE  (r4 I:java.lang.String) = \l  (r3 I:boolean)\l  (r4 I:int)\l  (r5 I:int)\l  (r1 I:byte)\l  (r6 I:byte)\l okhttp3.internal.http2.Http2.frameLog(boolean, int, int, byte, byte):java.lang.String type: STATIC \l0x0037: INVOKE  (r2 I:java.util.logging.Logger), (r4 I:java.lang.String) java.util.logging.Logger.fine(java.lang.String):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|0x003a: IGET  (r2 I:okio.BufferedSource) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x003c: INVOKE  (r2 I:int) = (r2 I:okio.BufferedSource) okio.BufferedSource.readInt():int type: INTERFACE \l0x0040: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0043: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0044: IPUT  \l  (r2 I:int)\l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.streamId int \l0x0046: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0048: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0049|0x0049: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_5 [shape=record,label="{5\:\ 0x004b|0x004b: IGET  (r1 I:int) = \l  (r7 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.streamId int \l}"];
Node_6 [shape=record,label="{6\:\ 0x004d|0x004d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0050 \l}"];
Node_7 [shape=record,label="{7\:\ 0x004f|0x004f: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|0x0050: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0052: CONST_STR  (r1 I:java.lang.String) =  \"TYPE_CONTINUATION streamId changed\" \l0x0054: INVOKE  (r0 I:java.io.IOException) = (r1 I:java.lang.String), (r0 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x005b: INVOKE  (r1 I:java.lang.Byte) = (r1 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x005f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0061: CONST_STR  (r1 I:java.lang.String) =  \"%s != TYPE_CONTINUATION\" \l0x0063: INVOKE  (r0 I:java.io.IOException) = (r1 I:java.lang.String), (r0 I:java.lang.Object[]) okhttp3.internal.http2.Http2.ioException(java.lang.String, java.lang.Object[]):java.io.IOException type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|0x0067: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.ContinuationSource.readContinuationHeader((r7 'this' I:okhttp3.internal.http2.Http2Reader$ContinuationSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

