digraph "CFG forokhttp3.internal.http2.Http2Reader.ContinuationSource.readContinuationHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r7.streamId\lint r1 = okhttp3.internal.http2.Http2Reader.readMedium(r7.source)\lr7.left = r1\lr7.length = r1\lbyte r1 = (byte) (r7.source.readByte() & 255)\lr7.flags = (byte) (r7.source.readByte() & 255)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|if (okhttp3.internal.http2.Http2Reader.logger.isLoggable(java.util.logging.Level.FINE) == false) goto L_0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x002b|okhttp3.internal.http2.Http2Reader.logger.fine(okhttp3.internal.http2.Http2.frameLog(true, r7.streamId, r7.length, r1, r7.flags))\l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|r7.streamId = r7.source.readInt() & Integer.MAX_VALUE\l}"];
Node_4 [shape=record,label="{4\:\ 0x0049|if (r1 != 9) goto L_0x0059\l}"];
Node_5 [shape=record,label="{5\:\ 0x004b}"];
Node_6 [shape=record,label="{6\:\ 0x004d|if (r7.streamId != r0) goto L_0x0050\l}"];
Node_7 [shape=record,label="{7\:\ 0x004f|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0050}"];
Node_9 [shape=record,label="{9\:\ 0x0058|throw okhttp3.internal.http2.Http2.ioException(\"TYPE_CONTINUATION streamId changed\", new java.lang.Object[0])\l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|java.lang.Object[] r0 = new java.lang.Object[]\{java.lang.Byte.valueOf(r1)\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|throw okhttp3.internal.http2.Http2.ioException(\"%s != TYPE_CONTINUATION\", r0)\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Reader.ContinuationSource.readContinuationHeader((r7v0 'this' okhttp3.internal.http2.Http2Reader$ContinuationSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

