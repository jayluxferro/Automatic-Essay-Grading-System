digraph "CFG forokhttp3.internal.http2.Http2Reader.ContinuationSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.left int \l0x0002: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:okio.BufferedSource) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x0008: IGET  (r3 I:short) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.padding short \l0x000a: CAST  (r3 I:long) = (long) (r3 I:int) \l0x000b: INVOKE  (r0 I:okio.BufferedSource), (r3 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: IPUT  \l  (r0 I:short)\l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.padding short \l0x0011: IGET  (r0 I:byte) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.flags byte \l0x0013: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN  (r1 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.readContinuationHeader():void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r0 I:okio.BufferedSource) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.source okio.BufferedSource \l0x001e: IGET  (r3 I:int) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.left int \l0x0020: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0021: INVOKE  (r7 I:long) = (r7 I:long), (r3 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0025: INVOKE  (r6 I:long) = (r0 I:okio.BufferedSource), (r6 I:okio.Buffer), (r7 I:long) okio.BufferedSource.read(okio.Buffer, long):long type: INTERFACE \l0x0029: CMP_L  (r8 I:int) = (r6 I:long), (r1 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: RETURN  (r1 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IGET  (r8 I:int) = \l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.left int \l0x0030: CAST  (r0 I:long) = (long) (r8 I:int) \l0x0031: ARITH  (r0 I:long) = (r0 I:long) \- (r6 I:long) \l0x0032: CAST  (r8 I:int) = (int) (r0 I:long) \l0x0033: IPUT  \l  (r8 I:int)\l  (r5 I:okhttp3.internal.http2.Http2Reader$ContinuationSource)\l okhttp3.internal.http2.Http2Reader.ContinuationSource.left int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: RETURN  (r6 I:long) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http2.Http2Reader.ContinuationSource.read((r5 'this' I:okhttp3.internal.http2.Http2Reader$ContinuationSource A[IMMUTABLE_TYPE, THIS]), (r6 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_0;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
}

