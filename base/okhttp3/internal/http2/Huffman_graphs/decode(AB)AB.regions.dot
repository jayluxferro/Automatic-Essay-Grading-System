digraph "CFG forokhttp3.internal.http2.Huffman.decode([B)[B" {
subgraph cluster_Region_2087613957 {
label = "R(4:0|(3:3|(2:5|(1:7)(1:8))|9)|(2:11|(2:(1:25)|(1:15)))|17)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream r0 = new java.io.ByteArrayOutputStream()\lint r2 = 0\lokhttp3.internal.http2.Huffman.Node r4 = r7.root\lbyte r1 = 0\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_127990001 {
label = "LOOP:0: (3:3|(2:5|(1:7)(1:8))|9)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|if (r2 \< r8.length) goto L_0x0010\l}"];
subgraph cluster_Region_902397530 {
label = "R(3:3|(2:5|(1:7)(1:8))|9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|r1 = (r1 \<\< 8) \| (r5 & 255)\lr3 += 8\l}"];
subgraph cluster_LoopRegion_635805945 {
label = "LOOP:1: (2:5|(1:7)(1:8))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0019|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v5 int) = (r3v4 int), (r3v6 int) binds: [B:3:0x0010, B:19:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 okhttp3.internal.http2.Huffman$Node) = (r4v1 okhttp3.internal.http2.Huffman$Node), (r4v7 okhttp3.internal.http2.Huffman$Node) binds: [B:3:0x0010, B:19:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0019\-\>B:19:0x0019\l|if (r3 \>= 8) goto L_0x001b\l}"];
subgraph cluster_Region_983099576 {
label = "R(2:5|(1:7)(1:8))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|r4 = r4.children[(r1 \>\>\> (r3 \- 8)) & 255]\l}"];
subgraph cluster_IfRegion_1882023281 {
label = "IF [B:6:0x0027] THEN: R(1:7) ELSE: R(1:8)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0027|if (r4.children == null) goto L_0x0029\l}"];
subgraph cluster_Region_814516890 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0029|r0.write(r4.symbol)\lr3 \-= r4.terminalBits\lokhttp3.internal.http2.Huffman$Node r4 = r7.root\l}"];
}
subgraph cluster_Region_250146432 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0034|r3 \-= 8\l}"];
}
}
}
}
Node_9 [shape=record,label="{9\:\ 0x0037|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:9:0x0037\l|r2++\l}"];
}
}
subgraph cluster_LoopRegion_1942493901 {
label = "LOOP:2: (2:11|(2:(1:25)|(1:15)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x003a|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:18:0x003a, B:15:0x004f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 okhttp3.internal.http2.Huffman$Node) = (r4v1 okhttp3.internal.http2.Huffman$Node), (r4v3 okhttp3.internal.http2.Huffman$Node) binds: [B:18:0x003a, B:15:0x004f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:10:0x003a\-\>B:15:0x004f\l|if (r3 \> 0) goto L_0x003c\l}"];
subgraph cluster_Region_1846832427 {
label = "R(2:11|(2:(1:25)|(1:15)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x003c|okhttp3.internal.http2.Huffman.Node r8 = r4.children[(r1 \<\< (8 \- r3)) & 255]\l}"];
subgraph cluster_Region_1415358771 {
label = "R(2:(1:25)|(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1048071338 {
label = "IF [B:12:0x0048, B:14:0x004c] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0048|ADDED_TO_REGION\l|if (r8.children != null) goto L_0x005a\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|ADDED_TO_REGION\l|if (r8.terminalBits \> r3) goto L_0x005a\l}"];
subgraph cluster_Region_435097500 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x005a|SYNTHETIC\lEDGE_INSN: B:25:0x005a\-\>B:16:0x005a ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_758542906 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x004f|LOOP_END\lLOOP:2: B:10:0x003a\-\>B:15:0x004f\l|r0.write(r8.symbol)\lr3 \-= r8.terminalBits\lokhttp3.internal.http2.Huffman$Node r4 = r7.root\l}"];
}
}
}
}
Node_17 [shape=record,label="{17\:\ 0x005e|RETURN\l|return r0.toByteArray()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000b|LOOP_START\lPHI: r1 r2 r3 r4 \l  PHI: (r1v2 byte) = (r1v1 byte), (r1v4 byte) binds: [B:0:0x0000, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v6 int) binds: [B:0:0x0000, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v5 int) binds: [B:0:0x0000, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 okhttp3.internal.http2.Huffman$Node) = (r4v0 okhttp3.internal.http2.Huffman$Node), (r4v4 okhttp3.internal.http2.Huffman$Node) binds: [B:0:0x0000, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:9:0x0037\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x004a}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x005a|EDGE_INSN: B:23:0x005a\-\>B:16:0x005a ?: BREAK  \lEDGE_INSN: B:25:0x005a\-\>B:16:0x005a ?: BREAK  \l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x003a|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0019|LOOP_END\lSYNTHETIC\lPHI: r3 r4 \l  PHI: (r3v6 int) = (r3v7 int), (r3v8 int) binds: [B:22:0x0019, B:21:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v7 okhttp3.internal.http2.Huffman$Node) = (r4v6 okhttp3.internal.http2.Huffman$Node), (r4v9 okhttp3.internal.http2.Huffman$Node) binds: [B:22:0x0019, B:21:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0019\-\>B:19:0x0019\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0037|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0019|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0019|SYNTHETIC\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x005a|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:23:0x005a\-\>B:16:0x005a ?: BREAK  \l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x005a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{byte[] okhttp3.internal.http2.Huffman.decode((r7v0 'this' okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r8v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_18[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_20[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_21;
Node_8 -> Node_22;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_10 -> Node_24[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_25;
Node_25 -> Node_16;
Node_15 -> Node_10;
Node_1 -> Node_2;
Node_13 -> Node_14;
Node_16 -> Node_17;
Node_18 -> Node_10;
Node_19 -> Node_4;
Node_20 -> Node_9;
Node_21 -> Node_19;
Node_22 -> Node_19;
Node_23 -> Node_16;
Node_24 -> Node_16;
}

