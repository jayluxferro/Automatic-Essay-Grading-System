digraph "CFG forokhttp3.internal.http2.Huffman.addCode(IIB)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Huffman$Node) =  okhttp3.internal.http2.Huffman$Node \l0x0002: INVOKE  \l  (r0 I:okhttp3.internal.http2.Huffman$Node)\l  (r5 I:int)\l  (r7 I:int)\l okhttp3.internal.http2.Huffman.Node.\<init\>(int, int):void type: DIRECT \l0x0005: IGET  (r5 I:okhttp3.internal.http2.Huffman$Node) = (r4 I:okhttp3.internal.http2.Huffman) okhttp3.internal.http2.Huffman.root okhttp3.internal.http2.Huffman$Node \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r7 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: ARITH  (r7 I:int) = (r7 I:int) + (\-8 int) \l0x000d: CAST  (r7 I:byte) = (byte) (r7 I:int) \l0x000e: ARITH  (r1 I:int) = (r6 I:int) \>\>\> (r7 I:int) \l0x0010: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0012: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r5 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r5 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0018: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r5 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x001e: NEW_INSTANCE  (r3 I:okhttp3.internal.http2.Huffman$Node) =  okhttp3.internal.http2.Huffman$Node \l0x0020: INVOKE  (r3 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.\<init\>():void type: DIRECT \l0x0023: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IGET  (r5 I:okhttp3.internal.http2.Huffman$Node[]) = (r5 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0027: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002c: CONST_STR  (r6 I:java.lang.String) =  \"invalid dictionary: prefix not unique\" \l0x002e: INVOKE  \l  (r5 I:java.lang.IllegalStateException)\l  (r6 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: ARITH  (r1 I:int) = (r1 I:int) \- (r7 I:int) \l0x0033: ARITH  (r6 I:int) = (r6 I:int) \<\< (r1 I:int) \l0x0034: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0036: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0037: ARITH  (r7 I:int) = (r7 I:int) \<\< (r1 I:int) \l0x0038: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: ARITH  (r2 I:int) = (r6 I:int) + (r7 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:15:0x0044 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r5 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x003f: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0041: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Huffman.addCode((r4 'this' I:okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_12;
}

