digraph "CFG forokhttp3.internal.http2.Huffman.decode([B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0002: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:okhttp3.internal.http2.Huffman$Node) = (r7 I:okhttp3.internal.http2.Huffman) okhttp3.internal.http2.Huffman.root okhttp3.internal.http2.Huffman$Node \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: ARRAY_LENGTH  (r5 I:int) = (r8 I:?[]) \l0x000c: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:10:0x003a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0012: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0014: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) \l0x0016: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x0017: ARITH  (r3 I:int) = (r3 I:int) + (8 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: ARITH  (r5 I:int) = (r3 I:int) + (\-8 int) \l0x001d: ARITH  (r5 I:int) = (r1 I:int) \>\>\> (r5 I:int) \l0x001f: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0021: IGET  (r4 I:okhttp3.internal.http2.Huffman$Node[]) = (r4 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0023: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0025: IGET  (r5 I:okhttp3.internal.http2.Huffman$Node[]) = (r4 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0034 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IGET  (r5 I:int) = (r4 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.symbol int \l0x002b: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r5 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l0x002e: IGET  (r4 I:int) = (r4 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.terminalBits int \l0x0030: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0031: IGET  (r4 I:okhttp3.internal.http2.Huffman$Node) = (r7 I:okhttp3.internal.http2.Huffman) okhttp3.internal.http2.Huffman.root okhttp3.internal.http2.Huffman$Node \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: ARITH  (r3 I:int) = (r3 I:int) + (\-8 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x005a \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: ARITH  (r8 I:int) = (8 int) \- (r3 I:int) \l0x003e: ARITH  (r8 I:int) = (r1 I:int) \<\< (r8 I:int) \l0x0040: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0042: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r4 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0044: AGET  (r8 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0046: IGET  (r2 I:okhttp3.internal.http2.Huffman$Node[]) = (r8 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|0x0048: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005a \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: IGET  (r2 I:int) = (r8 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.terminalBits int \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: IGET  (r2 I:int) = (r8 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.symbol int \l0x0051: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l0x0054: IGET  (r8 I:int) = (r8 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.terminalBits int \l0x0056: ARITH  (r3 I:int) = (r3 I:int) \- (r8 I:int) \l0x0057: IGET  (r4 I:okhttp3.internal.http2.Huffman$Node) = (r7 I:okhttp3.internal.http2.Huffman) okhttp3.internal.http2.Huffman.root okhttp3.internal.http2.Huffman$Node \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: INVOKE  (r8 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x005e|0x005e: RETURN  (r8 I:byte[]) \l}"];
MethodNode[shape=record,label="{byte[] okhttp3.internal.http2.Huffman.decode((r7 'this' I:okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r8 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_4;
Node_8 -> Node_4;
Node_9 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_10;
Node_17 -> Node_18;
}

