digraph "CFG forokhttp3.internal.http2.Huffman.buildTree()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: SGET  (r1 I:byte[]) =  okhttp3.internal.http2.Huffman.CODE_LENGTHS byte[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SGET  (r1 I:int[]) =  okhttp3.internal.http2.Huffman.CODES int[] \l0x0008: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x000a: SGET  (r2 I:byte[]) =  okhttp3.internal.http2.Huffman.CODE_LENGTHS byte[] \l0x000c: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x000e: INVOKE  \l  (r3 I:okhttp3.internal.http2.Huffman)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:byte)\l okhttp3.internal.http2.Huffman.addCode(int, int, byte):void type: DIRECT \l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Huffman.buildTree((r3 'this' I:okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

