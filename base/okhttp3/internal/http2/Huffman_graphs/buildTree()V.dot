digraph "CFG forokhttp3.internal.http2.Huffman.buildTree()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:3:0x0006] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:3:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r0 \>= CODE_LENGTHS.length) goto L_0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:3:0x0006\l|addCode(r0, CODES[r0], CODE_LENGTHS[r0])\lint r0 = r0 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Huffman.buildTree((r3v0 'this' okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

