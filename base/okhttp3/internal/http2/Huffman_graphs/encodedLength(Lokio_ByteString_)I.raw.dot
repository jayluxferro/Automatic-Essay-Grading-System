digraph "CFG forokhttp3.internal.http2.Huffman.encodedLength(Lokio\/ByteString;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: INVOKE  (r3 I:int) = (r6 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r3 I:byte) = (r6 I:okio.ByteString), (r2 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x000d: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000f: SGET  (r4 I:byte[]) =  okhttp3.internal.http2.Huffman.CODE_LENGTHS byte[] \l0x0011: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0013: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0014: ARITH  (r0 I:long) = (r0 I:long) + (r3 I:long) \l0x0015: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r2 I:?[long, double]) = (7 ?[long, double]) \l0x001a: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x001b: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001c: ARITH  (r0 I:long) = (r0 I:long) \>\> (r6 I:long) \l0x001d: CAST  (r6 I:int) = (int) (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r6 I:int) \l}"];
MethodNode[shape=record,label="{int okhttp3.internal.http2.Huffman.encodedLength((r5 'this' I:okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r6 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

