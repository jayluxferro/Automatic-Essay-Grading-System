digraph "CFG forokhttp3.internal.http2.Huffman.encode(Lokio\/ByteString;Lokio\/BufferedSink;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: INVOKE  (r4 I:int) = (r9 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000a: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r4 I:byte) = (r9 I:okio.ByteString), (r0 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x0012: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r6 I:?[int, boolean, short, byte, char]) \l0x0013: SGET  (r6 I:int[]) =  okhttp3.internal.http2.Huffman.CODES int[] \l0x0015: AGET  (r6 I:?[int, float]) = (r6 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0017: SGET  (r7 I:byte[]) =  okhttp3.internal.http2.Huffman.CODE_LENGTHS byte[] \l0x0019: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x001b: ARITH  (r1 I:long) = (r1 I:long) \<\< (r4 I:long) \l0x001c: CAST  (r6 I:long) = (long) (r6 I:int) \l0x001d: ARITH  (r1 I:long) = (r1 I:long) \| (r6 I:long) \l0x001e: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r3 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:6:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: ARITH  (r3 I:int) = (r3 I:int) + (\-8 int) \l0x0023: ARITH  (r6 I:long) = (r1 I:long) \>\> (r3 I:long) \l0x0025: CAST  (r4 I:int) = (int) (r6 I:long) \l0x0026: INVOKE  (r10 I:okio.BufferedSink), (r4 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l0x0030: ARITH  (r0 I:long) = (r1 I:long) \<\< (r5 I:long) \l0x0032: ARITH  (r9 I:int) = (r6 I:int) \>\>\> (r3 I:int) \l0x0034: CAST  (r2 I:long) = (long) (r9 I:int) \l0x0035: ARITH  (r0 I:long) = (r0 I:long) \| (r2 I:long) \l0x0036: CAST  (r9 I:int) = (int) (r0 I:long) \l0x0037: INVOKE  (r10 I:okio.BufferedSink), (r9 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Huffman.encode((r8 'this' I:okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r9 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

