digraph "CFG forokhttp3.internal.http2.Huffman.addCode(IIB)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.internal.http2.Huffman$Node r0 = new okhttp3.internal.http2.Huffman.Node(r5, r7)\lokhttp3.internal.http2.Huffman$Node r5 = r4.root\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r5 r7 \l  PHI: (r5v2 okhttp3.internal.http2.Huffman$Node) = (r5v1 okhttp3.internal.http2.Huffman$Node), (r5v5 okhttp3.internal.http2.Huffman$Node) binds: [B:0:0x0000, B:8:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 byte) = (r7v0 byte), (r7v5 byte) binds: [B:0:0x0000, B:8:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:8:0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r7 \<= 8) goto L_0x0032\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|byte r7 = (byte) (r7 + \-8)\lr1 = (r6 \>\>\> r7) & 255\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r5.children == null) goto L_0x002a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r5.children[r1] != null) goto L_0x0025\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r5.children[r1] = new okhttp3.internal.http2.Huffman.Node()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:8:0x0025\l|r5 = r5.children[r1]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a}"];
Node_10 [shape=record,label="{10\:\ 0x0031|throw new java.lang.IllegalStateException(\"invalid dictionary: prefix not unique\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|int r1 = 8 \- r7\lr6 = (r6 \<\< r1) & 255\lint r7 = 1 \<\< r1\lr1 = r6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:11:0x0032, B:14:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:12:0x0039\-\>B:14:0x003d\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|if (r1 \>= (r6 + r7)) goto L_0x0044\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|LOOP_END\lLOOP:1: B:12:0x0039\-\>B:14:0x003d\l|r5.children[r1] = r0\lint r1 = r1 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0025|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Huffman.addCode((r4v0 'this' okhttp3.internal.http2.Huffman A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_19;
Node_7 -> Node_18;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_12;
Node_16 -> Node_9;
Node_17 -> Node_11;
Node_18 -> Node_8;
Node_19 -> Node_8;
Node_20 -> Node_15;
}

