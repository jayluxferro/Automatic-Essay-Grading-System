digraph "CFG forokhttp3.internal.http2.Huffman.Node.\<init\>(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:okhttp3.internal.http2.Huffman$Node[])\l  (r1 I:okhttp3.internal.http2.Huffman$Node)\l okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0006: IPUT  (r2 I:int), (r1 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.symbol int \l0x0008: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IPUT  (r2 I:int), (r1 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.terminalBits int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Huffman.Node.\<init\>((r1 'this' I:okhttp3.internal.http2.Huffman$Node A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

