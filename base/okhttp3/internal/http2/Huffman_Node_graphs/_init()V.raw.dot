digraph "CFG forokhttp3.internal.http2.Huffman.Node.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l0x0005: NEW_ARRAY  (r0 I:okhttp3.internal.http2.Huffman$Node[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Huffman$Node[] \l0x0007: IPUT  \l  (r0 I:okhttp3.internal.http2.Huffman$Node[])\l  (r1 I:okhttp3.internal.http2.Huffman$Node)\l okhttp3.internal.http2.Huffman.Node.children okhttp3.internal.http2.Huffman$Node[] \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: IPUT  (r0 I:int), (r1 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.symbol int \l0x000c: IPUT  (r0 I:int), (r1 I:okhttp3.internal.http2.Huffman$Node) okhttp3.internal.http2.Huffman.Node.terminalBits int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Huffman.Node.\<init\>((r1 'this' I:okhttp3.internal.http2.Huffman$Node A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

