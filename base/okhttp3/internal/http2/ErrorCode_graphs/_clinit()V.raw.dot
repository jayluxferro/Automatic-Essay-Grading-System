digraph "CFG forokhttp3.internal.http2.ErrorCode.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"NO_ERROR\" \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r2 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0008: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.NO_ERROR okhttp3.internal.http2.ErrorCode \l0x000a: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"PROTOCOL_ERROR\" \l0x000e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r3 I:int)\l  (r3 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0012: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR okhttp3.internal.http2.ErrorCode \l0x0014: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"INTERNAL_ERROR\" \l0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0019: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r4 I:int)\l  (r4 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x001c: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR okhttp3.internal.http2.ErrorCode \l0x001e: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0020: CONST_STR  (r1 I:java.lang.String) =  \"FLOW_CONTROL_ERROR\" \l0x0022: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0023: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r5 I:int)\l  (r5 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0026: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.FLOW_CONTROL_ERROR okhttp3.internal.http2.ErrorCode \l0x0028: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x002a: CONST_STR  (r1 I:java.lang.String) =  \"REFUSED_STREAM\" \l0x002c: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x002d: CONST  (r7 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x002e: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r6 I:int)\l  (r7 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0031: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.REFUSED_STREAM okhttp3.internal.http2.ErrorCode \l0x0033: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0035: CONST_STR  (r1 I:java.lang.String) =  \"CANCEL\" \l0x0037: CONST  (r8 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0038: CONST  (r9 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x003a: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r8 I:int)\l  (r9 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x003d: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.CANCEL okhttp3.internal.http2.ErrorCode \l0x003f: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0041: CONST_STR  (r1 I:java.lang.String) =  \"COMPRESSION_ERROR\" \l0x0043: CONST  (r10 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0044: CONST  (r11 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0046: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r10 I:int)\l  (r11 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0049: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.COMPRESSION_ERROR okhttp3.internal.http2.ErrorCode \l0x004b: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x004d: CONST_STR  (r1 I:java.lang.String) =  \"CONNECT_ERROR\" \l0x004f: CONST  (r12 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0051: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r7 I:int)\l  (r12 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0054: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.CONNECT_ERROR okhttp3.internal.http2.ErrorCode \l0x0056: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0058: CONST_STR  (r1 I:java.lang.String) =  \"ENHANCE_YOUR_CALM\" \l0x005a: CONST  (r13 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x005c: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r9 I:int)\l  (r13 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x005f: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.ENHANCE_YOUR_CALM okhttp3.internal.http2.ErrorCode \l0x0061: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x0063: CONST_STR  (r1 I:java.lang.String) =  \"INADEQUATE_SECURITY\" \l0x0065: CONST  (r14 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0067: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r11 I:int)\l  (r14 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x006a: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.INADEQUATE_SECURITY okhttp3.internal.http2.ErrorCode \l0x006c: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode \l0x006e: CONST_STR  (r1 I:java.lang.String) =  \"HTTP_1_1_REQUIRED\" \l0x0070: CONST  (r14 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0072: INVOKE  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:java.lang.String)\l  (r12 I:int)\l  (r14 I:int)\l okhttp3.internal.http2.ErrorCode.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0075: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.HTTP_1_1_REQUIRED okhttp3.internal.http2.ErrorCode \l0x0077: NEW_ARRAY  (r0 I:okhttp3.internal.http2.ErrorCode[]) = (r13 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.ErrorCode[] \l0x0079: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.NO_ERROR okhttp3.internal.http2.ErrorCode \l0x007b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x007d: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR okhttp3.internal.http2.ErrorCode \l0x007f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0081: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR okhttp3.internal.http2.ErrorCode \l0x0083: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0085: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.FLOW_CONTROL_ERROR okhttp3.internal.http2.ErrorCode \l0x0087: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0089: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.REFUSED_STREAM okhttp3.internal.http2.ErrorCode \l0x008b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x008d: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.CANCEL okhttp3.internal.http2.ErrorCode \l0x008f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0091: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.COMPRESSION_ERROR okhttp3.internal.http2.ErrorCode \l0x0093: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0095: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.CONNECT_ERROR okhttp3.internal.http2.ErrorCode \l0x0097: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0099: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.ENHANCE_YOUR_CALM okhttp3.internal.http2.ErrorCode \l0x009b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x009d: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.INADEQUATE_SECURITY okhttp3.internal.http2.ErrorCode \l0x009f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a1: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.HTTP_1_1_REQUIRED okhttp3.internal.http2.ErrorCode \l0x00a3: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r12 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a5: SPUT  (r0 I:okhttp3.internal.http2.ErrorCode[]) okhttp3.internal.http2.ErrorCode.$VALUES okhttp3.internal.http2.ErrorCode[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x00a7|0x00a7: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.internal.http2.ErrorCode.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

