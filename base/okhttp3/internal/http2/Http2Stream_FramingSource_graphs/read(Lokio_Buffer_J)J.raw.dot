digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:30:0x0081 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lSplitter:B:4:0x0009\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0009\l|0x0009: INVOKE  (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.waitUntilReadable():void type: DIRECT A[Catch:\{ all \-\> 0x007e \}, TRY_ENTER]\l0x000c: IGET  (r3 I:boolean) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.closed boolean A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0076 A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r3 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0012: IGET  (r3 I:okhttp3.internal.http2.ErrorCode) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x007e \}]\l0x0014: IGET  (r4 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x007e \}]\l0x0016: INVOKE  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x007e \}]\l0x001a: CONST  (r6 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x007e \}]\l0x001c: CMP_L  (r4 I:int) = (r4 I:long), (r0 I:long) A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0039 A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r4 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x007e \}]\l0x0022: IGET  (r5 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x007e \}]\l0x0024: INVOKE  (r8 I:long) = (r5 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x007e \}]\l0x0028: INVOKE  (r12 I:long) = (r12 I:long), (r8 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x007e \}]\l0x002c: INVOKE  (r11 I:long) = (r4 I:okio.Buffer), (r11 I:okio.Buffer), (r12 I:long) okio.Buffer.read(okio.Buffer, long):long type: VIRTUAL A[Catch:\{ all \-\> 0x007e \}]\l0x0030: IGET  (r13 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0032: IGET  (r4 I:long) = (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x007e \}]\l0x0034: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007e \}]\l0x0035: ARITH  (r4 I:long) = (r4 I:long) + (r11 I:long) A[Catch:\{ all \-\> 0x007e \}]\l0x0036: IPUT  (r4 I:long), (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x007e \}]\l0x0038: GOTO  \-\> 0x003a A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: MOVE  (r11 I:?[long, double]) = (r6 I:?[long, double]) A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0064 A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IGET  (r13 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x003e: IGET  (r4 I:long) = (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x007e \}]\l0x0040: IGET  (r13 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0042: IGET  (r13 I:okhttp3.internal.http2.Http2Connection) = (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007e \}]\l0x0044: IGET  (r13 I:okhttp3.internal.http2.Settings) = (r13 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x007e \}]\l0x0046: INVOKE  (r13 I:int) = (r13 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x007e \}]\l0x004a: ARITH  (r13 I:int) = (r13 I:int) \/ (2 int) A[Catch:\{ all \-\> 0x007e \}]\l0x004c: CAST  (r8 I:long) = (long) (r13 I:int) A[Catch:\{ all \-\> 0x007e \}]\l0x004d: CMP_L  (r13 I:int) = (r4 I:long), (r8 I:long) A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|0x004f: IF  (r13 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0064 A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|0x0051: IGET  (r13 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0053: IGET  (r13 I:okhttp3.internal.http2.Http2Connection) = (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007e \}]\l0x0055: IGET  (r4 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0057: IGET  (r4 I:int) = (r4 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int A[Catch:\{ all \-\> 0x007e \}]\l0x0059: IGET  (r5 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x005b: IGET  (r8 I:long) = (r5 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x007e \}]\l0x005d: INVOKE  \l  (r13 I:okhttp3.internal.http2.Http2Connection)\l  (r4 I:int)\l  (r8 I:long)\l okhttp3.internal.http2.Http2Connection.writeWindowUpdateLater(int, long):void type: VIRTUAL A[Catch:\{ all \-\> 0x007e \}]\l0x0060: IGET  (r13 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007e \}]\l0x0062: IPUT  (r0 I:long), (r13 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007e \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: CMP_L  (r13 I:int) = (r11 I:long), (r6 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|0x0069: INVOKE  \l  (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l  (r11 I:long)\l okhttp3.internal.http2.Http2Stream.FramingSource.updateConnectionFlowControl(long):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x006c|0x006c: RETURN  (r11 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006d|0x006d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0070 \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: RETURN  (r6 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: NEW_INSTANCE  (r11 I:okhttp3.internal.http2.StreamResetException) =  okhttp3.internal.http2.StreamResetException \l0x0072: INVOKE  \l  (r11 I:okhttp3.internal.http2.StreamResetException)\l  (r3 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.StreamResetException.\<init\>(okhttp3.internal.http2.ErrorCode):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|0x0075: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|SYNTHETIC\lSplitter:B:24:0x0076\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0076\l|0x0076: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x007e \}, TRY_ENTER]\l0x0078: CONST_STR  (r12 I:java.lang.String) =  \"stream closed\" A[Catch:\{ all \-\> 0x007e \}]\l0x007a: INVOKE  (r11 I:java.io.IOException), (r12 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x007d|0x007d: THROW  (r11 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x007e|ExcHandler: all null\lSplitter:B:4:0x0009\l|0x007e: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x007e \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x007f|0x007f: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007e \}, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0080|0x0080: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0081|0x0081: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0083: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0085: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0088: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x008a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008d: INVOKE  (r0 I:java.lang.StringBuilder), (r12 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0090: INVOKE  (r12 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0094: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r12 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x0097|0x0097: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http2.Http2Stream.FramingSource.read((r10 'this' I:okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]), (r11 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_30;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_27;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_24;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

