digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: IPUT  \l  (r1 I:boolean)\l  (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l okhttp3.internal.http2.Http2Stream.FramingSource.closed boolean A[Catch:\{ all \-\> 0x0026 \}, TRY_ENTER]\l0x0006: IGET  (r1 I:okio.Buffer) = (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x0026 \}]\l0x0008: INVOKE  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x000c: IGET  (r3 I:okio.Buffer) = (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x0026 \}]\l0x000e: INVOKE  (r3 I:okio.Buffer) okio.Buffer.clear():void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x0011: IGET  (r3 I:okhttp3.internal.http2.Http2Stream) = (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0026 \}]\l0x0013: INVOKE  (r3 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0019: CMP_L  (r0 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l  (r1 I:long)\l okhttp3.internal.http2.Http2Stream.FramingSource.updateConnectionFlowControl(long):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r5 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l0x0022: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.cancelStreamIfNecessary():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x0026: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|SYNTHETIC\lSplitter:B:12:0x0027\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0027\l|0x0027: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0026 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.FramingSource.close((r5 'this' I:okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

