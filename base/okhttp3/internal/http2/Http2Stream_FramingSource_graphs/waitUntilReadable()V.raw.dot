digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.waitUntilReadable()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l0x0002: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0004: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.enter():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: IGET  (r0 I:okio.Buffer) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x002f \}, TRY_ENTER]\l0x0009: INVOKE  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x000d: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x002f \}]\l0x000f: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.closed boolean A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x002f \}]\l0x001d: IGET  (r0 I:okhttp3.internal.http2.ErrorCode) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x002f \}]\l0x0023: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.waitForIo():void type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l0x0029: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x002b: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|ExcHandler: all null\lSplitter:B:1:0x0007\l|0x002f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l0x0032: IGET  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0034: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Stream.FramingSource.waitUntilReadable((r4 'this' I:okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_1;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

