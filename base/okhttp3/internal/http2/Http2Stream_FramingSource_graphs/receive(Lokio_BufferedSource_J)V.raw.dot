digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.receive(Lokio\/BufferedSource;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:38:0x0069 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lSplitter:B:4:0x0009\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0009\l|0x0009: IGET  (r3 I:boolean) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean A[Catch:\{ all \-\> 0x0066 \}, TRY_ENTER]\l0x000b: IGET  (r4 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x0066 \}]\l0x000d: INVOKE  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x0066 \}]\l0x0011: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0066 \}]\l0x0012: ARITH  (r4 I:long) = (r4 I:long) + (r12 I:long) A[Catch:\{ all \-\> 0x0066 \}]\l0x0013: IGET  (r6 I:long) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.maxByteCount long A[Catch:\{ all \-\> 0x0066 \}]\l0x0015: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0066 \}]\l0x0016: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0066 \}]\l0x0017: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ all \-\> 0x0066 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x001d A[Catch:\{ all \-\> 0x0066 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0066 \}]\l0x001c: GOTO  \-\> 0x001e A[Catch:\{ all \-\> 0x0066 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0066 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0066 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: INVOKE  (r11 I:okio.BufferedSource), (r12 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l0x0024: IGET  (r11 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l0x0026: SGET  (r12 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.FLOW_CONTROL_ERROR okhttp3.internal.http2.ErrorCode \l0x0028: INVOKE  \l  (r11 I:okhttp3.internal.http2.Http2Stream)\l  (r12 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Stream.closeLater(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0032 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: INVOKE  (r11 I:okio.BufferedSource), (r12 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: IGET  (r2 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.receiveBuffer okio.Buffer \l0x0034: INVOKE  (r2 I:long) = \l  (r11 I:okio.BufferedSource)\l  (r2 I:okio.Buffer)\l  (r12 I:long)\l okio.BufferedSource.read(okio.Buffer, long):long type: INTERFACE \l0x0038: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l0x003a: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0060 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: ARITH  (r12 I:long) = (r12 I:long) \- (r2 I:long) \l0x003f: IGET  (r2 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|SYNTHETIC\lSplitter:B:20:0x0042\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0042\l|0x0042: IGET  (r3 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x005d \}, TRY_ENTER]\l0x0044: INVOKE  (r3 I:long) = (r3 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l0x0048: CMP_L  (r0 I:int) = (r3 I:long), (r0 I:long) A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x004a|0x004a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004d A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|0x004c: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IGET  (r0 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.readBuffer okio.Buffer A[Catch:\{ all \-\> 0x005d \}]\l0x004f: IGET  (r1 I:okio.Buffer) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.receiveBuffer okio.Buffer A[Catch:\{ all \-\> 0x005d \}]\l0x0051: INVOKE  (r0 I:okio.Buffer), (r1 I:okio.Source) okio.Buffer.writeAll(okio.Source):long type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|0x0054: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x005b A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0056|0x0056: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r10 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x005d \}]\l0x0058: INVOKE  (r0 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|0x005b: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x005c|0x005c: GOTO  \-\> 0x0000 A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|ExcHandler: all null\lSplitter:B:20:0x0042\l|0x005d: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|0x005e: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005d \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x005f|0x005f: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0060|0x0060: NEW_INSTANCE  (r11 I:java.io.EOFException) =  java.io.EOFException \l0x0062: INVOKE  (r11 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x0065|0x0065: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0066|ExcHandler: all null\lSplitter:B:4:0x0009\l|0x0066: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  \l}"];
Node_35 [shape=record,label="{35\:\ 0x0067|SYNTHETIC\lSplitter:B:35:0x0067\l}"];
Node_36 [shape=record,label="{36\:\ ?|Splitter:B:35:0x0067\l|0x0067: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0066 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0068|0x0068: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0069|0x0069: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.FramingSource.receive((r10 'this' I:okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]), (r11 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_38;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_34;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_32;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_0;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_34;
Node_36 -> Node_37;
Node_36 -> Node_34;
}

