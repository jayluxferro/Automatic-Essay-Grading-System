digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.internal.http2.Http2Stream r0 = r5.this$0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?|r5.closed = true\llong r1 = r5.readBuffer.size()\lr5.readBuffer.clear()\lr5.this$0.notifyAll()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|monitor\-exit(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017}"];
Node_7 [shape=record,label="{7\:\ 0x001b|if ((r1 \> 0 ? 1 : (r1 == 0 ? 0 : \-1)) \<= 0) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|updateConnectionFlowControl(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|r5.this$0.cancelStreamIfNecessary()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|LOOP_START\lREMOVE\lLOOP:0: B:11:0x0026\-\>B:15:0x0026\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|SYNTHETIC\lREMOVE\lSplitter:B:12:0x0027\l}"];
Node_13 [shape=record,label="{13\:\ ?|REMOVE\lSplitter:B:12:0x0027\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|REMOVE\l|throw r1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:11:0x0026\-\>B:15:0x0026\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.FramingSource.close((r5v0 'this' okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_16;
Node_13 -> Node_17;
Node_15 -> Node_11;
Node_16 -> Node_14;
Node_17 -> Node_15;
}

