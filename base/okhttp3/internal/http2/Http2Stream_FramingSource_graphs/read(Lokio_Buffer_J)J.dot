digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r12 \> 0 ? 1 : (r12 == 0 ? 0 : \-1)) \< 0) goto L_0x0081\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|okhttp3.internal.http2.Http2Stream r2 = r10.this$0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|monitor\-enter(r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ ?|waitUntilReadable()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r10.closed != false) goto L_0x0076\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|okhttp3.internal.http2.ErrorCode r3 = r10.this$0.errorCode\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|if ((r10.readBuffer.size() \> 0 ? 1 : (r10.readBuffer.size() == 0 ? 0 : \-1)) \<= 0) goto L_0x0039\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|long r11 = r10.readBuffer.read(r11, java.lang.Math.min(r12, r10.readBuffer.size()))\lokhttp3.internal.http2.Http2Stream r13 = r10.this$0\lr13.unacknowledgedBytesRead = r13.unacknowledgedBytesRead + r11\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|r11 = \-1\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|PHI: r11 \l  PHI: (r11v4 long) = (r11v6 long), (r11v7 long) binds: [B:10:0x0039, B:9:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 != null) goto L_0x0064\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c}"];
Node_13 [shape=record,label="{13\:\ 0x004f|if ((r10.this$0.unacknowledgedBytesRead \> ((long) (r10.this$0.connection.okHttpSettings.getInitialWindowSize() \/ 2)) ? 1 : (r10.this$0.unacknowledgedBytesRead == ((long) (r10.this$0.connection.okHttpSettings.getInitialWindowSize() \/ 2)) ? 0 : \-1)) \< 0) goto L_0x0064\l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|r10.this$0.connection.writeWindowUpdateLater(r10.this$0.f261id, r10.this$0.unacknowledgedBytesRead)\lr10.this$0.unacknowledgedBytesRead = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|monitor\-exit(r2)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0065}"];
Node_17 [shape=record,label="{17\:\ 0x0067|if ((r11 \> \-1 ? 1 : (r11 == \-1 ? 0 : \-1)) == 0) goto L_0x006d\l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|updateConnectionFlowControl(r11)\l}"];
Node_19 [shape=record,label="{19\:\ 0x006c|RETURN\l|return r11\l}"];
Node_20 [shape=record,label="{20\:\ 0x006d|if (r3 != null) goto L_0x0070\l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|RETURN\l|return \-1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0070}"];
Node_23 [shape=record,label="{23\:\ 0x0075|throw new okhttp3.internal.http2.StreamResetException(r3)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|SYNTHETIC\lSplitter:B:24:0x0076\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0076\l}"];
Node_26 [shape=record,label="{26\:\ 0x007d|throw new java.io.IOException(\"stream closed\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x007e|REMOVE\l|java.lang.Throwable r11 = move\-exception\l}"];
Node_28 [shape=record,label="{28\:\ 0x007f|REMOVE\l}"];
Node_29 [shape=record,label="{29\:\ 0x0080|REMOVE\l|throw r11\l}"];
Node_30 [shape=record,label="{30\:\ 0x0081|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"byteCount \< 0: \")\lr0.append(r12)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0097|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http2.Http2Stream.FramingSource.read((r10v0 'this' okhttp3.internal.http2.Http2Stream$FramingSource A[IMMUTABLE_TYPE, THIS]), (r11v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_30;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_27;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_24;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

