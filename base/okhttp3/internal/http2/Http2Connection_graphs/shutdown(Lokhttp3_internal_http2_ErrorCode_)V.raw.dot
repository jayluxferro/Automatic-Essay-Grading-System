digraph "CFG forokhttp3.internal.http2.Http2Connection.shutdown(Lokhttp3\/internal\/http2\/ErrorCode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Writer) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|SYNTHETIC\lSplitter:B:4:0x0004\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0004\l|0x0004: IGET  (r1 I:boolean) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.shutdown boolean A[Catch:\{ all \-\> 0x001a \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x000b A[Catch:\{ all \-\> 0x001a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|0x0008: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0009|SYNTHETIC\lSplitter:B:8:0x0009\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0009\l|0x0009: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000a|0x000a: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|SYNTHETIC\lSplitter:B:12:0x000c\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x000c\l|0x000c: IPUT  \l  (r1 I:boolean)\l  (r4 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.shutdown boolean A[Catch:\{ all \-\> 0x001a \}, TRY_ENTER]\l0x000e: IGET  (r1 I:int) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.lastGoodStreamId int A[Catch:\{ all \-\> 0x001a \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|0x0010: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|SYNTHETIC\lSplitter:B:15:0x0011\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0011\l|0x0011: IGET  (r2 I:okhttp3.internal.http2.Http2Writer) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l0x0013: SGET  (r3 I:byte[]) =  okhttp3.internal.Util.EMPTY_BYTE_ARRAY byte[] A[Catch:\{ all \-\> 0x001d \}]\l0x0015: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Writer)\l  (r1 I:int)\l  (r5 I:okhttp3.internal.http2.ErrorCode)\l  (r3 I:byte[])\l okhttp3.internal.http2.Http2Writer.goAway(int, okhttp3.internal.http2.ErrorCode, byte[]):void type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|0x0018: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0019|0x0019: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|ExcHandler: all null\lSplitter:B:4:0x0004\l|0x001a: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|SYNTHETIC\lSplitter:B:20:0x001b\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x001b\l|0x001b: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|SYNTHETIC\lSplitter:B:22:0x001c\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x001c\l|0x001c: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x001d: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|0x001e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.shutdown((r4 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_3 -> Node_24;
Node_4 -> Node_5;
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_24;
Node_9 -> Node_10;
Node_9 -> Node_24;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_24;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_19;
Node_21 -> Node_22;
Node_21 -> Node_19;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
}

