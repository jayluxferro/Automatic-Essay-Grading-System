digraph "CFG forokhttp3.internal.http2.Http2Connection.newStream(ILjava\/util\/List;Z)Lokhttp3\/internal\/http2\/Http2Stream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r13 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: IGET  (r7 I:okhttp3.internal.http2.Http2Writer) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: MONITOR_ENTER  (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: MONITOR_ENTER  (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0078 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|SYNTHETIC\lSplitter:B:4:0x0007\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0007\l|0x0007: IGET  (r0 I:int) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int A[Catch:\{ all \-\> 0x0075 \}, TRY_ENTER]\l0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1073741823(0x3fffffff, float:1.9999999) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0013 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.REFUSED_STREAM okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x0075 \}]\l0x0010: INVOKE  \l  (r10 I:okhttp3.internal.http2.Http2Connection)\l  (r0 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Connection.shutdown(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r0 I:boolean) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.shutdown boolean A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x006f A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: IGET  (r8 I:int) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int A[Catch:\{ all \-\> 0x0075 \}]\l0x0019: IGET  (r0 I:int) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int A[Catch:\{ all \-\> 0x0075 \}]\l0x001b: ARITH  (r0 I:int) = (r0 I:int) + (2 int) A[Catch:\{ all \-\> 0x0075 \}]\l0x001d: IPUT  (r0 I:int), (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int A[Catch:\{ all \-\> 0x0075 \}]\l0x001f: NEW_INSTANCE  (r9 I:okhttp3.internal.http2.Http2Stream) =  okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0075 \}]\l0x0021: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0022: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0075 \}]\l0x0023: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0024: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0075 \}]\l0x0025: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0026: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream)\l  (r1 I:int)\l  (r2 I:okhttp3.internal.http2.Http2Connection)\l  (r3 I:boolean)\l  (r4 I:boolean)\l  (r5 I:java.util.List)\l okhttp3.internal.http2.Http2Stream.\<init\>(int, okhttp3.internal.http2.Http2Connection, boolean, boolean, java.util.List):void type: DIRECT A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003c A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IGET  (r0 I:long) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0075 \}]\l0x002d: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l0x002f: CMP_L  (r13 I:int) = (r0 I:long), (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003c A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IGET  (r0 I:long) = (r9 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0075 \}]\l0x0035: CMP_L  (r13 I:int) = (r0 I:long), (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003a A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: GOTO  \-\> 0x003c A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0075 \}]\l0x003b: GOTO  \-\> 0x003d A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: INVOKE  (r0 I:boolean) = (r9 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isOpen():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x004c A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: IGET  (r0 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x0075 \}]\l0x0045: INVOKE  (r1 I:java.lang.Integer) = (r8 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0075 \}]\l0x0049: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r9 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|0x004c: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0055 \l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|SYNTHETIC\lSplitter:B:24:0x004f\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x004f\l|0x004f: IGET  (r0 I:okhttp3.internal.http2.Http2Writer) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ all \-\> 0x0078 \}, TRY_ENTER]\l0x0051: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Writer)\l  (r6 I:boolean)\l  (r8 I:int)\l  (r11 I:int)\l  (r12 I:java.util.List)\l okhttp3.internal.http2.Http2Writer.synStream(boolean, int, int, java.util.List):void type: VIRTUAL A[Catch:\{ all \-\> 0x0078 \}]\l0x0054: GOTO  \-\> 0x005e A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: IGET  (r0 I:boolean) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.client boolean A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0057|0x0057: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0067 A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0059|0x0059: IGET  (r0 I:okhttp3.internal.http2.Http2Writer) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ all \-\> 0x0078 \}]\l0x005b: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Writer)\l  (r11 I:int)\l  (r8 I:int)\l  (r12 I:java.util.List)\l okhttp3.internal.http2.Http2Writer.pushPromise(int, int, java.util.List):void type: VIRTUAL A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x005e|0x005e: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0078 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x005f|0x005f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0066 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|0x0061: IGET  (r11 I:okhttp3.internal.http2.Http2Writer) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x0063: INVOKE  (r11 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.flush():void type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x0066|0x0066: RETURN  (r9 I:okhttp3.internal.http2.Http2Stream) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0067|SYNTHETIC\lSplitter:B:33:0x0067\l}"];
Node_34 [shape=record,label="{34\:\ ?|Splitter:B:33:0x0067\l|0x0067: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x0078 \}, TRY_ENTER]\l0x0069: CONST_STR  (r12 I:java.lang.String) =  \"client streams shouldn't have associated stream IDs\" A[Catch:\{ all \-\> 0x0078 \}]\l0x006b: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r12 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_35 [shape=record,label="{35\:\ 0x006e|0x006e: THROW  (r11 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0078 \}, TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x006f|SYNTHETIC\lSplitter:B:36:0x006f\l}"];
Node_37 [shape=record,label="{37\:\ ?|Splitter:B:36:0x006f\l|0x006f: NEW_INSTANCE  (r11 I:okhttp3.internal.http2.ConnectionShutdownException) =  okhttp3.internal.http2.ConnectionShutdownException A[Catch:\{ all \-\> 0x0075 \}, TRY_ENTER]\l0x0071: INVOKE  (r11 I:okhttp3.internal.http2.ConnectionShutdownException) okhttp3.internal.http2.ConnectionShutdownException.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0074|0x0074: THROW  (r11 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0075|ExcHandler: all null\lSplitter:B:4:0x0007\l|0x0075: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0076|0x0076: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}, TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0077|SYNTHETIC\lSplitter:B:41:0x0077\l}"];
Node_42 [shape=record,label="{42\:\ ?|Splitter:B:41:0x0077\l|0x0077: THROW  (r11 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0078 \}, TRY_ENTER]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0078|ExcHandler: all null\lSplitter:B:2:0x0006\l|0x0078: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0079|0x0079: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0078 \}, TRY_LEAVE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x007a|0x007a: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okhttp3.internal.http2.Http2Stream okhttp3.internal.http2.Http2Connection.newStream((r10 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;Z), Lokhttp3\/internal\/http2\/Http2Stream;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_43;
Node_3 -> Node_4;
Node_3 -> Node_43;
Node_4 -> Node_5;
Node_4 -> Node_39;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_36;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_24 -> Node_43;
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_33 -> Node_43;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45;
}

