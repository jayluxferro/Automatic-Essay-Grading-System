digraph "CFG forokhttp3.internal.http2.Http2Connection.newStream(ILjava\/util\/List;Z)Lokhttp3\/internal\/http2\/Http2Stream;" {
subgraph cluster_Region_462860826 {
label = "R(4:0|5|(1:31)|32) | DECL_VAR: int null, okhttp3.internal.http2.Http2Stream null, boolean null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r6 = !r13\l}"];
subgraph cluster_SynchronizedRegion_1066050167 {
label = "Synchronized:R(2:1|(2:6|(1:25)(1:(1:28)(1:35))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005}"];
subgraph cluster_Region_657179845 {
label = "R(2:6|(1:25)(1:(1:28)(1:35)))";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_161888079 {
label = "Synchronized:R(2:3|(2:(1:7)|(4:10|(1:(2:17|(1:21))(0))|18|(0))(1:38)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?}"];
subgraph cluster_Region_553027669 {
label = "R(2:(1:7)|(4:10|(1:(2:17|(1:21))(0))|18|(0))(1:38))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1250238246 {
label = "IF [B:6:0x000c] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000c|if (r10.nextStreamId \> 1073741823) goto L_0x000e\l}"];
subgraph cluster_Region_871495519 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000e|shutdown(okhttp3.internal.http2.ErrorCode.REFUSED_STREAM)\l}"];
}
}
subgraph cluster_IfRegion_198550049 {
label = "IF [B:9:0x0015] THEN: R(4:10|(1:(2:17|(1:21))(0))|18|(0)) ELSE: R(1:38)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0015|if (r10.shutdown == false) goto L_0x0017\l}"];
subgraph cluster_Region_76165591 {
label = "R(4:10|(1:(2:17|(1:21))(0))|18|(0))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0017|int r8 = r10.nextStreamId\lr10.nextStreamId += 2\lokhttp3.internal.http2.Http2Stream r0 = new okhttp3.internal.http2.Http2Stream(r8, r10, r6, false, r12)     \/\/ Catch:\{  \}\l}"];
subgraph cluster_IfRegion_527775534 {
label = "IF [B:11:0x0029, B:13:0x0031] THEN: R(1:(2:17|(1:21))(0)) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0029|ADDED_TO_REGION\l|if (r13 == true) goto L_0x002b\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|ADDED_TO_REGION\l|if (r10.bytesLeftInWriteWindow != 0) goto L_0x0033\l}"];
subgraph cluster_Region_2104190921 {
label = "R(1:(2:17|(1:21))(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1799935070 {
label = "IF [B:15:0x0037] THEN: R(2:17|(1:21)) ELSE: R(0)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0037|if (r0.bytesLeftInWriteWindow != 0) goto L_0x003a\l}"];
subgraph cluster_Region_450265205 {
label = "R(2:17|(1:21))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x003a|r13 = false\l}"];
subgraph cluster_IfRegion_1998593584 {
label = "IF [B:20:0x0041] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0041|if (r0.isOpen() == true) goto L_0x0043\l}"];
subgraph cluster_Region_280049853 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0043|r10.streams.put(java.lang.Integer.valueOf(r8), r0)\l}"];
}
}
}
subgraph cluster_Region_1100753972 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_18 [shape=record,label="{18\:\ 0x003c|r13 = true\l}"];
subgraph cluster_IfRegion_1850582201 {
label = "IF [B:20:0x0041] THEN: R(0) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0041|if (r0.isOpen() == true) goto L_0x0043\l}"];
subgraph cluster_Region_1744722572 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1367661850 {
label = "R(1:38)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0074|throw new okhttp3.internal.http2.ConnectionShutdownException()\l}"];
}
}
}
}
subgraph cluster_IfRegion_2012724684 {
label = "IF [B:23:0x004d] THEN: R(1:25) ELSE: R(1:(1:28)(1:35))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x004d|if (r11 == 0) goto L_0x004f\l}"];
subgraph cluster_Region_1886229300 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x004f\l|r10.writer.synStream(r6, r8, r11, r12)\l}"];
}
subgraph cluster_Region_1462424202 {
label = "R(1:(1:28)(1:35)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1117116633 {
label = "IF [B:27:0x0057] THEN: R(1:28) ELSE: R(1:35) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0057|if (r10.client == false) goto L_0x0059\l}"];
subgraph cluster_Region_1050234579 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0059|r10.writer.pushPromise(r11, r8, r12)\l}"];
}
subgraph cluster_Region_890155420 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x006e|throw new java.lang.IllegalArgumentException(\"client streams shouldn't have associated stream IDs\")\l}"];
}
}
}
}
}
}
subgraph cluster_IfRegion_2136826668 {
label = "IF [B:30:0x005f] THEN: R(1:31) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x005f|if (r13 == true) goto L_0x0061\l}"];
subgraph cluster_Region_2120368335 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0061|r10.writer.flush()\l}"];
}
}
Node_32 [shape=record,label="{32\:\ 0x0066|RETURN\l|return r0\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006|SYNTHETIC\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0007|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0013}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002b}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0033}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0039}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x003d|PHI: r13 \l  PHI: (r13v1 boolean) = (r13v2 boolean), (r13v5 boolean) binds: [B:18:0x003c, B:17:0x003a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x004c|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x004c: MONITOR_EXIT  \l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x004f|SYNTHETIC\lSplitter:B:24:0x004f\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0055}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x005e|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x005e: MONITOR_EXIT  \l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0067|SYNTHETIC\lSplitter:B:33:0x0067\l}"];
Node_34 [shape=record,color=red,label="{34\:\ ?|Splitter:B:33:0x0067\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x006f|SYNTHETIC\lSplitter:B:36:0x006f\l}"];
Node_37 [shape=record,color=red,label="{37\:\ ?|Splitter:B:36:0x006f\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0075|REMOVE\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0076|REMOVE\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0077|SYNTHETIC\lREMOVE\lSplitter:B:41:0x0077\l}"];
Node_42 [shape=record,color=red,label="{42\:\ ?|REMOVE\lSplitter:B:41:0x0077\l|throw r11\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0078|REMOVE\l}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x0079|REMOVE\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x007a|REMOVE\l|throw r11\l}"];
MethodNode[shape=record,label="{private okhttp3.internal.http2.Http2Stream okhttp3.internal.http2.Http2Connection.newStream((r10v0 'this' okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lRemoved duplicated region for block: B:21:0x0043 \lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;Z), Lokhttp3\/internal\/http2\/Http2Stream;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_43;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_36[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_18[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_22[style=dashed];
Node_21 -> Node_22;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_22[style=dashed];
Node_23 -> Node_24;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_27 -> Node_28;
Node_27 -> Node_33[style=dashed];
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_30 -> Node_32[style=dashed];
Node_31 -> Node_32;
Node_2 -> Node_3;
Node_2 -> Node_43;
Node_4 -> Node_5;
Node_4 -> Node_39;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_24 -> Node_43;
Node_26 -> Node_27;
Node_29 -> Node_30;
Node_33 -> Node_34;
Node_33 -> Node_43;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45;
}

