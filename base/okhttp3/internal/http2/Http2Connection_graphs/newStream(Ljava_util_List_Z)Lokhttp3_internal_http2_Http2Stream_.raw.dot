digraph "CFG forokhttp3.internal.http2.Http2Connection.newStream(Ljava\/util\/List;Z)Lokhttp3\/internal\/http2\/Http2Stream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r2 I:okhttp3.internal.http2.Http2Stream) = \l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r0 I:int)\l  (r2 I:java.util.List)\l  (r3 I:boolean)\l okhttp3.internal.http2.Http2Connection.newStream(int, java.util.List, boolean):okhttp3.internal.http2.Http2Stream type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: RETURN  (r2 I:okhttp3.internal.http2.Http2Stream) \l}"];
MethodNode[shape=record,label="{public okhttp3.internal.http2.Http2Stream okhttp3.internal.http2.Http2Connection.newStream((r1 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;Z), Lokhttp3\/internal\/http2\/Http2Stream;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

