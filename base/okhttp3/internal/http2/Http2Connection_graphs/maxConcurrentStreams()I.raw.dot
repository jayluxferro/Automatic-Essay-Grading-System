digraph "CFG forokhttp3.internal.http2.Http2Connection.maxConcurrentStreams()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:okhttp3.internal.http2.Settings) = (r2 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x000c \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x000c \}]\l0x0006: INVOKE  (r0 I:int) = (r0 I:okhttp3.internal.http2.Settings), (r1 I:int) okhttp3.internal.http2.Settings.getMaxConcurrentStreams(int):int type: VIRTUAL A[Catch:\{ all \-\> 0x000c \}]\l0x0009: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: RETURN  (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized int okhttp3.internal.http2.Http2Connection.maxConcurrentStreams((r2 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

