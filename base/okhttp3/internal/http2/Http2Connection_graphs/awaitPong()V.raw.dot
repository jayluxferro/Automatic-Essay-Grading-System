digraph "CFG forokhttp3.internal.http2.Http2Connection.awaitPong()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.awaitingPong boolean A[Catch:\{ all \-\> 0x000b \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009 A[Catch:\{ all \-\> 0x000b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r1 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ all \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|0x000c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|0x000d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized void okhttp3.internal.http2.Http2Connection.awaitPong((r1 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

