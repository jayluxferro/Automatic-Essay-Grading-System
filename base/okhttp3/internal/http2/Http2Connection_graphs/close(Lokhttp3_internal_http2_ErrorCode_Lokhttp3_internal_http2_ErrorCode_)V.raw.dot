digraph "CFG forokhttp3.internal.http2.Http2Connection.close(Lokhttp3\/internal\/http2\/ErrorCode;Lokhttp3\/internal\/http2\/ErrorCode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Connection)\l  (r5 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Connection.shutdown(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0006 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|ExcHandler: IOException null\lSplitter:B:1:0x0001\l|0x0006: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|SYNTHETIC\lSplitter:B:6:0x0008\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0008\l|0x0008: IGET  (r1 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x005c \}, TRY_ENTER]\l0x000a: INVOKE  (r1 I:boolean) = (r1 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x005c \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 A[Catch:\{ all \-\> 0x005c \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: IGET  (r0 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x005c \}]\l0x0012: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE A[Catch:\{ all \-\> 0x005c \}]\l0x0016: IGET  (r1 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x005c \}]\l0x0018: INVOKE  (r1 I:int) = (r1 I:java.util.Map) java.util.Map.size():int type: INTERFACE A[Catch:\{ all \-\> 0x005c \}]\l0x001c: NEW_ARRAY  (r1 I:okhttp3.internal.http2.Http2Stream[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Http2Stream[] A[Catch:\{ all \-\> 0x005c \}]\l0x001e: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r1 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x005c \}]\l0x0022: CHECK_CAST  (r0 I:okhttp3.internal.http2.Http2Stream[]) = (okhttp3.internal.http2.Http2Stream[]) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005c \}]\l0x0024: IGET  (r1 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x005c \}]\l0x0026: INVOKE  (r1 I:java.util.Map) java.util.Map.clear():void type: INTERFACE A[Catch:\{ all \-\> 0x005c \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005c \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003d \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x002d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:22:0x003d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|SYNTHETIC\lSplitter:B:15:0x0032\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0032\l|0x0032: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Stream)\l  (r6 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Stream.close(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0036 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|ExcHandler: IOException null\lSplitter:B:15:0x0032\l|0x0036: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|SYNTHETIC\lSplitter:B:22:0x003d\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x003d\l|0x003d: IGET  (r6 I:okhttp3.internal.http2.Http2Writer) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ IOException \-\> 0x0043 \}, TRY_ENTER]\l0x003f: INVOKE  (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0043 \}, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0043|ExcHandler: IOException null\lSplitter:B:22:0x003d\l|0x0043: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_26 [shape=record,label="{26\:\ 0x0044|0x0044: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0047 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0046|0x0046: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0047|SYNTHETIC\lSplitter:B:28:0x0047\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0047\l|0x0047: IGET  (r6 I:java.net.Socket) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.socket java.net.Socket A[Catch:\{ IOException \-\> 0x004d \}, TRY_ENTER]\l0x0049: INVOKE  (r6 I:java.net.Socket) java.net.Socket.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x004d|ExcHandler: IOException null\lSplitter:B:28:0x0047\l|0x004d: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_32 [shape=record,label="{32\:\ 0x004e|0x004e: IGET  (r6 I:java.util.concurrent.ScheduledExecutorService) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writerExecutor java.util.concurrent.ScheduledExecutorService \l0x0050: INVOKE  (r6 I:java.util.concurrent.ScheduledExecutorService) java.util.concurrent.ScheduledExecutorService.shutdown():void type: INTERFACE \l0x0053: IGET  (r6 I:java.util.concurrent.ExecutorService) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.pushExecutor java.util.concurrent.ExecutorService \l0x0055: INVOKE  (r6 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.shutdown():void type: INTERFACE \l}"];
Node_33 [shape=record,label="{33\:\ 0x0058|0x0058: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x005b \l}"];
Node_34 [shape=record,label="{34\:\ 0x005a|0x005a: RETURN   \l}"];
Node_35 [shape=record,label="{35\:\ 0x005b|0x005b: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ 0x005c|ExcHandler: all null\lSplitter:B:6:0x0008\l|0x005c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x005d|SYNTHETIC\lSplitter:B:37:0x005d\l}"];
Node_38 [shape=record,label="{38\:\ ?|Splitter:B:37:0x005d\l|0x005d: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005c \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x005e|0x005e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Connection.close((r4 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_36;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_18;
Node_16 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_23 -> Node_25;
Node_23 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_31;
Node_29 -> Node_31;
Node_29 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_36;
Node_38 -> Node_39;
Node_38 -> Node_36;
}

