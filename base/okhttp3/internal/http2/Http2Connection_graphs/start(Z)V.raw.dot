digraph "CFG forokhttp3.internal.http2.Http2Connection.start(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r6 I:okhttp3.internal.http2.Http2Writer) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x0004: INVOKE  (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.connectionPreface():void type: VIRTUAL \l0x0007: IGET  (r6 I:okhttp3.internal.http2.Http2Writer) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x0009: IGET  (r0 I:okhttp3.internal.http2.Settings) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings \l0x000b: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Writer)\l  (r0 I:okhttp3.internal.http2.Settings)\l okhttp3.internal.http2.Http2Writer.settings(okhttp3.internal.http2.Settings):void type: VIRTUAL \l0x000e: IGET  (r6 I:okhttp3.internal.http2.Settings) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings \l0x0010: INVOKE  (r6 I:int) = (r6 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL \l0x0014: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (65535(0xffff, float:9.1834E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IGET  (r1 I:okhttp3.internal.http2.Http2Writer) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x001b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l0x001d: CAST  (r3 I:long) = (long) (r6 I:int) \l0x001e: INVOKE  \l  (r1 I:okhttp3.internal.http2.Http2Writer)\l  (r2 I:int)\l  (r3 I:long)\l okhttp3.internal.http2.Http2Writer.windowUpdate(int, long):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: NEW_INSTANCE  (r6 I:java.lang.Thread) =  java.lang.Thread \l0x0023: IGET  (r0 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.readerRunnable okhttp3.internal.http2.Http2Connection$ReaderRunnable \l0x0025: INVOKE  (r6 I:java.lang.Thread), (r0 I:java.lang.Runnable) java.lang.Thread.\<init\>(java.lang.Runnable):void type: DIRECT \l0x0028: INVOKE  (r6 I:java.lang.Thread) java.lang.Thread.start():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Connection.start((r5 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

