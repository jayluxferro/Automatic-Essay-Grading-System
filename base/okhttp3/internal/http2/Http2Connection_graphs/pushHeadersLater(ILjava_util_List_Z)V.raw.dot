digraph "CFG forokhttp3.internal.http2.Http2Connection.pushHeadersLater(ILjava\/util\/List;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r7 I:okhttp3.internal.http2.Http2Connection$4) =  okhttp3.internal.http2.Http2Connection$4 A[Catch:\{ RejectedExecutionException \-\> 0x001e \}, TRY_ENTER]\l0x0002: CONST_STR  (r2 I:java.lang.String) =  \"OkHttp %s Push Headers[%s]\" A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0005: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0008: IGET  (r1 I:java.lang.String) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x000a: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x000d: INVOKE  (r1 I:java.lang.Integer) = (r9 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0011: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0014: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0015: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0016: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0017: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x0018: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection$4)\l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l  (r4 I:int)\l  (r5 I:java.util.List)\l  (r6 I:boolean)\l okhttp3.internal.http2.Http2Connection.4.\<init\>(okhttp3.internal.http2.Http2Connection, java.lang.String, java.lang.Object[], int, java.util.List, boolean):void type: DIRECT A[Catch:\{ RejectedExecutionException \-\> 0x001e \}]\l0x001b: INVOKE  \l  (r8 I:okhttp3.internal.http2.Http2Connection)\l  (r7 I:okhttp3.internal.NamedRunnable)\l okhttp3.internal.http2.Http2Connection.pushExecutorExecute(okhttp3.internal.NamedRunnable):void type: DIRECT A[Catch:\{ RejectedExecutionException \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lExcHandler: RejectedExecutionException null\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Connection.pushHeadersLater((r8 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_2;
}

