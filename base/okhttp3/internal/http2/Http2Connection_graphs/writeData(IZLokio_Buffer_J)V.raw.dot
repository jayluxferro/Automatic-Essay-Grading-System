digraph "CFG forokhttp3.internal.http2.Http2Connection.writeData(IZLokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0003: CMP_L  (r3 I:int) = (r12 I:long), (r1 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r12 I:okhttp3.internal.http2.Http2Writer) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x0009: INVOKE  \l  (r12 I:okhttp3.internal.http2.Http2Writer)\l  (r10 I:boolean)\l  (r9 I:int)\l  (r11 I:okio.Buffer)\l  (r0 I:int)\l okhttp3.internal.http2.Http2Writer.data(boolean, int, okio.Buffer, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CMP_L  (r3 I:int) = (r12 I:long), (r1 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:32:0x006a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\lSplitter:B:7:0x0012\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0012\l|0x0012: IGET  (r3 I:long) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ InterruptedException \-\> 0x005b \}, TRY_ENTER]\l0x0014: CMP_L  (r3 I:int) = (r3 I:long), (r1 I:long) A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:15:0x0030 A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IGET  (r3 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ InterruptedException \-\> 0x005b \}]\l0x001a: INVOKE  (r4 I:java.lang.Integer) = (r9 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ InterruptedException \-\> 0x005b \}]\l0x001e: INVOKE  (r3 I:boolean) = (r3 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0028 A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: INVOKE  (r8 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x005b \}]\l0x0027: GOTO  \-\> 0x0012 A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: NEW_INSTANCE  (r9 I:java.io.IOException) =  java.io.IOException A[Catch:\{ InterruptedException \-\> 0x005b \}]\l0x002a: CONST_STR  (r10 I:java.lang.String) =  \"stream closed\" A[Catch:\{ InterruptedException \-\> 0x005b \}]\l0x002c: INVOKE  (r9 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ InterruptedException \-\> 0x005b \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ InterruptedException \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|SYNTHETIC\lSplitter:B:15:0x0030\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0030\l|0x0030: IGET  (r3 I:long) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0059 \}, TRY_ENTER]\l0x0032: INVOKE  (r3 I:long) = (r12 I:long), (r3 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x0059 \}]\l0x0036: CAST  (r3 I:int) = (int) (r3 I:long) A[Catch:\{ all \-\> 0x0059 \}]\l0x0037: IGET  (r4 I:okhttp3.internal.http2.Http2Writer) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ all \-\> 0x0059 \}]\l0x0039: INVOKE  (r4 I:int) = (r4 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxDataLength():int type: VIRTUAL A[Catch:\{ all \-\> 0x0059 \}]\l0x003d: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) java.lang.Math.min(int, int):int type: STATIC A[Catch:\{ all \-\> 0x0059 \}]\l0x0041: IGET  (r4 I:long) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0059 \}]\l0x0043: CAST  (r6 I:long) = (long) (r3 I:int) A[Catch:\{ all \-\> 0x0059 \}]\l0x0044: ARITH  (r4 I:long) = (r4 I:long) \- (r6 I:long) A[Catch:\{ all \-\> 0x0059 \}]\l0x0045: IPUT  (r4 I:long), (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0059 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0059 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0049: ARITH  (r12 I:long) = (r12 I:long) \- (r6 I:long) \l0x004a: IGET  (r4 I:okhttp3.internal.http2.Http2Writer) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|0x004c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0054 \l}"];
Node_20 [shape=record,label="{20\:\ 0x004e|0x004e: CMP_L  (r5 I:int) = (r12 I:long), (r1 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0050|0x0050: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0054 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0052|0x0052: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|0x0054: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0055|0x0055: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Writer)\l  (r5 I:boolean)\l  (r9 I:int)\l  (r11 I:okio.Buffer)\l  (r3 I:int)\l okhttp3.internal.http2.Http2Writer.data(boolean, int, okio.Buffer, int):void type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|ExcHandler: all null\lSplitter:B:15:0x0030\l|0x0059: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|SYNTHETIC\lSplitter:B:27:0x005b\l}"];
Node_28 [shape=record,label="{28\:\ ?|Splitter:B:27:0x005b\l|0x005b: INVOKE  (r9 I:java.lang.Thread) =  java.lang.Thread.currentThread():java.lang.Thread type: STATIC A[Catch:\{ all \-\> 0x0059 \}, ExcHandler: InterruptedException null, TRY_ENTER]\l0x005f: INVOKE  (r9 I:java.lang.Thread) java.lang.Thread.interrupt():void type: VIRTUAL A[Catch:\{ all \-\> 0x0059 \}]\l0x0062: NEW_INSTANCE  (r9 I:java.io.InterruptedIOException) =  java.io.InterruptedIOException A[Catch:\{ all \-\> 0x0059 \}]\l0x0064: INVOKE  (r9 I:java.io.InterruptedIOException) java.io.InterruptedIOException.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0059 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0067|0x0067: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0059 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0068|0x0068: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0059 \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0069|0x0069: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x006a|0x006a: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.writeData((r8 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_32;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_27;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_7;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_4;
Node_25 -> Node_30;
Node_27 -> Node_28;
Node_27 -> Node_25;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

