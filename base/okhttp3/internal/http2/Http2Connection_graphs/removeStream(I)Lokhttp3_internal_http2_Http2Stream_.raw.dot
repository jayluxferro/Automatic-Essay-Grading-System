digraph "CFG forokhttp3.internal.http2.Http2Connection.removeStream(I)Lokhttp3\/internal\/http2\/Http2Stream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l0x0003: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0012 \}]\l0x0007: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.remove(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0012 \}]\l0x000b: CHECK_CAST  (r2 I:okhttp3.internal.http2.Http2Stream) = (okhttp3.internal.http2.Http2Stream) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0012 \}]\l0x000d: INVOKE  (r1 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0012 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r2 I:okhttp3.internal.http2.Http2Stream) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0012: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized okhttp3.internal.http2.Http2Stream okhttp3.internal.http2.Http2Connection.removeStream((r1 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

