digraph "CFG forokhttp3.internal.http2.Http2Connection.pushDataLater(ILokio\/BufferedSource;IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r5 I:okio.Buffer) =  okio.Buffer \l0x0002: INVOKE  (r5 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0005: CAST  (r0 I:long) = (long) (r11 I:int) \l0x0006: INVOKE  (r10 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.require(long):void type: INTERFACE \l0x0009: INVOKE  \l  (r10 I:okio.BufferedSource)\l  (r5 I:okio.Buffer)\l  (r0 I:long)\l okio.BufferedSource.read(okio.Buffer, long):long type: INTERFACE \l0x000c: INVOKE  (r2 I:long) = (r5 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0010: CMP_L  (r10 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: NEW_INSTANCE  (r10 I:okhttp3.internal.http2.Http2Connection$5) =  okhttp3.internal.http2.Http2Connection$5 \l0x0016: CONST_STR  (r2 I:java.lang.String) =  \"OkHttp %s Push Data[%s]\" \l0x0018: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0019: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: IGET  (r1 I:java.lang.String) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String \l0x001e: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0020: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0021: INVOKE  (r1 I:java.lang.Integer) = (r9 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0025: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0029: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection$5)\l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l  (r4 I:int)\l  (r5 I:okio.Buffer)\l  (r6 I:int)\l  (r7 I:boolean)\l okhttp3.internal.http2.Http2Connection.5.\<init\>(okhttp3.internal.http2.Http2Connection, java.lang.String, java.lang.Object[], int, okio.Buffer, int, boolean):void type: DIRECT \l0x002f: INVOKE  \l  (r8 I:okhttp3.internal.http2.Http2Connection)\l  (r10 I:okhttp3.internal.NamedRunnable)\l okhttp3.internal.http2.Http2Connection.pushExecutorExecute(okhttp3.internal.NamedRunnable):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0032|0x0032: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0033|0x0033: NEW_INSTANCE  (r9 I:java.io.IOException) =  java.io.IOException \l0x0035: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0037: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003a: INVOKE  (r0 I:long) = (r5 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x003e: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0041: CONST_STR  (r12 I:java.lang.String) =  \" != \" \l0x0043: INVOKE  (r10 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0049: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r9 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0050|0x0050: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Connection.pushDataLater((r8 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

