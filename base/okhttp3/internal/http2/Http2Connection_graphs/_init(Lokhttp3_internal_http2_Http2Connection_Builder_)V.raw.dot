digraph "CFG forokhttp3.internal.http2.Http2Connection.\<init\>(Lokhttp3\/internal\/http2\/Http2Connection$Builder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  (r21 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0007: NEW_INSTANCE  (r2 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0009: INVOKE  (r2 I:java.util.LinkedHashMap) java.util.LinkedHashMap.\<init\>():void type: DIRECT \l0x000c: IPUT  \l  (r2 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.streams java.util.Map \l0x000e: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0010: IPUT  (r2 I:long), (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long \l0x0012: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Settings) =  okhttp3.internal.http2.Settings \l0x0014: INVOKE  (r2 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.\<init\>():void type: DIRECT \l0x0017: IPUT  \l  (r2 I:okhttp3.internal.http2.Settings)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings \l0x0019: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Settings) =  okhttp3.internal.http2.Settings \l0x001b: INVOKE  (r2 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.\<init\>():void type: DIRECT \l0x001e: IPUT  \l  (r2 I:okhttp3.internal.http2.Settings)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings \l0x0020: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: IPUT  \l  (r2 I:boolean)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings boolean \l0x0023: NEW_INSTANCE  (r3 I:java.util.LinkedHashSet) =  java.util.LinkedHashSet \l0x0025: INVOKE  (r3 I:java.util.LinkedHashSet) java.util.LinkedHashSet.\<init\>():void type: DIRECT \l0x0028: IPUT  \l  (r3 I:java.util.Set\<java.lang.Integer\>)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.currentPushRequests java.util.Set \l0x002a: IGET  (r3 I:okhttp3.internal.http2.PushObserver) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.pushObserver okhttp3.internal.http2.PushObserver \l0x002c: IPUT  \l  (r3 I:okhttp3.internal.http2.PushObserver)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.pushObserver okhttp3.internal.http2.PushObserver \l0x002e: IGET  (r3 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.client boolean \l0x0030: IPUT  \l  (r3 I:boolean)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.client boolean \l0x0032: IGET  (r3 I:okhttp3.internal.http2.Http2Connection$Listener) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.listener okhttp3.internal.http2.Http2Connection$Listener \l0x0034: IPUT  \l  (r3 I:okhttp3.internal.http2.Http2Connection$Listener)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.listener okhttp3.internal.http2.Http2Connection$Listener \l0x0036: IGET  (r3 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.client boolean \l0x0038: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0039: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x003c|0x003c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x003e|0x003e: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x003f|0x003f: IPUT  (r3 I:int), (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int \l0x0041: IGET  (r3 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.client boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x004a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|0x0045: IGET  (r3 I:int) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int \l0x0047: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x0048: IPUT  (r3 I:int), (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int \l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|0x004a: IGET  (r3 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.client boolean \l0x004c: CONST  (r4 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|0x004d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0056 \l}"];
Node_9 [shape=record,label="{9\:\ 0x004f|0x004f: IGET  (r3 I:okhttp3.internal.http2.Settings) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings \l0x0051: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (16777216(0x1000000, float:2.3509887E\-38) ?[int, float, short, byte, char])\l \l0x0053: INVOKE  \l  (r3 I:okhttp3.internal.http2.Settings)\l  (r4 I:int)\l  (r6 I:int)\l okhttp3.internal.http2.Settings.set(int, int):okhttp3.internal.http2.Settings type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: IGET  (r3 I:java.lang.String) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.hostname java.lang.String \l0x0058: IPUT  \l  (r3 I:java.lang.String)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.hostname java.lang.String \l0x005a: NEW_INSTANCE  (r3 I:java.util.concurrent.ScheduledThreadPoolExecutor) =  java.util.concurrent.ScheduledThreadPoolExecutor \l0x005c: CONST_STR  (r6 I:java.lang.String) =  \"OkHttp %s Writer\" \l0x005e: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0060: IGET  (r8 I:java.lang.String) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String \l0x0062: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0064: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String), (r7 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0068: INVOKE  (r6 I:java.util.concurrent.ThreadFactory) = (r6 I:java.lang.String), (r2 I:boolean) okhttp3.internal.Util.threadFactory(java.lang.String, boolean):java.util.concurrent.ThreadFactory type: STATIC \l0x006c: INVOKE  \l  (r3 I:java.util.concurrent.ScheduledThreadPoolExecutor)\l  (r5 I:int)\l  (r6 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ScheduledThreadPoolExecutor.\<init\>(int, java.util.concurrent.ThreadFactory):void type: DIRECT \l0x006f: IPUT  \l  (r3 I:java.util.concurrent.ScheduledExecutorService)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.writerExecutor java.util.concurrent.ScheduledExecutorService \l0x0071: IGET  (r3 I:int) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.pingIntervalMillis int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0073|0x0073: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0087 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0075|0x0075: IGET  (r6 I:java.util.concurrent.ScheduledExecutorService) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writerExecutor java.util.concurrent.ScheduledExecutorService \l0x0077: NEW_INSTANCE  (r7 I:okhttp3.internal.http2.Http2Connection$PingRunnable) =  okhttp3.internal.http2.Http2Connection$PingRunnable \l0x0079: INVOKE  \l  (r7 I:okhttp3.internal.http2.Http2Connection$PingRunnable)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:boolean)\l  (r2 I:int)\l  (r2 I:int)\l okhttp3.internal.http2.Http2Connection.PingRunnable.\<init\>(okhttp3.internal.http2.Http2Connection, boolean, int, int):void type: DIRECT \l0x007c: IGET  (r3 I:int) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.pingIntervalMillis int \l0x007e: CAST  (r8 I:long) = (long) (r3 I:int) \l0x007f: IGET  (r3 I:int) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.pingIntervalMillis int \l0x0081: CAST  (r10 I:long) = (long) (r3 I:int) \l0x0082: SGET  (r12 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0084: INVOKE  \l  (r6 I:java.util.concurrent.ScheduledExecutorService)\l  (r7 I:java.lang.Runnable)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):java.util.concurrent.ScheduledFuture type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0087|0x0087: NEW_INSTANCE  (r3 I:java.util.concurrent.ThreadPoolExecutor) =  java.util.concurrent.ThreadPoolExecutor \l0x0089: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008a: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x008b: CONST  (r16 I:?[long, double]) = (60 ?[long, double]) \l0x008d: SGET  (r18 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x008f: NEW_INSTANCE  (r19 I:java.util.concurrent.LinkedBlockingQueue) =  java.util.concurrent.LinkedBlockingQueue \l0x0091: INVOKE  (r19 I:java.util.concurrent.LinkedBlockingQueue) java.util.concurrent.LinkedBlockingQueue.\<init\>():void type: DIRECT \l0x0094: CONST_STR  (r6 I:java.lang.String) =  \"OkHttp %s Push Observer\" \l0x0096: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0098: IGET  (r8 I:java.lang.String) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String \l0x009a: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x009c: INVOKE  (r2 I:java.lang.String) = (r6 I:java.lang.String), (r7 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x00a0: INVOKE  (r20 I:java.util.concurrent.ThreadFactory) = (r2 I:java.lang.String), (r5 I:boolean) okhttp3.internal.Util.threadFactory(java.lang.String, boolean):java.util.concurrent.ThreadFactory type: STATIC \l0x00a4: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x00a5: INVOKE  \l  (r13 I:java.util.concurrent.ThreadPoolExecutor)\l  (r14 I:int)\l  (r15 I:int)\l  (r16 I:long)\l  (r18 I:java.util.concurrent.TimeUnit)\l  (r19 I:java.util.concurrent.BlockingQueue)\l  (r20 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ThreadPoolExecutor.\<init\>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory):void type: DIRECT \l0x00a8: IPUT  \l  (r3 I:java.util.concurrent.ExecutorService)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.pushExecutor java.util.concurrent.ExecutorService \l0x00aa: IGET  (r2 I:okhttp3.internal.http2.Settings) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings \l0x00ac: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (65535(0xffff, float:9.1834E\-41) ?[int, float, short, byte, char])\l \l0x00af: INVOKE  \l  (r2 I:okhttp3.internal.http2.Settings)\l  (r4 I:int)\l  (r3 I:int)\l okhttp3.internal.http2.Settings.set(int, int):okhttp3.internal.http2.Settings type: VIRTUAL \l0x00b2: IGET  (r2 I:okhttp3.internal.http2.Settings) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings \l0x00b4: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x00b5: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l0x00b7: INVOKE  \l  (r2 I:okhttp3.internal.http2.Settings)\l  (r3 I:int)\l  (r4 I:int)\l okhttp3.internal.http2.Settings.set(int, int):okhttp3.internal.http2.Settings type: VIRTUAL \l0x00ba: IGET  (r2 I:okhttp3.internal.http2.Settings) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings \l0x00bc: INVOKE  (r2 I:int) = (r2 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL \l0x00c0: CAST  (r2 I:long) = (long) (r2 I:int) \l0x00c1: IPUT  (r2 I:long), (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long \l0x00c3: IGET  (r2 I:java.net.Socket) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.socket java.net.Socket \l0x00c5: IPUT  \l  (r2 I:java.net.Socket)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.socket java.net.Socket \l0x00c7: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Http2Writer) =  okhttp3.internal.http2.Http2Writer \l0x00c9: IGET  (r3 I:okio.BufferedSink) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.sink okio.BufferedSink \l0x00cb: IGET  (r4 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.client boolean \l0x00cd: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Writer)\l  (r3 I:okio.BufferedSink)\l  (r4 I:boolean)\l okhttp3.internal.http2.Http2Writer.\<init\>(okio.BufferedSink, boolean):void type: DIRECT \l0x00d0: IPUT  \l  (r2 I:okhttp3.internal.http2.Http2Writer)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer \l0x00d2: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable) =  okhttp3.internal.http2.Http2Connection$ReaderRunnable \l0x00d4: NEW_INSTANCE  (r3 I:okhttp3.internal.http2.Http2Reader) =  okhttp3.internal.http2.Http2Reader \l0x00d6: IGET  (r1 I:okio.BufferedSource) = (r1 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.source okio.BufferedSource \l0x00d8: IGET  (r4 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.client boolean \l0x00da: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Reader)\l  (r1 I:okio.BufferedSource)\l  (r4 I:boolean)\l okhttp3.internal.http2.Http2Reader.\<init\>(okio.BufferedSource, boolean):void type: DIRECT \l0x00dd: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l  (r3 I:okhttp3.internal.http2.Http2Reader)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.\<init\>(okhttp3.internal.http2.Http2Connection, okhttp3.internal.http2.Http2Reader):void type: DIRECT \l0x00e0: IPUT  \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.readerRunnable okhttp3.internal.http2.Http2Connection$ReaderRunnable \l}"];
Node_14 [shape=record,label="{14\:\ 0x00e2|0x00e2: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Connection.\<init\>((r21 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r22 I:okhttp3.internal.http2.Http2Connection$Builder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

