digraph "CFG forokhttp3.internal.http2.Http2Connection.updateConnectionFlowControl(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:long) = (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0022 \}]\l0x0004: ARITH  (r0 I:long) = (r0 I:long) + (r4 I:long) A[Catch:\{ all \-\> 0x0022 \}]\l0x0005: IPUT  (r0 I:long), (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x0022 \}]\l0x0007: IGET  (r4 I:long) = (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x0022 \}]\l0x0009: IGET  (r0 I:okhttp3.internal.http2.Settings) = (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x0022 \}]\l0x000b: INVOKE  (r0 I:int) = (r0 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x000f: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) A[Catch:\{ all \-\> 0x0022 \}]\l0x0011: CAST  (r0 I:long) = (long) (r0 I:int) A[Catch:\{ all \-\> 0x0022 \}]\l0x0012: CMP_L  (r4 I:int) = (r4 I:long), (r0 I:long) A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x0020 A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0022 \}]\l0x0017: IGET  (r0 I:long) = (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x0022 \}]\l0x0019: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Connection)\l  (r4 I:int)\l  (r0 I:long)\l okhttp3.internal.http2.Http2Connection.writeWindowUpdateLater(int, long):void type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x001c: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0022 \}]\l0x001e: IPUT  (r4 I:long), (r3 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead long A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0022: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized void okhttp3.internal.http2.Http2Connection.updateConnectionFlowControl((r3 'this' I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

