digraph "CFG forokhttp3.internal.http2.Http2Codec.readHttp2HeadersList(Ljava\/util\/List;Lokhttp3\/Protocol;)Lokhttp3\/Response$Builder;" {
subgraph cluster_Region_1024531078 {
label = "R(3:0|(3:2|(2:8|(1:10)(1:(1:13)(0)))(1:(1:7))|14)|(2:(1:17)|(1:19)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.Headers$Builder okhttp3.Headers.Builder r0 = new okhttp3.Headers.Builder()\lint int r1 = r8.size()\lint r3 = 0\lokhttp3.Headers.Builder r4 = r0\lokhttp3.internal.http.StatusLine r0 = null\l}"];
subgraph cluster_LoopRegion_1948689836 {
label = "LOOP:0: (3:2|(2:8|(1:10)(1:(1:13)(0)))(1:(1:7))|14)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r0 r3 r4 \l  PHI: (r0v2 okhttp3.internal.http.StatusLine) = (r0v1 okhttp3.internal.http.StatusLine), (r0v3 okhttp3.internal.http.StatusLine) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 okhttp3.Headers$Builder) = (r4v0 okhttp3.Headers$Builder), (r4v2 okhttp3.Headers$Builder) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:14:0x005e\l|if (r3 \< r1) goto L_0x000f\l}"];
subgraph cluster_Region_553000046 {
label = "R(3:2|(2:8|(1:10)(1:(1:13)(0)))(1:(1:7))|14)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|okhttp3.internal.http2.Header okhttp3.internal.http2.Header r5 = r8.get(r3)\l}"];
subgraph cluster_IfRegion_1789722734 {
label = "IF [B:3:0x0015] THEN: R(2:8|(1:10)(1:(1:13)(0))) ELSE: R(1:(1:7))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r5 != null) goto L_0x0027\l}"];
subgraph cluster_Region_1273075437 {
label = "R(2:8|(1:10)(1:(1:13)(0)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0027|okio.ByteString okio.ByteString r6 = r5.name\ljava.lang.String java.lang.String r5 = r5.value.utf8()\l}"];
subgraph cluster_IfRegion_871863981 {
label = "IF [B:9:0x0035] THEN: R(1:10) ELSE: R(1:(1:13)(0))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0035|if (r6.equals(okhttp3.internal.http2.Header.RESPONSE_STATUS) == true) goto L_0x0037\l}"];
subgraph cluster_Region_1113351728 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0037|okhttp3.internal.http.StatusLine r0 = okhttp3.internal.http.StatusLine.parse(\"HTTP\/1.1 \" + r5)\l}"];
}
subgraph cluster_Region_51480572 {
label = "R(1:(1:13)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1860299424 {
label = "IF [B:12:0x0053] THEN: R(1:13) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0053|if (HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(r6) == false) goto L_0x0055\l}"];
subgraph cluster_Region_328452450 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0055|okhttp3.internal.Internal.instance.addLenient(r4, r6.utf8(), r5)\l}"];
}
subgraph cluster_Region_909566297 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
subgraph cluster_Region_1050892154 {
label = "R(1:(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2106634187 {
label = "IF [B:4:0x0017, B:6:0x001d] THEN: R(1:7) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|ADDED_TO_REGION\l|if (r0 != null) goto L_0x0019\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|ADDED_TO_REGION\l|if (r0.code == 100) goto L_0x001f\l}"];
subgraph cluster_Region_652423698 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001f|r4 = new okhttp3.Headers.Builder()\lr0 = null\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x005e|LOOP_END\lPHI: r0 r4 \l  PHI: (r0v3 okhttp3.internal.http.StatusLine) = (r0v2 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v6 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v8 okhttp3.internal.http.StatusLine) binds: [B:26:0x005e, B:21:0x005e, B:25:0x005e, B:22:0x005e, B:23:0x005e, B:24:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 okhttp3.Headers$Builder) = (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v3 okhttp3.Headers$Builder) binds: [B:26:0x005e, B:21:0x005e, B:25:0x005e, B:22:0x005e, B:23:0x005e, B:24:0x005e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:14:0x005e\l|r3++\l}"];
}
}
subgraph cluster_Region_1254854668 {
label = "R(2:(1:17)|(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1892000194 {
label = "IF [B:15:0x0061] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0061|if (r0 != null) goto L_0x0063\l}"];
subgraph cluster_Region_1381565817 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0080|RETURN\l|return new okhttp3.Response.Builder().protocol(r9).code(r0.code).message(r0.message).headers(r4.build())\l}"];
}
}
subgraph cluster_Region_1173016782 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0088|throw new java.net.ProtocolException(\"Expected ':status' header not present\")\l}"];
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x004d}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0063}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0081}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0061|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x005e|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x005e|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x005e|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x005e|SYNTHETIC\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x005e|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x005e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static okhttp3.Response$Builder okhttp3.internal.http2.Http2Codec.readHttp2HeadersList((r8v0 java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 okhttp3.Protocol A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;, Lokhttp3\/Protocol;, ), Lokhttp3\/Response$Builder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_25;
Node_12 -> Node_13;
Node_12 -> Node_26[style=dashed];
Node_13 -> Node_21;
Node_4 -> Node_5;
Node_4 -> Node_22[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_23[style=dashed];
Node_7 -> Node_24;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_5 -> Node_6;
Node_11 -> Node_12;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_15;
Node_21 -> Node_14;
Node_22 -> Node_14;
Node_23 -> Node_14;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_26 -> Node_14;
}

