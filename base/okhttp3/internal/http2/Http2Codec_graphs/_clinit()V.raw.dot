digraph "CFG forokhttp3.internal.http2.Http2Codec.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"connection\" \l0x0002: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x0006: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.CONNECTION okio.ByteString \l0x0008: CONST_STR  (r0 I:java.lang.String) =  \"host\" \l0x000a: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x000e: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.HOST okio.ByteString \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"keep\-alive\" \l0x0012: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x0016: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.KEEP_ALIVE okio.ByteString \l0x0018: CONST_STR  (r0 I:java.lang.String) =  \"proxy\-connection\" \l0x001a: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x001e: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION okio.ByteString \l0x0020: CONST_STR  (r0 I:java.lang.String) =  \"transfer\-encoding\" \l0x0022: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x0026: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING okio.ByteString \l0x0028: CONST_STR  (r0 I:java.lang.String) =  \"te\" \l0x002a: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x002e: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.TE okio.ByteString \l0x0030: CONST_STR  (r0 I:java.lang.String) =  \"encoding\" \l0x0032: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x0036: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.ENCODING okio.ByteString \l0x0038: CONST_STR  (r0 I:java.lang.String) =  \"upgrade\" \l0x003a: INVOKE  (r0 I:okio.ByteString) = (r0 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x003e: SPUT  (r0 I:okio.ByteString) okhttp3.internal.http2.Http2Codec.UPGRADE okio.ByteString \l0x0040: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0042: NEW_ARRAY  (r0 I:okio.ByteString[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okio.ByteString[] \l0x0044: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.CONNECTION okio.ByteString \l0x0046: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0049: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.HOST okio.ByteString \l0x004b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x004e: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.KEEP_ALIVE okio.ByteString \l0x0050: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0051: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0053: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION okio.ByteString \l0x0055: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0056: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0058: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.TE okio.ByteString \l0x005a: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x005b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x005d: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING okio.ByteString \l0x005f: CONST  (r7 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0060: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0062: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.ENCODING okio.ByteString \l0x0064: CONST  (r8 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0065: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0067: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.UPGRADE okio.ByteString \l0x0069: CONST  (r9 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x006a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x006c: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_METHOD okio.ByteString \l0x006e: CONST  (r10 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0070: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0072: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_PATH okio.ByteString \l0x0074: CONST  (r11 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0076: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0078: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_SCHEME okio.ByteString \l0x007a: CONST  (r11 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x007c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x007e: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_AUTHORITY okio.ByteString \l0x0080: CONST  (r11 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0082: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0084: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object[]) okhttp3.internal.Util.immutableList(java.lang.Object[]):java.util.List type: STATIC \l0x0088: SPUT  (r0 I:java.util.List\<okio.ByteString\>) okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS java.util.List \l0x008a: NEW_ARRAY  (r0 I:okio.ByteString[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: okio.ByteString[] \l0x008c: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.CONNECTION okio.ByteString \l0x008e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0090: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.HOST okio.ByteString \l0x0092: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0094: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.KEEP_ALIVE okio.ByteString \l0x0096: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0098: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION okio.ByteString \l0x009a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x009c: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.TE okio.ByteString \l0x009e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a0: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING okio.ByteString \l0x00a2: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a4: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.ENCODING okio.ByteString \l0x00a6: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a8: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2Codec.UPGRADE okio.ByteString \l0x00aa: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00ac: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object[]) okhttp3.internal.Util.immutableList(java.lang.Object[]):java.util.List type: STATIC \l0x00b0: SPUT  (r0 I:java.util.List\<okio.ByteString\>) okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x00b2|0x00b2: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.internal.http2.Http2Codec.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

