digraph "CFG forokhttp3.internal.http2.Http2Codec.readHttp2HeadersList(Ljava\/util\/List;Lokhttp3\/Protocol;)Lokhttp3\/Response$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0002: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r8 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0061 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r5 I:java.lang.Object) = (r8 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0013: CHECK_CAST  (r5 I:okhttp3.internal.http2.Header) = (okhttp3.internal.http2.Header) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IGET  (r5 I:int) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.code int \l0x001b: CONST  (r6 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0021: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x0024: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IGET  (r6 I:okio.ByteString) = (r5 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.name okio.ByteString \l0x0029: IGET  (r5 I:okio.ByteString) = (r5 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.value okio.ByteString \l0x002b: INVOKE  (r5 I:java.lang.String) = (r5 I:okio.ByteString) okio.ByteString.utf8():java.lang.String type: VIRTUAL \l0x002f: SGET  (r7 I:okio.ByteString) =  okhttp3.internal.http2.Header.RESPONSE_STATUS okio.ByteString \l0x0031: INVOKE  (r7 I:boolean) = (r6 I:okio.ByteString), (r7 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003c: CONST_STR  (r6 I:java.lang.String) =  \"HTTP\/1.1 \" \l0x003e: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0041: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0048: INVOKE  (r0 I:okhttp3.internal.http.StatusLine) = (r0 I:java.lang.String) okhttp3.internal.http.StatusLine.parse(java.lang.String):okhttp3.internal.http.StatusLine type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: SGET  (r7 I:java.util.List\<okio.ByteString\>) =  okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS java.util.List \l0x004f: INVOKE  (r7 I:boolean) = (r7 I:java.util.List), (r6 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005e \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: SGET  (r7 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0057: INVOKE  (r6 I:java.lang.String) = (r6 I:okio.ByteString) okio.ByteString.utf8():java.lang.String type: VIRTUAL \l0x005b: INVOKE  \l  (r7 I:okhttp3.internal.Internal)\l  (r4 I:okhttp3.Headers$Builder)\l  (r6 I:java.lang.String)\l  (r5 I:java.lang.String)\l okhttp3.internal.Internal.addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x005e|0x005e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0081 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|0x0063: NEW_INSTANCE  (r8 I:okhttp3.Response$Builder) =  okhttp3.Response$Builder \l0x0065: INVOKE  (r8 I:okhttp3.Response$Builder) okhttp3.Response.Builder.\<init\>():void type: DIRECT \l0x0068: INVOKE  (r8 I:okhttp3.Response$Builder) = (r8 I:okhttp3.Response$Builder), (r9 I:okhttp3.Protocol) okhttp3.Response.Builder.protocol(okhttp3.Protocol):okhttp3.Response$Builder type: VIRTUAL \l0x006c: IGET  (r9 I:int) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.code int \l0x006e: INVOKE  (r8 I:okhttp3.Response$Builder) = (r8 I:okhttp3.Response$Builder), (r9 I:int) okhttp3.Response.Builder.code(int):okhttp3.Response$Builder type: VIRTUAL \l0x0072: IGET  (r9 I:java.lang.String) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.message java.lang.String \l0x0074: INVOKE  (r8 I:okhttp3.Response$Builder) = (r8 I:okhttp3.Response$Builder), (r9 I:java.lang.String) okhttp3.Response.Builder.message(java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l0x0078: INVOKE  (r9 I:okhttp3.Headers) = (r4 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l0x007c: INVOKE  (r8 I:okhttp3.Response$Builder) = (r8 I:okhttp3.Response$Builder), (r9 I:okhttp3.Headers) okhttp3.Response.Builder.headers(okhttp3.Headers):okhttp3.Response$Builder type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0080|0x0080: RETURN  (r8 I:okhttp3.Response$Builder) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0081|0x0081: NEW_INSTANCE  (r8 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0083: CONST_STR  (r9 I:java.lang.String) =  \"Expected ':status' header not present\" \l0x0085: INVOKE  (r8 I:java.net.ProtocolException), (r9 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0088|0x0088: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Response$Builder okhttp3.internal.http2.Http2Codec.readHttp2HeadersList((r8 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:okhttp3.Protocol A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;, Lokhttp3\/Protocol;, ), Lokhttp3\/Response$Builder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

