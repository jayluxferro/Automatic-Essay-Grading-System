digraph "CFG forokhttp3.internal.http2.Http2Codec.openResponseBody(Lokhttp3\/Response;)Lokhttp3\/ResponseBody;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r4 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0002: IGET  (r0 I:okhttp3.EventListener) = (r0 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0004: IGET  (r1 I:okhttp3.internal.connection.StreamAllocation) = (r4 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0006: IGET  (r1 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0008: INVOKE  (r0 I:okhttp3.EventListener), (r1 I:okhttp3.Call) okhttp3.EventListener.responseBodyStart(okhttp3.Call):void type: VIRTUAL \l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"Content\-Type\" \l0x000d: INVOKE  (r0 I:java.lang.String) = (r5 I:okhttp3.Response), (r0 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r1 I:long) = (r5 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.contentLength(okhttp3.Response):long type: STATIC \l0x0015: NEW_INSTANCE  (r5 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource) =  okhttp3.internal.http2.Http2Codec$StreamFinishingSource \l0x0017: IGET  (r3 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l0x0019: INVOKE  (r3 I:okio.Source) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.getSource():okio.Source type: VIRTUAL \l0x001d: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Codec$StreamFinishingSource)\l  (r4 I:okhttp3.internal.http2.Http2Codec)\l  (r3 I:okio.Source)\l okhttp3.internal.http2.Http2Codec.StreamFinishingSource.\<init\>(okhttp3.internal.http2.Http2Codec, okio.Source):void type: DIRECT \l0x0020: NEW_INSTANCE  (r3 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x0022: INVOKE  (r5 I:okio.BufferedSource) = (r5 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0026: INVOKE  \l  (r3 I:okhttp3.internal.http.RealResponseBody)\l  (r0 I:java.lang.String)\l  (r1 I:long)\l  (r5 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|0x0029: RETURN  (r3 I:okhttp3.ResponseBody) \l}"];
MethodNode[shape=record,label="{public okhttp3.ResponseBody okhttp3.internal.http2.Http2Codec.openResponseBody((r4 'this' I:okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

