digraph "CFG forokhttp3.internal.http2.Http2Codec.\<init\>(Lokhttp3\/OkHttpClient;Lokhttp3\/Interceptor$Chain;Lokhttp3\/internal\/connection\/StreamAllocation;Lokhttp3\/internal\/http2\/Http2Connection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r2 I:okhttp3.Interceptor$Chain)\l  (r0 I:okhttp3.internal.http2.Http2Codec)\l okhttp3.internal.http2.Http2Codec.chain okhttp3.Interceptor$Chain \l0x0005: IPUT  \l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l  (r0 I:okhttp3.internal.http2.Http2Codec)\l okhttp3.internal.http2.Http2Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0007: IPUT  \l  (r4 I:okhttp3.internal.http2.Http2Connection)\l  (r0 I:okhttp3.internal.http2.Http2Codec)\l okhttp3.internal.http2.Http2Codec.connection okhttp3.internal.http2.Http2Connection \l0x0009: INVOKE  (r1 I:java.util.List) = (r1 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.protocols():java.util.List type: VIRTUAL \l0x000d: SGET  (r2 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l0x000f: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: SGET  (r1 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: SGET  (r1 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_2 okhttp3.Protocol \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IPUT  \l  (r1 I:okhttp3.Protocol)\l  (r0 I:okhttp3.internal.http2.Http2Codec)\l okhttp3.internal.http2.Http2Codec.protocol okhttp3.Protocol \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Codec.\<init\>((r0 'this' I:okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, THIS]), (r1 I:okhttp3.OkHttpClient A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okhttp3.Interceptor$Chain A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

