digraph "CFG forokhttp3.internal.http2.Http2Codec.http2HeadersList(Lokhttp3\/Request;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Headers) = (r6 I:okhttp3.Request) okhttp3.Request.headers():okhttp3.Headers type: VIRTUAL \l0x0004: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r2 I:int) = (r0 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x000a: ARITH  (r2 I:int) = (r2 I:int) + (4 int) \l0x000c: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x000f: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x0011: SGET  (r3 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_METHOD okio.ByteString \l0x0013: INVOKE  (r4 I:java.lang.String) = (r6 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0017: INVOKE  \l  (r2 I:okhttp3.internal.http2.Header)\l  (r3 I:okio.ByteString)\l  (r4 I:java.lang.String)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, java.lang.String):void type: DIRECT \l0x001a: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x001d: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x001f: SGET  (r3 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_PATH okio.ByteString \l0x0021: INVOKE  (r4 I:okhttp3.HttpUrl) = (r6 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0025: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.internal.http.RequestLine.requestPath(okhttp3.HttpUrl):java.lang.String type: STATIC \l0x0029: INVOKE  \l  (r2 I:okhttp3.internal.http2.Header)\l  (r3 I:okio.ByteString)\l  (r4 I:java.lang.String)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, java.lang.String):void type: DIRECT \l0x002c: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x002f: CONST_STR  (r2 I:java.lang.String) =  \"Host\" \l0x0031: INVOKE  (r2 I:java.lang.String) = (r6 I:okhttp3.Request), (r2 I:java.lang.String) okhttp3.Request.header(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0037|0x0037: NEW_INSTANCE  (r3 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x0039: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_AUTHORITY okio.ByteString \l0x003b: INVOKE  \l  (r3 I:okhttp3.internal.http2.Header)\l  (r4 I:okio.ByteString)\l  (r2 I:java.lang.String)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, java.lang.String):void type: DIRECT \l0x003e: INVOKE  (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0041|0x0041: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x0043: SGET  (r3 I:okio.ByteString) =  okhttp3.internal.http2.Header.TARGET_SCHEME okio.ByteString \l0x0045: INVOKE  (r6 I:okhttp3.HttpUrl) = (r6 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0049: INVOKE  (r6 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme():java.lang.String type: VIRTUAL \l0x004d: INVOKE  \l  (r2 I:okhttp3.internal.http2.Header)\l  (r3 I:okio.ByteString)\l  (r6 I:java.lang.String)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, java.lang.String):void type: DIRECT \l0x0050: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0053: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0054: INVOKE  (r2 I:int) = (r0 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0058|0x0058: IF  (r6 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x007f \l}"];
Node_5 [shape=record,label="{5\:\ 0x005a|0x005a: INVOKE  (r3 I:java.lang.String) = (r0 I:okhttp3.Headers), (r6 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x005e: SGET  (r4 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0060: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r4 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL \l0x0064: INVOKE  (r3 I:okio.ByteString) = (r3 I:java.lang.String) okio.ByteString.encodeUtf8(java.lang.String):okio.ByteString type: STATIC \l0x0068: SGET  (r4 I:java.util.List\<okio.ByteString\>) =  okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS java.util.List \l0x006a: INVOKE  (r4 I:boolean) = (r4 I:java.util.List), (r3 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x006e|0x006e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x007c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0070|0x0070: NEW_INSTANCE  (r4 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x0072: INVOKE  (r5 I:java.lang.String) = (r0 I:okhttp3.Headers), (r6 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x0076: INVOKE  \l  (r4 I:okhttp3.internal.http2.Header)\l  (r3 I:okio.ByteString)\l  (r5 I:java.lang.String)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, java.lang.String):void type: DIRECT \l0x0079: INVOKE  (r1 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x007c|0x007c: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x007f|0x007f: RETURN  (r1 I:java.util.List\<okhttp3.internal.http2.Header\>) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<okhttp3.internal.http2.Header\> okhttp3.internal.http2.Http2Codec.http2HeadersList((r6 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokhttp3\/Request;, ), Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_4;
}

