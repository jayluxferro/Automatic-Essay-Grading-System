digraph "CFG forokhttp3.internal.http2.Http2Codec.writeRequestHeaders(Lokhttp3\/Request;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:okhttp3.RequestBody) = (r4 I:okhttp3.Request) okhttp3.Request.body():okhttp3.RequestBody type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  (r4 I:java.util.List) = (r4 I:okhttp3.Request) okhttp3.internal.http2.Http2Codec.http2HeadersList(okhttp3.Request):java.util.List type: STATIC \l0x0012: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.connection okhttp3.internal.http2.Http2Connection \l0x0014: INVOKE  (r4 I:okhttp3.internal.http2.Http2Stream) = \l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r4 I:java.util.List)\l  (r0 I:boolean)\l okhttp3.internal.http2.Http2Connection.newStream(java.util.List, boolean):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l0x0018: IPUT  \l  (r4 I:okhttp3.internal.http2.Http2Stream)\l  (r3 I:okhttp3.internal.http2.Http2Codec)\l okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l0x001a: IGET  (r4 I:okhttp3.internal.http2.Http2Stream) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l0x001c: INVOKE  (r4 I:okio.Timeout) = (r4 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout():okio.Timeout type: VIRTUAL \l0x0020: IGET  (r0 I:okhttp3.Interceptor$Chain) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.chain okhttp3.Interceptor$Chain \l0x0022: INVOKE  (r0 I:int) = (r0 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.readTimeoutMillis():int type: INTERFACE \l0x0026: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0027: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0029: INVOKE  \l  (r4 I:okio.Timeout)\l  (r0 I:long)\l  (r2 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l0x002c: IGET  (r4 I:okhttp3.internal.http2.Http2Stream) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l0x002e: INVOKE  (r4 I:okio.Timeout) = (r4 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout():okio.Timeout type: VIRTUAL \l0x0032: IGET  (r0 I:okhttp3.Interceptor$Chain) = (r3 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.chain okhttp3.Interceptor$Chain \l0x0034: INVOKE  (r0 I:int) = (r0 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.writeTimeoutMillis():int type: INTERFACE \l0x0038: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0039: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x003b: INVOKE  \l  (r4 I:okio.Timeout)\l  (r0 I:long)\l  (r2 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Codec.writeRequestHeaders((r3 'this' I:okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

