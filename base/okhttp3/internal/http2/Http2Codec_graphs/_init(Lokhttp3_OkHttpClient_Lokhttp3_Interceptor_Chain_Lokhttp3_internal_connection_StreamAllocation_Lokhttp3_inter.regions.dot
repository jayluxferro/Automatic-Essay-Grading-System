digraph "CFG forokhttp3.internal.http2.Http2Codec.\<init\>(Lokhttp3\/OkHttpClient;Lokhttp3\/Interceptor$Chain;Lokhttp3\/internal\/connection\/StreamAllocation;Lokhttp3\/internal\/http2\/Http2Connection;)V" {
subgraph cluster_Region_251100323 {
label = "R(3:0|(1:2)(1:3)|4) | DECL_VAR: okhttp3.Protocol null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0.chain = r2\lr0.streamAllocation = r3\lr0.connection = r4\l}"];
subgraph cluster_IfRegion_871857496 {
label = "IF [B:1:0x0013] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0013|if (r1.protocols().contains(okhttp3.Protocol.H2_PRIOR_KNOWLEDGE) == true) goto L_0x0015\l}"];
subgraph cluster_Region_315433741 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0015|okhttp3.Protocol r1 = okhttp3.Protocol.H2_PRIOR_KNOWLEDGE\l}"];
}
subgraph cluster_Region_534677888 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|okhttp3.Protocol r1 = okhttp3.Protocol.HTTP_2\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x001a|PHI: r1 \l  PHI: (r1v3 okhttp3.Protocol) = (r1v4 okhttp3.Protocol), (r1v5 okhttp3.Protocol) binds: [B:3:0x0018, B:2:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|r0.protocol = r1\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x001c}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Codec.\<init\>((r0v0 'this' okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, THIS]), (r1v0 okhttp3.OkHttpClient A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 okhttp3.Interceptor$Chain A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

