digraph "CFG forokhttp3.internal.http2.Http2Codec.readHttp2HeadersList(Ljava\/util\/List;Lokhttp3\/Protocol;)Lokhttp3\/Response$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.Headers$Builder r0 = new okhttp3.Headers.Builder()\lint r1 = r8.size()\lr3 = 0\lr4 = r0\lr0 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r0 r3 r4 \l  PHI: (r0v2 okhttp3.internal.http.StatusLine) = (r0v1 okhttp3.internal.http.StatusLine), (r0v3 okhttp3.internal.http.StatusLine) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 okhttp3.Headers$Builder) = (r4v0 okhttp3.Headers$Builder), (r4v2 okhttp3.Headers$Builder) binds: [B:0:0x0000, B:14:0x005e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:14:0x005e\l|if (r3 \>= r1) goto L_0x0061\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|okhttp3.internal.http2.Header r5 = r8.get(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r5 != null) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|if (r0 == null) goto L_0x005e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019}"];
Node_6 [shape=record,label="{6\:\ 0x001d|if (r0.code != 100) goto L_0x005e\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|r4 = new okhttp3.Headers.Builder()\lr0 = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|okio.ByteString r6 = r5.name\ljava.lang.String r5 = r5.value.utf8()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|if (r6.equals(okhttp3.internal.http2.Header.RESPONSE_STATUS) == false) goto L_0x004d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"HTTP\/1.1 \")\lr0.append(r5)\lokhttp3.internal.http.StatusLine r0 = okhttp3.internal.http.StatusLine.parse(r0.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d}"];
Node_12 [shape=record,label="{12\:\ 0x0053|if (HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(r6) != false) goto L_0x005e\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|okhttp3.internal.Internal.instance.addLenient(r4, r6.utf8(), r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x005e|LOOP_END\lPHI: r0 r4 \l  PHI: (r0v3 okhttp3.internal.http.StatusLine) = (r0v2 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v6 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v2 okhttp3.internal.http.StatusLine), (r0v8 okhttp3.internal.http.StatusLine) binds: [B:26:0x005e, B:21:0x005e, B:25:0x005e, B:22:0x005e, B:23:0x005e, B:24:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 okhttp3.Headers$Builder) = (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v1 okhttp3.Headers$Builder), (r4v3 okhttp3.Headers$Builder) binds: [B:26:0x005e, B:21:0x005e, B:25:0x005e, B:22:0x005e, B:23:0x005e, B:24:0x005e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:14:0x005e\l|int r3 = r3 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0061|if (r0 == null) goto L_0x0081\l}"];
Node_16 [shape=record,label="{16\:\ 0x0063}"];
Node_17 [shape=record,label="{17\:\ 0x0080|RETURN\l|return new okhttp3.Response.Builder().protocol(r9).code(r0.code).message(r0.message).headers(r4.build())\l}"];
Node_18 [shape=record,label="{18\:\ 0x0081}"];
Node_19 [shape=record,label="{19\:\ 0x0088|throw new java.net.ProtocolException(\"Expected ':status' header not present\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x005e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x005e|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x005e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static okhttp3.Response$Builder okhttp3.internal.http2.Http2Codec.readHttp2HeadersList((r8v0 java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 okhttp3.Protocol A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;, Lokhttp3\/Protocol;, ), Lokhttp3\/Response$Builder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_22;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_24;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_25;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_26;
Node_13 -> Node_21;
Node_14 -> Node_1;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_15;
Node_21 -> Node_14;
Node_22 -> Node_14;
Node_23 -> Node_14;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_26 -> Node_14;
}

