digraph "CFG forokhttp3.internal.http2.Http2Codec.readResponseHeaders(Z)Lokhttp3\/Response$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r2 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.stream okhttp3.internal.http2.Http2Stream \l0x0002: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.takeResponseHeaders():java.util.List type: VIRTUAL \l0x0006: IGET  (r1 I:okhttp3.Protocol) = (r2 I:okhttp3.internal.http2.Http2Codec) okhttp3.internal.http2.Http2Codec.protocol okhttp3.Protocol \l0x0008: INVOKE  (r0 I:okhttp3.Response$Builder) = (r0 I:java.util.List), (r1 I:okhttp3.Protocol) okhttp3.internal.http2.Http2Codec.readHttp2HeadersList(java.util.List, okhttp3.Protocol):okhttp3.Response$Builder type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: SGET  (r3 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0010: INVOKE  (r3 I:int) = \l  (r3 I:okhttp3.internal.Internal)\l  (r0 I:okhttp3.Response$Builder)\l okhttp3.internal.Internal.code(okhttp3.Response$Builder):int type: VIRTUAL \l0x0014: CONST  (r1 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r3 I:okhttp3.Response$Builder) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN  (r0 I:okhttp3.Response$Builder) \l}"];
MethodNode[shape=record,label="{public okhttp3.Response$Builder okhttp3.internal.http2.Http2Codec.readResponseHeaders((r2 'this' I:okhttp3.internal.http2.Http2Codec A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
}

