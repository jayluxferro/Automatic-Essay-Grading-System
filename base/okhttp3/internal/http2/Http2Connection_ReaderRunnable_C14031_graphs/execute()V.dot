digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.1.execute()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x000c \}\lSplitter:B:0:0x0000\l|r5.this$1.this$0.listener.onStream(r3)     \/\/ Catch:\{ IOException \-\> 0x000c \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.io.IOException r0 = move\-exception\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|okhttp3.internal.platform.Platform r1 = okhttp3.internal.platform.Platform.get()\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Http2Connection.Listener failure for \")\lr3.append(r5.this$1.this$0.hostname)\lr1.log(4, r3.toString(), r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|SYNTHETIC\lSplitter:B:4:0x002c\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x0033 \}\lSplitter:B:4:0x002c\l|r3.close(okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR)     \/\/ Catch:\{ IOException \-\> 0x0033 \}\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:4:0x002c\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.1.execute((r5v0 'this' okhttp3.internal.http2.Http2Connection$ReaderRunnable$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
}

