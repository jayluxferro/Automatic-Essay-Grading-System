digraph "CFG forokhttp3.internal.http2.Http2.frameLog(ZIIBB)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.FRAME_NAMES java.lang.String[] \l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r8 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: SGET  (r0 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.FRAME_NAMES java.lang.String[] \l0x0009: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST_STR  (r0 I:java.lang.String) =  \"0x%02x\" \l0x000e: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0010: INVOKE  (r4 I:java.lang.Byte) = (r8 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x0014: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0016: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r3 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: INVOKE  (r8 I:java.lang.String) = (r8 I:byte), (r9 I:byte) okhttp3.internal.http2.Http2.formatFlags(byte, byte):java.lang.String type: STATIC \l0x001e: CONST_STR  (r9 I:java.lang.String) =  \"%s 0x%08x %5d %\-13s %s\" \l0x0020: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0021: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: CONST_STR  (r5 I:java.lang.String) =  \"\<\<\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: CONST_STR  (r5 I:java.lang.String) =  \"\>\>\" \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x002c: INVOKE  (r5 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0030: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0032: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0033: INVOKE  (r6 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0037: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0039: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x003a: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x003c: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x003d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x003f: INVOKE  (r5 I:java.lang.String) = (r9 I:java.lang.String), (r3 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: RETURN  (r5 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String okhttp3.internal.http2.Http2.frameLog((r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

