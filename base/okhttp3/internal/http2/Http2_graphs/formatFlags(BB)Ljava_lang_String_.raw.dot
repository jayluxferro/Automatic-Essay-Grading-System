digraph "CFG forokhttp3.internal.http2.Http2.formatFlags(BB)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST_STR  (r2 I:java.lang.String) =  \"\" \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r2 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3, 4, 5, 6, 7, 8] t:[0x001d, 0x001d, 0x0012, 0x0008, 0x0012, 0x001d, 0x001d] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: SGET  (r0 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.FLAGS java.lang.String[] \l0x000a: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: SGET  (r0 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.FLAGS java.lang.String[] \l0x000f: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0018 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: CONST_STR  (r2 I:java.lang.String) =  \"ACK\" \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: SGET  (r2 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.BINARY java.lang.String[] \l0x001a: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: RETURN  (r2 I:java.lang.String) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: SGET  (r2 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.BINARY java.lang.String[] \l0x001f: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: RETURN  (r2 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: SGET  (r0 I:java.lang.String[]) =  okhttp3.internal.http2.Http2.BINARY java.lang.String[] \l0x0024: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0036 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0036 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|0x002d: CONST_STR  (r2 I:java.lang.String) =  \"HEADERS\" \l0x002f: CONST_STR  (r3 I:java.lang.String) =  \"PUSH_PROMISE\" \l0x0031: INVOKE  (r2 I:java.lang.String) = \l  (r0 I:java.lang.String)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:java.lang.CharSequence)\l java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence):java.lang.String type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0035|0x0035: RETURN  (r2 I:java.lang.String) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0036|0x0036: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0045 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0038|0x0038: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|0x003a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0045 \l}"];
Node_24 [shape=record,label="{24\:\ 0x003c|0x003c: CONST_STR  (r2 I:java.lang.String) =  \"PRIORITY\" \l0x003e: CONST_STR  (r3 I:java.lang.String) =  \"COMPRESSED\" \l0x0040: INVOKE  (r2 I:java.lang.String) = \l  (r0 I:java.lang.String)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:java.lang.CharSequence)\l java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence):java.lang.String type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0044|0x0044: RETURN  (r2 I:java.lang.String) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0045|0x0045: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String okhttp3.internal.http2.Http2.formatFlags((r2 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
}

