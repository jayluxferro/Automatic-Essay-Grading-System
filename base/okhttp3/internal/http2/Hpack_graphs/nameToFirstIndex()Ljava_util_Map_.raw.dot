digraph "CFG forokhttp3.internal.http2.Hpack.nameToFirstIndex()Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0002: SGET  (r1 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0005: INVOKE  (r0 I:java.util.LinkedHashMap), (r1 I:int) java.util.LinkedHashMap.\<init\>(int):void type: DIRECT \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SGET  (r2 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x000b: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x002a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: SGET  (r2 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x0010: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0012: IGET  (r2 I:okio.ByteString) = (r2 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.name okio.ByteString \l0x0014: INVOKE  (r2 I:boolean) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: SGET  (r2 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x001c: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001e: IGET  (r2 I:okio.ByteString) = (r2 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.name okio.ByteString \l0x0020: INVOKE  (r3 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0024: INVOKE  \l  (r0 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: INVOKE  (r0 I:java.util.Map) = (r0 I:java.util.Map) java.util.Collections.unmodifiableMap(java.util.Map):java.util.Map type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: RETURN  (r0 I:java.util.Map\<okio.ByteString, java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{private static java.util.Map\<okio.ByteString, java.lang.Integer\> okhttp3.internal.http2.Hpack.nameToFirstIndex()  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Map\<, Lokio\/ByteString;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

