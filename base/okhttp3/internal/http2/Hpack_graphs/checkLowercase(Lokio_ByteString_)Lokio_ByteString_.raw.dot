digraph "CFG forokhttp3.internal.http2.Hpack.checkLowercase(Lokio\/ByteString;)Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:byte) = (r4 I:okio.ByteString), (r1 I:int) okio.ByteString.getByte(int):byte type: VIRTUAL \l0x000b: CONST  (r3 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0016: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"PROTOCOL_ERROR response malformed: mixed case name: \" \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r4 I:java.lang.String) = (r4 I:okio.ByteString) okio.ByteString.utf8():java.lang.String type: VIRTUAL \l0x0024: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002b: INVOKE  (r0 I:java.io.IOException), (r4 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: RETURN  (r4 I:okio.ByteString) \l}"];
MethodNode[shape=record,label="{static okio.ByteString okhttp3.internal.http2.Hpack.checkLowercase((r4 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_1;
}

