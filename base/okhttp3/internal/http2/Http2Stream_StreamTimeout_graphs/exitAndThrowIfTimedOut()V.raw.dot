digraph "CFG forokhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exit():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  (r0 I:java.io.IOException) = \l  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout)\l  (r0 I:java.io.IOException)\l okhttp3.internal.http2.Http2Stream.StreamTimeout.newTimeoutException(java.io.IOException):java.io.IOException type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut((r1 'this' I:okhttp3.internal.http2.Http2Stream$StreamTimeout A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

