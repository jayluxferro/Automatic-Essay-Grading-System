digraph "CFG forokhttp3.internal.http2.Header.\<init\>(Lokio\/ByteString;Lokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r1 I:okio.ByteString)\l  (r0 I:okhttp3.internal.http2.Header)\l okhttp3.internal.http2.Header.name okio.ByteString \l0x0005: IPUT  \l  (r2 I:okio.ByteString)\l  (r0 I:okhttp3.internal.http2.Header)\l okhttp3.internal.http2.Header.value okio.ByteString \l0x0007: INVOKE  (r1 I:int) = (r1 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x000b: ARITH  (r1 I:int) = (r1 I:int) + (32 int) \l0x000d: INVOKE  (r2 I:int) = (r2 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0011: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0012: IPUT  (r1 I:int), (r0 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Header.\<init\>((r0 'this' I:okhttp3.internal.http2.Header A[IMMUTABLE_TYPE, THIS]), (r1 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

