digraph "CFG forokhttp3.internal.http2.Header.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) okhttp3.internal.http2.Header \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CHECK_CAST  (r4 I:okhttp3.internal.http2.Header) = (okhttp3.internal.http2.Header) (r4 I:?[OBJECT, ARRAY]) \l0x0007: IGET  (r0 I:okio.ByteString) = (r3 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.name okio.ByteString \l0x0009: IGET  (r2 I:okio.ByteString) = (r4 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.name okio.ByteString \l0x000b: INVOKE  (r0 I:boolean) = (r0 I:okio.ByteString), (r2 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r0 I:okio.ByteString) = (r3 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.value okio.ByteString \l0x0013: IGET  (r4 I:okio.ByteString) = (r4 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.value okio.ByteString \l0x0015: INVOKE  (r4 I:boolean) = (r0 I:okio.ByteString), (r4 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.http2.Header.equals((r3 'this' I:okhttp3.internal.http2.Header A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

