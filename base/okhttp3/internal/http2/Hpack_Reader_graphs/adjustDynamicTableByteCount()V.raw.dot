digraph "CFG forokhttp3.internal.http2.Hpack.Reader.adjustDynamicTableByteCount()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x0002: IGET  (r1 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.clearDynamicTable():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r0 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l0x0010: IGET  (r1 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0013: INVOKE  (r2 I:okhttp3.internal.http2.Hpack$Reader), (r0 I:int) okhttp3.internal.http2.Hpack.Reader.evictToRecoverBytes(int):int type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Hpack.Reader.adjustDynamicTableByteCount((r2 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

