digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readIndexedHeader(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:okhttp3.internal.http2.Hpack$Reader), (r4 I:int) okhttp3.internal.http2.Hpack.Reader.isStaticHeader(int):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x0008: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x000a: IGET  (r0 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerList java.util.List \l0x000c: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: SGET  (r0 I:okhttp3.internal.http2.Header[]) =  okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE okhttp3.internal.http2.Header[] \l0x0012: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0013: ARITH  (r0 I:int) = (r4 I:int) \- (r0 I:int) \l0x0015: INVOKE  (r0 I:int) = (r3 I:okhttp3.internal.http2.Hpack$Reader), (r0 I:int) okhttp3.internal.http2.Hpack.Reader.dynamicTableIndex(int):int type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x001d: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r4 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerList java.util.List \l0x0022: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0024: AGET  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r4 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x002c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"Header index too large \" \l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0038: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003f: INVOKE  (r0 I:java.io.IOException), (r4 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Hpack.Reader.readIndexedHeader((r3 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

