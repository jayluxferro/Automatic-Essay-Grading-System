digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithoutIndexingIndexedName(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:okio.ByteString) = (r3 I:okhttp3.internal.http2.Hpack$Reader), (r4 I:int) okhttp3.internal.http2.Hpack.Reader.getName(int):okio.ByteString type: DIRECT \l0x0004: INVOKE  (r0 I:okio.ByteString) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.readByteString():okio.ByteString type: VIRTUAL \l0x0008: IGET  (r1 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerList java.util.List \l0x000a: NEW_INSTANCE  (r2 I:okhttp3.internal.http2.Header) =  okhttp3.internal.http2.Header \l0x000c: INVOKE  \l  (r2 I:okhttp3.internal.http2.Header)\l  (r4 I:okio.ByteString)\l  (r0 I:okio.ByteString)\l okhttp3.internal.http2.Header.\<init\>(okio.ByteString, okio.ByteString):void type: DIRECT \l0x000f: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithoutIndexingIndexedName((r3 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

