digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readHeaders()V" {
subgraph cluster_Region_1326125998 {
label = "R(1:(2:2|(1:28)(1:(1:6)(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))))))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_213394282 {
label = "LOOP:0: (2:2|(1:28)(1:(1:6)(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25)))))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.source.exhausted() == false) goto L_0x0008\l}"];
subgraph cluster_Region_1327519121 {
label = "R(2:2|(1:28)(1:(1:6)(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25)))))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|byte r0 = r3.source.readByte() & 255\l}"];
subgraph cluster_IfRegion_515758231 {
label = "IF [B:3:0x0012] THEN: R(1:28) ELSE: R(1:(1:6)(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))))))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r0 == 128) goto L_0x008a\l}"];
subgraph cluster_Region_473979285 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0091|throw new java.io.IOException(\"index == 0\")\l}"];
}
subgraph cluster_Region_1042490405 {
label = "R(1:(1:6)(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_32282476 {
label = "IF [B:5:0x0016] THEN: R(1:6) ELSE: R(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|if ((r0 & kotlin.jvm.internal.ByteCompanionObject.MIN_VALUE) == 128) goto L_0x0018\l}"];
subgraph cluster_Region_819674081 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|readIndexedHeader(readInt(r0, okhttp3.internal.http2.Hpack.PREFIX_7_BITS) \- 1)\l}"];
}
subgraph cluster_Region_690144812 {
label = "R(1:(1:9)(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2107276470 {
label = "IF [B:8:0x0026] THEN: R(1:9) ELSE: R(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0026|if (r0 == 64) goto L_0x0028\l}"];
subgraph cluster_Region_1691095825 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0028|readLiteralHeaderWithIncrementalIndexingNewName()\l}"];
}
subgraph cluster_Region_2053006060 {
label = "R(1:(1:12)(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_227764978 {
label = "IF [B:11:0x002e] THEN: R(1:12) ELSE: R(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002e|if ((r0 & 64) == 64) goto L_0x0030\l}"];
subgraph cluster_Region_1747045339 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0030|readLiteralHeaderWithIncrementalIndexingIndexedName(readInt(r0, 63) \- 1)\l}"];
}
subgraph cluster_Region_1576756110 {
label = "R(1:(2:15|(2:(2:20|21)|(1:19)))(1:(1:26)(1:25))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_21815565 {
label = "IF [B:14:0x0040] THEN: R(2:15|(2:(2:20|21)|(1:19))) ELSE: R(1:(1:26)(1:25)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0040|if ((r0 & 32) == 32) goto L_0x0042\l}"];
subgraph cluster_Region_798835294 {
label = "R(2:15|(2:(2:20|21)|(1:19)))";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0042|r3.maxDynamicTableByteCount = readInt(r0, 31)\l}"];
subgraph cluster_Region_1658310075 {
label = "R(2:(2:20|21)|(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1720131179 {
label = "IF [B:16:0x004c, B:18:0x0052] THEN: R(2:20|21) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x004c|if (r3.maxDynamicTableByteCount \< 0) goto L_0x0058\l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|ADDED_TO_REGION\l|if (r3.maxDynamicTableByteCount \> r3.headerTableSizeSetting) goto L_0x0058\l}"];
subgraph cluster_Region_1866942805 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0058}"];
Node_21 [shape=record,label="{21\:\ 0x0070|throw new java.io.IOException(\"Invalid dynamic table size update \" + r3.maxDynamicTableByteCount)\l}"];
}
}
subgraph cluster_Region_1772531744 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0054|adjustDynamicTableByteCount()\l}"];
}
}
}
subgraph cluster_Region_893391546 {
label = "R(1:(1:26)(1:25)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_969898405 {
label = "IF [B:23:0x0073, B:24:0x0075] THEN: R(1:26) ELSE: R(1:25) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0073|if (r0 == 16) goto L_0x0085\l}"];
Node_24 [shape=record,label="{24\:\ 0x0075|ADDED_TO_REGION\l|if (r0 == 0) goto L_0x0085\l}"];
subgraph cluster_Region_1810507327 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0085|readLiteralHeaderWithoutIndexingNewName()\l}"];
}
subgraph cluster_Region_1599472212 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0078|readLiteralHeaderWithoutIndexingIndexedName(readInt(r0, 15) \- 1)\l}"];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:30:0x0000\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0014}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0024}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002c}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x003c}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x004e}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0071}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x008a}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0092}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:0:0x0000\-\>B:30:0x0000\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0092|SYNTHETIC\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0058|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x008a|SYNTHETIC\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0058|SYNTHETIC\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0000|SYNTHETIC\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0000|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0000|SYNTHETIC\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0000|SYNTHETIC\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0000|SYNTHETIC\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0000|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Reader.readHeaders((r3v0 'this' okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_31[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_33;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_35;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_36;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_37;
Node_14 -> Node_15;
Node_14 -> Node_22[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_32;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_34;
Node_20 -> Node_21;
Node_19 -> Node_38;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_40;
Node_25 -> Node_39;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_10 -> Node_11;
Node_13 -> Node_14;
Node_17 -> Node_18;
Node_22 -> Node_23;
Node_27 -> Node_28;
Node_30 -> Node_0;
Node_31 -> Node_29;
Node_32 -> Node_20;
Node_33 -> Node_27;
Node_34 -> Node_20;
Node_35 -> Node_30;
Node_36 -> Node_30;
Node_37 -> Node_30;
Node_38 -> Node_30;
Node_39 -> Node_30;
Node_40 -> Node_30;
}

