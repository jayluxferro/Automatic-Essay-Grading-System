digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readHeaders()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.source okio.BufferedSource \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:okio.BufferedSource) okio.BufferedSource.exhausted():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0092 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okio.BufferedSource) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.source okio.BufferedSource \l0x000a: INVOKE  (r0 I:byte) = (r0 I:okio.BufferedSource) okio.BufferedSource.readByte():byte type: INTERFACE \l0x000e: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x008a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x001a: INVOKE  (r0 I:int) = \l  (r3 I:okhttp3.internal.http2.Hpack$Reader)\l  (r0 I:int)\l  (r1 I:int)\l okhttp3.internal.http2.Hpack.Reader.readInt(int, int):int type: VIRTUAL \l0x001e: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0020: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader), (r0 I:int) okhttp3.internal.http2.Hpack.Reader.readIndexedHeader(int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithIncrementalIndexingNewName():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: CONST  (r1 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l0x0032: INVOKE  (r0 I:int) = \l  (r3 I:okhttp3.internal.http2.Hpack$Reader)\l  (r0 I:int)\l  (r1 I:int)\l okhttp3.internal.http2.Hpack.Reader.readInt(int, int):int type: VIRTUAL \l0x0036: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0038: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader), (r0 I:int) okhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithIncrementalIndexingIndexedName(int):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (32 ?[int, float, short, byte, char]) \l0x003e: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0071 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: CONST  (r1 I:?[int, float, short, byte, char]) = (31 ?[int, float, short, byte, char]) \l0x0044: INVOKE  (r0 I:int) = \l  (r3 I:okhttp3.internal.http2.Hpack$Reader)\l  (r0 I:int)\l  (r1 I:int)\l okhttp3.internal.http2.Hpack.Reader.readInt(int, int):int type: VIRTUAL \l0x0048: IPUT  (r0 I:int), (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x004a: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x0058 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x0050: IGET  (r1 I:int) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerTableSizeSetting int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|0x0052: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:20:0x0058 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|0x0054: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.adjustDynamicTableByteCount():void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|0x0058: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x005a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005f: CONST_STR  (r2 I:java.lang.String) =  \"Invalid dynamic table size update \" \l0x0061: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0064: IGET  (r2 I:int) = (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x0066: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0069: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006d: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0070|0x0070: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|0x0071: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0073|0x0073: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0085 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0075|0x0075: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0078 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0078|0x0078: CONST  (r1 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x007a: INVOKE  (r0 I:int) = \l  (r3 I:okhttp3.internal.http2.Hpack$Reader)\l  (r0 I:int)\l  (r1 I:int)\l okhttp3.internal.http2.Hpack.Reader.readInt(int, int):int type: VIRTUAL \l0x007e: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0080: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader), (r0 I:int) okhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithoutIndexingIndexedName(int):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0085|0x0085: INVOKE  (r3 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.readLiteralHeaderWithoutIndexingNewName():void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x008a|0x008a: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x008c: CONST_STR  (r1 I:java.lang.String) =  \"index == 0\" \l0x008e: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x0091|0x0091: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|0x0092: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Reader.readHeaders((r3 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_30;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_28;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_0;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_0;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_0;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_0;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_0;
Node_27 -> Node_0;
Node_28 -> Node_29;
}

