digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readInt(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r2 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.readByte():int type: DIRECT \l0x0009: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) \l0x000f: ARITH  (r0 I:int) = (r0 I:int) \<\< (r3 I:int) \l0x0010: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int) \l0x0011: ARITH  (r3 I:int) = (r3 I:int) + (7 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: ARITH  (r3 I:int) = (r0 I:int) \<\< (r3 I:int) \l0x0016: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{int okhttp3.internal.http2.Hpack.Reader.readInt((r2 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
}

