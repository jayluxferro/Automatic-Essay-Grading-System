digraph "CFG forokhttp3.internal.http2.Hpack.Reader.readByteString()Lokio\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.readByte():int type: DIRECT \l0x0004: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l0x0006: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x000f: INVOKE  (r0 I:int) = \l  (r5 I:okhttp3.internal.http2.Hpack$Reader)\l  (r0 I:int)\l  (r2 I:int)\l okhttp3.internal.http2.Hpack.Reader.readInt(int, int):int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r1 I:okhttp3.internal.http2.Huffman) =  okhttp3.internal.http2.Huffman.get():okhttp3.internal.http2.Huffman type: STATIC \l0x0019: IGET  (r2 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.source okio.BufferedSource \l0x001b: CAST  (r3 I:long) = (long) (r0 I:int) \l0x001c: INVOKE  (r0 I:byte[]) = (r2 I:okio.BufferedSource), (r3 I:long) okio.BufferedSource.readByteArray(long):byte[] type: INTERFACE \l0x0020: INVOKE  (r0 I:byte[]) = (r1 I:okhttp3.internal.http2.Huffman), (r0 I:byte[]) okhttp3.internal.http2.Huffman.decode(byte[]):byte[] type: VIRTUAL \l0x0024: INVOKE  (r0 I:okio.ByteString) = (r0 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: RETURN  (r0 I:okio.ByteString) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r1 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.source okio.BufferedSource \l0x002b: CAST  (r2 I:long) = (long) (r0 I:int) \l0x002c: INVOKE  (r0 I:okio.ByteString) = (r1 I:okio.BufferedSource), (r2 I:long) okio.BufferedSource.readByteString(long):okio.ByteString type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: RETURN  (r0 I:okio.ByteString) \l}"];
MethodNode[shape=record,label="{okio.ByteString okhttp3.internal.http2.Hpack.Reader.readByteString((r5 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

