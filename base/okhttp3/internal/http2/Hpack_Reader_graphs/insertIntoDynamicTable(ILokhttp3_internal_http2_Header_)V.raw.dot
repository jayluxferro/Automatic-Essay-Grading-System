digraph "CFG forokhttp3.internal.http2.Hpack.Reader.insertIntoDynamicTable(ILokhttp3\/internal\/http2\/Header;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerList java.util.List \l0x0002: INVOKE  (r0 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0005: IGET  (r0 I:int) = (r7 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x000c: INVOKE  (r3 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader), (r6 I:int) okhttp3.internal.http2.Hpack.Reader.dynamicTableIndex(int):int type: DIRECT \l0x0010: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0012: IGET  (r2 I:int) = (r2 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IGET  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.clearDynamicTable():void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l0x001f: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0020: IGET  (r3 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.maxDynamicTableByteCount int \l0x0022: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0023: INVOKE  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader), (r2 I:int) okhttp3.internal.http2.Hpack.Reader.evictToRecoverBytes(int):int type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IGET  (r6 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l0x002b: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x002d: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x002f: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r6 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:12:0x004e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IGET  (r6 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0034: ARRAY_LENGTH  (r6 I:int) = (r6 I:?[]) \l0x0035: ARITH  (r6 I:int) = (r6 I:int) * (2 int) \l0x0037: NEW_ARRAY  (r6 I:okhttp3.internal.http2.Header[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Header[] \l0x0039: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x003b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: IGET  (r3 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x003e: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x003f: IGET  (r4 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0041: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0042: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r6 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0045: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0047: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0048: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x004a: IPUT  (r1 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x004c: IPUT  \l  (r6 I:okhttp3.internal.http2.Header[])\l  (r5 I:okhttp3.internal.http2.Hpack$Reader)\l okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IGET  (r6 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x0050: ARITH  (r1 I:int) = (r6 I:int) + (\-1 int) \l0x0052: IPUT  (r1 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x0054: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0056: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0058: IGET  (r6 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l0x005a: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x005c: IPUT  (r6 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|0x005f: INVOKE  (r1 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader), (r6 I:int) okhttp3.internal.http2.Hpack.Reader.dynamicTableIndex(int):int type: DIRECT \l0x0063: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0064: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int) \l0x0065: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0067: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0069|0x0069: IGET  (r6 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l0x006b: ARITH  (r6 I:int) = (r6 I:int) + (r0 I:int) \l0x006c: IPUT  (r6 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l}"];
Node_15 [shape=record,label="{15\:\ 0x006e|0x006e: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Hpack.Reader.insertIntoDynamicTable((r5 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:okhttp3.internal.http2.Header A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

