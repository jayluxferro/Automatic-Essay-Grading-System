digraph "CFG forokhttp3.internal.http2.Hpack.Reader.evictToRecoverBytes(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0005: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0006: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:7:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0010: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0012: IGET  (r2 I:int) = (r2 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l0x0014: ARITH  (r6 I:int) = (r6 I:int) \- (r2 I:int) \l0x0015: IGET  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l0x0017: IGET  (r3 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0019: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001b: IGET  (r3 I:int) = (r3 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l0x001d: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001e: IPUT  (r2 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTableByteCount int \l0x0020: IGET  (r2 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l0x0022: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0024: IPUT  (r2 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l0x0026: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0028: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IGET  (r6 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x002d: IGET  (r1 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x002f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0031: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.dynamicTable okhttp3.internal.http2.Header[] \l0x0033: IGET  (r3 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x0035: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0037: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) \l0x0038: IGET  (r4 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.headerCount int \l0x003a: INVOKE  \l  (r6 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x003d: IGET  (r6 I:int) = (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l0x003f: ARITH  (r6 I:int) = (r6 I:int) + (r0 I:int) \l0x0040: IPUT  (r6 I:int), (r5 I:okhttp3.internal.http2.Hpack$Reader) okhttp3.internal.http2.Hpack.Reader.nextHeaderIndex int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private int okhttp3.internal.http2.Hpack.Reader.evictToRecoverBytes((r5 'this' I:okhttp3.internal.http2.Hpack$Reader A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
}

