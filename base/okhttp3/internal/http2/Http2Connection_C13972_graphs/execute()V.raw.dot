digraph "CFG forokhttp3.internal.http2.Http2Connection.2.execute()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.http2.Http2Connection$2) okhttp3.internal.http2.Http2Connection.2.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ IOException \-\> 0x000c \}, TRY_ENTER]\l0x0002: IGET  (r0 I:okhttp3.internal.http2.Http2Writer) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.writer okhttp3.internal.http2.Http2Writer A[Catch:\{ IOException \-\> 0x000c \}]\l0x0004: IGET  (r1 I:int) = (r4 I:okhttp3.internal.http2.Http2Connection$2) okhttp3.internal.http2.Http2Connection.2.val$streamId int A[Catch:\{ IOException \-\> 0x000c \}]\l0x0006: IGET  (r2 I:long) = (r4 I:okhttp3.internal.http2.Http2Connection$2) okhttp3.internal.http2.Http2Connection.2.val$unacknowledgedBytesRead long A[Catch:\{ IOException \-\> 0x000c \}]\l0x0008: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Writer)\l  (r1 I:int)\l  (r2 I:long)\l okhttp3.internal.http2.Http2Writer.windowUpdate(int, long):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x000c \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.http2.Http2Connection$2) okhttp3.internal.http2.Http2Connection.2.this$0 okhttp3.internal.http2.Http2Connection \l0x000e: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.access$000(okhttp3.internal.http2.Http2Connection):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.2.execute((r4 'this' I:okhttp3.internal.http2.Http2Connection$2 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_3 -> Node_5;
Node_4 -> Node_3;
}

