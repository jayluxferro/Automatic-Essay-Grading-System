digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeByteString(Lokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.useCompression boolean \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:okhttp3.internal.http2.Huffman) =  okhttp3.internal.http2.Huffman.get():okhttp3.internal.http2.Huffman type: STATIC \l0x000a: INVOKE  (r0 I:int) = \l  (r0 I:okhttp3.internal.http2.Huffman)\l  (r4 I:okio.ByteString)\l okhttp3.internal.http2.Huffman.encodedLength(okio.ByteString):int type: VIRTUAL \l0x000e: INVOKE  (r2 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x0016: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0019: INVOKE  (r2 I:okhttp3.internal.http2.Huffman) =  okhttp3.internal.http2.Huffman.get():okhttp3.internal.http2.Huffman type: STATIC \l0x001d: INVOKE  \l  (r2 I:okhttp3.internal.http2.Huffman)\l  (r4 I:okio.ByteString)\l  (r0 I:okio.BufferedSink)\l okhttp3.internal.http2.Huffman.encode(okio.ByteString, okio.BufferedSink):void type: VIRTUAL \l0x0020: INVOKE  (r4 I:okio.ByteString) = (r0 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x0024: INVOKE  (r0 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0028: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x002a: INVOKE  \l  (r3 I:okhttp3.internal.http2.Hpack$Writer)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l okhttp3.internal.http2.Hpack.Writer.writeInt(int, int, int):void type: VIRTUAL \l0x002d: IGET  (r0 I:okio.Buffer) = (r3 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x002f: INVOKE  (r0 I:okio.Buffer), (r4 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: INVOKE  (r0 I:int) = (r4 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0037: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: INVOKE  \l  (r3 I:okhttp3.internal.http2.Hpack$Writer)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l okhttp3.internal.http2.Hpack.Writer.writeInt(int, int, int):void type: VIRTUAL \l0x003b: IGET  (r0 I:okio.Buffer) = (r3 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x003d: INVOKE  (r0 I:okio.Buffer), (r4 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0040|0x0040: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeByteString((r3 'this' I:okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r4 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

