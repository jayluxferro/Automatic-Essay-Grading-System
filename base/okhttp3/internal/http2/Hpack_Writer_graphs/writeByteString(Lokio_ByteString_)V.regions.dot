digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeByteString(Lokio\/ByteString;)V" {
subgraph cluster_Region_1461325255 {
label = "R(1:(2:(2:5|6)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_388387261 {
label = "R(2:(2:5|6)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_483800486 {
label = "IF [B:1:0x0004, B:3:0x0012] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r3.useCompression == false) goto L_0x0033\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|ADDED_TO_REGION\l|if (okhttp3.internal.http2.Huffman.get().encodedLength(r4) \>= r4.size()) goto L_0x0033\l}"];
subgraph cluster_Region_1998761921 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0033|writeInt(r4.size(), okhttp3.internal.http2.Hpack.PREFIX_7_BITS, 0)\lr3.out.write(r4)\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1414591233 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|okio.Buffer okio.Buffer r0 = new okio.Buffer()\lokhttp3.internal.http2.Huffman.get().encode(r4, r0)\lokio.ByteString okio.ByteString r4 = r0.readByteString()\lwriteInt(r4.size(), okhttp3.internal.http2.Hpack.PREFIX_7_BITS, 128)\lr3.out.write(r4)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeByteString((r3v0 'this' okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r4v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

