digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeHeaders(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r13.emitDynamicTableSizeUpdate == false) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r13.smallestHeaderTableSizeSetting \>= r13.maxDynamicTableByteCount) goto L_0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|writeInt(r13.smallestHeaderTableSizeSetting, 31, 32)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r13.emitDynamicTableSizeUpdate = false\lr13.smallestHeaderTableSizeSetting = Integer.MAX_VALUE\lwriteInt(r13.maxDynamicTableByteCount, 31, 32)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|int r0 = r14.size()\lr2 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:6:0x0020, B:44:0x00eb] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0025\-\>B:44:0x00eb\l|if (r2 \>= r0) goto L_0x00ef\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|okhttp3.internal.http2.Header r3 = r14.get(r2)\lokio.ByteString r4 = r3.name.toAsciiLowercase()\lokio.ByteString r5 = r3.value\ljava.lang.Integer r6 = okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX.get(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|if (r6 == null) goto L_0x0071\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|int r6 = r6.intValue() + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|if (r6 \<= 1) goto L_0x006e\l}"];
Node_12 [shape=record,label="{12\:\ 0x0048}"];
Node_13 [shape=record,label="{13\:\ 0x004a|if (r6 \>= 8) goto L_0x006e\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c}"];
Node_15 [shape=record,label="{15\:\ 0x0058|if (okhttp3.internal.Util.equal(okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE[r6 + \-1].value, r5) == false) goto L_0x005c\l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|r9 = r6\l}"];
Node_17 [shape=record,label="{17\:\ 0x005c}"];
Node_18 [shape=record,label="{18\:\ 0x0066|if (okhttp3.internal.Util.equal(okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE[r6].value, r5) == false) goto L_0x006e\l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|r12 = r6 + 1\lr9 = r6\lr6 = r12\l}"];
Node_20 [shape=record,label="{20\:\ 0x006e|r9 = r6\lr6 = \-1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|r6 = \-1\lr9 = \-1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|PHI: r6 r9 \l  PHI: (r6v3 int) = (r6v10 int), (r6v13 int), (r6v14 int), (r6v12 int) binds: [B:21:0x0071, B:20:0x006e, B:19:0x0068, B:16:0x005a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v7 int), (r9v8 int), (r9v19 int), (r9v20 int) binds: [B:21:0x0071, B:20:0x006e, B:19:0x0068, B:16:0x005a] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != \-1) goto L_0x00aa\l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|int r10 = r13.nextHeaderIndex + 1\lint r8 = r13.dynamicTable.length\l}"];
Node_24 [shape=record,label="{24\:\ 0x007b|LOOP_START\lPHI: r9 r10 \l  PHI: (r9v2 int) = (r9v0 int), (r9v3 int) binds: [B:23:0x0075, B:32:0x00a7] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v2 int) = (r10v1 int), (r10v3 int) binds: [B:23:0x0075, B:32:0x00a7] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:24:0x007b\-\>B:32:0x00a7\l|if (r10 \>= r8) goto L_0x00aa\l}"];
Node_25 [shape=record,label="{25\:\ 0x007d}"];
Node_26 [shape=record,label="{26\:\ 0x0087|if (okhttp3.internal.Util.equal(r13.dynamicTable[r10].name, r4) == false) goto L_0x00a7\l}"];
Node_27 [shape=record,label="{27\:\ 0x0089}"];
Node_28 [shape=record,label="{28\:\ 0x0093|if (okhttp3.internal.Util.equal(r13.dynamicTable[r10].value, r5) == false) goto L_0x009d\l}"];
Node_29 [shape=record,label="{29\:\ 0x0095|int r10 = r10 \- r13.nextHeaderIndex\lint r6 = okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE.length + r10\l}"];
Node_30 [shape=record,label="{30\:\ 0x009d|if (r9 != \-1) goto L_0x00a7\l}"];
Node_31 [shape=record,label="{31\:\ 0x009f|int r9 = (r10 \- r13.nextHeaderIndex) + okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE.length\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a7|LOOP_END\lPHI: r9 \l  PHI: (r9v3 int) = (r9v2 int), (r9v2 int), (r9v6 int) binds: [B:54:0x00a7, B:55:0x00a7, B:53:0x00a7] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:24:0x007b\-\>B:32:0x00a7\l|int r10 = r10 + 1\l}"];
Node_33 [shape=record,label="{33\:\ 0x00aa|PHI: r6 r9 \l  PHI: (r6v4 int) = (r6v3 int), (r6v3 int), (r6v9 int) binds: [B:22:0x0073, B:52:0x00aa, B:29:0x0095] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int), (r9v2 int) binds: [B:22:0x0073, B:52:0x00aa, B:29:0x0095] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == \-1) goto L_0x00b4\l}"];
Node_34 [shape=record,label="{34\:\ 0x00ac|writeInt(r6, okhttp3.internal.http2.Hpack.PREFIX_7_BITS, 128)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00b4}"];
Node_36 [shape=record,label="{36\:\ 0x00b6|if (r9 != \-1) goto L_0x00c7\l}"];
Node_37 [shape=record,label="{37\:\ 0x00b8|r13.out.writeByte(64)\lwriteByteString(r4)\lwriteByteString(r5)\linsertIntoDynamicTable(r3)\l}"];
Node_38 [shape=record,label="{38\:\ 0x00c7}"];
Node_39 [shape=record,label="{39\:\ 0x00cd|if (r4.startsWith(okhttp3.internal.http2.Header.PSEUDO_PREFIX) == false) goto L_0x00e0\l}"];
Node_40 [shape=record,label="{40\:\ 0x00cf}"];
Node_41 [shape=record,label="{41\:\ 0x00d5|if (okhttp3.internal.http2.Header.TARGET_AUTHORITY.equals(r4) != false) goto L_0x00e0\l}"];
Node_42 [shape=record,label="{42\:\ 0x00d7|writeInt(r9, 15, 0)\lwriteByteString(r5)\l}"];
Node_43 [shape=record,label="{43\:\ 0x00e0|writeInt(r9, 63, 64)\lwriteByteString(r5)\linsertIntoDynamicTable(r3)\l}"];
Node_44 [shape=record,label="{44\:\ 0x00eb|LOOP_END\lLOOP:0: B:7:0x0025\-\>B:44:0x00eb\l|int r2 = r2 + 1\l}"];
Node_45 [shape=record,label="{45\:\ 0x00ef|RETURN\l|return\l}"];
Node_46 [shape=record,label="{46\:\ 0x00ef|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x00eb|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x00eb|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x00eb|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x00eb|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0095|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x00aa|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x00a7|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x00a7|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x00a7|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeHeaders((r13v0 'this' okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r14v0 java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_46;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_22;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_52;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_54;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_51[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_55;
Node_31 -> Node_53;
Node_32 -> Node_24;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_48;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_49;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_50;
Node_43 -> Node_47;
Node_44 -> Node_7;
Node_46 -> Node_45;
Node_47 -> Node_44;
Node_48 -> Node_44;
Node_49 -> Node_44;
Node_50 -> Node_44;
Node_51 -> Node_29;
Node_52 -> Node_33;
Node_53 -> Node_32;
Node_54 -> Node_32;
Node_55 -> Node_32;
}

