digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeInt(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 \>= r3) goto L_0x0009\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|r1.out.writeByte(r2 \| r4)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|r1.out.writeByte(r4 \| r3)\lint r2 = r2 \- r3\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_START\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:3:0x0009, B:6:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0010\-\>B:6:0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r2 \< 128) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|LOOP_END\lLOOP:0: B:4:0x0010\-\>B:6:0x0014\l|r4 = r2 & okhttp3.internal.http2.Hpack.PREFIX_7_BITS\lr1.out.writeByte(128 \| r4)\lint r2 = r2 \>\>\> 7\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|r1.out.writeByte(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeInt((r1v0 'this' okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

