digraph "CFG forokhttp3.internal.http2.Hpack.Writer.insertIntoDynamicTable(Lokhttp3\/internal\/http2\/Header;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:okhttp3.internal.http2.Header) okhttp3.internal.http2.Header.hpackSize int \l0x0002: IGET  (r1 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.maxDynamicTableByteCount int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.clearDynamicTable():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTableByteCount int \l0x000c: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x000d: IGET  (r2 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.maxDynamicTableByteCount int \l0x000f: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0010: INVOKE  (r6 I:okhttp3.internal.http2.Hpack$Writer), (r1 I:int) okhttp3.internal.http2.Hpack.Writer.evictToRecoverBytes(int):int type: DIRECT \l0x0013: IGET  (r1 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.headerCount int \l0x0015: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0017: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x0019: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r1 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x001e: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x001f: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x0021: NEW_ARRAY  (r1 I:okhttp3.internal.http2.Header[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Header[] \l0x0023: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x0025: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: IGET  (r4 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x0028: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0029: IGET  (r5 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x002b: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x002c: INVOKE  \l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r1 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x002f: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x0031: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0032: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0034: IPUT  (r2 I:int), (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.nextHeaderIndex int \l0x0036: IPUT  \l  (r1 I:okhttp3.internal.http2.Header[])\l  (r6 I:okhttp3.internal.http2.Hpack$Writer)\l okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: IGET  (r1 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.nextHeaderIndex int \l0x003a: ARITH  (r2 I:int) = (r1 I:int) + (\-1 int) \l0x003c: IPUT  (r2 I:int), (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.nextHeaderIndex int \l0x003e: IGET  (r2 I:okhttp3.internal.http2.Header[]) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTable okhttp3.internal.http2.Header[] \l0x0040: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0042: IGET  (r7 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.headerCount int \l0x0044: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x0046: IPUT  (r7 I:int), (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.headerCount int \l0x0048: IGET  (r7 I:int) = (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTableByteCount int \l0x004a: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int) \l0x004b: IPUT  (r7 I:int), (r6 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.dynamicTableByteCount int \l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|0x004d: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Hpack.Writer.insertIntoDynamicTable((r6 'this' I:okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r7 I:okhttp3.internal.http2.Header A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

