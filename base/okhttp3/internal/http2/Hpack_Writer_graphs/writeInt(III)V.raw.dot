digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeInt(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r3 I:okio.Buffer) = (r1 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x0004: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r4 I:?[int, boolean, short, byte, char]) \l0x0005: INVOKE  (r3 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r0 I:okio.Buffer) = (r1 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x000b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l0x000c: INVOKE  (r0 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x000f: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) \l0x0016: IGET  (r0 I:okio.Buffer) = (r1 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x0018: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) \| (r4 I:?[int, boolean, short, byte, char]) \l0x0019: INVOKE  (r0 I:okio.Buffer), (r3 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x001c: ARITH  (r2 I:int) = (r2 I:int) \>\>\> (7 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r3 I:okio.Buffer) = (r1 I:okhttp3.internal.http2.Hpack$Writer) okhttp3.internal.http2.Hpack.Writer.out okio.Buffer \l0x0021: INVOKE  (r3 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeInt((r1 'this' I:okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
}

