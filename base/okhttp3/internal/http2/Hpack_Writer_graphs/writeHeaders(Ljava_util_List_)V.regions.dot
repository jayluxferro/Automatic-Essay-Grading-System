digraph "CFG forokhttp3.internal.http2.Hpack.Writer.writeHeaders(Ljava\/util\/List;)V" {
subgraph cluster_Region_360412667 {
label = "R(3:(2:(1:4)|5)|6|(5:8|(3:10|(1:(1:16)(1:(1:19)))|20)(1:21)|(2:23|(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32))))(0)|(1:34)(1:(1:37)(1:(1:43)(1:42)))|44)) | DECL_VAR: int null, int null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1884418263 {
label = "IF [B:1:0x0003] THEN: R(2:(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r13.emitDynamicTableSizeUpdate == true) goto L_0x0005\l}"];
subgraph cluster_Region_1432354009 {
label = "R(2:(1:4)|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2013890769 {
label = "IF [B:3:0x000d] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r13.smallestHeaderTableSizeSetting \< r13.maxDynamicTableByteCount) goto L_0x000f\l}"];
subgraph cluster_Region_448232630 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|writeInt(r13.smallestHeaderTableSizeSetting, 31, 32)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0014|r13.emitDynamicTableSizeUpdate = false\lr13.smallestHeaderTableSizeSetting = Integer.MAX_VALUE\lwriteInt(r13.maxDynamicTableByteCount, 31, 32)\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0020|int int r0 = r14.size()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1080269880 {
label = "LOOP:0: (5:8|(3:10|(1:(1:16)(1:(1:19)))|20)(1:21)|(2:23|(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32))))(0)|(1:34)(1:(1:37)(1:(1:43)(1:42)))|44)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0025|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:6:0x0020, B:44:0x00eb] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0025\-\>B:44:0x00eb\l|if (r2 \< r0) goto L_0x0027\l}"];
subgraph cluster_Region_363615267 {
label = "R(5:8|(3:10|(1:(1:16)(1:(1:19)))|20)(1:21)|(2:23|(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32))))(0)|(1:34)(1:(1:37)(1:(1:43)(1:42)))|44)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0027|okhttp3.internal.http2.Header okhttp3.internal.http2.Header r3 = r14.get(r2)\lokio.ByteString okio.ByteString r4 = r3.name.toAsciiLowercase()\lokio.ByteString okio.ByteString r5 = r3.value\ljava.lang.Integer java.lang.Integer r6 = okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX.get(r4)\l}"];
subgraph cluster_IfRegion_1507527945 {
label = "IF [B:9:0x003f] THEN: R(3:10|(1:(1:16)(1:(1:19)))|20) ELSE: R(1:21)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003f|if (r6 != null) goto L_0x0041\l}"];
subgraph cluster_Region_1208262680 {
label = "R(3:10|(1:(1:16)(1:(1:19)))|20)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0041|int r6 = r6.intValue() + 1\l}"];
subgraph cluster_IfRegion_1696591999 {
label = "IF [B:11:0x0046, B:13:0x004a] THEN: R(1:(1:16)(1:(1:19))) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0046|ADDED_TO_REGION\l|if (r6 \> 1) goto L_0x0048\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|ADDED_TO_REGION\l|if (r6 \< 8) goto L_0x004c\l}"];
subgraph cluster_Region_1326211377 {
label = "R(1:(1:16)(1:(1:19)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1244399523 {
label = "IF [B:15:0x0058] THEN: R(1:16) ELSE: R(1:(1:19))";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0058|if (okhttp3.internal.Util.equal(okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE[r6 \- 1].value, r5) == true) goto L_0x005a\l}"];
subgraph cluster_Region_1749933560 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x005a|r9 = r6\l}"];
}
subgraph cluster_Region_2071406337 {
label = "R(1:(1:19)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1451817154 {
label = "IF [B:18:0x0066] THEN: R(1:19) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0066|if (okhttp3.internal.Util.equal(okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE[r6].value, r5) == true) goto L_0x0068\l}"];
subgraph cluster_Region_94677300 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0068|r9 = r6\lr6++\l}"];
}
}
}
}
}
}
Node_20 [shape=record,label="{20\:\ 0x006e|r9 = r6\lr6 = \-1\l}"];
}
subgraph cluster_Region_76963818 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0071|r6 = \-1\lr9 = \-1\l}"];
}
}
subgraph cluster_IfRegion_1510258197 {
label = "IF [B:22:0x0073] THEN: R(2:23|(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32)))) ELSE: R(0)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0073|PHI: r6 r9 \l  PHI: (r6v3 int) = (r6v10 int), (r6v13 int), (r6v14 int), (r6v12 int) binds: [B:21:0x0071, B:20:0x006e, B:19:0x0068, B:16:0x005a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v7 int), (r9v8 int), (r9v19 int), (r9v20 int) binds: [B:21:0x0071, B:20:0x006e, B:19:0x0068, B:16:0x005a] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == \-1) goto L_0x0075\l}"];
subgraph cluster_Region_1963377446 {
label = "R(2:23|(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32))))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0075|int int r10 = r13.nextHeaderIndex + 1\lint int r8 = r13.dynamicTable.length\l}"];
subgraph cluster_LoopRegion_1082272034 {
label = "LOOP:1: (1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32)))";
node [shape=record,color=blue];
subgraph cluster_Region_1823198698 {
label = "R(1:(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32)))";
node [shape=record,color=blue];
subgraph cluster_Region_774283345 {
label = "R(2:(1:52)|(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1408208119 {
label = "IF [B:24:0x007b] THEN: R(1:52) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x007b|LOOP_START\lPHI: r9 r10 \l  PHI: (r9v2 int) = (r9v0 int), (r9v3 int) binds: [B:23:0x0075, B:32:0x00a7] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v2 int) = (r10v1 int), (r10v3 int) binds: [B:23:0x0075, B:32:0x00a7] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:24:0x007b\-\>B:32:0x00a7\l|if (r10 \>= r8) goto L_0x00aa\l}"];
subgraph cluster_Region_1374494622 {
label = "R(1:52)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x00aa|SYNTHETIC\lEDGE_INSN: B:52:0x00aa\-\>B:33:0x00aa ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1430993339 {
label = "R(2:(1:(2:29|1)(1:(1:31)(0)))(0)|32)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1007770775 {
label = "IF [B:26:0x0087] THEN: R(1:(2:29|1)(1:(1:31)(0))) ELSE: R(0)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0087|if (okhttp3.internal.Util.equal(r13.dynamicTable[r10].name, r4) != false) goto L_0x0089\l}"];
subgraph cluster_Region_7862200 {
label = "R(1:(2:29|1)(1:(1:31)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1615590240 {
label = "IF [B:28:0x0093] THEN: R(2:29|1) ELSE: R(1:(1:31)(0))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0093|if (okhttp3.internal.Util.equal(r13.dynamicTable[r10].value, r5) == true) goto L_0x0095\l}"];
subgraph cluster_Region_1138339256 {
label = "R(2:29|1)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0095|EDGE_INSN: B:29:0x0095\-\>B:33:0x00aa ?: BREAK  \l|int r6 = okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE.length + (r10 \- r13.nextHeaderIndex)\l}"];
Node_InsnContainer_847363777 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_691971304 {
label = "R(1:(1:31)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_278290366 {
label = "IF [B:30:0x009d] THEN: R(1:31) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x009d|if (r9 == \-1) goto L_0x009f\l}"];
subgraph cluster_Region_2003540619 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x009f|int r9 = (r10 \- r13.nextHeaderIndex) + okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE.length\l}"];
}
subgraph cluster_Region_795062307 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
subgraph cluster_Region_279667896 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_32 [shape=record,label="{32\:\ 0x00a7|LOOP_END\lPHI: r9 \l  PHI: (r9v3 int) = (r9v2 int), (r9v2 int), (r9v6 int) binds: [B:54:0x00a7, B:55:0x00a7, B:53:0x00a7] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:24:0x007b\-\>B:32:0x00a7\l|r10++\l}"];
}
}
}
}
}
subgraph cluster_Region_1282317217 {
label = "R(0)";
node [shape=record,color=blue];
}
}
subgraph cluster_IfRegion_1848067645 {
label = "IF [B:33:0x00aa] THEN: R(1:34) ELSE: R(1:(1:37)(1:(1:43)(1:42)))";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x00aa|EDGE_INSN: B:29:0x0095\-\>B:33:0x00aa ?: BREAK  \lEDGE_INSN: B:52:0x00aa\-\>B:33:0x00aa ?: BREAK  \lPHI: r6 r9 \l  PHI: (r6v4 int) = (r6v3 int), (r6v3 int), (r6v9 int) binds: [B:22:0x0073, B:52:0x00aa, B:29:0x0095] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int), (r9v2 int) binds: [B:22:0x0073, B:52:0x00aa, B:29:0x0095] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != \-1) goto L_0x00ac\l}"];
subgraph cluster_Region_1551307122 {
label = "R(1:34)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x00ac|writeInt(r6, okhttp3.internal.http2.Hpack.PREFIX_7_BITS, 128)\l}"];
}
subgraph cluster_Region_397553888 {
label = "R(1:(1:37)(1:(1:43)(1:42))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_800657956 {
label = "IF [B:36:0x00b6] THEN: R(1:37) ELSE: R(1:(1:43)(1:42)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x00b6|if (r9 == \-1) goto L_0x00b8\l}"];
subgraph cluster_Region_785769062 {
label = "R(1:37)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x00b8|r13.out.writeByte(64)\lwriteByteString(r4)\lwriteByteString(r5)\linsertIntoDynamicTable(r3)\l}"];
}
subgraph cluster_Region_2071707456 {
label = "R(1:(1:43)(1:42)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1265306234 {
label = "IF [B:39:0x00cd, B:41:0x00d5] THEN: R(1:43) ELSE: R(1:42) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x00cd|if (r4.startsWith(okhttp3.internal.http2.Header.PSEUDO_PREFIX) == false) goto L_0x00e0\l}"];
Node_41 [shape=record,label="{41\:\ 0x00d5|ADDED_TO_REGION\l|if (okhttp3.internal.http2.Header.TARGET_AUTHORITY.equals(r4) == true) goto L_0x00e0\l}"];
subgraph cluster_Region_1624219370 {
label = "R(1:43)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x00e0|writeInt(r9, 63, 64)\lwriteByteString(r5)\linsertIntoDynamicTable(r3)\l}"];
}
subgraph cluster_Region_1944063433 {
label = "R(1:42)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x00d7|writeInt(r9, 15, 0)\lwriteByteString(r5)\l}"];
}
}
}
}
}
}
Node_44 [shape=record,label="{44\:\ 0x00eb|LOOP_END\lLOOP:0: B:7:0x0025\-\>B:44:0x00eb\l|r2++\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0048}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x004c}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x005c}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x007d}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0089}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x00b4}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x00c7}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x00cf}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x00ef}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x00ef|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x00eb|SYNTHETIC\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x00eb|SYNTHETIC\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x00eb|SYNTHETIC\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x00eb|SYNTHETIC\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0095|SYNTHETIC\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x00a7|SYNTHETIC\l}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x00a7|SYNTHETIC\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x00a7|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Hpack.Writer.writeHeaders((r13v0 'this' okhttp3.internal.http2.Hpack$Writer A[IMMUTABLE_TYPE, THIS]), (r14v0 java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_46[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_21[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_20[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_20[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_18 -> Node_19;
Node_18 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_33[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_52;
Node_52 -> Node_33;
Node_26 -> Node_27;
Node_26 -> Node_54[style=dashed];
Node_28 -> Node_30[style=dashed];
Node_28 -> Node_51;
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_30 -> Node_55[style=dashed];
Node_31 -> Node_53;
Node_32 -> Node_24;
Node_33 -> Node_34;
Node_33 -> Node_35[style=dashed];
Node_34 -> Node_48;
Node_36 -> Node_37;
Node_36 -> Node_38[style=dashed];
Node_37 -> Node_49;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_43 -> Node_47;
Node_42 -> Node_50;
Node_44 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_17 -> Node_18;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_35 -> Node_36;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_46 -> Node_45;
Node_47 -> Node_44;
Node_48 -> Node_44;
Node_49 -> Node_44;
Node_50 -> Node_44;
Node_51 -> Node_29;
Node_53 -> Node_32;
Node_54 -> Node_32;
Node_55 -> Node_32;
}

