digraph "CFG forokhttp3.internal.http2.Http2Writer.frameHeader(IIBB)V" {
subgraph cluster_Region_364436888 {
label = "R(2:(1:2)|(2:11|12)(1:(1:7)(2:9|10)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_689511700 {
label = "IF [B:1:0x0009] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0009|if (logger.isLoggable(java.util.logging.Level.FINE) == true) goto L_0x000b\l}"];
subgraph cluster_Region_625403209 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000b|logger.fine(okhttp3.internal.http2.Http2.frameLog(false, r4, r5, r6, r7))\l}"];
}
}
subgraph cluster_IfRegion_1422792840 {
label = "IF [B:4:0x0017] THEN: R(2:11|12) ELSE: R(1:(1:7)(2:9|10))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|if (r5 \> r3.maxFrameSize) goto L_0x004a\l}"];
subgraph cluster_Region_122243988 {
label = "R(2:11|12)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x004a}"];
Node_12 [shape=record,label="{12\:\ 0x0061|throw okhttp3.internal.http2.Http2.illegalArgument(\"FRAME_SIZE_ERROR length \> %d: %d\", java.lang.Integer.valueOf(r3.maxFrameSize), java.lang.Integer.valueOf(r5))\l}"];
}
subgraph cluster_Region_1717110740 {
label = "R(1:(1:7)(2:9|10)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1948769019 {
label = "IF [B:6:0x001c] THEN: R(1:7) ELSE: R(2:9|10) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001c|if ((Integer.MIN_VALUE & r4) == 0) goto L_0x001e\l}"];
subgraph cluster_Region_1351194287 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|writeMedium(r3.sink, r5)\lr3.sink.writeByte(r6 & 255)\lr3.sink.writeByte(r7 & 255)\lr3.sink.writeInt(r4 & Integer.MAX_VALUE)\l}"];
}
subgraph cluster_Region_500261569 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003b}"];
Node_10 [shape=record,label="{10\:\ 0x0049|throw okhttp3.internal.http2.Http2.illegalArgument(\"reserved bit set: %s\", java.lang.Integer.valueOf(r4))\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0014}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x003a}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Writer.frameHeader((r3v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_11 -> Node_12;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

