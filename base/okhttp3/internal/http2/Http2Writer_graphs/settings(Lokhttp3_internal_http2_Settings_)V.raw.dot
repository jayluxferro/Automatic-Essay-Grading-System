digraph "CFG forokhttp3.internal.http2.Http2Writer.settings(Lokhttp3\/internal\/http2\/Settings;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0045 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003d A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r5 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x0045 \}]\l0x0009: ARITH  (r0 I:int) = (r0 I:int) * (6 int) A[Catch:\{ all \-\> 0x0045 \}]\l0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0045 \}]\l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0045 \}]\l0x000d: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Writer)\l  (r1 I:int)\l  (r0 I:int)\l  (r2 I:byte)\l  (r1 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0036 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) = (r5 I:okhttp3.internal.http2.Settings), (r1 I:int) okhttp3.internal.http2.Settings.isSet(int):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: GOTO  \-\> 0x0033 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001f A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0045 \}]\l0x001e: GOTO  \-\> 0x0025 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0024 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0045 \}]\l0x0023: GOTO  \-\> 0x0025 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: IGET  (r3 I:okio.BufferedSink) = (r4 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0045 \}]\l0x0027: INVOKE  (r3 I:okio.BufferedSink), (r0 I:int) okio.BufferedSink.writeShort(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0045 \}]\l0x002a: IGET  (r0 I:okio.BufferedSink) = (r4 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0045 \}]\l0x002c: INVOKE  (r3 I:int) = (r5 I:okhttp3.internal.http2.Settings), (r1 I:int) okhttp3.internal.http2.Settings.get(int):int type: VIRTUAL A[Catch:\{ all \-\> 0x0045 \}]\l0x0030: INVOKE  (r0 I:okio.BufferedSink), (r3 I:int) okio.BufferedSink.writeInt(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: ARITH  (r1 I:int) = (r1 I:int) + (1 int) A[Catch:\{ all \-\> 0x0045 \}]\l0x0035: GOTO  \-\> 0x0010 A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: IGET  (r5 I:okio.BufferedSink) = (r4 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0045 \}]\l0x0038: INVOKE  (r5 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE A[Catch:\{ all \-\> 0x0045 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|SYNTHETIC\lSplitter:B:21:0x003d\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x003d\l|0x003d: NEW_INSTANCE  (r5 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0045 \}, TRY_ENTER]\l0x003f: CONST_STR  (r0 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0045 \}]\l0x0041: INVOKE  (r5 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0045 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|0x0044: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0045 \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0045|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0045: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x0046|0x0046: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0047|0x0047: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.settings((r4 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.internal.http2.Settings A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_17;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_5;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
}

