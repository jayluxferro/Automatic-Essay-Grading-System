digraph "CFG forokhttp3.internal.http2.Http2Writer.rstStream(ILokhttp3\/internal\/http2\/ErrorCode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r3.closed != false) goto L_0x0024\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005}"];
Node_5 [shape=record,label="{5\:\ 0x0008|if (r5.httpCode == \-1) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|frameHeader(r4, 4, (byte) 3, (byte) 0)\lr3.sink.writeInt(r5.httpCode)\lr3.sink.flush()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|monitor\-exit(r3)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|SYNTHETIC\lSplitter:B:9:0x001e\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x001e\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|throw new java.lang.IllegalArgumentException()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024}"];
Node_13 [shape=record,label="{13\:\ 0x002b|throw new java.io.IOException(\"closed\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|REMOVE\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|REMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.rstStream((r3v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

