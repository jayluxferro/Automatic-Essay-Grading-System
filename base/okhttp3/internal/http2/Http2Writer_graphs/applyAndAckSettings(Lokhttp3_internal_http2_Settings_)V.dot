digraph "CFG forokhttp3.internal.http2.Http2Writer.applyAndAckSettings(Lokhttp3\/internal\/http2\/Settings;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.closed != false) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|r2.maxFrameSize = r3.getMaxFrameSize(r2.maxFrameSize)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r3.getHeaderTableSize() == \-1) goto L_0x001d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r2.hpackWriter.setHeaderTableSizeSetting(r3.getHeaderTableSize())\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|frameHeader(0, 0, (byte) 4, (byte) 1)\lr2.sink.flush()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|monitor\-exit(r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|SYNTHETIC\lSplitter:B:10:0x002a\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x002a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|throw new java.io.IOException(\"closed\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|REMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.applyAndAckSettings((r2v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r3v0 okhttp3.internal.http2.Settings A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

