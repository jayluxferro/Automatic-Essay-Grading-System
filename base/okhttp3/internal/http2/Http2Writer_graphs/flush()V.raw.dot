digraph "CFG forokhttp3.internal.http2.Http2Writer.flush()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r2 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0014 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000c A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:okio.BufferedSink) = (r2 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0014 \}]\l0x0007: INVOKE  (r0 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE A[Catch:\{ all \-\> 0x0014 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|SYNTHETIC\lSplitter:B:7:0x000c\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000c\l|0x000c: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0014 \}, TRY_ENTER]\l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0014 \}]\l0x0010: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0014 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0014 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0014: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.flush((r2 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

