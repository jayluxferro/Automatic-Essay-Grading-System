digraph "CFG forokhttp3.internal.http2.Http2Writer.rstStream(ILokhttp3\/internal\/http2\/ErrorCode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r5 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.httpCode int A[Catch:\{ all \-\> 0x002c \}]\l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001e A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x002c \}]\l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x002c \}]\l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002c \}]\l0x000d: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Writer)\l  (r4 I:int)\l  (r0 I:int)\l  (r1 I:byte)\l  (r2 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l0x0010: IGET  (r4 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x002c \}]\l0x0012: IGET  (r5 I:int) = (r5 I:okhttp3.internal.http2.ErrorCode) okhttp3.internal.http2.ErrorCode.httpCode int A[Catch:\{ all \-\> 0x002c \}]\l0x0014: INVOKE  (r4 I:okio.BufferedSink), (r5 I:int) okio.BufferedSink.writeInt(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l0x0017: IGET  (r4 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x002c \}]\l0x0019: INVOKE  (r4 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|SYNTHETIC\lSplitter:B:9:0x001e\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x001e\l|0x001e: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0020: INVOKE  (r4 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x002c \}]\l0x0026: CONST_STR  (r5 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x002c \}]\l0x0028: INVOKE  (r4 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.rstStream((r3 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

