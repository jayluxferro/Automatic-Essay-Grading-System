digraph "CFG forokhttp3.internal.http2.Http2Writer.writeContinuationFrames(IJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:int) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int \l0x0008: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0009: INVOKE  (r2 I:long) = (r2 I:long), (r8 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x000d: CAST  (r2 I:int) = (int) (r2 I:long) \l0x000e: CAST  (r3 I:long) = (long) (r2 I:int) \l0x000f: ARITH  (r8 I:long) = (r8 I:long) \- (r3 I:long) \l0x0010: CONST  (r5 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0012: CMP_L  (r0 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Writer)\l  (r7 I:int)\l  (r2 I:int)\l  (r5 I:byte)\l  (r0 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL \l0x001c: IGET  (r0 I:okio.BufferedSink) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x001e: IGET  (r1 I:okio.Buffer) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer \l0x0020: INVOKE  (r0 I:okio.BufferedSink), (r1 I:okio.Buffer), (r3 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Writer.writeContinuationFrames((r6 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_0;
}

