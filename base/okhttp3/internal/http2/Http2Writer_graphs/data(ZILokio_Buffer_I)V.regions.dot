digraph "CFG forokhttp3.internal.http2.Http2Writer.data(ZILokio\/Buffer;I)V" {
subgraph cluster_Region_1636173100 {
label = "R(1:(1:(1:(3:4|(1:6)|7)(1:12))))";
node [shape=record,color=blue];
subgraph cluster_Region_623085807 {
label = "R(1:(1:(3:4|(1:6)|7)(1:12)))";
node [shape=record,color=blue];
subgraph cluster_Region_1310036035 {
label = "R(1:(3:4|(1:6)|7)(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1553388901 {
label = "IF [B:3:0x0003] THEN: R(3:4|(1:6)|7) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r1.closed == false) goto L_0x0005\l}"];
subgraph cluster_Region_1966597469 {
label = "R(3:4|(1:6)|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|byte r0 = 0\l}"];
subgraph cluster_IfRegion_233313470 {
label = "IF [B:5:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0006|if (r2 == true) goto L_0x0008\l}"];
subgraph cluster_Region_1265010615 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0008|byte r0 = (byte) 1\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 byte) = (r0v1 byte), (r0v3 byte) binds: [B:5:0x0006, B:6:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|dataFrame(r3, r0, r4, r5)\l}"];
}
subgraph cluster_Region_884314396 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0016|throw new java.io.IOException(\"closed\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000d|DONT_GENERATE\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000e}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000f|SYNTHETIC\lSplitter:B:10:0x000f\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|Splitter:B:10:0x000f\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0017|REMOVE\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0018|REMOVE\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0019|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.data((r1v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

