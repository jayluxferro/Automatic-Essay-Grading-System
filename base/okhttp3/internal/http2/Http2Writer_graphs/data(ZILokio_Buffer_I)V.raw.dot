digraph "CFG forokhttp3.internal.http2.Http2Writer.data(ZILokio\/Buffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x000f A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000a A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0017 \}]\l0x0009: CAST  (r0 I:byte) = (byte) (r2 I:int) A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: INVOKE  \l  (r1 I:okhttp3.internal.http2.Http2Writer)\l  (r3 I:int)\l  (r0 I:byte)\l  (r4 I:okio.Buffer)\l  (r5 I:int)\l okhttp3.internal.http2.Http2Writer.dataFrame(int, byte, okio.Buffer, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0017 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|0x000e: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|SYNTHETIC\lSplitter:B:10:0x000f\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x000f\l|0x000f: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER]\l0x0011: CONST_STR  (r3 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0017 \}]\l0x0013: INVOKE  (r2 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0017 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0017: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|0x0018: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|0x0019: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.data((r1 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

