digraph "CFG forokhttp3.internal.http2.Http2Writer.data(ZILokio\/Buffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r1.closed != false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|r0 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|if (r2 == false) goto L_0x000a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|byte r0 = (byte) 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 byte) = (r0v1 byte), (r0v3 byte) binds: [B:5:0x0006, B:6:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|dataFrame(r3, r0, r4, r5)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|monitor\-exit(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|SYNTHETIC\lSplitter:B:10:0x000f\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x000f\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|throw new java.io.IOException(\"closed\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|REMOVE\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|REMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.data((r1v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

