digraph "CFG forokhttp3.internal.http2.Http2Writer.ping(ZII)V" {
subgraph cluster_Region_1608833132 {
label = "R(1:(1:(1:(1:4)(1:9))))";
node [shape=record,color=blue];
subgraph cluster_Region_504536794 {
label = "R(1:(1:(1:4)(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1086018820 {
label = "R(1:(1:4)(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_127360650 {
label = "IF [B:3:0x0003] THEN: R(1:4) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r3.closed == false) goto L_0x0005\l}"];
subgraph cluster_Region_2127151532 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|frameHeader(0, 8, (byte) 6, r4 ? (byte) 1 : 0)\lr3.sink.writeInt(r5)\lr3.sink.writeInt(r6)\lr3.sink.flush()\l}"];
}
subgraph cluster_Region_1948738785 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0024|throw new java.io.IOException(\"closed\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001b|DONT_GENERATE\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d|SYNTHETIC\lSplitter:B:7:0x001d\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|Splitter:B:7:0x001d\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0025|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0026|REMOVE\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0027|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.ping((r3v0 'this' okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

