digraph "CFG forokhttp3.internal.http2.Http2Writer.synStream(ZIILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r3 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000a A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Writer)\l  (r1 I:boolean)\l  (r2 I:int)\l  (r4 I:java.util.List)\l okhttp3.internal.http2.Http2Writer.headers(boolean, int, java.util.List):void type: VIRTUAL A[Catch:\{ all \-\> 0x0012 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|SYNTHETIC\lSplitter:B:7:0x000a\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000a\l|0x000a: NEW_INSTANCE  (r1 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l0x000c: CONST_STR  (r2 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0012 \}]\l0x000e: INVOKE  (r1 I:java.io.IOException), (r2 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0012 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0012: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.synStream((r0 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r1 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ZII, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

