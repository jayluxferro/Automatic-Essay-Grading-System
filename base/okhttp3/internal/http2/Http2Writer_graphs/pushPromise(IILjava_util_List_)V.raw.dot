digraph "CFG forokhttp3.internal.http2.Http2Writer.pushPromise(IILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0047 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003f A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:okhttp3.internal.http2.Hpack$Writer) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackWriter okhttp3.internal.http2.Hpack$Writer A[Catch:\{ all \-\> 0x0047 \}]\l0x0007: INVOKE  \l  (r0 I:okhttp3.internal.http2.Hpack$Writer)\l  (r11 I:java.util.List)\l okhttp3.internal.http2.Hpack.Writer.writeHeaders(java.util.List):void type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l0x000a: IGET  (r11 I:okio.Buffer) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer A[Catch:\{ all \-\> 0x0047 \}]\l0x000c: INVOKE  (r0 I:long) = (r11 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l0x0010: IGET  (r11 I:int) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int A[Catch:\{ all \-\> 0x0047 \}]\l0x0012: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0047 \}]\l0x0013: ARITH  (r11 I:int) = (r11 I:int) \- (r2 I:int) A[Catch:\{ all \-\> 0x0047 \}]\l0x0014: CAST  (r3 I:long) = (long) (r11 I:int) A[Catch:\{ all \-\> 0x0047 \}]\l0x0015: INVOKE  (r3 I:long) = (r3 I:long), (r0 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x0047 \}]\l0x0019: CAST  (r11 I:int) = (int) (r3 I:long) A[Catch:\{ all \-\> 0x0047 \}]\l0x001a: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0047 \}]\l0x001b: CAST  (r4 I:long) = (long) (r11 I:int) A[Catch:\{ all \-\> 0x0047 \}]\l0x001c: CMP_L  (r6 I:int) = (r0 I:long), (r4 I:long) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0047 \}]\l0x0021: GOTO  \-\> 0x0023 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: ARITH  (r11 I:int) = (r11 I:int) + (r2 I:int) A[Catch:\{ all \-\> 0x0047 \}]\l0x0024: INVOKE  \l  (r8 I:okhttp3.internal.http2.Http2Writer)\l  (r9 I:int)\l  (r11 I:int)\l  (r3 I:byte)\l  (r7 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l0x0027: IGET  (r11 I:okio.BufferedSink) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0047 \}]\l0x0029: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0047 \}]\l0x002c: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r10 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) A[Catch:\{ all \-\> 0x0047 \}]\l0x002d: INVOKE  (r11 I:okio.BufferedSink), (r10 I:int) okio.BufferedSink.writeInt(int):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l0x0030: IGET  (r10 I:okio.BufferedSink) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0047 \}]\l0x0032: IGET  (r11 I:okio.Buffer) = (r8 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer A[Catch:\{ all \-\> 0x0047 \}]\l0x0034: INVOKE  (r10 I:okio.BufferedSink), (r11 I:okio.Buffer), (r4 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x003d A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: ARITH  (r0 I:long) = (r0 I:long) \- (r4 I:long) A[Catch:\{ all \-\> 0x0047 \}]\l0x003a: INVOKE  \l  (r8 I:okhttp3.internal.http2.Http2Writer)\l  (r9 I:int)\l  (r0 I:long)\l okhttp3.internal.http2.Http2Writer.writeContinuationFrames(int, long):void type: DIRECT A[Catch:\{ all \-\> 0x0047 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|SYNTHETIC\lSplitter:B:13:0x003f\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x003f\l|0x003f: NEW_INSTANCE  (r9 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0047 \}, TRY_ENTER]\l0x0041: CONST_STR  (r10 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0047 \}]\l0x0043: INVOKE  (r9 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0047 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0047: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.pushPromise((r8 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(II, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

