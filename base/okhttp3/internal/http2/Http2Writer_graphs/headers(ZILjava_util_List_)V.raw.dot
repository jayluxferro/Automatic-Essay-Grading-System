digraph "CFG forokhttp3.internal.http2.Http2Writer.headers(ZILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okhttp3.internal.http2.Hpack$Writer) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackWriter okhttp3.internal.http2.Hpack$Writer \l0x0006: INVOKE  \l  (r0 I:okhttp3.internal.http2.Hpack$Writer)\l  (r9 I:java.util.List)\l okhttp3.internal.http2.Hpack.Writer.writeHeaders(java.util.List):void type: VIRTUAL \l0x0009: IGET  (r9 I:okio.Buffer) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer \l0x000b: INVOKE  (r0 I:long) = (r9 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x000f: IGET  (r9 I:int) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int \l0x0011: CAST  (r2 I:long) = (long) (r9 I:int) \l0x0012: INVOKE  (r2 I:long) = (r2 I:long), (r0 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0016: CAST  (r9 I:int) = (int) (r2 I:long) \l0x0017: CAST  (r2 I:long) = (long) (r9 I:int) \l0x0018: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (1 ?[boolean, int, float, short, byte, char]) \l0x0023: CAST  (r5 I:byte) = (byte) (r7 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0025: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Writer)\l  (r8 I:int)\l  (r9 I:int)\l  (r7 I:byte)\l  (r5 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL \l0x0028: IGET  (r7 I:okio.BufferedSink) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x002a: IGET  (r9 I:okio.Buffer) = (r6 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer \l0x002c: INVOKE  (r7 I:okio.BufferedSink), (r9 I:okio.Buffer), (r2 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l0x0032: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Writer)\l  (r8 I:int)\l  (r0 I:long)\l okhttp3.internal.http2.Http2Writer.writeContinuationFrames(int, long):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x0038: CONST_STR  (r8 I:java.lang.String) =  \"closed\" \l0x003a: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Writer.headers((r6 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ZI, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

