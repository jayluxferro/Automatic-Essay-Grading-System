digraph "CFG forokhttp3.internal.http2.Http2Writer.\<init\>(Lokio\/BufferedSink;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r1 I:okio.BufferedSink)\l  (r0 I:okhttp3.internal.http2.Http2Writer)\l okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x0005: IPUT  (r2 I:boolean), (r0 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.client boolean \l0x0007: NEW_INSTANCE  (r1 I:okio.Buffer) =  okio.Buffer \l0x0009: INVOKE  (r1 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x000c: IPUT  \l  (r1 I:okio.Buffer)\l  (r0 I:okhttp3.internal.http2.Http2Writer)\l okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer \l0x000e: NEW_INSTANCE  (r1 I:okhttp3.internal.http2.Hpack$Writer) =  okhttp3.internal.http2.Hpack$Writer \l0x0010: IGET  (r2 I:okio.Buffer) = (r0 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.hpackBuffer okio.Buffer \l0x0012: INVOKE  \l  (r1 I:okhttp3.internal.http2.Hpack$Writer)\l  (r2 I:okio.Buffer)\l okhttp3.internal.http2.Hpack.Writer.\<init\>(okio.Buffer):void type: DIRECT \l0x0015: IPUT  \l  (r1 I:okhttp3.internal.http2.Hpack$Writer)\l  (r0 I:okhttp3.internal.http2.Http2Writer)\l okhttp3.internal.http2.Http2Writer.hpackWriter okhttp3.internal.http2.Hpack$Writer \l0x0017: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l0x0019: IPUT  (r1 I:int), (r0 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Writer.\<init\>((r0 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r1 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

