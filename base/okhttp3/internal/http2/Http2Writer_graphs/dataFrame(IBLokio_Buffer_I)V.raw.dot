digraph "CFG forokhttp3.internal.http2.Http2Writer.dataFrame(IBLokio\/Buffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Writer)\l  (r3 I:int)\l  (r6 I:int)\l  (r0 I:byte)\l  (r4 I:byte)\l okhttp3.internal.http2.Http2Writer.frameHeader(int, int, byte, byte):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r3 I:okio.BufferedSink) = (r2 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x0008: CAST  (r0 I:long) = (long) (r6 I:int) \l0x0009: INVOKE  (r3 I:okio.BufferedSink), (r5 I:okio.Buffer), (r0 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Writer.dataFrame((r2 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

