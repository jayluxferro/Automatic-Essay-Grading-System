digraph "CFG forokhttp3.internal.http2.Http2Writer.frameHeader(IIBB)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Writer.logger java.util.logging.Logger \l0x0002: SGET  (r1 I:java.util.logging.Level) =  java.util.logging.Level.FINE java.util.logging.Level \l0x0004: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.logging.Logger)\l  (r1 I:java.util.logging.Level)\l java.util.logging.Logger.isLoggable(java.util.logging.Level):boolean type: VIRTUAL \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Writer.logger java.util.logging.Logger \l0x000d: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:boolean)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:byte)\l  (r7 I:byte)\l okhttp3.internal.http2.Http2.frameLog(boolean, int, int, byte, byte):java.lang.String type: STATIC \l0x0011: INVOKE  (r0 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.fine(java.lang.String):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int \l0x0016: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r5 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:11:0x004a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l0x001b: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IGET  (r0 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x0020: INVOKE  (r0 I:okio.BufferedSink), (r5 I:int) okhttp3.internal.http2.Http2Writer.writeMedium(okio.BufferedSink, int):void type: STATIC \l0x0023: IGET  (r5 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x0025: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0027: INVOKE  (r5 I:okio.BufferedSink), (r6 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x002a: IGET  (r5 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x002c: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x002e: INVOKE  (r5 I:okio.BufferedSink), (r6 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x0031: IGET  (r5 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink \l0x0033: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0036: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r6 I:?[int, boolean, short, byte, char]) \l0x0037: INVOKE  (r5 I:okio.BufferedSink), (r4 I:int) okio.BufferedSink.writeInt(int):okio.BufferedSink type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x003d: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0041: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0043: CONST_STR  (r4 I:java.lang.String) =  \"reserved bit set: %s\" \l0x0045: INVOKE  (r4 I:java.lang.IllegalArgumentException) = (r4 I:java.lang.String), (r5 I:java.lang.Object[]) okhttp3.internal.http2.Http2.illegalArgument(java.lang.String, java.lang.Object[]):java.lang.IllegalArgumentException type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|0x004a: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004b: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x004d: IGET  (r6 I:int) = (r3 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.maxFrameSize int \l0x004f: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0053: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0055: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0059: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x005b: CONST_STR  (r5 I:java.lang.String) =  \"FRAME_SIZE_ERROR length \> %d: %d\" \l0x005d: INVOKE  (r4 I:java.lang.IllegalArgumentException) = (r5 I:java.lang.String), (r4 I:java.lang.Object[]) okhttp3.internal.http2.Http2.illegalArgument(java.lang.String, java.lang.Object[]):java.lang.IllegalArgumentException type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0061|0x0061: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Writer.frameHeader((r3 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

