digraph "CFG forokhttp3.internal.http2.Http2Writer.connectionPreface()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.closed boolean A[Catch:\{ all \-\> 0x0046 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003e A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.client boolean A[Catch:\{ all \-\> 0x0046 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|SYNTHETIC\lSplitter:B:8:0x000b\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000b\l|0x000b: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Writer.logger java.util.logging.Logger A[Catch:\{ all \-\> 0x0046 \}, TRY_ENTER]\l0x000d: SGET  (r1 I:java.util.logging.Level) =  java.util.logging.Level.FINE java.util.logging.Level A[Catch:\{ all \-\> 0x0046 \}]\l0x000f: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.logging.Logger)\l  (r1 I:java.util.logging.Level)\l java.util.logging.Logger.isLoggable(java.util.logging.Level):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: SGET  (r0 I:java.util.logging.Logger) =  okhttp3.internal.http2.Http2Writer.logger java.util.logging.Logger A[Catch:\{ all \-\> 0x0046 \}]\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"\>\> CONNECTION %s\" A[Catch:\{ all \-\> 0x0046 \}]\l0x0019: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0046 \}]\l0x001a: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ all \-\> 0x0046 \}]\l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0046 \}]\l0x001d: SGET  (r4 I:okio.ByteString) =  okhttp3.internal.http2.Http2.CONNECTION_PREFACE okio.ByteString A[Catch:\{ all \-\> 0x0046 \}]\l0x001f: INVOKE  (r4 I:java.lang.String) = (r4 I:okio.ByteString) okio.ByteString.hex():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0046 \}]\l0x0023: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0046 \}]\l0x0025: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0029: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.fine(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IGET  (r0 I:okio.BufferedSink) = (r5 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0046 \}]\l0x002e: SGET  (r1 I:okio.ByteString) =  okhttp3.internal.http2.Http2.CONNECTION_PREFACE okio.ByteString A[Catch:\{ all \-\> 0x0046 \}]\l0x0030: INVOKE  (r1 I:byte[]) = (r1 I:okio.ByteString) okio.ByteString.toByteArray():byte[] type: VIRTUAL A[Catch:\{ all \-\> 0x0046 \}]\l0x0034: INVOKE  (r0 I:okio.BufferedSink), (r1 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0046 \}]\l0x0037: IGET  (r0 I:okio.BufferedSink) = (r5 I:okhttp3.internal.http2.Http2Writer) okhttp3.internal.http2.Http2Writer.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0046 \}]\l0x0039: INVOKE  (r0 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE A[Catch:\{ all \-\> 0x0046 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|SYNTHETIC\lSplitter:B:15:0x003e\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x003e\l|0x003e: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0046 \}, TRY_ENTER]\l0x0040: CONST_STR  (r1 I:java.lang.String) =  \"closed\" A[Catch:\{ all \-\> 0x0046 \}]\l0x0042: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0046 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0046: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|0x0047: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|0x0048: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http2.Http2Writer.connectionPreface((r5 'this' I:okhttp3.internal.http2.Http2Writer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

