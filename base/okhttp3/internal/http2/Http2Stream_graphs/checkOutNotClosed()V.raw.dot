digraph "CFG forokhttp3.internal.http2.Http2Stream.checkOutNotClosed()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink \l0x0002: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink \l0x0008: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:okhttp3.internal.http2.ErrorCode) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.StreamResetException) =  okhttp3.internal.http2.StreamResetException \l0x0013: IGET  (r1 I:okhttp3.internal.http2.ErrorCode) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode \l0x0015: INVOKE  \l  (r0 I:okhttp3.internal.http2.StreamResetException)\l  (r1 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.StreamResetException.\<init\>(okhttp3.internal.http2.ErrorCode):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x001b: CONST_STR  (r1 I:java.lang.String) =  \"stream finished\" \l0x001d: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0023: CONST_STR  (r1 I:java.lang.String) =  \"stream closed\" \l0x0025: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.checkOutNotClosed((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

