digraph "CFG forokhttp3.internal.http2.Http2Stream.receiveFin()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource A[Catch:\{ all \-\> 0x0018 \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0018 \}]\l0x0004: IPUT  \l  (r1 I:boolean)\l  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean A[Catch:\{ all \-\> 0x0018 \}]\l0x0006: INVOKE  (r0 I:boolean) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isOpen():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0018 \}]\l0x000a: INVOKE  (r2 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0018 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0018 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x0012: IGET  (r1 I:int) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x0014: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection), (r1 I:int) okhttp3.internal.http2.Http2Connection.removeStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0018: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|SYNTHETIC\lSplitter:B:8:0x0019\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0019\l|0x0019: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0018 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.receiveFin((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_9 -> Node_7;
}

