digraph "CFG forokhttp3.internal.http2.Http2Stream.getSink()Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.hasResponseHeaders != false) goto L_0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if (isLocallyInitiated() == false) goto L_0x000c\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b}"];
Node_7 [shape=record,label="{7\:\ 0x000c}"];
Node_8 [shape=record,label="{8\:\ 0x0013|throw new java.lang.IllegalStateException(\"reply before requesting the sink\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|monitor\-exit(r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015}"];
Node_11 [shape=record,label="{11\:\ 0x0017|RETURN\l|return r2.sink\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|LOOP_START\lREMOVE\lLOOP:0: B:12:0x0018\-\>B:16:0x0018\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|SYNTHETIC\lREMOVE\lSplitter:B:13:0x0019\l}"];
Node_14 [shape=record,label="{14\:\ ?|REMOVE\lSplitter:B:13:0x0019\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|REMOVE\l|throw r0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:12:0x0018\-\>B:16:0x0018\l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public okio.Sink okhttp3.internal.http2.Http2Stream.getSink((r2v0 'this' okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_14 -> Node_17;
Node_14 -> Node_18;
Node_16 -> Node_12;
Node_17 -> Node_15;
Node_18 -> Node_16;
}

