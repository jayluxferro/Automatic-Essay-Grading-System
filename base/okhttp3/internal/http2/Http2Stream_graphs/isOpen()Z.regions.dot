digraph "CFG forokhttp3.internal.http2.Http2Stream.isOpen()Z" {
subgraph cluster_Region_476808468 {
label = "R(1:(1:(1:(2:(1:6)|(1:(2:(1:19)|(1:22)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1817498055 {
label = "R(1:(1:(2:(1:6)|(1:(2:(1:19)|(1:22))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1461101443 {
label = "R(1:(2:(1:6)|(1:(2:(1:19)|(1:22)))))";
node [shape=record,color=blue];
subgraph cluster_Region_228041122 {
label = "R(2:(1:6)|(1:(2:(1:19)|(1:22))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1293207073 {
label = "IF [B:4:0x0004] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|if (r2.errorCode != null) goto L_0x0006\l}"];
subgraph cluster_Region_126151853 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0007|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1709985125 {
label = "R(1:(2:(1:19)|(1:22)))";
node [shape=record,color=blue];
subgraph cluster_Region_1439070923 {
label = "R(2:(1:19)|(1:22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1049140124 {
label = "IF [B:9:0x000c, B:11:0x0012, B:13:0x0018, B:15:0x001e, B:17:0x0022] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x000c|if (r2.source.finished == true) goto L_0x0014\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|ADDED_TO_REGION\l|if (r2.source.closed == true) goto L_0x0014\l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|ADDED_TO_REGION\l|if (r2.sink.finished == true) goto L_0x0020\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|ADDED_TO_REGION\l|if (r2.sink.closed == true) goto L_0x0020\l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|ADDED_TO_REGION\l|if (r2.hasResponseHeaders == true) goto L_0x0024\l}"];
subgraph cluster_Region_516553060 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_432605373 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0028|RETURN\l|return true\l}"];
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0003}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0006|DONT_GENERATE\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0008|SYNTHETIC\lSplitter:B:7:0x0008\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|Splitter:B:7:0x0008\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000e}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0014}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001a}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0020}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0024|DONT_GENERATE\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0026}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0027|DONT_GENERATE\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0029|REMOVE\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x002a|REMOVE\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x002b|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized boolean okhttp3.internal.http2.Http2Stream.isOpen((r2v0 'this' okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_11 -> Node_12;
Node_11 -> Node_20[style=dashed];
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_15 -> Node_16;
Node_15 -> Node_20[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_20[style=dashed];
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_2 -> Node_23;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_23;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

