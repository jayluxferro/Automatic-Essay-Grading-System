digraph "CFG forokhttp3.internal.http2.Http2Stream.receiveHeaders(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|SYNTHETIC\lSplitter:B:2:0x0002\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0002\l|0x0002: IPUT  (r0 I:boolean), (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.hasResponseHeaders boolean A[Catch:\{ all \-\> 0x0030 \}, TRY_ENTER]\l0x0004: IGET  (r1 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IPUT  \l  (r4 I:java.util.List\<okhttp3.internal.http2.Header\>)\l  (r3 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x0030 \}]\l0x000a: INVOKE  (r0 I:boolean) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isOpen():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0030 \}]\l0x000e: INVOKE  (r3 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0030 \}]\l0x0011: GOTO  \-\> 0x0025 A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x0030 \}]\l0x0014: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0030 \}]\l0x0017: IGET  (r2 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x0030 \}]\l0x0019: INVOKE  (r1 I:java.util.List), (r2 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0030 \}]\l0x001d: INVOKE  (r1 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l0x0020: INVOKE  (r1 I:java.util.List), (r4 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l0x0023: IPUT  \l  (r1 I:java.util.List\<okhttp3.internal.http2.Header\>)\l  (r3 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0030 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IGET  (r4 I:okhttp3.internal.http2.Http2Connection) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x002a: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x002c: INVOKE  (r4 I:okhttp3.internal.http2.Http2Connection), (r0 I:int) okhttp3.internal.http2.Http2Connection.removeStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|ExcHandler: all null\lSplitter:B:2:0x0002\l|0x0030: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|SYNTHETIC\lSplitter:B:12:0x0031\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0031\l|0x0031: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0030 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.receiveHeaders((r3 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

