digraph "CFG forokhttp3.internal.http2.Http2Stream.closeInternal(Lokhttp3\/internal\/http2\/ErrorCode;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:okhttp3.internal.http2.ErrorCode) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0008 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource A[Catch:\{ all \-\> 0x0025 \}]\l0x000a: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0016 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink A[Catch:\{ all \-\> 0x0025 \}]\l0x0010: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0016 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: RETURN  (r1 I:boolean) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: IPUT  \l  (r3 I:okhttp3.internal.http2.ErrorCode)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x0025 \}]\l0x0018: INVOKE  (r2 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: IGET  (r3 I:okhttp3.internal.http2.Http2Connection) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x001e: IGET  (r0 I:int) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x0020: INVOKE  (r3 I:okhttp3.internal.http2.Http2Connection), (r0 I:int) okhttp3.internal.http2.Http2Connection.removeStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l0x0023: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: RETURN  (r3 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0025: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|SYNTHETIC\lSplitter:B:17:0x0026\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0026\l|0x0026: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|0x0027: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.http2.Http2Stream.closeInternal((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_16;
Node_18 -> Node_19;
Node_18 -> Node_16;
}

