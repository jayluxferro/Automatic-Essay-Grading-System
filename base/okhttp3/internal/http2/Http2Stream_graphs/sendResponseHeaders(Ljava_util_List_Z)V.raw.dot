digraph "CFG forokhttp3.internal.http2.Http2Stream.sendResponseHeaders(Ljava\/util\/List;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x003c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: IPUT  (r0 I:boolean), (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.hasResponseHeaders boolean A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER]\l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0010 A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r10 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink A[Catch:\{ all \-\> 0x0039 \}]\l0x000b: IPUT  \l  (r0 I:boolean)\l  (r10 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean A[Catch:\{ all \-\> 0x0039 \}]\l0x000d: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0039 \}]\l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0039 \}]\l0x000f: GOTO  \-\> 0x0012 A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0039 \}]\l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x002a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IGET  (r3 I:okhttp3.internal.http2.Http2Connection) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\lSplitter:B:12:0x0018\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0018\l|0x0018: IGET  (r10 I:okhttp3.internal.http2.Http2Connection) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0027 \}, TRY_ENTER]\l0x001a: IGET  (r4 I:long) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0027 \}]\l0x001c: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0027 \}]\l0x001e: CMP_L  (r10 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0024 A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|0x0022: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0027 \}]\l0x0023: GOTO  \-\> 0x0025 A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024|0x0024: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: GOTO  \-\> 0x002a A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|ExcHandler: all null\lSplitter:B:12:0x0018\l|0x0027: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0028|0x0028: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0027 \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|0x0029: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|0x002a: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x002c: IGET  (r1 I:int) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x002e: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection)\l  (r1 I:int)\l  (r2 I:boolean)\l  (r9 I:java.util.List)\l okhttp3.internal.http2.Http2Connection.writeSynReply(int, boolean, java.util.List):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|0x0031: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0038 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0033|0x0033: IGET  (r9 I:okhttp3.internal.http2.Http2Connection) = (r8 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x0035: INVOKE  (r9 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.flush():void type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|0x0038: RETURN   \l}"];
Node_26 [shape=record,label="{26\:\ 0x0039|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x0039: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x003a|SYNTHETIC\lSplitter:B:27:0x003a\l}"];
Node_28 [shape=record,label="{28\:\ ?|Splitter:B:27:0x003a\l|0x003a: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x003b|0x003b: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x003c|0x003c: NEW_INSTANCE  (r9 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x003e: CONST_STR  (r10 I:java.lang.String) =  \"responseHeaders == null\" \l0x0040: INVOKE  \l  (r9 I:java.lang.NullPointerException)\l  (r10 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x0043|0x0043: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.sendResponseHeaders((r8 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r9 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_30;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_26;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_26;
Node_28 -> Node_29;
Node_28 -> Node_26;
Node_30 -> Node_31;
}

