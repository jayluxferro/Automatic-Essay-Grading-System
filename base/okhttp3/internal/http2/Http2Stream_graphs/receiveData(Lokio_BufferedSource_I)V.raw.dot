digraph "CFG forokhttp3.internal.http2.Http2Stream.receiveData(Lokio\/BufferedSource;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r3 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource \l0x0002: CAST  (r1 I:long) = (long) (r5 I:int) \l0x0003: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l  (r4 I:okio.BufferedSource)\l  (r1 I:long)\l okhttp3.internal.http2.Http2Stream.FramingSource.receive(okio.BufferedSource, long):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.receiveData((r3 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r4 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

