digraph "CFG forokhttp3.internal.http2.Http2Stream.\<init\>(ILokhttp3\/internal\/http2\/Http2Connection;ZZLjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0005: IPUT  (r0 I:long), (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead long \l0x0007: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) =  okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0009: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.StreamTimeout.\<init\>(okhttp3.internal.http2.Http2Stream):void type: DIRECT \l0x000c: IPUT  \l  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x000e: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) =  okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0010: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.StreamTimeout.\<init\>(okhttp3.internal.http2.Http2Stream):void type: DIRECT \l0x0013: IPUT  \l  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0015: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: IPUT  \l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0051 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0049 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IPUT  (r3 I:int), (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x001e: IPUT  \l  (r4 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x0020: IGET  (r3 I:okhttp3.internal.http2.Settings) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings \l0x0022: INVOKE  (r3 I:int) = (r3 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL \l0x0026: CAST  (r0 I:long) = (long) (r3 I:int) \l0x0027: IPUT  (r0 I:long), (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long \l0x0029: NEW_INSTANCE  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSource) =  okhttp3.internal.http2.Http2Stream$FramingSource \l0x002b: IGET  (r4 I:okhttp3.internal.http2.Settings) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.okHttpSettings okhttp3.internal.http2.Settings \l0x002d: INVOKE  (r4 I:int) = (r4 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL \l0x0031: CAST  (r0 I:long) = (long) (r4 I:int) \l0x0032: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l  (r0 I:long)\l okhttp3.internal.http2.Http2Stream.FramingSource.\<init\>(okhttp3.internal.http2.Http2Stream, long):void type: DIRECT \l0x0035: IPUT  \l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource \l0x0037: NEW_INSTANCE  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSink) =  okhttp3.internal.http2.Http2Stream$FramingSink \l0x0039: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.FramingSink.\<init\>(okhttp3.internal.http2.Http2Stream):void type: DIRECT \l0x003c: IPUT  \l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink \l0x003e: IGET  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource \l0x0040: IPUT  \l  (r6 I:boolean)\l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSource)\l okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean \l0x0042: IGET  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink \l0x0044: IPUT  \l  (r5 I:boolean)\l  (r3 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean \l0x0046: IPUT  \l  (r7 I:java.util.List\<okhttp3.internal.http2.Header\>)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.requestHeaders java.util.List \l}"];
Node_4 [shape=record,label="{4\:\ 0x0048|0x0048: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0049|0x0049: NEW_INSTANCE  (r3 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x004b: CONST_STR  (r4 I:java.lang.String) =  \"requestHeaders == null\" \l0x004d: INVOKE  \l  (r3 I:java.lang.NullPointerException)\l  (r4 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0050|0x0050: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0051|0x0051: NEW_INSTANCE  (r3 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0053: CONST_STR  (r4 I:java.lang.String) =  \"connection == null\" \l0x0055: INVOKE  \l  (r3 I:java.lang.NullPointerException)\l  (r4 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0058|0x0058: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.\<init\>((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.internal.http2.Http2Connection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Lokhttp3\/internal\/http2\/Http2Connection;, ZZ, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

