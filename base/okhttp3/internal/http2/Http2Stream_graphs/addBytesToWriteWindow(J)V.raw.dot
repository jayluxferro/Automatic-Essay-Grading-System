digraph "CFG forokhttp3.internal.http2.Http2Stream.addBytesToWriteWindow(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long \l0x0002: ARITH  (r0 I:long) = (r0 I:long) + (r3 I:long) \l0x0003: IPUT  (r0 I:long), (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long \l0x0005: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0007: CMP_L  (r3 I:int) = (r3 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r2 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.addBytesToWriteWindow((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

