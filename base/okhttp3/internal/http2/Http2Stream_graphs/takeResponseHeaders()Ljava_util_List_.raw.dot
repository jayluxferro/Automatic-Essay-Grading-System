digraph "CFG forokhttp3.internal.http2.Http2Stream.takeResponseHeaders()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r0 I:boolean) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isLocallyInitiated():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x003d \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0035 A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x003d \}]\l0x0009: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.enter():void type: VIRTUAL A[Catch:\{ all \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|SYNTHETIC\lSplitter:B:5:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000c\l|0x000c: IGET  (r0 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x002e \}, TRY_ENTER]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IGET  (r0 I:okhttp3.internal.http2.ErrorCode) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: INVOKE  (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.waitForIo():void type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\lSplitter:B:12:0x0018\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0018\l|0x0018: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x003d \}, TRY_ENTER]\l0x001a: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL A[Catch:\{ all \-\> 0x003d \}]\l0x001d: IGET  (r0 I:java.util.List\<okhttp3.internal.http2.Header\>) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0026 A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|0x0021: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x003d \}]\l0x0022: IPUT  \l  (r1 I:java.util.List\<okhttp3.internal.http2.Header\>)\l  (r2 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Stream.responseHeaders java.util.List A[Catch:\{ all \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024|0x0024: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: RETURN  (r0 I:java.util.List\<okhttp3.internal.http2.Header\>) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|SYNTHETIC\lSplitter:B:18:0x0026\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x0026\l|0x0026: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.StreamResetException) =  okhttp3.internal.http2.StreamResetException A[Catch:\{ all \-\> 0x003d \}, TRY_ENTER]\l0x0028: IGET  (r1 I:okhttp3.internal.http2.ErrorCode) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x003d \}]\l0x002a: INVOKE  \l  (r0 I:okhttp3.internal.http2.StreamResetException)\l  (r1 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.StreamResetException.\<init\>(okhttp3.internal.http2.ErrorCode):void type: DIRECT A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002e|ExcHandler: all null\lSplitter:B:5:0x000c\l|0x002e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|0x002f: IGET  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.readTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x003d \}]\l0x0031: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x003d \}]\l0x0037: CONST_STR  (r1 I:java.lang.String) =  \"servers cannot read response headers\" A[Catch:\{ all \-\> 0x003d \}]\l0x0039: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x003c|0x003c: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x003d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x003e|0x003e: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x003f|0x003f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized java.util.List\<okhttp3.internal.http2.Header\> okhttp3.internal.http2.Http2Stream.takeResponseHeaders((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_24;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_21;
Node_5 -> Node_26;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_5;
Node_12 -> Node_13;
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

