digraph "CFG forokhttp3.internal.http2.Http2Stream.cancelStreamIfNecessary()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource A[Catch:\{ all \-\> 0x0033 \}, TRY_ENTER]\l0x0003: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.finished boolean A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001b A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.source okhttp3.internal.http2.Http2Stream$FramingSource A[Catch:\{ all \-\> 0x0033 \}]\l0x0009: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSource) okhttp3.internal.http2.Http2Stream.FramingSource.closed boolean A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001b A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink A[Catch:\{ all \-\> 0x0033 \}]\l0x000f: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink A[Catch:\{ all \-\> 0x0033 \}]\l0x0015: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.closed boolean A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001b A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0033 \}]\l0x001a: GOTO  \-\> 0x001c A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: INVOKE  (r1 I:boolean) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isOpen():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0033 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0033 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0029 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.CANCEL okhttp3.internal.http2.ErrorCode \l0x0025: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Stream)\l  (r0 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Stream.close(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0032 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|0x002b: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x002d: IGET  (r1 I:int) = (r2 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x002f: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection), (r1 I:int) okhttp3.internal.http2.Http2Connection.removeStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0033: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|SYNTHETIC\lSplitter:B:20:0x0034\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0034\l|0x0034: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0033 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0035|0x0035: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http2.Http2Stream.cancelStreamIfNecessary((r2 'this' I:okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_19;
Node_21 -> Node_22;
Node_21 -> Node_19;
}

