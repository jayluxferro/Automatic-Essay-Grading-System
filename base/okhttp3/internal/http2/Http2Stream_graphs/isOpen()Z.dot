digraph "CFG forokhttp3.internal.http2.Http2Stream.isOpen()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003}"];
Node_4 [shape=record,label="{4\:\ 0x0004|if (r2.errorCode == null) goto L_0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|monitor\-exit(r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|RETURN\l|return false\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|SYNTHETIC\lSplitter:B:7:0x0008\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0008\l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|if (r2.source.finished != false) goto L_0x0014\l}"];
Node_10 [shape=record,label="{10\:\ 0x000e}"];
Node_11 [shape=record,label="{11\:\ 0x0012|if (r2.source.closed == false) goto L_0x0026\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014}"];
Node_13 [shape=record,label="{13\:\ 0x0018|if (r2.sink.finished != false) goto L_0x0020\l}"];
Node_14 [shape=record,label="{14\:\ 0x001a}"];
Node_15 [shape=record,label="{15\:\ 0x001e|if (r2.sink.closed == false) goto L_0x0026\l}"];
Node_16 [shape=record,label="{16\:\ 0x0020}"];
Node_17 [shape=record,label="{17\:\ 0x0022|if (r2.hasResponseHeaders == false) goto L_0x0026\l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|monitor\-exit(r2)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|return false\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026}"];
Node_21 [shape=record,label="{21\:\ 0x0027|monitor\-exit(r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0028|RETURN\l|return true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_24 [shape=record,label="{24\:\ 0x002a|REMOVE\l}"];
Node_25 [shape=record,label="{25\:\ 0x002b|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized boolean okhttp3.internal.http2.Http2Stream.isOpen((r2v0 'this' okhttp3.internal.http2.Http2Stream A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_2 -> Node_23;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_23;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

