digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.ping(ZII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == false) goto L_0x0015\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|okhttp3.internal.http2.Http2Connection r4 = r3.this$0\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|monitor\-enter(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?|okhttp3.internal.http2.Http2Connection.access$302(r3.this$0, false)\lr3.this$0.notifyAll()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|monitor\-exit(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011}"];
Node_7 [shape=record,label="{7\:\ 0x0012|REMOVE\l|java.lang.Throwable r5 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|REMOVE\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|REMOVE\l|throw r5\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\lSplitter:B:10:0x0015\l}"];
Node_11 [shape=record,label="{11\:\ ?|Catch:\{ RejectedExecutionException \-\> 0x0026 \}\lSplitter:B:10:0x0015\l|okhttp3.internal.http2.Http2Connection.access$200(r3.this$0).execute(new okhttp3.internal.http2.Http2Connection.PingRunnable(r3.this$0, true, r5, r6))     \/\/ Catch:\{ RejectedExecutionException \-\> 0x0026 \}\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: RejectedExecutionException (unused java.util.concurrent.RejectedExecutionException)\lSplitter:B:10:0x0015\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.ping((r3v0 'this' okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
}

