digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.headers(ZIILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r12 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x0002: INVOKE  (r12 I:boolean) = (r12 I:okhttp3.internal.http2.Http2Connection), (r11 I:int) okhttp3.internal.http2.Http2Connection.pushedStream(int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r12 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x000a: INVOKE  \l  (r12 I:okhttp3.internal.http2.Http2Connection)\l  (r11 I:int)\l  (r13 I:java.util.List)\l  (r10 I:boolean)\l okhttp3.internal.http2.Http2Connection.pushHeadersLater(int, java.util.List, boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r12 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MONITOR_ENTER  (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lSplitter:B:6:0x0011\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0011\l|0x0011: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}, TRY_ENTER]\l0x0013: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) = (r0 I:okhttp3.internal.http2.Http2Connection), (r11 I:int) okhttp3.internal.http2.Http2Connection.getStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0070 A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x001b: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.shutdown boolean A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0021 A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: RETURN   A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x0023: IGET  (r0 I:int) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.lastGoodStreamId int A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|0x0025: IF  (r11 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:17:0x0029 A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: RETURN   A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: ARITH  (r0 I:int) = (r11 I:int) % (2 int) A[Catch:\{ all \-\> 0x007a \}]\l0x002b: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x002d: IGET  (r1 I:int) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.nextStreamId int A[Catch:\{ all \-\> 0x007a \}]\l0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x007a \}]\l0x0030: ARITH  (r1 I:int) = (r1 I:int) % (r2 I:int) A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0035 A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: RETURN   A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Stream) =  okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x007a \}]\l0x0037: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x0039: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x003a: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l0x003b: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x003c: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x003d: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l0x003e: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Stream)\l  (r4 I:int)\l  (r5 I:okhttp3.internal.http2.Http2Connection)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:java.util.List)\l okhttp3.internal.http2.Http2Stream.\<init\>(int, okhttp3.internal.http2.Http2Connection, boolean, boolean, java.util.List):void type: DIRECT A[Catch:\{ all \-\> 0x007a \}]\l0x0041: IGET  (r10 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x0043: IPUT  (r11 I:int), (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.lastGoodStreamId int A[Catch:\{ all \-\> 0x007a \}]\l0x0045: IGET  (r10 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x0047: IGET  (r10 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r10 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x007a \}]\l0x0049: INVOKE  (r13 I:java.lang.Integer) = (r11 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x007a \}]\l0x004d: INVOKE  \l  (r10 I:java.util.Map)\l  (r13 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x007a \}]\l0x0050: INVOKE  (r10 I:java.util.concurrent.ExecutorService) =  okhttp3.internal.http2.Http2Connection.access$100():java.util.concurrent.ExecutorService type: STATIC A[Catch:\{ all \-\> 0x007a \}]\l0x0054: NEW_INSTANCE  (r13 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable$1) =  okhttp3.internal.http2.Http2Connection$ReaderRunnable$1 A[Catch:\{ all \-\> 0x007a \}]\l0x0056: CONST_STR  (r1 I:java.lang.String) =  \"OkHttp %s stream %d\" A[Catch:\{ all \-\> 0x007a \}]\l0x0058: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ all \-\> 0x007a \}]\l0x005a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x005b: IGET  (r4 I:okhttp3.internal.http2.Http2Connection) = \l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x007a \}]\l0x005d: IGET  (r4 I:java.lang.String) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String A[Catch:\{ all \-\> 0x007a \}]\l0x005f: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x0061: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x007a \}]\l0x0062: INVOKE  (r11 I:java.lang.Integer) = (r11 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x007a \}]\l0x0066: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x007a \}]\l0x0068: INVOKE  \l  (r13 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable$1)\l  (r9 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.Object[])\l  (r0 I:okhttp3.internal.http2.Http2Stream)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.1.\<init\>(okhttp3.internal.http2.Http2Connection$ReaderRunnable, java.lang.String, java.lang.Object[], okhttp3.internal.http2.Http2Stream):void type: DIRECT A[Catch:\{ all \-\> 0x007a \}]\l0x006b: INVOKE  \l  (r10 I:java.util.concurrent.ExecutorService)\l  (r13 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x006f|0x006f: RETURN   A[Catch:\{ all \-\> 0x007a \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0070|0x0070: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0071|0x0071: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream)\l  (r13 I:java.util.List)\l okhttp3.internal.http2.Http2Stream.receiveHeaders(java.util.List):void type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0074|0x0074: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0079 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0076|0x0076: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.receiveFin():void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0079|0x0079: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x007a|ExcHandler: all null\lSplitter:B:6:0x0011\l|0x007a: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x007b|SYNTHETIC\lSplitter:B:30:0x007b\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x007b\l|0x007b: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x007a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x007c|0x007c: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.headers((r9 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.util.List\<okhttp3.internal.http2.Header\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ZII, Ljava\/util\/List\<, Lokhttp3\/internal\/http2\/Header;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_29;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_24;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_29;
Node_31 -> Node_32;
Node_31 -> Node_29;
}

