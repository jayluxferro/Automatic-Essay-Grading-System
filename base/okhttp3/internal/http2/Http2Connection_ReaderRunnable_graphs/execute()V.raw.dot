digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.execute()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR okhttp3.internal.http2.ErrorCode \l0x0002: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR okhttp3.internal.http2.ErrorCode \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0004\l|0x0004: IGET  (r2 I:okhttp3.internal.http2.Http2Reader) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.reader okhttp3.internal.http2.Http2Reader A[Catch:\{ IOException \-\> 0x001e \}, TRY_ENTER]\l0x0006: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Reader)\l  (r5 I:okhttp3.internal.http2.Http2Reader$Handler)\l okhttp3.internal.http2.Http2Reader.readConnectionPreface(okhttp3.internal.http2.Http2Reader$Handler):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x001e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r2 I:okhttp3.internal.http2.Http2Reader) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.reader okhttp3.internal.http2.Http2Reader A[Catch:\{ IOException \-\> 0x001e \}]\l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x001e \}]\l0x000c: INVOKE  (r2 I:boolean) = \l  (r2 I:okhttp3.internal.http2.Http2Reader)\l  (r3 I:boolean)\l  (r5 I:okhttp3.internal.http2.Http2Reader$Handler)\l okhttp3.internal.http2.Http2Reader.nextFrame(boolean, okhttp3.internal.http2.Http2Reader$Handler):boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x001e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 A[Catch:\{ IOException \-\> 0x001e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: GOTO  \-\> 0x0009 A[Catch:\{ IOException \-\> 0x001e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: SGET  (r2 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.NO_ERROR okhttp3.internal.http2.ErrorCode A[Catch:\{ IOException \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|SYNTHETIC\lSplitter:B:7:0x0015\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0015\l|0x0015: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.CANCEL okhttp3.internal.http2.ErrorCode A[Catch:\{ IOException \-\> 0x001a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\lSplitter:B:9:0x0017\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0017\l|0x0017: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ IOException \-\> 0x0027 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:7:0x0015\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|ExcHandler: all null\lSplitter:B:16:0x001e\l|0x001c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|SYNTHETIC\lSplitter:B:16:0x001e\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x001e\l|0x001e: SGET  (r2 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x001c \}, ExcHandler: IOException null, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|SYNTHETIC\lSplitter:B:18:0x0020\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x0020\l|0x0020: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x002d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|SYNTHETIC\lSplitter:B:20:0x0022\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0022\l|0x0022: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ IOException \-\> 0x0027 \}, TRY_ENTER]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|0x0024: INVOKE  \l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:okhttp3.internal.http2.ErrorCode)\l  (r0 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Connection.close(okhttp3.internal.http2.ErrorCode, okhttp3.internal.http2.ErrorCode):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0027 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0027|0x0027: IGET  (r0 I:okhttp3.internal.http2.Http2Reader) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.reader okhttp3.internal.http2.Http2Reader \l0x0029: INVOKE  (r0 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:9:0x0017\l}"];
Node_25 [shape=record,label="{25\:\ 0x002c|0x002c: RETURN   \l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|ExcHandler: all null\lSplitter:B:18:0x0020\l|0x002d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x002e|0x002e: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x002f: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0030: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0031|SYNTHETIC\lSplitter:B:28:0x0031\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0031\l|0x0031: IGET  (r3 I:okhttp3.internal.http2.Http2Connection) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ IOException \-\> 0x0036 \}, TRY_ENTER]\l0x0033: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Connection)\l  (r0 I:okhttp3.internal.http2.ErrorCode)\l  (r1 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Connection.close(okhttp3.internal.http2.ErrorCode, okhttp3.internal.http2.ErrorCode):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0036 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0036|0x0036: IGET  (r0 I:okhttp3.internal.http2.Http2Reader) = \l  (r5 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.reader okhttp3.internal.http2.Http2Reader \l0x0038: INVOKE  (r0 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:28:0x0031\l}"];
Node_32 [shape=record,label="{32\:\ 0x003b|0x003b: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void okhttp3.internal.http2.Http2Connection.ReaderRunnable.execute((r5 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_9 -> Node_24;
Node_10 -> Node_24;
Node_10 -> Node_22;
Node_12 -> Node_16;
Node_13 -> Node_12;
Node_14 -> Node_28;
Node_16 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_24 -> Node_23;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_31 -> Node_30;
}

