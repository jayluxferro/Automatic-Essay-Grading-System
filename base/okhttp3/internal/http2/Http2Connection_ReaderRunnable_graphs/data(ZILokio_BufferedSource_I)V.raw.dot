digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.data(ZILokio\/BufferedSource;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Connection), (r4 I:int) okhttp3.internal.http2.Http2Connection.pushedStream(int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x000a: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection)\l  (r4 I:int)\l  (r5 I:okio.BufferedSource)\l  (r6 I:int)\l  (r3 I:boolean)\l okhttp3.internal.http2.Http2Connection.pushDataLater(int, okio.BufferedSource, int, boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x0010: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) = (r0 I:okhttp3.internal.http2.Http2Connection), (r4 I:int) okhttp3.internal.http2.Http2Connection.getStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r3 I:okhttp3.internal.http2.Http2Connection) = \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x0018: SGET  (r0 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR okhttp3.internal.http2.ErrorCode \l0x001a: INVOKE  \l  (r3 I:okhttp3.internal.http2.Http2Connection)\l  (r4 I:int)\l  (r0 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Connection.writeSynResetLater(int, okhttp3.internal.http2.ErrorCode):void type: VIRTUAL \l0x001d: IGET  (r3 I:okhttp3.internal.http2.Http2Connection) = \l  (r2 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x001f: CAST  (r0 I:long) = (long) (r6 I:int) \l0x0020: INVOKE  (r3 I:okhttp3.internal.http2.Http2Connection), (r0 I:long) okhttp3.internal.http2.Http2Connection.updateConnectionFlowControl(long):void type: VIRTUAL \l0x0023: INVOKE  (r5 I:okio.BufferedSource), (r0 I:long) okio.BufferedSource.skip(long):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Stream)\l  (r5 I:okio.BufferedSource)\l  (r6 I:int)\l okhttp3.internal.http2.Http2Stream.receiveData(okio.BufferedSource, int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.receiveFin():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.data((r2 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

