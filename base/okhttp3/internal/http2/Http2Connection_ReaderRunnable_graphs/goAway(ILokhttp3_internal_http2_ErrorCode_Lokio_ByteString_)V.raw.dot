digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.goAway(ILokhttp3\/internal\/http2\/ErrorCode;Lokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0003: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: IGET  (r6 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0048 \}, TRY_ENTER]\l0x0008: IGET  (r6 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r6 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x0048 \}]\l0x000a: INVOKE  (r6 I:java.util.Collection) = (r6 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l0x000e: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0048 \}]\l0x0010: IGET  (r0 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x0048 \}]\l0x0012: INVOKE  (r0 I:int) = (r0 I:java.util.Map) java.util.Map.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l0x0016: NEW_ARRAY  (r0 I:okhttp3.internal.http2.Http2Stream[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Http2Stream[] A[Catch:\{ all \-\> 0x0048 \}]\l0x0018: INVOKE  (r6 I:java.lang.Object[]) = (r6 I:java.util.Collection), (r0 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l0x001c: CHECK_CAST  (r6 I:okhttp3.internal.http2.Http2Stream[]) = (okhttp3.internal.http2.Http2Stream[]) (r6 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0048 \}]\l0x001e: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0048 \}]\l0x0020: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0048 \}]\l0x0021: IPUT  \l  (r1 I:boolean)\l  (r0 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.shutdown boolean A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0048 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: ARRAY_LENGTH  (r5 I:int) = (r6 I:?[]) \l0x0025: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: AGET  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002a: INVOKE  (r2 I:int) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.getId():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r2 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: INVOKE  (r2 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.isLocallyInitiated():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: SGET  (r2 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.REFUSED_STREAM okhttp3.internal.http2.ErrorCode \l0x0038: INVOKE  \l  (r1 I:okhttp3.internal.http2.Http2Stream)\l  (r2 I:okhttp3.internal.http2.ErrorCode)\l okhttp3.internal.http2.Http2Stream.receiveRstStream(okhttp3.internal.http2.ErrorCode):void type: VIRTUAL \l0x003b: IGET  (r2 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l0x003d: INVOKE  (r1 I:int) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.getId():int type: VIRTUAL \l0x0041: INVOKE  (r2 I:okhttp3.internal.http2.Http2Connection), (r1 I:int) okhttp3.internal.http2.Http2Connection.removeStream(int):okhttp3.internal.http2.Http2Stream type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|ExcHandler: all null\lSplitter:B:2:0x0006\l|0x0048: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|SYNTHETIC\lSplitter:B:15:0x0049\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0049\l|0x0049: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0048 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.goAway((r3 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okhttp3.internal.http2.ErrorCode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_6;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_14;
Node_16 -> Node_17;
Node_16 -> Node_14;
}

