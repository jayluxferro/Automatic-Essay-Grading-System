digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.ping(ZII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r4 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\lSplitter:B:3:0x0005\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0005\l|0x0005: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l0x0007: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0012 \}]\l0x0008: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Connection)\l  (r6 I:boolean)\l okhttp3.internal.http2.Http2Connection.access$302(okhttp3.internal.http2.Http2Connection, boolean):boolean type: STATIC A[Catch:\{ all \-\> 0x0012 \}]\l0x000b: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0012 \}]\l0x000d: INVOKE  (r5 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: GOTO  \-\> 0x0026 A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|ExcHandler: all null\lSplitter:B:3:0x0005\l|0x0012: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0012 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0012 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\lSplitter:B:10:0x0015\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0015\l|0x0015: IGET  (r4 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}, TRY_ENTER]\l0x0017: INVOKE  (r4 I:java.util.concurrent.ScheduledExecutorService) = (r4 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.access$200(okhttp3.internal.http2.Http2Connection):java.util.concurrent.ScheduledExecutorService type: STATIC A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}]\l0x001b: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Connection$PingRunnable) =  okhttp3.internal.http2.Http2Connection$PingRunnable A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}]\l0x001d: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}]\l0x001f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}]\l0x0020: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection$PingRunnable)\l  (r1 I:okhttp3.internal.http2.Http2Connection)\l  (r2 I:boolean)\l  (r5 I:int)\l  (r6 I:int)\l okhttp3.internal.http2.Http2Connection.PingRunnable.\<init\>(okhttp3.internal.http2.Http2Connection, boolean, int, int):void type: DIRECT A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}]\l0x0023: INVOKE  \l  (r4 I:java.util.concurrent.ScheduledExecutorService)\l  (r0 I:java.lang.Runnable)\l java.util.concurrent.ScheduledExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ RejectedExecutionException \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: RejectedExecutionException null\lSplitter:B:10:0x0015\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.ping((r3 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_12;
}

