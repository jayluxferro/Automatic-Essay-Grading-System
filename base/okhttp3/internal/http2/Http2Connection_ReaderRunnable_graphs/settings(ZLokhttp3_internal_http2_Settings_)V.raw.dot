digraph "CFG forokhttp3.internal.http2.Http2Connection.ReaderRunnable.settings(ZLokhttp3\/internal\/http2\/Settings;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}, TRY_ENTER]\l0x0005: IGET  (r1 I:okhttp3.internal.http2.Settings) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x008f \}]\l0x0007: INVOKE  (r1 I:int) = (r1 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r11 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x000f: IGET  (r11 I:okhttp3.internal.http2.Settings) = (r11 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x008f \}]\l0x0011: INVOKE  (r11 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.clear():void type: VIRTUAL A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r11 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x0016: IGET  (r11 I:okhttp3.internal.http2.Settings) = (r11 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x008f \}]\l0x0018: INVOKE  \l  (r11 I:okhttp3.internal.http2.Settings)\l  (r12 I:okhttp3.internal.http2.Settings)\l okhttp3.internal.http2.Settings.merge(okhttp3.internal.http2.Settings):void type: VIRTUAL A[Catch:\{ all \-\> 0x008f \}]\l0x001b: INVOKE  \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l  (r12 I:okhttp3.internal.http2.Settings)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.applyAndAckSettings(okhttp3.internal.http2.Settings):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x001e: IGET  (r11 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x0020: IGET  (r11 I:okhttp3.internal.http2.Settings) = (r11 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.peerSettings okhttp3.internal.http2.Settings A[Catch:\{ all \-\> 0x008f \}]\l0x0022: INVOKE  (r11 I:int) = (r11 I:okhttp3.internal.http2.Settings) okhttp3.internal.http2.Settings.getInitialWindowSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x008f \}]\l0x0026: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0027: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x008f \}]\l0x0029: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x002a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005f A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005f A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: ARITH  (r11 I:int) = (r11 I:int) \- (r1 I:int) A[Catch:\{ all \-\> 0x008f \}]\l0x0030: CAST  (r11 I:long) = (long) (r11 I:int) A[Catch:\{ all \-\> 0x008f \}]\l0x0031: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x0033: IGET  (r1 I:boolean) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings boolean A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003b A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x0039: IPUT  \l  (r4 I:boolean)\l  (r1 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings boolean A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x003d: IGET  (r1 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x008f \}]\l0x003f: INVOKE  (r1 I:boolean) = (r1 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0060 A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x0047: IGET  (r1 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r1 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x008f \}]\l0x0049: INVOKE  (r1 I:java.util.Collection) = (r1 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE A[Catch:\{ all \-\> 0x008f \}]\l0x004d: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x004f: IGET  (r5 I:java.util.Map\<java.lang.Integer, okhttp3.internal.http2.Http2Stream\>) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.streams java.util.Map A[Catch:\{ all \-\> 0x008f \}]\l0x0051: INVOKE  (r5 I:int) = (r5 I:java.util.Map) java.util.Map.size():int type: INTERFACE A[Catch:\{ all \-\> 0x008f \}]\l0x0055: NEW_ARRAY  (r5 I:okhttp3.internal.http2.Http2Stream[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: okhttp3.internal.http2.Http2Stream[] A[Catch:\{ all \-\> 0x008f \}]\l0x0057: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.util.Collection), (r5 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ all \-\> 0x008f \}]\l0x005b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008f \}]\l0x005c: CHECK_CAST  (r5 I:okhttp3.internal.http2.Http2Stream[]) = (okhttp3.internal.http2.Http2Stream[]) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008f \}]\l0x005e: GOTO  \-\> 0x0060 A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x005f|0x005f: MOVE  (r11 I:?[long, double]) = (r2 I:?[long, double]) A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0060|0x0060: INVOKE  (r1 I:java.util.concurrent.ExecutorService) =  okhttp3.internal.http2.Http2Connection.access$100():java.util.concurrent.ExecutorService type: STATIC A[Catch:\{ all \-\> 0x008f \}]\l0x0064: NEW_INSTANCE  (r6 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable$2) =  okhttp3.internal.http2.Http2Connection$ReaderRunnable$2 A[Catch:\{ all \-\> 0x008f \}]\l0x0066: CONST_STR  (r7 I:java.lang.String) =  \"OkHttp %s settings\" A[Catch:\{ all \-\> 0x008f \}]\l0x0068: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ all \-\> 0x008f \}]\l0x006a: IGET  (r8 I:okhttp3.internal.http2.Http2Connection) = \l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.this$0 okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x008f \}]\l0x006c: IGET  (r8 I:java.lang.String) = (r8 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.hostname java.lang.String A[Catch:\{ all \-\> 0x008f \}]\l0x006e: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x006f: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r9 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0071: INVOKE  \l  (r6 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable$2)\l  (r10 I:okhttp3.internal.http2.Http2Connection$ReaderRunnable)\l  (r7 I:java.lang.String)\l  (r4 I:java.lang.Object[])\l okhttp3.internal.http2.Http2Connection.ReaderRunnable.2.\<init\>(okhttp3.internal.http2.Http2Connection$ReaderRunnable, java.lang.String, java.lang.Object[]):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0074: INVOKE  \l  (r1 I:java.util.concurrent.ExecutorService)\l  (r6 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0077|0x0077: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008f \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0078|0x0078: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x008e \l}"];
Node_19 [shape=record,label="{19\:\ 0x007a|0x007a: CMP_L  (r0 I:int) = (r11 I:long), (r2 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x007c|0x007c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x008e \l}"];
Node_21 [shape=record,label="{21\:\ 0x007e|0x007e: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x007f|0x007f: IF  (r9 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:32:0x008e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0081|0x0081: AGET  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0083|0x0083: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0084|SYNTHETIC\lSplitter:B:25:0x0084\l}"];
Node_26 [shape=record,label="{26\:\ ?|Splitter:B:25:0x0084\l|0x0084: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream), (r11 I:long) okhttp3.internal.http2.Http2Stream.addBytesToWriteWindow(long):void type: VIRTUAL A[Catch:\{ all \-\> 0x008b \}, TRY_ENTER]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0087|0x0087: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008b \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0088|0x0088: ARITH  (r9 I:int) = (r9 I:int) + (1 int) A[Catch:\{ all \-\> 0x008b \}]\l0x008a: GOTO  \-\> 0x007f A[Catch:\{ all \-\> 0x008b \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x008b|ExcHandler: all null\lSplitter:B:25:0x0084\l|0x008b: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x008b \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x008c|0x008c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008b \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x008d|0x008d: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x008e|0x008e: RETURN   \l}"];
Node_33 [shape=record,label="{33\:\ 0x008f|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x008f: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  \l}"];
Node_34 [shape=record,label="{34\:\ 0x0090|SYNTHETIC\lSplitter:B:34:0x0090\l}"];
Node_35 [shape=record,label="{35\:\ ?|Splitter:B:34:0x0090\l|0x0090: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008f \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0091|0x0091: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Connection.ReaderRunnable.settings((r10 'this' I:okhttp3.internal.http2.Http2Connection$ReaderRunnable A[IMMUTABLE_TYPE, THIS]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:okhttp3.internal.http2.Settings A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_33;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_32;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_22;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_34 -> Node_33;
Node_35 -> Node_36;
Node_35 -> Node_33;
}

