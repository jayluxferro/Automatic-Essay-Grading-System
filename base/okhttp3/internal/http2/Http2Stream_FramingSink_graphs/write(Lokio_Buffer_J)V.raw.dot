digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.Buffer) = (r2 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer \l0x0002: INVOKE  (r0 I:okio.Buffer), (r3 I:okio.Buffer), (r4 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IGET  (r3 I:okio.Buffer) = (r2 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer \l0x0007: INVOKE  (r3 I:long) = (r3 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x000b: CONST  (r0 I:?[long, double]) = (16384(0x4000, double:8.0948E\-320) ?[long, double]) \l0x000d: CMP_L  (r3 I:int) = (r3 I:long), (r0 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l  (r3 I:boolean)\l okhttp3.internal.http2.Http2Stream.FramingSink.emitFrame(boolean):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.FramingSink.write((r2 'this' I:okhttp3.internal.http2.Http2Stream$FramingSink A[IMMUTABLE_TYPE, THIS]), (r3 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

