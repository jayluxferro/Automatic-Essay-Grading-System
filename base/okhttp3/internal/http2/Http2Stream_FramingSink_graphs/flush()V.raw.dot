digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSink.flush()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.checkOutNotClosed():void type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IGET  (r0 I:okio.Buffer) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer \l0x000b: INVOKE  (r0 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x000f: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0011: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  \l  (r4 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l  (r0 I:boolean)\l okhttp3.internal.http2.Http2Stream.FramingSink.emitFrame(boolean):void type: DIRECT \l0x0019: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r4 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x001b: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x001d: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.flush():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0022: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|SYNTHETIC\lSplitter:B:10:0x0023\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0023\l|0x0023: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.FramingSink.flush((r4 'this' I:okhttp3.internal.http2.Http2Stream$FramingSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_9;
}

