digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSink.emitFrame(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}, TRY_ENTER]\l0x0005: IGET  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x008a \}]\l0x0007: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.enter():void type: VIRTUAL A[Catch:\{ all \-\> 0x008a \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|SYNTHETIC\lSplitter:B:4:0x000a\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000a\l|0x000a: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0081 \}, TRY_ENTER]\l0x000c: IGET  (r1 I:long) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x0081 \}]\l0x000e: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0081 \}]\l0x0010: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:15:0x0028 A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r1 I:boolean) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0028 A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IGET  (r1 I:boolean) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.closed boolean A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0028 A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0081 \}]\l0x001e: IGET  (r1 I:okhttp3.internal.http2.ErrorCode) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0028 A[Catch:\{ all \-\> 0x0081 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0081 \}]\l0x0024: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.waitForIo():void type: VIRTUAL A[Catch:\{ all \-\> 0x0081 \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|SYNTHETIC\lSplitter:B:15:0x0028\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0028\l|0x0028: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}, TRY_ENTER]\l0x002a: IGET  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x008a \}]\l0x002c: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL A[Catch:\{ all \-\> 0x008a \}]\l0x002f: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}]\l0x0031: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.checkOutNotClosed():void type: VIRTUAL A[Catch:\{ all \-\> 0x008a \}]\l0x0034: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}]\l0x0036: IGET  (r1 I:long) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x008a \}]\l0x0038: IGET  (r3 I:okio.Buffer) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer A[Catch:\{ all \-\> 0x008a \}]\l0x003a: INVOKE  (r3 I:long) = (r3 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x008a \}]\l0x003e: INVOKE  (r9 I:long) = (r1 I:long), (r3 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ all \-\> 0x008a \}]\l0x0042: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}]\l0x0044: IGET  (r2 I:long) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x008a \}]\l0x0046: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008a \}]\l0x0047: ARITH  (r2 I:long) = (r2 I:long) \- (r9 I:long) A[Catch:\{ all \-\> 0x008a \}]\l0x0048: IPUT  (r2 I:long), (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow long A[Catch:\{ all \-\> 0x008a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008a \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|0x004b: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x004d: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x004f: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.enter():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|SYNTHETIC\lSplitter:B:19:0x0052\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0052\l|0x0052: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0078 \}, TRY_ENTER]\l0x0054: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x0078 \}]\l0x0056: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x0078 \}]\l0x0058: IGET  (r6 I:int) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|0x005a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0069 A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|0x005c: IGET  (r12 I:okio.Buffer) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer A[Catch:\{ all \-\> 0x0078 \}]\l0x005e: INVOKE  (r0 I:long) = (r12 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ all \-\> 0x0078 \}]\l0x0062: CMP_L  (r12 I:int) = (r9 I:long), (r0 I:long) A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0069 A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0078 \}]\l0x0067: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0078 \}]\l0x0068: GOTO  \-\> 0x006b A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0069|0x0069: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0078 \}]\l0x006a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0078 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x006b|0x006b: IGET  (r8 I:okio.Buffer) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer A[Catch:\{ all \-\> 0x0078 \}]\l0x006d: INVOKE  \l  (r5 I:okhttp3.internal.http2.Http2Connection)\l  (r6 I:int)\l  (r7 I:boolean)\l  (r8 I:okio.Buffer)\l  (r9 I:long)\l okhttp3.internal.http2.Http2Connection.writeData(int, boolean, okio.Buffer, long):void type: VIRTUAL A[Catch:\{ all \-\> 0x0078 \}, TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0070|0x0070: IGET  (r12 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x0072: IGET  (r12 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r12 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x0074: INVOKE  (r12 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0077|0x0077: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x0078|ExcHandler: all null\lSplitter:B:19:0x0052\l|0x0078: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x0079|0x0079: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x007b: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout \l0x007d: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0080|0x0080: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0081|ExcHandler: all null\lSplitter:B:4:0x000a\l|0x0081: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_33 [shape=record,label="{33\:\ 0x0082|SYNTHETIC\lSplitter:B:33:0x0082\l}"];
Node_34 [shape=record,label="{34\:\ ?|Splitter:B:33:0x0082\l|0x0082: IGET  (r1 I:okhttp3.internal.http2.Http2Stream) = (r11 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream A[Catch:\{ all \-\> 0x008a \}, TRY_ENTER]\l0x0084: IGET  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) = (r1 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.writeTimeout okhttp3.internal.http2.Http2Stream$StreamTimeout A[Catch:\{ all \-\> 0x008a \}]\l0x0086: INVOKE  (r1 I:okhttp3.internal.http2.Http2Stream$StreamTimeout) okhttp3.internal.http2.Http2Stream.StreamTimeout.exitAndThrowIfTimedOut():void type: VIRTUAL A[Catch:\{ all \-\> 0x008a \}]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0089|0x0089: THROW  (r12 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x008a \}]\l}"];
Node_36 [shape=record,label="{36\:\ 0x008a|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x008a: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x008a \}]\l}"];
Node_37 [shape=record,label="{37\:\ 0x008b|0x008b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x008a \}, TRY_LEAVE]\l}"];
Node_38 [shape=record,label="{38\:\ 0x008c|0x008c: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http2.Http2Stream.FramingSink.emitFrame((r11 'this' I:okhttp3.internal.http2.Http2Stream$FramingSink A[IMMUTABLE_TYPE, THIS]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_36;
Node_3 -> Node_4;
Node_3 -> Node_36;
Node_4 -> Node_5;
Node_4 -> Node_32;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_4;
Node_15 -> Node_16;
Node_15 -> Node_36;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
}

