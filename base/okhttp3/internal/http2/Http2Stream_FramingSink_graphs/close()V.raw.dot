digraph "CFG forokhttp3.internal.http2.Http2Stream.FramingSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:boolean) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.closed boolean A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0009 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: RETURN   A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x000c: IGET  (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.sink okhttp3.internal.http2.Http2Stream$FramingSink \l0x000e: IGET  (r0 I:boolean) = (r0 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.finished boolean \l0x0010: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IGET  (r0 I:okio.Buffer) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer \l0x0015: INVOKE  (r2 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0019: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x001b: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x002d \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IGET  (r0 I:okio.Buffer) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.sendBuffer okio.Buffer \l0x0021: INVOKE  (r2 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0025: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: INVOKE  \l  (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l  (r1 I:boolean)\l okhttp3.internal.http2.Http2Stream.FramingSink.emitFrame(boolean):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x002f: IGET  (r2 I:okhttp3.internal.http2.Http2Connection) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x0031: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x0033: IGET  (r3 I:int) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.id int \l0x0035: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0036: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0039: INVOKE  \l  (r2 I:okhttp3.internal.http2.Http2Connection)\l  (r3 I:int)\l  (r4 I:boolean)\l  (r5 I:okio.Buffer)\l  (r6 I:long)\l okhttp3.internal.http2.Http2Connection.writeData(int, boolean, okio.Buffer, long):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IGET  (r2 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|SYNTHETIC\lSplitter:B:18:0x003f\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x003f\l|0x003f: IPUT  \l  (r1 I:boolean)\l  (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink)\l okhttp3.internal.http2.Http2Stream.FramingSink.closed boolean A[Catch:\{ all \-\> 0x004f \}, TRY_ENTER]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004f \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x0044: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.connection okhttp3.internal.http2.Http2Connection \l0x0046: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.flush():void type: VIRTUAL \l0x0049: IGET  (r0 I:okhttp3.internal.http2.Http2Stream) = (r8 I:okhttp3.internal.http2.Http2Stream$FramingSink) okhttp3.internal.http2.Http2Stream.FramingSink.this$0 okhttp3.internal.http2.Http2Stream \l0x004b: INVOKE  (r0 I:okhttp3.internal.http2.Http2Stream) okhttp3.internal.http2.Http2Stream.cancelStreamIfNecessary():void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|ExcHandler: all null\lSplitter:B:18:0x003f\l|0x004f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|SYNTHETIC\lSplitter:B:24:0x0050\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0050\l|0x0050: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004f \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0052|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0052: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_28 [shape=record,label="{28\:\ 0x0053|SYNTHETIC\lSplitter:B:28:0x0053\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0053\l|0x0053: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0054|0x0054: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http2.Http2Stream.FramingSink.close((r8 'this' I:okhttp3.internal.http2.Http2Stream$FramingSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_27;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_23;
Node_25 -> Node_26;
Node_25 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_27;
Node_29 -> Node_30;
Node_29 -> Node_27;
}

