digraph "CFG forokhttp3.internal.http2.Http2Connection.Builder.socket(Ljava\/net\/Socket;)Lokhttp3\/internal\/http2\/Http2Connection$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.net.SocketAddress) = (r4 I:java.net.Socket) java.net.Socket.getRemoteSocketAddress():java.net.SocketAddress type: VIRTUAL \l0x0004: CHECK_CAST  (r0 I:java.net.InetSocketAddress) = (java.net.InetSocketAddress) (r0 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r0 I:java.lang.String) = (r0 I:java.net.InetSocketAddress) java.net.InetSocketAddress.getHostName():java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r1 I:okio.Source) = (r4 I:java.net.Socket) okio.Okio.source(java.net.Socket):okio.Source type: STATIC \l0x000e: INVOKE  (r1 I:okio.BufferedSource) = (r1 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0012: INVOKE  (r2 I:okio.Sink) = (r4 I:java.net.Socket) okio.Okio.sink(java.net.Socket):okio.Sink type: STATIC \l0x0016: INVOKE  (r2 I:okio.BufferedSink) = (r2 I:okio.Sink) okio.Okio.buffer(okio.Sink):okio.BufferedSink type: STATIC \l0x001a: INVOKE  (r4 I:okhttp3.internal.http2.Http2Connection$Builder) = \l  (r3 I:okhttp3.internal.http2.Http2Connection$Builder)\l  (r4 I:java.net.Socket)\l  (r0 I:java.lang.String)\l  (r1 I:okio.BufferedSource)\l  (r2 I:okio.BufferedSink)\l okhttp3.internal.http2.Http2Connection.Builder.socket(java.net.Socket, java.lang.String, okio.BufferedSource, okio.BufferedSink):okhttp3.internal.http2.Http2Connection$Builder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: RETURN  (r4 I:okhttp3.internal.http2.Http2Connection$Builder) \l}"];
MethodNode[shape=record,label="{public okhttp3.internal.http2.Http2Connection$Builder okhttp3.internal.http2.Http2Connection.Builder.socket((r3 'this' I:okhttp3.internal.http2.Http2Connection$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

