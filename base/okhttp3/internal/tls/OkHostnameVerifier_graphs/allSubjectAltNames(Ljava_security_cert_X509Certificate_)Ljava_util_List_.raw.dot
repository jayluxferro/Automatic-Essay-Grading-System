digraph "CFG forokhttp3.internal.tls.OkHostnameVerifier.allSubjectAltNames(Ljava\/security\/cert\/X509Certificate;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r0 I:java.util.List) = (r4 I:java.security.cert.X509Certificate), (r0 I:int) okhttp3.internal.tls.OkHostnameVerifier.getSubjectAltNames(java.security.cert.X509Certificate, int):java.util.List type: STATIC \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0006: INVOKE  (r4 I:java.util.List) = (r4 I:java.security.cert.X509Certificate), (r1 I:int) okhttp3.internal.tls.OkHostnameVerifier.getSubjectAltNames(java.security.cert.X509Certificate, int):java.util.List type: STATIC \l0x000a: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0010: INVOKE  (r3 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0014: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0015: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0018: INVOKE  (r1 I:java.util.List), (r0 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l0x001b: INVOKE  (r1 I:java.util.List), (r4 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: RETURN  (r1 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<java.lang.String\> okhttp3.internal.tls.OkHostnameVerifier.allSubjectAltNames((r4 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/security\/cert\/X509Certificate;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

