digraph "CFG forokhttp3.internal.tls.OkHostnameVerifier.verify(Ljava\/lang\/String;Ljavax\/net\/ssl\/SSLSession;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r3 I:java.security.cert.Certificate[]) = (r3 I:javax.net.ssl.SSLSession) javax.net.ssl.SSLSession.getPeerCertificates():java.security.cert.Certificate[] type: INTERFACE A[Catch:\{ SSLException \-\> 0x000e \}, TRY_ENTER]\l0x0005: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) A[Catch:\{ SSLException \-\> 0x000e \}]\l0x0007: CHECK_CAST  (r3 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ SSLException \-\> 0x000e \}]\l0x0009: INVOKE  (r2 I:boolean) = \l  (r1 I:okhttp3.internal.tls.OkHostnameVerifier)\l  (r2 I:java.lang.String)\l  (r3 I:java.security.cert.X509Certificate)\l okhttp3.internal.tls.OkHostnameVerifier.verify(java.lang.String, java.security.cert.X509Certificate):boolean type: VIRTUAL A[Catch:\{ SSLException \-\> 0x000e \}]\l0x000c: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: SSLException null\lSplitter:B:1:0x0001\l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.tls.OkHostnameVerifier.verify((r1 'this' I:okhttp3.internal.tls.OkHostnameVerifier A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:javax.net.ssl.SSLSession A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_5 -> Node_4;
}

