digraph "CFG forokhttp3.internal.tls.OkHostnameVerifier.getSubjectAltNames(Ljava\/security\/cert\/X509Certificate;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: INVOKE  (r4 I:java.util.Collection) = (r4 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectAlternativeNames():java.util.Collection type: VIRTUAL A[Catch:\{ CertificateParsingException \-\> 0x0048 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r4 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r4 I:java.util.List\<java.lang.String\>) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0047 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x001e: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: INVOKE  (r2 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x0026: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:14:0x002a A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: GOTO  \-\> 0x0014 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x002b: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x002f: CHECK_CAST  (r2 I:java.lang.Integer) = (java.lang.Integer) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0034 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: GOTO  \-\> 0x0014 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x003b: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l0x003f: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 A[Catch:\{ CertificateParsingException \-\> 0x0048 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ CertificateParsingException \-\> 0x0048 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0048|0x0048: INVOKE  (r4 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lExcHandler: CertificateParsingException null\lSplitter:B:1:0x0005\l}"];
Node_26 [shape=record,label="{26\:\ 0x004c|0x004c: RETURN  (r4 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<java.lang.String\> okhttp3.internal.tls.OkHostnameVerifier.getSubjectAltNames((r4 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/security\/cert\/X509Certificate;, I), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_7;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_7;
Node_17 -> Node_18;
Node_18 -> Node_7;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_7;
Node_20 -> Node_21[style=dashed];
Node_21 -> Node_7;
Node_24 -> Node_26;
Node_25 -> Node_24;
}

