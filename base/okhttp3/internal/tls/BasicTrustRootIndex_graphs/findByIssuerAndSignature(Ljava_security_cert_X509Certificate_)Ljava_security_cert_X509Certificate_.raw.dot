digraph "CFG forokhttp3.internal.tls.BasicTrustRootIndex.findByIssuerAndSignature(Ljava\/security\/cert\/X509Certificate;)Ljava\/security\/cert\/X509Certificate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:javax.security.auth.x500.X500Principal) = (r5 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getIssuerX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL \l0x0004: IGET  (r1 I:java.util.Map\<javax.security.auth.x500.X500Principal, java.util.Set\<java.security.cert.X509Certificate\>\>) = (r4 I:okhttp3.internal.tls.BasicTrustRootIndex) okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts java.util.Map \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x000a: CHECK_CAST  (r0 I:java.util.Set) = (java.util.Set) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:java.security.cert.X509Certificate) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:8:0x0024\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r2 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r2 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  (r3 I:java.security.PublicKey) = (r2 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getPublicKey():java.security.PublicKey type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|SYNTHETIC\lSplitter:B:8:0x0024\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0024\l|0x0024: INVOKE  \l  (r5 I:java.security.cert.X509Certificate)\l  (r3 I:java.security.PublicKey)\l java.security.cert.X509Certificate.verify(java.security.PublicKey):void type: VIRTUAL A[Catch:\{ Exception \-\> 0x0014 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: RETURN  (r2 I:java.security.cert.X509Certificate) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: RETURN  (r1 I:java.security.cert.X509Certificate) \l}"];
MethodNode[shape=record,label="{public java.security.cert.X509Certificate okhttp3.internal.tls.BasicTrustRootIndex.findByIssuerAndSignature((r4 'this' I:okhttp3.internal.tls.BasicTrustRootIndex A[IMMUTABLE_TYPE, THIS]), (r5 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_9 -> Node_5;
}

