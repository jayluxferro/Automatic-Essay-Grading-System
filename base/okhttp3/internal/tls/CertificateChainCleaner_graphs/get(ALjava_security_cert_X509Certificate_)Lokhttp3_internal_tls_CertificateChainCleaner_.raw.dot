digraph "CFG forokhttp3.internal.tls.CertificateChainCleaner.get([Ljava\/security\/cert\/X509Certificate;)Lokhttp3\/internal\/tls\/CertificateChainCleaner;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.internal.tls.BasicCertificateChainCleaner) =  okhttp3.internal.tls.BasicCertificateChainCleaner \l0x0002: NEW_INSTANCE  (r1 I:okhttp3.internal.tls.BasicTrustRootIndex) =  okhttp3.internal.tls.BasicTrustRootIndex \l0x0004: INVOKE  \l  (r1 I:okhttp3.internal.tls.BasicTrustRootIndex)\l  (r2 I:java.security.cert.X509Certificate[])\l okhttp3.internal.tls.BasicTrustRootIndex.\<init\>(java.security.cert.X509Certificate[]):void type: DIRECT \l0x0007: INVOKE  \l  (r0 I:okhttp3.internal.tls.BasicCertificateChainCleaner)\l  (r1 I:okhttp3.internal.tls.TrustRootIndex)\l okhttp3.internal.tls.BasicCertificateChainCleaner.\<init\>(okhttp3.internal.tls.TrustRootIndex):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: RETURN  (r0 I:okhttp3.internal.tls.CertificateChainCleaner) \l}"];
MethodNode[shape=record,label="{public static okhttp3.internal.tls.CertificateChainCleaner okhttp3.internal.tls.CertificateChainCleaner.get((r2 I:java.security.cert.X509Certificate[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

