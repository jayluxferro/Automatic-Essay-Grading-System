digraph "CFG forokhttp3.internal.tls.BasicCertificateChainCleaner.clean(Ljava\/util\/List;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayDeque r8 = new java.util.ArrayDeque(r7)\ljava.util.ArrayList r7 = new java.util.ArrayList()\lr7.add(r8.removeFirst())\lr0 = 0\lr1 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v2 int) = (r0v1 int), (r0v4 int) binds: [B:0:0x0000, B:20:0x005f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v3 boolean) binds: [B:0:0x0000, B:20:0x005f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:20:0x005f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|if (r0 \>= 9) goto L_0x007c\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|java.security.cert.X509Certificate r2 = (java.security.cert.X509Certificate) r7.get(r7.size() \- 1)\ljava.security.cert.X509Certificate r4 = r6.trustRootIndex.findByIssuerAndSignature(r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|if (r4 == null) goto L_0x0043\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b}"];
Node_6 [shape=record,label="{6\:\ 0x002f|if (r7.size() \> 1) goto L_0x0037\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031}"];
Node_8 [shape=record,label="{8\:\ 0x0035|if (r2.equals(r4) != false) goto L_0x003a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|r7.add(r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a}"];
Node_11 [shape=record,label="{11\:\ 0x003e|if (verifySignature(r4, r4) == false) goto L_0x0041\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|return r7\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|r1 = true\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|java.util.Iterator r3 = r8.iterator()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|LOOP_START\lLOOP:1: B:15:0x0047\-\>B:18:0x0057\l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|if (r3.hasNext() == false) goto L_0x0062\l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|java.security.cert.X509Certificate r4 = (java.security.cert.X509Certificate) r3.next()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|LOOP_END\lLOOP:1: B:15:0x0047\-\>B:18:0x0057\l|if (verifySignature(r2, r4) == false) goto L_0x0047\l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|r3.remove()\lr7.add(r4)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|LOOP_END\lPHI: r1 \l  PHI: (r1v3 boolean) = (r1v1 boolean), (r1v6 boolean) binds: [B:30:0x005f, B:31:0x005f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:20:0x005f\l|int r0 = r0 + 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|if (r1 == false) goto L_0x0065\l}"];
Node_22 [shape=record,label="{22\:\ 0x0064|RETURN\l|return r7\l}"];
Node_23 [shape=record,label="{23\:\ 0x0065|java.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(\"Failed to find a trusted cert that signed \")\lr8.append(r2)\l}"];
Node_24 [shape=record,label="{24\:\ 0x007b|throw new javax.net.ssl.SSLPeerUnverifiedException(r8.toString())\l}"];
Node_25 [shape=record,label="{25\:\ 0x007c|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Certificate chain too long: \")\lr0.append(r7)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0092|throw new javax.net.ssl.SSLPeerUnverifiedException(r0.toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x0062|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x007c|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0040|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x005f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x005f|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0059|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.util.List\<java.security.cert.Certificate\> okhttp3.internal.tls.BasicCertificateChainCleaner.clean((r6v0 'this' okhttp3.internal.tls.BasicCertificateChainCleaner A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_28;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_29[style=dashed];
Node_13 -> Node_31;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_18 -> Node_32[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_1;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_21;
Node_28 -> Node_25;
Node_29 -> Node_12;
Node_30 -> Node_20;
Node_31 -> Node_20;
Node_32 -> Node_19;
}

