digraph "CFG forokhttp3.internal.tls.BasicCertificateChainCleaner.clean(Ljava\/util\/List;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r8 I:java.util.ArrayDeque) =  java.util.ArrayDeque \l0x0002: INVOKE  (r8 I:java.util.ArrayDeque), (r7 I:java.util.Collection) java.util.ArrayDeque.\<init\>(java.util.Collection):void type: DIRECT \l0x0005: NEW_INSTANCE  (r7 I:java.util.ArrayList) =  java.util.ArrayList \l0x0007: INVOKE  (r7 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r8 I:java.util.Deque) java.util.Deque.removeFirst():java.lang.Object type: INTERFACE \l0x000e: INVOKE  (r7 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:25:0x007c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r2 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x001b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001c: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001d: INVOKE  (r2 I:java.lang.Object) = (r7 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r2 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r2 I:?[OBJECT, ARRAY]) \l0x0023: IGET  (r4 I:okhttp3.internal.tls.TrustRootIndex) = (r6 I:okhttp3.internal.tls.BasicCertificateChainCleaner) okhttp3.internal.tls.BasicCertificateChainCleaner.trustRootIndex okhttp3.internal.tls.TrustRootIndex \l0x0025: INVOKE  (r4 I:java.security.cert.X509Certificate) = \l  (r4 I:okhttp3.internal.tls.TrustRootIndex)\l  (r2 I:java.security.cert.X509Certificate)\l okhttp3.internal.tls.TrustRootIndex.findByIssuerAndSignature(java.security.cert.X509Certificate):java.security.cert.X509Certificate type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: INVOKE  (r1 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: INVOKE  (r1 I:boolean) = \l  (r2 I:java.security.cert.X509Certificate)\l  (r4 I:java.lang.Object)\l java.security.cert.X509Certificate.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: INVOKE  (r7 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: INVOKE  (r1 I:boolean) = \l  (r6 I:okhttp3.internal.tls.BasicCertificateChainCleaner)\l  (r4 I:java.security.cert.X509Certificate)\l  (r4 I:java.security.cert.X509Certificate)\l okhttp3.internal.tls.BasicCertificateChainCleaner.verifySignature(java.security.cert.X509Certificate, java.security.cert.X509Certificate):boolean type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: RETURN  (r7 I:java.util.List\<java.security.cert.Certificate\>) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: INVOKE  (r3 I:java.util.Iterator) = (r8 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0062 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0051: CHECK_CAST  (r4 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r4 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  (r5 I:boolean) = \l  (r6 I:okhttp3.internal.tls.BasicCertificateChainCleaner)\l  (r2 I:java.security.cert.X509Certificate)\l  (r4 I:java.security.cert.X509Certificate)\l okhttp3.internal.tls.BasicCertificateChainCleaner.verifySignature(java.security.cert.X509Certificate, java.security.cert.X509Certificate):boolean type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0047 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|0x0059: INVOKE  (r3 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE \l0x005c: INVOKE  (r7 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0065 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0064|0x0064: RETURN  (r7 I:java.util.List\<java.security.cert.Certificate\>) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0065|0x0065: NEW_INSTANCE  (r7 I:javax.net.ssl.SSLPeerUnverifiedException) =  javax.net.ssl.SSLPeerUnverifiedException \l0x0067: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0069: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006c: CONST_STR  (r0 I:java.lang.String) =  \"Failed to find a trusted cert that signed \" \l0x006e: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0071: INVOKE  (r8 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0074: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0078: INVOKE  \l  (r7 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r8 I:java.lang.String)\l javax.net.ssl.SSLPeerUnverifiedException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x007b|0x007b: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x007c|0x007c: NEW_INSTANCE  (r8 I:javax.net.ssl.SSLPeerUnverifiedException) =  javax.net.ssl.SSLPeerUnverifiedException \l0x007e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0080: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0083: CONST_STR  (r1 I:java.lang.String) =  \"Certificate chain too long: \" \l0x0085: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0088: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x008b: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008f: INVOKE  \l  (r8 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r7 I:java.lang.String)\l javax.net.ssl.SSLPeerUnverifiedException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0092|0x0092: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.List\<java.security.cert.Certificate\> okhttp3.internal.tls.BasicCertificateChainCleaner.clean((r6 'this' I:okhttp3.internal.tls.BasicCertificateChainCleaner A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

