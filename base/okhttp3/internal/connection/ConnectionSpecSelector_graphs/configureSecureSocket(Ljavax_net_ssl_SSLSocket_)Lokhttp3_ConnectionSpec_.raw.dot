digraph "CFG forokhttp3.internal.connection.ConnectionSpecSelector.configureSecureSocket(Ljavax\/net\/ssl\/SSLSocket;)Lokhttp3\/ConnectionSpec;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex int \l0x0002: IGET  (r1 I:java.util.List\<okhttp3.ConnectionSpec\>) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs java.util.List \l0x0004: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r2 I:java.util.List\<okhttp3.ConnectionSpec\>) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs java.util.List \l0x000c: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r2 I:okhttp3.ConnectionSpec) = (okhttp3.ConnectionSpec) (r2 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r3 I:boolean) = \l  (r2 I:okhttp3.ConnectionSpec)\l  (r5 I:javax.net.ssl.SSLSocket)\l okhttp3.ConnectionSpec.isCompatible(javax.net.ssl.SSLSocket):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001a: IPUT  \l  (r0 I:int)\l  (r4 I:okhttp3.internal.connection.ConnectionSpecSelector)\l okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex int \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: INVOKE  (r0 I:boolean) = \l  (r4 I:okhttp3.internal.connection.ConnectionSpecSelector)\l  (r5 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible(javax.net.ssl.SSLSocket):boolean type: DIRECT \l0x0027: IPUT  \l  (r0 I:boolean)\l  (r4 I:okhttp3.internal.connection.ConnectionSpecSelector)\l okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible boolean \l0x0029: SGET  (r0 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x002b: IGET  (r1 I:boolean) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.isFallback boolean \l0x002d: INVOKE  \l  (r0 I:okhttp3.internal.Internal)\l  (r2 I:okhttp3.ConnectionSpec)\l  (r5 I:javax.net.ssl.SSLSocket)\l  (r1 I:boolean)\l okhttp3.internal.Internal.apply(okhttp3.ConnectionSpec, javax.net.ssl.SSLSocket, boolean):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: RETURN  (r2 I:okhttp3.ConnectionSpec) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: NEW_INSTANCE  (r0 I:java.net.UnknownServiceException) =  java.net.UnknownServiceException \l0x0033: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0035: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0038: CONST_STR  (r2 I:java.lang.String) =  \"Unable to find acceptable protocols. isFallback=\" \l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: IGET  (r2 I:boolean) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.isFallback boolean \l0x003f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:boolean) java.lang.StringBuilder.append(boolean):java.lang.StringBuilder type: VIRTUAL \l0x0042: CONST_STR  (r2 I:java.lang.String) =  \", modes=\" \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: IGET  (r2 I:java.util.List\<okhttp3.ConnectionSpec\>) = (r4 I:okhttp3.internal.connection.ConnectionSpecSelector) okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs java.util.List \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x004c: CONST_STR  (r2 I:java.lang.String) =  \", supported protocols=\" \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r5 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledProtocols():java.lang.String[] type: VIRTUAL \l0x0055: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object[]) java.util.Arrays.toString(java.lang.Object[]):java.lang.String type: STATIC \l0x0059: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  \l  (r0 I:java.net.UnknownServiceException)\l  (r5 I:java.lang.String)\l java.net.UnknownServiceException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0063|0x0063: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.ConnectionSpec okhttp3.internal.connection.ConnectionSpecSelector.configureSecureSocket((r4 'this' I:okhttp3.internal.connection.ConnectionSpecSelector A[IMMUTABLE_TYPE, THIS]), (r5 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

