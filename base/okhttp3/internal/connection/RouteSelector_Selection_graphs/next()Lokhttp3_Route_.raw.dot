digraph "CFG forokhttp3.internal.connection.RouteSelector.Selection.next()Lokhttp3\/Route;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.util.List\<okhttp3.Route\>) = (r3 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.routes java.util.List \l0x0008: IGET  (r1 I:int) = (r3 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.nextRouteIndex int \l0x000a: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x000c: IPUT  \l  (r2 I:int)\l  (r3 I:okhttp3.internal.connection.RouteSelector$Selection)\l okhttp3.internal.connection.RouteSelector.Selection.nextRouteIndex int \l0x000e: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r0 I:okhttp3.Route) = (okhttp3.Route) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r0 I:okhttp3.Route) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0017: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.Route okhttp3.internal.connection.RouteSelector.Selection.next((r3 'this' I:okhttp3.internal.connection.RouteSelector$Selection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

