digraph "CFG forokhttp3.internal.connection.RouteSelector.resetNextInetSocketAddress(Ljava\/net\/Proxy;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.inetSocketAddresses = new java.util.ArrayList()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r7.type() == java.net.Proxy.Type.DIRECT) goto L_0x0046\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f}"];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r7.type() != java.net.Proxy.Type.SOCKS) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|java.net.SocketAddress r0 = r7.address()\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|if ((r0 instanceof java.net.InetSocketAddress) == false) goto L_0x002b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|java.net.InetSocketAddress r0 = (java.net.InetSocketAddress) r0\ljava.lang.String r1 = getHostString(r0)\lint r0 = r0.getPort()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Proxy.address() is not an InetSocketAddress: \")\lr1.append(r0.getClass())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|java.lang.String r1 = r6.address.url().host()\lint r0 = r6.address.url().port()\l}"];
Node_10 [shape=record,label="{10\:\ 0x005a|PHI: r0 r1 \l  PHI: (r0v2 int) = (r0v12 int), (r0v18 int) binds: [B:9:0x0046, B:6:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 java.lang.String) = (r1v6 java.lang.String), (r1v10 java.lang.String) binds: [B:9:0x0046, B:6:0x0020] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x005b|if (r0 \< 1) goto L_0x00cd\l}"];
Node_12 [shape=record,label="{12\:\ 0x005d}"];
Node_13 [shape=record,label="{13\:\ 0x0060|if (r0 \> 65535) goto L_0x00cd\l}"];
Node_14 [shape=record,label="{14\:\ 0x0062}"];
Node_15 [shape=record,label="{15\:\ 0x0068|if (r7.type() != java.net.Proxy.Type.SOCKS) goto L_0x0074\l}"];
Node_16 [shape=record,label="{16\:\ 0x006a|r6.inetSocketAddresses.add(java.net.InetSocketAddress.createUnresolved(r1, r0))\l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|r6.eventListener.dnsStart(r6.call, r1)\ljava.util.List r7 = r6.address.dns().lookup(r1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0089|if (r7.isEmpty() != false) goto L_0x00ad\l}"];
Node_19 [shape=record,label="{19\:\ 0x008b|r6.eventListener.dnsEnd(r6.call, r1, r7)\lr1 = 0\lint r2 = r7.size()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0097|LOOP_START\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v5 int) binds: [B:19:0x008b, B:21:0x0099] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:20:0x0097\-\>B:21:0x0099\l|if (r1 \>= r2) goto L_0x00ac\l}"];
Node_21 [shape=record,label="{21\:\ 0x0099|LOOP_END\lLOOP:0: B:20:0x0097\-\>B:21:0x0099\l|r6.inetSocketAddresses.add(new java.net.InetSocketAddress(r7.get(r1), r0))\lint r1 = r1 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x00ad|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r6.address.dns())\lr0.append(\" returned no addresses for \")\lr0.append(r1)\l}"];
Node_23 [shape=record,label="{23\:\ 0x00cc|throw new java.net.UnknownHostException(r0.toString())\l}"];
Node_24 [shape=record,label="{24\:\ 0x00cd|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"No route to \")\lr2.append(r1)\lr2.append(\":\")\lr2.append(r0)\lr2.append(\"; port is out of range\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x00f0|throw new java.net.SocketException(r2.toString())\l}"];
Node_26 [shape=record,label="{26\:\ 0x00ac|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.RouteSelector.resetNextInetSocketAddress((r6v0 'this' okhttp3.internal.connection.RouteSelector A[IMMUTABLE_TYPE, THIS]), (r7v0 java.net.Proxy A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_24;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_20;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_28;
}

