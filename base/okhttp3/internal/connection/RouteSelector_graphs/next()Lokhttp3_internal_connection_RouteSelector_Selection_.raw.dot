digraph "CFG forokhttp3.internal.connection.RouteSelector.next()Lokhttp3\/internal\/connection\/RouteSelector$Selection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0008: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r1 I:boolean) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.hasNextProxy():boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0047 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r1 I:java.net.Proxy) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.nextProxy():java.net.Proxy type: DIRECT \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: IGET  (r3 I:java.util.List\<java.net.InetSocketAddress\>) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.inetSocketAddresses java.util.List \l0x0018: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: NEW_INSTANCE  (r4 I:okhttp3.Route) =  okhttp3.Route \l0x0020: IGET  (r5 I:okhttp3.Address) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.address okhttp3.Address \l0x0022: IGET  (r6 I:java.util.List\<java.net.InetSocketAddress\>) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.inetSocketAddresses java.util.List \l0x0024: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0028: CHECK_CAST  (r6 I:java.net.InetSocketAddress) = (java.net.InetSocketAddress) (r6 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  \l  (r4 I:okhttp3.Route)\l  (r5 I:okhttp3.Address)\l  (r1 I:java.net.Proxy)\l  (r6 I:java.net.InetSocketAddress)\l okhttp3.Route.\<init\>(okhttp3.Address, java.net.Proxy, java.net.InetSocketAddress):void type: DIRECT \l0x002d: IGET  (r5 I:okhttp3.internal.connection.RouteDatabase) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.routeDatabase okhttp3.internal.connection.RouteDatabase \l0x002f: INVOKE  (r5 I:boolean) = \l  (r5 I:okhttp3.internal.connection.RouteDatabase)\l  (r4 I:okhttp3.Route)\l okhttp3.internal.connection.RouteDatabase.shouldPostpone(okhttp3.Route):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r5 I:java.util.List\<okhttp3.Route\>) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.postponedRoutes java.util.List \l0x0037: INVOKE  (r5 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0057 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: IGET  (r1 I:java.util.List\<okhttp3.Route\>) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.postponedRoutes java.util.List \l0x004f: INVOKE  (r0 I:java.util.List), (r1 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l0x0052: IGET  (r1 I:java.util.List\<okhttp3.Route\>) = (r7 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.postponedRoutes java.util.List \l0x0054: INVOKE  (r1 I:java.util.List) java.util.List.clear():void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: NEW_INSTANCE  (r1 I:okhttp3.internal.connection.RouteSelector$Selection) =  okhttp3.internal.connection.RouteSelector$Selection \l0x0059: INVOKE  \l  (r1 I:okhttp3.internal.connection.RouteSelector$Selection)\l  (r0 I:java.util.List)\l okhttp3.internal.connection.RouteSelector.Selection.\<init\>(java.util.List):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: RETURN  (r1 I:okhttp3.internal.connection.RouteSelector$Selection) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x005f: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|0x0062: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.internal.connection.RouteSelector$Selection okhttp3.internal.connection.RouteSelector.next((r7 'this' I:okhttp3.internal.connection.RouteSelector A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_6;
Node_12 -> Node_13;
Node_13 -> Node_3;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

