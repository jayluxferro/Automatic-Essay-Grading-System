digraph "CFG forokhttp3.internal.connection.RealConnection.createTunnel(IILokhttp3\/Request;Lokhttp3\/HttpUrl;)Lokhttp3\/Request;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"CONNECT \" \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: INVOKE  (r10 I:java.lang.String) = (r10 I:okhttp3.HttpUrl), (r1 I:boolean) okhttp3.internal.Util.hostHeader(okhttp3.HttpUrl, boolean):java.lang.String type: STATIC \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0012: CONST_STR  (r10 I:java.lang.String) =  \" HTTP\/1.1\" \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:okhttp3.internal.http1.Http1Codec) =  okhttp3.internal.http1.Http1Codec \l0x001d: IGET  (r1 I:okio.BufferedSource) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x001f: IGET  (r2 I:okio.BufferedSink) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0021: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec)\l  (r3 I:okhttp3.OkHttpClient)\l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l  (r1 I:okio.BufferedSource)\l  (r2 I:okio.BufferedSink)\l okhttp3.internal.http1.Http1Codec.\<init\>(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation, okio.BufferedSource, okio.BufferedSink):void type: DIRECT \l0x0025: IGET  (r1 I:okio.BufferedSource) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x0027: INVOKE  (r1 I:okio.Timeout) = (r1 I:okio.BufferedSource) okio.BufferedSource.timeout():okio.Timeout type: INTERFACE \l0x002b: CAST  (r4 I:long) = (long) (r7 I:int) \l0x002c: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x002e: INVOKE  \l  (r1 I:okio.Timeout)\l  (r4 I:long)\l  (r2 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l0x0031: IGET  (r1 I:okio.BufferedSink) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0033: INVOKE  (r1 I:okio.Timeout) = (r1 I:okio.BufferedSink) okio.BufferedSink.timeout():okio.Timeout type: INTERFACE \l0x0037: CAST  (r4 I:long) = (long) (r8 I:int) \l0x0038: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x003a: INVOKE  \l  (r1 I:okio.Timeout)\l  (r4 I:long)\l  (r2 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l0x003d: INVOKE  (r1 I:okhttp3.Headers) = (r9 I:okhttp3.Request) okhttp3.Request.headers():okhttp3.Headers type: VIRTUAL \l0x0041: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec)\l  (r1 I:okhttp3.Headers)\l  (r10 I:java.lang.String)\l okhttp3.internal.http1.Http1Codec.writeRequest(okhttp3.Headers, java.lang.String):void type: VIRTUAL \l0x0044: INVOKE  (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.finishRequest():void type: VIRTUAL \l0x0047: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0048: INVOKE  (r1 I:okhttp3.Response$Builder) = (r0 I:okhttp3.internal.http1.Http1Codec), (r1 I:boolean) okhttp3.internal.http1.Http1Codec.readResponseHeaders(boolean):okhttp3.Response$Builder type: VIRTUAL \l0x004c: INVOKE  (r9 I:okhttp3.Response$Builder) = (r1 I:okhttp3.Response$Builder), (r9 I:okhttp3.Request) okhttp3.Response.Builder.request(okhttp3.Request):okhttp3.Response$Builder type: VIRTUAL \l0x0050: INVOKE  (r9 I:okhttp3.Response) = (r9 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l0x0054: INVOKE  (r1 I:long) = (r9 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.contentLength(okhttp3.Response):long type: STATIC \l0x0058: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l0x005a: CMP_L  (r4 I:int) = (r1 I:long), (r4 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x005c|0x005c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0060 \l}"];
Node_3 [shape=record,label="{3\:\ 0x005e|0x005e: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0060|0x0060: INVOKE  (r0 I:okio.Source) = (r0 I:okhttp3.internal.http1.Http1Codec), (r1 I:long) okhttp3.internal.http1.Http1Codec.newFixedLengthSource(long):okio.Source type: VIRTUAL \l0x0064: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0067: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0069: INVOKE  \l  (r0 I:okio.Source)\l  (r1 I:int)\l  (r2 I:java.util.concurrent.TimeUnit)\l okhttp3.internal.Util.skipAll(okio.Source, int, java.util.concurrent.TimeUnit):boolean type: STATIC \l0x006c: INVOKE  (r0 I:okio.Source) okio.Source.close():void type: INTERFACE \l0x006f: INVOKE  (r0 I:int) = (r9 I:okhttp3.Response) okhttp3.Response.code():int type: VIRTUAL \l0x0073: CONST  (r1 I:?[int, float, short, byte, char]) = (200(0xc8, float:2.8E\-43) ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0075|0x0075: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x00c2 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0077|0x0077: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (407(0x197, float:5.7E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0079|0x0079: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x00a7 \l}"];
Node_8 [shape=record,label="{8\:\ 0x007b|0x007b: IGET  (r0 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x007d: INVOKE  (r0 I:okhttp3.Address) = (r0 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0081: INVOKE  (r0 I:okhttp3.Authenticator) = (r0 I:okhttp3.Address) okhttp3.Address.proxyAuthenticator():okhttp3.Authenticator type: VIRTUAL \l0x0085: IGET  (r1 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0087: INVOKE  (r0 I:okhttp3.Request) = \l  (r0 I:okhttp3.Authenticator)\l  (r1 I:okhttp3.Route)\l  (r9 I:okhttp3.Response)\l okhttp3.Authenticator.authenticate(okhttp3.Route, okhttp3.Response):okhttp3.Request type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x008b|0x008b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x009f \l}"];
Node_10 [shape=record,label="{10\:\ 0x008d|0x008d: CONST_STR  (r1 I:java.lang.String) =  \"close\" \l0x008f: CONST_STR  (r2 I:java.lang.String) =  \"Connection\" \l0x0091: INVOKE  (r9 I:java.lang.String) = (r9 I:okhttp3.Response), (r2 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x0095: INVOKE  (r9 I:boolean) = (r1 I:java.lang.String), (r9 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0099|0x0099: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x009c \l}"];
Node_12 [shape=record,label="{12\:\ 0x009b|0x009b: RETURN  (r0 I:okhttp3.Request) \l}"];
Node_13 [shape=record,label="{13\:\ 0x009c|0x009c: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x009f|0x009f: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x00a1: CONST_STR  (r8 I:java.lang.String) =  \"Failed to authenticate with proxy\" \l0x00a3: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a6|0x00a6: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a7|0x00a7: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x00a9: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00ab: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ae: CONST_STR  (r10 I:java.lang.String) =  \"Unexpected response code for CONNECT: \" \l0x00b0: INVOKE  (r8 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b3: INVOKE  (r9 I:int) = (r9 I:okhttp3.Response) okhttp3.Response.code():int type: VIRTUAL \l0x00b7: INVOKE  (r8 I:java.lang.StringBuilder), (r9 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00ba: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00be: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x00c1|0x00c1: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x00c2|0x00c2: IGET  (r7 I:okio.BufferedSource) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x00c4: INVOKE  (r7 I:okio.Buffer) = (r7 I:okio.BufferedSource) okio.BufferedSource.buffer():okio.Buffer type: INTERFACE \l0x00c8: INVOKE  (r7 I:boolean) = (r7 I:okio.Buffer) okio.Buffer.exhausted():boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x00cc|0x00cc: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00db \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ce|0x00ce: IGET  (r7 I:okio.BufferedSink) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x00d0: INVOKE  (r7 I:okio.Buffer) = (r7 I:okio.BufferedSink) okio.BufferedSink.buffer():okio.Buffer type: INTERFACE \l0x00d4: INVOKE  (r7 I:boolean) = (r7 I:okio.Buffer) okio.Buffer.exhausted():boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x00d8|0x00d8: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00db \l}"];
Node_22 [shape=record,label="{22\:\ 0x00da|0x00da: RETURN  (r3 I:okhttp3.Request) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00db|0x00db: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x00dd: CONST_STR  (r8 I:java.lang.String) =  \"TLS tunnel buffered too many bytes!\" \l0x00df: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x00e2|0x00e2: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okhttp3.Request okhttp3.internal.connection.RealConnection.createTunnel((r6 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
}

