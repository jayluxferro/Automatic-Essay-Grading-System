digraph "CFG forokhttp3.internal.connection.RealConnection.startHttp2(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.net.Socket) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r0 I:java.net.Socket), (r1 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL \l0x0006: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Connection$Builder) =  okhttp3.internal.http2.Http2Connection$Builder \l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Connection$Builder)\l  (r1 I:boolean)\l okhttp3.internal.http2.Http2Connection.Builder.\<init\>(boolean):void type: DIRECT \l0x000c: IGET  (r1 I:java.net.Socket) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x000e: IGET  (r2 I:okhttp3.Route) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0010: INVOKE  (r2 I:okhttp3.Address) = (r2 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0014: INVOKE  (r2 I:okhttp3.HttpUrl) = (r2 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0018: INVOKE  (r2 I:java.lang.String) = (r2 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x001c: IGET  (r3 I:okio.BufferedSource) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x001e: IGET  (r4 I:okio.BufferedSink) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0020: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection$Builder) = \l  (r0 I:okhttp3.internal.http2.Http2Connection$Builder)\l  (r1 I:java.net.Socket)\l  (r2 I:java.lang.String)\l  (r3 I:okio.BufferedSource)\l  (r4 I:okio.BufferedSink)\l okhttp3.internal.http2.Http2Connection.Builder.socket(java.net.Socket, java.lang.String, okio.BufferedSource, okio.BufferedSink):okhttp3.internal.http2.Http2Connection$Builder type: VIRTUAL \l0x0024: INVOKE  (r0 I:okhttp3.internal.http2.Http2Connection$Builder) = \l  (r0 I:okhttp3.internal.http2.Http2Connection$Builder)\l  (r5 I:okhttp3.internal.http2.Http2Connection$Listener)\l okhttp3.internal.http2.Http2Connection.Builder.listener(okhttp3.internal.http2.Http2Connection$Listener):okhttp3.internal.http2.Http2Connection$Builder type: VIRTUAL \l0x0028: INVOKE  (r6 I:okhttp3.internal.http2.Http2Connection$Builder) = \l  (r0 I:okhttp3.internal.http2.Http2Connection$Builder)\l  (r6 I:int)\l okhttp3.internal.http2.Http2Connection.Builder.pingIntervalMillis(int):okhttp3.internal.http2.Http2Connection$Builder type: VIRTUAL \l0x002c: INVOKE  (r6 I:okhttp3.internal.http2.Http2Connection) = (r6 I:okhttp3.internal.http2.Http2Connection$Builder) okhttp3.internal.http2.Http2Connection.Builder.build():okhttp3.internal.http2.Http2Connection type: VIRTUAL \l0x0030: IPUT  \l  (r6 I:okhttp3.internal.http2.Http2Connection)\l  (r5 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x0032: IGET  (r6 I:okhttp3.internal.http2.Http2Connection) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x0034: INVOKE  (r6 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.start():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0037|0x0037: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.RealConnection.startHttp2((r5 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

