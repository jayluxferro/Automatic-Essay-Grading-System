digraph "CFG forokhttp3.internal.connection.RealConnection.createTunnel(IILokhttp3\/Request;Lokhttp3\/HttpUrl;)Lokhttp3\/Request;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"CONNECT \")\lr0.append(okhttp3.internal.Util.hostHeader(r10, true))\lr0.append(\" HTTP\/1.1\")\ljava.lang.String r10 = r0.toString()\l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|LOOP_START\lPHI: r9 \l  PHI: (r9v1 okhttp3.Request) = (r9v0 okhttp3.Request), (r9v7 okhttp3.Request) binds: [B:0:0x0000, B:13:0x009c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001b\-\>B:13:0x009c\l|okhttp3.internal.http1.Http1Codec r0 = new okhttp3.internal.http1.Http1Codec((okhttp3.OkHttpClient) null, (okhttp3.internal.connection.StreamAllocation) null, r6.source, r6.sink)\lr6.source.timeout().timeout((long) r7, java.util.concurrent.TimeUnit.MILLISECONDS)\lr6.sink.timeout().timeout((long) r8, java.util.concurrent.TimeUnit.MILLISECONDS)\lr0.writeRequest(r9.headers(), r10)\lr0.finishRequest()\lokhttp3.Response r9 = r0.readResponseHeaders(false).request(r9).build()\llong r1 = okhttp3.internal.http.HttpHeaders.contentLength(r9)\l}"];
Node_2 [shape=record,label="{2\:\ 0x005c|if ((r1 \> \-1 ? 1 : (r1 == \-1 ? 0 : \-1)) != 0) goto L_0x0060\l}"];
Node_3 [shape=record,label="{3\:\ 0x005e|r1 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0060|PHI: r1 \l  PHI: (r1v11 long) = (r1v10 long), (r1v17 long) binds: [B:2:0x005c, B:3:0x005e] A[DONT_GENERATE, DONT_INLINE]\l|okio.Source r0 = r0.newFixedLengthSource(r1)\lokhttp3.internal.Util.skipAll(r0, Integer.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS)\lr0.close()\lint r0 = r9.code()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0075|if (r0 == 200) goto L_0x00c2\l}"];
Node_6 [shape=record,label="{6\:\ 0x0077}"];
Node_7 [shape=record,label="{7\:\ 0x0079|if (r0 != 407) goto L_0x00a7\l}"];
Node_8 [shape=record,label="{8\:\ 0x007b|okhttp3.Request r0 = r6.route.address().proxyAuthenticator().authenticate(r6.route, r9)\l}"];
Node_9 [shape=record,label="{9\:\ 0x008b|if (r0 == null) goto L_0x009f\l}"];
Node_10 [shape=record,label="{10\:\ 0x008d}"];
Node_11 [shape=record,label="{11\:\ 0x0099|if (\"close\".equalsIgnoreCase(r9.header(\"Connection\")) == false) goto L_0x009c\l}"];
Node_12 [shape=record,label="{12\:\ 0x009b|RETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x009c|LOOP_END\lLOOP:0: B:1:0x001b\-\>B:13:0x009c\l|r9 = r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x009f}"];
Node_15 [shape=record,label="{15\:\ 0x00a6|throw new java.io.IOException(\"Failed to authenticate with proxy\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x00a7|java.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(\"Unexpected response code for CONNECT: \")\lr8.append(r9.code())\l}"];
Node_17 [shape=record,label="{17\:\ 0x00c1|throw new java.io.IOException(r8.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x00c2}"];
Node_19 [shape=record,label="{19\:\ 0x00cc|if (r6.source.buffer().exhausted() == false) goto L_0x00db\l}"];
Node_20 [shape=record,label="{20\:\ 0x00ce}"];
Node_21 [shape=record,label="{21\:\ 0x00d8|if (r6.sink.buffer().exhausted() == false) goto L_0x00db\l}"];
Node_22 [shape=record,label="{22\:\ 0x00da|RETURN\l|return null\l}"];
Node_23 [shape=record,label="{23\:\ 0x00db}"];
Node_24 [shape=record,label="{24\:\ 0x00e2|throw new java.io.IOException(\"TLS tunnel buffered too many bytes!\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x00c2|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x009b|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a7|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x009f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private okhttp3.Request okhttp3.internal.connection.RealConnection.createTunnel((r6v0 'this' okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_25;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_27;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_28;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_26[style=dashed];
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_18;
Node_26 -> Node_12;
Node_27 -> Node_16;
Node_28 -> Node_14;
}

