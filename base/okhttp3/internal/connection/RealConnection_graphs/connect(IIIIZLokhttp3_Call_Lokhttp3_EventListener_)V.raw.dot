digraph "CFG forokhttp3.internal.connection.RealConnection.connect(IIIIZLokhttp3\/Call;Lokhttp3\/EventListener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r0 I:okhttp3.Protocol) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.protocol okhttp3.Protocol \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0151 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x000c: INVOKE  (r0 I:okhttp3.Address) = (r0 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0010: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.Address) okhttp3.Address.connectionSpecs():java.util.List type: VIRTUAL \l0x0014: NEW_INSTANCE  (r10 I:okhttp3.internal.connection.ConnectionSpecSelector) =  okhttp3.internal.connection.ConnectionSpecSelector \l0x0016: INVOKE  \l  (r10 I:okhttp3.internal.connection.ConnectionSpecSelector)\l  (r0 I:java.util.List)\l okhttp3.internal.connection.ConnectionSpecSelector.\<init\>(java.util.List):void type: DIRECT \l0x0019: IGET  (r1 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x001b: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x001f: INVOKE  (r1 I:javax.net.ssl.SSLSocketFactory) = (r1 I:okhttp3.Address) okhttp3.Address.sslSocketFactory():javax.net.ssl.SSLSocketFactory type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0074 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: SGET  (r1 I:okhttp3.ConnectionSpec) =  okhttp3.ConnectionSpec.CLEARTEXT okhttp3.ConnectionSpec \l0x0027: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0067 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x002f: INVOKE  (r0 I:okhttp3.Address) = (r0 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0033: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0037: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x003b: INVOKE  (r1 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x003f: INVOKE  (r1 I:boolean) = \l  (r1 I:okhttp3.internal.platform.Platform)\l  (r0 I:java.lang.String)\l okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(java.lang.String):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0046 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: NEW_INSTANCE  (r1 I:okhttp3.internal.connection.RouteException) =  okhttp3.internal.connection.RouteException \l0x0048: NEW_INSTANCE  (r2 I:java.net.UnknownServiceException) =  java.net.UnknownServiceException \l0x004a: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004c: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004f: CONST_STR  (r4 I:java.lang.String) =  \"CLEARTEXT communication to \" \l0x0051: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0054: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0057: CONST_STR  (r0 I:java.lang.String) =  \" not permitted by network security policy\" \l0x0059: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  \l  (r2 I:java.net.UnknownServiceException)\l  (r0 I:java.lang.String)\l java.net.UnknownServiceException.\<init\>(java.lang.String):void type: DIRECT \l0x0063: INVOKE  \l  (r1 I:okhttp3.internal.connection.RouteException)\l  (r2 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0066|0x0066: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|0x0067: NEW_INSTANCE  (r0 I:okhttp3.internal.connection.RouteException) =  okhttp3.internal.connection.RouteException \l0x0069: NEW_INSTANCE  (r1 I:java.net.UnknownServiceException) =  java.net.UnknownServiceException \l0x006b: CONST_STR  (r2 I:java.lang.String) =  \"CLEARTEXT communication not enabled for client\" \l0x006d: INVOKE  \l  (r1 I:java.net.UnknownServiceException)\l  (r2 I:java.lang.String)\l java.net.UnknownServiceException.\<init\>(java.lang.String):void type: DIRECT \l0x0070: INVOKE  \l  (r0 I:okhttp3.internal.connection.RouteException)\l  (r1 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0073|0x0073: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0074|0x0074: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0076: INVOKE  (r0 I:okhttp3.Address) = (r0 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x007a: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.Address) okhttp3.Address.protocols():java.util.List type: VIRTUAL \l0x007e: SGET  (r1 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l0x0080: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0084|0x0084: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0144 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0086|0x0086: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0087: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0088|SYNTHETIC\lSplitter:B:16:0x0088\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0088\l|0x0088: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route A[Catch:\{ IOException \-\> 0x00f9 \}, TRY_ENTER]\l0x008a: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.Route) okhttp3.Route.requiresTunnel():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x00f9 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x008e|0x008e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00a9 A[Catch:\{ IOException \-\> 0x00f9 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0090|0x0090: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x0092: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x0094: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x0096: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x0098: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x009a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x009c: INVOKE  \l  (r1 I:okhttp3.internal.connection.RealConnection)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:okhttp3.Call)\l  (r6 I:okhttp3.EventListener)\l okhttp3.internal.connection.RealConnection.connectTunnel(int, int, int, okhttp3.Call, okhttp3.EventListener):void type: DIRECT A[Catch:\{ IOException \-\> 0x00f9 \}]\l0x009f: IGET  (r0 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket A[Catch:\{ IOException \-\> 0x00f9 \}, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x00a1|0x00a1: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00a4 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a4|0x00a4: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a6: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a9|0x00a9: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ab: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ad|SYNTHETIC\lSplitter:B:24:0x00ad\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x00ad\l|0x00ad: INVOKE  \l  (r7 I:okhttp3.internal.connection.RealConnection)\l  (r13 I:int)\l  (r14 I:int)\l  (r8 I:okhttp3.Call)\l  (r9 I:okhttp3.EventListener)\l okhttp3.internal.connection.RealConnection.connectSocket(int, int, okhttp3.Call, okhttp3.EventListener):void type: DIRECT A[Catch:\{ IOException \-\> 0x00f7 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x00b0|0x00b0: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x00b2|SYNTHETIC\lSplitter:B:27:0x00b2\l}"];
Node_28 [shape=record,label="{28\:\ ?|Splitter:B:27:0x00b2\l|0x00b2: INVOKE  \l  (r7 I:okhttp3.internal.connection.RealConnection)\l  (r10 I:okhttp3.internal.connection.ConnectionSpecSelector)\l  (r15 I:int)\l  (r8 I:okhttp3.Call)\l  (r9 I:okhttp3.EventListener)\l okhttp3.internal.connection.RealConnection.establishProtocol(okhttp3.internal.connection.ConnectionSpecSelector, int, okhttp3.Call, okhttp3.EventListener):void type: DIRECT A[Catch:\{ IOException \-\> 0x00f5 \}, TRY_ENTER]\l0x00b5: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route A[Catch:\{ IOException \-\> 0x00f5 \}]\l0x00b7: INVOKE  (r0 I:java.net.InetSocketAddress) = (r0 I:okhttp3.Route) okhttp3.Route.socketAddress():java.net.InetSocketAddress type: VIRTUAL A[Catch:\{ IOException \-\> 0x00f5 \}]\l0x00bb: IGET  (r1 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route A[Catch:\{ IOException \-\> 0x00f5 \}]\l0x00bd: INVOKE  (r1 I:java.net.Proxy) = (r1 I:okhttp3.Route) okhttp3.Route.proxy():java.net.Proxy type: VIRTUAL A[Catch:\{ IOException \-\> 0x00f5 \}]\l0x00c1: IGET  (r2 I:okhttp3.Protocol) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.protocol okhttp3.Protocol A[Catch:\{ IOException \-\> 0x00f5 \}]\l0x00c3: INVOKE  \l  (r9 I:okhttp3.EventListener)\l  (r8 I:okhttp3.Call)\l  (r0 I:java.net.InetSocketAddress)\l  (r1 I:java.net.Proxy)\l  (r2 I:okhttp3.Protocol)\l okhttp3.EventListener.connectEnd(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x00f5 \}, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x00c6|0x00c6: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x00c8: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.Route) okhttp3.Route.requiresTunnel():boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x00cc|0x00cc: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00e0 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00ce|0x00ce: IGET  (r0 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d0|0x00d0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00d3 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00d3|0x00d3: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x00d5: CONST_STR  (r1 I:java.lang.String) =  \"Too many tunnel connections attempted: 21\" \l0x00d7: INVOKE  (r0 I:java.net.ProtocolException), (r1 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l0x00da: NEW_INSTANCE  (r1 I:okhttp3.internal.connection.RouteException) =  okhttp3.internal.connection.RouteException \l0x00dc: INVOKE  \l  (r1 I:okhttp3.internal.connection.RouteException)\l  (r0 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x00df|0x00df: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00e0|0x00e0: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l}"];
Node_37 [shape=record,label="{37\:\ 0x00e2|0x00e2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00f4 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00e4|0x00e4: IGET  (r1 I:okhttp3.ConnectionPool) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.connectionPool okhttp3.ConnectionPool \l}"];
Node_39 [shape=record,label="{39\:\ 0x00e6|0x00e6: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00e7|SYNTHETIC\lSplitter:B:40:0x00e7\l}"];
Node_41 [shape=record,label="{41\:\ ?|Splitter:B:40:0x00e7\l|0x00e7: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection A[Catch:\{ all \-\> 0x00f1 \}, TRY_ENTER]\l0x00e9: INVOKE  (r0 I:int) = (r0 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.maxConcurrentStreams():int type: VIRTUAL A[Catch:\{ all \-\> 0x00f1 \}]\l0x00ed: IPUT  \l  (r0 I:int)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.allocationLimit int A[Catch:\{ all \-\> 0x00f1 \}]\l}"];
Node_42 [shape=record,label="{42\:\ 0x00ef|0x00ef: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f1 \}]\l}"];
Node_43 [shape=record,label="{43\:\ 0x00f0|0x00f0: GOTO  \-\> 0x00f4 A[Catch:\{ all \-\> 0x00f1 \}]\l}"];
Node_44 [shape=record,label="{44\:\ 0x00f1|ExcHandler: all null\lSplitter:B:40:0x00e7\l|0x00f1: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x00f1 \}]\l}"];
Node_45 [shape=record,label="{45\:\ 0x00f2|0x00f2: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f1 \}, TRY_LEAVE]\l}"];
Node_46 [shape=record,label="{46\:\ 0x00f3|0x00f3: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ 0x00f4|0x00f4: RETURN   \l}"];
Node_48 [shape=record,label="{48\:\ 0x00f5|ExcHandler: IOException null\lSplitter:B:27:0x00b2\l|0x00f5: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_50 [shape=record,label="{50\:\ 0x00f7|ExcHandler: IOException null\lSplitter:B:24:0x00ad\l|0x00f7: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_52 [shape=record,label="{52\:\ 0x00f9|ExcHandler: IOException null\lSplitter:B:16:0x0088\l|0x00f9: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_53 [shape=record,label="{53\:\ 0x00fa|0x00fa: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00fc: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_54 [shape=record,label="{54\:\ 0x00fe|0x00fe: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_55 [shape=record,label="{55\:\ 0x0100|0x0100: IGET  (r1 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x0102: INVOKE  (r1 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l0x0105: IGET  (r1 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket \l0x0107: INVOKE  (r1 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l0x010a: IPUT  \l  (r11 I:java.net.Socket)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x010c: IPUT  \l  (r11 I:java.net.Socket)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket \l0x010e: IPUT  \l  (r11 I:okio.BufferedSource)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x0110: IPUT  \l  (r11 I:okio.BufferedSink)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0112: IPUT  \l  (r11 I:okhttp3.Handshake)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.handshake okhttp3.Handshake \l0x0114: IPUT  \l  (r11 I:okhttp3.Protocol)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.protocol okhttp3.Protocol \l0x0116: IPUT  \l  (r11 I:okhttp3.internal.http2.Http2Connection)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x0118: IGET  (r1 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x011a: INVOKE  (r3 I:java.net.InetSocketAddress) = (r1 I:okhttp3.Route) okhttp3.Route.socketAddress():java.net.InetSocketAddress type: VIRTUAL \l0x011e: IGET  (r1 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0120: INVOKE  (r4 I:java.net.Proxy) = (r1 I:okhttp3.Route) okhttp3.Route.proxy():java.net.Proxy type: VIRTUAL \l0x0124: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0125: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0127: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0129: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x012a: INVOKE  \l  (r1 I:okhttp3.EventListener)\l  (r2 I:okhttp3.Call)\l  (r3 I:java.net.InetSocketAddress)\l  (r4 I:java.net.Proxy)\l  (r5 I:okhttp3.Protocol)\l  (r6 I:java.io.IOException)\l okhttp3.EventListener.connectFailed(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol, java.io.IOException):void type: VIRTUAL \l}"];
Node_56 [shape=record,label="{56\:\ 0x012d|0x012d: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0136 \l}"];
Node_57 [shape=record,label="{57\:\ 0x012f|0x012f: NEW_INSTANCE  (r1 I:okhttp3.internal.connection.RouteException) =  okhttp3.internal.connection.RouteException \l0x0131: INVOKE  \l  (r1 I:okhttp3.internal.connection.RouteException)\l  (r0 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.\<init\>(java.io.IOException):void type: DIRECT \l0x0134: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0136|0x0136: INVOKE  \l  (r12 I:okhttp3.internal.connection.RouteException)\l  (r0 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.addConnectException(java.io.IOException):void type: VIRTUAL \l}"];
Node_59 [shape=record,label="{59\:\ 0x0139|0x0139: IF  (r21 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0143 \l}"];
Node_60 [shape=record,label="{60\:\ 0x013b|0x013b: INVOKE  (r0 I:boolean) = \l  (r10 I:okhttp3.internal.connection.ConnectionSpecSelector)\l  (r0 I:java.io.IOException)\l okhttp3.internal.connection.ConnectionSpecSelector.connectionFailed(java.io.IOException):boolean type: VIRTUAL \l}"];
Node_61 [shape=record,label="{61\:\ 0x013f|0x013f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0143 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0143|0x0143: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0144|0x0144: NEW_INSTANCE  (r0 I:okhttp3.internal.connection.RouteException) =  okhttp3.internal.connection.RouteException \l0x0146: NEW_INSTANCE  (r1 I:java.net.UnknownServiceException) =  java.net.UnknownServiceException \l0x0148: CONST_STR  (r2 I:java.lang.String) =  \"H2_PRIOR_KNOWLEDGE cannot be used with HTTPS\" \l0x014a: INVOKE  \l  (r1 I:java.net.UnknownServiceException)\l  (r2 I:java.lang.String)\l java.net.UnknownServiceException.\<init\>(java.lang.String):void type: DIRECT \l0x014d: INVOKE  \l  (r0 I:okhttp3.internal.connection.RouteException)\l  (r1 I:java.io.IOException)\l okhttp3.internal.connection.RouteException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_65 [shape=record,label="{65\:\ 0x0150|0x0150: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_66 [shape=record,label="{66\:\ 0x0151|0x0151: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0153: CONST_STR  (r1 I:java.lang.String) =  \"already connected\" \l0x0155: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_67 [shape=record,label="{67\:\ 0x0158|0x0158: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.RealConnection.connect((r16 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r17 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:okhttp3.Call A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:okhttp3.EventListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_66;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_15[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_64;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_52;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_29[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_50;
Node_25 -> Node_26;
Node_25 -> Node_50;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_48;
Node_28 -> Node_29;
Node_28 -> Node_48;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_36;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_36[style=dashed];
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_40 -> Node_44;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_47;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_48 -> Node_55;
Node_50 -> Node_54;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_59;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_63;
Node_60 -> Node_61;
Node_61 -> Node_63;
Node_61 -> Node_16[style=dashed];
Node_64 -> Node_65;
Node_66 -> Node_67;
}

