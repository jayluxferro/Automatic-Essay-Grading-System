digraph "CFG forokhttp3.internal.connection.RealConnection.supportsUrl(Lokhttp3\/HttpUrl;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l0x0004: IGET  (r1 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0006: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x000a: INVOKE  (r1 I:okhttp3.HttpUrl) = (r1 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x000e: INVOKE  (r1 I:int) = (r1 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: RETURN  (r2 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x001a: IGET  (r1 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x001c: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0020: INVOKE  (r1 I:okhttp3.HttpUrl) = (r1 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0024: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x002c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004e \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IGET  (r0 I:okhttp3.Handshake) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.handshake okhttp3.Handshake \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: SGET  (r0 I:okhttp3.internal.tls.OkHostnameVerifier) =  okhttp3.internal.tls.OkHostnameVerifier.INSTANCE okhttp3.internal.tls.OkHostnameVerifier \l0x0035: INVOKE  (r5 I:java.lang.String) = (r5 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0039: IGET  (r3 I:okhttp3.Handshake) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.handshake okhttp3.Handshake \l0x003b: INVOKE  (r3 I:java.util.List) = (r3 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates():java.util.List type: VIRTUAL \l0x003f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0043: CHECK_CAST  (r3 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r3 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  (r5 I:boolean) = \l  (r0 I:okhttp3.internal.tls.OkHostnameVerifier)\l  (r5 I:java.lang.String)\l  (r3 I:java.security.cert.X509Certificate)\l okhttp3.internal.tls.OkHostnameVerifier.verify(java.lang.String, java.security.cert.X509Certificate):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|0x0049: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004c \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.connection.RealConnection.supportsUrl((r4 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
}

