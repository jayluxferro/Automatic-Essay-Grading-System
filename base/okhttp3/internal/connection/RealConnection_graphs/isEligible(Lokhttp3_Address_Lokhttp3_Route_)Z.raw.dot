digraph "CFG forokhttp3.internal.connection.RealConnection.isEligible(Lokhttp3\/Address;Lokhttp3\/Route;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: IGET  (r1 I:int) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocationLimit int \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:36:0x00a6 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.noNewStreams boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: SGET  (r0 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0013: IGET  (r1 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0015: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0019: INVOKE  (r0 I:boolean) = \l  (r0 I:okhttp3.internal.Internal)\l  (r1 I:okhttp3.Address)\l  (r5 I:okhttp3.Address)\l okhttp3.internal.Internal.equalsNonHost(okhttp3.Address, okhttp3.Address):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: RETURN  (r2 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r0 I:okhttp3.HttpUrl) = (r5 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0024: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r1 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route():okhttp3.Route type: VIRTUAL \l0x002c: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0030: INVOKE  (r1 I:okhttp3.HttpUrl) = (r1 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0034: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x003c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0045 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: RETURN  (r2 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0048 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: RETURN  (r2 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: INVOKE  (r0 I:java.net.Proxy) = (r6 I:okhttp3.Route) okhttp3.Route.proxy():java.net.Proxy type: VIRTUAL \l0x004c: INVOKE  (r0 I:java.net.Proxy$Type) = (r0 I:java.net.Proxy) java.net.Proxy.type():java.net.Proxy$Type type: VIRTUAL \l0x0050: SGET  (r3 I:java.net.Proxy$Type) =  java.net.Proxy.Type.DIRECT java.net.Proxy$Type \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0055 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|0x0054: RETURN  (r2 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: IGET  (r0 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0057: INVOKE  (r0 I:java.net.Proxy) = (r0 I:okhttp3.Route) okhttp3.Route.proxy():java.net.Proxy type: VIRTUAL \l0x005b: INVOKE  (r0 I:java.net.Proxy$Type) = (r0 I:java.net.Proxy) java.net.Proxy.type():java.net.Proxy$Type type: VIRTUAL \l0x005f: SGET  (r3 I:java.net.Proxy$Type) =  java.net.Proxy.Type.DIRECT java.net.Proxy$Type \l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0064 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0063|0x0063: RETURN  (r2 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0064|0x0064: IGET  (r0 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0066: INVOKE  (r0 I:java.net.InetSocketAddress) = (r0 I:okhttp3.Route) okhttp3.Route.socketAddress():java.net.InetSocketAddress type: VIRTUAL \l0x006a: INVOKE  (r3 I:java.net.InetSocketAddress) = (r6 I:okhttp3.Route) okhttp3.Route.socketAddress():java.net.InetSocketAddress type: VIRTUAL \l0x006e: INVOKE  (r0 I:boolean) = (r0 I:java.net.InetSocketAddress), (r3 I:java.lang.Object) java.net.InetSocketAddress.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|0x0072: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0075 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0074|0x0074: RETURN  (r2 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0075|0x0075: INVOKE  (r6 I:okhttp3.Address) = (r6 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0079: INVOKE  (r6 I:javax.net.ssl.HostnameVerifier) = (r6 I:okhttp3.Address) okhttp3.Address.hostnameVerifier():javax.net.ssl.HostnameVerifier type: VIRTUAL \l0x007d: SGET  (r0 I:okhttp3.internal.tls.OkHostnameVerifier) =  okhttp3.internal.tls.OkHostnameVerifier.INSTANCE okhttp3.internal.tls.OkHostnameVerifier \l}"];
Node_26 [shape=record,label="{26\:\ 0x007f|0x007f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0082 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0081|0x0081: RETURN  (r2 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0082|0x0082: INVOKE  (r6 I:okhttp3.HttpUrl) = (r5 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0086: INVOKE  (r6 I:boolean) = \l  (r4 I:okhttp3.internal.connection.RealConnection)\l  (r6 I:okhttp3.HttpUrl)\l okhttp3.internal.connection.RealConnection.supportsUrl(okhttp3.HttpUrl):boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x008a|0x008a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008d \l}"];
Node_30 [shape=record,label="{30\:\ 0x008c|0x008c: RETURN  (r2 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x008d|SYNTHETIC\lSplitter:B:31:0x008d\l}"];
Node_32 [shape=record,label="{32\:\ ?|Splitter:B:31:0x008d\l|0x008d: INVOKE  (r6 I:okhttp3.CertificatePinner) = (r5 I:okhttp3.Address) okhttp3.Address.certificatePinner():okhttp3.CertificatePinner type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}, TRY_ENTER]\l0x0091: INVOKE  (r5 I:okhttp3.HttpUrl) = (r5 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}]\l0x0095: INVOKE  (r5 I:java.lang.String) = (r5 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}]\l0x0099: INVOKE  (r0 I:okhttp3.Handshake) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.handshake():okhttp3.Handshake type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}]\l0x009d: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates():java.util.List type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}]\l0x00a1: INVOKE  \l  (r6 I:okhttp3.CertificatePinner)\l  (r5 I:java.lang.String)\l  (r0 I:java.util.List)\l okhttp3.CertificatePinner.check(java.lang.String, java.util.List):void type: VIRTUAL A[Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}, TRY_LEAVE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x00a4|0x00a4: RETURN  (r1 I:boolean) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a5|0x00a5: RETURN  (r2 I:boolean) \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lExcHandler: SSLPeerUnverifiedException null\lSplitter:B:31:0x008d\l}"];
Node_36 [shape=record,label="{36\:\ 0x00a6|0x00a6: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.connection.RealConnection.isEligible((r4 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Route A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_36;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_36[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_32 -> Node_35;
Node_35 -> Node_34;
}

