digraph "CFG forokhttp3.internal.connection.RealConnection.connectTls(Lokhttp3\/internal\/connection\/ConnectionSpecSelector;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0002: INVOKE  (r0 I:okhttp3.Address) = (r0 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x0006: INVOKE  (r1 I:javax.net.ssl.SSLSocketFactory) = (r0 I:okhttp3.Address) okhttp3.Address.sslSocketFactory():javax.net.ssl.SSLSocketFactory type: VIRTUAL \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|SYNTHETIC\lSplitter:B:1:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000b\l|0x000b: IGET  (r3 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket A[Catch:\{ AssertionError \-\> 0x010a \}, TRY_ENTER]\l0x000d: INVOKE  (r4 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x0011: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x0015: INVOKE  (r5 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x0019: INVOKE  (r5 I:int) = (r5 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x001d: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x001e: INVOKE  (r1 I:java.net.Socket) = \l  (r1 I:javax.net.ssl.SSLSocketFactory)\l  (r3 I:java.net.Socket)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:boolean)\l javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean):java.net.Socket type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x010a \}]\l0x0022: CHECK_CAST  (r1 I:javax.net.ssl.SSLSocket) = (javax.net.ssl.SSLSocket) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ AssertionError \-\> 0x010a \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|SYNTHETIC\lSplitter:B:3:0x0024\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0024\l|0x0024: INVOKE  (r8 I:okhttp3.ConnectionSpec) = \l  (r8 I:okhttp3.internal.connection.ConnectionSpecSelector)\l  (r1 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.connection.ConnectionSpecSelector.configureSecureSocket(javax.net.ssl.SSLSocket):okhttp3.ConnectionSpec type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}, TRY_ENTER]\l0x0028: INVOKE  (r3 I:boolean) = (r8 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.supportsTlsExtensions():boolean type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0041 A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: INVOKE  (r3 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0032: INVOKE  (r4 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0036: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x003a: INVOKE  (r5 I:java.util.List) = (r0 I:okhttp3.Address) okhttp3.Address.protocols():java.util.List type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x003e: INVOKE  \l  (r3 I:okhttp3.internal.platform.Platform)\l  (r1 I:javax.net.ssl.SSLSocket)\l  (r4 I:java.lang.String)\l  (r5 I:java.util.List)\l okhttp3.internal.platform.Platform.configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List):void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: INVOKE  (r1 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.startHandshake():void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0044: INVOKE  (r3 I:javax.net.ssl.SSLSession) = (r1 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getSession():javax.net.ssl.SSLSession type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0048: INVOKE  (r4 I:okhttp3.Handshake) = (r3 I:javax.net.ssl.SSLSession) okhttp3.Handshake.get(javax.net.ssl.SSLSession):okhttp3.Handshake type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x004c: INVOKE  (r5 I:javax.net.ssl.HostnameVerifier) = (r0 I:okhttp3.Address) okhttp3.Address.hostnameVerifier():javax.net.ssl.HostnameVerifier type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0050: INVOKE  (r6 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0054: INVOKE  (r6 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0058: INVOKE  (r3 I:boolean) = \l  (r5 I:javax.net.ssl.HostnameVerifier)\l  (r6 I:java.lang.String)\l  (r3 I:javax.net.ssl.SSLSession)\l javax.net.ssl.HostnameVerifier.verify(java.lang.String, javax.net.ssl.SSLSession):boolean type: INTERFACE A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x005c|0x005c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00b0 A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x005e|0x005e: INVOKE  (r3 I:okhttp3.CertificatePinner) = (r0 I:okhttp3.Address) okhttp3.Address.certificatePinner():okhttp3.CertificatePinner type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0062: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0066: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x006a: INVOKE  (r5 I:java.util.List) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates():java.util.List type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x006e: INVOKE  \l  (r3 I:okhttp3.CertificatePinner)\l  (r0 I:java.lang.String)\l  (r5 I:java.util.List)\l okhttp3.CertificatePinner.check(java.lang.String, java.util.List):void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0071: INVOKE  (r8 I:boolean) = (r8 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.supportsTlsExtensions():boolean type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0075|0x0075: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x007f A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0077|0x0077: INVOKE  (r8 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x007b: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:okhttp3.internal.platform.Platform)\l  (r1 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.platform.Platform.getSelectedProtocol(javax.net.ssl.SSLSocket):java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x007f|0x007f: IPUT  \l  (r1 I:java.net.Socket)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0081: IGET  (r8 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0083: INVOKE  (r8 I:okio.Source) = (r8 I:java.net.Socket) okio.Okio.source(java.net.Socket):okio.Source type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0087: INVOKE  (r8 I:okio.BufferedSource) = (r8 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x008b: IPUT  \l  (r8 I:okio.BufferedSource)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.source okio.BufferedSource A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x008d: IGET  (r8 I:java.net.Socket) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x008f: INVOKE  (r8 I:okio.Sink) = (r8 I:java.net.Socket) okio.Okio.sink(java.net.Socket):okio.Sink type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0093: INVOKE  (r8 I:okio.BufferedSink) = (r8 I:okio.Sink) okio.Okio.buffer(okio.Sink):okio.BufferedSink type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0097: IPUT  \l  (r8 I:okio.BufferedSink)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.sink okio.BufferedSink A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x0099: IPUT  \l  (r4 I:okhttp3.Handshake)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.handshake okhttp3.Handshake A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x009b|0x009b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x00a2 A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x009d|0x009d: INVOKE  (r8 I:okhttp3.Protocol) = (r2 I:java.lang.String) okhttp3.Protocol.get(java.lang.String):okhttp3.Protocol type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00a1: GOTO  \-\> 0x00a4 A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x00a2|0x00a2: SGET  (r8 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_1 okhttp3.Protocol A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x00a4|0x00a4: IPUT  \l  (r8 I:okhttp3.Protocol)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.protocol okhttp3.Protocol A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x00a6|0x00a6: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00af \l}"];
Node_18 [shape=record,label="{18\:\ 0x00a8|0x00a8: INVOKE  (r8 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x00ac: INVOKE  \l  (r8 I:okhttp3.internal.platform.Platform)\l  (r1 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.platform.Platform.afterHandshake(javax.net.ssl.SSLSocket):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x00af|0x00af: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x00b0|SYNTHETIC\lSplitter:B:20:0x00b0\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x00b0\l|0x00b0: INVOKE  (r8 I:java.util.List) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates():java.util.List type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}, TRY_ENTER]\l0x00b4: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00b5: INVOKE  (r8 I:java.lang.Object) = (r8 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00b9: CHECK_CAST  (r8 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00bb: NEW_INSTANCE  (r2 I:javax.net.ssl.SSLPeerUnverifiedException) =  javax.net.ssl.SSLPeerUnverifiedException A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00bd: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00bf: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00c2: CONST_STR  (r4 I:java.lang.String) =  \"Hostname \" A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00c4: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00c7: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00cb: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00cf: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00d2: CONST_STR  (r0 I:java.lang.String) =  \" not verified:\l    certificate: \" A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00d4: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00d7: INVOKE  (r0 I:java.lang.String) = (r8 I:java.security.cert.Certificate) okhttp3.CertificatePinner.pin(java.security.cert.Certificate):java.lang.String type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00db: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00de: CONST_STR  (r0 I:java.lang.String) =  \"\l    DN: \" A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00e0: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00e3: INVOKE  (r0 I:java.security.Principal) = (r8 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectDN():java.security.Principal type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00e7: INVOKE  (r0 I:java.lang.String) = (r0 I:java.security.Principal) java.security.Principal.getName():java.lang.String type: INTERFACE A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00eb: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00ee: CONST_STR  (r0 I:java.lang.String) =  \"\l    subjectAltNames: \" A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00f0: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00f3: INVOKE  (r8 I:java.util.List) = (r8 I:java.security.cert.X509Certificate) okhttp3.internal.tls.OkHostnameVerifier.allSubjectAltNames(java.security.cert.X509Certificate):java.util.List type: STATIC A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00f7: INVOKE  (r3 I:java.lang.StringBuilder), (r8 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00fa: INVOKE  (r8 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l0x00fe: INVOKE  \l  (r2 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r8 I:java.lang.String)\l javax.net.ssl.SSLPeerUnverifiedException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0101|0x0101: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ AssertionError \-\> 0x0104, all \-\> 0x0102 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0102|ExcHandler: all null\lSplitter:B:3:0x0024\l|0x0102: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x0104|ExcHandler: AssertionError null\lSplitter:B:3:0x0024\l|0x0104: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_26 [shape=record,label="{26\:\ 0x0105|0x0105: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0107|ExcHandler: all null\lSplitter:B:30:0x010b\l|0x0107: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_28 [shape=record,label="{28\:\ 0x0108|0x0108: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x010a|ExcHandler: AssertionError null\lSplitter:B:1:0x000b\l|0x010a: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x010b|SYNTHETIC\lSplitter:B:30:0x010b\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x010b\l|0x010b: INVOKE  (r0 I:boolean) = (r8 I:java.lang.AssertionError) okhttp3.internal.Util.isAndroidGetsocknameError(java.lang.AssertionError):boolean type: STATIC A[Catch:\{ all \-\> 0x0107 \}, TRY_ENTER]\l}"];
Node_32 [shape=record,label="{32\:\ 0x010f|0x010f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0117 A[Catch:\{ all \-\> 0x0107 \}]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0111|0x0111: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0107 \}]\l0x0113: INVOKE  (r0 I:java.io.IOException), (r8 I:java.lang.Throwable) java.io.IOException.\<init\>(java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x0107 \}]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0116|0x0116: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0107 \}]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0117|0x0117: THROW  (r8 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0107 \}, TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0118|0x0118: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0121 \l}"];
Node_37 [shape=record,label="{37\:\ 0x011a|0x011a: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x011e: INVOKE  \l  (r0 I:okhttp3.internal.platform.Platform)\l  (r1 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.platform.Platform.afterHandshake(javax.net.ssl.SSLSocket):void type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x0121|0x0121: INVOKE  (r1 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_39 [shape=record,label="{39\:\ 0x0124|0x0124: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.RealConnection.connectTls((r7 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r8 I:okhttp3.internal.connection.ConnectionSpecSelector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_2 -> Node_29;
Node_3 -> Node_4;
Node_3 -> Node_25;
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_25;
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_36;
Node_25 -> Node_26;
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_36;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_27;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
}

