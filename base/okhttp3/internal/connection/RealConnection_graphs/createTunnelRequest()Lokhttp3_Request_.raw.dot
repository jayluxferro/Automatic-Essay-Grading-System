digraph "CFG forokhttp3.internal.connection.RealConnection.createTunnelRequest()Lokhttp3\/Request;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x0002: INVOKE  (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0007: INVOKE  (r1 I:okhttp3.Address) = (r1 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x000b: INVOKE  (r1 I:okhttp3.HttpUrl) = (r1 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x000f: INVOKE  (r0 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request$Builder), (r1 I:okhttp3.HttpUrl) okhttp3.Request.Builder.url(okhttp3.HttpUrl):okhttp3.Request$Builder type: VIRTUAL \l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"Host\" \l0x0015: IGET  (r2 I:okhttp3.Route) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0017: INVOKE  (r2 I:okhttp3.Address) = (r2 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x001b: INVOKE  (r2 I:okhttp3.HttpUrl) = (r2 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x001f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: INVOKE  (r2 I:java.lang.String) = (r2 I:okhttp3.HttpUrl), (r3 I:boolean) okhttp3.internal.Util.hostHeader(okhttp3.HttpUrl, boolean):java.lang.String type: STATIC \l0x0024: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0028: CONST_STR  (r1 I:java.lang.String) =  \"Proxy\-Connection\" \l0x002a: CONST_STR  (r2 I:java.lang.String) =  \"Keep\-Alive\" \l0x002c: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"User\-Agent\" \l0x0032: INVOKE  (r2 I:java.lang.String) =  okhttp3.internal.Version.userAgent():java.lang.String type: STATIC \l0x0036: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x003a: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x003e|0x003e: RETURN  (r0 I:okhttp3.Request) \l}"];
MethodNode[shape=record,label="{private okhttp3.Request okhttp3.internal.connection.RealConnection.createTunnelRequest((r4 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

