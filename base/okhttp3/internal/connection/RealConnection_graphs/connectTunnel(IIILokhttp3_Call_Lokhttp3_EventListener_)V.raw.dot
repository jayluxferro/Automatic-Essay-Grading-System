digraph "CFG forokhttp3.internal.connection.RealConnection.connectTunnel(IIILokhttp3\/Call;Lokhttp3\/EventListener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Request) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.createTunnelRequest():okhttp3.Request type: DIRECT \l0x0004: INVOKE  (r1 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  \l  (r6 I:okhttp3.internal.connection.RealConnection)\l  (r7 I:int)\l  (r8 I:int)\l  (r10 I:okhttp3.Call)\l  (r11 I:okhttp3.EventListener)\l okhttp3.internal.connection.RealConnection.connectSocket(int, int, okhttp3.Call, okhttp3.EventListener):void type: DIRECT \l0x0010: INVOKE  (r0 I:okhttp3.Request) = \l  (r6 I:okhttp3.internal.connection.RealConnection)\l  (r8 I:int)\l  (r9 I:int)\l  (r0 I:okhttp3.Request)\l  (r1 I:okhttp3.HttpUrl)\l okhttp3.internal.connection.RealConnection.createTunnel(int, int, okhttp3.Request, okhttp3.HttpUrl):okhttp3.Request type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r3 I:java.net.Socket) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket \l0x0019: INVOKE  (r3 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: IPUT  \l  (r3 I:java.net.Socket)\l  (r6 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.rawSocket java.net.Socket \l0x001f: IPUT  \l  (r3 I:okio.BufferedSink)\l  (r6 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0021: IPUT  \l  (r3 I:okio.BufferedSource)\l  (r6 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x0023: IGET  (r4 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x0025: INVOKE  (r4 I:java.net.InetSocketAddress) = (r4 I:okhttp3.Route) okhttp3.Route.socketAddress():java.net.InetSocketAddress type: VIRTUAL \l0x0029: IGET  (r5 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route okhttp3.Route \l0x002b: INVOKE  (r5 I:java.net.Proxy) = (r5 I:okhttp3.Route) okhttp3.Route.proxy():java.net.Proxy type: VIRTUAL \l0x002f: INVOKE  \l  (r11 I:okhttp3.EventListener)\l  (r10 I:okhttp3.Call)\l  (r4 I:java.net.InetSocketAddress)\l  (r5 I:java.net.Proxy)\l  (r3 I:okhttp3.Protocol)\l okhttp3.EventListener.connectEnd(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol):void type: VIRTUAL \l0x0032: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.RealConnection.connectTunnel((r6 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:okhttp3.Call A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:okhttp3.EventListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_1;
}

