digraph "CFG forokhttp3.internal.connection.RealConnection.isHealthy(Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.net.Socket) java.net.Socket.isClosed():boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0051 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x000b: INVOKE  (r0 I:boolean) = (r0 I:java.net.Socket) java.net.Socket.isInputShutdown():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0051 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x0013: INVOKE  (r0 I:boolean) = (r0 I:java.net.Socket) java.net.Socket.isOutputShutdown():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x001c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IGET  (r5 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x0021: INVOKE  (r5 I:boolean) = (r5 I:okhttp3.internal.http2.Http2Connection) okhttp3.internal.http2.Http2Connection.isShutdown():boolean type: VIRTUAL \l0x0025: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: RETURN  (r5 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|SYNTHETIC\lSplitter:B:12:0x0029\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0029\l|0x0029: IGET  (r5 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}, TRY_ENTER]\l0x002b: INVOKE  (r5 I:int) = (r5 I:java.net.Socket) java.net.Socket.getSoTimeout():int type: VIRTUAL A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l0x002e: NOP   A[TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|SYNTHETIC\lSplitter:B:14:0x002f\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x002f\l|0x002f: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ all \-\> 0x0048 \}, TRY_ENTER]\l0x0031: INVOKE  (r0 I:java.net.Socket), (r2 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0048 \}]\l0x0034: IGET  (r0 I:okio.BufferedSource) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource A[Catch:\{ all \-\> 0x0048 \}]\l0x0036: INVOKE  (r0 I:boolean) = (r0 I:okio.BufferedSource) okio.BufferedSource.exhausted():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l0x0039: NOP   A[TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|SYNTHETIC\lSplitter:B:17:0x003c\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x003c\l|0x003c: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}, TRY_ENTER]\l0x003e: INVOKE  (r0 I:java.net.Socket), (r5 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l0x0044: INVOKE  (r0 I:java.net.Socket), (r5 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: RETURN  (r2 I:boolean) A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|ExcHandler: all null\lSplitter:B:14:0x002f\l|0x0048: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: IGET  (r3 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l0x004b: INVOKE  (r3 I:java.net.Socket), (r5 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ SocketTimeoutException \-\> 0x0050, IOException \-\> 0x004f \}, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: RETURN  (r1 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:12:0x0029\l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: RETURN  (r2 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lExcHandler: SocketTimeoutException null\lSplitter:B:12:0x0029\l}"];
Node_29 [shape=record,label="{29\:\ 0x0051|0x0051: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.connection.RealConnection.isHealthy((r4 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_29;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_29[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_13;
Node_12 -> Node_28;
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_22;
Node_14 -> Node_28;
Node_14 -> Node_26;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_17 -> Node_28;
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_26 -> Node_25;
Node_28 -> Node_27;
}

