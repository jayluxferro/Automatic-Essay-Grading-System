digraph "CFG forokhttp3.internal.connection.RealConnection.newCodec(Lokhttp3\/OkHttpClient;Lokhttp3\/Interceptor$Chain;Lokhttp3\/internal\/connection\/StreamAllocation;)Lokhttp3\/internal\/http\/HttpCodec;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:okhttp3.internal.http2.Http2Codec) =  okhttp3.internal.http2.Http2Codec \l0x0006: IGET  (r1 I:okhttp3.internal.http2.Http2Connection) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.http2Connection okhttp3.internal.http2.Http2Connection \l0x0008: INVOKE  \l  (r0 I:okhttp3.internal.http2.Http2Codec)\l  (r5 I:okhttp3.OkHttpClient)\l  (r6 I:okhttp3.Interceptor$Chain)\l  (r7 I:okhttp3.internal.connection.StreamAllocation)\l  (r1 I:okhttp3.internal.http2.Http2Connection)\l okhttp3.internal.http2.Http2Codec.\<init\>(okhttp3.OkHttpClient, okhttp3.Interceptor$Chain, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http2.Http2Connection):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r0 I:okhttp3.internal.http.HttpCodec) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:java.net.Socket) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket java.net.Socket \l0x000e: INVOKE  (r1 I:int) = (r6 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.readTimeoutMillis():int type: INTERFACE \l0x0012: INVOKE  (r0 I:java.net.Socket), (r1 I:int) java.net.Socket.setSoTimeout(int):void type: VIRTUAL \l0x0015: IGET  (r0 I:okio.BufferedSource) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x0017: INVOKE  (r0 I:okio.Timeout) = (r0 I:okio.BufferedSource) okio.BufferedSource.timeout():okio.Timeout type: INTERFACE \l0x001b: INVOKE  (r1 I:int) = (r6 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.readTimeoutMillis():int type: INTERFACE \l0x001f: CAST  (r1 I:long) = (long) (r1 I:int) \l0x0020: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0022: INVOKE  \l  (r0 I:okio.Timeout)\l  (r1 I:long)\l  (r3 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l0x0025: IGET  (r0 I:okio.BufferedSink) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x0027: INVOKE  (r0 I:okio.Timeout) = (r0 I:okio.BufferedSink) okio.BufferedSink.timeout():okio.Timeout type: INTERFACE \l0x002b: INVOKE  (r6 I:int) = (r6 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.writeTimeoutMillis():int type: INTERFACE \l0x002f: CAST  (r1 I:long) = (long) (r6 I:int) \l0x0030: SGET  (r6 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0032: INVOKE  \l  (r0 I:okio.Timeout)\l  (r1 I:long)\l  (r6 I:java.util.concurrent.TimeUnit)\l okio.Timeout.timeout(long, java.util.concurrent.TimeUnit):okio.Timeout type: VIRTUAL \l0x0035: NEW_INSTANCE  (r6 I:okhttp3.internal.http1.Http1Codec) =  okhttp3.internal.http1.Http1Codec \l0x0037: IGET  (r0 I:okio.BufferedSource) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.source okio.BufferedSource \l0x0039: IGET  (r1 I:okio.BufferedSink) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.sink okio.BufferedSink \l0x003b: INVOKE  \l  (r6 I:okhttp3.internal.http1.Http1Codec)\l  (r5 I:okhttp3.OkHttpClient)\l  (r7 I:okhttp3.internal.connection.StreamAllocation)\l  (r0 I:okio.BufferedSource)\l  (r1 I:okio.BufferedSink)\l okhttp3.internal.http1.Http1Codec.\<init\>(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation, okio.BufferedSource, okio.BufferedSink):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x003e|0x003e: RETURN  (r6 I:okhttp3.internal.http.HttpCodec) \l}"];
MethodNode[shape=record,label="{public okhttp3.internal.http.HttpCodec okhttp3.internal.connection.RealConnection.newCodec((r4 'this' I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.OkHttpClient A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Interceptor$Chain A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.net.SocketException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

