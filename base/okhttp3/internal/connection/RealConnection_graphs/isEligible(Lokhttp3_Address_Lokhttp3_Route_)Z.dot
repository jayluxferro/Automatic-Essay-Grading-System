digraph "CFG forokhttp3.internal.connection.RealConnection.isEligible(Lokhttp3\/Address;Lokhttp3\/Route;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r4.allocations.size() \>= r4.allocationLimit) goto L_0x00a6\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r4.noNewStreams == false) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x001d|if (okhttp3.internal.Internal.instance.equalsNonHost(r4.route.address(), r5) != false) goto L_0x0020\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|RETURN\l|return false\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020}"];
Node_8 [shape=record,label="{8\:\ 0x003d|if (r5.url().host().equals(route().address().url().host()) == false) goto L_0x0040\l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|RETURN\l|return true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0040}"];
Node_11 [shape=record,label="{11\:\ 0x0042|if (r4.http2Connection != null) goto L_0x0045\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|if (r6 != null) goto L_0x0048\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048}"];
Node_16 [shape=record,label="{16\:\ 0x0052|if (r6.proxy().type() == java.net.Proxy.Type.DIRECT) goto L_0x0055\l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|RETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ 0x0055}"];
Node_19 [shape=record,label="{19\:\ 0x0061|if (r4.route.proxy().type() == java.net.Proxy.Type.DIRECT) goto L_0x0064\l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|RETURN\l|return false\l}"];
Node_21 [shape=record,label="{21\:\ 0x0064}"];
Node_22 [shape=record,label="{22\:\ 0x0072|if (r4.route.socketAddress().equals(r6.socketAddress()) != false) goto L_0x0075\l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|RETURN\l|return false\l}"];
Node_24 [shape=record,label="{24\:\ 0x0075}"];
Node_25 [shape=record,label="{25\:\ 0x007f|if (r6.address().hostnameVerifier() == okhttp3.internal.tls.OkHostnameVerifier.INSTANCE) goto L_0x0082\l}"];
Node_26 [shape=record,label="{26\:\ 0x0081|RETURN\l|return false\l}"];
Node_27 [shape=record,label="{27\:\ 0x0082}"];
Node_28 [shape=record,label="{28\:\ 0x008a|if (supportsUrl(r5.url()) != false) goto L_0x008d\l}"];
Node_29 [shape=record,label="{29\:\ 0x008c|RETURN\l|return false\l}"];
Node_30 [shape=record,label="{30\:\ 0x008d|SYNTHETIC\lSplitter:B:30:0x008d\l}"];
Node_31 [shape=record,label="{31\:\ ?|Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}\lSplitter:B:30:0x008d\l|r5.certificatePinner().check(r5.url().host(), handshake().peerCertificates())     \/\/ Catch:\{ SSLPeerUnverifiedException \-\> 0x00a5 \}\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a4|RETURN\l|return true\l}"];
Node_33 [shape=record,label="{33\:\ 0x00a5|RETURN\l|return false\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lExcHandler: SSLPeerUnverifiedException (unused javax.net.ssl.SSLPeerUnverifiedException)\lSplitter:B:30:0x008d\l}"];
Node_35 [shape=record,label="{35\:\ 0x00a6|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.connection.RealConnection.isEligible((r4v0 'this' okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r5v0 okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 okhttp3.Route A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_35;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_35[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_31 -> Node_34;
Node_34 -> Node_33;
}

