digraph "CFG forokhttp3.internal.connection.RealConnection.establishProtocol(Lokhttp3\/internal\/connection\/ConnectionSpecSelector;ILokhttp3\/Call;Lokhttp3\/EventListener;)V" {
subgraph cluster_Region_997545266 {
label = "R(1:(2:8|(1:(1:10)))(1:(1:4)(1:6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1704704405 {
label = "IF [B:1:0x000a] THEN: R(2:8|(1:(1:10))) ELSE: R(1:(1:4)(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r1.route.address().sslSocketFactory() != null) goto L_0x0033\l}"];
subgraph cluster_Region_873326539 {
label = "R(2:8|(1:(1:10)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0033|r5.secureConnectStart(r4)\lconnectTls(r2)\lr5.secureConnectEnd(r4, r1.handshake)\l}"];
subgraph cluster_Region_1660803247 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1940966663 {
label = "IF [B:9:0x0042] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0042|if (r1.protocol == okhttp3.Protocol.HTTP_2) goto L_0x0044\l}"];
subgraph cluster_Region_1264555509 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0044|startHttp2(r3)\l}"];
}
}
}
}
subgraph cluster_Region_280432874 {
label = "R(1:(1:4)(1:6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_469998323 {
label = "IF [B:3:0x001c] THEN: R(1:4) ELSE: R(1:6) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001c|if (r1.route.address().protocols().contains(okhttp3.Protocol.H2_PRIOR_KNOWLEDGE) == true) goto L_0x001e\l}"];
subgraph cluster_Region_1773057153 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001e|r1.socket = r1.rawSocket\lr1.protocol = okhttp3.Protocol.H2_PRIOR_KNOWLEDGE\lstartHttp2(r3)\l}"];
}
subgraph cluster_Region_1592358012 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002a|r1.socket = r1.rawSocket\lr1.protocol = okhttp3.Protocol.HTTP_1_1\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0029}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0032}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.RealConnection.establishProtocol((r1v0 'this' okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, THIS]), (r2v0 okhttp3.internal.connection.ConnectionSpecSelector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.Call A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okhttp3.EventListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

