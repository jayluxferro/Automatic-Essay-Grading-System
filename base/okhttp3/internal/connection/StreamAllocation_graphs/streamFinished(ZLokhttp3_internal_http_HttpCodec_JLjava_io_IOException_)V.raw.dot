digraph "CFG forokhttp3.internal.connection.StreamAllocation.streamFinished(ZLokhttp3\/internal\/http\/HttpCodec;JLjava\/io\/IOException;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.EventListener) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0002: IGET  (r1 I:okhttp3.Call) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0004: INVOKE  \l  (r0 I:okhttp3.EventListener)\l  (r1 I:okhttp3.Call)\l  (r5 I:long)\l okhttp3.EventListener.responseBodyEnd(okhttp3.Call, long):void type: VIRTUAL \l0x0007: IGET  (r5 I:okhttp3.ConnectionPool) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|SYNTHETIC\lSplitter:B:3:0x000c\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000c\l|0x000c: IGET  (r6 I:okhttp3.internal.http.HttpCodec) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec A[Catch:\{ all \-\> 0x0049 \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004b A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r6 I:okhttp3.internal.connection.RealConnection) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0049 \}]\l0x0015: IGET  (r0 I:int) = (r6 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.successCount int A[Catch:\{ all \-\> 0x0049 \}]\l0x0017: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) A[Catch:\{ all \-\> 0x0049 \}]\l0x0018: IPUT  \l  (r0 I:int)\l  (r6 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.successCount int A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r6 I:okhttp3.internal.connection.RealConnection) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0049 \}]\l0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0049 \}]\l0x001d: INVOKE  (r3 I:java.net.Socket) = \l  (r2 I:okhttp3.internal.connection.StreamAllocation)\l  (r3 I:boolean)\l  (r0 I:boolean)\l  (r4 I:boolean)\l okhttp3.internal.connection.StreamAllocation.deallocate(boolean, boolean, boolean):java.net.Socket type: DIRECT A[Catch:\{ all \-\> 0x0049 \}]\l0x0021: IGET  (r4 I:okhttp3.internal.connection.RealConnection) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0026 A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IGET  (r4 I:boolean) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.released boolean A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0049 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: INVOKE  (r3 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0035 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: IGET  (r3 I:okhttp3.EventListener) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0030: IGET  (r5 I:okhttp3.Call) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0032: INVOKE  \l  (r3 I:okhttp3.EventListener)\l  (r5 I:okhttp3.Call)\l  (r6 I:okhttp3.Connection)\l okhttp3.EventListener.connectionReleased(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IGET  (r3 I:okhttp3.EventListener) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0039: IGET  (r4 I:okhttp3.Call) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x003b: INVOKE  \l  (r3 I:okhttp3.EventListener)\l  (r4 I:okhttp3.Call)\l  (r7 I:java.io.IOException)\l okhttp3.EventListener.callFailed(okhttp3.Call, java.io.IOException):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0048 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: IGET  (r3 I:okhttp3.EventListener) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0043: IGET  (r4 I:okhttp3.Call) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0045: INVOKE  (r3 I:okhttp3.EventListener), (r4 I:okhttp3.Call) okhttp3.EventListener.callEnd(okhttp3.Call):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|ExcHandler: all null\lSplitter:B:3:0x000c\l|0x0049: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x004b|SYNTHETIC\lSplitter:B:24:0x004b\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x004b\l|0x004b: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x0049 \}, TRY_ENTER]\l0x004d: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0049 \}]\l0x004f: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0049 \}]\l0x0052: CONST_STR  (r7 I:java.lang.String) =  \"expected \" A[Catch:\{ all \-\> 0x0049 \}]\l0x0054: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0049 \}]\l0x0057: IGET  (r7 I:okhttp3.internal.http.HttpCodec) = (r2 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec A[Catch:\{ all \-\> 0x0049 \}]\l0x0059: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0049 \}]\l0x005c: CONST_STR  (r7 I:java.lang.String) =  \" but was \" A[Catch:\{ all \-\> 0x0049 \}]\l0x005e: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0049 \}]\l0x0061: INVOKE  (r6 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0049 \}]\l0x0064: INVOKE  (r4 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0049 \}]\l0x0068: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x006b|0x006b: THROW  (r3 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0049 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x006c|0x006c: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0049 \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x006d|0x006d: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.StreamAllocation.streamFinished((r2 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.internal.http.HttpCodec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_3 -> Node_22;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_22 -> Node_27;
Node_24 -> Node_25;
Node_24 -> Node_22;
Node_25 -> Node_26;
Node_27 -> Node_28;
}

