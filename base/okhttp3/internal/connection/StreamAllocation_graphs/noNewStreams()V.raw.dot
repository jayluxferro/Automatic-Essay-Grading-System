digraph "CFG forokhttp3.internal.connection.StreamAllocation.noNewStreams()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.ConnectionPool) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:okhttp3.internal.connection.RealConnection) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x001e \}, TRY_ENTER]\l0x0005: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x001e \}]\l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x001e \}]\l0x0007: INVOKE  (r2 I:java.net.Socket) = \l  (r4 I:okhttp3.internal.connection.StreamAllocation)\l  (r2 I:boolean)\l  (r3 I:boolean)\l  (r3 I:boolean)\l okhttp3.internal.connection.StreamAllocation.deallocate(boolean, boolean, boolean):java.net.Socket type: DIRECT A[Catch:\{ all \-\> 0x001e \}]\l0x000b: IGET  (r3 I:okhttp3.internal.connection.RealConnection) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: INVOKE  (r2 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IGET  (r0 I:okhttp3.EventListener) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0018: IGET  (r2 I:okhttp3.Call) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x001a: INVOKE  \l  (r0 I:okhttp3.EventListener)\l  (r2 I:okhttp3.Call)\l  (r1 I:okhttp3.Connection)\l okhttp3.EventListener.connectionReleased(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x001e: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|SYNTHETIC\lSplitter:B:12:0x001f\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x001f\l|0x001f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.StreamAllocation.noNewStreams((r4 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

