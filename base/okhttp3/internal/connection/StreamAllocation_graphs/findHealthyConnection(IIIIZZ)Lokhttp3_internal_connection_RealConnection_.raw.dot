digraph "CFG forokhttp3.internal.connection.StreamAllocation.findHealthyConnection(IIIIZZ)Lokhttp3\/internal\/connection\/RealConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.internal.connection.RealConnection) = \l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:boolean)\l okhttp3.internal.connection.StreamAllocation.findConnection(int, int, int, int, boolean):okhttp3.internal.connection.RealConnection type: DIRECT \l0x0004: IGET  (r1 I:okhttp3.ConnectionPool) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\lSplitter:B:2:0x0007\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0007\l|0x0007: IGET  (r2 I:int) = (r0 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.successCount int A[Catch:\{ all \-\> 0x0019 \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d A[Catch:\{ all \-\> 0x0019 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0019 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN  (r0 I:okhttp3.internal.connection.RealConnection) A[Catch:\{ all \-\> 0x0019 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0019 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: INVOKE  (r1 I:boolean) = \l  (r0 I:okhttp3.internal.connection.RealConnection)\l  (r9 I:boolean)\l okhttp3.internal.connection.RealConnection.isHealthy(boolean):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0018 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: INVOKE  (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.noNewStreams():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: RETURN  (r0 I:okhttp3.internal.connection.RealConnection) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|ExcHandler: all null\lSplitter:B:2:0x0007\l|0x0019: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|SYNTHETIC\lSplitter:B:13:0x001a\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x001a\l|0x001a: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0019 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|0x001b: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okhttp3.internal.connection.RealConnection okhttp3.internal.connection.StreamAllocation.findHealthyConnection((r3 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_0;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_12;
Node_14 -> Node_15;
Node_14 -> Node_12;
}

