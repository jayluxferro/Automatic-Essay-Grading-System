digraph "CFG forokhttp3.internal.connection.StreamAllocation.deallocate(ZZZ)Ljava\/net\/Socket;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IPUT  \l  (r0 I:okhttp3.internal.http.HttpCodec)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IPUT  \l  (r4 I:boolean)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.released boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IGET  (r3 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0050 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0014 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0012: IPUT  \l  (r4 I:boolean)\l  (r2 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.noNewStreams boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: IGET  (r2 I:okhttp3.internal.http.HttpCodec) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: IGET  (r2 I:boolean) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.released boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0022 \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x001e: IGET  (r2 I:boolean) = (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.noNewStreams boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0050 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|0x0022: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0024: INVOKE  \l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l  (r2 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.StreamAllocation.release(okhttp3.internal.connection.RealConnection):void type: DIRECT \l0x0027: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0029: IGET  (r2 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x002b: INVOKE  (r2 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0033: INVOKE  (r3 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0037: IPUT  \l  (r3 I:long)\l  (r2 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.idleAtNanos long \l0x0039: SGET  (r2 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x003b: IGET  (r3 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l0x003d: IGET  (r4 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x003f: INVOKE  (r2 I:boolean) = \l  (r2 I:okhttp3.internal.Internal)\l  (r3 I:okhttp3.ConnectionPool)\l  (r4 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.Internal.connectionBecameIdle(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0047: INVOKE  (r2 I:java.net.Socket) = (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket():java.net.Socket type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: IPUT  \l  (r0 I:okhttp3.internal.connection.RealConnection)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: RETURN  (r2 I:java.net.Socket) \l}"];
MethodNode[shape=record,label="{private java.net.Socket okhttp3.internal.connection.StreamAllocation.deallocate((r1 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_23;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_23 -> Node_24;
}

