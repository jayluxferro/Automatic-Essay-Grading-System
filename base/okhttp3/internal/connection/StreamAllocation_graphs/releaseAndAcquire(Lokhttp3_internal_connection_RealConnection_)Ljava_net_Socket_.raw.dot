digraph "CFG forokhttp3.internal.connection.StreamAllocation.releaseAndAcquire(Lokhttp3\/internal\/connection\/RealConnection;)Ljava\/net\/Socket;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http.HttpCodec) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okhttp3.internal.connection.RealConnection) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0006: IGET  (r0 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r0 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0008: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r0 I:okhttp3.internal.connection.RealConnection) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0011: IGET  (r0 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r0 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r0 I:java.lang.ref.Reference) = (java.lang.ref.Reference) (r0 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:java.net.Socket) = \l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l  (r1 I:boolean)\l  (r2 I:boolean)\l  (r2 I:boolean)\l okhttp3.internal.connection.StreamAllocation.deallocate(boolean, boolean, boolean):java.net.Socket type: DIRECT \l0x001e: IPUT  \l  (r4 I:okhttp3.internal.connection.RealConnection)\l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection \l0x0020: IGET  (r4 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0022: INVOKE  (r4 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: RETURN  (r1 I:java.net.Socket) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0028: INVOKE  (r4 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.net.Socket okhttp3.internal.connection.StreamAllocation.releaseAndAcquire((r3 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

