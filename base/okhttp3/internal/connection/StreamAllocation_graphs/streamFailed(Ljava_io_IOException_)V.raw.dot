digraph "CFG forokhttp3.internal.connection.StreamAllocation.streamFailed(Ljava\/io\/IOException;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.ConnectionPool) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: INSTANCE_OF  (r1 I:boolean) = (r7 I:?[OBJECT, ARRAY]) okhttp3.internal.http2.StreamResetException A[Catch:\{ all \-\> 0x006a \}, TRY_ENTER]\l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x006a \}]\l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x006a \}]\l0x0007: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0025 A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CHECK_CAST  (r7 I:okhttp3.internal.http2.StreamResetException) = (okhttp3.internal.http2.StreamResetException) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}]\l0x000c: IGET  (r7 I:okhttp3.internal.http2.ErrorCode) = (r7 I:okhttp3.internal.http2.StreamResetException) okhttp3.internal.http2.StreamResetException.errorCode okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x006a \}]\l0x000e: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.REFUSED_STREAM okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IGET  (r7 I:int) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.refusedStreamCount int A[Catch:\{ all \-\> 0x006a \}]\l0x0014: ARITH  (r7 I:int) = (r7 I:int) + (r4 I:int) A[Catch:\{ all \-\> 0x006a \}]\l0x0015: IPUT  \l  (r7 I:int)\l  (r6 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.refusedStreamCount int A[Catch:\{ all \-\> 0x006a \}]\l0x0017: IGET  (r7 I:int) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.refusedStreamCount int A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r7 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IPUT  \l  (r3 I:okhttp3.Route)\l  (r6 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x006a \}]\l0x001d: GOTO  \-\> 0x004a A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: SGET  (r1 I:okhttp3.internal.http2.ErrorCode) =  okhttp3.internal.http2.ErrorCode.CANCEL okhttp3.internal.http2.ErrorCode A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IPUT  \l  (r3 I:okhttp3.Route)\l  (r6 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x006a \}]\l0x0024: GOTO  \-\> 0x004a A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: IGET  (r1 I:okhttp3.internal.connection.RealConnection) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: IGET  (r1 I:okhttp3.internal.connection.RealConnection) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x006a \}]\l0x002b: INVOKE  (r1 I:boolean) = (r1 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.isMultiplexed():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0035 A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: INSTANCE_OF  (r1 I:boolean) = (r7 I:?[OBJECT, ARRAY]) okhttp3.internal.http2.ConnectionShutdownException A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0035|0x0035: IGET  (r1 I:okhttp3.internal.connection.RealConnection) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x006a \}]\l0x0037: IGET  (r1 I:int) = (r1 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.successCount int A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004a A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003b|0x003b: IGET  (r1 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|0x003d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0048 A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|0x003f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0048 A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|0x0041: IGET  (r1 I:okhttp3.internal.connection.RouteSelector) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelector okhttp3.internal.connection.RouteSelector A[Catch:\{ all \-\> 0x006a \}]\l0x0043: IGET  (r5 I:okhttp3.Route) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x006a \}]\l0x0045: INVOKE  \l  (r1 I:okhttp3.internal.connection.RouteSelector)\l  (r5 I:okhttp3.Route)\l  (r7 I:java.io.IOException)\l okhttp3.internal.connection.RouteSelector.connectFailed(okhttp3.Route, java.io.IOException):void type: VIRTUAL A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: IPUT  \l  (r3 I:okhttp3.Route)\l  (r6 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x004a|0x004a: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x006a \}]\l0x004b: GOTO  \-\> 0x004d A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x004d|0x004d: IGET  (r1 I:okhttp3.internal.connection.RealConnection) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x006a \}]\l0x004f: INVOKE  (r7 I:java.net.Socket) = \l  (r6 I:okhttp3.internal.connection.StreamAllocation)\l  (r7 I:boolean)\l  (r2 I:boolean)\l  (r4 I:boolean)\l okhttp3.internal.connection.StreamAllocation.deallocate(boolean, boolean, boolean):java.net.Socket type: DIRECT A[Catch:\{ all \-\> 0x006a \}]\l0x0053: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|0x0055: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x005b A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0057|0x0057: IGET  (r2 I:boolean) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.reportedAcquired boolean A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0059|0x0059: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x005c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_32 [shape=record,label="{32\:\ 0x005b|0x005b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_33 [shape=record,label="{33\:\ 0x005c|0x005c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x005d|0x005d: INVOKE  (r7 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_35 [shape=record,label="{35\:\ 0x0060|0x0060: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0069 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0062|0x0062: IGET  (r7 I:okhttp3.EventListener) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0064: IGET  (r0 I:okhttp3.Call) = (r6 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0066: INVOKE  \l  (r7 I:okhttp3.EventListener)\l  (r0 I:okhttp3.Call)\l  (r1 I:okhttp3.Connection)\l okhttp3.EventListener.connectionReleased(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0069|0x0069: RETURN   \l}"];
Node_38 [shape=record,label="{38\:\ 0x006a|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x006a: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_39 [shape=record,label="{39\:\ 0x006b|SYNTHETIC\lSplitter:B:39:0x006b\l}"];
Node_40 [shape=record,label="{40\:\ ?|Splitter:B:39:0x006b\l|0x006b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x006c|0x006c: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.StreamAllocation.streamFailed((r6 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_38;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_27;
Node_9 -> Node_26;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_26;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_27;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_38;
Node_40 -> Node_41;
Node_40 -> Node_38;
}

