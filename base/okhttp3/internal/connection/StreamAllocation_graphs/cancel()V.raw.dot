digraph "CFG forokhttp3.internal.connection.StreamAllocation.cancel()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.ConnectionPool) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: IPUT  \l  (r1 I:boolean)\l  (r3 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.canceled boolean A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER]\l0x0006: IGET  (r1 I:okhttp3.internal.http.HttpCodec) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec A[Catch:\{ all \-\> 0x0017 \}]\l0x0008: IGET  (r2 I:okhttp3.internal.connection.RealConnection) = (r3 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0017 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0017 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: INVOKE  (r1 I:okhttp3.internal.http.HttpCodec) okhttp3.internal.http.HttpCodec.cancel():void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0016 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE  (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.cancel():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x0017: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\lSplitter:B:12:0x0018\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0018\l|0x0018: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|0x0019: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.StreamAllocation.cancel((r3 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

