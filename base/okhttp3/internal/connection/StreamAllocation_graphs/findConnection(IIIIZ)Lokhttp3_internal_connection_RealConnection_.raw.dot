digraph "CFG forokhttp3.internal.connection.StreamAllocation.findConnection(IIIIZ)Lokhttp3\/internal\/connection\/RealConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.released boolean A[Catch:\{ all \-\> 0x013e \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0136 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IGET  (r0 I:okhttp3.internal.http.HttpCodec) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.codec okhttp3.internal.http.HttpCodec A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x012e A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.canceled boolean A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0126 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IGET  (r0 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x013e \}]\l0x0013: INVOKE  (r3 I:java.net.Socket) = (r18 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.releaseIfNoNewStreams():java.net.Socket type: DIRECT A[Catch:\{ all \-\> 0x013e \}]\l0x0017: IGET  (r4 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x013e \}]\l0x0019: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IGET  (r0 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x013e \}]\l0x001e: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x001f: GOTO  \-\> 0x0022 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x0021: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IGET  (r6 I:boolean) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.reportedAcquired boolean A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0027 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x013e \}]\l0x0028: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0043 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: SGET  (r8 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal A[Catch:\{ all \-\> 0x013e \}]\l0x002d: IGET  (r9 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool A[Catch:\{ all \-\> 0x013e \}]\l0x002f: IGET  (r10 I:okhttp3.Address) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.address okhttp3.Address A[Catch:\{ all \-\> 0x013e \}]\l0x0031: INVOKE  \l  (r8 I:okhttp3.internal.Internal)\l  (r9 I:okhttp3.ConnectionPool)\l  (r10 I:okhttp3.Address)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l  (r5 I:okhttp3.Route)\l okhttp3.internal.Internal.get(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation, okhttp3.Route):okhttp3.internal.connection.RealConnection type: VIRTUAL A[Catch:\{ all \-\> 0x013e \}]\l0x0034: IGET  (r8 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003e A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: IGET  (r0 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x013e \}]\l0x003a: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x003b: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x003c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x013e \}]\l0x003d: GOTO  \-\> 0x0046 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003e|0x003e: IGET  (r8 I:okhttp3.Route) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x013e \}]\l0x0040: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x0041: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x0042: GOTO  \-\> 0x0045 A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l0x0044: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0046|0x0046: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0047|0x0047: INVOKE  (r3 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x004a|0x004a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0053 \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: IGET  (r2 I:okhttp3.EventListener) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x004e: IGET  (r3 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0050: INVOKE  \l  (r2 I:okhttp3.EventListener)\l  (r3 I:okhttp3.Call)\l  (r4 I:okhttp3.Connection)\l okhttp3.EventListener.connectionReleased(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0053|0x0053: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x005c \l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|0x0055: IGET  (r2 I:okhttp3.EventListener) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0057: IGET  (r3 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0059: INVOKE  \l  (r2 I:okhttp3.EventListener)\l  (r3 I:okhttp3.Call)\l  (r8 I:okhttp3.Connection)\l okhttp3.EventListener.connectionAcquired(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x005c|0x005c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x005f \l}"];
Node_31 [shape=record,label="{31\:\ 0x005e|0x005e: RETURN  (r8 I:okhttp3.internal.connection.RealConnection) \l}"];
Node_32 [shape=record,label="{32\:\ 0x005f|0x005f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0077 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0061|0x0061: IGET  (r2 I:okhttp3.internal.connection.RouteSelector$Selection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelection okhttp3.internal.connection.RouteSelector$Selection \l}"];
Node_34 [shape=record,label="{34\:\ 0x0063|0x0063: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x006d \l}"];
Node_35 [shape=record,label="{35\:\ 0x0065|0x0065: IGET  (r2 I:okhttp3.internal.connection.RouteSelector$Selection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelection okhttp3.internal.connection.RouteSelector$Selection \l0x0067: INVOKE  (r2 I:boolean) = (r2 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.hasNext():boolean type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x006b|0x006b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0077 \l}"];
Node_37 [shape=record,label="{37\:\ 0x006d|0x006d: IGET  (r2 I:okhttp3.internal.connection.RouteSelector) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelector okhttp3.internal.connection.RouteSelector \l0x006f: INVOKE  (r2 I:okhttp3.internal.connection.RouteSelector$Selection) = (r2 I:okhttp3.internal.connection.RouteSelector) okhttp3.internal.connection.RouteSelector.next():okhttp3.internal.connection.RouteSelector$Selection type: VIRTUAL \l0x0073: IPUT  \l  (r2 I:okhttp3.internal.connection.RouteSelector$Selection)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.routeSelection okhttp3.internal.connection.RouteSelector$Selection \l0x0075: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0077|0x0077: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x0078|0x0078: IGET  (r3 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_40 [shape=record,label="{40\:\ 0x007a|0x007a: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x007b|SYNTHETIC\lSplitter:B:41:0x007b\l}"];
Node_42 [shape=record,label="{42\:\ ?|Splitter:B:41:0x007b\l|0x007b: IGET  (r4 I:boolean) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.canceled boolean A[Catch:\{ all \-\> 0x0123 \}, TRY_ENTER]\l}"];
Node_43 [shape=record,label="{43\:\ 0x007d|0x007d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x011b A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_44 [shape=record,label="{44\:\ 0x007f|0x007f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00aa A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0081|0x0081: IGET  (r2 I:okhttp3.internal.connection.RouteSelector$Selection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelection okhttp3.internal.connection.RouteSelector$Selection A[Catch:\{ all \-\> 0x0123 \}]\l0x0083: INVOKE  (r2 I:java.util.List) = (r2 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.getAll():java.util.List type: VIRTUAL A[Catch:\{ all \-\> 0x0123 \}]\l0x0087: INVOKE  (r4 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0123 \}]\l0x008b: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_46 [shape=record,label="{46\:\ 0x008c|0x008c: IF  (r10 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:51:0x00aa A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_47 [shape=record,label="{47\:\ 0x008e|0x008e: INVOKE  (r11 I:java.lang.Object) = (r2 I:java.util.List), (r10 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0123 \}]\l0x0092: CHECK_CAST  (r11 I:okhttp3.Route) = (okhttp3.Route) (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0123 \}]\l0x0094: SGET  (r12 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal A[Catch:\{ all \-\> 0x0123 \}]\l0x0096: IGET  (r13 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool A[Catch:\{ all \-\> 0x0123 \}]\l0x0098: IGET  (r14 I:okhttp3.Address) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.address okhttp3.Address A[Catch:\{ all \-\> 0x0123 \}]\l0x009a: INVOKE  \l  (r12 I:okhttp3.internal.Internal)\l  (r13 I:okhttp3.ConnectionPool)\l  (r14 I:okhttp3.Address)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l  (r11 I:okhttp3.Route)\l okhttp3.internal.Internal.get(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation, okhttp3.Route):okhttp3.internal.connection.RealConnection type: VIRTUAL A[Catch:\{ all \-\> 0x0123 \}]\l0x009d: IGET  (r12 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_48 [shape=record,label="{48\:\ 0x009f|0x009f: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00a7 A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_49 [shape=record,label="{49\:\ 0x00a1|0x00a1: IGET  (r8 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0123 \}]\l0x00a3: IPUT  \l  (r11 I:okhttp3.Route)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x0123 \}]\l0x00a5: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0123 \}]\l0x00a6: GOTO  \-\> 0x00aa A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_50 [shape=record,label="{50\:\ 0x00a7|0x00a7: ARITH  (r10 I:int) = (r10 I:int) + (1 int) A[Catch:\{ all \-\> 0x0123 \}]\l0x00a9: GOTO  \-\> 0x008c A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_51 [shape=record,label="{51\:\ 0x00aa|0x00aa: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00c2 A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_52 [shape=record,label="{52\:\ 0x00ac|0x00ac: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00b4 A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_53 [shape=record,label="{53\:\ 0x00ae|0x00ae: IGET  (r2 I:okhttp3.internal.connection.RouteSelector$Selection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeSelection okhttp3.internal.connection.RouteSelector$Selection A[Catch:\{ all \-\> 0x0123 \}]\l0x00b0: INVOKE  (r9 I:okhttp3.Route) = (r2 I:okhttp3.internal.connection.RouteSelector$Selection) okhttp3.internal.connection.RouteSelector.Selection.next():okhttp3.Route type: VIRTUAL A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_54 [shape=record,label="{54\:\ 0x00b4|0x00b4: IPUT  \l  (r9 I:okhttp3.Route)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.route okhttp3.Route A[Catch:\{ all \-\> 0x0123 \}]\l0x00b6: IPUT  \l  (r7 I:int)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.refusedStreamCount int A[Catch:\{ all \-\> 0x0123 \}]\l0x00b8: NEW_INSTANCE  (r8 I:okhttp3.internal.connection.RealConnection) =  okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0123 \}]\l0x00ba: IGET  (r2 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool A[Catch:\{ all \-\> 0x0123 \}]\l0x00bc: INVOKE  \l  (r8 I:okhttp3.internal.connection.RealConnection)\l  (r2 I:okhttp3.ConnectionPool)\l  (r9 I:okhttp3.Route)\l okhttp3.internal.connection.RealConnection.\<init\>(okhttp3.ConnectionPool, okhttp3.Route):void type: DIRECT A[Catch:\{ all \-\> 0x0123 \}]\l0x00bf: INVOKE  \l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l  (r8 I:okhttp3.internal.connection.RealConnection)\l  (r7 I:boolean)\l okhttp3.internal.connection.StreamAllocation.acquire(okhttp3.internal.connection.RealConnection, boolean):void type: VIRTUAL A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_55 [shape=record,label="{55\:\ 0x00c2|0x00c2: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0123 \}, TRY_LEAVE]\l}"];
Node_56 [shape=record,label="{56\:\ 0x00c3|0x00c3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x00cd \l}"];
Node_57 [shape=record,label="{57\:\ 0x00c5|0x00c5: IGET  (r0 I:okhttp3.EventListener) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x00c7: IGET  (r2 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x00c9: INVOKE  \l  (r0 I:okhttp3.EventListener)\l  (r2 I:okhttp3.Call)\l  (r8 I:okhttp3.Connection)\l okhttp3.EventListener.connectionAcquired(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_58 [shape=record,label="{58\:\ 0x00cc|0x00cc: RETURN  (r8 I:okhttp3.internal.connection.RealConnection) \l}"];
Node_59 [shape=record,label="{59\:\ 0x00cd|0x00cd: IGET  (r0 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x00cf: IGET  (r2 I:okhttp3.EventListener) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x00d1: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x00d2: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d4: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d6: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d8: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00da: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00dc: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00de: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x00e0: INVOKE  \l  (r10 I:okhttp3.internal.connection.RealConnection)\l  (r11 I:int)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:int)\l  (r15 I:boolean)\l  (r16 I:okhttp3.Call)\l  (r17 I:okhttp3.EventListener)\l okhttp3.internal.connection.RealConnection.connect(int, int, int, int, boolean, okhttp3.Call, okhttp3.EventListener):void type: VIRTUAL \l0x00e3: INVOKE  (r0 I:okhttp3.internal.connection.RouteDatabase) = (r18 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.routeDatabase():okhttp3.internal.connection.RouteDatabase type: DIRECT \l0x00e7: INVOKE  (r2 I:okhttp3.Route) = (r8 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route():okhttp3.Route type: VIRTUAL \l0x00eb: INVOKE  \l  (r0 I:okhttp3.internal.connection.RouteDatabase)\l  (r2 I:okhttp3.Route)\l okhttp3.internal.connection.RouteDatabase.connected(okhttp3.Route):void type: VIRTUAL \l0x00ee: IGET  (r2 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool \l}"];
Node_60 [shape=record,label="{60\:\ 0x00f0|0x00f0: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x00f1|SYNTHETIC\lSplitter:B:61:0x00f1\l}"];
Node_62 [shape=record,label="{62\:\ ?|Splitter:B:61:0x00f1\l|0x00f1: IPUT  \l  (r6 I:boolean)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.connection.StreamAllocation.reportedAcquired boolean A[Catch:\{ all \-\> 0x0118 \}, TRY_ENTER]\l0x00f3: SGET  (r0 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal A[Catch:\{ all \-\> 0x0118 \}]\l0x00f5: IGET  (r3 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool A[Catch:\{ all \-\> 0x0118 \}]\l0x00f7: INVOKE  \l  (r0 I:okhttp3.internal.Internal)\l  (r3 I:okhttp3.ConnectionPool)\l  (r8 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.Internal.put(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection):void type: VIRTUAL A[Catch:\{ all \-\> 0x0118 \}]\l0x00fa: INVOKE  (r0 I:boolean) = (r8 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.isMultiplexed():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0118 \}]\l}"];
Node_63 [shape=record,label="{63\:\ 0x00fe|0x00fe: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x010c A[Catch:\{ all \-\> 0x0118 \}]\l}"];
Node_64 [shape=record,label="{64\:\ 0x0100|0x0100: SGET  (r0 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal A[Catch:\{ all \-\> 0x0118 \}]\l0x0102: IGET  (r3 I:okhttp3.ConnectionPool) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connectionPool okhttp3.ConnectionPool A[Catch:\{ all \-\> 0x0118 \}]\l0x0104: IGET  (r4 I:okhttp3.Address) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.address okhttp3.Address A[Catch:\{ all \-\> 0x0118 \}]\l0x0106: INVOKE  (r5 I:java.net.Socket) = \l  (r0 I:okhttp3.internal.Internal)\l  (r3 I:okhttp3.ConnectionPool)\l  (r4 I:okhttp3.Address)\l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l okhttp3.internal.Internal.deduplicate(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation):java.net.Socket type: VIRTUAL A[Catch:\{ all \-\> 0x0118 \}]\l0x010a: IGET  (r8 I:okhttp3.internal.connection.RealConnection) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection okhttp3.internal.connection.RealConnection A[Catch:\{ all \-\> 0x0118 \}]\l}"];
Node_65 [shape=record,label="{65\:\ 0x010c|0x010c: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0118 \}, TRY_LEAVE]\l}"];
Node_66 [shape=record,label="{66\:\ 0x010d|0x010d: INVOKE  (r5 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l0x0110: IGET  (r0 I:okhttp3.EventListener) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0112: IGET  (r2 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0114: INVOKE  \l  (r0 I:okhttp3.EventListener)\l  (r2 I:okhttp3.Call)\l  (r8 I:okhttp3.Connection)\l okhttp3.EventListener.connectionAcquired(okhttp3.Call, okhttp3.Connection):void type: VIRTUAL \l}"];
Node_67 [shape=record,label="{67\:\ 0x0117|0x0117: RETURN  (r8 I:okhttp3.internal.connection.RealConnection) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0118|ExcHandler: all null\lSplitter:B:61:0x00f1\l|0x0118: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_69 [shape=record,label="{69\:\ 0x0119|SYNTHETIC\lSplitter:B:69:0x0119\l}"];
Node_70 [shape=record,label="{70\:\ ?|Splitter:B:69:0x0119\l|0x0119: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0118 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_71 [shape=record,label="{71\:\ 0x011a|0x011a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_72 [shape=record,label="{72\:\ 0x011b|SYNTHETIC\lSplitter:B:72:0x011b\l}"];
Node_73 [shape=record,label="{73\:\ ?|Splitter:B:72:0x011b\l|0x011b: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x0123 \}, TRY_ENTER]\l0x011d: CONST_STR  (r2 I:java.lang.String) =  \"Canceled\" A[Catch:\{ all \-\> 0x0123 \}]\l0x011f: INVOKE  (r0 I:java.io.IOException), (r2 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_74 [shape=record,label="{74\:\ 0x0122|0x0122: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0123|ExcHandler: all null\lSplitter:B:41:0x007b\l|0x0123: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0123 \}]\l}"];
Node_76 [shape=record,label="{76\:\ 0x0124|0x0124: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0123 \}, TRY_LEAVE]\l}"];
Node_77 [shape=record,label="{77\:\ 0x0125|0x0125: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_78 [shape=record,label="{78\:\ 0x0126|SYNTHETIC\lSplitter:B:78:0x0126\l}"];
Node_79 [shape=record,label="{79\:\ ?|Splitter:B:78:0x0126\l|0x0126: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x013e \}, TRY_ENTER]\l0x0128: CONST_STR  (r3 I:java.lang.String) =  \"Canceled\" A[Catch:\{ all \-\> 0x013e \}]\l0x012a: INVOKE  (r0 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_80 [shape=record,label="{80\:\ 0x012d|0x012d: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_81 [shape=record,label="{81\:\ 0x012e|0x012e: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x013e \}]\l0x0130: CONST_STR  (r3 I:java.lang.String) =  \"codec != null\" A[Catch:\{ all \-\> 0x013e \}]\l0x0132: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_82 [shape=record,label="{82\:\ 0x0135|0x0135: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_83 [shape=record,label="{83\:\ 0x0136|0x0136: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x013e \}]\l0x0138: CONST_STR  (r3 I:java.lang.String) =  \"released\" A[Catch:\{ all \-\> 0x013e \}]\l0x013a: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_84 [shape=record,label="{84\:\ 0x013d|0x013d: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_85 [shape=record,label="{85\:\ 0x013e|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x013e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x013e \}]\l}"];
Node_86 [shape=record,label="{86\:\ 0x013f|0x013f: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x013e \}, TRY_LEAVE]\l}"];
Node_87 [shape=record,label="{87\:\ 0x0140|0x0140: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private okhttp3.internal.connection.RealConnection okhttp3.internal.connection.StreamAllocation.findConnection((r18 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r19 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_85;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_83;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_81;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_78;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_24;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_75;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_72;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_51;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_46;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_55;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_61 -> Node_68;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_69 -> Node_68;
Node_70 -> Node_71;
Node_70 -> Node_68;
Node_72 -> Node_73;
Node_72 -> Node_75;
Node_73 -> Node_74;
Node_75 -> Node_76;
Node_76 -> Node_77;
Node_78 -> Node_79;
Node_78 -> Node_85;
Node_79 -> Node_80;
Node_81 -> Node_82;
Node_83 -> Node_84;
Node_85 -> Node_86;
Node_86 -> Node_87;
}

