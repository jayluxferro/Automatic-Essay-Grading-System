digraph "CFG forokhttp3.internal.connection.StreamAllocation.streamFinished(ZLokhttp3\/internal\/http\/HttpCodec;JLjava\/io\/IOException;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.eventListener.responseBodyEnd(r2.call, r5)\lokhttp3.ConnectionPool r5 = r2.connectionPool\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|monitor\-enter(r5)\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r4 == null) goto L_0x004b\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r4 != r2.codec) goto L_0x004b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010}"];
Node_7 [shape=record,label="{7\:\ 0x0011|if (r3 != false) goto L_0x001a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|okhttp3.internal.connection.RealConnection r6 = r2.connection\lr6.successCount = r6.successCount + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|okhttp3.internal.connection.RealConnection r6 = r2.connection\ljava.net.Socket r3 = deallocate(r3, false, true)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r2.connection == null) goto L_0x0026\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|r6 = null\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|PHI: r6 \l  PHI: (r6v3 okhttp3.internal.connection.RealConnection) = (r6v2 okhttp3.internal.connection.RealConnection), (r6v4 okhttp3.internal.connection.RealConnection) binds: [B:10:0x0023, B:11:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|boolean r4 = r2.released\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|monitor\-exit(r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|okhttp3.internal.Util.closeQuietly(r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|if (r6 == null) goto L_0x0035\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|r2.eventListener.connectionReleased(r2.call, r6)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|if (r7 == null) goto L_0x003f\l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|r2.eventListener.callFailed(r2.call, r7)\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|if (r4 == false) goto L_?\l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|r2.eventListener.callEnd(r2.call)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|SYNTHETIC\lSplitter:B:22:0x004b\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x004b\l|java.lang.StringBuilder r6 = new java.lang.StringBuilder()     \/\/ Catch:\{  \}\lr6.append(\"expected \")\lr6.append(r2.codec)\lr6.append(\" but was \")\lr6.append(r4)\l}"];
Node_24 [shape=record,label="{24\:\ 0x006b|throw new java.lang.IllegalStateException(r6.toString())\l}"];
Node_25 [shape=record,label="{25\:\ 0x006c|REMOVE\l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|REMOVE\l|throw r3\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.connection.StreamAllocation.streamFinished((r2v0 'this' okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.internal.http.HttpCodec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_22;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_28;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_27;
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_22 -> Node_21;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

