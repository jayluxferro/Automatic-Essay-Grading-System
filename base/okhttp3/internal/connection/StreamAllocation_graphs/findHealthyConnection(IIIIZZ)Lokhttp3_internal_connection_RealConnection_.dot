digraph "CFG forokhttp3.internal.connection.StreamAllocation.findHealthyConnection(IIIIZZ)Lokhttp3\/internal\/connection\/RealConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:10:0x0014\l|okhttp3.internal.connection.RealConnection r0 = findConnection(r4, r5, r6, r7, r8)\lokhttp3.ConnectionPool r1 = r3.connectionPool\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|monitor\-enter(r1)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r0.successCount != 0) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|monitor\-exit(r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|monitor\-exit(r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e}"];
Node_9 [shape=record,label="{9\:\ 0x0012|if (r0.isHealthy(r9) != false) goto L_0x0018\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:10:0x0014\l|noNewStreams()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|LOOP_START\lREMOVE\lLOOP:1: B:12:0x0019\-\>B:18:0x0019\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|SYNTHETIC\lREMOVE\lSplitter:B:13:0x001a\l}"];
Node_14 [shape=record,label="{14\:\ ?|REMOVE\lSplitter:B:13:0x001a\l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|REMOVE\l|throw r4\l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0019|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:1: B:12:0x0019\-\>B:18:0x0019\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{private okhttp3.internal.connection.RealConnection okhttp3.internal.connection.StreamAllocation.findHealthyConnection((r3v0 'this' okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_4 -> Node_17[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_0;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_18;
Node_14 -> Node_19;
Node_14 -> Node_20;
Node_16 -> Node_11;
Node_17 -> Node_5;
Node_18 -> Node_12;
Node_19 -> Node_15;
Node_20 -> Node_18;
}

