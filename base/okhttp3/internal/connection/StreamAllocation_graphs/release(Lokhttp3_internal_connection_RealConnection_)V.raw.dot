digraph "CFG forokhttp3.internal.connection.StreamAllocation.release(Lokhttp3\/internal\/connection\/RealConnection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r2 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x000b: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r2 I:java.lang.ref.Reference) = (java.lang.ref.Reference) (r2 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.ref.Reference) java.lang.ref.Reference.get():java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IGET  (r4 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r4 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0019: INVOKE  (r4 I:java.util.List), (r1 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0022: INVOKE  (r4 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.connection.StreamAllocation.release((r3 'this' I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

