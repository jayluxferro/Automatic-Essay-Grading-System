digraph "CFG forokhttp3.internal.io.FileSystem.1.deleteContents(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.File[] r0 = r5.listFiles()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == null) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|int r5 = r0.length\lr1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v4 int) binds: [B:2:0x0006, B:9:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0008\-\>B:9:0x001b\l|if (r1 \>= r5) goto L_0x0035\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|r2 = r0[r1]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r2.isDirectory() == false) goto L_0x0015\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|deleteContents(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x0019|if (r2.delete() == false) goto L_0x001e\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:9:0x001b\l|int r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"failed to delete \")\lr0.append(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|throw new java.io.IOException(r0.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"not a readable directory: \")\lr1.append(r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|throw new java.io.IOException(r1.toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.io.FileSystem.1.deleteContents((r4v0 'this' okhttp3.internal.io.FileSystem$1 A[IMMUTABLE_TYPE, THIS]), (r5v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_13 -> Node_14;
Node_15 -> Node_12;
Node_16 -> Node_10;
}

