digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.createAddress(Lokhttp3\/HttpUrl;)Lokhttp3\/Address;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r1 I:boolean) = (r18 I:okhttp3.HttpUrl) okhttp3.HttpUrl.isHttps():boolean type: VIRTUAL \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r1 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x000b: INVOKE  (r2 I:javax.net.ssl.SSLSocketFactory) = (r1 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.sslSocketFactory():javax.net.ssl.SSLSocketFactory type: VIRTUAL \l0x000f: IGET  (r1 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0011: INVOKE  (r1 I:javax.net.ssl.HostnameVerifier) = (r1 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.hostnameVerifier():javax.net.ssl.HostnameVerifier type: VIRTUAL \l0x0015: IGET  (r3 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0017: INVOKE  (r3 I:okhttp3.CertificatePinner) = (r3 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.certificatePinner():okhttp3.CertificatePinner type: VIRTUAL \l0x001b: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x001d: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0020: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0021: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:okhttp3.Address) =  okhttp3.Address \l0x0024: INVOKE  (r5 I:java.lang.String) = (r18 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r6 I:int) = (r18 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l0x002c: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x002e: INVOKE  (r7 I:okhttp3.Dns) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.dns():okhttp3.Dns type: VIRTUAL \l0x0032: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0034: INVOKE  (r8 I:javax.net.SocketFactory) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.socketFactory():javax.net.SocketFactory type: VIRTUAL \l0x0038: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x003a: INVOKE  (r12 I:okhttp3.Authenticator) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.proxyAuthenticator():okhttp3.Authenticator type: VIRTUAL \l0x003e: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0040: INVOKE  (r13 I:java.net.Proxy) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.proxy():java.net.Proxy type: VIRTUAL \l0x0044: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0046: INVOKE  (r14 I:java.util.List) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.protocols():java.util.List type: VIRTUAL \l0x004a: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x004c: INVOKE  (r15 I:java.util.List) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.connectionSpecs():java.util.List type: VIRTUAL \l0x0050: IGET  (r2 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0052: INVOKE  (r16 I:java.net.ProxySelector) = (r2 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.proxySelector():java.net.ProxySelector type: VIRTUAL \l0x0056: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0057: INVOKE  \l  (r4 I:okhttp3.Address)\l  (r5 I:java.lang.String)\l  (r6 I:int)\l  (r7 I:okhttp3.Dns)\l  (r8 I:javax.net.SocketFactory)\l  (r9 I:javax.net.ssl.SSLSocketFactory)\l  (r10 I:javax.net.ssl.HostnameVerifier)\l  (r11 I:okhttp3.CertificatePinner)\l  (r12 I:okhttp3.Authenticator)\l  (r13 I:java.net.Proxy)\l  (r14 I:java.util.List)\l  (r15 I:java.util.List)\l  (r16 I:java.net.ProxySelector)\l okhttp3.Address.\<init\>(java.lang.String, int, okhttp3.Dns, javax.net.SocketFactory, javax.net.ssl.SSLSocketFactory, javax.net.ssl.HostnameVerifier, okhttp3.CertificatePinner, okhttp3.Authenticator, java.net.Proxy, java.util.List, java.util.List, java.net.ProxySelector):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x005a|0x005a: RETURN  (r1 I:okhttp3.Address) \l}"];
MethodNode[shape=record,label="{private okhttp3.Address okhttp3.internal.http.RetryAndFollowUpInterceptor.createAddress((r17 'this' I:okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r18 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

