digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.sameConnection(Lokhttp3\/Response;Lokhttp3\/HttpUrl;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:okhttp3.Request) = (r3 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0004: INVOKE  (r3 I:okhttp3.HttpUrl) = (r3 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0008: INVOKE  (r0 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x000c: INVOKE  (r1 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l0x0010: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  (r0 I:int) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l0x001a: INVOKE  (r1 I:int) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme():java.lang.String type: VIRTUAL \l0x0024: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme():java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.http.RetryAndFollowUpInterceptor.sameConnection((r2 'this' I:okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

