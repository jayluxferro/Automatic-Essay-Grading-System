digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.sameConnection(Lokhttp3\/Response;Lokhttp3\/HttpUrl;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.HttpUrl r3 = r3.request().url()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r3.host().equals(r4.host()) == false) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016}"];
Node_3 [shape=record,label="{3\:\ 0x001e|if (r3.port() != r4.port()) goto L_0x0030\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020}"];
Node_5 [shape=record,label="{5\:\ 0x002c|if (r3.scheme().equals(r4.scheme()) == false) goto L_0x0030\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|SYNTHETIC\lRETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.http.RetryAndFollowUpInterceptor.sameConnection((r2v0 'this' okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r3v0 okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
}

