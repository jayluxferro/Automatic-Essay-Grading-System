digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.retryAfter(Lokhttp3\/Response;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"Retry\-After\" \l0x0002: INVOKE  (r2 I:java.lang.String) = (r2 I:okhttp3.Response), (r0 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST_STR  (r3 I:java.lang.String) =  \"d+\" \l0x000b: INVOKE  (r3 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.matches(java.lang.String):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r2 I:java.lang.Integer) = (r2 I:java.lang.String) java.lang.Integer.valueOf(java.lang.String):java.lang.Integer type: STATIC \l0x0015: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN  (r2 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private int okhttp3.internal.http.RetryAndFollowUpInterceptor.retryAfter((r1 'this' I:okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r2 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

