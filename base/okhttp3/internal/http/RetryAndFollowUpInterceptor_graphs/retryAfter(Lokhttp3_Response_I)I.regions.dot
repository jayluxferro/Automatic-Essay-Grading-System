digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.retryAfter(Lokhttp3\/Response;I)I" {
subgraph cluster_Region_772306142 {
label = "R(2:0|(2:(1:2)|(1:(2:(1:6)|(1:7)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r2 = r2.header(\"Retry\-After\")\l}"];
subgraph cluster_Region_1334160338 {
label = "R(2:(1:2)|(1:(2:(1:6)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_642617380 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2 == null) goto L_0x0008\l}"];
subgraph cluster_Region_2070272238 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_1391734966 {
label = "R(1:(2:(1:6)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_2041189725 {
label = "R(2:(1:6)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1230013367 {
label = "IF [B:4:0x000f] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r2.matches(\"d+\") == true) goto L_0x0011\l}"];
subgraph cluster_Region_365732702 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\l|return java.lang.Integer.valueOf(r2).intValue()\l}"];
}
}
subgraph cluster_Region_454290049 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\l|return Integer.MAX_VALUE\l}"];
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0009}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011}"];
MethodNode[shape=record,label="{private int okhttp3.internal.http.RetryAndFollowUpInterceptor.retryAfter((r1v0 'this' okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r2v0 okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
}

