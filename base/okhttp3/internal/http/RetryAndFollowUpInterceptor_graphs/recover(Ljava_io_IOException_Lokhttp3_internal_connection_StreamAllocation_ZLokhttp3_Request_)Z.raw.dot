digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.recover(Ljava\/io\/IOException;Lokhttp3\/internal\/connection\/StreamAllocation;ZLokhttp3\/Request;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r4 I:okhttp3.internal.connection.StreamAllocation)\l  (r3 I:java.io.IOException)\l okhttp3.internal.connection.StreamAllocation.streamFailed(java.io.IOException):void type: VIRTUAL \l0x0003: IGET  (r0 I:okhttp3.OkHttpClient) = (r2 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) okhttp3.internal.http.RetryAndFollowUpInterceptor.client okhttp3.OkHttpClient \l0x0005: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.retryOnConnectionFailure():boolean type: VIRTUAL \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r6 I:okhttp3.RequestBody) = (r6 I:okhttp3.Request) okhttp3.Request.body():okhttp3.RequestBody type: VIRTUAL \l0x0013: INSTANCE_OF  (r6 I:boolean) = (r6 I:?[OBJECT, ARRAY]) okhttp3.internal.http.UnrepeatableRequestBody \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r1 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r3 I:boolean) = \l  (r2 I:okhttp3.internal.http.RetryAndFollowUpInterceptor)\l  (r3 I:java.io.IOException)\l  (r5 I:boolean)\l okhttp3.internal.http.RetryAndFollowUpInterceptor.isRecoverable(java.io.IOException, boolean):boolean type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: RETURN  (r1 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: INVOKE  (r3 I:boolean) = (r4 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.hasMoreRoutes():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.http.RetryAndFollowUpInterceptor.recover((r2 'this' I:okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
}

