digraph "CFG forokhttp3.internal.http.RetryAndFollowUpInterceptor.recover(Ljava\/io\/IOException;Lokhttp3\/internal\/connection\/StreamAllocation;ZLokhttp3\/Request;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.streamFailed(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r2.client.retryOnConnectionFailure() != false) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r5 == false) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if ((r6.body() instanceof okhttp3.internal.http.UnrepeatableRequestBody) == false) goto L_0x0018\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|RETURN\l|return false\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018}"];
Node_8 [shape=record,label="{8\:\ 0x001c|if (isRecoverable(r3, r5) != false) goto L_0x001f\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f}"];
Node_11 [shape=record,label="{11\:\ 0x0023|if (r4.hasMoreRoutes() != false) goto L_0x0026\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.http.RetryAndFollowUpInterceptor.recover((r2v0 'this' okhttp3.internal.http.RetryAndFollowUpInterceptor A[IMMUTABLE_TYPE, THIS]), (r3v0 java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
}

