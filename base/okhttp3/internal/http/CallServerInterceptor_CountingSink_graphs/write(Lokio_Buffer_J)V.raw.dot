digraph "CFG forokhttp3.internal.http.CallServerInterceptor.CountingSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:okio.ForwardingSink), (r3 I:okio.Buffer), (r4 I:long) okio.ForwardingSink.write(okio.Buffer, long):void type: SUPER \l0x0003: IGET  (r0 I:long) = \l  (r2 I:okhttp3.internal.http.CallServerInterceptor$CountingSink)\l okhttp3.internal.http.CallServerInterceptor.CountingSink.successfulCount long \l0x0005: ARITH  (r0 I:long) = (r0 I:long) + (r4 I:long) \l0x0006: IPUT  \l  (r0 I:long)\l  (r2 I:okhttp3.internal.http.CallServerInterceptor$CountingSink)\l okhttp3.internal.http.CallServerInterceptor.CountingSink.successfulCount long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http.CallServerInterceptor.CountingSink.write((r2 'this' I:okhttp3.internal.http.CallServerInterceptor$CountingSink A[IMMUTABLE_TYPE, THIS]), (r3 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

