digraph "CFG forokhttp3.internal.http.HttpHeaders.hasBody(Lokhttp3\/Response;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Request) = (r8 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"HEAD\" \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r0 I:int) = (r8 I:okhttp3.Response) okhttp3.Response.code():int type: VIRTUAL \l0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x0018: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = (200(0xc8, float:2.8E\-43) ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (204(0xcc, float:2.86E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (304(0x130, float:4.26E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: RETURN  (r3 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: INVOKE  (r4 I:long) = (r8 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.contentLength(okhttp3.Response):long type: STATIC \l0x002c: CONST  (r6 I:?[long, double]) = (\-1 ?[long, double]) \l0x002e: CMP_L  (r0 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0042 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: CONST_STR  (r0 I:java.lang.String) =  \"chunked\" \l0x0034: CONST_STR  (r2 I:java.lang.String) =  \"Transfer\-Encoding\" \l0x0036: INVOKE  (r8 I:java.lang.String) = (r8 I:okhttp3.Response), (r2 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x003a: INVOKE  (r8 I:boolean) = (r0 I:java.lang.String), (r8 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean okhttp3.internal.http.HttpHeaders.hasBody((r8 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
}

