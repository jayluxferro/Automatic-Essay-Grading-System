digraph "CFG forokhttp3.internal.http.HttpHeaders.parseChallenges(Lokhttp3\/Headers;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r13 I:java.util.List) = (r13 I:okhttp3.Headers), (r14 I:java.lang.String) okhttp3.Headers.values(java.lang.String):java.util.List type: VIRTUAL \l0x0009: INVOKE  (r13 I:java.util.Iterator) = (r13 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: INVOKE  (r14 I:boolean) = (r13 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x008a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r14 I:java.lang.Object) = (r13 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r14 I:java.lang.String) = (java.lang.String) (r14 I:?[OBJECT, ARRAY]) \l0x0019: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x001b: INVOKE  (r1 I:int) = (r14 I:java.lang.String), (r1 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: INVOKE  (r7 I:java.lang.String) = (r14 I:java.lang.String), (r2 I:int), (r1 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0028: SGET  (r2 I:java.util.regex.Pattern) =  okhttp3.internal.http.HttpHeaders.PARAMETER java.util.regex.Pattern \l0x002a: INVOKE  (r8 I:java.util.regex.Matcher) = \l  (r2 I:java.util.regex.Pattern)\l  (r14 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x002e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0030: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: INVOKE  (r1 I:boolean) = (r8 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.find(int):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x006e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0038: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0039: INVOKE  (r3 I:int) = (r8 I:java.util.regex.Matcher), (r11 I:int) java.util.regex.Matcher.start(int):int type: VIRTUAL \l0x003d: CONST_STR  (r4 I:java.lang.String) =  \"realm\" \l0x003f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: CONST  (r6 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0041: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0042: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r2 I:boolean)\l  (r3 I:int)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean type: VIRTUAL \l0x0046: CONST  (r12 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: INVOKE  (r1 I:java.lang.String) = (r8 I:java.util.regex.Matcher), (r12 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x004d: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|0x004f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0050: INVOKE  (r3 I:int) = (r8 I:java.util.regex.Matcher), (r11 I:int) java.util.regex.Matcher.start(int):int type: VIRTUAL \l0x0054: CONST_STR  (r4 I:java.lang.String) =  \"charset\" \l0x0056: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: CONST  (r6 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0058: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0059: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r2 I:boolean)\l  (r3 I:int)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|0x005d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0064 \l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|0x005f: INVOKE  (r1 I:java.lang.String) = (r8 I:java.util.regex.Matcher), (r12 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0063: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0069 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0066|0x0066: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0069 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|0x0069: INVOKE  (r1 I:int) = (r8 I:java.util.regex.Matcher) java.util.regex.Matcher.end():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|0x006e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0071 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: NEW_INSTANCE  (r14 I:okhttp3.Challenge) =  okhttp3.Challenge \l0x0073: INVOKE  \l  (r14 I:okhttp3.Challenge)\l  (r7 I:java.lang.String)\l  (r9 I:java.lang.String)\l okhttp3.Challenge.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0076|0x0076: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0086 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0078|0x0078: CONST_STR  (r1 I:java.lang.String) =  \"UTF\-8\" \l0x007a: INVOKE  (r1 I:boolean) = (r10 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x007e|0x007e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0080|0x0080: SGET  (r1 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l0x0082: INVOKE  (r14 I:okhttp3.Challenge) = (r14 I:okhttp3.Challenge), (r1 I:java.nio.charset.Charset) okhttp3.Challenge.withCharset(java.nio.charset.Charset):okhttp3.Challenge type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|0x0086: INVOKE  (r0 I:java.util.List), (r14 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x008a|0x008a: RETURN  (r0 I:java.util.List\<okhttp3.Challenge\>) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<okhttp3.Challenge\> okhttp3.internal.http.HttpHeaders.parseChallenges((r13 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokhttp3\/Headers;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Lokhttp3\/Challenge;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_27;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_1[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_18;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_7;
Node_19 -> Node_21;
Node_19 -> Node_1[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_1;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_1;
}

