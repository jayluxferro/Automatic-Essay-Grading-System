digraph "CFG forokhttp3.internal.http.HttpHeaders.hasBody(Lokhttp3\/Response;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if (r8.request().method().equals(p018io.fabric.sdk.android.services.network.HttpRequest.METHOD_HEAD) == false) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|int r0 = r8.code()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r0 \< 100) goto L_0x001f\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b}"];
Node_6 [shape=record,label="{6\:\ 0x001d|if (r0 \< 200) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r0 == 204) goto L_0x0028\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023}"];
Node_10 [shape=record,label="{10\:\ 0x0025|if (r0 == 304) goto L_0x0028\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028}"];
Node_13 [shape=record,label="{13\:\ 0x0030|if ((contentLength(r8) \> \-1 ? 1 : (contentLength(r8) == \-1 ? 0 : \-1)) != 0) goto L_0x0042\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032}"];
Node_15 [shape=record,label="{15\:\ 0x003e|if (\"chunked\".equalsIgnoreCase(r8.header(\"Transfer\-Encoding\")) == false) goto L_0x0041\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public static boolean okhttp3.internal.http.HttpHeaders.hasBody((r8v0 okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
}

