digraph "CFG forokhttp3.internal.http.HttpHeaders.varyMatches(Lokhttp3\/Response;Lokhttp3\/Headers;Lokhttp3\/Request;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.util.Set) = (r2 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.varyFields(okhttp3.Response):java.util.Set type: STATIC \l0x0004: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  (r1 I:java.util.List) = (r3 I:okhttp3.Headers), (r0 I:java.lang.String) okhttp3.Headers.values(java.lang.String):java.util.List type: VIRTUAL \l0x0018: INVOKE  (r0 I:java.util.List) = (r4 I:okhttp3.Request), (r0 I:java.lang.String) okhttp3.Request.headers(java.lang.String):java.util.List type: VIRTUAL \l0x001c: INVOKE  (r0 I:boolean) = (r1 I:java.lang.Object), (r0 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: RETURN  (r2 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean okhttp3.internal.http.HttpHeaders.varyMatches((r2 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

