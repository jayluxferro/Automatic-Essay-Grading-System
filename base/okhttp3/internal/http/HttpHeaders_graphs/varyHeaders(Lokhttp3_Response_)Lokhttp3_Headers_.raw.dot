digraph "CFG forokhttp3.internal.http.HttpHeaders.varyHeaders(Lokhttp3\/Response;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Response) = (r1 I:okhttp3.Response) okhttp3.Response.networkResponse():okhttp3.Response type: VIRTUAL \l0x0004: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0008: INVOKE  (r0 I:okhttp3.Headers) = (r0 I:okhttp3.Request) okhttp3.Request.headers():okhttp3.Headers type: VIRTUAL \l0x000c: INVOKE  (r1 I:okhttp3.Headers) = (r1 I:okhttp3.Response) okhttp3.Response.headers():okhttp3.Headers type: VIRTUAL \l0x0010: INVOKE  (r1 I:okhttp3.Headers) = (r0 I:okhttp3.Headers), (r1 I:okhttp3.Headers) okhttp3.internal.http.HttpHeaders.varyHeaders(okhttp3.Headers, okhttp3.Headers):okhttp3.Headers type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: RETURN  (r1 I:okhttp3.Headers) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Headers okhttp3.internal.http.HttpHeaders.varyHeaders((r1 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

