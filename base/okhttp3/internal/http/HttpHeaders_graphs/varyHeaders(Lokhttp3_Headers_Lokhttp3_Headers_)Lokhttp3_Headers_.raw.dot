digraph "CFG forokhttp3.internal.http.HttpHeaders.varyHeaders(Lokhttp3\/Headers;Lokhttp3\/Headers;)Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:java.util.Set) = (r6 I:okhttp3.Headers) okhttp3.internal.http.HttpHeaders.varyFields(okhttp3.Headers):java.util.Set type: STATIC \l0x0004: INVOKE  (r0 I:boolean) = (r6 I:java.util.Set) java.util.Set.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: NEW_INSTANCE  (r5 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x000c: INVOKE  (r5 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x000f: INVOKE  (r5 I:okhttp3.Headers) = (r5 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  (r5 I:okhttp3.Headers) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0016: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: INVOKE  (r2 I:int) = (r5 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: INVOKE  (r3 I:java.lang.String) = (r5 I:okhttp3.Headers), (r1 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x0024: INVOKE  (r4 I:boolean) = (r6 I:java.util.Set), (r3 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  (r4 I:java.lang.String) = (r5 I:okhttp3.Headers), (r1 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x002e: INVOKE  \l  (r0 I:okhttp3.Headers$Builder)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.add(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: INVOKE  (r5 I:okhttp3.Headers) = (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: RETURN  (r5 I:okhttp3.Headers) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Headers okhttp3.internal.http.HttpHeaders.varyHeaders((r5 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_10 -> Node_11;
}

