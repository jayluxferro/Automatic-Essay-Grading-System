digraph "CFG forokhttp3.internal.http.HttpHeaders.skipWhitespace(Ljava\/lang\/String;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:6:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:6:0x0013\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r3 \>= r2.length()) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|char r0 = r2.charAt(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r0 == ' ') goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r0 == 9) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:6:0x0013\l|int r3 = r3 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.http.HttpHeaders.skipWhitespace((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_8[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_0;
Node_8 -> Node_7;
Node_9 -> Node_7;
Node_10 -> Node_6;
Node_11 -> Node_6;
}

