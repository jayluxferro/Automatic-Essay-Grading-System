digraph "CFG forokhttp3.internal.http.HttpHeaders.parseSeconds(Ljava\/lang\/String;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:long) = (r2 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0019 \}, TRY_ENTER]\l0x0003: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x0007: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0011: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0017 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: RETURN  (r2 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: CAST  (r2 I:int) = (int) (r0 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: RETURN  (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: RETURN  (r3 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public static int okhttp3.internal.http.HttpHeaders.parseSeconds((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_13;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_13 -> Node_12;
}

