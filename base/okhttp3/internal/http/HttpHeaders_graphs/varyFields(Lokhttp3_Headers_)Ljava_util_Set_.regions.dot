digraph "CFG forokhttp3.internal.http.HttpHeaders.varyFields(Lokhttp3\/Headers;)Ljava\/util\/Set;" {
subgraph cluster_Region_882882372 {
label = "R(3:0|(2:(4:4|(1:6)|7|(1:9))(0)|10)|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Set java.util.Set\<java.lang.String\> r0 = java.util.Collections.emptySet()\lint int r1 = r8.size()\ljava.util.Set\<java.lang.String\> r3 = r0\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_796323743 {
label = "LOOP:0: (2:(4:4|(1:6)|7|(1:9))(0)|10)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r0 r3 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:0:0x0000, B:10:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 java.util.Set\<java.lang.String\>) = (r3v0 java.util.Set\<java.lang.String\>), (r3v2 java.util.Set\<java.lang.String\>) binds: [B:0:0x0000, B:10:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:10:0x0041\l|if (r0 \< r1) goto L_0x000d\l}"];
subgraph cluster_Region_2108589715 {
label = "R(2:(4:4|(1:6)|7|(1:9))(0)|10)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2027428554 {
label = "IF [B:3:0x0017] THEN: R(4:4|(1:6)|7|(1:9)) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0017|if (\"Vary\".equalsIgnoreCase(r8.name(r0)) != false) goto L_0x001a\l}"];
subgraph cluster_Region_1436736060 {
label = "R(4:4|(1:6)|7|(1:9))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001a|java.lang.String java.lang.String r4 = r8.value(r0)\l}"];
subgraph cluster_IfRegion_751837413 {
label = "IF [B:5:0x0022] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0022|if (r3.isEmpty() == true) goto L_0x0024\l}"];
subgraph cluster_Region_1039597708 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0024|java.util.TreeSet r3 = new java.util.TreeSet\<\>(java.lang.String.CASE_INSENSITIVE_ORDER)\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x002b|PHI: r3 \l  PHI: (r3v3 java.util.Set\<java.lang.String\>) = (r3v1 java.util.Set\<java.lang.String\>), (r3v4 java.util.Set\<java.lang.String\>) binds: [B:5:0x0022, B:6:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|int int r5 = r4.split(\",\").length\lint r6 = 0\l}"];
subgraph cluster_LoopRegion_481106888 {
label = "LOOP:1: (1:9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0033|LOOP_START\lPHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:7:0x002b, B:9:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0033\-\>B:9:0x0035\l|if (r6 \< r5) goto L_0x0035\l}"];
subgraph cluster_Region_1706858412 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0035|LOOP_END\lLOOP:1: B:8:0x0033\-\>B:9:0x0035\l|r3.add(r7.trim())\lr6++\l}"];
}
}
}
subgraph cluster_Region_360159889 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_10 [shape=record,label="{10\:\ 0x0041|LOOP_END\lPHI: r3 \l  PHI: (r3v2 java.util.Set\<java.lang.String\>) = (r3v1 java.util.Set\<java.lang.String\>), (r3v3 java.util.Set\<java.lang.String\>) binds: [B:14:0x0041, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:10:0x0041\l|r0++\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0044|RETURN\l|return r3\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000d}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0044|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0041|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0041|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.Set\<java.lang.String\> okhttp3.internal.http.HttpHeaders.varyFields((r8v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokhttp3\/Headers;, ), Ljava\/util\/Set\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_13[style=dashed];
Node_9 -> Node_8;
Node_10 -> Node_1;
Node_2 -> Node_3;
Node_12 -> Node_11;
Node_13 -> Node_10;
Node_14 -> Node_10;
}

