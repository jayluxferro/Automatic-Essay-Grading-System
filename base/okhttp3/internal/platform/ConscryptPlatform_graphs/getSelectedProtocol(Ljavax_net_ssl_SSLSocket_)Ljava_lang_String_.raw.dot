digraph "CFG forokhttp3.internal.platform.ConscryptPlatform.getSelectedProtocol(Ljavax\/net\/ssl\/SSLSocket;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:javax.net.ssl.SSLSocket) org.conscrypt.Conscrypt.isConscrypt(javax.net.ssl.SSLSocket):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:java.lang.String) = (r2 I:javax.net.ssl.SSLSocket) org.conscrypt.Conscrypt.getApplicationProtocol(javax.net.ssl.SSLSocket):java.lang.String type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:okhttp3.internal.platform.Platform)\l  (r2 I:javax.net.ssl.SSLSocket)\l okhttp3.internal.platform.Platform.getSelectedProtocol(javax.net.ssl.SSLSocket):java.lang.String type: SUPER \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.platform.ConscryptPlatform.getSelectedProtocol((r1 'this' I:okhttp3.internal.platform.ConscryptPlatform A[IMMUTABLE_TYPE, THIS]), (r2 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

