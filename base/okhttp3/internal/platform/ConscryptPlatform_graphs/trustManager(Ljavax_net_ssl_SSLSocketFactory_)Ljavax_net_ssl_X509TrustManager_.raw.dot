digraph "CFG forokhttp3.internal.platform.ConscryptPlatform.trustManager(Ljavax\/net\/ssl\/SSLSocketFactory;)Ljavax\/net\/ssl\/X509TrustManager;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:javax.net.ssl.SSLSocketFactory) org.conscrypt.Conscrypt.isConscrypt(javax.net.ssl.SSLSocketFactory):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r3 I:javax.net.ssl.X509TrustManager) = \l  (r2 I:okhttp3.internal.platform.Platform)\l  (r3 I:javax.net.ssl.SSLSocketFactory)\l okhttp3.internal.platform.Platform.trustManager(javax.net.ssl.SSLSocketFactory):javax.net.ssl.X509TrustManager type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r3 I:javax.net.ssl.X509TrustManager) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"sslParameters\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|SYNTHETIC\lSplitter:B:5:0x000f\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000f\l|0x000f: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:java.lang.Object)\l  (r0 I:java.lang.Class)\l  (r1 I:java.lang.String)\l okhttp3.internal.platform.ConscryptPlatform.readFieldOrNull(java.lang.Object, java.lang.Class, java.lang.String):java.lang.Object type: STATIC A[Catch:\{ Exception \-\> 0x0022 \}, TRY_ENTER]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0020 A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST_CLASS  (r0 I:java.lang.Class\<javax.net.ssl.X509TrustManager\>) =  javax.net.ssl.X509TrustManager.class A[Catch:\{ Exception \-\> 0x0022 \}]\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"x509TrustManager\" A[Catch:\{ Exception \-\> 0x0022 \}]\l0x0019: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:java.lang.Object)\l  (r0 I:java.lang.Class)\l  (r1 I:java.lang.String)\l okhttp3.internal.platform.ConscryptPlatform.readFieldOrNull(java.lang.Object, java.lang.Class, java.lang.String):java.lang.Object type: STATIC A[Catch:\{ Exception \-\> 0x0022 \}]\l0x001d: CHECK_CAST  (r3 I:javax.net.ssl.X509TrustManager) = (javax.net.ssl.X509TrustManager) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: RETURN  (r3 I:javax.net.ssl.X509TrustManager) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r3 I:javax.net.ssl.X509TrustManager) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|ExcHandler: Exception null\lSplitter:B:5:0x000f\l|0x0022: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException \l0x0025: CONST_STR  (r1 I:java.lang.String) =  \"clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on Conscrypt\" \l0x0027: INVOKE  \l  (r0 I:java.lang.UnsupportedOperationException)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Throwable)\l java.lang.UnsupportedOperationException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public javax.net.ssl.X509TrustManager okhttp3.internal.platform.ConscryptPlatform.trustManager((r2 'this' I:okhttp3.internal.platform.ConscryptPlatform A[IMMUTABLE_TYPE, THIS]), (r3 I:javax.net.ssl.SSLSocketFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

