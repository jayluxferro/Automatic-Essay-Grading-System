digraph "CFG forokhttp3.internal.platform.ConscryptPlatform.configureSslSocketFactory(Ljavax\/net\/ssl\/SSLSocketFactory;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:javax.net.ssl.SSLSocketFactory) org.conscrypt.Conscrypt.isConscrypt(javax.net.ssl.SSLSocketFactory):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: INVOKE  (r2 I:javax.net.ssl.SSLSocketFactory), (r0 I:boolean) org.conscrypt.Conscrypt.setUseEngineSocket(javax.net.ssl.SSLSocketFactory, boolean):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.ConscryptPlatform.configureSslSocketFactory((r1 'this' I:okhttp3.internal.platform.ConscryptPlatform A[IMMUTABLE_TYPE, THIS]), (r2 I:javax.net.ssl.SSLSocketFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

