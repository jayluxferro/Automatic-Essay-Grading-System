digraph "CFG forokhttp3.internal.platform.ConscryptPlatform.configureTlsExtensions(Ljavax\/net\/ssl\/SSLSocket;Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:javax.net.ssl.SSLSocket) org.conscrypt.Conscrypt.isConscrypt(javax.net.ssl.SSLSocket):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  (r2 I:javax.net.ssl.SSLSocket), (r0 I:boolean) org.conscrypt.Conscrypt.setUseSessionTickets(javax.net.ssl.SSLSocket, boolean):void type: STATIC \l0x000c: INVOKE  (r2 I:javax.net.ssl.SSLSocket), (r3 I:java.lang.String) org.conscrypt.Conscrypt.setHostname(javax.net.ssl.SSLSocket, java.lang.String):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r3 I:java.util.List) = (r4 I:java.util.List) okhttp3.internal.platform.Platform.alpnProtocolNames(java.util.List):java.util.List type: STATIC \l0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: NEW_ARRAY  (r4 I:java.lang.String[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0016: INVOKE  (r3 I:java.lang.Object[]) = (r3 I:java.util.List), (r4 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x001a: CHECK_CAST  (r3 I:java.lang.String[]) = (java.lang.String[]) (r3 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r2 I:javax.net.ssl.SSLSocket), (r3 I:java.lang.String[]) org.conscrypt.Conscrypt.setApplicationProtocols(javax.net.ssl.SSLSocket, java.lang.String[]):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  \l  (r1 I:okhttp3.internal.platform.Platform)\l  (r2 I:javax.net.ssl.SSLSocket)\l  (r3 I:java.lang.String)\l  (r4 I:java.util.List)\l okhttp3.internal.platform.Platform.configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List):void type: SUPER \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.ConscryptPlatform.configureTlsExtensions((r1 'this' I:okhttp3.internal.platform.ConscryptPlatform A[IMMUTABLE_TYPE, THIS]), (r2 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/SSLSocket;, Ljava\/lang\/String;, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

