digraph "CFG forokhttp3.internal.platform.Jdk9Platform.getSelectedProtocol(Ljavax\/net\/ssl\/SSLSocket;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.lang.reflect.Method) = (r2 I:okhttp3.internal.platform.Jdk9Platform) okhttp3.internal.platform.Jdk9Platform.getProtocolMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l0x0003: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l0x0005: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l0x0009: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST_STR  (r0 I:java.lang.String) =  \"\" A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l0x000f: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}]\l0x0012: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r3 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: RETURN  (r3 I:java.lang.String) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:0:0x0000\l|0x0019: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: CONST_STR  (r0 I:java.lang.String) =  \"unable to get selected protocols\" \l0x001c: INVOKE  (r3 I:java.lang.AssertionError) = (r0 I:java.lang.String), (r3 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.platform.Jdk9Platform.getSelectedProtocol((r2 'this' I:okhttp3.internal.platform.Jdk9Platform A[IMMUTABLE_TYPE, THIS]), (r3 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

