digraph "CFG forokhttp3.internal.platform.Jdk9Platform.configureTlsExtensions(Ljavax\/net\/ssl\/SSLSocket;Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r6 I:javax.net.ssl.SSLParameters) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getSSLParameters():javax.net.ssl.SSLParameters type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}, TRY_ENTER]\l0x0004: INVOKE  (r7 I:java.util.List) = (r7 I:java.util.List) okhttp3.internal.platform.Jdk9Platform.alpnProtocolNames(java.util.List):java.util.List type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x0008: IGET  (r0 I:java.lang.reflect.Method) = (r4 I:okhttp3.internal.platform.Jdk9Platform) okhttp3.internal.platform.Jdk9Platform.setProtocolMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x000b: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x000e: INVOKE  (r3 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x0012: NEW_ARRAY  (r3 I:java.lang.String[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x0014: INVOKE  (r7 I:java.lang.Object[]) = (r7 I:java.util.List), (r3 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x0018: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x001a: INVOKE  \l  (r0 I:java.lang.reflect.Method)\l  (r6 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}]\l0x001d: INVOKE  \l  (r5 I:javax.net.ssl.SSLSocket)\l  (r6 I:javax.net.ssl.SSLParameters)\l javax.net.ssl.SSLSocket.setSSLParameters(javax.net.ssl.SSLParameters):void type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0021 \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:0:0x0000\l|0x0021: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CONST_STR  (r6 I:java.lang.String) =  \"unable to set ssl parameters\" \l0x0024: INVOKE  (r5 I:java.lang.AssertionError) = (r6 I:java.lang.String), (r5 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.Jdk9Platform.configureTlsExtensions((r4 'this' I:okhttp3.internal.platform.Jdk9Platform A[IMMUTABLE_TYPE, THIS]), (r5 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/SSLSocket;, Ljava\/lang\/String;, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

