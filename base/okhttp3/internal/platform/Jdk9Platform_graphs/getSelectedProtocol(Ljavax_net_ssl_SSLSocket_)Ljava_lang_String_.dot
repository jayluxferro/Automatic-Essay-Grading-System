digraph "CFG forokhttp3.internal.platform.Jdk9Platform.getSelectedProtocol(Ljavax\/net\/ssl\/SSLSocket;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}\lSplitter:B:0:0x0000\l|java.lang.String r3 = (java.lang.String) r2.getProtocolMethod.invoke(r3, new java.lang.Object[0])     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}\l|if (r3 == null) goto L_?     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0019 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r3.equals(\"\") == false) goto L_0x0016\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler: IllegalAccessException \| InvocationTargetException (r3v1 'e' java.lang.ReflectiveOperationException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x0020|throw okhttp3.internal.Util.assertionError(\"unable to get selected protocols\", r3)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.platform.Jdk9Platform.getSelectedProtocol((r2v0 'this' okhttp3.internal.platform.Jdk9Platform A[IMMUTABLE_TYPE, THIS]), (r3v0 javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
}

