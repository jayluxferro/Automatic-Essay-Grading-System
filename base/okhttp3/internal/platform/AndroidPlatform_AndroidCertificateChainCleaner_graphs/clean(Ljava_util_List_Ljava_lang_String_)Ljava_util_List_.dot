digraph "CFG forokhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.clean(Ljava\/util\/List;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}\lSplitter:B:0:0x0000\l|java.lang.reflect.Method r0 = r4.checkServerTrusted     \/\/ Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}\ljava.lang.Object r1 = r4.x509TrustManagerExtensions     \/\/ Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}\ljava.lang.Object[] r2 = new java.lang.Object[]\{(java.security.cert.X509Certificate[]) r5.toArray(new java.security.cert.X509Certificate[r5.size()]), \"RSA\", r6\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0024|RETURN\l|return (java.util.List) r0.invoke(r1, r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|ExcHandler: IllegalAccessException (r5v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.IllegalAccessException r5 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026}"];
Node_5 [shape=record,label="{5\:\ 0x002b|throw new java.lang.AssertionError(r5)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|ExcHandler: InvocationTargetException (r5v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.reflect.InvocationTargetException r5 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|javax.net.ssl.SSLPeerUnverifiedException r6 = new javax.net.ssl.SSLPeerUnverifiedException(r5.getMessage())\lr6.initCause(r5)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|throw r6\l}"];
MethodNode[shape=record,label="{public java.util.List\<java.security.cert.Certificate\> okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.clean((r4v0 'this' okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

