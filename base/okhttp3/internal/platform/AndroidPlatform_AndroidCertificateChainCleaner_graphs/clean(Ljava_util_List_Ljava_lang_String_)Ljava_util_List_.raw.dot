digraph "CFG forokhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.clean(Ljava\/util\/List;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}, TRY_ENTER]\l0x0004: NEW_ARRAY  (r0 I:java.security.cert.X509Certificate[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.security.cert.X509Certificate[] A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0006: INVOKE  (r5 I:java.lang.Object[]) = (r5 I:java.util.List), (r0 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x000a: CHECK_CAST  (r5 I:java.security.cert.X509Certificate[]) = (java.security.cert.X509Certificate[]) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x000c: IGET  (r0 I:java.lang.reflect.Method) = \l  (r4 I:okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner)\l okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.checkServerTrusted java.lang.reflect.Method A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x000e: IGET  (r1 I:java.lang.Object) = \l  (r4 I:okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner)\l okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.x509TrustManagerExtensions java.lang.Object A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0011: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0014: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0016: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0017: CONST_STR  (r3 I:java.lang.String) =  \"RSA\" A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0019: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x001b: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x001c: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x001e: INVOKE  (r5 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}]\l0x0022: CHECK_CAST  (r5 I:java.util.List) = (java.util.List) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0024|0x0024: RETURN  (r5 I:java.util.List\<java.security.cert.Certificate\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|ExcHandler: IllegalAccessException null\lSplitter:B:0:0x0000\l|0x0025: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: NEW_INSTANCE  (r6 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0028: INVOKE  (r6 I:java.lang.AssertionError), (r5 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|ExcHandler: InvocationTargetException null\lSplitter:B:0:0x0000\l|0x002c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: NEW_INSTANCE  (r6 I:javax.net.ssl.SSLPeerUnverifiedException) =  javax.net.ssl.SSLPeerUnverifiedException \l0x002f: INVOKE  (r0 I:java.lang.String) = (r5 I:java.lang.reflect.InvocationTargetException) java.lang.reflect.InvocationTargetException.getMessage():java.lang.String type: VIRTUAL \l0x0033: INVOKE  \l  (r6 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r0 I:java.lang.String)\l javax.net.ssl.SSLPeerUnverifiedException.\<init\>(java.lang.String):void type: DIRECT \l0x0036: INVOKE  \l  (r6 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r5 I:java.lang.Throwable)\l javax.net.ssl.SSLPeerUnverifiedException.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.List\<java.security.cert.Certificate\> okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner.clean((r4 'this' I:okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

