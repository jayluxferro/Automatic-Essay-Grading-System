digraph "CFG forokhttp3.internal.platform.AndroidPlatform.CloseGuard.warnIfOpen(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.lang.reflect.Method) = (r3 I:okhttp3.internal.platform.AndroidPlatform$CloseGuard) okhttp3.internal.platform.AndroidPlatform.CloseGuard.warnIfOpenMethod java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x000b \}, TRY_ENTER]\l0x0005: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x000b \}]\l0x0007: INVOKE  \l  (r1 I:java.lang.reflect.Method)\l  (r4 I:java.lang.Object)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:2:0x0003\l}"];
MethodNode[shape=record,label="{boolean okhttp3.internal.platform.AndroidPlatform.CloseGuard.warnIfOpen((r3 'this' I:okhttp3.internal.platform.AndroidPlatform$CloseGuard A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

