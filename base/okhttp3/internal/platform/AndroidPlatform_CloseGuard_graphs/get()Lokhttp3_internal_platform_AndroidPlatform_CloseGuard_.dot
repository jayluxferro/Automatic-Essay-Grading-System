digraph "CFG forokhttp3.internal.platform.AndroidPlatform.CloseGuard.get()Lokhttp3\/internal\/platform\/AndroidPlatform$CloseGuard;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ Exception \-\> 0x0027 \}\lSplitter:B:1:0x0003\l|java.lang.Class r1 = java.lang.Class.forName(\"dalvik.system.CloseGuard\")     \/\/ Catch:\{ Exception \-\> 0x0027 \}\ljava.lang.reflect.Method r2 = r1.getMethod(\"get\", new java.lang.Class[0])     \/\/ Catch:\{ Exception \-\> 0x0027 \}\ljava.lang.Class[] r5 = new java.lang.Class[]\{java.lang.String.class\}\ljava.lang.reflect.Method r4 = r1.getMethod(\"open\", r5)     \/\/ Catch:\{ Exception \-\> 0x0027 \}\ljava.lang.reflect.Method r1 = r1.getMethod(\"warnIfOpen\", new java.lang.Class[0])     \/\/ Catch:\{ Exception \-\> 0x0027 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|r0 = r2\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|r1 = null\lr4 = null\l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: Exception (unused java.lang.Exception)\lSplitter:B:1:0x0003\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|PHI: r0 r1 r4 \l  PHI: (r0v1 java.lang.reflect.Method) = (r0v0 java.lang.reflect.Method), (r0v2 java.lang.reflect.Method) binds: [B:4:0x0027, B:3:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 java.lang.reflect.Method) = (r1v2 java.lang.reflect.Method), (r1v4 java.lang.reflect.Method) binds: [B:4:0x0027, B:3:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v0 java.lang.reflect.Method) = (r4v1 java.lang.reflect.Method), (r4v4 java.lang.reflect.Method) binds: [B:4:0x0027, B:3:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|RETURN\l|return new okhttp3.internal.platform.AndroidPlatform.CloseGuard(r0, r4, r1)\l}"];
MethodNode[shape=record,label="{static okhttp3.internal.platform.AndroidPlatform$CloseGuard okhttp3.internal.platform.AndroidPlatform.CloseGuard.get() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_6;
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
}

