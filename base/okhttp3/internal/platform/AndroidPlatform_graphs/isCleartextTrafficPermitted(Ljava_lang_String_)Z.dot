digraph "CFG forokhttp3.internal.platform.AndroidPlatform.isCleartextTrafficPermitted(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassNotFoundException \| NoSuchMethodException \-\> 0x0023, IllegalAccessException \| IllegalArgumentException \| InvocationTargetException \-\> 0x001b \}\lSplitter:B:1:0x0002\l|java.lang.Class r0 = java.lang.Class.forName(\"android.security.NetworkSecurityPolicy\")     \/\/ Catch:\{ ClassNotFoundException \| NoSuchMethodException \-\> 0x0023, IllegalAccessException \| IllegalArgumentException \| InvocationTargetException \-\> 0x001b \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|RETURN\l|return api24IsCleartextTrafficPermitted(r5, r0, r0.getMethod(\"getInstance\", new java.lang.Class[0]).invoke((java.lang.Object) null, new java.lang.Object[0]))\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|ExcHandler: IllegalAccessException \| IllegalArgumentException \| InvocationTargetException (r5v2 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0002\l|java.lang.Throwable r5 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c}"];
Node_6 [shape=record,label="{6\:\ 0x0022|throw okhttp3.internal.Util.assertionError(\"unable to determine cleartext support\", r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException \| NoSuchMethodException (unused java.lang.Throwable)\lSplitter:B:1:0x0002\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|RETURN\l|return super.isCleartextTrafficPermitted(r5)\l}"];
MethodNode[shape=record,label="{public boolean okhttp3.internal.platform.AndroidPlatform.isCleartextTrafficPermitted((r4v0 'this' okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

