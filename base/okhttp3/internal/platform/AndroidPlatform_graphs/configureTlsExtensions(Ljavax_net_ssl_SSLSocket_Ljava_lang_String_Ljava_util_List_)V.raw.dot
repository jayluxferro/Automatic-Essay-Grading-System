digraph "CFG forokhttp3.internal.platform.AndroidPlatform.configureTlsExtensions(Ljavax\/net\/ssl\/SSLSocket;Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r2 I:okhttp3.internal.platform.OptionalMethod\<java.net.Socket\>) = (r5 I:okhttp3.internal.platform.AndroidPlatform) okhttp3.internal.platform.AndroidPlatform.setUseSessionTickets okhttp3.internal.platform.OptionalMethod \l0x0006: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0008: INVOKE  (r4 I:java.lang.Boolean) = (r1 I:boolean) java.lang.Boolean.valueOf(boolean):java.lang.Boolean type: STATIC \l0x000c: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x000e: INVOKE  \l  (r2 I:okhttp3.internal.platform.OptionalMethod)\l  (r6 I:java.lang.Object)\l  (r3 I:java.lang.Object[])\l okhttp3.internal.platform.OptionalMethod.invokeOptionalWithoutCheckedException(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL \l0x0011: IGET  (r2 I:okhttp3.internal.platform.OptionalMethod\<java.net.Socket\>) = (r5 I:okhttp3.internal.platform.AndroidPlatform) okhttp3.internal.platform.AndroidPlatform.setHostname okhttp3.internal.platform.OptionalMethod \l0x0013: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0015: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0017: INVOKE  \l  (r2 I:okhttp3.internal.platform.OptionalMethod)\l  (r6 I:java.lang.Object)\l  (r3 I:java.lang.Object[])\l okhttp3.internal.platform.OptionalMethod.invokeOptionalWithoutCheckedException(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IGET  (r7 I:okhttp3.internal.platform.OptionalMethod\<java.net.Socket\>) = (r5 I:okhttp3.internal.platform.AndroidPlatform) okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols okhttp3.internal.platform.OptionalMethod \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IGET  (r7 I:okhttp3.internal.platform.OptionalMethod\<java.net.Socket\>) = (r5 I:okhttp3.internal.platform.AndroidPlatform) okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols okhttp3.internal.platform.OptionalMethod \l0x0020: INVOKE  (r7 I:boolean) = \l  (r7 I:okhttp3.internal.platform.OptionalMethod)\l  (r6 I:java.lang.Object)\l okhttp3.internal.platform.OptionalMethod.isSupported(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0028: INVOKE  (r8 I:byte[]) = (r8 I:java.util.List) okhttp3.internal.platform.AndroidPlatform.concatLengthPrefixed(java.util.List):byte[] type: STATIC \l0x002c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x002e: IGET  (r8 I:okhttp3.internal.platform.OptionalMethod\<java.net.Socket\>) = (r5 I:okhttp3.internal.platform.AndroidPlatform) okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols okhttp3.internal.platform.OptionalMethod \l0x0030: INVOKE  \l  (r8 I:okhttp3.internal.platform.OptionalMethod)\l  (r6 I:java.lang.Object)\l  (r7 I:java.lang.Object[])\l okhttp3.internal.platform.OptionalMethod.invokeWithoutCheckedException(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.AndroidPlatform.configureTlsExtensions((r5 'this' I:okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS]), (r6 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/SSLSocket;, Ljava\/lang\/String;, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

