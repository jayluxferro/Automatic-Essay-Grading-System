digraph "CFG forokhttp3.internal.platform.AndroidPlatform.connectSocket(Ljava\/net\/Socket;Ljava\/net\/InetSocketAddress;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  \l  (r1 I:java.net.Socket)\l  (r2 I:java.net.SocketAddress)\l  (r3 I:int)\l java.net.Socket.connect(java.net.SocketAddress, int):void type: VIRTUAL A[Catch:\{ AssertionError \-\> 0x0023, SecurityException \-\> 0x0017, ClassCastException \-\> 0x0004 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|ExcHandler: ClassCastException null\lSplitter:B:0:0x0000\l|0x0004: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: SGET  (r2 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0007: CONST  (r3 I:?[int, float, short, byte, char]) = (26 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException \l0x000d: CONST_STR  (r3 I:java.lang.String) =  \"Exception in connect\" \l0x000f: INVOKE  (r2 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l0x0012: INVOKE  (r2 I:java.io.IOException), (r1 I:java.lang.Throwable) java.io.IOException.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|ExcHandler: SecurityException null\lSplitter:B:0:0x0000\l|0x0017: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException \l0x001a: CONST_STR  (r3 I:java.lang.String) =  \"Exception in connect\" \l0x001c: INVOKE  (r2 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l0x001f: INVOKE  (r2 I:java.io.IOException), (r1 I:java.lang.Throwable) java.io.IOException.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|ExcHandler: AssertionError null\lSplitter:B:0:0x0000\l|0x0023: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: INVOKE  (r2 I:boolean) = (r1 I:java.lang.AssertionError) okhttp3.internal.Util.isAndroidGetsocknameError(java.lang.AssertionError):boolean type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0030 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException \l0x002c: INVOKE  (r2 I:java.io.IOException), (r1 I:java.lang.Throwable) java.io.IOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.AndroidPlatform.connectSocket((r0 'this' I:okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS]), (r1 I:java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.net.InetSocketAddress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_12;
Node_0 -> Node_9;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_1 -> Node_9;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
}

