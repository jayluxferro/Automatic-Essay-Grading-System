digraph "CFG forokhttp3.internal.platform.AndroidPlatform.api23IsCleartextTrafficPermitted(Ljava\/lang\/String;Ljava\/lang\/Class;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1914262226 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_969382026 {
label = "Try: R(1:3) catches: R(1:6)";
node [shape=record,color=blue];
subgraph cluster_Region_2136895687 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return ((java.lang.Boolean) r5.getMethod(\"isCleartextTrafficPermitted\", new java.lang.Class[0]).invoke(r6, new java.lang.Object[0])).booleanValue()\l}"];
}
subgraph cluster_Region_328612808 {
label = "R(1:6) | ExcHandler: NoSuchMethodException (unused java.lang.NoSuchMethodException)\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\l|return super.isCleartextTrafficPermitted(r4)\l}"];
}
}
}
subgraph cluster_Region_328612808 {
label = "R(1:6) | ExcHandler: NoSuchMethodException (unused java.lang.NoSuchMethodException)\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\l|return super.isCleartextTrafficPermitted(r4)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?|Catch:\{ NoSuchMethodException \-\> 0x0016 \}\lSplitter:B:1:0x0003\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0016}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lExcHandler: NoSuchMethodException (unused java.lang.NoSuchMethodException)\lSplitter:B:1:0x0003\l}"];
MethodNode[shape=record,label="{private boolean okhttp3.internal.platform.AndroidPlatform.api23IsCleartextTrafficPermitted((r3v0 'this' okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/Object;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_4 -> Node_6;
Node_5 -> Node_4;
}

