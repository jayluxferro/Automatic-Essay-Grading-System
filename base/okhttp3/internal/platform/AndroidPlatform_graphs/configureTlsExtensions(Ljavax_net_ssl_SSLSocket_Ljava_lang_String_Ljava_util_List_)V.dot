digraph "CFG forokhttp3.internal.platform.AndroidPlatform.configureTlsExtensions(Ljavax\/net\/ssl\/SSLSocket;Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7 == null) goto L_0x001a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|okhttp3.internal.platform.OptionalMethod\<java.net.Socket\> r2 = r5.setUseSessionTickets\ljava.lang.Object[] r3 = new java.lang.Object[]\{true\}\lr2.invokeOptionalWithoutCheckedException(r6, r3)\lokhttp3.internal.platform.OptionalMethod\<java.net.Socket\> r2 = r5.setHostname\ljava.lang.Object[] r3 = new java.lang.Object[]\{r7\}\lr2.invokeOptionalWithoutCheckedException(r6, r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a}"];
Node_4 [shape=record,label="{4\:\ 0x001c|if (r5.setAlpnProtocols == null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r5.setAlpnProtocols.isSupported(r6) == false) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|java.lang.Object[] r7 = new java.lang.Object[]\{concatLengthPrefixed(r8)\}\lr5.setAlpnProtocols.invokeWithoutCheckedException(r6, r7)\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.AndroidPlatform.configureTlsExtensions((r5v0 'this' okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS]), (r6v0 javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/SSLSocket;, Ljava\/lang\/String;, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
}

