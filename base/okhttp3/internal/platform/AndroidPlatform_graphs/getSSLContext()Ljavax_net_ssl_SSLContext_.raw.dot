digraph "CFG forokhttp3.internal.platform.AndroidPlatform.getSSLContext()Ljavax\/net\/ssl\/SSLContext;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (22 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1.2\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|SYNTHETIC\lSplitter:B:5:0x000e\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000e\l|0x000e: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:java.lang.String) javax.net.ssl.SSLContext.getInstance(java.lang.String):javax.net.ssl.SSLContext type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x0013 \}, TRY_ENTER]\l0x0011: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN  (r0 I:javax.net.ssl.SSLContext) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: CONST_STR  (r0 I:java.lang.String) =  \"TLS\" \l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: NoSuchAlgorithmException null\lSplitter:B:5:0x000e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\lSplitter:B:10:0x0015\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0015\l|0x0015: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:java.lang.String) javax.net.ssl.SSLContext.getInstance(java.lang.String):javax.net.ssl.SSLContext type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x001a \}, TRY_ENTER]\l0x0018: NOP   A[TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: RETURN  (r0 I:javax.net.ssl.SSLContext) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:10:0x0015\l|0x001a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"No TLS provider\" \l0x001f: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.lang.IllegalStateException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public javax.net.ssl.SSLContext okhttp3.internal.platform.AndroidPlatform.getSSLContext((r3 'this' I:okhttp3.internal.platform.AndroidPlatform A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

