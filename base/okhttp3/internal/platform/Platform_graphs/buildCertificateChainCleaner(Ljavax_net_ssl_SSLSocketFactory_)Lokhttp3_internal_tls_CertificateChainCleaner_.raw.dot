digraph "CFG forokhttp3.internal.platform.Platform.buildCertificateChainCleaner(Ljavax\/net\/ssl\/SSLSocketFactory;)Lokhttp3\/internal\/tls\/CertificateChainCleaner;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:javax.net.ssl.X509TrustManager) = \l  (r3 I:okhttp3.internal.platform.Platform)\l  (r4 I:javax.net.ssl.SSLSocketFactory)\l okhttp3.internal.platform.Platform.trustManager(javax.net.ssl.SSLSocketFactory):javax.net.ssl.X509TrustManager type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r4 I:okhttp3.internal.tls.CertificateChainCleaner) = \l  (r3 I:okhttp3.internal.platform.Platform)\l  (r0 I:javax.net.ssl.X509TrustManager)\l okhttp3.internal.platform.Platform.buildCertificateChainCleaner(javax.net.ssl.X509TrustManager):okhttp3.internal.tls.CertificateChainCleaner type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:okhttp3.internal.tls.CertificateChainCleaner) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"Unable to extract the trust manager on \" \l0x0014: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r2 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x001b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x001e: CONST_STR  (r2 I:java.lang.String) =  \", sslSocketFactory is \" \l0x0020: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0023: INVOKE  (r4 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.internal.tls.CertificateChainCleaner okhttp3.internal.platform.Platform.buildCertificateChainCleaner((r3 'this' I:okhttp3.internal.platform.Platform A[IMMUTABLE_TYPE, THIS]), (r4 I:javax.net.ssl.SSLSocketFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

