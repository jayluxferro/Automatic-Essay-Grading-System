digraph "CFG forokhttp3.internal.platform.Platform.logCloseableLeak(Ljava\/lang\/String;Ljava\/lang\/Object;)V" {
subgraph cluster_Region_1651229896 {
label = "R(2:(1:1)|2)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1364143674 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 == null) goto L_0x0002\l}"];
subgraph cluster_Region_1780140750 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|java.lang.String r2 = r2 + \" To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);\"\l}"];
}
}
Node_2 [shape=record,label="{2\:\ 0x0013|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v0 java.lang.String), (r2v3 java.lang.String) binds: [B:0:0x0000, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|log(5, r2, (java.lang.Throwable) r3)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0019}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.Platform.logCloseableLeak((r1v0 'this' okhttp3.internal.platform.Platform A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3;
}

