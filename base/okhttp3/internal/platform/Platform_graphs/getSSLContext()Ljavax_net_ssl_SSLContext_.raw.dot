digraph "CFG forokhttp3.internal.platform.Platform.getSSLContext()Ljavax\/net\/ssl\/SSLContext;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"java.specification.version\" \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) java.lang.System.getProperty(java.lang.String):java.lang.String type: STATIC \l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"1.7\" \l0x0008: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1.2\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:java.lang.String) javax.net.ssl.SSLContext.getInstance(java.lang.String):javax.net.ssl.SSLContext type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x0015 \}, TRY_ENTER]\l0x0013: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r0 I:javax.net.ssl.SSLContext) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST_STR  (r0 I:java.lang.String) =  \"TLS\" \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: NoSuchAlgorithmException null\lSplitter:B:3:0x0010\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|SYNTHETIC\lSplitter:B:8:0x0017\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0017\l|0x0017: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:java.lang.String) javax.net.ssl.SSLContext.getInstance(java.lang.String):javax.net.ssl.SSLContext type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x001c \}, TRY_ENTER]\l0x001a: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: RETURN  (r0 I:javax.net.ssl.SSLContext) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:8:0x0017\l|0x001c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001f: CONST_STR  (r2 I:java.lang.String) =  \"No TLS provider\" \l0x0021: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.lang.IllegalStateException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public javax.net.ssl.SSLContext okhttp3.internal.platform.Platform.getSSLContext((r3 'this' I:okhttp3.internal.platform.Platform A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

