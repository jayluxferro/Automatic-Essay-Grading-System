digraph "CFG forokhttp3.internal.platform.OptionalMethod.getMethod(Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.methodName java.lang.String \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:java.lang.String) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.methodName java.lang.String \l0x0007: IGET  (r2 I:java.lang.Class[]) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.methodParams java.lang.Class[] \l0x0009: INVOKE  (r4 I:java.lang.reflect.Method) = \l  (r4 I:java.lang.Class)\l  (r0 I:java.lang.String)\l  (r2 I:java.lang.Class[])\l okhttp3.internal.platform.OptionalMethod.getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r0 I:java.lang.Class\<?\>) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.returnType java.lang.Class \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r0 I:java.lang.Class\<?\>) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.returnType java.lang.Class \l0x0015: INVOKE  (r2 I:java.lang.Class) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getReturnType():java.lang.Class type: VIRTUAL \l0x0019: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class), (r2 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN  (r1 I:java.lang.reflect.Method) \l}"];
MethodNode[shape=record,label="{private java.lang.reflect.Method okhttp3.internal.platform.OptionalMethod.getMethod((r3 'this' I:okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/reflect\/Method;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
}

