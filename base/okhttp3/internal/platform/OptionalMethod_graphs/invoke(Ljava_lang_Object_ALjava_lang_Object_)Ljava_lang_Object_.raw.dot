digraph "CFG forokhttp3.internal.platform.OptionalMethod.invoke(Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.reflect.Method) = \l  (r3 I:okhttp3.internal.platform.OptionalMethod)\l  (r0 I:java.lang.Class)\l okhttp3.internal.platform.OptionalMethod.getMethod(java.lang.Class):java.lang.reflect.Method type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lSplitter:B:2:0x000a\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x000a\l|0x000a: INVOKE  (r4 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x000f \}, TRY_ENTER]\l0x000d: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r4 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: IllegalAccessException null\lSplitter:B:2:0x000a\l|0x000f: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: NEW_INSTANCE  (r5 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0012: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0014: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0017: CONST_STR  (r2 I:java.lang.String) =  \"Unexpectedly could not call: \" \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x001f: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r5 I:java.lang.AssertionError), (r0 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l0x0026: INVOKE  (r5 I:java.lang.AssertionError), (r4 I:java.lang.Throwable) java.lang.AssertionError.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: NEW_INSTANCE  (r5 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x002c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r1 I:java.lang.String) =  \"Method \" \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: IGET  (r1 I:java.lang.String) = (r3 I:okhttp3.internal.platform.OptionalMethod) okhttp3.internal.platform.OptionalMethod.methodName java.lang.String \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: CONST_STR  (r1 I:java.lang.String) =  \" not supported for object \" \l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0043: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0047: INVOKE  (r5 I:java.lang.AssertionError), (r4 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x004a|0x004a: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object okhttp3.internal.platform.OptionalMethod.invoke((r3 'this' I:okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[, Ljava\/lang\/Object;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

