digraph "CFG forokhttp3.internal.platform.OptionalMethod.invokeOptional(Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.reflect.Method) = \l  (r2 I:okhttp3.internal.platform.OptionalMethod)\l  (r0 I:java.lang.Class)\l okhttp3.internal.platform.OptionalMethod.getMethod(java.lang.Class):java.lang.reflect.Method type: DIRECT \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r1 I:java.lang.Object) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|SYNTHETIC\lSplitter:B:3:0x000c\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000c\l|0x000c: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x0011 \}, TRY_ENTER]\l0x000f: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r3 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN  (r1 I:java.lang.Object) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException null\lSplitter:B:3:0x000c\l}"];
MethodNode[shape=record,label="{public java.lang.Object okhttp3.internal.platform.OptionalMethod.invokeOptional((r2 'this' I:okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[, Ljava\/lang\/Object;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_7 -> Node_6;
}

