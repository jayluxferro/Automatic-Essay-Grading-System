digraph "CFG forokhttp3.internal.platform.OptionalMethod.getPublicMethod(Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:java.lang.reflect.Method) = \l  (r1 I:java.lang.Class)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x000d \}, TRY_ENTER]\l0x0004: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\lSplitter:B:3:0x0005\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0005\l|0x0005: INVOKE  (r2 I:int) = (r1 I:java.lang.reflect.Method) java.lang.reflect.Method.getModifiers():int type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x000e \}, TRY_ENTER]\l0x0008: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x000e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: NoSuchMethodException null\lSplitter:B:1:0x0001\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|0x000e: RETURN  (r1 I:java.lang.reflect.Method) \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: NoSuchMethodException null\lSplitter:B:3:0x0005\l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Method okhttp3.internal.platform.OptionalMethod.getPublicMethod((r1 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Class[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/String;, [, Ljava\/lang\/Class;, ), Ljava\/lang\/reflect\/Method;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_7;
Node_10 -> Node_9;
}

