digraph "CFG forokhttp3.internal.platform.OptionalMethod.invokeWithoutCheckedException(Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_191161606 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1035154370 {
label = "Try: R(1:2) catches: R(3:3|4|(2:(1:7)|(2:8|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1168032691 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return invoke(r2, r3)\l}"];
}
subgraph cluster_Region_428469082 {
label = "R(3:3|4|(2:(1:7)|(2:8|9))) | ExcHandler: InvocationTargetException (r2v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: InvocationTargetException (r2v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|java.lang.Throwable java.lang.Throwable r2 = r2.getTargetException()\l}"];
subgraph cluster_Region_218756030 {
label = "R(2:(1:7)|(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_156662023 {
label = "IF [B:5:0x000c] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r2 instanceof java.lang.RuntimeException) == true) goto L_0x000e\l}"];
subgraph cluster_Region_1405502703 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|throw ((java.lang.RuntimeException) r2)\l}"];
}
}
subgraph cluster_Region_1080593584 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0011|java.lang.AssertionError java.lang.AssertionError r3 = new java.lang.AssertionError(\"Unexpected exception\")\lr3.initCause(r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|throw r3\l}"];
}
}
}
}
}
subgraph cluster_Region_428469082 {
label = "R(3:3|4|(2:(1:7)|(2:8|9))) | ExcHandler: InvocationTargetException (r2v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: InvocationTargetException (r2v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|java.lang.Throwable java.lang.Throwable r2 = r2.getTargetException()\l}"];
subgraph cluster_Region_218756030 {
label = "R(2:(1:7)|(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_156662023 {
label = "IF [B:5:0x000c] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r2 instanceof java.lang.RuntimeException) == true) goto L_0x000e\l}"];
subgraph cluster_Region_1405502703 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|throw ((java.lang.RuntimeException) r2)\l}"];
}
}
subgraph cluster_Region_1080593584 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0011|java.lang.AssertionError java.lang.AssertionError r3 = new java.lang.AssertionError(\"Unexpected exception\")\lr3.initCause(r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|throw r3\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ InvocationTargetException \-\> 0x0005 \}\lSplitter:B:0:0x0000\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000e}"];
MethodNode[shape=record,label="{public java.lang.Object okhttp3.internal.platform.OptionalMethod.invokeWithoutCheckedException((r1v0 'this' okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r2v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[, Ljava\/lang\/Object;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_6 -> Node_7;
}

