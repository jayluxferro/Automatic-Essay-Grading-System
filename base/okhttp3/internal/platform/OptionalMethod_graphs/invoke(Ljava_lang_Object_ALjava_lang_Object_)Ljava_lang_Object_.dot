digraph "CFG forokhttp3.internal.platform.OptionalMethod.invoke(Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Method r0 = getMethod(r4.getClass())\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 == null) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lSplitter:B:2:0x000a\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ IllegalAccessException \-\> 0x000f \}\lSplitter:B:2:0x000a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return r0.invoke(r4, r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: IllegalAccessException (r4v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:2:0x000a\l|java.lang.IllegalAccessException r4 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unexpectedly could not call: \")\lr1.append(r0)\ljava.lang.AssertionError r5 = new java.lang.AssertionError(r1.toString())\lr5.initCause(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|throw r5\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Method \")\lr0.append(r3.methodName)\lr0.append(\" not supported for object \")\lr0.append(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x004a|throw new java.lang.AssertionError(r0.toString())\l}"];
MethodNode[shape=record,label="{public java.lang.Object okhttp3.internal.platform.OptionalMethod.invoke((r3v0 'this' okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r4v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[, Ljava\/lang\/Object;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

