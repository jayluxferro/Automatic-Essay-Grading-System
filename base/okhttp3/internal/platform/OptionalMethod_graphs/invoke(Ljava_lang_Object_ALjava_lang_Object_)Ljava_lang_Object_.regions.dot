digraph "CFG forokhttp3.internal.platform.OptionalMethod.invoke(Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_2009594406 {
label = "R(2:0|(1:(1:4))(2:8|9))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Method java.lang.reflect.Method r0 = getMethod(r4.getClass())\l}"];
subgraph cluster_IfRegion_1639517341 {
label = "IF [B:1:0x0008] THEN: R(1:(1:4)) ELSE: R(2:8|9)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 != null) goto L_0x000a\l}"];
subgraph cluster_Region_753489923 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_906863284 {
label = "Try: R(1:4) catches: R(3:5|6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_1042618590 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return r0.invoke(r4, r5)\l}"];
}
subgraph cluster_Region_1011175889 {
label = "R(3:5|6|7) | ExcHandler: IllegalAccessException (r4v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: IllegalAccessException (r4v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:2:0x000a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.AssertionError java.lang.AssertionError r5 = new java.lang.AssertionError(\"Unexpectedly could not call: \" + r0)\lr5.initCause(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|throw r5\l}"];
}
}
}
subgraph cluster_Region_480382347 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002a}"];
Node_9 [shape=record,label="{9\:\ 0x004a|throw new java.lang.AssertionError(\"Method \" + r3.methodName + \" not supported for object \" + r4)\l}"];
}
}
}
subgraph cluster_Region_1011175889 {
label = "R(3:5|6|7) | ExcHandler: IllegalAccessException (r4v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: IllegalAccessException (r4v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:2:0x000a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.AssertionError java.lang.AssertionError r5 = new java.lang.AssertionError(\"Unexpectedly could not call: \" + r0)\lr5.initCause(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|throw r5\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a|SYNTHETIC\lSplitter:B:2:0x000a\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|Catch:\{ IllegalAccessException \-\> 0x000f \}\lSplitter:B:2:0x000a\l}"];
MethodNode[shape=record,label="{public java.lang.Object okhttp3.internal.platform.OptionalMethod.invoke((r3v0 'this' okhttp3.internal.platform.OptionalMethod A[IMMUTABLE_TYPE, THIS]), (r4v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[, Ljava\/lang\/Object;, ), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
}

