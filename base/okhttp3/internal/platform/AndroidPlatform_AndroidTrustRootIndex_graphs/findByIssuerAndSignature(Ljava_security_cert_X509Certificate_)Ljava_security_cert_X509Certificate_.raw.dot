digraph "CFG forokhttp3.internal.platform.AndroidPlatform.AndroidTrustRootIndex.findByIssuerAndSignature(Ljava\/security\/cert\/X509Certificate;)Ljava\/security\/cert\/X509Certificate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:java.lang.reflect.Method) = \l  (r5 I:okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex)\l okhttp3.internal.platform.AndroidPlatform.AndroidTrustRootIndex.findByIssuerAndSignatureMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}, TRY_ENTER]\l0x0003: IGET  (r2 I:javax.net.ssl.X509TrustManager) = \l  (r5 I:okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex)\l okhttp3.internal.platform.AndroidPlatform.AndroidTrustRootIndex.trustManager javax.net.ssl.X509TrustManager A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x0005: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x0006: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x0009: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x000b: INVOKE  (r6 I:java.lang.Object) = \l  (r1 I:java.lang.reflect.Method)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x000f: CHECK_CAST  (r6 I:java.security.cert.TrustAnchor) = (java.security.cert.TrustAnchor) (r6 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r6 I:java.security.cert.X509Certificate) = (r6 I:java.security.cert.TrustAnchor) java.security.cert.TrustAnchor.getTrustedCert():java.security.cert.X509Certificate type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x001a \}]\l0x0016: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r6 I:java.security.cert.X509Certificate) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: RETURN  (r0 I:java.security.cert.X509Certificate) \l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: InvocationTargetException null\lSplitter:B:1:0x0001\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|ExcHandler: IllegalAccessException null\lSplitter:B:1:0x0001\l|0x001b: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: CONST_STR  (r0 I:java.lang.String) =  \"unable to get issues and signature\" \l0x001e: INVOKE  (r6 I:java.lang.AssertionError) = (r0 I:java.lang.String), (r6 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.security.cert.X509Certificate okhttp3.internal.platform.AndroidPlatform.AndroidTrustRootIndex.findByIssuerAndSignature((r5 'this' I:okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex A[IMMUTABLE_TYPE, THIS]), (r6 I:java.security.cert.X509Certificate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_7;
Node_6 -> Node_7;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

