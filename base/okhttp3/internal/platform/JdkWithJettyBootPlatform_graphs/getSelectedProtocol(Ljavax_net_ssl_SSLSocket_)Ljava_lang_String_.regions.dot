digraph "CFG forokhttp3.internal.platform.JdkWithJettyBootPlatform.getSelectedProtocol(Ljavax\/net\/ssl\/SSLSocket;)Ljava\/lang\/String;" {
subgraph cluster_Region_866401824 {
label = "R(1:(2:1|(2:5|6)(1:(1:15)(1:14))))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1486668306 {
label = "Try: R(2:1|(2:5|6)(1:(1:15)(1:14))) catches: R(2:11|13)";
node [shape=record,color=blue];
subgraph cluster_Region_1804791046 {
label = "R(2:1|(2:5|6)(1:(1:15)(1:14)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\lSplitter:B:0:0x0000\l|okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider r0 = (okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider) java.lang.reflect.Proxy.getInvocationHandler(r3.getMethod.invoke((java.lang.Object) null, new java.lang.Object[]\{r4\}))     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
subgraph cluster_IfRegion_1861808663 {
label = "IF [B:2:0x0015, B:4:0x0019] THEN: R(2:5|6) ELSE: R(1:(1:15)(1:14))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0015|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l|if (r0.unsupported != true) goto L_0x0017     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|ADDED_TO_REGION\lCatch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l|if (r0.selected == null) goto L_0x001b     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
subgraph cluster_Region_418458395 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l|okhttp3.internal.platform.Platform.get().log(4, \"ALPN callback dropped: HTTP\/2 is disabled. Is alpn\-boot on the boot class path?\", (java.lang.Throwable) null)     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|RETURN\lCatch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l|return null     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
}
subgraph cluster_Region_1783568136 {
label = "R(1:(1:15)(1:14)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_617178395 {
label = "IF [B:8:0x0028] THEN: R(1:15) ELSE: R(1:14) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l|if (r0.unsupported == true) goto L_0x002a     \/\/ Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
subgraph cluster_Region_2022207839 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
subgraph cluster_Region_1539963515 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0.selected\l}"];
}
}
}
}
}
subgraph cluster_Region_1186639886 {
label = "R(2:11|13) | ExcHandler: IllegalAccessException \| InvocationTargetException (r4v1 'e' java.lang.ReflectiveOperationException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002e|ExcHandler: IllegalAccessException \| InvocationTargetException (r4v1 'e' java.lang.ReflectiveOperationException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|throw okhttp3.internal.Util.assertionError(\"unable to get selected protocol\", r4)\l}"];
}
}
}
subgraph cluster_Region_1186639886 {
label = "R(2:11|13) | ExcHandler: IllegalAccessException \| InvocationTargetException (r4v1 'e' java.lang.ReflectiveOperationException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002e|ExcHandler: IllegalAccessException \| InvocationTargetException (r4v1 'e' java.lang.ReflectiveOperationException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|throw okhttp3.internal.Util.assertionError(\"unable to get selected protocol\", r4)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0017|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0026|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002a|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002b|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002f}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.platform.JdkWithJettyBootPlatform.getSelectedProtocol((r3v0 'this' okhttp3.internal.platform.JdkWithJettyBootPlatform A[IMMUTABLE_TYPE, THIS]), (r4v0 javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_11 -> Node_12;
Node_11 -> Node_12;
Node_0 -> Node_1;
Node_0 -> Node_11;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_15;
Node_10 -> Node_14;
Node_12 -> Node_13;
}

