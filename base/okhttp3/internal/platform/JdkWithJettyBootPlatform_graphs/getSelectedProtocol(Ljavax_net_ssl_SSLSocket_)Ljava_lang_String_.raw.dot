digraph "CFG forokhttp3.internal.platform.JdkWithJettyBootPlatform.getSelectedProtocol(Ljavax\/net\/ssl\/SSLSocket;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.lang.reflect.Method) = (r3 I:okhttp3.internal.platform.JdkWithJettyBootPlatform) okhttp3.internal.platform.JdkWithJettyBootPlatform.getMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0003: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0006: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0009: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r4 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x000d: INVOKE  (r0 I:java.lang.reflect.InvocationHandler) = (r0 I:java.lang.Object) java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object):java.lang.reflect.InvocationHandler type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0011: CHECK_CAST  (r0 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) = (okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0013: IGET  (r1 I:boolean) = \l  (r0 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider)\l okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider.unsupported boolean A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IGET  (r1 I:java.lang.String) = \l  (r0 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider)\l okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider.selected java.lang.String A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0020: CONST_STR  (r2 I:java.lang.String) =  \"ALPN callback dropped: HTTP\/2 is disabled. Is alpn\-boot on the boot class path?\" A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l0x0022: INVOKE  \l  (r0 I:okhttp3.internal.platform.Platform)\l  (r1 I:int)\l  (r2 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l okhttp3.internal.platform.Platform.log(int, java.lang.String, java.lang.Throwable):void type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: RETURN  (r4 I:java.lang.String) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r1 I:boolean) = \l  (r0 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider)\l okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider.unsupported boolean A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: GOTO  \-\> 0x002d A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IGET  (r4 I:java.lang.String) = \l  (r0 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider)\l okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider.selected java.lang.String A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: RETURN  (r4 I:java.lang.String) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:0:0x0000\l|0x002e: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: CONST_STR  (r0 I:java.lang.String) =  \"unable to get selected protocol\" \l0x0031: INVOKE  (r4 I:java.lang.AssertionError) = (r0 I:java.lang.String), (r4 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String okhttp3.internal.platform.JdkWithJettyBootPlatform.getSelectedProtocol((r3 'this' I:okhttp3.internal.platform.JdkWithJettyBootPlatform A[IMMUTABLE_TYPE, THIS]), (r4 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

