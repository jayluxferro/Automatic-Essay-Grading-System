digraph "CFG forokhttp3.internal.platform.JdkWithJettyBootPlatform.afterHandshake(Ljavax\/net\/ssl\/SSLSocket;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.lang.reflect.Method) = (r4 I:okhttp3.internal.platform.JdkWithJettyBootPlatform) okhttp3.internal.platform.JdkWithJettyBootPlatform.removeMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}]\l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}]\l0x0004: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}]\l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}]\l0x0007: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}]\l0x0009: INVOKE  \l  (r0 I:java.lang.reflect.Method)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x000d \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:0:0x0000\l|0x000d: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST_STR  (r0 I:java.lang.String) =  \"unable to remove alpn\" \l0x0010: INVOKE  (r5 I:java.lang.AssertionError) = (r0 I:java.lang.String), (r5 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.JdkWithJettyBootPlatform.afterHandshake((r4 'this' I:okhttp3.internal.platform.JdkWithJettyBootPlatform A[IMMUTABLE_TYPE, THIS]), (r5 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

