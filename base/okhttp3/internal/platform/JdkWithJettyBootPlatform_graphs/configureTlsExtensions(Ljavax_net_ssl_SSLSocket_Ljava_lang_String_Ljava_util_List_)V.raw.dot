digraph "CFG forokhttp3.internal.platform.JdkWithJettyBootPlatform.configureTlsExtensions(Ljavax\/net\/ssl\/SSLSocket;Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:java.util.List) = (r8 I:java.util.List) okhttp3.internal.platform.JdkWithJettyBootPlatform.alpnProtocolNames(java.util.List):java.util.List type: STATIC \l0x0004: CONST_CLASS  (r8 I:java.lang.Class\<okhttp3.internal.platform.Platform\>) =  okhttp3.internal.platform.Platform.class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|SYNTHETIC\lSplitter:B:1:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0006\l|0x0006: INVOKE  (r8 I:java.lang.ClassLoader) = (r8 I:java.lang.Class) java.lang.Class.getClassLoader():java.lang.ClassLoader type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}, TRY_ENTER]\l0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x000b: NEW_ARRAY  (r1 I:java.lang.Class[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x000d: IGET  (r2 I:java.lang.Class\<?\>) = (r5 I:okhttp3.internal.platform.JdkWithJettyBootPlatform) okhttp3.internal.platform.JdkWithJettyBootPlatform.clientProviderClass java.lang.Class A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x000f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0010: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0012: IGET  (r2 I:java.lang.Class\<?\>) = (r5 I:okhttp3.internal.platform.JdkWithJettyBootPlatform) okhttp3.internal.platform.JdkWithJettyBootPlatform.serverProviderClass java.lang.Class A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0014: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0015: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0017: NEW_INSTANCE  (r2 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) =  okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0019: INVOKE  \l  (r2 I:okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider)\l  (r7 I:java.util.List)\l okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider.\<init\>(java.util.List):void type: DIRECT A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x001c: INVOKE  (r7 I:java.lang.Object) = \l  (r8 I:java.lang.ClassLoader)\l  (r1 I:java.lang.Class[])\l  (r2 I:java.lang.reflect.InvocationHandler)\l java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler):java.lang.Object type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0020: IGET  (r8 I:java.lang.reflect.Method) = (r5 I:okhttp3.internal.platform.JdkWithJettyBootPlatform) okhttp3.internal.platform.JdkWithJettyBootPlatform.putMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0022: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0023: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0025: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0027: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}]\l0x0029: INVOKE  \l  (r8 I:java.lang.reflect.Method)\l  (r1 I:java.lang.Object)\l  (r0 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002d \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:1:0x0006\l|0x002d: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: CONST_STR  (r7 I:java.lang.String) =  \"unable to set alpn\" \l0x0030: INVOKE  (r6 I:java.lang.AssertionError) = (r7 I:java.lang.String), (r6 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.platform.JdkWithJettyBootPlatform.configureTlsExtensions((r5 'this' I:okhttp3.internal.platform.JdkWithJettyBootPlatform A[IMMUTABLE_TYPE, THIS]), (r6 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/SSLSocket;, Ljava\/lang\/String;, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

