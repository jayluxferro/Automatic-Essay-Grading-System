digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeControlFrame(ILokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.writerClosed != false) goto L_0x006d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r0 = r7.size()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if ((((long) r0) \> 125 ? 1 : (((long) r0) == 125 ? 0 : \-1)) \> 0) goto L_0x0065\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|okio.Buffer r1 = r5.sinkBuffer\lr1.writeByte(r6 \| 128)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if (r5.isClient == false) goto L_0x0055\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|okio.Buffer r1 = r5.sinkBuffer\lr1.writeByte(r0 \| 128)\lr5.random.nextBytes(r5.maskKey)\lr5.sinkBuffer.write(r5.maskKey)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|if (r0 \<= 0) goto L_0x005f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|long r0 = r5.sinkBuffer.size()\lr5.sinkBuffer.write(r7)\lr5.sinkBuffer.readAndWriteUnsafe(r5.maskCursor)\lr5.maskCursor.seek(r0)\lokhttp3.internal.p026ws.WebSocketProtocol.toggleMask(r5.maskCursor, r5.maskKey)\lr5.maskCursor.close()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|r5.sinkBuffer.writeByte(r0)\lr5.sinkBuffer.write(r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x005f|r5.sink.flush()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0064|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0065}"];
Node_13 [shape=record,label="{13\:\ 0x006c|throw new java.lang.IllegalArgumentException(\"Payload size must be less than or equal to 125\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x006d}"];
Node_15 [shape=record,label="{15\:\ 0x0074|throw new java.io.IOException(\"closed\")\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.ws.WebSocketWriter.writeControlFrame((r5v0 'this' okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

