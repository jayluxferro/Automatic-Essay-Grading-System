digraph "CFG forokhttp3.internal.ws.WebSocketWriter.\<init\>(ZLokio\/BufferedSink;Ljava\/util\/Random;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x0005: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:okio.Buffer)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x000a: NEW_INSTANCE  (r0 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) =  okhttp3.internal.ws.WebSocketWriter$FrameSink \l0x000c: INVOKE  \l  (r0 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.\<init\>(okhttp3.internal.ws.WebSocketWriter):void type: DIRECT \l0x000f: IPUT  \l  (r0 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IPUT  (r2 I:boolean), (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.isClient boolean \l0x0017: IPUT  \l  (r3 I:okio.BufferedSink)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.sink okio.BufferedSink \l0x0019: INVOKE  (r3 I:okio.Buffer) = (r3 I:okio.BufferedSink) okio.BufferedSink.buffer():okio.Buffer type: INTERFACE \l0x001d: IPUT  \l  (r3 I:okio.Buffer)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x001f: IPUT  \l  (r4 I:java.util.Random)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.random java.util.Random \l0x0021: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0025: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IPUT  (r4 I:byte[]), (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: NEW_INSTANCE  (r3 I:okio.Buffer$UnsafeCursor) =  okio.Buffer$UnsafeCursor \l0x002f: INVOKE  (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.\<init\>():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IPUT  \l  (r3 I:okio.Buffer$UnsafeCursor)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0037: CONST_STR  (r3 I:java.lang.String) =  \"random == null\" \l0x0039: INVOKE  \l  (r2 I:java.lang.NullPointerException)\l  (r3 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x003f: CONST_STR  (r3 I:java.lang.String) =  \"sink == null\" \l0x0041: INVOKE  \l  (r2 I:java.lang.NullPointerException)\l  (r3 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.ws.WebSocketWriter.\<init\>((r1 'this' I:okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

