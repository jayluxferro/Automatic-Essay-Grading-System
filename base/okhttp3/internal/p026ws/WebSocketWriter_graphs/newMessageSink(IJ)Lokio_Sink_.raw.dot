digraph "CFG forokhttp3.internal.ws.WebSocketWriter.newMessageSink(IJ)Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.activeWriter boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: IPUT  (r0 I:boolean), (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.activeWriter boolean \l0x0007: IGET  (r1 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l0x0009: IPUT  \l  (r3 I:int)\l  (r1 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.formatOpcode int \l0x000b: IGET  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l0x000d: IPUT  \l  (r4 I:long)\l  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.contentLength long \l0x000f: IGET  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l0x0011: IPUT  \l  (r0 I:boolean)\l  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.isFirstFrame boolean \l0x0013: IGET  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l0x0015: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: IPUT  \l  (r4 I:boolean)\l  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.closed boolean \l0x0018: IGET  (r3 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) = (r2 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.frameSink okhttp3.internal.ws.WebSocketWriter$FrameSink \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: RETURN  (r3 I:okio.Sink) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001d: CONST_STR  (r4 I:java.lang.String) =  \"Another message writer is active. Did you call close()?\" \l0x001f: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{okio.Sink okhttp3.internal.ws.WebSocketWriter.newMessageSink((r2 'this' I:okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

