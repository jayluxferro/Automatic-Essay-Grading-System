digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeMessageFrame(IJZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.writerClosed != false) goto L_0x0092\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r5 == false) goto L_0x0008\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r2 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|PHI: r2 \l  PHI: (r2v2 int) = (r2v0 int), (r2v26 int) binds: [B:3:0x0005, B:4:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == false) goto L_0x000d\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|r2 = r2 \| 128\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|PHI: r2 \l  PHI: (r2v3 int) = (r2v2 int), (r2v25 int) binds: [B:5:0x0009, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|r1.sinkBuffer.writeByte(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|if (r1.isClient == false) goto L_0x0018\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|r0 = 128\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|PHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v4 int) binds: [B:8:0x0014, B:9:0x0016] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|if ((r3 \> 125 ? 1 : (r3 == 125 ? 0 : \-1)) \> 0) goto L_0x0026\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|okio.Buffer r5 = r1.sinkBuffer\lr5.writeByte(((int) r3) \| r0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026}"];
Node_14 [shape=record,label="{14\:\ 0x002b|if ((r3 \> 65535 ? 1 : (r3 == 65535 ? 0 : \-1)) \> 0) goto L_0x003b\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|okio.Buffer r5 = r1.sinkBuffer\lr5.writeByte(r0 \| 126)\lr1.sinkBuffer.writeShort((int) r3)\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|okio.Buffer r5 = r1.sinkBuffer\lr5.writeByte(r0 \| 127)\lr1.sinkBuffer.writeLong(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0047}"];
Node_18 [shape=record,label="{18\:\ 0x0049|if (r1.isClient == false) goto L_0x0085\l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|r1.random.nextBytes(r1.maskKey)\lr1.sinkBuffer.write(r1.maskKey)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005d|if ((r3 \> 0 ? 1 : (r3 == 0 ? 0 : \-1)) \<= 0) goto L_0x008c\l}"];
Node_21 [shape=record,label="{21\:\ 0x005f|long r5 = r1.sinkBuffer.size()\lr1.sinkBuffer.write(r1.buffer, r3)\lr1.sinkBuffer.readAndWriteUnsafe(r1.maskCursor)\lr1.maskCursor.seek(r5)\lokhttp3.internal.p026ws.WebSocketProtocol.toggleMask(r1.maskCursor, r1.maskKey)\lr1.maskCursor.close()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|r1.sinkBuffer.write(r1.buffer, r3)\l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|r1.sink.emit()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0091|RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x0092}"];
Node_26 [shape=record,label="{26\:\ 0x0099|throw new java.io.IOException(\"closed\")\l}"];
MethodNode[shape=record,label="{void okhttp3.internal.ws.WebSocketWriter.writeMessageFrame((r1v0 'this' okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

