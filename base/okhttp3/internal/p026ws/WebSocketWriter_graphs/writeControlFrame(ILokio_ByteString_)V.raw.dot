digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeControlFrame(ILokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.writerClosed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x006d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r7 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0008: CAST  (r1 I:long) = (long) (r0 I:int) \l0x0009: CONST  (r3 I:?[long, double]) = (125(0x7d, double:6.2E\-322) ?[long, double]) \l0x000b: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0065 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) \| (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l0x0011: IGET  (r1 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0013: INVOKE  (r1 I:okio.Buffer), (r6 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0016: IGET  (r6 I:boolean) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.isClient boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0055 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l0x001c: IGET  (r1 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x001e: INVOKE  (r1 I:okio.Buffer), (r6 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0021: IGET  (r6 I:java.util.Random) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.random java.util.Random \l0x0023: IGET  (r1 I:byte[]) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x0025: INVOKE  (r6 I:java.util.Random), (r1 I:byte[]) java.util.Random.nextBytes(byte[]):void type: VIRTUAL \l0x0028: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x002a: IGET  (r1 I:byte[]) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x002c: INVOKE  (r6 I:okio.Buffer), (r1 I:byte[]) okio.Buffer.write(byte[]):okio.Buffer type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x005f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0033: INVOKE  (r0 I:long) = (r6 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0037: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0039: INVOKE  (r6 I:okio.Buffer), (r7 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l0x003c: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x003e: IGET  (r7 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0040: INVOKE  (r6 I:okio.Buffer), (r7 I:okio.Buffer$UnsafeCursor) okio.Buffer.readAndWriteUnsafe(okio.Buffer$UnsafeCursor):okio.Buffer$UnsafeCursor type: VIRTUAL \l0x0043: IGET  (r6 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0045: INVOKE  (r6 I:okio.Buffer$UnsafeCursor), (r0 I:long) okio.Buffer.UnsafeCursor.seek(long):int type: VIRTUAL \l0x0048: IGET  (r6 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x004a: IGET  (r7 I:byte[]) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x004c: INVOKE  (r6 I:okio.Buffer$UnsafeCursor), (r7 I:byte[]) okhttp3.internal.ws.WebSocketProtocol.toggleMask(okio.Buffer$UnsafeCursor, byte[]):void type: STATIC \l0x004f: IGET  (r6 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0051: INVOKE  (r6 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.close():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0057: INVOKE  (r6 I:okio.Buffer), (r0 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x005a: IGET  (r6 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x005c: INVOKE  (r6 I:okio.Buffer), (r7 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x005f|0x005f: IGET  (r6 I:okio.BufferedSink) = (r5 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sink okio.BufferedSink \l0x0061: INVOKE  (r6 I:okio.BufferedSink) okio.BufferedSink.flush():void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0064|0x0064: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|0x0065: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0067: CONST_STR  (r7 I:java.lang.String) =  \"Payload size must be less than or equal to 125\" \l0x0069: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x006c|0x006c: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006d|0x006d: NEW_INSTANCE  (r6 I:java.io.IOException) =  java.io.IOException \l0x006f: CONST_STR  (r7 I:java.lang.String) =  \"closed\" \l0x0071: INVOKE  (r6 I:java.io.IOException), (r7 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0074|0x0074: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.ws.WebSocketWriter.writeControlFrame((r5 'this' I:okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

