digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeClose(ILokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okio.ByteString) =  okio.ByteString.EMPTY okio.ByteString \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r2 I:int) okhttp3.internal.ws.WebSocketProtocol.validateCloseCode(int):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x000d: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0010: INVOKE  (r0 I:okio.Buffer), (r2 I:int) okio.Buffer.writeShort(int):okio.Buffer type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r0 I:okio.Buffer), (r3 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE  (r0 I:okio.ByteString) = (r0 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x001e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|SYNTHETIC\lSplitter:B:10:0x001f\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001f\l|0x001f: INVOKE  \l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l  (r2 I:int)\l  (r0 I:okio.ByteString)\l okhttp3.internal.ws.WebSocketWriter.writeControlFrame(int, okio.ByteString):void type: DIRECT A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IPUT  (r3 I:boolean), (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.writerClosed boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|ExcHandler: all null\lSplitter:B:10:0x001f\l|0x0025: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: IPUT  (r3 I:boolean), (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.writerClosed boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.ws.WebSocketWriter.writeClose((r1 'this' I:okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

