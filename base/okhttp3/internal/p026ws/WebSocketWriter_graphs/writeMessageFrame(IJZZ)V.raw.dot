digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeMessageFrame(IJZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.writerClosed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0092 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000d \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: IGET  (r5 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x000f: INVOKE  (r5 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0012: IGET  (r2 I:boolean) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.isClient boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0018 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: CONST  (r5 I:?[long, double]) = (125(0x7d, double:6.2E\-322) ?[long, double]) \l0x001a: CMP_L  (r2 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:14:0x0026 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: CAST  (r2 I:int) = (int) (r3 I:long) \l0x001f: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0020: IGET  (r5 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0022: INVOKE  (r5 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: CONST  (r5 I:?[long, double]) = (65535(0xffff, double:3.23786E\-319) ?[long, double]) \l0x0029: CMP_L  (r2 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (126(0x7e, float:1.77E\-43) ?[int, float, short, byte, char]) \l0x002f: IGET  (r5 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0031: INVOKE  (r5 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0034: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0036: CAST  (r5 I:int) = (int) (r3 I:long) \l0x0037: INVOKE  (r2 I:okio.Buffer), (r5 I:int) okio.Buffer.writeShort(int):okio.Buffer type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) \l0x003d: IGET  (r5 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x003f: INVOKE  (r5 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0042: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0044: INVOKE  (r2 I:okio.Buffer), (r3 I:long) okio.Buffer.writeLong(long):okio.Buffer type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: IGET  (r2 I:boolean) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.isClient boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0085 \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: IGET  (r2 I:java.util.Random) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.random java.util.Random \l0x004d: IGET  (r5 I:byte[]) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x004f: INVOKE  (r2 I:java.util.Random), (r5 I:byte[]) java.util.Random.nextBytes(byte[]):void type: VIRTUAL \l0x0052: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0054: IGET  (r5 I:byte[]) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x0056: INVOKE  (r2 I:okio.Buffer), (r5 I:byte[]) okio.Buffer.write(byte[]):okio.Buffer type: VIRTUAL \l0x0059: CONST  (r5 I:?[long, double]) = (0 ?[long, double]) \l0x005b: CMP_L  (r2 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:24:0x008c \l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|0x005f: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0061: INVOKE  (r5 I:long) = (r2 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0065: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0067: IGET  (r0 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x0069: INVOKE  (r2 I:okio.Buffer), (r0 I:okio.Buffer), (r3 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL \l0x006c: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x006e: IGET  (r3 I:okio.Buffer$UnsafeCursor) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0070: INVOKE  (r2 I:okio.Buffer), (r3 I:okio.Buffer$UnsafeCursor) okio.Buffer.readAndWriteUnsafe(okio.Buffer$UnsafeCursor):okio.Buffer$UnsafeCursor type: VIRTUAL \l0x0073: IGET  (r2 I:okio.Buffer$UnsafeCursor) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0075: INVOKE  (r2 I:okio.Buffer$UnsafeCursor), (r5 I:long) okio.Buffer.UnsafeCursor.seek(long):int type: VIRTUAL \l0x0078: IGET  (r2 I:okio.Buffer$UnsafeCursor) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x007a: IGET  (r3 I:byte[]) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskKey byte[] \l0x007c: INVOKE  (r2 I:okio.Buffer$UnsafeCursor), (r3 I:byte[]) okhttp3.internal.ws.WebSocketProtocol.toggleMask(okio.Buffer$UnsafeCursor, byte[]):void type: STATIC \l0x007f: IGET  (r2 I:okio.Buffer$UnsafeCursor) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.maskCursor okio.Buffer$UnsafeCursor \l0x0081: INVOKE  (r2 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.close():void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0085|0x0085: IGET  (r2 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sinkBuffer okio.Buffer \l0x0087: IGET  (r5 I:okio.Buffer) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x0089: INVOKE  (r2 I:okio.Buffer), (r5 I:okio.Buffer), (r3 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x008c|0x008c: IGET  (r2 I:okio.BufferedSink) = (r1 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.sink okio.BufferedSink \l0x008e: INVOKE  (r2 I:okio.BufferedSink) okio.BufferedSink.emit():okio.BufferedSink type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x0091|0x0091: RETURN   \l}"];
Node_26 [shape=record,label="{26\:\ 0x0092|0x0092: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException \l0x0094: CONST_STR  (r3 I:java.lang.String) =  \"closed\" \l0x0096: INVOKE  (r2 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0099|0x0099: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.ws.WebSocketWriter.writeMessageFrame((r1 'this' I:okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

