digraph "CFG forokhttp3.internal.ws.WebSocketWriter.writeClose(ILokio\/ByteString;)V" {
subgraph cluster_Region_524050746 {
label = "R(3:0|(4:(1:4)|5|(1:7)|8)|(1:11))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.ByteString okio.ByteString r0 = okio.ByteString.EMPTY\l}"];
subgraph cluster_IfRegion_404375535 {
label = "IF [B:1:0x0002, B:2:0x0004] THEN: R(4:(1:4)|5|(1:7)|8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r2 == 0) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|ADDED_TO_REGION\l|if (r3 == null) goto L_0x001c\l}"];
subgraph cluster_Region_1024018932 {
label = "R(4:(1:4)|5|(1:7)|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1531312116 {
label = "IF [B:3:0x0006] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2 != 0) goto L_0x0008\l}"];
subgraph cluster_Region_505097170 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|okhttp3.internal.p026ws.WebSocketProtocol.validateCloseCode(r2)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000b|okio.Buffer okio.Buffer r0 = new okio.Buffer()\lr0.writeShort(r2)\l}"];
subgraph cluster_IfRegion_1078514736 {
label = "IF [B:6:0x0013] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r3 != null) goto L_0x0015\l}"];
subgraph cluster_Region_791635469 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0015|r0.write(r3)\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0018|okio.ByteString r0 = r0.readByteString()\l}"];
}
}
subgraph cluster_TryCatchRegion_170383081 {
label = "Try: R(1:11) finally: R(3:14|15|16)";
node [shape=record,color=blue];
subgraph cluster_Region_1358137396 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ ?|Catch:\{ all \-\> 0x0025 \}\lSplitter:B:10:0x001f\l|writeControlFrame(8, r0)     \/\/ Catch:\{ all \-\> 0x0025 \}\l}"];
}
subgraph cluster_Region_2116643342 {
label = "R(3:14|15|16) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0025|ExcHandler:  FINALLY\lSplitter:B:10:0x001f\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|FINALLY_INSNS\l|r1.writerClosed = true\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|throw r2\l}"];
}
}
}
subgraph cluster_Region_2116643342 {
label = "R(3:14|15|16) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0025|ExcHandler:  FINALLY\lSplitter:B:10:0x001f\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|FINALLY_INSNS\l|r1.writerClosed = true\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|throw r2\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ 0x001c|PHI: r0 \l  PHI: (r0v1 okio.ByteString) = (r0v3 okio.ByteString), (r0v0 okio.ByteString) binds: [B:8:0x0018, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001f|SYNTHETIC\lSplitter:B:10:0x001f\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0022|DONT_GENERATE\l|r1.writerClosed = true\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0024}"];
MethodNode[shape=record,label="{void okhttp3.internal.ws.WebSocketWriter.writeClose((r1v0 'this' okhttp3.internal.ws.WebSocketWriter A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_12 -> Node_13;
}

