digraph "CFG forokhttp3.internal.ws.RealWebSocket.onReadPing(Lokio\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.failed boolean A[Catch:\{ all \-\> 0x0024 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:boolean) = (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.enqueuedClose boolean A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r0 I:java.util.ArrayDeque\<java.lang.Object\>) = (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.messageAndCloseQueue java.util.ArrayDeque A[Catch:\{ all \-\> 0x0024 \}]\l0x000b: INVOKE  (r0 I:boolean) = (r0 I:java.util.ArrayDeque) java.util.ArrayDeque.isEmpty():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: GOTO  \-\> 0x0022 A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IGET  (r0 I:java.util.ArrayDeque\<okio.ByteString\>) = (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.pongQueue java.util.ArrayDeque A[Catch:\{ all \-\> 0x0024 \}]\l0x0014: INVOKE  (r0 I:java.util.ArrayDeque), (r2 I:java.lang.Object) java.util.ArrayDeque.add(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l0x0017: INVOKE  (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.runWriter():void type: DIRECT A[Catch:\{ all \-\> 0x0024 \}]\l0x001a: IGET  (r2 I:int) = (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.receivedPingCount int A[Catch:\{ all \-\> 0x0024 \}]\l0x001c: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ all \-\> 0x0024 \}]\l0x001e: IPUT  (r2 I:int), (r1 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.receivedPingCount int A[Catch:\{ all \-\> 0x0024 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0024: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.ws.RealWebSocket.onReadPing((r1 'this' I:okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r2 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

