digraph "CFG forokhttp3.internal.ws.RealWebSocket.\<init\>(Lokhttp3\/Request;Lokhttp3\/WebSocketListener;Ljava\/util\/Random;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:java.util.ArrayDeque) =  java.util.ArrayDeque \l0x0005: INVOKE  (r0 I:java.util.ArrayDeque) java.util.ArrayDeque.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:java.util.ArrayDeque\<okio.ByteString\>)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.pongQueue java.util.ArrayDeque \l0x000a: NEW_INSTANCE  (r0 I:java.util.ArrayDeque) =  java.util.ArrayDeque \l0x000c: INVOKE  (r0 I:java.util.ArrayDeque) java.util.ArrayDeque.\<init\>():void type: DIRECT \l0x000f: IPUT  \l  (r0 I:java.util.ArrayDeque\<java.lang.Object\>)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.messageAndCloseQueue java.util.ArrayDeque \l0x0011: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0012: IPUT  (r0 I:int), (r2 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.receivedCloseCode int \l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"GET\" \l0x0016: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x001a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: IPUT  \l  (r3 I:okhttp3.Request)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.originalRequest okhttp3.Request \l0x0022: IPUT  \l  (r4 I:okhttp3.WebSocketListener)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.listener okhttp3.WebSocketListener \l0x0024: IPUT  \l  (r5 I:java.util.Random)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.random java.util.Random \l0x0026: IPUT  (r6 I:long), (r2 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.pingIntervalMillis long \l0x0028: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x002a: NEW_ARRAY  (r3 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x002c: INVOKE  (r5 I:java.util.Random), (r3 I:byte[]) java.util.Random.nextBytes(byte[]):void type: VIRTUAL \l0x002f: INVOKE  (r3 I:okio.ByteString) = (r3 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC \l0x0033: INVOKE  (r3 I:java.lang.String) = (r3 I:okio.ByteString) okio.ByteString.base64():java.lang.String type: VIRTUAL \l0x0037: IPUT  \l  (r3 I:java.lang.String)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.key java.lang.String \l0x0039: NEW_INSTANCE  (r3 I:okhttp3.internal.ws.RealWebSocket$1) =  okhttp3.internal.ws.RealWebSocket$1 \l0x003b: INVOKE  \l  (r3 I:okhttp3.internal.ws.RealWebSocket$1)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.1.\<init\>(okhttp3.internal.ws.RealWebSocket):void type: DIRECT \l0x003e: IPUT  \l  (r3 I:java.lang.Runnable)\l  (r2 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.writerRunnable java.lang.Runnable \l}"];
Node_3 [shape=record,label="{3\:\ 0x0040|0x0040: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|0x0041: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0043: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0045: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0048: CONST_STR  (r6 I:java.lang.String) =  \"Request must be GET: \" \l0x004a: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0051: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0054: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0058: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x005b|0x005b: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.RealWebSocket.\<init\>((r2 'this' I:okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.WebSocketListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

