digraph "CFG forokhttp3.internal.ws.RealWebSocket.send(Lokio\/ByteString;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.failed boolean A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003c A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.enqueuedClose boolean A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000b A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: GOTO  \-\> 0x003c A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: IGET  (r2 I:long) = (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.queueSize long A[Catch:\{ all \-\> 0x003e \}]\l0x000d: INVOKE  (r0 I:int) = (r7 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x0011: CAST  (r4 I:long) = (long) (r0 I:int) A[Catch:\{ all \-\> 0x003e \}]\l0x0012: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) A[Catch:\{ all \-\> 0x003e \}]\l0x0013: CONST  (r4 I:?[long, double]) = (16777216(0x1000000, double:8.289046E\-317) ?[long, double]) A[Catch:\{ all \-\> 0x003e \}]\l0x0016: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0022 A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1001(0x3e9, float:1.403E\-42) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x003e \}]\l0x001c: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x003e \}]\l0x001d: INVOKE  \l  (r6 I:okhttp3.internal.ws.RealWebSocket)\l  (r7 I:int)\l  (r8 I:java.lang.String)\l okhttp3.internal.ws.RealWebSocket.close(int, java.lang.String):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|SYNTHETIC\lSplitter:B:12:0x0022\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0022\l|0x0022: IGET  (r0 I:long) = (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.queueSize long A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x0024: INVOKE  (r2 I:int) = (r7 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x0028: CAST  (r2 I:long) = (long) (r2 I:int) A[Catch:\{ all \-\> 0x003e \}]\l0x0029: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) A[Catch:\{ all \-\> 0x003e \}]\l0x002a: IPUT  (r0 I:long), (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.queueSize long A[Catch:\{ all \-\> 0x003e \}]\l0x002c: IGET  (r0 I:java.util.ArrayDeque\<java.lang.Object\>) = (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.messageAndCloseQueue java.util.ArrayDeque A[Catch:\{ all \-\> 0x003e \}]\l0x002e: NEW_INSTANCE  (r1 I:okhttp3.internal.ws.RealWebSocket$Message) =  okhttp3.internal.ws.RealWebSocket$Message A[Catch:\{ all \-\> 0x003e \}]\l0x0030: INVOKE  \l  (r1 I:okhttp3.internal.ws.RealWebSocket$Message)\l  (r8 I:int)\l  (r7 I:okio.ByteString)\l okhttp3.internal.ws.RealWebSocket.Message.\<init\>(int, okio.ByteString):void type: DIRECT A[Catch:\{ all \-\> 0x003e \}]\l0x0033: INVOKE  (r0 I:java.util.ArrayDeque), (r1 I:java.lang.Object) java.util.ArrayDeque.add(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x0036: INVOKE  (r6 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.runWriter():void type: DIRECT A[Catch:\{ all \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: RETURN  (r7 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: RETURN  (r1 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x003e: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private synchronized boolean okhttp3.internal.ws.RealWebSocket.send((r6 'this' I:okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

