digraph "CFG forokhttp3.internal.ws.RealWebSocket.\<init\>(Lokhttp3\/Request;Lokhttp3\/WebSocketListener;Ljava\/util\/Random;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.pongQueue = new java.util.ArrayDeque\<\>()\lr2.messageAndCloseQueue = new java.util.ArrayDeque\<\>()\lr2.receivedCloseCode = \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|if (p018io.fabric.sdk.android.services.network.HttpRequest.METHOD_GET.equals(r3.method()) == false) goto L_0x0041\l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|r2.originalRequest = r3\lr2.listener = r4\lr2.random = r5\lr2.pingIntervalMillis = r6\lbyte[] r3 = new byte[16]\lr5.nextBytes(r3)\lr2.key = okio.ByteString.m183of(r3).base64()\lr2.writerRunnable = new okhttp3.internal.p026ws.RealWebSocket.C14081(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0040|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Request must be GET: \")\lr5.append(r3.method())\l}"];
Node_5 [shape=record,label="{5\:\ 0x005b|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.RealWebSocket.\<init\>((r2v0 'this' okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r3v0 okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 okhttp3.WebSocketListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

