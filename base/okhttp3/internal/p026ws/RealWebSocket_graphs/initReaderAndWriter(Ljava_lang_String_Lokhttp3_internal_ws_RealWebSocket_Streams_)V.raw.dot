digraph "CFG forokhttp3.internal.ws.RealWebSocket.initReaderAndWriter(Ljava\/lang\/String;Lokhttp3\/internal\/ws\/RealWebSocket$Streams;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IPUT  \l  (r9 I:okhttp3.internal.ws.RealWebSocket$Streams)\l  (r7 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.streams okhttp3.internal.ws.RealWebSocket$Streams A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x0003: NEW_INSTANCE  (r0 I:okhttp3.internal.ws.WebSocketWriter) =  okhttp3.internal.ws.WebSocketWriter A[Catch:\{ all \-\> 0x004d \}]\l0x0005: IGET  (r1 I:boolean) = (r9 I:okhttp3.internal.ws.RealWebSocket$Streams) okhttp3.internal.ws.RealWebSocket.Streams.client boolean A[Catch:\{ all \-\> 0x004d \}]\l0x0007: IGET  (r2 I:okio.BufferedSink) = (r9 I:okhttp3.internal.ws.RealWebSocket$Streams) okhttp3.internal.ws.RealWebSocket.Streams.sink okio.BufferedSink A[Catch:\{ all \-\> 0x004d \}]\l0x0009: IGET  (r3 I:java.util.Random) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.random java.util.Random A[Catch:\{ all \-\> 0x004d \}]\l0x000b: INVOKE  \l  (r0 I:okhttp3.internal.ws.WebSocketWriter)\l  (r1 I:boolean)\l  (r2 I:okio.BufferedSink)\l  (r3 I:java.util.Random)\l okhttp3.internal.ws.WebSocketWriter.\<init\>(boolean, okio.BufferedSink, java.util.Random):void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l0x000e: IPUT  \l  (r0 I:okhttp3.internal.ws.WebSocketWriter)\l  (r7 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.writer okhttp3.internal.ws.WebSocketWriter A[Catch:\{ all \-\> 0x004d \}]\l0x0010: NEW_INSTANCE  (r0 I:java.util.concurrent.ScheduledThreadPoolExecutor) =  java.util.concurrent.ScheduledThreadPoolExecutor A[Catch:\{ all \-\> 0x004d \}]\l0x0012: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x004d \}]\l0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l0x0014: INVOKE  (r8 I:java.util.concurrent.ThreadFactory) = (r8 I:java.lang.String), (r2 I:boolean) okhttp3.internal.Util.threadFactory(java.lang.String, boolean):java.util.concurrent.ThreadFactory type: STATIC A[Catch:\{ all \-\> 0x004d \}]\l0x0018: INVOKE  \l  (r0 I:java.util.concurrent.ScheduledThreadPoolExecutor)\l  (r1 I:int)\l  (r8 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ScheduledThreadPoolExecutor.\<init\>(int, java.util.concurrent.ThreadFactory):void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l0x001b: IPUT  \l  (r0 I:java.util.concurrent.ScheduledExecutorService)\l  (r7 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.executor java.util.concurrent.ScheduledExecutorService A[Catch:\{ all \-\> 0x004d \}]\l0x001d: IGET  (r0 I:long) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.pingIntervalMillis long A[Catch:\{ all \-\> 0x004d \}]\l0x001f: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x004d \}]\l0x0021: CMP_L  (r8 I:int) = (r0 I:long), (r2 I:long) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0035 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IGET  (r0 I:java.util.concurrent.ScheduledExecutorService) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.executor java.util.concurrent.ScheduledExecutorService A[Catch:\{ all \-\> 0x004d \}]\l0x0027: NEW_INSTANCE  (r1 I:okhttp3.internal.ws.RealWebSocket$PingRunnable) =  okhttp3.internal.ws.RealWebSocket$PingRunnable A[Catch:\{ all \-\> 0x004d \}]\l0x0029: INVOKE  \l  (r1 I:okhttp3.internal.ws.RealWebSocket$PingRunnable)\l  (r7 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.PingRunnable.\<init\>(okhttp3.internal.ws.RealWebSocket):void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l0x002c: IGET  (r2 I:long) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.pingIntervalMillis long A[Catch:\{ all \-\> 0x004d \}]\l0x002e: IGET  (r4 I:long) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.pingIntervalMillis long A[Catch:\{ all \-\> 0x004d \}]\l0x0030: SGET  (r6 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ all \-\> 0x004d \}]\l0x0032: INVOKE  \l  (r0 I:java.util.concurrent.ScheduledExecutorService)\l  (r1 I:java.lang.Runnable)\l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):java.util.concurrent.ScheduledFuture type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: IGET  (r8 I:java.util.ArrayDeque\<java.lang.Object\>) = (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.messageAndCloseQueue java.util.ArrayDeque A[Catch:\{ all \-\> 0x004d \}]\l0x0037: INVOKE  (r8 I:boolean) = (r8 I:java.util.ArrayDeque) java.util.ArrayDeque.isEmpty():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x003b|0x003b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0040 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|0x003d: INVOKE  (r7 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.runWriter():void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: NEW_INSTANCE  (r8 I:okhttp3.internal.ws.WebSocketReader) =  okhttp3.internal.ws.WebSocketReader \l0x0043: IGET  (r0 I:boolean) = (r9 I:okhttp3.internal.ws.RealWebSocket$Streams) okhttp3.internal.ws.RealWebSocket.Streams.client boolean \l0x0045: IGET  (r9 I:okio.BufferedSource) = (r9 I:okhttp3.internal.ws.RealWebSocket$Streams) okhttp3.internal.ws.RealWebSocket.Streams.source okio.BufferedSource \l0x0047: INVOKE  \l  (r8 I:okhttp3.internal.ws.WebSocketReader)\l  (r0 I:boolean)\l  (r9 I:okio.BufferedSource)\l  (r7 I:okhttp3.internal.ws.WebSocketReader$FrameCallback)\l okhttp3.internal.ws.WebSocketReader.\<init\>(boolean, okio.BufferedSource, okhttp3.internal.ws.WebSocketReader$FrameCallback):void type: DIRECT \l0x004a: IPUT  \l  (r8 I:okhttp3.internal.ws.WebSocketReader)\l  (r7 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.reader okhttp3.internal.ws.WebSocketReader \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x004d: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|SYNTHETIC\lSplitter:B:12:0x004e\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x004e\l|0x004e: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.RealWebSocket.initReaderAndWriter((r7 'this' I:okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:okhttp3.internal.ws.RealWebSocket$Streams A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_13 -> Node_11;
}

