digraph "CFG forokhttp3.internal.ws.RealWebSocket.connect(Lokhttp3\/OkHttpClient;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:okhttp3.OkHttpClient$Builder) = (r4 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.newBuilder():okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x0004: SGET  (r0 I:okhttp3.EventListener) =  okhttp3.EventListener.NONE okhttp3.EventListener \l0x0006: INVOKE  (r4 I:okhttp3.OkHttpClient$Builder) = \l  (r4 I:okhttp3.OkHttpClient$Builder)\l  (r0 I:okhttp3.EventListener)\l okhttp3.OkHttpClient.Builder.eventListener(okhttp3.EventListener):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x000a: SGET  (r0 I:java.util.List\<okhttp3.Protocol\>) =  okhttp3.internal.ws.RealWebSocket.ONLY_HTTP1 java.util.List \l0x000c: INVOKE  (r4 I:okhttp3.OkHttpClient$Builder) = (r4 I:okhttp3.OkHttpClient$Builder), (r0 I:java.util.List) okhttp3.OkHttpClient.Builder.protocols(java.util.List):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x0010: INVOKE  (r4 I:okhttp3.OkHttpClient) = (r4 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.build():okhttp3.OkHttpClient type: VIRTUAL \l0x0014: IGET  (r0 I:okhttp3.Request) = (r3 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.originalRequest okhttp3.Request \l0x0016: INVOKE  (r0 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request) okhttp3.Request.newBuilder():okhttp3.Request$Builder type: VIRTUAL \l0x001a: CONST_STR  (r1 I:java.lang.String) =  \"Upgrade\" \l0x001c: CONST_STR  (r2 I:java.lang.String) =  \"websocket\" \l0x001e: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0022: CONST_STR  (r1 I:java.lang.String) =  \"Connection\" \l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"Upgrade\" \l0x0026: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x002a: CONST_STR  (r1 I:java.lang.String) =  \"Sec\-WebSocket\-Key\" \l0x002c: IGET  (r2 I:java.lang.String) = (r3 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.key java.lang.String \l0x002e: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0032: CONST_STR  (r1 I:java.lang.String) =  \"Sec\-WebSocket\-Version\" \l0x0034: CONST_STR  (r2 I:java.lang.String) =  \"13\" \l0x0036: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r0 I:okhttp3.Request$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x003a: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x003e: SGET  (r1 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0040: INVOKE  (r4 I:okhttp3.Call) = \l  (r1 I:okhttp3.internal.Internal)\l  (r4 I:okhttp3.OkHttpClient)\l  (r0 I:okhttp3.Request)\l okhttp3.internal.Internal.newWebSocketCall(okhttp3.OkHttpClient, okhttp3.Request):okhttp3.Call type: VIRTUAL \l0x0044: IPUT  \l  (r4 I:okhttp3.Call)\l  (r3 I:okhttp3.internal.ws.RealWebSocket)\l okhttp3.internal.ws.RealWebSocket.call okhttp3.Call \l0x0046: IGET  (r4 I:okhttp3.Call) = (r3 I:okhttp3.internal.ws.RealWebSocket) okhttp3.internal.ws.RealWebSocket.call okhttp3.Call \l0x0048: NEW_INSTANCE  (r1 I:okhttp3.internal.ws.RealWebSocket$2) =  okhttp3.internal.ws.RealWebSocket$2 \l0x004a: INVOKE  \l  (r1 I:okhttp3.internal.ws.RealWebSocket$2)\l  (r3 I:okhttp3.internal.ws.RealWebSocket)\l  (r0 I:okhttp3.Request)\l okhttp3.internal.ws.RealWebSocket.2.\<init\>(okhttp3.internal.ws.RealWebSocket, okhttp3.Request):void type: DIRECT \l0x004d: INVOKE  (r4 I:okhttp3.Call), (r1 I:okhttp3.Callback) okhttp3.Call.enqueue(okhttp3.Callback):void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0050|0x0050: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.RealWebSocket.connect((r3 'this' I:okhttp3.internal.ws.RealWebSocket A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.OkHttpClient A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

