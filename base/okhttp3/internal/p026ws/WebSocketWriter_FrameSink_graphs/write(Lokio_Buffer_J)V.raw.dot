digraph "CFG forokhttp3.internal.ws.WebSocketWriter.FrameSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0049 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okhttp3.internal.ws.WebSocketWriter) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x0006: IGET  (r0 I:okio.Buffer) = (r0 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x0008: INVOKE  (r0 I:okio.Buffer), (r7 I:okio.Buffer), (r8 I:long) okio.Buffer.write(okio.Buffer, long):void type: VIRTUAL \l0x000b: IGET  (r7 I:boolean) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.isFirstFrame boolean \l0x000d: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r0 I:long) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.contentLength long \l0x0012: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0014: CMP_L  (r7 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r7 I:okhttp3.internal.ws.WebSocketWriter) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x001a: IGET  (r7 I:okio.Buffer) = (r7 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x001c: INVOKE  (r0 I:long) = (r7 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0020: IGET  (r2 I:long) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.contentLength long \l0x0022: CONST  (r4 I:?[long, double]) = (8192(0x2000, double:4.0474E\-320) ?[long, double]) \l0x0024: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x0025: CMP_L  (r7 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r9 I:okhttp3.internal.ws.WebSocketWriter) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x002e: IGET  (r9 I:okio.Buffer) = (r9 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x0030: INVOKE  (r2 I:long) = (r9 I:okio.Buffer) okio.Buffer.completeSegmentByteCount():long type: VIRTUAL \l0x0034: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0036: CMP_L  (r9 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0048 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IGET  (r0 I:okhttp3.internal.ws.WebSocketWriter) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x003e: IGET  (r1 I:int) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.formatOpcode int \l0x0040: IGET  (r4 I:boolean) = (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.isFirstFrame boolean \l0x0042: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: INVOKE  \l  (r0 I:okhttp3.internal.ws.WebSocketWriter)\l  (r1 I:int)\l  (r2 I:long)\l  (r4 I:boolean)\l  (r5 I:boolean)\l okhttp3.internal.ws.WebSocketWriter.writeMessageFrame(int, long, boolean, boolean):void type: VIRTUAL \l0x0046: IPUT  \l  (r8 I:boolean)\l  (r6 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.isFirstFrame boolean \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x004b: CONST_STR  (r8 I:java.lang.String) =  \"closed\" \l0x004d: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.WebSocketWriter.FrameSink.write((r6 'this' I:okhttp3.internal.ws.WebSocketWriter$FrameSink A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

