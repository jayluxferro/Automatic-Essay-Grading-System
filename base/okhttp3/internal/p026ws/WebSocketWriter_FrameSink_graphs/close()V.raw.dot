digraph "CFG forokhttp3.internal.ws.WebSocketWriter.FrameSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r1 I:okhttp3.internal.ws.WebSocketWriter) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x0006: IGET  (r2 I:int) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.formatOpcode int \l0x0008: IGET  (r0 I:okhttp3.internal.ws.WebSocketWriter) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x000a: IGET  (r0 I:okio.Buffer) = (r0 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.buffer okio.Buffer \l0x000c: INVOKE  (r3 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0010: IGET  (r5 I:boolean) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.isFirstFrame boolean \l0x0012: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0013: INVOKE  \l  (r1 I:okhttp3.internal.ws.WebSocketWriter)\l  (r2 I:int)\l  (r3 I:long)\l  (r5 I:boolean)\l  (r6 I:boolean)\l okhttp3.internal.ws.WebSocketWriter.writeMessageFrame(int, long, boolean, boolean):void type: VIRTUAL \l0x0016: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0017: IPUT  \l  (r0 I:boolean)\l  (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink)\l okhttp3.internal.ws.WebSocketWriter.FrameSink.closed boolean \l0x0019: IGET  (r0 I:okhttp3.internal.ws.WebSocketWriter) = (r7 I:okhttp3.internal.ws.WebSocketWriter$FrameSink) okhttp3.internal.ws.WebSocketWriter.FrameSink.this$0 okhttp3.internal.ws.WebSocketWriter \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: IPUT  (r1 I:boolean), (r0 I:okhttp3.internal.ws.WebSocketWriter) okhttp3.internal.ws.WebSocketWriter.activeWriter boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0021: CONST_STR  (r1 I:java.lang.String) =  \"closed\" \l0x0023: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.ws.WebSocketWriter.FrameSink.close((r7 'this' I:okhttp3.internal.ws.WebSocketWriter$FrameSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

