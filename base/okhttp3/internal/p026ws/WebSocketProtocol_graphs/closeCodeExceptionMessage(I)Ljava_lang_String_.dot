digraph "CFG forokhttp3.internal.ws.WebSocketProtocol.closeCodeExceptionMessage(I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2 \< 1000) goto L_0x0032\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2 \< 5000) goto L_0x0009\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r2 \< 1004) goto L_0x0011\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d}"];
Node_7 [shape=record,label="{7\:\ 0x000f|if (r2 \<= 1006) goto L_0x0019\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011}"];
Node_9 [shape=record,label="{9\:\ 0x0013|if (r2 \< 1012) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015}"];
Node_11 [shape=record,label="{11\:\ 0x0017|if (r2 \> 2999) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Code \")\lr0.append(r2)\lr0.append(\" is reserved and may not be used.\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|RETURN\l|return r0.toString()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Code must be in range [1000,5000): \")\lr0.append(r2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|RETURN\l|return r0.toString()\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{static java.lang.String okhttp3.internal.ws.WebSocketProtocol.closeCodeExceptionMessage((r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

