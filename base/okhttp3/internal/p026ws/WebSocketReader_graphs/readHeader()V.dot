digraph "CFG forokhttp3.internal.ws.WebSocketReader.readHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.closed != false) goto L_0x0118\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|long r0 = r6.source.timeout().timeoutNanos()\lr6.source.timeout().clearTimeout()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|SYNTHETIC\lSplitter:B:3:0x0017\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ all \-\> 0x010b \}\lSplitter:B:3:0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|r2 = r6.source.readByte() & 255\lr6.source.timeout().timeout(r0, java.util.concurrent.TimeUnit.NANOSECONDS)\lr6.opcode = r2 & 15\lr1 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|if ((r2 & kotlin.jvm.internal.ByteCompanionObject.MIN_VALUE) == 0) goto L_0x0036\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|r0 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|r0 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|PHI: r0 \l  PHI: (r0v7 boolean) = (r0v36 boolean), (r0v37 boolean) binds: [B:8:0x0036, B:7:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|r6.isFinalFrame = r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|if ((r2 & 8) == 0) goto L_0x003f\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|r0 = true\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|r0 = false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|PHI: r0 \l  PHI: (r0v9 boolean) = (r0v34 boolean), (r0v35 boolean) binds: [B:12:0x003f, B:11:0x003d] A[DONT_GENERATE, DONT_INLINE]\l|r6.isControlFrame = r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|if (r6.isControlFrame == false) goto L_0x0053\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046}"];
Node_16 [shape=record,label="{16\:\ 0x0048|if (r6.isFinalFrame == false) goto L_0x004b\l}"];
Node_17 [shape=record,label="{17\:\ 0x004b}"];
Node_18 [shape=record,label="{18\:\ 0x0052|throw new java.net.ProtocolException(\"Control frames must be final.\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x0053}"];
Node_20 [shape=record,label="{20\:\ 0x0055|if ((r2 & 64) == 0) goto L_0x0059\l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|r0 = true\l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|r0 = false\l}"];
Node_23 [shape=record,label="{23\:\ 0x005a|PHI: r0 \l  PHI: (r0v12 boolean) = (r0v30 boolean), (r0v31 boolean) binds: [B:22:0x0059, B:21:0x0057] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|if ((r2 & 32) == 0) goto L_0x0060\l}"];
Node_25 [shape=record,label="{25\:\ 0x005e|r4 = true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0060|r4 = false\l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|PHI: r4 \l  PHI: (r4v3 boolean) = (r4v9 boolean), (r4v10 boolean) binds: [B:26:0x0060, B:25:0x005e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|if ((r2 & 16) == 0) goto L_0x0067\l}"];
Node_29 [shape=record,label="{29\:\ 0x0065|r2 = true\l}"];
Node_30 [shape=record,label="{30\:\ 0x0067|r2 = false\l}"];
Node_31 [shape=record,label="{31\:\ 0x0068|PHI: r2 \l  PHI: (r2v7 boolean) = (r2v22 boolean), (r2v23 boolean) binds: [B:30:0x0067, B:29:0x0065] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L_0x0103\l}"];
Node_32 [shape=record,label="{32\:\ 0x006a|if (r4 != false) goto L_0x0103\l}"];
Node_33 [shape=record,label="{33\:\ 0x006c|if (r2 != false) goto L_0x0103\l}"];
Node_34 [shape=record,label="{34\:\ 0x006e|r0 = r6.source.readByte() & 255\l}"];
Node_35 [shape=record,label="{35\:\ 0x0078|if ((r0 & kotlin.jvm.internal.ByteCompanionObject.MIN_VALUE) == 0) goto L_0x007b\l}"];
Node_36 [shape=record,label="{36\:\ 0x007a|r1 = true\l}"];
Node_37 [shape=record,label="{37\:\ 0x007b|PHI: r1 \l  PHI: (r1v3 boolean) = (r1v1 boolean), (r1v12 boolean) binds: [B:35:0x0078, B:36:0x007a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_38 [shape=record,label="{38\:\ 0x007d|if (r1 != r6.isClient) goto L_0x008e\l}"];
Node_39 [shape=record,label="{39\:\ 0x007f}"];
Node_40 [shape=record,label="{40\:\ 0x0083|if (r6.isClient == false) goto L_0x0088\l}"];
Node_41 [shape=record,label="{41\:\ 0x0085|java.lang.String r1 = \"Server\-sent frames must not be masked.\"\l}"];
Node_42 [shape=record,label="{42\:\ 0x0088|java.lang.String r1 = \"Client\-sent frames must be masked.\"\l}"];
Node_43 [shape=record,label="{43\:\ 0x008a|PHI: r1 \l  PHI: (r1v9 java.lang.String) = (r1v10 java.lang.String), (r1v11 java.lang.String) binds: [B:42:0x0088, B:41:0x0085] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_44 [shape=record,label="{44\:\ 0x008d|throw new java.net.ProtocolException(r1)\l}"];
Node_45 [shape=record,label="{45\:\ 0x008e|r6.frameLength = (long) (r0 & kotlin.jvm.internal.ByteCompanionObject.MAX_VALUE)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0099|if ((r6.frameLength \> 126 ? 1 : (r6.frameLength == 126 ? 0 : \-1)) != 0) goto L_0x00a9\l}"];
Node_47 [shape=record,label="{47\:\ 0x009b|r6.frameLength = ((long) r6.source.readShort()) & 65535\l}"];
Node_48 [shape=record,label="{48\:\ 0x00a9}"];
Node_49 [shape=record,label="{49\:\ 0x00af|if ((r6.frameLength \> 127 ? 1 : (r6.frameLength == 127 ? 0 : \-1)) != 0) goto L_0x00e4\l}"];
Node_50 [shape=record,label="{50\:\ 0x00b1|r6.frameLength = r6.source.readLong()\l}"];
Node_51 [shape=record,label="{51\:\ 0x00bf|if ((r6.frameLength \> 0 ? 1 : (r6.frameLength == 0 ? 0 : \-1)) \< 0) goto L_0x00c2\l}"];
Node_52 [shape=record,label="{52\:\ 0x00c2|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Frame length 0x\")\lr1.append(java.lang.Long.toHexString(r6.frameLength))\lr1.append(\" \> 0x7FFFFFFFFFFFFFFF\")\l}"];
Node_53 [shape=record,label="{53\:\ 0x00e3|throw new java.net.ProtocolException(r1.toString())\l}"];
Node_54 [shape=record,label="{54\:\ 0x00e4}"];
Node_55 [shape=record,label="{55\:\ 0x00e6|if (r6.isControlFrame == false) goto L_0x00f9\l}"];
Node_56 [shape=record,label="{56\:\ 0x00e8}"];
Node_57 [shape=record,label="{57\:\ 0x00ee|if ((r6.frameLength \> 125 ? 1 : (r6.frameLength == 125 ? 0 : \-1)) \> 0) goto L_0x00f1\l}"];
Node_58 [shape=record,label="{58\:\ 0x00f1}"];
Node_59 [shape=record,label="{59\:\ 0x00f8|throw new java.net.ProtocolException(\"Control frame must be less than 125B.\")\l}"];
Node_60 [shape=record,label="{60\:\ 0x00f9|if (r1 == false) goto L_?\l}"];
Node_61 [shape=record,label="{61\:\ 0x00fb|r6.source.readFully(r6.maskKey)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0103}"];
Node_63 [shape=record,label="{63\:\ 0x010a|throw new java.net.ProtocolException(\"Reserved flags are unsupported.\")\l}"];
Node_64 [shape=record,label="{64\:\ 0x010b|ExcHandler: all (r2v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:3:0x0017\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_65 [shape=record,label="{65\:\ 0x010c|r6.source.timeout().timeout(r0, java.util.concurrent.TimeUnit.NANOSECONDS)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0117|throw r2\l}"];
Node_67 [shape=record,label="{67\:\ 0x0118}"];
Node_68 [shape=record,label="{68\:\ 0x011f|throw new java.io.IOException(\"closed\")\l}"];
Node_69 [shape=record,label="{69\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_70 [shape=record,label="{70\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.ws.WebSocketReader.readHeader((r6v0 'this' okhttp3.internal.ws.WebSocketReader A[IMMUTABLE_TYPE, THIS]))  | JADX INFO: finally extract failed\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_67;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_64;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_62;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_62;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_62;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_54;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_54;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_51 -> Node_54[style=dashed];
Node_52 -> Node_53;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_60;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_57 -> Node_60[style=dashed];
Node_58 -> Node_59;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_70;
Node_61 -> Node_69;
Node_62 -> Node_63;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_67 -> Node_68;
}

