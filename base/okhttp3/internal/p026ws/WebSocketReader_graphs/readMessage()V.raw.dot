digraph "CFG forokhttp3.internal.ws.WebSocketReader.readMessage()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0064 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:long) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameLength long \l0x0006: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0008: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x003a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:okio.BufferedSource) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.source okio.BufferedSource \l0x000e: IGET  (r1 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.messageFrameBuffer okio.Buffer \l0x0010: IGET  (r2 I:long) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameLength long \l0x0012: INVOKE  (r0 I:okio.BufferedSource), (r1 I:okio.Buffer), (r2 I:long) okio.BufferedSource.readFully(okio.Buffer, long):void type: INTERFACE \l0x0015: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.isClient boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IGET  (r0 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.messageFrameBuffer okio.Buffer \l0x001b: IGET  (r1 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x001d: INVOKE  (r0 I:okio.Buffer), (r1 I:okio.Buffer$UnsafeCursor) okio.Buffer.readAndWriteUnsafe(okio.Buffer$UnsafeCursor):okio.Buffer$UnsafeCursor type: VIRTUAL \l0x0020: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x0022: IGET  (r1 I:okio.Buffer) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.messageFrameBuffer okio.Buffer \l0x0024: INVOKE  (r1 I:long) = (r1 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0028: IGET  (r3 I:long) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameLength long \l0x002a: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x002b: INVOKE  (r0 I:okio.Buffer$UnsafeCursor), (r1 I:long) okio.Buffer.UnsafeCursor.seek(long):int type: VIRTUAL \l0x002e: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x0030: IGET  (r1 I:byte[]) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskKey byte[] \l0x0032: INVOKE  (r0 I:okio.Buffer$UnsafeCursor), (r1 I:byte[]) okhttp3.internal.ws.WebSocketProtocol.toggleMask(okio.Buffer$UnsafeCursor, byte[]):void type: STATIC \l0x0035: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x0037: INVOKE  (r0 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IGET  (r0 I:boolean) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.isFinalFrame boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003f \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: INVOKE  (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.readUntilNonControlFrame():void type: DIRECT \l0x0042: IGET  (r0 I:int) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.opcode int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0049: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004e: CONST_STR  (r2 I:java.lang.String) =  \"Expected continuation opcode. Got: \" \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: IGET  (r2 I:int) = (r5 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.opcode int \l0x0055: INVOKE  (r2 I:java.lang.String) = (r2 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0059: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  (r0 I:java.net.ProtocolException), (r1 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0063|0x0063: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0066: CONST_STR  (r1 I:java.lang.String) =  \"closed\" \l0x0068: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x006b|0x006b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.ws.WebSocketReader.readMessage((r5 'this' I:okhttp3.internal.ws.WebSocketReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_0[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
}

