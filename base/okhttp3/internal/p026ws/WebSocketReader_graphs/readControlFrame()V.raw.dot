digraph "CFG forokhttp3.internal.ws.WebSocketReader.readControlFrame()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameLength long \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okio.BufferedSource) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.source okio.BufferedSource \l0x000a: IGET  (r1 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x000c: IGET  (r4 I:long) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameLength long \l0x000e: INVOKE  (r0 I:okio.BufferedSource), (r1 I:okio.Buffer), (r4 I:long) okio.BufferedSource.readFully(okio.Buffer, long):void type: INTERFACE \l0x0011: IGET  (r0 I:boolean) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.isClient boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IGET  (r0 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x0017: IGET  (r1 I:okio.Buffer$UnsafeCursor) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x0019: INVOKE  (r0 I:okio.Buffer), (r1 I:okio.Buffer$UnsafeCursor) okio.Buffer.readAndWriteUnsafe(okio.Buffer$UnsafeCursor):okio.Buffer$UnsafeCursor type: VIRTUAL \l0x001c: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x001e: INVOKE  (r0 I:okio.Buffer$UnsafeCursor), (r2 I:long) okio.Buffer.UnsafeCursor.seek(long):int type: VIRTUAL \l0x0021: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x0023: IGET  (r1 I:byte[]) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskKey byte[] \l0x0025: INVOKE  (r0 I:okio.Buffer$UnsafeCursor), (r1 I:byte[]) okhttp3.internal.ws.WebSocketProtocol.toggleMask(okio.Buffer$UnsafeCursor, byte[]):void type: STATIC \l0x0028: IGET  (r0 I:okio.Buffer$UnsafeCursor) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.maskCursor okio.Buffer$UnsafeCursor \l0x002a: INVOKE  (r0 I:okio.Buffer$UnsafeCursor) okio.Buffer.UnsafeCursor.close():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: IGET  (r0 I:int) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.opcode int \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[8, 9, 10] t:[0x0067, 0x005b, 0x004f] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0034: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0039: CONST_STR  (r2 I:java.lang.String) =  \"Unknown control opcode: \" \l0x003b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: IGET  (r2 I:int) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.opcode int \l0x0040: INVOKE  (r2 I:java.lang.String) = (r2 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r0 I:java.net.ProtocolException), (r1 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x004e|0x004e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004f|0x004f: IGET  (r0 I:okhttp3.internal.ws.WebSocketReader$FrameCallback) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameCallback okhttp3.internal.ws.WebSocketReader$FrameCallback \l0x0051: IGET  (r1 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x0053: INVOKE  (r1 I:okio.ByteString) = (r1 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x0057: INVOKE  \l  (r0 I:okhttp3.internal.ws.WebSocketReader$FrameCallback)\l  (r1 I:okio.ByteString)\l okhttp3.internal.ws.WebSocketReader.FrameCallback.onReadPong(okio.ByteString):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x005b|0x005b: IGET  (r0 I:okhttp3.internal.ws.WebSocketReader$FrameCallback) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameCallback okhttp3.internal.ws.WebSocketReader$FrameCallback \l0x005d: IGET  (r1 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x005f: INVOKE  (r1 I:okio.ByteString) = (r1 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x0063: INVOKE  \l  (r0 I:okhttp3.internal.ws.WebSocketReader$FrameCallback)\l  (r1 I:okio.ByteString)\l okhttp3.internal.ws.WebSocketReader.FrameCallback.onReadPing(okio.ByteString):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|0x0067: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1005(0x3ed, float:1.408E\-42) ?[int, float, short, byte, char])\l \l0x0069: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x006b: IGET  (r4 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x006d: INVOKE  (r4 I:long) = (r4 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0071: CONST  (r6 I:?[long, double]) = (1 ?[long, double]) \l0x0073: CMP_L  (r6 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0075|0x0075: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x009d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|0x0077: CMP_L  (r2 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0079|0x0079: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0094 \l}"];
Node_15 [shape=record,label="{15\:\ 0x007b|0x007b: IGET  (r0 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x007d: INVOKE  (r0 I:short) = (r0 I:okio.Buffer) okio.Buffer.readShort():short type: VIRTUAL \l0x0081: IGET  (r1 I:okio.Buffer) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.controlFrameBuffer okio.Buffer \l0x0083: INVOKE  (r1 I:java.lang.String) = (r1 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l0x0087: INVOKE  (r2 I:java.lang.String) = (r0 I:int) okhttp3.internal.ws.WebSocketProtocol.closeCodeExceptionMessage(int):java.lang.String type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x008b|0x008b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x008e \l}"];
Node_18 [shape=record,label="{18\:\ 0x008e|0x008e: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0090: INVOKE  (r0 I:java.net.ProtocolException), (r2 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0093|0x0093: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0094|0x0094: IGET  (r2 I:okhttp3.internal.ws.WebSocketReader$FrameCallback) = (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.frameCallback okhttp3.internal.ws.WebSocketReader$FrameCallback \l0x0096: INVOKE  \l  (r2 I:okhttp3.internal.ws.WebSocketReader$FrameCallback)\l  (r0 I:int)\l  (r1 I:java.lang.String)\l okhttp3.internal.ws.WebSocketReader.FrameCallback.onReadClose(int, java.lang.String):void type: INTERFACE \l0x0099: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x009a: IPUT  (r0 I:boolean), (r8 I:okhttp3.internal.ws.WebSocketReader) okhttp3.internal.ws.WebSocketReader.closed boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x009c|0x009c: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x009d|0x009d: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x009f: CONST_STR  (r1 I:java.lang.String) =  \"Malformed close payload length of 1.\" \l0x00a1: INVOKE  (r0 I:java.net.ProtocolException), (r1 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a4|0x00a4: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.ws.WebSocketReader.readControlFrame((r8 'this' I:okhttp3.internal.ws.WebSocketReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_6 -> Node_10;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_9 -> Node_21;
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

