digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r9 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:22:0x004d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:boolean) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.closed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0045 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r2 I:boolean) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.hasMoreChunks boolean \l0x000c: CONST  (r3 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r3 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r5 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x0013: CMP_L  (r0 I:int) = (r5 I:long), (r0 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IGET  (r0 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x0019: CMP_L  (r0 I:int) = (r0 I:long), (r3 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: INVOKE  (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.readChunkSize():void type: DIRECT \l0x0020: IGET  (r0 I:boolean) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.hasMoreChunks boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0025 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: RETURN  (r3 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|0x0025: IGET  (r0 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x0027: INVOKE  (r9 I:long) = (r9 I:long), (r0 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x002b: INVOKE  (r8 I:long) = \l  (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource)\l  (r8 I:okio.Buffer)\l  (r9 I:long)\l okhttp3.internal.http1.Http1Codec.AbstractSource.read(okio.Buffer, long):long type: SUPER \l0x002f: CMP_L  (r10 I:int) = (r8 I:long), (r3 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IGET  (r0 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x0035: ARITH  (r0 I:long) = (r0 I:long) \- (r8 I:long) \l0x0036: IPUT  \l  (r0 I:long)\l  (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: RETURN  (r8 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: NEW_INSTANCE  (r8 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x003b: CONST_STR  (r9 I:java.lang.String) =  \"unexpected end of stream\" \l0x003d: INVOKE  (r8 I:java.net.ProtocolException), (r9 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l0x0040: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: INVOKE  \l  (r7 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l  (r9 I:boolean)\l  (r8 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: NEW_INSTANCE  (r8 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0047: CONST_STR  (r9 I:java.lang.String) =  \"closed\" \l0x0049: INVOKE  \l  (r8 I:java.lang.IllegalStateException)\l  (r9 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004f: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0051: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0054: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0056: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: INVOKE  (r0 I:java.lang.StringBuilder), (r9 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r9 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0063|0x0063: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.ChunkedSource.read((r7 'this' I:okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]), (r8 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

