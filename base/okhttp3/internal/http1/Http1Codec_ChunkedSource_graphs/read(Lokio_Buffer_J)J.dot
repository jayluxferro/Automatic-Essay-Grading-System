digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r9 \> 0 ? 1 : (r9 == 0 ? 0 : \-1)) \< 0) goto L_0x004d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r7.closed != false) goto L_0x0045\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r7.hasMoreChunks != false) goto L_0x0011\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|RETURN\l|return \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x0015|if ((r7.bytesRemainingInChunk \> 0 ? 1 : (r7.bytesRemainingInChunk == 0 ? 0 : \-1)) == 0) goto L_0x001d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017}"];
Node_10 [shape=record,label="{10\:\ 0x001b|if ((r7.bytesRemainingInChunk \> \-1 ? 1 : (r7.bytesRemainingInChunk == \-1 ? 0 : \-1)) != 0) goto L_0x0025\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|readChunkSize()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|if (r7.hasMoreChunks != false) goto L_0x0025\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\l|return \-1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|long r8 = super.read(r8, java.lang.Math.min(r9, r7.bytesRemainingInChunk))\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|if ((r8 \> \-1 ? 1 : (r8 == \-1 ? 0 : \-1)) == 0) goto L_0x0039\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|r7.bytesRemainingInChunk = r7.bytesRemainingInChunk \- r8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|RETURN\l|return r8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|java.net.ProtocolException r8 = new java.net.ProtocolException(\"unexpected end of stream\")\lendOfInput(false, r8)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|throw r8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0045}"];
Node_21 [shape=record,label="{21\:\ 0x004c|throw new java.lang.IllegalStateException(\"closed\")\l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"byteCount \< 0: \")\lr0.append(r9)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0063|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.ChunkedSource.read((r7v0 'this' okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

