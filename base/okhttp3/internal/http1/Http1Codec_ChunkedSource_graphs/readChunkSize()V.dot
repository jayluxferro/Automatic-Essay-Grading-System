digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.readChunkSize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r5.bytesRemainingInChunk \> \-1 ? 1 : (r5.bytesRemainingInChunk == \-1 ? 0 : \-1)) == 0) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r5.this$0.source.readUtf8LineStrict()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|SYNTHETIC\lSplitter:B:3:0x000f\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ NumberFormatException \-\> 0x007e \}\lSplitter:B:3:0x000f\l|r5.bytesRemainingInChunk = r5.this$0.source.readHexadecimalUnsignedLong()     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\ljava.lang.String r0 = r5.this$0.source.readUtf8LineStrict().trim()     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|Catch:\{ NumberFormatException \-\> 0x007e \}\l|if ((r5.bytesRemainingInChunk \> 0 ? 1 : (r5.bytesRemainingInChunk == 0 ? 0 : \-1)) \< 0) goto L_0x005d     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|Catch:\{ NumberFormatException \-\> 0x007e \}\l|if (r0.isEmpty() != false) goto L_0x003b     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|if (r0.startsWith(\";\") == false) goto L_0x005d\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b}"];
Node_11 [shape=record,label="{11\:\ 0x003f|if ((r5.bytesRemainingInChunk \> 0 ? 1 : (r5.bytesRemainingInChunk == 0 ? 0 : \-1)) != 0) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|r5.hasMoreChunks = false\lokhttp3.internal.http.HttpHeaders.receiveHeaders(r5.this$0.client.cookieJar(), r5.url, r5.this$0.readHeaders())\lendOfInput(true, (java.io.IOException) null)\l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|Catch:\{ NumberFormatException \-\> 0x007e \}\l|java.lang.StringBuilder r2 = new java.lang.StringBuilder()     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\lr2.append(\"expected chunk size and optional extensions but was \"\")     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\lr2.append(r5.bytesRemainingInChunk)     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\lr2.append(r0)     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\lr2.append(org.osgeo.proj4j.units.AngleFormat.STR_SEC_SYMBOL)     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x007d|Catch:\{ NumberFormatException \-\> 0x007e \}\l|throw new java.net.ProtocolException(r2.toString())     \/\/ Catch:\{ NumberFormatException \-\> 0x007e \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x007e|ExcHandler: NumberFormatException (r0v2 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\lSplitter:B:3:0x000f\l|java.lang.NumberFormatException r0 = move\-exception\l}"];
Node_17 [shape=record,label="{17\:\ 0x007f}"];
Node_18 [shape=record,label="{18\:\ 0x0088|throw new java.net.ProtocolException(r0.getMessage())\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http1.Http1Codec.ChunkedSource.readChunkSize((r5v0 'this' okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

