digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.\<init\>(Lokhttp3\/internal\/http1\/Http1Codec;Lokhttp3\/HttpUrl;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r3 I:okhttp3.internal.http1.Http1Codec)\l  (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  \l  (r2 I:okhttp3.internal.http1.Http1Codec$AbstractSource)\l  (r3 I:okhttp3.internal.http1.Http1Codec)\l  (r0 I:okhttp3.internal.http1.Http1Codec$1)\l okhttp3.internal.http1.Http1Codec.AbstractSource.\<init\>(okhttp3.internal.http1.Http1Codec, okhttp3.internal.http1.Http1Codec$1):void type: DIRECT \l0x0006: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0008: IPUT  \l  (r0 I:long)\l  (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x000a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: IPUT  \l  (r3 I:boolean)\l  (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.hasMoreChunks boolean \l0x000d: IPUT  \l  (r4 I:okhttp3.HttpUrl)\l  (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.url okhttp3.HttpUrl \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.http1.Http1Codec.ChunkedSource.\<init\>((r2 'this' I:okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

