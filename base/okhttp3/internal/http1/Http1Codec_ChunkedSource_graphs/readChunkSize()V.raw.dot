digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.readChunkSize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x0002: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec \l0x000a: IGET  (r0 I:okio.BufferedSource) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.source okio.BufferedSource \l0x000c: INVOKE  (r0 I:okio.BufferedSource) okio.BufferedSource.readUtf8LineStrict():java.lang.String type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|SYNTHETIC\lSplitter:B:3:0x000f\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000f\l|0x000f: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec A[Catch:\{ NumberFormatException \-\> 0x007e \}, TRY_ENTER]\l0x0011: IGET  (r0 I:okio.BufferedSource) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.source okio.BufferedSource A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0013: INVOKE  (r0 I:long) = (r0 I:okio.BufferedSource) okio.BufferedSource.readHexadecimalUnsignedLong():long type: INTERFACE A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0017: IPUT  \l  (r0 I:long)\l  (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0019: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x001b: IGET  (r0 I:okio.BufferedSource) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.source okio.BufferedSource A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x001d: INVOKE  (r0 I:java.lang.String) = (r0 I:okio.BufferedSource) okio.BufferedSource.readUtf8LineStrict():java.lang.String type: INTERFACE A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0021: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0025: IGET  (r1 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0027: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0029: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x005d A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: CONST_STR  (r1 I:java.lang.String) =  \";\" A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0035: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0038: NOP   A[TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005d \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: IGET  (r0 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long \l0x003d: CMP_L  (r0 I:int) = (r0 I:long), (r3 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0042: IPUT  \l  (r0 I:boolean)\l  (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.hasMoreChunks boolean \l0x0044: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0046: IGET  (r0 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.client okhttp3.OkHttpClient \l0x0048: INVOKE  (r0 I:okhttp3.CookieJar) = (r0 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.cookieJar():okhttp3.CookieJar type: VIRTUAL \l0x004c: IGET  (r1 I:okhttp3.HttpUrl) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.url okhttp3.HttpUrl \l0x004e: IGET  (r2 I:okhttp3.internal.http1.Http1Codec) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0050: INVOKE  (r2 I:okhttp3.Headers) = (r2 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.readHeaders():okhttp3.Headers type: VIRTUAL \l0x0054: INVOKE  \l  (r0 I:okhttp3.CookieJar)\l  (r1 I:okhttp3.HttpUrl)\l  (r2 I:okhttp3.Headers)\l okhttp3.internal.http.HttpHeaders.receiveHeaders(okhttp3.CookieJar, okhttp3.HttpUrl, okhttp3.Headers):void type: STATIC \l0x0057: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0058: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0059: INVOKE  \l  (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource)\l  (r0 I:boolean)\l  (r1 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.ChunkedSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005c|0x005c: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x005d|SYNTHETIC\lSplitter:B:14:0x005d\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x005d\l|0x005d: NEW_INSTANCE  (r1 I:java.net.ProtocolException) =  java.net.ProtocolException A[Catch:\{ NumberFormatException \-\> 0x007e \}, TRY_ENTER]\l0x005f: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0061: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0064: CONST_STR  (r3 I:java.lang.String) =  \"expected chunk size and optional extensions but was \"\" A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0066: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0069: IGET  (r3 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec$ChunkedSource) okhttp3.internal.http1.Http1Codec.ChunkedSource.bytesRemainingInChunk long A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x006b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x006e: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0071: CONST_STR  (r0 I:java.lang.String) =  \"\"\" A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0073: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x0076: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l0x007a: INVOKE  (r1 I:java.net.ProtocolException), (r0 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ NumberFormatException \-\> 0x007e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x007d|0x007d: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ NumberFormatException \-\> 0x007e \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x007e|ExcHandler: NumberFormatException null\lSplitter:B:3:0x000f\l|0x007e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x007f|0x007f: NEW_INSTANCE  (r1 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0081: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.NumberFormatException) java.lang.NumberFormatException.getMessage():java.lang.String type: VIRTUAL \l0x0085: INVOKE  (r1 I:java.net.ProtocolException), (r0 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0088|0x0088: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.http1.Http1Codec.ChunkedSource.readChunkSize((r5 'this' I:okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

