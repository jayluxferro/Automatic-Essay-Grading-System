digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSource.read(Lokio\/Buffer;J)J" {
subgraph cluster_Region_1179922606 {
label = "R(1:(2:22|23)(1:(1:21)(1:(1:6)(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1258606151 {
label = "IF [B:1:0x0004] THEN: R(2:22|23) ELSE: R(1:(1:21)(1:(1:6)(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19)))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r9 \< 0) goto L_0x004d\l}"];
subgraph cluster_Region_582689909 {
label = "R(2:22|23)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x004d}"];
Node_23 [shape=record,label="{23\:\ 0x0063|throw new java.lang.IllegalArgumentException(\"byteCount \< 0: \" + r9)\l}"];
}
subgraph cluster_Region_1509632548 {
label = "R(1:(1:21)(1:(1:6)(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1053667573 {
label = "IF [B:3:0x0008] THEN: R(1:21) ELSE: R(1:(1:6)(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r7.closed != false) goto L_0x0045\l}"];
subgraph cluster_Region_1406543773 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x004c|throw new java.lang.IllegalStateException(\"closed\")\l}"];
}
subgraph cluster_Region_674572574 {
label = "R(1:(1:6)(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_673160246 {
label = "IF [B:5:0x000e] THEN: R(1:6) ELSE: R(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r7.hasMoreChunks == false) goto L_0x0010\l}"];
subgraph cluster_Region_2072431576 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|RETURN\l|return \-1\l}"];
}
subgraph cluster_Region_1331867892 {
label = "R(3:(2:11|(1:13))|14|(2:(2:16|17)|(2:18|19)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_420409850 {
label = "IF [B:8:0x0015, B:10:0x001b] THEN: R(2:11|(1:13)) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0015|ADDED_TO_REGION\l|if (r7.bytesRemainingInChunk == 0) goto L_0x001d\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|ADDED_TO_REGION\l|if (r7.bytesRemainingInChunk == \-1) goto L_0x001d\l}"];
subgraph cluster_Region_410142236 {
label = "R(2:11|(1:13))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001d|readChunkSize()\l}"];
subgraph cluster_IfRegion_1280870152 {
label = "IF [B:12:0x0022] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0022|if (r7.hasMoreChunks == false) goto L_0x0024\l}"];
subgraph cluster_Region_21847376 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\l|return \-1\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0025|long long r8 = super.read(r8, java.lang.Math.min(r9, r7.bytesRemainingInChunk))\l}"];
subgraph cluster_Region_1864560034 {
label = "R(2:(2:16|17)|(2:18|19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_185677377 {
label = "IF [B:15:0x0031] THEN: R(2:16|17) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0031|if (r8 != \-1) goto L_0x0033\l}"];
subgraph cluster_Region_1209505771 {
label = "R(2:16|17)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0033|r7.bytesRemainingInChunk \-= r8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|RETURN\l|return r8\l}"];
}
}
subgraph cluster_Region_1928902451 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0039|java.net.ProtocolException java.net.ProtocolException r8 = new java.net.ProtocolException(\"unexpected end of stream\")\lendOfInput(false, r8)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|throw r8\l}"];
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0011}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0045}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.ChunkedSource.read((r7v0 'this' okhttp3.internal.http1.Http1Codec$ChunkedSource A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_22 -> Node_23;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_20 -> Node_21;
}

