digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSource.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:long) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x0007: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0009: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x000f: SGET  (r1 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x0011: INVOKE  (r0 I:boolean) = \l  (r4 I:okio.Source)\l  (r0 I:int)\l  (r1 I:java.util.concurrent.TimeUnit)\l okhttp3.internal.Util.discard(okio.Source, int, java.util.concurrent.TimeUnit):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: INVOKE  \l  (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource)\l  (r0 I:boolean)\l  (r1 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.FixedLengthSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001d: IPUT  \l  (r0 I:boolean)\l  (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource)\l okhttp3.internal.http1.Http1Codec.FixedLengthSource.closed boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.FixedLengthSource.close((r4 'this' I:okhttp3.internal.http1.Http1Codec$FixedLengthSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

