digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r8 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:boolean) = (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.closed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r2 I:long) = (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x000c: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l0x000e: CMP_L  (r2 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: RETURN  (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r2 I:long) = (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x0015: INVOKE  (r8 I:long) = (r2 I:long), (r8 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x0019: INVOKE  (r7 I:long) = \l  (r6 I:okhttp3.internal.http1.Http1Codec$AbstractSource)\l  (r7 I:okio.Buffer)\l  (r8 I:long)\l okhttp3.internal.http1.Http1Codec.AbstractSource.read(okio.Buffer, long):long type: SUPER \l0x001d: CMP_L  (r9 I:int) = (r7 I:long), (r4 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IGET  (r2 I:long) = (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x0023: ARITH  (r2 I:long) = (r2 I:long) \- (r7 I:long) \l0x0024: IPUT  \l  (r2 I:long)\l  (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource)\l okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x0026: IGET  (r2 I:long) = (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource) okhttp3.internal.http1.Http1Codec.FixedLengthSource.bytesRemaining long \l0x0028: CMP_L  (r9 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: INVOKE  \l  (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource)\l  (r9 I:boolean)\l  (r0 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.FixedLengthSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: RETURN  (r7 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: NEW_INSTANCE  (r7 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0034: CONST_STR  (r8 I:java.lang.String) =  \"unexpected end of stream\" \l0x0036: INVOKE  (r7 I:java.net.ProtocolException), (r8 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l0x0039: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: INVOKE  \l  (r6 I:okhttp3.internal.http1.Http1Codec$FixedLengthSource)\l  (r8 I:boolean)\l  (r7 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.FixedLengthSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0040: CONST_STR  (r8 I:java.lang.String) =  \"closed\" \l0x0042: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r8 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0048: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004a: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004d: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x004f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r0 I:java.lang.StringBuilder), (r8 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r8 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0059: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.FixedLengthSource.read((r6 'this' I:okhttp3.internal.http1.Http1Codec$FixedLengthSource A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

