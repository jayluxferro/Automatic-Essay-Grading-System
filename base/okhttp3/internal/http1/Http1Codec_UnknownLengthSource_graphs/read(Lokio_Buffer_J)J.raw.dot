digraph "CFG forokhttp3.internal.http1.Http1Codec.UnknownLengthSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r5 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = \l  (r3 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource)\l okhttp3.internal.http1.Http1Codec.UnknownLengthSource.closed boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:boolean) = \l  (r3 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource)\l okhttp3.internal.http1.Http1Codec.UnknownLengthSource.inputExhausted boolean \l0x000c: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r1 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: INVOKE  (r4 I:long) = \l  (r3 I:okhttp3.internal.http1.Http1Codec$AbstractSource)\l  (r4 I:okio.Buffer)\l  (r5 I:long)\l okhttp3.internal.http1.Http1Codec.AbstractSource.read(okio.Buffer, long):long type: SUPER \l0x0015: CMP_L  (r6 I:int) = (r4 I:long), (r1 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001a: IPUT  \l  (r4 I:boolean)\l  (r3 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource)\l okhttp3.internal.http1.Http1Codec.UnknownLengthSource.inputExhausted boolean \l0x001c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  \l  (r3 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource)\l  (r4 I:boolean)\l  (r5 I:java.io.IOException)\l okhttp3.internal.http1.Http1Codec.UnknownLengthSource.endOfInput(boolean, java.io.IOException):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: RETURN  (r1 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r4 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0024: CONST_STR  (r5 I:java.lang.String) =  \"closed\" \l0x0026: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r5 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r1 I:java.lang.String) =  \"byteCount \< 0: \" \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003d: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.UnknownLengthSource.read((r3 'this' I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource A[IMMUTABLE_TYPE, THIS]), (r4 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

