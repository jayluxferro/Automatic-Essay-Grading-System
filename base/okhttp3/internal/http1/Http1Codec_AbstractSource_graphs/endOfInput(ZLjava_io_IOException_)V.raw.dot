digraph "CFG forokhttp3.internal.http1.Http1Codec.AbstractSource.endOfInput(ZLjava\/io\/IOException;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0002: IGET  (r0 I:int) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x000a: IGET  (r0 I:int) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0011: IGET  (r2 I:okio.ForwardingTimeout) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.timeout okio.ForwardingTimeout \l0x0013: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec)\l  (r2 I:okio.ForwardingTimeout)\l okhttp3.internal.http1.Http1Codec.detachTimeout(okio.ForwardingTimeout):void type: VIRTUAL \l0x0016: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0018: IPUT  (r1 I:int), (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x001a: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x001c: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0022: IGET  (r1 I:okhttp3.internal.connection.StreamAllocation) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0024: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l0x0026: IGET  (r3 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x0028: IGET  (r4 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.bytesRead long \l0x002a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x002b: INVOKE  \l  (r1 I:okhttp3.internal.connection.StreamAllocation)\l  (r2 I:boolean)\l  (r3 I:okhttp3.internal.http.HttpCodec)\l  (r4 I:long)\l  (r6 I:java.io.IOException)\l okhttp3.internal.connection.StreamAllocation.streamFinished(boolean, okhttp3.internal.http.HttpCodec, long, java.io.IOException):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: NEW_INSTANCE  (r8 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0031: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0033: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0036: CONST_STR  (r0 I:java.lang.String) =  \"state: \" \l0x0038: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$AbstractSource) okhttp3.internal.http1.Http1Codec.AbstractSource.this$0 okhttp3.internal.http1.Http1Codec \l0x003d: IGET  (r0 I:int) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x003f: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0046: INVOKE  \l  (r8 I:java.lang.IllegalStateException)\l  (r9 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected final void okhttp3.internal.http1.Http1Codec.AbstractSource.endOfInput((r7 'this' I:okhttp3.internal.http1.Http1Codec$AbstractSource A[IMMUTABLE_TYPE, THIS]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

