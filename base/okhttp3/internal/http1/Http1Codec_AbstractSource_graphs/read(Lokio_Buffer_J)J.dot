digraph "CFG forokhttp3.internal.http1.Http1Codec.AbstractSource.read(Lokio\/Buffer;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x0015 \}\lSplitter:B:0:0x0000\l|long r3 = r2.this$0.source.read(r3, r4)     \/\/ Catch:\{ IOException \-\> 0x0015 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|Catch:\{ IOException \-\> 0x0015 \}\l|if ((r3 \> 0 ? 1 : (r3 == 0 ? 0 : \-1)) \<= 0) goto L_0x0014     \/\/ Catch:\{ IOException \-\> 0x0015 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|Catch:\{ IOException \-\> 0x0015 \}\l|r2.bytesRead = r2.bytesRead + r3     \/\/ Catch:\{ IOException \-\> 0x0015 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|RETURN\l|return r3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.io.IOException r3 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|endOfInput(false, r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|throw r3\l}"];
MethodNode[shape=record,label="{public long okhttp3.internal.http1.Http1Codec.AbstractSource.read((r2v0 'this' okhttp3.internal.http1.Http1Codec$AbstractSource A[IMMUTABLE_TYPE, THIS]), (r3v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

