digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.closed boolean A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|SYNTHETIC\lSplitter:B:7:0x0008\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0008\l|0x0008: IPUT  \l  (r0 I:boolean)\l  (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink)\l okhttp3.internal.http1.Http1Codec.ChunkedSink.closed boolean A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER]\l0x000a: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec A[Catch:\{ all \-\> 0x0021 \}]\l0x000c: IGET  (r0 I:okio.BufferedSink) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink A[Catch:\{ all \-\> 0x0021 \}]\l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"0\l\l\" A[Catch:\{ all \-\> 0x0021 \}]\l0x0010: INVOKE  (r0 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE A[Catch:\{ all \-\> 0x0021 \}]\l0x0013: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec A[Catch:\{ all \-\> 0x0021 \}]\l0x0015: IGET  (r1 I:okio.ForwardingTimeout) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.timeout okio.ForwardingTimeout A[Catch:\{ all \-\> 0x0021 \}]\l0x0017: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec)\l  (r1 I:okio.ForwardingTimeout)\l okhttp3.internal.http1.Http1Codec.detachTimeout(okio.ForwardingTimeout):void type: VIRTUAL A[Catch:\{ all \-\> 0x0021 \}]\l0x001a: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec A[Catch:\{ all \-\> 0x0021 \}]\l0x001c: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0021 \}]\l0x001d: IPUT  (r1 I:int), (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int A[Catch:\{ all \-\> 0x0021 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0021: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.internal.http1.Http1Codec.ChunkedSink.close((r2 'this' I:okhttp3.internal.http1.Http1Codec$ChunkedSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

