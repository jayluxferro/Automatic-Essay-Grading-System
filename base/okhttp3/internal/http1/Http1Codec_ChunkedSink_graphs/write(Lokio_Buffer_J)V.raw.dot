digraph "CFG forokhttp3.internal.http1.Http1Codec.ChunkedSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_L  (r0 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec \l0x000d: IGET  (r0 I:okio.BufferedSink) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x000f: INVOKE  (r0 I:okio.BufferedSink), (r4 I:long) okio.BufferedSink.writeHexadecimalUnsignedLong(long):okio.BufferedSink type: INTERFACE \l0x0012: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec \l0x0014: IGET  (r0 I:okio.BufferedSink) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"\l\" \l0x0018: INVOKE  (r0 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x001b: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec \l0x001d: IGET  (r0 I:okio.BufferedSink) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x001f: INVOKE  (r0 I:okio.BufferedSink), (r3 I:okio.Buffer), (r4 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE \l0x0022: IGET  (r3 I:okhttp3.internal.http1.Http1Codec) = (r2 I:okhttp3.internal.http1.Http1Codec$ChunkedSink) okhttp3.internal.http1.Http1Codec.ChunkedSink.this$0 okhttp3.internal.http1.Http1Codec \l0x0024: IGET  (r3 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0026: CONST_STR  (r4 I:java.lang.String) =  \"\l\" \l0x0028: INVOKE  (r3 I:okio.BufferedSink), (r4 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002e: CONST_STR  (r4 I:java.lang.String) =  \"closed\" \l0x0030: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.ChunkedSink.write((r2 'this' I:okhttp3.internal.http1.Http1Codec$ChunkedSink A[IMMUTABLE_TYPE, THIS]), (r3 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

