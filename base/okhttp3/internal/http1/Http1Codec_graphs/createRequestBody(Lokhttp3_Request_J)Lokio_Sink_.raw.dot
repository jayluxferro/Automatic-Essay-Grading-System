digraph "CFG forokhttp3.internal.http1.Http1Codec.createRequestBody(Lokhttp3\/Request;J)Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"chunked\" \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"Transfer\-Encoding\" \l0x0004: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.Request), (r1 I:java.lang.String) okhttp3.Request.header(java.lang.String):java.lang.String type: VIRTUAL \l0x0008: INVOKE  (r3 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r3 I:okio.Sink) = (r2 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.newChunkedSink():okio.Sink type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r3 I:okio.Sink) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0015: CMP_L  (r3 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r3 I:okio.Sink) = (r2 I:okhttp3.internal.http1.Http1Codec), (r4 I:long) okhttp3.internal.http1.Http1Codec.newFixedLengthSink(long):okio.Sink type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r3 I:okio.Sink) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0020: CONST_STR  (r4 I:java.lang.String) =  \"Cannot stream a request body without chunked encoding or a known content length!\" \l0x0022: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Sink okhttp3.internal.http1.Http1Codec.createRequestBody((r2 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

