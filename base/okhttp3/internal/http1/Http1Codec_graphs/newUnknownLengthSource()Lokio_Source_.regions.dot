digraph "CFG forokhttp3.internal.http1.Http1Codec.newUnknownLengthSource()Lokio\/Source;" {
subgraph cluster_Region_250543117 {
label = "R(1:(2:8|9)(1:(2:4|5)(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1783031758 {
label = "IF [B:1:0x0003] THEN: R(2:8|9) ELSE: R(1:(2:4|5)(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.state != 4) goto L_0x001f\l}"];
subgraph cluster_Region_1878849776 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f}"];
Node_9 [shape=record,label="{9\:\ 0x0037|throw new java.lang.IllegalStateException(\"state: \" + r3.state)\l}"];
}
subgraph cluster_Region_929893545 {
label = "R(1:(2:4|5)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1310363869 {
label = "IF [B:3:0x0007] THEN: R(2:4|5) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r3.streamAllocation != null) goto L_0x0009\l}"];
subgraph cluster_Region_322926151 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|r3.state = 5\lr3.streamAllocation.noNewStreams()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return new okhttp3.internal.http1.Http1Codec.UnknownLengthSource()\l}"];
}
subgraph cluster_Region_453785512 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|throw new java.lang.IllegalStateException(\"streamAllocation == null\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
MethodNode[shape=record,label="{public okio.Source okhttp3.internal.http1.Http1Codec.newUnknownLengthSource((r3v0 'this' okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_8 -> Node_9;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_7;
}

