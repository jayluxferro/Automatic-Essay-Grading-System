digraph "CFG forokhttp3.internal.http1.Http1Codec.cancel()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r1 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0002: INVOKE  (r0 I:okhttp3.internal.connection.RealConnection) = (r0 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection():okhttp3.internal.connection.RealConnection type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.cancel():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.cancel((r1 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

