digraph "CFG forokhttp3.internal.http1.Http1Codec.writeRequest(Lokhttp3\/Headers;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0006: INVOKE  (r5 I:okio.BufferedSink) = (r0 I:okio.BufferedSink), (r5 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"\l\" \l0x000c: INVOKE  (r5 I:okio.BufferedSink), (r0 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x000f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  (r0 I:int) = (r4 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:5:0x0036 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r1 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0018: INVOKE  (r2 I:java.lang.String) = (r4 I:okhttp3.Headers), (r5 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x001c: INVOKE  (r1 I:okio.BufferedSink) = (r1 I:okio.BufferedSink), (r2 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0020: CONST_STR  (r2 I:java.lang.String) =  \": \" \l0x0022: INVOKE  (r1 I:okio.BufferedSink) = (r1 I:okio.BufferedSink), (r2 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0026: INVOKE  (r2 I:java.lang.String) = (r4 I:okhttp3.Headers), (r5 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x002a: INVOKE  (r1 I:okio.BufferedSink) = (r1 I:okio.BufferedSink), (r2 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x002e: CONST_STR  (r2 I:java.lang.String) =  \"\l\" \l0x0030: INVOKE  (r1 I:okio.BufferedSink), (r2 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0033: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|0x0036: IGET  (r4 I:okio.BufferedSink) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0038: CONST_STR  (r5 I:java.lang.String) =  \"\l\" \l0x003a: INVOKE  (r4 I:okio.BufferedSink), (r5 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x003d: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003e: IPUT  (r4 I:int), (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0040|0x0040: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0043: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0045: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0048: CONST_STR  (r0 I:java.lang.String) =  \"state: \" \l0x004a: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x004f: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0056: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r5 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0059|0x0059: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.writeRequest((r3 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

