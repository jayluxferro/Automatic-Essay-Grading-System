digraph "CFG forokhttp3.internal.http1.Http1Codec.newFixedLengthSink(J)Lokio\/Sink;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r2.state != 1) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r2.state = 2\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return new okhttp3.internal.http1.Http1Codec.FixedLengthSink(r2, r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"state: \")\lr4.append(r2.state)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|throw new java.lang.IllegalStateException(r4.toString())\l}"];
MethodNode[shape=record,label="{public okio.Sink okhttp3.internal.http1.Http1Codec.newFixedLengthSink((r2v0 'this' okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r3v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

