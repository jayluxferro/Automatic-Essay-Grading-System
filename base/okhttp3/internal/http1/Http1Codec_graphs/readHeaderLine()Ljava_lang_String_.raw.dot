digraph "CFG forokhttp3.internal.http1.Http1Codec.readHeaderLine()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okio.BufferedSource) = (r5 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.source okio.BufferedSource \l0x0002: IGET  (r1 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.headerLimit long \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:okio.BufferedSource), (r1 I:long) okio.BufferedSource.readUtf8LineStrict(long):java.lang.String type: INTERFACE \l0x0008: IGET  (r1 I:long) = (r5 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.headerLimit long \l0x000a: INVOKE  (r3 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000e: CAST  (r3 I:long) = (long) (r3 I:int) \l0x000f: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x0010: IPUT  (r1 I:long), (r5 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.headerLimit long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String okhttp3.internal.http1.Http1Codec.readHeaderLine((r5 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

