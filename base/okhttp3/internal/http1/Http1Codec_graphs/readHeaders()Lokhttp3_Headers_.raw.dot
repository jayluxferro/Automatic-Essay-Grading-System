digraph "CFG forokhttp3.internal.http1.Http1Codec.readHeaders()Lokhttp3\/Headers;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.Headers$Builder) =  okhttp3.Headers$Builder \l0x0002: INVOKE  (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.readHeaderLine():java.lang.String type: DIRECT \l0x0009: INVOKE  (r2 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: SGET  (r2 I:okhttp3.internal.Internal) =  okhttp3.internal.Internal.instance okhttp3.internal.Internal \l0x0011: INVOKE  \l  (r2 I:okhttp3.internal.Internal)\l  (r0 I:okhttp3.Headers$Builder)\l  (r1 I:java.lang.String)\l okhttp3.internal.Internal.addLenient(okhttp3.Headers$Builder, java.lang.String):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: INVOKE  (r0 I:okhttp3.Headers) = (r0 I:okhttp3.Headers$Builder) okhttp3.Headers.Builder.build():okhttp3.Headers type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r0 I:okhttp3.Headers) \l}"];
MethodNode[shape=record,label="{public okhttp3.Headers okhttp3.internal.http1.Http1Codec.readHeaders((r3 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

