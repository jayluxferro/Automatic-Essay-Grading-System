digraph "CFG forokhttp3.internal.http1.Http1Codec.\<init\>(Lokhttp3\/OkHttpClient;Lokhttp3\/internal\/connection\/StreamAllocation;Lokio\/BufferedSource;Lokio\/BufferedSink;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r0 I:int), (r2 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x0006: CONST  (r0 I:?[long, double]) = (262144(0x40000, double:1.295163E\-318) ?[long, double]) \l0x0009: IPUT  (r0 I:long), (r2 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.headerLimit long \l0x000b: IPUT  \l  (r3 I:okhttp3.OkHttpClient)\l  (r2 I:okhttp3.internal.http1.Http1Codec)\l okhttp3.internal.http1.Http1Codec.client okhttp3.OkHttpClient \l0x000d: IPUT  \l  (r4 I:okhttp3.internal.connection.StreamAllocation)\l  (r2 I:okhttp3.internal.http1.Http1Codec)\l okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x000f: IPUT  \l  (r5 I:okio.BufferedSource)\l  (r2 I:okhttp3.internal.http1.Http1Codec)\l okhttp3.internal.http1.Http1Codec.source okio.BufferedSource \l0x0011: IPUT  \l  (r6 I:okio.BufferedSink)\l  (r2 I:okhttp3.internal.http1.Http1Codec)\l okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.\<init\>((r2 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.OkHttpClient A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

