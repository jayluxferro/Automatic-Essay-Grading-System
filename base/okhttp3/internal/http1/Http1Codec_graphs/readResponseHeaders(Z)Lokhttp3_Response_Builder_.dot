digraph "CFG forokhttp3.internal.http1.Http1Codec.readResponseHeaders(Z)Lokhttp3\/Response$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4.state == 1) goto L_0x0024\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r4.state != 3) goto L_0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"state: \")\lr0.append(r4.state)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|throw new java.lang.IllegalStateException(r0.toString())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|SYNTHETIC\lSplitter:B:6:0x0024\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ EOFException \-\> 0x0060 \}\lSplitter:B:6:0x0024\l|okhttp3.internal.http.StatusLine r0 = okhttp3.internal.http.StatusLine.parse(readHeaderLine())     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\lokhttp3.Response$Builder r2 = new okhttp3.Response.Builder().protocol(r0.protocol).code(r0.code).message(r0.message).headers(readHeaders())     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|Catch:\{ EOFException \-\> 0x0060 \}\l|if (r5 == false) goto L_0x0055     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x004f|Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|Catch:\{ EOFException \-\> 0x0060 \}\l|if (r0.code != 100) goto L_0x0055     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|RETURN\lCatch:\{ EOFException \-\> 0x0060 \}\l|return null     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|Catch:\{ EOFException \-\> 0x0060 \}\l|if (r0.code != 100) goto L_0x005c     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|Catch:\{ EOFException \-\> 0x0060 \}\l|r4.state = 3     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|RETURN\lCatch:\{ EOFException \-\> 0x0060 \}\l|return r2     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|Catch:\{ EOFException \-\> 0x0060 \}\l|r4.state = 4     \/\/ Catch:\{ EOFException \-\> 0x0060 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|RETURN\l|return r2\l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|ExcHandler: EOFException (r5v1 'e' java.io.EOFException A[CUSTOM_DECLARE])\lSplitter:B:6:0x0024\l|java.io.EOFException r5 = move\-exception\l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"unexpected end of stream on \")\lr1.append(r4.streamAllocation)\ljava.io.IOException r0 = new java.io.IOException(r1.toString())\lr0.initCause(r5)\l}"];
Node_20 [shape=record,label="{20\:\ 0x007c|throw r0\l}"];
MethodNode[shape=record,label="{public okhttp3.Response$Builder okhttp3.internal.http1.Http1Codec.readResponseHeaders((r4v0 'this' okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

