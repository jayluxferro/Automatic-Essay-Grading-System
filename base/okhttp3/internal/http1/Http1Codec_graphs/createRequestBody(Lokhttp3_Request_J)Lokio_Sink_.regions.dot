digraph "CFG forokhttp3.internal.http1.Http1Codec.createRequestBody(Lokhttp3\/Request;J)Lokio\/Sink;" {
subgraph cluster_Region_382735402 {
label = "R(1:(2:(1:3)|(1:(2:(1:7)|(1:9)))))";
node [shape=record,color=blue];
subgraph cluster_Region_647232856 {
label = "R(2:(1:3)|(1:(2:(1:7)|(1:9))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_782635117 {
label = "IF [B:1:0x000c] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (\"chunked\".equalsIgnoreCase(r3.header(\"Transfer\-Encoding\")) == true) goto L_0x000e\l}"];
subgraph cluster_Region_1758419658 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|RETURN\l|return newChunkedSink()\l}"];
}
}
subgraph cluster_Region_2116580029 {
label = "R(1:(2:(1:7)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1198012701 {
label = "R(2:(1:7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1507028197 {
label = "IF [B:5:0x0017] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r4 != \-1) goto L_0x0019\l}"];
subgraph cluster_Region_1264083999 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001d|RETURN\l|return newFixedLengthSink(r4)\l}"];
}
}
subgraph cluster_Region_1993886291 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0025|throw new java.lang.IllegalStateException(\"Cannot stream a request body without chunked encoding or a known content length!\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e}"];
MethodNode[shape=record,label="{public okio.Sink okhttp3.internal.http1.Http1Codec.createRequestBody((r2v0 'this' okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r3v0 okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

