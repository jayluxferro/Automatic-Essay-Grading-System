digraph "CFG forokhttp3.internal.http1.Http1Codec.newUnknownLengthSource()Lokio\/Source;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x000a: IPUT  (r0 I:int), (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x000c: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x000e: INVOKE  (r0 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.noNewStreams():void type: VIRTUAL \l0x0011: NEW_INSTANCE  (r0 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource) =  okhttp3.internal.http1.Http1Codec$UnknownLengthSource \l0x0013: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec$UnknownLengthSource)\l  (r3 I:okhttp3.internal.http1.Http1Codec)\l okhttp3.internal.http1.Http1Codec.UnknownLengthSource.\<init\>(okhttp3.internal.http1.Http1Codec):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r0 I:okio.Source) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0019: CONST_STR  (r1 I:java.lang.String) =  \"streamAllocation == null\" \l0x001b: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0021: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0023: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0026: CONST_STR  (r2 I:java.lang.String) =  \"state: \" \l0x0028: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002b: IGET  (r2 I:int) = (r3 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okio.Source okhttp3.internal.http1.Http1Codec.newUnknownLengthSource((r3 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

