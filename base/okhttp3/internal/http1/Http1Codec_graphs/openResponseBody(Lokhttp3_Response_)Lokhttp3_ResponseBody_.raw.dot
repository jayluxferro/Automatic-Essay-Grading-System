digraph "CFG forokhttp3.internal.http1.Http1Codec.openResponseBody(Lokhttp3\/Response;)Lokhttp3\/ResponseBody;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.connection.StreamAllocation) = (r6 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0002: IGET  (r0 I:okhttp3.EventListener) = (r0 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.eventListener okhttp3.EventListener \l0x0004: IGET  (r1 I:okhttp3.internal.connection.StreamAllocation) = (r6 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x0006: IGET  (r1 I:okhttp3.Call) = (r1 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.call okhttp3.Call \l0x0008: INVOKE  (r0 I:okhttp3.EventListener), (r1 I:okhttp3.Call) okhttp3.EventListener.responseBodyStart(okhttp3.Call):void type: VIRTUAL \l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"Content\-Type\" \l0x000d: INVOKE  (r0 I:java.lang.String) = (r7 I:okhttp3.Response), (r0 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r1 I:boolean) = (r7 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.hasBody(okhttp3.Response):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0019: INVOKE  (r7 I:okio.Source) = (r6 I:okhttp3.internal.http1.Http1Codec), (r1 I:long) okhttp3.internal.http1.Http1Codec.newFixedLengthSource(long):okio.Source type: VIRTUAL \l0x001d: NEW_INSTANCE  (r3 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x001f: INVOKE  (r7 I:okio.BufferedSource) = (r7 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0023: INVOKE  \l  (r3 I:okhttp3.internal.http.RealResponseBody)\l  (r0 I:java.lang.String)\l  (r1 I:long)\l  (r7 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: RETURN  (r3 I:okhttp3.ResponseBody) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: CONST_STR  (r1 I:java.lang.String) =  \"chunked\" \l0x0029: CONST_STR  (r2 I:java.lang.String) =  \"Transfer\-Encoding\" \l0x002b: INVOKE  (r2 I:java.lang.String) = (r7 I:okhttp3.Response), (r2 I:java.lang.String) okhttp3.Response.header(java.lang.String):java.lang.String type: VIRTUAL \l0x002f: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l0x0033: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: INVOKE  (r7 I:okhttp3.Request) = (r7 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x003b: INVOKE  (r7 I:okhttp3.HttpUrl) = (r7 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x003f: INVOKE  (r7 I:okio.Source) = \l  (r6 I:okhttp3.internal.http1.Http1Codec)\l  (r7 I:okhttp3.HttpUrl)\l okhttp3.internal.http1.Http1Codec.newChunkedSource(okhttp3.HttpUrl):okio.Source type: VIRTUAL \l0x0043: NEW_INSTANCE  (r1 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x0045: INVOKE  (r7 I:okio.BufferedSource) = (r7 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0049: INVOKE  \l  (r1 I:okhttp3.internal.http.RealResponseBody)\l  (r0 I:java.lang.String)\l  (r2 I:long)\l  (r7 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x004c|0x004c: RETURN  (r1 I:okhttp3.ResponseBody) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|0x004d: INVOKE  (r4 I:long) = (r7 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.contentLength(okhttp3.Response):long type: STATIC \l0x0051: CMP_L  (r7 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0053|0x0053: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0063 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0055|0x0055: INVOKE  (r7 I:okio.Source) = (r6 I:okhttp3.internal.http1.Http1Codec), (r4 I:long) okhttp3.internal.http1.Http1Codec.newFixedLengthSource(long):okio.Source type: VIRTUAL \l0x0059: NEW_INSTANCE  (r1 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x005b: INVOKE  (r7 I:okio.BufferedSource) = (r7 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x005f: INVOKE  \l  (r1 I:okhttp3.internal.http.RealResponseBody)\l  (r0 I:java.lang.String)\l  (r4 I:long)\l  (r7 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0062|0x0062: RETURN  (r1 I:okhttp3.ResponseBody) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0063|0x0063: NEW_INSTANCE  (r7 I:okhttp3.internal.http.RealResponseBody) =  okhttp3.internal.http.RealResponseBody \l0x0065: INVOKE  (r1 I:okio.Source) = (r6 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.newUnknownLengthSource():okio.Source type: VIRTUAL \l0x0069: INVOKE  (r1 I:okio.BufferedSource) = (r1 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x006d: INVOKE  \l  (r7 I:okhttp3.internal.http.RealResponseBody)\l  (r0 I:java.lang.String)\l  (r2 I:long)\l  (r1 I:okio.BufferedSource)\l okhttp3.internal.http.RealResponseBody.\<init\>(java.lang.String, long, okio.BufferedSource):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0070|0x0070: RETURN  (r7 I:okhttp3.ResponseBody) \l}"];
MethodNode[shape=record,label="{public okhttp3.ResponseBody okhttp3.internal.http1.Http1Codec.openResponseBody((r6 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r7 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

