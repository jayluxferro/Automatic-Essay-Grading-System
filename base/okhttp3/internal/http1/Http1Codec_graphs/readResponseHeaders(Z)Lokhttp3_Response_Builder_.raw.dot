digraph "CFG forokhttp3.internal.http1.Http1Codec.readResponseHeaders(Z)Lokhttp3\/Response$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r1 I:java.lang.String) =  \"state: \" \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: IGET  (r1 I:int) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x001c: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0020: INVOKE  \l  (r5 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|SYNTHETIC\lSplitter:B:7:0x0024\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0024\l|0x0024: INVOKE  (r0 I:java.lang.String) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.readHeaderLine():java.lang.String type: DIRECT A[Catch:\{ EOFException \-\> 0x0060 \}, TRY_ENTER]\l0x0028: INVOKE  (r0 I:okhttp3.internal.http.StatusLine) = (r0 I:java.lang.String) okhttp3.internal.http.StatusLine.parse(java.lang.String):okhttp3.internal.http.StatusLine type: STATIC A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x002c: NEW_INSTANCE  (r2 I:okhttp3.Response$Builder) =  okhttp3.Response$Builder A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x002e: INVOKE  (r2 I:okhttp3.Response$Builder) okhttp3.Response.Builder.\<init\>():void type: DIRECT A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0031: IGET  (r3 I:okhttp3.Protocol) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.protocol okhttp3.Protocol A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0033: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Protocol) okhttp3.Response.Builder.protocol(okhttp3.Protocol):okhttp3.Response$Builder type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0037: IGET  (r3 I:int) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.code int A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0039: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:int) okhttp3.Response.Builder.code(int):okhttp3.Response$Builder type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x003d: IGET  (r3 I:java.lang.String) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.message java.lang.String A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x003f: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:java.lang.String) okhttp3.Response.Builder.message(java.lang.String):okhttp3.Response$Builder type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0043: INVOKE  (r3 I:okhttp3.Headers) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.readHeaders():okhttp3.Headers type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x0047: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Headers) okhttp3.Response.Builder.headers(okhttp3.Headers):okhttp3.Response$Builder type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x004b: CONST  (r3 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x004d|0x004d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0055 A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: IGET  (r5 I:int) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.code int A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|0x0051: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0055 A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: RETURN  (r5 I:okhttp3.Response$Builder) A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: IGET  (r5 I:int) = (r0 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.code int A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0057|0x0057: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005c A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: IPUT  (r1 I:int), (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: RETURN  (r2 I:okhttp3.Response$Builder) A[Catch:\{ EOFException \-\> 0x0060 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ EOFException \-\> 0x0060 \}]\l0x005d: IPUT  (r5 I:int), (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int A[Catch:\{ EOFException \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: RETURN  (r2 I:okhttp3.Response$Builder) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|ExcHandler: EOFException null\lSplitter:B:7:0x0024\l|0x0060: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0061|0x0061: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0063: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0065: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0068: CONST_STR  (r2 I:java.lang.String) =  \"unexpected end of stream on \" \l0x006a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006d: IGET  (r2 I:okhttp3.internal.connection.StreamAllocation) = (r4 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.streamAllocation okhttp3.internal.connection.StreamAllocation \l0x006f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0072: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0076: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l0x0079: INVOKE  (r0 I:java.io.IOException), (r5 I:java.lang.Throwable) java.io.IOException.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x007c|0x007c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.Response$Builder okhttp3.internal.http1.Http1Codec.readResponseHeaders((r4 'this' I:okhttp3.internal.http1.Http1Codec A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

