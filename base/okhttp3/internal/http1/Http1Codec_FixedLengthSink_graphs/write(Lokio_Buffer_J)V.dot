digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7.closed != false) goto L_0x0042\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|okhttp3.internal.Util.checkOffsetAndCount(r8.size(), 0, r9)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if ((r9 \> r7.bytesRemaining ? 1 : (r9 == r7.bytesRemaining ? 0 : \-1)) \> 0) goto L_0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|r7.this$0.sink.write(r8, r9)\lr7.bytesRemaining = r7.bytesRemaining \- r9\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"expected \")\lr0.append(r7.bytesRemaining)\lr0.append(\" bytes but received \")\lr0.append(r9)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|throw new java.net.ProtocolException(r0.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042}"];
Node_9 [shape=record,label="{9\:\ 0x0049|throw new java.lang.IllegalStateException(\"closed\")\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.FixedLengthSink.write((r7v0 'this' okhttp3.internal.http1.Http1Codec$FixedLengthSink A[IMMUTABLE_TYPE, THIS]), (r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

