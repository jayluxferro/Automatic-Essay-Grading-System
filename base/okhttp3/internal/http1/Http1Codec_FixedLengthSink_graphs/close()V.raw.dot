digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSink.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: IPUT  \l  (r0 I:boolean)\l  (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink)\l okhttp3.internal.http1.Http1Codec.FixedLengthSink.closed boolean \l0x0008: IGET  (r0 I:long) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.bytesRemaining long \l0x000a: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000c: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.this$0 okhttp3.internal.http1.Http1Codec \l0x0012: IGET  (r1 I:okio.ForwardingTimeout) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.timeout okio.ForwardingTimeout \l0x0014: INVOKE  \l  (r0 I:okhttp3.internal.http1.Http1Codec)\l  (r1 I:okio.ForwardingTimeout)\l okhttp3.internal.http1.Http1Codec.detachTimeout(okio.ForwardingTimeout):void type: VIRTUAL \l0x0017: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r4 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.this$0 okhttp3.internal.http1.Http1Codec \l0x0019: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001a: IPUT  (r1 I:int), (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.state int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x001f: CONST_STR  (r1 I:java.lang.String) =  \"unexpected end of stream\" \l0x0021: INVOKE  (r0 I:java.net.ProtocolException), (r1 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.FixedLengthSink.close((r4 'this' I:okhttp3.internal.http1.Http1Codec$FixedLengthSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

