digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSink.close()V" {
subgraph cluster_Region_1837281182 {
label = "R(1:(1:(2:3|(2:(2:5|6)|(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_114215075 {
label = "R(1:(2:3|(2:(2:5|6)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2130278949 {
label = "IF [B:1:0x0002] THEN: R(2:3|(2:(2:5|6)|(1:8))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.closed != true) goto L_0x0005\l}"];
subgraph cluster_Region_1266801890 {
label = "R(2:3|(2:(2:5|6)|(1:8)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|r4.closed = true\l}"];
subgraph cluster_Region_864515155 {
label = "R(2:(2:5|6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1132214608 {
label = "IF [B:4:0x000e] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r4.bytesRemaining \<= 0) goto L_0x0010\l}"];
subgraph cluster_Region_1994480456 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|okhttp3.internal.http1.Http1Codec.this.detachTimeout(r4.timeout)\lokhttp3.internal.http1.Http1Codec.this.state = 3\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_868417466 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0024|throw new java.net.ProtocolException(\"unexpected end of stream\")\l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.FixedLengthSink.close((r4v0 'this' okhttp3.internal.http1.Http1Codec$FixedLengthSink A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_7 -> Node_8;
}

