digraph "CFG forokhttp3.internal.http1.Http1Codec.FixedLengthSink.write(Lokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r1 I:long) = (r8 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0008: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x000a: MOVE  (r5 I:?[long, double]) = (r9 I:?[long, double]) \l0x000b: INVOKE  (r1 I:long), (r3 I:long), (r5 I:long) okhttp3.internal.Util.checkOffsetAndCount(long, long, long):void type: STATIC \l0x000e: IGET  (r0 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.bytesRemaining long \l0x0010: CMP_L  (r0 I:int) = (r9 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:okhttp3.internal.http1.Http1Codec) = (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.this$0 okhttp3.internal.http1.Http1Codec \l0x0016: IGET  (r0 I:okio.BufferedSink) = (r0 I:okhttp3.internal.http1.Http1Codec) okhttp3.internal.http1.Http1Codec.sink okio.BufferedSink \l0x0018: INVOKE  (r0 I:okio.BufferedSink), (r8 I:okio.Buffer), (r9 I:long) okio.BufferedSink.write(okio.Buffer, long):void type: INTERFACE \l0x001b: IGET  (r0 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.bytesRemaining long \l0x001d: ARITH  (r0 I:long) = (r0 I:long) \- (r9 I:long) \l0x001e: IPUT  \l  (r0 I:long)\l  (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink)\l okhttp3.internal.http1.Http1Codec.FixedLengthSink.bytesRemaining long \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: NEW_INSTANCE  (r8 I:java.net.ProtocolException) =  java.net.ProtocolException \l0x0023: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0025: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0028: CONST_STR  (r1 I:java.lang.String) =  \"expected \" \l0x002a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: IGET  (r1 I:long) = (r7 I:okhttp3.internal.http1.Http1Codec$FixedLengthSink) okhttp3.internal.http1.Http1Codec.FixedLengthSink.bytesRemaining long \l0x002f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0032: CONST_STR  (r1 I:java.lang.String) =  \" bytes but received \" \l0x0034: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r0 I:java.lang.StringBuilder), (r9 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r9 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003e: INVOKE  (r8 I:java.net.ProtocolException), (r9 I:java.lang.String) java.net.ProtocolException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: NEW_INSTANCE  (r8 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0044: CONST_STR  (r9 I:java.lang.String) =  \"closed\" \l0x0046: INVOKE  \l  (r8 I:java.lang.IllegalStateException)\l  (r9 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.http1.Http1Codec.FixedLengthSink.write((r7 'this' I:okhttp3.internal.http1.Http1Codec$FixedLengthSink A[IMMUTABLE_TYPE, THIS]), (r8 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

