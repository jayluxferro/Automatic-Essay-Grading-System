digraph "CFG forokhttp3.internal.cache2.FileOperator.write(JLokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1)) \< 0) goto L_0x001f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r13 \> r12.size() ? 1 : (r13 == r12.size() ? 0 : \-1)) \> 0) goto L_0x001f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|LOOP_START\lPHI: r10 r13 \l  PHI: (r10v2 long) = (r10v0 long), (r10v3 long) binds: [B:3:0x000c, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 long) = (r13v0 long), (r13v2 long) binds: [B:3:0x000c, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000e\-\>B:6:0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if ((r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1)) \<= 0) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|LOOP_END\lLOOP:0: B:4:0x000e\-\>B:6:0x0012\l|long r2 = r9.fileChannel.transferFrom(r12, r10, r13)\llong r10 = r10 + r2\llong r13 = r13 \- r2\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f}"];
Node_9 [shape=record,label="{9\:\ 0x0024|throw new java.lang.IndexOutOfBoundsException()\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache2.FileOperator.write((r9v0 'this' okhttp3.internal.cache2.FileOperator A[IMMUTABLE_TYPE, THIS]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_4;
Node_8 -> Node_9;
Node_10 -> Node_7;
}

