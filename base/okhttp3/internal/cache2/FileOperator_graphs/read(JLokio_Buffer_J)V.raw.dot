digraph "CFG forokhttp3.internal.cache2.FileOperator.read(JLokio\/Buffer;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CMP_L  (r2 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r3 I:java.nio.channels.FileChannel) = (r9 I:okhttp3.internal.cache2.FileOperator) okhttp3.internal.cache2.FileOperator.fileChannel java.nio.channels.FileChannel \l0x000c: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l0x000d: MOVE  (r6 I:?[long, double]) = (r13 I:?[long, double]) \l0x000e: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x000f: INVOKE  (r2 I:long) = \l  (r3 I:java.nio.channels.FileChannel)\l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:java.nio.channels.WritableByteChannel)\l java.nio.channels.FileChannel.transferTo(long, long, java.nio.channels.WritableByteChannel):long type: VIRTUAL \l0x0013: ARITH  (r10 I:long) = (r10 I:long) + (r2 I:long) \l0x0014: ARITH  (r13 I:long) = (r13 I:long) \- (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: NEW_INSTANCE  (r10 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException \l0x0019: INVOKE  (r10 I:java.lang.IndexOutOfBoundsException) java.lang.IndexOutOfBoundsException.\<init\>():void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.internal.cache2.FileOperator.read((r9 'this' I:okhttp3.internal.cache2.FileOperator A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_2;
Node_6 -> Node_7;
}

