digraph "CFG forokhttp3.internal.cache2.Relay.RelaySource.\<init\>(Lokhttp3\/internal\/cache2\/Relay;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r2 I:okhttp3.internal.cache2.Relay)\l  (r1 I:okhttp3.internal.cache2.Relay$RelaySource)\l okhttp3.internal.cache2.Relay.RelaySource.this$0 okhttp3.internal.cache2.Relay \l0x0002: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r2 I:okio.Timeout) =  okio.Timeout \l0x0007: INVOKE  (r2 I:okio.Timeout) okio.Timeout.\<init\>():void type: DIRECT \l0x000a: IPUT  \l  (r2 I:okio.Timeout)\l  (r1 I:okhttp3.internal.cache2.Relay$RelaySource)\l okhttp3.internal.cache2.Relay.RelaySource.timeout okio.Timeout \l0x000c: NEW_INSTANCE  (r2 I:okhttp3.internal.cache2.FileOperator) =  okhttp3.internal.cache2.FileOperator \l0x000e: IGET  (r0 I:okhttp3.internal.cache2.Relay) = (r1 I:okhttp3.internal.cache2.Relay$RelaySource) okhttp3.internal.cache2.Relay.RelaySource.this$0 okhttp3.internal.cache2.Relay \l0x0010: IGET  (r0 I:java.io.RandomAccessFile) = (r0 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.file java.io.RandomAccessFile \l0x0012: INVOKE  (r0 I:java.nio.channels.FileChannel) = (r0 I:java.io.RandomAccessFile) java.io.RandomAccessFile.getChannel():java.nio.channels.FileChannel type: VIRTUAL \l0x0016: INVOKE  \l  (r2 I:okhttp3.internal.cache2.FileOperator)\l  (r0 I:java.nio.channels.FileChannel)\l okhttp3.internal.cache2.FileOperator.\<init\>(java.nio.channels.FileChannel):void type: DIRECT \l0x0019: IPUT  \l  (r2 I:okhttp3.internal.cache2.FileOperator)\l  (r1 I:okhttp3.internal.cache2.Relay$RelaySource)\l okhttp3.internal.cache2.Relay.RelaySource.fileOperator okhttp3.internal.cache2.FileOperator \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.cache2.Relay.RelaySource.\<init\>((r1 'this' I:okhttp3.internal.cache2.Relay$RelaySource A[IMMUTABLE_TYPE, THIS]), (r2 I:okhttp3.internal.cache2.Relay A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

