digraph "CFG forokhttp3.internal.cache2.Relay.commit(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r8 I:okhttp3.internal.cache2.Relay), (r9 I:long) okhttp3.internal.cache2.Relay.writeMetadata(long):void type: DIRECT \l0x0003: IGET  (r0 I:java.io.RandomAccessFile) = (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.file java.io.RandomAccessFile \l0x0005: INVOKE  (r0 I:java.nio.channels.FileChannel) = (r0 I:java.io.RandomAccessFile) java.io.RandomAccessFile.getChannel():java.nio.channels.FileChannel type: VIRTUAL \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r0 I:java.nio.channels.FileChannel), (r1 I:boolean) java.nio.channels.FileChannel.force(boolean):void type: VIRTUAL \l0x000d: SGET  (r3 I:okio.ByteString) =  okhttp3.internal.cache2.Relay.PREFIX_CLEAN okio.ByteString \l0x000f: IGET  (r0 I:okio.ByteString) = (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.metadata okio.ByteString \l0x0011: INVOKE  (r0 I:int) = (r0 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0015: CAST  (r6 I:long) = (long) (r0 I:int) \l0x0016: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r4 I:?[long, double]) = (r9 I:?[long, double]) \l0x0018: INVOKE  \l  (r2 I:okhttp3.internal.cache2.Relay)\l  (r3 I:okio.ByteString)\l  (r4 I:long)\l  (r6 I:long)\l okhttp3.internal.cache2.Relay.writeHeader(okio.ByteString, long, long):void type: DIRECT \l0x001b: IGET  (r9 I:java.io.RandomAccessFile) = (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.file java.io.RandomAccessFile \l0x001d: INVOKE  (r9 I:java.nio.channels.FileChannel) = (r9 I:java.io.RandomAccessFile) java.io.RandomAccessFile.getChannel():java.nio.channels.FileChannel type: VIRTUAL \l0x0021: INVOKE  (r9 I:java.nio.channels.FileChannel), (r1 I:boolean) java.nio.channels.FileChannel.force(boolean):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0025|0x0025: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|SYNTHETIC\lSplitter:B:3:0x0026\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0026\l|0x0026: IPUT  (r9 I:boolean), (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.complete boolean A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IGET  (r9 I:okio.Source) = (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.upstream okio.Source \l0x002b: INVOKE  (r9 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l0x002e: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: IPUT  (r9 I:okio.Source), (r8 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.upstream okio.Source \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|ExcHandler: all null\lSplitter:B:3:0x0026\l|0x0032: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|SYNTHETIC\lSplitter:B:9:0x0033\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0033\l|0x0033: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.internal.cache2.Relay.commit((r8 'this' I:okhttp3.internal.cache2.Relay A[IMMUTABLE_TYPE, THIS]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_8;
}

