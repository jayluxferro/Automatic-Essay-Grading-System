digraph "CFG forokhttp3.internal.cache2.Relay.writeMetadata(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r3 I:okio.Buffer) =  okio.Buffer \l0x0002: INVOKE  (r3 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0005: IGET  (r0 I:okio.ByteString) = (r6 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.metadata okio.ByteString \l0x0007: INVOKE  (r3 I:okio.Buffer), (r0 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL \l0x000a: NEW_INSTANCE  (r0 I:okhttp3.internal.cache2.FileOperator) =  okhttp3.internal.cache2.FileOperator \l0x000c: IGET  (r1 I:java.io.RandomAccessFile) = (r6 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.file java.io.RandomAccessFile \l0x000e: INVOKE  (r1 I:java.nio.channels.FileChannel) = (r1 I:java.io.RandomAccessFile) java.io.RandomAccessFile.getChannel():java.nio.channels.FileChannel type: VIRTUAL \l0x0012: INVOKE  \l  (r0 I:okhttp3.internal.cache2.FileOperator)\l  (r1 I:java.nio.channels.FileChannel)\l okhttp3.internal.cache2.FileOperator.\<init\>(java.nio.channels.FileChannel):void type: DIRECT \l0x0015: CONST  (r1 I:?[long, double]) = (32 ?[long, double]) \l0x0017: ARITH  (r1 I:long) = (r1 I:long) + (r7 I:long) \l0x0018: IGET  (r7 I:okio.ByteString) = (r6 I:okhttp3.internal.cache2.Relay) okhttp3.internal.cache2.Relay.metadata okio.ByteString \l0x001a: INVOKE  (r7 I:int) = (r7 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x001e: CAST  (r4 I:long) = (long) (r7 I:int) \l0x001f: INVOKE  \l  (r0 I:okhttp3.internal.cache2.FileOperator)\l  (r1 I:long)\l  (r3 I:okio.Buffer)\l  (r4 I:long)\l okhttp3.internal.cache2.FileOperator.write(long, okio.Buffer, long):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0022|0x0022: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.cache2.Relay.writeMetadata((r6 'this' I:okhttp3.internal.cache2.Relay A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

