digraph "CFG forokhttp3.internal.cache2.Relay.writeHeader(Lokio\/ByteString;JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.Buffer r3 = new okio.Buffer()\lr3.write(r7)\lr3.writeLong(r8)\lr3.writeLong(r10)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|if ((r3.size() \> 32 ? 1 : (r3.size() == 32 ? 0 : \-1)) != 0) goto L_0x002b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|new okhttp3.internal.cache2.FileOperator(r6.file.getChannel()).write(0, r3, 32)\l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x002b}"];
Node_5 [shape=record,label="{5\:\ 0x0030|throw new java.lang.IllegalArgumentException()\l}"];
MethodNode[shape=record,label="{private void okhttp3.internal.cache2.Relay.writeHeader((r6v0 'this' okhttp3.internal.cache2.Relay A[IMMUTABLE_TYPE, THIS]), (r7v0 okio.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

