digraph "CFG forokhttp3.internal.cache2.Relay.read(Ljava\/io\/File;)Lokhttp3\/internal\/cache2\/Relay;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r1 I:java.io.RandomAccessFile) =  java.io.RandomAccessFile \l0x0002: CONST_STR  (r0 I:java.lang.String) =  \"rw\" \l0x0004: INVOKE  \l  (r1 I:java.io.RandomAccessFile)\l  (r10 I:java.io.File)\l  (r0 I:java.lang.String)\l java.io.RandomAccessFile.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x0007: NEW_INSTANCE  (r10 I:okhttp3.internal.cache2.FileOperator) =  okhttp3.internal.cache2.FileOperator \l0x0009: INVOKE  (r0 I:java.nio.channels.FileChannel) = (r1 I:java.io.RandomAccessFile) java.io.RandomAccessFile.getChannel():java.nio.channels.FileChannel type: VIRTUAL \l0x000d: INVOKE  \l  (r10 I:okhttp3.internal.cache2.FileOperator)\l  (r0 I:java.nio.channels.FileChannel)\l okhttp3.internal.cache2.FileOperator.\<init\>(java.nio.channels.FileChannel):void type: DIRECT \l0x0010: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x0012: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0015: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0017: CONST  (r6 I:?[long, double]) = (32 ?[long, double]) \l0x0019: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  \l  (r2 I:okhttp3.internal.cache2.FileOperator)\l  (r3 I:long)\l  (r5 I:okio.Buffer)\l  (r6 I:long)\l okhttp3.internal.cache2.FileOperator.read(long, okio.Buffer, long):void type: VIRTUAL \l0x001e: SGET  (r2 I:okio.ByteString) =  okhttp3.internal.cache2.Relay.PREFIX_CLEAN okio.ByteString \l0x0020: INVOKE  (r2 I:int) = (r2 I:okio.ByteString) okio.ByteString.size():int type: VIRTUAL \l0x0024: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0025: INVOKE  (r2 I:okio.ByteString) = (r0 I:okio.Buffer), (r2 I:long) okio.Buffer.readByteString(long):okio.ByteString type: VIRTUAL \l0x0029: SGET  (r3 I:okio.ByteString) =  okhttp3.internal.cache2.Relay.PREFIX_CLEAN okio.ByteString \l0x002b: INVOKE  (r2 I:boolean) = (r2 I:okio.ByteString), (r3 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0056 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0031|0x0031: INVOKE  (r8 I:long) = (r0 I:okio.Buffer) okio.Buffer.readLong():long type: VIRTUAL \l0x0035: INVOKE  (r6 I:long) = (r0 I:okio.Buffer) okio.Buffer.readLong():long type: VIRTUAL \l0x0039: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x003b: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x003e: CONST  (r2 I:?[long, double]) = (32 ?[long, double]) \l0x0040: ARITH  (r3 I:long) = (r8 I:long) + (r2 I:long) \l0x0042: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0043: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0044: INVOKE  \l  (r2 I:okhttp3.internal.cache2.FileOperator)\l  (r3 I:long)\l  (r5 I:okio.Buffer)\l  (r6 I:long)\l okhttp3.internal.cache2.FileOperator.read(long, okio.Buffer, long):void type: VIRTUAL \l0x0047: INVOKE  (r5 I:okio.ByteString) = (r0 I:okio.Buffer) okio.Buffer.readByteString():okio.ByteString type: VIRTUAL \l0x004b: NEW_INSTANCE  (r10 I:okhttp3.internal.cache2.Relay) =  okhttp3.internal.cache2.Relay \l0x004d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0050: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0051: MOVE  (r3 I:?[long, double]) = (r8 I:?[long, double]) \l0x0052: INVOKE  \l  (r0 I:okhttp3.internal.cache2.Relay)\l  (r1 I:java.io.RandomAccessFile)\l  (r2 I:okio.Source)\l  (r3 I:long)\l  (r5 I:okio.ByteString)\l  (r6 I:long)\l okhttp3.internal.cache2.Relay.\<init\>(java.io.RandomAccessFile, okio.Source, long, okio.ByteString, long):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0055|0x0055: RETURN  (r10 I:okhttp3.internal.cache2.Relay) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0056|0x0056: NEW_INSTANCE  (r10 I:java.io.IOException) =  java.io.IOException \l0x0058: CONST_STR  (r0 I:java.lang.String) =  \"unreadable cache file\" \l0x005a: INVOKE  (r10 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x005d|0x005d: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.internal.cache2.Relay okhttp3.internal.cache2.Relay.read((r10 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

