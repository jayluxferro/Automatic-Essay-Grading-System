digraph "CFG forokhttp3.Protocol.get(Ljava\/lang\/String;)Lokhttp3\/Protocol;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_0 okhttp3.Protocol \l0x0002: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x0004: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_0 okhttp3.Protocol \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_1 okhttp3.Protocol \l0x000f: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x0011: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_1 okhttp3.Protocol \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l0x001c: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x001e: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_2 okhttp3.Protocol \l0x0029: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x002b: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_2 okhttp3.Protocol \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.SPDY_3 okhttp3.Protocol \l0x0036: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x0038: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0041 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.SPDY_3 okhttp3.Protocol \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: SGET  (r0 I:okhttp3.Protocol) =  okhttp3.Protocol.QUIC okhttp3.Protocol \l0x0043: IGET  (r0 I:java.lang.String) = (r0 I:okhttp3.Protocol) okhttp3.Protocol.protocol java.lang.String \l0x0045: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004e \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: SGET  (r3 I:okhttp3.Protocol) =  okhttp3.Protocol.QUIC okhttp3.Protocol \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: RETURN  (r3 I:okhttp3.Protocol) \l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x0050: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0052: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0055: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected protocol: \" \l0x0057: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005a: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005d: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0061: INVOKE  (r0 I:java.io.IOException), (r3 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0064|0x0064: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Protocol okhttp3.Protocol.get((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

