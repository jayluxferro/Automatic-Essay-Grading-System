digraph "CFG forokhttp3.Cache.put(Lokhttp3\/Response;)Lokhttp3\/internal\/cache\/CacheRequest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Request) = (r4 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0008: INVOKE  (r1 I:okhttp3.Request) = (r4 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x000c: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0010: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String) okhttp3.internal.http.HttpMethod.invalidatesCache(java.lang.String):boolean type: STATIC \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|SYNTHETIC\lSplitter:B:2:0x0017\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0017\l|0x0017: INVOKE  (r4 I:okhttp3.Request) = (r4 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL A[Catch:\{ IOException \-\> 0x001e \}, TRY_ENTER]\l0x001b: INVOKE  (r3 I:okhttp3.Cache), (r4 I:okhttp3.Request) okhttp3.Cache.remove(okhttp3.Request):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: RETURN  (r2 I:okhttp3.internal.cache.CacheRequest) \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:2:0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: CONST_STR  (r1 I:java.lang.String) =  \"GET\" \l0x0021: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: RETURN  (r2 I:okhttp3.internal.cache.CacheRequest) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: INVOKE  (r0 I:boolean) = (r4 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.hasVaryAll(okhttp3.Response):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: RETURN  (r2 I:okhttp3.internal.cache.CacheRequest) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: NEW_INSTANCE  (r0 I:okhttp3.Cache$Entry) =  okhttp3.Cache$Entry \l0x0031: INVOKE  (r0 I:okhttp3.Cache$Entry), (r4 I:okhttp3.Response) okhttp3.Cache.Entry.\<init\>(okhttp3.Response):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|SYNTHETIC\lSplitter:B:13:0x0034\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0034\l|0x0034: IGET  (r1 I:okhttp3.internal.cache.DiskLruCache) = (r3 I:okhttp3.Cache) okhttp3.Cache.cache okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x0052 \}, TRY_ENTER]\l0x0036: INVOKE  (r4 I:okhttp3.Request) = (r4 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL A[Catch:\{ IOException \-\> 0x0052 \}]\l0x003a: INVOKE  (r4 I:okhttp3.HttpUrl) = (r4 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL A[Catch:\{ IOException \-\> 0x0052 \}]\l0x003e: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.HttpUrl) okhttp3.Cache.key(okhttp3.HttpUrl):java.lang.String type: STATIC A[Catch:\{ IOException \-\> 0x0052 \}]\l0x0042: INVOKE  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor) = \l  (r1 I:okhttp3.internal.cache.DiskLruCache)\l  (r4 I:java.lang.String)\l okhttp3.internal.cache.DiskLruCache.edit(java.lang.String):okhttp3.internal.cache.DiskLruCache$Editor type: VIRTUAL A[Catch:\{ IOException \-\> 0x0052 \}]\l0x0045: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: RETURN  (r2 I:okhttp3.internal.cache.CacheRequest) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|SYNTHETIC\lSplitter:B:17:0x0049\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0049\l|0x0049: INVOKE  \l  (r0 I:okhttp3.Cache$Entry)\l  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor)\l okhttp3.Cache.Entry.writeTo(okhttp3.internal.cache.DiskLruCache$Editor):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0053 \}, TRY_ENTER]\l0x004c: NEW_INSTANCE  (r0 I:okhttp3.Cache$CacheRequestImpl) =  okhttp3.Cache$CacheRequestImpl A[Catch:\{ IOException \-\> 0x0053 \}]\l0x004e: INVOKE  \l  (r0 I:okhttp3.Cache$CacheRequestImpl)\l  (r3 I:okhttp3.Cache)\l  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor)\l okhttp3.Cache.CacheRequestImpl.\<init\>(okhttp3.Cache, okhttp3.internal.cache.DiskLruCache$Editor):void type: DIRECT A[Catch:\{ IOException \-\> 0x0053 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: RETURN  (r0 I:okhttp3.internal.cache.CacheRequest) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:13:0x0034\l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|0x0053: INVOKE  \l  (r3 I:okhttp3.Cache)\l  (r4 I:okhttp3.internal.cache.DiskLruCache$Editor)\l okhttp3.Cache.abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:17:0x0049\l}"];
Node_24 [shape=record,label="{24\:\ 0x0056|0x0056: RETURN  (r2 I:okhttp3.internal.cache.CacheRequest) \l}"];
MethodNode[shape=record,label="{okhttp3.internal.cache.CacheRequest okhttp3.Cache.put((r3 'this' I:okhttp3.Cache A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_18 -> Node_23;
Node_20 -> Node_22;
Node_21 -> Node_20;
Node_22 -> Node_24;
Node_23 -> Node_22;
}

