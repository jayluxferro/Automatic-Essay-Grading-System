digraph "CFG forokhttp3.Cache.trackResponse(Lokhttp3\/internal\/cache\/CacheStrategy;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:int) = (r1 I:okhttp3.Cache) okhttp3.Cache.requestCount int A[Catch:\{ all \-\> 0x001e \}, TRY_ENTER]\l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (1 int) A[Catch:\{ all \-\> 0x001e \}]\l0x0005: IPUT  (r0 I:int), (r1 I:okhttp3.Cache) okhttp3.Cache.requestCount int A[Catch:\{ all \-\> 0x001e \}]\l0x0007: IGET  (r0 I:okhttp3.Request) = (r2 I:okhttp3.internal.cache.CacheStrategy) okhttp3.internal.cache.CacheStrategy.networkRequest okhttp3.Request A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r2 I:int) = (r1 I:okhttp3.Cache) okhttp3.Cache.networkCount int A[Catch:\{ all \-\> 0x001e \}]\l0x000d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ all \-\> 0x001e \}]\l0x000f: IPUT  (r2 I:int), (r1 I:okhttp3.Cache) okhttp3.Cache.networkCount int A[Catch:\{ all \-\> 0x001e \}]\l0x0011: GOTO  \-\> 0x001c A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r2 I:okhttp3.Response) = (r2 I:okhttp3.internal.cache.CacheStrategy) okhttp3.internal.cache.CacheStrategy.cacheResponse okhttp3.Response A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r2 I:int) = (r1 I:okhttp3.Cache) okhttp3.Cache.hitCount int A[Catch:\{ all \-\> 0x001e \}]\l0x0018: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ all \-\> 0x001e \}]\l0x001a: IPUT  (r2 I:int), (r1 I:okhttp3.Cache) okhttp3.Cache.hitCount int A[Catch:\{ all \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001e: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized void okhttp3.Cache.trackResponse((r1 'this' I:okhttp3.Cache A[IMMUTABLE_TYPE, THIS]), (r2 I:okhttp3.internal.cache.CacheStrategy A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

