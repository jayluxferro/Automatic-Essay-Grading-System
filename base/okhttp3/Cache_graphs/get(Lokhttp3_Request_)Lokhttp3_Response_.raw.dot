digraph "CFG forokhttp3.Cache.get(Lokhttp3\/Request;)Lokhttp3\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.HttpUrl) = (r5 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.Cache.key(okhttp3.HttpUrl):java.lang.String type: STATIC \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0009\l|0x0009: IGET  (r2 I:okhttp3.internal.cache.DiskLruCache) = (r4 I:okhttp3.Cache) okhttp3.Cache.cache okhttp3.internal.cache.DiskLruCache A[Catch:\{ IOException \-\> 0x0033 \}, TRY_ENTER]\l0x000b: INVOKE  (r0 I:okhttp3.internal.cache.DiskLruCache$Snapshot) = \l  (r2 I:okhttp3.internal.cache.DiskLruCache)\l  (r0 I:java.lang.String)\l okhttp3.internal.cache.DiskLruCache.get(java.lang.String):okhttp3.internal.cache.DiskLruCache$Snapshot type: VIRTUAL A[Catch:\{ IOException \-\> 0x0033 \}]\l0x000e: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r1 I:okhttp3.Response) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|SYNTHETIC\lSplitter:B:5:0x0012\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0012\l|0x0012: NEW_INSTANCE  (r2 I:okhttp3.Cache$Entry) =  okhttp3.Cache$Entry A[Catch:\{ IOException \-\> 0x002f \}, TRY_ENTER]\l0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x002f \}]\l0x0015: INVOKE  (r3 I:okio.Source) = \l  (r0 I:okhttp3.internal.cache.DiskLruCache$Snapshot)\l  (r3 I:int)\l okhttp3.internal.cache.DiskLruCache.Snapshot.getSource(int):okio.Source type: VIRTUAL A[Catch:\{ IOException \-\> 0x002f \}]\l0x0019: INVOKE  (r2 I:okhttp3.Cache$Entry), (r3 I:okio.Source) okhttp3.Cache.Entry.\<init\>(okio.Source):void type: DIRECT A[Catch:\{ IOException \-\> 0x002f \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r0 I:okhttp3.Response) = \l  (r2 I:okhttp3.Cache$Entry)\l  (r0 I:okhttp3.internal.cache.DiskLruCache$Snapshot)\l okhttp3.Cache.Entry.response(okhttp3.internal.cache.DiskLruCache$Snapshot):okhttp3.Response type: VIRTUAL \l0x0020: INVOKE  (r5 I:boolean) = \l  (r2 I:okhttp3.Cache$Entry)\l  (r5 I:okhttp3.Request)\l  (r0 I:okhttp3.Response)\l okhttp3.Cache.Entry.matches(okhttp3.Request, okhttp3.Response):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: INVOKE  (r5 I:okhttp3.ResponseBody) = (r0 I:okhttp3.Response) okhttp3.Response.body():okhttp3.ResponseBody type: VIRTUAL \l0x002a: INVOKE  (r5 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  (r1 I:okhttp3.Response) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: RETURN  (r0 I:okhttp3.Response) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: INVOKE  (r0 I:java.io.Closeable) okhttp3.internal.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:5:0x0012\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: RETURN  (r1 I:okhttp3.Response) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: RETURN  (r1 I:okhttp3.Response) \l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:1:0x0009\l}"];
MethodNode[shape=record,label="{okhttp3.Response okhttp3.Cache.get((r4 'this' I:okhttp3.Cache A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_12 -> Node_14;
Node_13 -> Node_12;
Node_16 -> Node_15;
}

