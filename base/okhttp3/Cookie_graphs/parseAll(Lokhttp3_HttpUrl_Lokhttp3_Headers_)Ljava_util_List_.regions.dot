digraph "CFG forokhttp3.Cookie.parseAll(Lokhttp3\/HttpUrl;Lokhttp3\/Headers;)Ljava\/util\/List;" {
subgraph cluster_Region_1448188530 {
label = "R(3:0|(3:2|(2:(1:5)|6)(0)|7)|(2:(1:15)|(1:14)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List java.util.List\<java.lang.String\> r5 = r5.values(\"Set\-Cookie\")\lint int r0 = r5.size()\ljava.util.ArrayList r1 = null\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_63364690 {
label = "LOOP:0: (3:2|(2:(1:5)|6)(0)|7)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 java.util.ArrayList) = (r1v0 java.util.ArrayList), (r1v2 java.util.ArrayList) binds: [B:0:0x0000, B:7:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:7:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:7:0x0025\l|if (r2 \< r0) goto L_0x000e\l}"];
subgraph cluster_Region_1649206615 {
label = "R(3:2|(2:(1:5)|6)(0)|7)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|okhttp3.Cookie okhttp3.Cookie r3 = parse(r4, r5.get(r2))\l}"];
subgraph cluster_IfRegion_456241103 {
label = "IF [B:3:0x0018] THEN: R(2:(1:5)|6) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|if (r3 != null) goto L_0x001b\l}"];
subgraph cluster_Region_1735139731 {
label = "R(2:(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_901329682 {
label = "IF [B:4:0x001b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r1 == null) goto L_0x001d\l}"];
subgraph cluster_Region_1877063318 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|java.util.ArrayList r1 = new java.util.ArrayList()\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0022|PHI: r1 \l  PHI: (r1v3 java.util.ArrayList) = (r1v1 java.util.ArrayList), (r1v4 java.util.ArrayList) binds: [B:4:0x001b, B:5:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|r1.add(r3)\l}"];
}
subgraph cluster_Region_1281106843 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_7 [shape=record,label="{7\:\ 0x0025|LOOP_END\lPHI: r1 \l  PHI: (r1v2 java.util.ArrayList) = (r1v1 java.util.ArrayList), (r1v3 java.util.ArrayList) binds: [B:13:0x0025, B:12:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:7:0x0025\l|r2++\l}"];
}
}
subgraph cluster_Region_463020592 {
label = "R(2:(1:15)|(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_819601071 {
label = "IF [B:8:0x0028] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|if (r1 != null) goto L_0x002a\l}"];
subgraph cluster_Region_89879208 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return java.util.Collections.unmodifiableList(r1)\l}"];
}
}
subgraph cluster_Region_652778346 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.util.Collections.emptyList()\l}"];
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ 0x002a}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002f}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0028|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0025|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0025|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.List\<okhttp3.Cookie\> okhttp3.Cookie.parseAll((r4v0 okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokhttp3\/HttpUrl;, Lokhttp3\/Headers;, ), Ljava\/util\/List\<, Lokhttp3\/Cookie;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_12;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_14;
Node_11 -> Node_8;
Node_12 -> Node_7;
Node_13 -> Node_7;
}

