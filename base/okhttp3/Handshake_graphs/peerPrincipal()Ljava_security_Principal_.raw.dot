digraph "CFG forokhttp3.Handshake.peerPrincipal()Ljava\/security\/Principal;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.security.cert.Certificate\>) = (r2 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates java.util.List \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.util.List\<java.security.cert.Certificate\>) = (r2 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates java.util.List \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r0 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r0 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r0 I:javax.security.auth.x500.X500Principal) = (r0 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectX500Principal():javax.security.auth.x500.X500Principal type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN  (r0 I:java.security.Principal) \l}"];
MethodNode[shape=record,label="{public java.security.Principal okhttp3.Handshake.peerPrincipal((r2 'this' I:okhttp3.Handshake A[IMMUTABLE_TYPE, THIS]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

