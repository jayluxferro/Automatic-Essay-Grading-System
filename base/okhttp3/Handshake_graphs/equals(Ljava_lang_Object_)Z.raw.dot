digraph "CFG forokhttp3.Handshake.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) okhttp3.Handshake \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CHECK_CAST  (r4 I:okhttp3.Handshake) = (okhttp3.Handshake) (r4 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r0 I:okhttp3.TlsVersion) = (r3 I:okhttp3.Handshake) okhttp3.Handshake.tlsVersion okhttp3.TlsVersion \l0x000a: IGET  (r2 I:okhttp3.TlsVersion) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.tlsVersion okhttp3.TlsVersion \l0x000c: INVOKE  (r0 I:boolean) = (r0 I:okhttp3.TlsVersion), (r2 I:java.lang.Object) okhttp3.TlsVersion.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r0 I:okhttp3.CipherSuite) = (r3 I:okhttp3.Handshake) okhttp3.Handshake.cipherSuite okhttp3.CipherSuite \l0x0014: IGET  (r2 I:okhttp3.CipherSuite) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.cipherSuite okhttp3.CipherSuite \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r0 I:java.util.List\<java.security.cert.Certificate\>) = (r3 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates java.util.List \l0x001e: IGET  (r2 I:java.util.List\<java.security.cert.Certificate\>) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates java.util.List \l0x0020: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IGET  (r0 I:java.util.List\<java.security.cert.Certificate\>) = (r3 I:okhttp3.Handshake) okhttp3.Handshake.localCertificates java.util.List \l0x0028: IGET  (r4 I:java.util.List\<java.security.cert.Certificate\>) = (r4 I:okhttp3.Handshake) okhttp3.Handshake.localCertificates java.util.List \l0x002a: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.Handshake.equals((r3 'this' I:okhttp3.Handshake A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

