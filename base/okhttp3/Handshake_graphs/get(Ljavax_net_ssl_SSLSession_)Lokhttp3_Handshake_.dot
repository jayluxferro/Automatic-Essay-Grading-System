digraph "CFG forokhttp3.Handshake.get(Ljavax\/net\/ssl\/SSLSession;)Lokhttp3\/Handshake;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r0 = r4.getCipherSuite()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == null) goto L_0x0062\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (\"SSL_NULL_WITH_NULL_NULL\".equals(r0) != false) goto L_0x005a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|okhttp3.CipherSuite r0 = okhttp3.CipherSuite.forJavaName(r0)\ljava.lang.String r1 = r4.getProtocol()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r1 == null) goto L_0x0052\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (mil.nga.geopackage.projection.ProjectionConstants.AUTHORITY_NONE.equals(r1) != false) goto L_0x004a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|okhttp3.TlsVersion r1 = okhttp3.TlsVersion.forJavaName(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|SYNTHETIC\lSplitter:B:9:0x0024\l}"];
Node_10 [shape=record,label="{10\:\ ?|Catch:\{ SSLPeerUnverifiedException \-\> 0x0029 \}\lSplitter:B:9:0x0024\l|java.security.cert.Certificate[] r2 = r4.getPeerCertificates()     \/\/ Catch:\{ SSLPeerUnverifiedException \-\> 0x0029 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|r2 = null\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: SSLPeerUnverifiedException (unused javax.net.ssl.SSLPeerUnverifiedException)\lSplitter:B:9:0x0024\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|PHI: r2 \l  PHI: (r2v2 java.security.cert.Certificate[]) = (r2v6 java.security.cert.Certificate[]), (r2v7 java.security.cert.Certificate[]) binds: [B:11:0x0029, B:10:?] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == null) goto L_0x0031\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|java.util.List r2 = okhttp3.internal.Util.immutableList((T[]) r2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|java.util.List r2 = java.util.Collections.emptyList()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|PHI: r2 \l  PHI: (r2v3 java.util.List) = (r2v4 java.util.List), (r2v5 java.util.List) binds: [B:15:0x0031, B:14:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|java.security.cert.Certificate[] r4 = r4.getLocalCertificates()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|if (r4 == null) goto L_0x0040\l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|java.util.List r4 = okhttp3.internal.Util.immutableList((T[]) r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|java.util.List r4 = java.util.Collections.emptyList()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|PHI: r4 \l  PHI: (r4v6 java.util.List) = (r4v7 java.util.List), (r4v8 java.util.List) binds: [B:19:0x0040, B:18:0x003b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|RETURN\l|return new okhttp3.Handshake(r1, r0, r2, r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x004a}"];
Node_23 [shape=record,label="{23\:\ 0x0051|throw new java.io.IOException(\"tlsVersion == NONE\")\l}"];
Node_24 [shape=record,label="{24\:\ 0x0052}"];
Node_25 [shape=record,label="{25\:\ 0x0059|throw new java.lang.IllegalStateException(\"tlsVersion == null\")\l}"];
Node_26 [shape=record,label="{26\:\ 0x005a}"];
Node_27 [shape=record,label="{27\:\ 0x0061|throw new java.io.IOException(\"cipherSuite == SSL_NULL_WITH_NULL_NULL\")\l}"];
Node_28 [shape=record,label="{28\:\ 0x0062}"];
Node_29 [shape=record,label="{29\:\ 0x0069|throw new java.lang.IllegalStateException(\"cipherSuite == null\")\l}"];
MethodNode[shape=record,label="{public static okhttp3.Handshake okhttp3.Handshake.get((r4v0 javax.net.ssl.SSLSession A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_26;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_13;
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_29;
}

