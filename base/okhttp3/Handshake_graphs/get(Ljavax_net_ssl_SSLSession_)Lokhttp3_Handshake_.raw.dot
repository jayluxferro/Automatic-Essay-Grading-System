digraph "CFG forokhttp3.Handshake.get(Ljavax\/net\/ssl\/SSLSession;)Lokhttp3\/Handshake;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r4 I:javax.net.ssl.SSLSession) javax.net.ssl.SSLSession.getCipherSuite():java.lang.String type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0062 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r1 I:java.lang.String) =  \"SSL_NULL_WITH_NULL_NULL\" \l0x0008: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x005a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r0 I:okhttp3.CipherSuite) = (r0 I:java.lang.String) okhttp3.CipherSuite.forJavaName(java.lang.String):okhttp3.CipherSuite type: STATIC \l0x0012: INVOKE  (r1 I:java.lang.String) = (r4 I:javax.net.ssl.SSLSession) javax.net.ssl.SSLSession.getProtocol():java.lang.String type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0052 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST_STR  (r2 I:java.lang.String) =  \"NONE\" \l0x001a: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r1 I:okhttp3.TlsVersion) = (r1 I:java.lang.String) okhttp3.TlsVersion.forJavaName(java.lang.String):okhttp3.TlsVersion type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|SYNTHETIC\lSplitter:B:9:0x0024\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0024\l|0x0024: INVOKE  (r2 I:java.security.cert.Certificate[]) = (r4 I:javax.net.ssl.SSLSession) javax.net.ssl.SSLSession.getPeerCertificates():java.security.cert.Certificate[] type: INTERFACE A[Catch:\{ SSLPeerUnverifiedException \-\> 0x0029 \}, TRY_ENTER]\l0x0027: NOP   A[TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: SSLPeerUnverifiedException null\lSplitter:B:9:0x0024\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.Object[]) okhttp3.internal.Util.immutableList(java.lang.Object[]):java.util.List type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: INVOKE  (r2 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: INVOKE  (r4 I:java.security.cert.Certificate[]) = (r4 I:javax.net.ssl.SSLSession) javax.net.ssl.SSLSession.getLocalCertificates():java.security.cert.Certificate[] type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0040 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Object[]) okhttp3.internal.Util.immutableList(java.lang.Object[]):java.util.List type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: INVOKE  (r4 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: NEW_INSTANCE  (r3 I:okhttp3.Handshake) =  okhttp3.Handshake \l0x0046: INVOKE  \l  (r3 I:okhttp3.Handshake)\l  (r1 I:okhttp3.TlsVersion)\l  (r0 I:okhttp3.CipherSuite)\l  (r2 I:java.util.List)\l  (r4 I:java.util.List)\l okhttp3.Handshake.\<init\>(okhttp3.TlsVersion, okhttp3.CipherSuite, java.util.List, java.util.List):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: RETURN  (r3 I:okhttp3.Handshake) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x004c: CONST_STR  (r0 I:java.lang.String) =  \"tlsVersion == NONE\" \l0x004e: INVOKE  (r4 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|0x0052: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0054: CONST_STR  (r0 I:java.lang.String) =  \"tlsVersion == null\" \l0x0056: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0059|0x0059: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x005a|0x005a: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x005c: CONST_STR  (r0 I:java.lang.String) =  \"cipherSuite == SSL_NULL_WITH_NULL_NULL\" \l0x005e: INVOKE  (r4 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x0061|0x0061: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0062|0x0062: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0064: CONST_STR  (r0 I:java.lang.String) =  \"cipherSuite == null\" \l0x0066: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0069|0x0069: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.Handshake okhttp3.Handshake.get((r4 I:javax.net.ssl.SSLSession A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_25;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_23;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_12;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
}

