digraph "CFG forokhttp3.ResponseBody.create(Lokhttp3\/MediaType;Ljava\/lang\/String;)Lokhttp3\/ResponseBody;" {
subgraph cluster_Region_1846582514 {
label = "R(4:0|(1:4)|5|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.nio.charset.Charset java.nio.charset.Charset r0 = okhttp3.internal.Util.UTF_8\l}"];
subgraph cluster_IfRegion_1810894441 {
label = "IF [B:1:0x0002, B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r2 != null) goto L_0x0004\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if ((r0 = r2.charset()) == null) goto L_0x000a\l}"];
subgraph cluster_Region_463932151 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|java.nio.charset.Charset r0 = okhttp3.internal.Util.UTF_8\lokhttp3.MediaType r2 = okhttp3.MediaType.parse(r2 + \"; charset=utf\-8\")\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0021|PHI: r0 r2 \l  PHI: (r0v1 java.nio.charset.Charset) = (r0v0 java.nio.charset.Charset), (r0v3 java.nio.charset.Charset), (r0v4 java.nio.charset.Charset) binds: [B:1:0x0002, B:3:0x0008, B:4:0x000a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 okhttp3.MediaType) = (r2v0 okhttp3.MediaType), (r2v0 okhttp3.MediaType), (r2v5 okhttp3.MediaType) binds: [B:1:0x0002, B:3:0x0008, B:4:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|okio.Buffer okio.Buffer r3 = new okio.Buffer().writeString(r3, r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|RETURN\l|return create(r2, r3.size(), r3)\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
MethodNode[shape=record,label="{public static okhttp3.ResponseBody okhttp3.ResponseBody.create((r2v0 okhttp3.MediaType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_2 -> Node_3;
}

