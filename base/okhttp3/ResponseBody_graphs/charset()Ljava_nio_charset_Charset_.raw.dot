digraph "CFG forokhttp3.ResponseBody.charset()Ljava\/nio\/charset\/Charset;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.MediaType) = (r2 I:okhttp3.ResponseBody) okhttp3.ResponseBody.contentType():okhttp3.MediaType type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r1 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l0x0008: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:okhttp3.MediaType), (r1 I:java.nio.charset.Charset) okhttp3.MediaType.charset(java.nio.charset.Charset):java.nio.charset.Charset type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: SGET  (r0 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r0 I:java.nio.charset.Charset) \l}"];
MethodNode[shape=record,label="{private java.nio.charset.Charset okhttp3.ResponseBody.charset((r2 'this' I:okhttp3.ResponseBody A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

