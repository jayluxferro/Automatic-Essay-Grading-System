digraph "CFG forokhttp3.ResponseBody.bytes()[B" {
subgraph cluster_Region_2094078325 {
label = "R(2:0|(2:2|(3:4|5|(2:(1:11)|(2:9|10))))(2:15|16))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r0 = contentLength()\l}"];
subgraph cluster_IfRegion_163478729 {
label = "IF [B:1:0x0009] THEN: R(2:2|(3:4|5|(2:(1:11)|(2:9|10)))) ELSE: R(2:15|16)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r0 \<= 2147483647L) goto L_0x000b\l}"];
subgraph cluster_Region_780406550 {
label = "R(2:2|(3:4|5|(2:(1:11)|(2:9|10))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000b|okio.BufferedSource okio.BufferedSource r2 = source()\l}"];
subgraph cluster_TryCatchRegion_718378588 {
label = "Try: R(3:4|5|(2:(1:11)|(2:9|10))) catches: R(3:12|13|14)";
node [shape=record,color=blue];
subgraph cluster_Region_2047361903 {
label = "R(3:4|5|(2:(1:11)|(2:9|10)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ all \-\> 0x0049 \}\lSplitter:B:3:0x000f\l|byte[] byte[] r3 = r2.readByteArray()     \/\/ Catch:\{ all \-\> 0x0049 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|okhttp3.internal.Util.closeQuietly((java.io.Closeable) r2)\l}"];
subgraph cluster_Region_451869105 {
label = "R(2:(1:11)|(2:9|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2060833208 {
label = "IF [B:6:0x001a, B:8:0x0020] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r0 == \-1) goto L_0x0048\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|ADDED_TO_REGION\l|if (r0 == ((long) r3.length)) goto L_0x0048\l}"];
subgraph cluster_Region_2065274934 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0048|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_550033074 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0023}"];
Node_10 [shape=record,label="{10\:\ 0x0047|throw new java.io.IOException(\"Content\-Length (\" + r0 + \") and stream length (\" + r3.length + \") disagree\")\l}"];
}
}
}
subgraph cluster_Region_471033818 {
label = "R(3:12|13|14) | ExcHandler: all (r0v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0049|ExcHandler: all (r0v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:3:0x000f\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|okhttp3.internal.Util.closeQuietly((java.io.Closeable) r2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|throw r0\l}"];
}
}
}
subgraph cluster_Region_1411807599 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x004e}"];
Node_16 [shape=record,label="{16\:\ 0x0064|throw new java.io.IOException(\"Cannot buffer entire body for content length: \" + r0)\l}"];
}
}
}
subgraph cluster_Region_471033818 {
label = "R(3:12|13|14) | ExcHandler: all (r0v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0049|ExcHandler: all (r0v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:3:0x000f\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|okhttp3.internal.Util.closeQuietly((java.io.Closeable) r2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|throw r0\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000f|SYNTHETIC\lSplitter:B:3:0x000f\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c}"];
MethodNode[shape=record,label="{public final byte[] okhttp3.ResponseBody.bytes((r6v0 'this' okhttp3.ResponseBody A[IMMUTABLE_TYPE, THIS]))  | JADX INFO: finally extract failed\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_7 -> Node_8;
}

