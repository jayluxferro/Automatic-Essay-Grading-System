digraph "CFG forokhttp3.OkHttpClient.Builder.sslSocketFactory(Ljavax\/net\/ssl\/SSLSocketFactory;)Lokhttp3\/OkHttpClient$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IPUT  \l  (r2 I:javax.net.ssl.SSLSocketFactory)\l  (r1 I:okhttp3.OkHttpClient$Builder)\l okhttp3.OkHttpClient.Builder.sslSocketFactory javax.net.ssl.SSLSocketFactory \l0x0004: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x0008: INVOKE  (r2 I:okhttp3.internal.tls.CertificateChainCleaner) = \l  (r0 I:okhttp3.internal.platform.Platform)\l  (r2 I:javax.net.ssl.SSLSocketFactory)\l okhttp3.internal.platform.Platform.buildCertificateChainCleaner(javax.net.ssl.SSLSocketFactory):okhttp3.internal.tls.CertificateChainCleaner type: VIRTUAL \l0x000c: IPUT  \l  (r2 I:okhttp3.internal.tls.CertificateChainCleaner)\l  (r1 I:okhttp3.OkHttpClient$Builder)\l okhttp3.OkHttpClient.Builder.certificateChainCleaner okhttp3.internal.tls.CertificateChainCleaner \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r1 I:okhttp3.OkHttpClient$Builder) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0011: CONST_STR  (r0 I:java.lang.String) =  \"sslSocketFactory == null\" \l0x0013: INVOKE  \l  (r2 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.OkHttpClient$Builder okhttp3.OkHttpClient.Builder.sslSocketFactory((r1 'this' I:okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS]), (r2 I:javax.net.ssl.SSLSocketFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

