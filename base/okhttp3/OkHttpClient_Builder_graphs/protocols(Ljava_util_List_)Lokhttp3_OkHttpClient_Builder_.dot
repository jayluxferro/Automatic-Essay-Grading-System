digraph "CFG forokhttp3.OkHttpClient.Builder.protocols(Ljava\/util\/List;)Lokhttp3\/OkHttpClient$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r0.contains(okhttp3.Protocol.H2_PRIOR_KNOWLEDGE) != false) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r0.contains(okhttp3.Protocol.HTTP_1_1) == false) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"protocols must contain h2_prior_knowledge or http\/1.1: \")\lr1.append(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d}"];
Node_7 [shape=record,label="{7\:\ 0x0033|if (r0.contains(okhttp3.Protocol.H2_PRIOR_KNOWLEDGE) == false) goto L_0x0054\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035}"];
Node_9 [shape=record,label="{9\:\ 0x003a|if (r0.size() \> 1) goto L_0x003d\l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"protocols containing h2_prior_knowledge cannot use other protocols: \")\lr1.append(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0054}"];
Node_13 [shape=record,label="{13\:\ 0x005a|if (r0.contains(okhttp3.Protocol.HTTP_1_0) != false) goto L_0x0077\l}"];
Node_14 [shape=record,label="{14\:\ 0x005c}"];
Node_15 [shape=record,label="{15\:\ 0x0061|if (r0.contains((java.lang.Object) null) != false) goto L_0x006f\l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|r0.remove(okhttp3.Protocol.SPDY_3)\lr3.protocols = java.util.Collections.unmodifiableList(r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x006e|RETURN\l|return r3\l}"];
Node_18 [shape=record,label="{18\:\ 0x006f}"];
Node_19 [shape=record,label="{19\:\ 0x0076|throw new java.lang.IllegalArgumentException(\"protocols must not contain null\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x0077|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"protocols must not contain http\/1.0: \")\lr1.append(r0)\l}"];
Node_21 [shape=record,label="{21\:\ 0x008d|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public okhttp3.OkHttpClient$Builder okhttp3.OkHttpClient.Builder.protocols((r3v0 'this' okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;), Lokhttp3\/OkHttpClient$Builder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

