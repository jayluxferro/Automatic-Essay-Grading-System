digraph "CFG forokhttp3.OkHttpClient.Builder.protocols(Ljava\/util\/List;)Lokhttp3\/OkHttpClient$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList), (r4 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x0005: SGET  (r4 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l0x0007: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: SGET  (r4 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_1 okhttp3.Protocol \l0x000f: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"protocols must contain h2_prior_knowledge or http\/1.1: \" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: SGET  (r4 I:okhttp3.Protocol) =  okhttp3.Protocol.H2_PRIOR_KNOWLEDGE okhttp3.Protocol \l0x002f: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0054 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: INVOKE  (r4 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0039: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r4 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:12:0x003d \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0044: CONST_STR  (r2 I:java.lang.String) =  \"protocols containing h2_prior_knowledge cannot use other protocols: \" \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0050: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: SGET  (r4 I:okhttp3.Protocol) =  okhttp3.Protocol.HTTP_1_0 okhttp3.Protocol \l0x0056: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|0x005a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0077 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|0x005c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: INVOKE  (r4 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0063|0x0063: SGET  (r4 I:okhttp3.Protocol) =  okhttp3.Protocol.SPDY_3 okhttp3.Protocol \l0x0065: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.remove(java.lang.Object):boolean type: INTERFACE \l0x0068: INVOKE  (r4 I:java.util.List) = (r0 I:java.util.List) java.util.Collections.unmodifiableList(java.util.List):java.util.List type: STATIC \l0x006c: IPUT  \l  (r4 I:java.util.List\<okhttp3.Protocol\>)\l  (r3 I:okhttp3.OkHttpClient$Builder)\l okhttp3.OkHttpClient.Builder.protocols java.util.List \l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|0x006e: RETURN  (r3 I:okhttp3.OkHttpClient$Builder) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006f|0x006f: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0071: CONST_STR  (r0 I:java.lang.String) =  \"protocols must not contain null\" \l0x0073: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0076|0x0076: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0077|0x0077: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0079: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007e: CONST_STR  (r2 I:java.lang.String) =  \"protocols must not contain http\/1.0: \" \l0x0080: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0083: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0086: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008a: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x008d|0x008d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.OkHttpClient$Builder okhttp3.OkHttpClient.Builder.protocols((r3 'this' I:okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.List\<okhttp3.Protocol\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lokhttp3\/Protocol;, \>;), Lokhttp3\/OkHttpClient$Builder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

