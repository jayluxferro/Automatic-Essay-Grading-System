digraph "CFG forokhttp3.OkHttpClient.Builder.\<init\>()V" {
subgraph cluster_Region_511769453 {
label = "R(1:0)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.interceptors = new java.util.ArrayList()\lr1.networkInterceptors = new java.util.ArrayList()\lr1.dispatcher = new okhttp3.Dispatcher()\lr1.protocols = okhttp3.OkHttpClient.DEFAULT_PROTOCOLS\lr1.connectionSpecs = okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS\lr1.eventListenerFactory = okhttp3.EventListener.factory(okhttp3.EventListener.NONE)\lr1.proxySelector = java.net.ProxySelector.getDefault()\lr1.cookieJar = okhttp3.CookieJar.NO_COOKIES\lr1.socketFactory = javax.net.SocketFactory.getDefault()\lr1.hostnameVerifier = okhttp3.internal.tls.OkHostnameVerifier.INSTANCE\lr1.certificatePinner = okhttp3.CertificatePinner.DEFAULT\lr1.proxyAuthenticator = okhttp3.Authenticator.NONE\lr1.authenticator = okhttp3.Authenticator.NONE\lr1.connectionPool = new okhttp3.ConnectionPool()\lr1.dns = okhttp3.Dns.SYSTEM\lr1.followSslRedirects = true\lr1.followRedirects = true\lr1.retryOnConnectionFailure = true\lr1.connectTimeout = 10000\lr1.readTimeout = 10000\lr1.writeTimeout = 10000\lr1.pingInterval = 0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0065}"];
MethodNode[shape=record,label="{public void okhttp3.OkHttpClient.Builder.\<init\>((r1v0 'this' okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

