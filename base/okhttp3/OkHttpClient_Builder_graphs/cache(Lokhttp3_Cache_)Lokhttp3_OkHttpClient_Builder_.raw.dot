digraph "CFG forokhttp3.OkHttpClient.Builder.cache(Lokhttp3\/Cache;)Lokhttp3\/OkHttpClient$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r1 I:okhttp3.Cache), (r0 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.cache okhttp3.Cache \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: IPUT  \l  (r1 I:okhttp3.internal.cache.InternalCache)\l  (r0 I:okhttp3.OkHttpClient$Builder)\l okhttp3.OkHttpClient.Builder.internalCache okhttp3.internal.cache.InternalCache \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: RETURN  (r0 I:okhttp3.OkHttpClient$Builder) \l}"];
MethodNode[shape=record,label="{public okhttp3.OkHttpClient$Builder okhttp3.OkHttpClient.Builder.cache((r0 'this' I:okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS]), (r1 I:okhttp3.Cache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

