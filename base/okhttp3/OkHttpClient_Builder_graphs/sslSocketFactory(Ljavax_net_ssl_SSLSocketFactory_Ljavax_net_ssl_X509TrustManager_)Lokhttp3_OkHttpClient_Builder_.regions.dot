digraph "CFG forokhttp3.OkHttpClient.Builder.sslSocketFactory(Ljavax\/net\/ssl\/SSLSocketFactory;Ljavax\/net\/ssl\/X509TrustManager;)Lokhttp3\/OkHttpClient$Builder;" {
subgraph cluster_Region_626954407 {
label = "R(1:(1:7)(1:(2:2|3)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1436192248 {
label = "IF [B:0:0x0000] THEN: R(1:7) ELSE: R(1:(2:2|3)(1:5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r1 == null) goto L_0x0015\l}"];
subgraph cluster_Region_502641024 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001c|throw new java.lang.NullPointerException(\"sslSocketFactory == null\")\l}"];
}
subgraph cluster_Region_1352932388 {
label = "R(1:(2:2|3)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_19817791 {
label = "IF [B:1:0x0002] THEN: R(2:2|3) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2 != null) goto L_0x0004\l}"];
subgraph cluster_Region_14343599 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r0.sslSocketFactory = r1\lr0.certificateChainCleaner = okhttp3.internal.tls.CertificateChainCleaner.get(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_806557061 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|throw new java.lang.NullPointerException(\"trustManager == null\")\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0015}"];
MethodNode[shape=record,label="{public okhttp3.OkHttpClient$Builder okhttp3.OkHttpClient.Builder.sslSocketFactory((r0v0 'this' okhttp3.OkHttpClient$Builder A[IMMUTABLE_TYPE, THIS]), (r1v0 javax.net.ssl.SSLSocketFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 javax.net.ssl.X509TrustManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

