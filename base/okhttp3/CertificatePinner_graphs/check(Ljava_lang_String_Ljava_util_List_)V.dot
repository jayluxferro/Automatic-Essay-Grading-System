digraph "CFG forokhttp3.CertificatePinner.check(Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r0 = findMatchingPins(r13)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0.isEmpty() == false) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r12.certificateChainCleaner == null) goto L_0x0015\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|java.util.List r14 = r12.certificateChainCleaner.clean(r14, r13)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|PHI: r14 \l  PHI: (r14v1 java.util.List\<java.security.cert.Certificate\>) = (r14v0 java.util.List\<java.security.cert.Certificate\>), (r14v8 java.util.List\<java.security.cert.Certificate\>) binds: [B:4:0x000d, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r14.size()\lr2 = 0\lr3 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v6 int) binds: [B:6:0x0015, B:27:0x0081] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x001b\-\>B:27:0x0081\l|if (r3 \>= r1) goto L_0x0084\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|java.security.cert.X509Certificate r4 = (java.security.cert.X509Certificate) r14.get(r3)\lint r5 = r0.size()\lr7 = null\lr8 = null\lr6 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|LOOP_START\lPHI: r6 r7 r8 \l  PHI: (r6v5 int) = (r6v4 int), (r6v6 int) binds: [B:8:0x001d, B:24:0x0065] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 okio.ByteString) = (r7v0 okio.ByteString), (r7v2 okio.ByteString) binds: [B:8:0x001d, B:24:0x0065] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 okio.ByteString) = (r8v0 okio.ByteString), (r8v2 okio.ByteString) binds: [B:8:0x001d, B:24:0x0065] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x002b\-\>B:24:0x0065\l|if (r6 \>= r5) goto L_0x0081\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|okhttp3.CertificatePinner$Pin r9 = r0.get(r6)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|if (r9.hashAlgorithm.equals(\"sha256\/\") == false) goto L_0x004c\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|if (r7 != null) goto L_0x0043\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|okio.ByteString r7 = sha256(r4)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|PHI: r7 \l  PHI: (r7v3 okio.ByteString) = (r7v1 okio.ByteString), (r7v4 okio.ByteString) binds: [B:12:0x003d, B:13:0x003f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|if (r9.hash.equals(r7) == false) goto L_0x0065\l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ 0x004c}"];
Node_18 [shape=record,label="{18\:\ 0x0054|if (r9.hashAlgorithm.equals(\"sha1\/\") == false) goto L_0x0068\l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|if (r8 != null) goto L_0x005c\l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|okio.ByteString r8 = sha1(r4)\l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|PHI: r8 \l  PHI: (r8v3 okio.ByteString) = (r8v1 okio.ByteString), (r8v4 okio.ByteString) binds: [B:19:0x0056, B:20:0x0058] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|if (r9.hash.equals(r8) == false) goto L_0x0065\l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|RETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ 0x0065|LOOP_END\lPHI: r7 r8 \l  PHI: (r7v2 okio.ByteString) = (r7v1 okio.ByteString), (r7v3 okio.ByteString) binds: [B:42:0x0065, B:41:0x0065] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v2 okio.ByteString) = (r8v3 okio.ByteString), (r8v1 okio.ByteString) binds: [B:42:0x0065, B:41:0x0065] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x002b\-\>B:24:0x0065\l|int r6 = r6 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|java.lang.StringBuilder r14 = new java.lang.StringBuilder()\lr14.append(\"unsupported hashAlgorithm: \")\lr14.append(r9.hashAlgorithm)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0080|throw new java.lang.AssertionError(r14.toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x0081|LOOP_END\lLOOP:0: B:7:0x001b\-\>B:27:0x0081\l|int r3 = r3 + 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0084|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Certificate pinning failure!\")\lr1.append(\"n  Peer certificate chain:\")\lint r3 = r14.size()\lr4 = 0\l}"];
Node_29 [shape=record,label="{29\:\ 0x0098|LOOP_START\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:28:0x0084, B:30:0x009a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:29:0x0098\-\>B:30:0x009a\l|if (r4 \>= r3) goto L_0x00bf\l}"];
Node_30 [shape=record,label="{30\:\ 0x009a|LOOP_END\lLOOP:2: B:29:0x0098\-\>B:30:0x009a\l|java.security.cert.X509Certificate r5 = (java.security.cert.X509Certificate) r14.get(r4)\lr1.append(\"n    \")\lr1.append(pin(r5))\lr1.append(\": \")\lr1.append(r5.getSubjectDN().getName())\lint r4 = r4 + 1\l}"];
Node_31 [shape=record,label="{31\:\ 0x00bf|r1.append(\"n  Pinned certificates for \")\lr1.append(r13)\lr1.append(\":\")\lint r13 = r0.size()\l}"];
Node_32 [shape=record,label="{32\:\ 0x00d0|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:31:0x00bf, B:33:0x00d2] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:32:0x00d0\-\>B:33:0x00d2\l|if (r2 \>= r13) goto L_0x00e3\l}"];
Node_33 [shape=record,label="{33\:\ 0x00d2|LOOP_END\lLOOP:3: B:32:0x00d0\-\>B:33:0x00d2\l|r1.append(\"n    \")\lr1.append(r0.get(r2))\lint r2 = r2 + 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e3}"];
Node_35 [shape=record,label="{35\:\ 0x00ec|throw new javax.net.ssl.SSLPeerUnverifiedException(r1.toString())\l}"];
Node_36 [shape=record,label="{36\:\ 0x0064|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x004b|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0068|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0084|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0081|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0065|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0065|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x00bf|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x00e3|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okhttp3.CertificatePinner.check((r12v0 'this' okhttp3.CertificatePinner A[IMMUTABLE_TYPE, THIS]), (r13v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_39;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_40;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_37[style=dashed];
Node_15 -> Node_41;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_38;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_36[style=dashed];
Node_22 -> Node_42;
Node_24 -> Node_9;
Node_25 -> Node_26;
Node_27 -> Node_7;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_43;
Node_30 -> Node_29;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_44;
Node_33 -> Node_32;
Node_34 -> Node_35;
Node_36 -> Node_23;
Node_37 -> Node_16;
Node_38 -> Node_25;
Node_39 -> Node_28;
Node_40 -> Node_27;
Node_41 -> Node_24;
Node_42 -> Node_24;
Node_43 -> Node_31;
Node_44 -> Node_34;
}

