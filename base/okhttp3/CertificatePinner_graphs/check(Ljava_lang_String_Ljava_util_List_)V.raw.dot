digraph "CFG forokhttp3.CertificatePinner.check(Ljava\/lang\/String;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r12 I:okhttp3.CertificatePinner), (r13 I:java.lang.String) okhttp3.CertificatePinner.findMatchingPins(java.lang.String):java.util.List type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r1 I:okhttp3.internal.tls.CertificateChainCleaner) = (r12 I:okhttp3.CertificatePinner) okhttp3.CertificatePinner.certificateChainCleaner okhttp3.internal.tls.CertificateChainCleaner \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r1 I:okhttp3.internal.tls.CertificateChainCleaner) = (r12 I:okhttp3.CertificatePinner) okhttp3.CertificatePinner.certificateChainCleaner okhttp3.internal.tls.CertificateChainCleaner \l0x0011: INVOKE  (r14 I:java.util.List) = \l  (r1 I:okhttp3.internal.tls.CertificateChainCleaner)\l  (r14 I:java.util.List)\l  (r13 I:java.lang.String)\l okhttp3.internal.tls.CertificateChainCleaner.clean(java.util.List, java.lang.String):java.util.List type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r1 I:int) = (r14 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:28:0x0084 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  (r4 I:java.lang.Object) = (r14 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r4 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r4 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r5 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0027: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0029: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x002a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r6 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:27:0x0081 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: INVOKE  (r9 I:java.lang.Object) = (r0 I:java.util.List), (r6 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0031: CHECK_CAST  (r9 I:okhttp3.CertificatePinner$Pin) = (okhttp3.CertificatePinner$Pin) (r9 I:?[OBJECT, ARRAY]) \l0x0033: IGET  (r10 I:java.lang.String) = (r9 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hashAlgorithm java.lang.String \l0x0035: CONST_STR  (r11 I:java.lang.String) =  \"sha256\/\" \l0x0037: INVOKE  (r10 I:boolean) = (r10 I:java.lang.String), (r11 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004c \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: INVOKE  (r7 I:okio.ByteString) = (r4 I:java.security.cert.X509Certificate) okhttp3.CertificatePinner.sha256(java.security.cert.X509Certificate):okio.ByteString type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: IGET  (r9 I:okio.ByteString) = (r9 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hash okio.ByteString \l0x0045: INVOKE  (r9 I:boolean) = (r9 I:okio.ByteString), (r7 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0065 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: IGET  (r10 I:java.lang.String) = (r9 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hashAlgorithm java.lang.String \l0x004e: CONST_STR  (r11 I:java.lang.String) =  \"sha1\/\" \l0x0050: INVOKE  (r10 I:boolean) = (r10 I:java.lang.String), (r11 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|0x0054: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0068 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|0x0056: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|0x0058: INVOKE  (r8 I:okio.ByteString) = (r4 I:java.security.cert.X509Certificate) okhttp3.CertificatePinner.sha1(java.security.cert.X509Certificate):okio.ByteString type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|0x005c: IGET  (r9 I:okio.ByteString) = (r9 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hash okio.ByteString \l0x005e: INVOKE  (r9 I:boolean) = (r9 I:okio.ByteString), (r8 I:java.lang.Object) okio.ByteString.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|0x0062: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0065 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: RETURN   \l}"];
Node_24 [shape=record,label="{24\:\ 0x0065|0x0065: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: NEW_INSTANCE  (r13 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x006a: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006c: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006f: CONST_STR  (r0 I:java.lang.String) =  \"unsupported hashAlgorithm: \" \l0x0071: INVOKE  (r14 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0074: IGET  (r0 I:java.lang.String) = (r9 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hashAlgorithm java.lang.String \l0x0076: INVOKE  (r14 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0079: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007d: INVOKE  (r13 I:java.lang.AssertionError), (r14 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0080|0x0080: THROW  (r13 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0081|0x0081: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0084|0x0084: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0086: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0089: CONST_STR  (r3 I:java.lang.String) =  \"Certificate pinning failure!\" \l0x008b: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008e: CONST_STR  (r3 I:java.lang.String) =  \"\l  Peer certificate chain:\" \l0x0090: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0093: INVOKE  (r3 I:int) = (r14 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0097: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0098|0x0098: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:31:0x00bf \l}"];
Node_30 [shape=record,label="{30\:\ 0x009a|0x009a: INVOKE  (r5 I:java.lang.Object) = (r14 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x009e: CHECK_CAST  (r5 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r5 I:?[OBJECT, ARRAY]) \l0x00a0: CONST_STR  (r6 I:java.lang.String) =  \"\l    \" \l0x00a2: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a5: INVOKE  (r6 I:java.lang.String) = (r5 I:java.security.cert.Certificate) okhttp3.CertificatePinner.pin(java.security.cert.Certificate):java.lang.String type: STATIC \l0x00a9: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ac: CONST_STR  (r6 I:java.lang.String) =  \": \" \l0x00ae: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b1: INVOKE  (r5 I:java.security.Principal) = (r5 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getSubjectDN():java.security.Principal type: VIRTUAL \l0x00b5: INVOKE  (r5 I:java.lang.String) = (r5 I:java.security.Principal) java.security.Principal.getName():java.lang.String type: INTERFACE \l0x00b9: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00bc: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00bf|0x00bf: CONST_STR  (r14 I:java.lang.String) =  \"\l  Pinned certificates for \" \l0x00c1: INVOKE  (r1 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c4: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c7: CONST_STR  (r13 I:java.lang.String) =  \":\" \l0x00c9: INVOKE  (r1 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00cc: INVOKE  (r13 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d0|0x00d0: IF  (r2 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:34:0x00e3 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00d2|0x00d2: INVOKE  (r14 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00d6: CHECK_CAST  (r14 I:okhttp3.CertificatePinner$Pin) = (okhttp3.CertificatePinner$Pin) (r14 I:?[OBJECT, ARRAY]) \l0x00d8: CONST_STR  (r3 I:java.lang.String) =  \"\l    \" \l0x00da: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00dd: INVOKE  (r1 I:java.lang.StringBuilder), (r14 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00e0: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00e3|0x00e3: NEW_INSTANCE  (r13 I:javax.net.ssl.SSLPeerUnverifiedException) =  javax.net.ssl.SSLPeerUnverifiedException \l0x00e5: INVOKE  (r14 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00e9: INVOKE  \l  (r13 I:javax.net.ssl.SSLPeerUnverifiedException)\l  (r14 I:java.lang.String)\l javax.net.ssl.SSLPeerUnverifiedException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ec|0x00ec: THROW  (r13 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.CertificatePinner.check((r12 'this' I:okhttp3.CertificatePinner A[IMMUTABLE_TYPE, THIS]), (r13 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[javax.net.ssl.SSLPeerUnverifiedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_28;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_27;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_24 -> Node_9;
Node_25 -> Node_26;
Node_27 -> Node_7;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_29;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_32;
Node_34 -> Node_35;
}

