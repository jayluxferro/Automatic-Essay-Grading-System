digraph "CFG forokhttp3.CertificatePinner.withCertificateChainCleaner(Lokhttp3\/internal\/tls\/CertificateChainCleaner;)Lokhttp3\/CertificatePinner;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.internal.tls.CertificateChainCleaner) = (r2 I:okhttp3.CertificatePinner) okhttp3.CertificatePinner.certificateChainCleaner okhttp3.internal.tls.CertificateChainCleaner \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r3 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:okhttp3.CertificatePinner) =  okhttp3.CertificatePinner \l0x000c: IGET  (r1 I:java.util.Set\<okhttp3.CertificatePinner$Pin\>) = (r2 I:okhttp3.CertificatePinner) okhttp3.CertificatePinner.pins java.util.Set \l0x000e: INVOKE  \l  (r0 I:okhttp3.CertificatePinner)\l  (r1 I:java.util.Set)\l  (r3 I:okhttp3.internal.tls.CertificateChainCleaner)\l okhttp3.CertificatePinner.\<init\>(java.util.Set, okhttp3.internal.tls.CertificateChainCleaner):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r0 I:okhttp3.CertificatePinner) \l}"];
MethodNode[shape=record,label="{okhttp3.CertificatePinner okhttp3.CertificatePinner.withCertificateChainCleaner((r2 'this' I:okhttp3.CertificatePinner A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.internal.tls.CertificateChainCleaner A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

