digraph "CFG forokhttp3.CertificatePinner.findMatchingPins(Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l0x0004: IGET  (r1 I:java.util.Set\<okhttp3.CertificatePinner$Pin\>) = (r4 I:okhttp3.CertificatePinner) okhttp3.CertificatePinner.pins java.util.Set \l0x0006: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r2 I:okhttp3.CertificatePinner$Pin) = (okhttp3.CertificatePinner$Pin) (r2 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r3 I:boolean) = \l  (r2 I:okhttp3.CertificatePinner$Pin)\l  (r5 I:java.lang.String)\l okhttp3.CertificatePinner.Pin.matches(java.lang.String):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: INVOKE  (r3 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0024: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: RETURN  (r0 I:java.util.List\<okhttp3.CertificatePinner$Pin\>) \l}"];
MethodNode[shape=record,label="{java.util.List\<okhttp3.CertificatePinner$Pin\> okhttp3.CertificatePinner.findMatchingPins((r4 'this' I:okhttp3.CertificatePinner A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Lokhttp3\/CertificatePinner$Pin;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

