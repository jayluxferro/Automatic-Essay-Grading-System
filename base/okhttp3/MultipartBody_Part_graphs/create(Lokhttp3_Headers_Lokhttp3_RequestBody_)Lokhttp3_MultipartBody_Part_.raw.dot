digraph "CFG forokhttp3.MultipartBody.Part.create(Lokhttp3\/Headers;Lokhttp3\/RequestBody;)Lokhttp3\/MultipartBody$Part;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"Content\-Type\" \l0x0006: INVOKE  (r0 I:java.lang.String) = (r1 I:okhttp3.Headers), (r0 I:java.lang.String) okhttp3.Headers.get(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000f: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected header: Content\-Type\" \l0x0011: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: CONST_STR  (r0 I:java.lang.String) =  \"Content\-Length\" \l0x0019: INVOKE  (r0 I:java.lang.String) = (r1 I:okhttp3.Headers), (r0 I:java.lang.String) okhttp3.Headers.get(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0022: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected header: Content\-Length\" \l0x0024: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: NEW_INSTANCE  (r0 I:okhttp3.MultipartBody$Part) =  okhttp3.MultipartBody$Part \l0x002a: INVOKE  \l  (r0 I:okhttp3.MultipartBody$Part)\l  (r1 I:okhttp3.Headers)\l  (r2 I:okhttp3.RequestBody)\l okhttp3.MultipartBody.Part.\<init\>(okhttp3.Headers, okhttp3.RequestBody):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: RETURN  (r0 I:okhttp3.MultipartBody$Part) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: NEW_INSTANCE  (r1 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0030: CONST_STR  (r2 I:java.lang.String) =  \"body == null\" \l0x0032: INVOKE  \l  (r1 I:java.lang.NullPointerException)\l  (r2 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static okhttp3.MultipartBody$Part okhttp3.MultipartBody.Part.create((r1 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okhttp3.RequestBody A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

