digraph "CFG forokhttp3.MultipartBody.Part.create(Lokhttp3\/Headers;Lokhttp3\/RequestBody;)Lokhttp3\/MultipartBody$Part;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 == null) goto L_0x002e\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1 == null) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r1.get(p018io.fabric.sdk.android.services.network.HttpRequest.HEADER_CONTENT_TYPE) != null) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d}"];
Node_5 [shape=record,label="{5\:\ 0x0014|throw new java.lang.IllegalArgumentException(\"Unexpected header: Content\-Type\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|if (r1 == null) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if (r1.get(p018io.fabric.sdk.android.services.network.HttpRequest.HEADER_CONTENT_LENGTH) != null) goto L_0x0020\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020}"];
Node_10 [shape=record,label="{10\:\ 0x0027|throw new java.lang.IllegalArgumentException(\"Unexpected header: Content\-Length\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028}"];
Node_12 [shape=record,label="{12\:\ 0x002d|RETURN\l|return new okhttp3.MultipartBody.Part(r1, r2)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e}"];
Node_14 [shape=record,label="{14\:\ 0x0035|throw new java.lang.NullPointerException(\"body == null\")\l}"];
MethodNode[shape=record,label="{public static okhttp3.MultipartBody$Part okhttp3.MultipartBody.Part.create((r1v0 okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 okhttp3.RequestBody A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_13;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

