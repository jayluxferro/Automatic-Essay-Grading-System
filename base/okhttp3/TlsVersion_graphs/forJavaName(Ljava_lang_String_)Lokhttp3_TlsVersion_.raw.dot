digraph "CFG forokhttp3.TlsVersion.forJavaName(Ljava\/lang\/String;)Lokhttp3\/TlsVersion;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (79201641(0x4b88569, float:4.338071E\-36) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (79923350(0x4c38896, float:4.5969714E\-36) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-503070503, \-503070502, \-503070501] t:[0x0026, 0x001c, 0x0012] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1.3\" \l0x0014: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1.2\" \l0x001e: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1.1\" \l0x0028: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST_STR  (r0 I:java.lang.String) =  \"TLSv1\" \l0x0032: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: CONST_STR  (r0 I:java.lang.String) =  \"SSLv3\" \l0x003c: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4] t:[0x006b, 0x0068, 0x0065, 0x0062, 0x005f] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004f: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected TLS version: \" \l0x0051: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0054: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0057: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005b: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005f|0x005f: SGET  (r3 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.SSL_3_0 okhttp3.TlsVersion \l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: RETURN  (r3 I:okhttp3.TlsVersion) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0062|0x0062: SGET  (r3 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_0 okhttp3.TlsVersion \l}"];
Node_28 [shape=record,label="{28\:\ 0x0064|0x0064: RETURN  (r3 I:okhttp3.TlsVersion) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0065|0x0065: SGET  (r3 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_1 okhttp3.TlsVersion \l}"];
Node_30 [shape=record,label="{30\:\ 0x0067|0x0067: RETURN  (r3 I:okhttp3.TlsVersion) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0068|0x0068: SGET  (r3 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_2 okhttp3.TlsVersion \l}"];
Node_32 [shape=record,label="{32\:\ 0x006a|0x006a: RETURN  (r3 I:okhttp3.TlsVersion) \l}"];
Node_33 [shape=record,label="{33\:\ 0x006b|0x006b: SGET  (r3 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_3 okhttp3.TlsVersion \l}"];
Node_34 [shape=record,label="{34\:\ 0x006d|0x006d: RETURN  (r3 I:okhttp3.TlsVersion) \l}"];
MethodNode[shape=record,label="{public static okhttp3.TlsVersion okhttp3.TlsVersion.forJavaName((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_6;
Node_4 -> Node_9;
Node_4 -> Node_12;
Node_4 -> Node_21;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_21;
Node_8 -> Node_22;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_22 -> Node_27;
Node_22 -> Node_29;
Node_22 -> Node_31;
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_33 -> Node_34;
}

