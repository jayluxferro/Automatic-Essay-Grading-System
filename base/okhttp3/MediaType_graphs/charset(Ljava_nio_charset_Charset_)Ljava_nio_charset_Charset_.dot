digraph "CFG forokhttp3.MediaType.charset(Ljava\/nio\/charset\/Charset;)Ljava\/nio\/charset\/Charset;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x000c \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|Catch:\{ IllegalArgumentException \-\> 0x000c \}\l|if (r1.charset == null) goto L_?     \/\/ Catch:\{ IllegalArgumentException \-\> 0x000c \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|Catch:\{ IllegalArgumentException \-\> 0x000c \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000c|RETURN\l|return r2\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:0:0x0000\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.nio.charset.Charset.forName(r1.charset)\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
MethodNode[shape=record,label="{public java.nio.charset.Charset okhttp3.MediaType.charset((r1v0 'this' okhttp3.MediaType A[IMMUTABLE_TYPE, THIS]), (r2v0 java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\lAnnotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_6 -> Node_5;
}

