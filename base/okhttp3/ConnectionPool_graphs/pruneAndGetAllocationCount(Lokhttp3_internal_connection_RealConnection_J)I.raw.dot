digraph "CFG forokhttp3.ConnectionPool.pruneAndGetAllocationCount(Lokhttp3\/internal\/connection\/RealConnection;J)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: INVOKE  (r3 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:10:0x0058 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r3 I:java.lang.ref.Reference) = (java.lang.ref.Reference) (r3 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.lang.ref.Reference) java.lang.ref.Reference.get():java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CHECK_CAST  (r3 I:okhttp3.internal.connection.StreamAllocation$StreamAllocationReference) = (okhttp3.internal.connection.StreamAllocation$StreamAllocationReference) (r3 I:?[OBJECT, ARRAY]) \l0x001b: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001d: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0020: CONST_STR  (r5 I:java.lang.String) =  \"A connection to \" \l0x0022: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r5 I:okhttp3.Route) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.route():okhttp3.Route type: VIRTUAL \l0x0029: INVOKE  (r5 I:okhttp3.Address) = (r5 I:okhttp3.Route) okhttp3.Route.address():okhttp3.Address type: VIRTUAL \l0x002d: INVOKE  (r5 I:okhttp3.HttpUrl) = (r5 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0031: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0034: CONST_STR  (r5 I:java.lang.String) =  \" was leaked. Did you forget to close a response body?\" \l0x0036: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003d: INVOKE  (r5 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x0041: IGET  (r3 I:java.lang.Object) = \l  (r3 I:okhttp3.internal.connection.StreamAllocation$StreamAllocationReference)\l okhttp3.internal.connection.StreamAllocation.StreamAllocationReference.callStackTrace java.lang.Object \l0x0043: INVOKE  \l  (r5 I:okhttp3.internal.platform.Platform)\l  (r4 I:java.lang.String)\l  (r3 I:java.lang.Object)\l okhttp3.internal.platform.Platform.logCloseableLeak(java.lang.String, java.lang.Object):void type: VIRTUAL \l0x0046: INVOKE  (r0 I:java.util.List), (r2 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l0x0049: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004a: IPUT  \l  (r3 I:boolean)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.noNewStreams boolean \l0x004c: INVOKE  (r3 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0050|0x0050: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0052|0x0052: IGET  (r2 I:long) = (r6 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.keepAliveDurationNs long \l0x0054: ARITH  (r8 I:long) = (r8 I:long) \- (r2 I:long) \l0x0055: IPUT  \l  (r8 I:long)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.idleAtNanos long \l}"];
Node_9 [shape=record,label="{9\:\ 0x0057|0x0057: RETURN  (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0058|0x0058: INVOKE  (r7 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x005c|0x005c: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{private int okhttp3.ConnectionPool.pruneAndGetAllocationCount((r6 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS]), (r7 I:okhttp3.internal.connection.RealConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
}

