digraph "CFG forokhttp3.ConnectionPool.cleanup(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0060 \}]\l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0009: CONST  (r3 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) A[Catch:\{ all \-\> 0x0060 \}]\l0x000b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x000d: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r7 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0031 A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: INVOKE  (r7 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0060 \}]\l0x0018: CHECK_CAST  (r7 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l0x001a: INVOKE  (r8 I:int) = \l  (r11 I:okhttp3.ConnectionPool)\l  (r7 I:okhttp3.internal.connection.RealConnection)\l  (r12 I:long)\l okhttp3.ConnectionPool.pruneAndGetAllocationCount(okhttp3.internal.connection.RealConnection, long):int type: DIRECT A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0023 A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: ARITH  (r6 I:int) = (r6 I:int) + (1 int) A[Catch:\{ all \-\> 0x0060 \}]\l0x0022: GOTO  \-\> 0x000e A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ all \-\> 0x0060 \}]\l0x0025: IGET  (r8 I:long) = (r7 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.idleAtNanos long A[Catch:\{ all \-\> 0x0060 \}]\l0x0027: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0028: ARITH  (r8 I:long) = (r12 I:long) \- (r8 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l0x002a: CMP_L  (r10 I:int) = (r8 I:long), (r3 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000e A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l0x002f: MOVE  (r3 I:?[long, double]) = (r8 I:?[long, double]) A[Catch:\{ all \-\> 0x0060 \}]\l0x0030: GOTO  \-\> 0x000e A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IGET  (r12 I:long) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.keepAliveDurationNs long A[Catch:\{ all \-\> 0x0060 \}]\l0x0033: CMP_L  (r12 I:int) = (r3 I:long), (r12 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: IF  (r12 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:27:0x0050 A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IGET  (r12 I:int) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.maxIdleConnections int A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IF  (r2 I:?[int, byte, short, char]) \<= (r12 I:?[int, byte, short, char])  \-\> B:16:0x003c A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: GOTO  \-\> 0x0050 A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:20:0x0044 A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IGET  (r12 I:long) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.keepAliveDurationNs long A[Catch:\{ all \-\> 0x0060 \}]\l0x0040: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0041: ARITH  (r12 I:long) = (r12 I:long) \- (r3 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: RETURN  (r12 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:24:0x004a A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|0x0046: IGET  (r12 I:long) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.keepAliveDurationNs long A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: RETURN  (r12 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004a|0x004a: IPUT  (r1 I:boolean), (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.cleanupRunning boolean A[Catch:\{ all \-\> 0x0060 \}]\l0x004c: CONST  (r12 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x004e|0x004e: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x004f|0x004f: RETURN  (r12 I:long) A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: IGET  (r12 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r11 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque A[Catch:\{ all \-\> 0x0060 \}]\l0x0052: INVOKE  (r12 I:java.util.Deque), (r5 I:java.lang.Object) java.util.Deque.remove(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0055|0x0055: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0056|0x0056: INVOKE  (r12 I:java.net.Socket) = (r5 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket():java.net.Socket type: VIRTUAL \l0x005a: INVOKE  (r12 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l0x005d: CONST  (r12 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005f|0x005f: RETURN  (r12 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0060|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0060: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_32 [shape=record,label="{32\:\ 0x0061|SYNTHETIC\lSplitter:B:32:0x0061\l}"];
Node_33 [shape=record,label="{33\:\ ?|Splitter:B:32:0x0061\l|0x0061: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0062|0x0062: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{long okhttp3.ConnectionPool.cleanup((r11 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_31;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_3;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_27;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_27;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_31;
Node_33 -> Node_34;
Node_33 -> Node_31;
}

