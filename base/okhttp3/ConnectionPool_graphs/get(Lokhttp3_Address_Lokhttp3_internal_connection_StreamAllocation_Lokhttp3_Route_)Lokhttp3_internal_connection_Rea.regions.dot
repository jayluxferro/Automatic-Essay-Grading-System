digraph "CFG forokhttp3.ConnectionPool.get(Lokhttp3\/Address;Lokhttp3\/internal\/connection\/StreamAllocation;Lokhttp3\/Route;)Lokhttp3\/internal\/connection\/RealConnection;" {
subgraph cluster_Region_1407625783 {
label = "R(3:0|(2:3|(2:5|6))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r3.connections.iterator()\l}"];
subgraph cluster_LoopRegion_1009451170 {
label = "LOOP:0: (2:3|(2:5|6))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() != false) goto L_0x000c\l}"];
subgraph cluster_Region_1065614667 {
label = "R(2:3|(2:5|6))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|okhttp3.internal.connection.RealConnection r1 = r0.next()\l}"];
subgraph cluster_IfRegion_2070974576 {
label = "IF [B:4:0x0016] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:4:0x0016\l|if (r1.isEligible(r4, r6) == true) goto L_0x0018\l}"];
subgraph cluster_Region_488716859 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|r5.acquire(r1, true)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return r1\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x001d|RETURN\l|return null\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:4:0x0016\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{okhttp3.internal.connection.RealConnection okhttp3.ConnectionPool.get((r3v0 'this' okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS]), (r4v0 okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 okhttp3.Route A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_1[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_8 -> Node_5;
Node_9 -> Node_7;
}

