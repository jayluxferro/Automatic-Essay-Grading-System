digraph "CFG forokhttp3.ConnectionPool.get(Lokhttp3\/Address;Lokhttp3\/internal\/connection\/StreamAllocation;Lokhttp3\/Route;)Lokhttp3\/internal\/connection\/RealConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r3 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r1 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r2 I:boolean) = \l  (r1 I:okhttp3.internal.connection.RealConnection)\l  (r4 I:okhttp3.Address)\l  (r6 I:okhttp3.Route)\l okhttp3.internal.connection.RealConnection.isEligible(okhttp3.Address, okhttp3.Route):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: INVOKE  \l  (r5 I:okhttp3.internal.connection.StreamAllocation)\l  (r1 I:okhttp3.internal.connection.RealConnection)\l  (r4 I:boolean)\l okhttp3.internal.connection.StreamAllocation.acquire(okhttp3.internal.connection.RealConnection, boolean):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN  (r1 I:okhttp3.internal.connection.RealConnection) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: RETURN  (r4 I:okhttp3.internal.connection.RealConnection) \l}"];
MethodNode[shape=record,label="{okhttp3.internal.connection.RealConnection okhttp3.ConnectionPool.get((r3 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Route A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

