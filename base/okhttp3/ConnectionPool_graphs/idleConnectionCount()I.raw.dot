digraph "CFG forokhttp3.ConnectionPool.idleConnectionCount()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|SYNTHETIC\lSplitter:B:2:0x0002\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0002\l|0x0002: IGET  (r1 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r3 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER]\l0x0004: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0021 \}]\l0x0012: CHECK_CAST  (r2 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0021 \}]\l0x0014: IGET  (r2 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List A[Catch:\{ all \-\> 0x0021 \}]\l0x0016: INVOKE  (r2 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0021 \}]\l0x0019: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: RETURN  (r0 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|ExcHandler: all null\lSplitter:B:2:0x0002\l|0x0021: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized int okhttp3.ConnectionPool.idleConnectionCount((r3 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

