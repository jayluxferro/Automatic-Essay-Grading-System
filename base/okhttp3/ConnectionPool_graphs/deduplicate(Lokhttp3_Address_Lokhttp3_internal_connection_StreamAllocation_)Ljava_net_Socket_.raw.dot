digraph "CFG forokhttp3.ConnectionPool.deduplicate(Lokhttp3\/Address;Lokhttp3\/internal\/connection\/StreamAllocation;)Ljava\/net\/Socket;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r3 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r1 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r1 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r2 I:boolean) = \l  (r1 I:okhttp3.internal.connection.RealConnection)\l  (r4 I:okhttp3.Address)\l  (r2 I:okhttp3.Route)\l okhttp3.internal.connection.RealConnection.isEligible(okhttp3.Address, okhttp3.Route):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r2 I:boolean) = (r1 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.isMultiplexed():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r2 I:okhttp3.internal.connection.RealConnection) = (r5 I:okhttp3.internal.connection.StreamAllocation) okhttp3.internal.connection.StreamAllocation.connection():okhttp3.internal.connection.RealConnection type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: INVOKE  (r4 I:java.net.Socket) = \l  (r5 I:okhttp3.internal.connection.StreamAllocation)\l  (r1 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.StreamAllocation.releaseAndAcquire(okhttp3.internal.connection.RealConnection):java.net.Socket type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: RETURN  (r4 I:java.net.Socket) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: RETURN  (r2 I:java.net.Socket) \l}"];
MethodNode[shape=record,label="{java.net.Socket okhttp3.ConnectionPool.deduplicate((r3 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS]), (r4 I:okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okhttp3.internal.connection.StreamAllocation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
}

