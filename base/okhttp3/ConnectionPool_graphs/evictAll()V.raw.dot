digraph "CFG forokhttp3.ConnectionPool.evictAll()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: IGET  (r1 I:java.util.Deque\<okhttp3.internal.connection.RealConnection\>) = (r4 I:okhttp3.ConnectionPool) okhttp3.ConnectionPool.connections java.util.Deque A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER]\l0x0008: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x0016: CHECK_CAST  (r2 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0018: IGET  (r3 I:java.util.List\<java.lang.ref.Reference\<okhttp3.internal.connection.StreamAllocation\>\>) = (r2 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.allocations java.util.List A[Catch:\{ all \-\> 0x0044 \}]\l0x001a: INVOKE  (r3 I:boolean) = (r3 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0021: IPUT  \l  (r3 I:boolean)\l  (r2 I:okhttp3.internal.connection.RealConnection)\l okhttp3.internal.connection.RealConnection.noNewStreams boolean A[Catch:\{ all \-\> 0x0044 \}]\l0x0023: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x0026: INVOKE  (r1 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x0029: GOTO  \-\> 0x000c A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0039: CHECK_CAST  (r1 I:okhttp3.internal.connection.RealConnection) = (okhttp3.internal.connection.RealConnection) (r1 I:?[OBJECT, ARRAY]) \l0x003b: INVOKE  (r1 I:java.net.Socket) = (r1 I:okhttp3.internal.connection.RealConnection) okhttp3.internal.connection.RealConnection.socket():java.net.Socket type: VIRTUAL \l0x003f: INVOKE  (r1 I:java.net.Socket) okhttp3.internal.Util.closeQuietly(java.net.Socket):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|ExcHandler: all null\lSplitter:B:2:0x0006\l|0x0044: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|SYNTHETIC\lSplitter:B:16:0x0045\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0045\l|0x0045: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|0x0046: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void okhttp3.ConnectionPool.evictAll((r4 'this' I:okhttp3.ConnectionPool A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_18;
Node_17 -> Node_15;
}

