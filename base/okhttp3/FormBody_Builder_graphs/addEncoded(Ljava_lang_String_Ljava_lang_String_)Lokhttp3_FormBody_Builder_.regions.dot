digraph "CFG forokhttp3.FormBody.Builder.addEncoded(Ljava\/lang\/String;Ljava\/lang\/String;)Lokhttp3\/FormBody$Builder;" {
subgraph cluster_Region_82022063 {
label = "R(1:(1:7)(1:(2:2|3)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1097383298 {
label = "IF [B:0:0x0000] THEN: R(1:7) ELSE: R(1:(2:2|3)(1:5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 == null) goto L_0x0030\l}"];
subgraph cluster_Region_2103074349 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0037|throw new java.lang.NullPointerException(\"name == null\")\l}"];
}
subgraph cluster_Region_1255498526 {
label = "R(1:(2:2|3)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1390086685 {
label = "IF [B:1:0x0002] THEN: R(2:2|3) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r10 != null) goto L_0x0004\l}"];
subgraph cluster_Region_1448819049 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r8.names.add(okhttp3.HttpUrl.canonicalize(r9, \" \"':;\<=\>@[]^`\{\}\|\/?#&!$(),~\", true, false, true, true, r8.charset))\lr8.values.add(okhttp3.HttpUrl.canonicalize(r10, \" \"':;\<=\>@[]^`\{\}\|\/?#&!$(),~\", true, false, true, true, r8.charset))\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|return r8\l}"];
}
subgraph cluster_Region_2036317881 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002f|throw new java.lang.NullPointerException(\"value == null\")\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0028}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0030}"];
MethodNode[shape=record,label="{public okhttp3.FormBody$Builder okhttp3.FormBody.Builder.addEncoded((r8v0 'this' okhttp3.FormBody$Builder A[IMMUTABLE_TYPE, THIS]), (r9v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

