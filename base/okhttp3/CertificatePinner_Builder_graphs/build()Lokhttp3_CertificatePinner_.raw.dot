digraph "CFG forokhttp3.CertificatePinner.Builder.build()Lokhttp3\/CertificatePinner;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.CertificatePinner) =  okhttp3.CertificatePinner \l0x0002: NEW_INSTANCE  (r1 I:java.util.LinkedHashSet) =  java.util.LinkedHashSet \l0x0004: IGET  (r2 I:java.util.List\<okhttp3.CertificatePinner$Pin\>) = (r3 I:okhttp3.CertificatePinner$Builder) okhttp3.CertificatePinner.Builder.pins java.util.List \l0x0006: INVOKE  (r1 I:java.util.LinkedHashSet), (r2 I:java.util.Collection) java.util.LinkedHashSet.\<init\>(java.util.Collection):void type: DIRECT \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  \l  (r0 I:okhttp3.CertificatePinner)\l  (r1 I:java.util.Set)\l  (r2 I:okhttp3.internal.tls.CertificateChainCleaner)\l okhttp3.CertificatePinner.\<init\>(java.util.Set, okhttp3.internal.tls.CertificateChainCleaner):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: RETURN  (r0 I:okhttp3.CertificatePinner) \l}"];
MethodNode[shape=record,label="{public okhttp3.CertificatePinner okhttp3.CertificatePinner.Builder.build((r3 'this' I:okhttp3.CertificatePinner$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

