digraph "CFG forokhttp3.RealCall.captureCallStackTrace()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"response.body().close()\" \l0x0006: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:okhttp3.internal.platform.Platform)\l  (r1 I:java.lang.String)\l okhttp3.internal.platform.Platform.getStackTraceForCloseable(java.lang.String):java.lang.Object type: VIRTUAL \l0x000a: IGET  (r1 I:okhttp3.internal.http.RetryAndFollowUpInterceptor) = (r2 I:okhttp3.RealCall) okhttp3.RealCall.retryAndFollowUpInterceptor okhttp3.internal.http.RetryAndFollowUpInterceptor \l0x000c: INVOKE  \l  (r1 I:okhttp3.internal.http.RetryAndFollowUpInterceptor)\l  (r0 I:java.lang.Object)\l okhttp3.internal.http.RetryAndFollowUpInterceptor.setCallStackTrace(java.lang.Object):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.RealCall.captureCallStackTrace((r2 'this' I:okhttp3.RealCall A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

