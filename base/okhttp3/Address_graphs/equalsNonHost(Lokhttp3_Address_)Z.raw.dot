digraph "CFG forokhttp3.Address.equalsNonHost(Lokhttp3\/Address;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Dns) = (r2 I:okhttp3.Address) okhttp3.Address.dns okhttp3.Dns \l0x0002: IGET  (r1 I:okhttp3.Dns) = (r3 I:okhttp3.Address) okhttp3.Address.dns okhttp3.Dns \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:okhttp3.Authenticator) = (r2 I:okhttp3.Address) okhttp3.Address.proxyAuthenticator okhttp3.Authenticator \l0x000c: IGET  (r1 I:okhttp3.Authenticator) = (r3 I:okhttp3.Address) okhttp3.Address.proxyAuthenticator okhttp3.Authenticator \l0x000e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:java.util.List\<okhttp3.Protocol\>) = (r2 I:okhttp3.Address) okhttp3.Address.protocols java.util.List \l0x0016: IGET  (r1 I:java.util.List\<okhttp3.Protocol\>) = (r3 I:okhttp3.Address) okhttp3.Address.protocols java.util.List \l0x0018: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IGET  (r0 I:java.util.List\<okhttp3.ConnectionSpec\>) = (r2 I:okhttp3.Address) okhttp3.Address.connectionSpecs java.util.List \l0x0020: IGET  (r1 I:java.util.List\<okhttp3.ConnectionSpec\>) = (r3 I:okhttp3.Address) okhttp3.Address.connectionSpecs java.util.List \l0x0022: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IGET  (r0 I:java.net.ProxySelector) = (r2 I:okhttp3.Address) okhttp3.Address.proxySelector java.net.ProxySelector \l0x002a: IGET  (r1 I:java.net.ProxySelector) = (r3 I:okhttp3.Address) okhttp3.Address.proxySelector java.net.ProxySelector \l0x002c: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IGET  (r0 I:java.net.Proxy) = (r2 I:okhttp3.Address) okhttp3.Address.proxy java.net.Proxy \l0x0034: IGET  (r1 I:java.net.Proxy) = (r3 I:okhttp3.Address) okhttp3.Address.proxy java.net.Proxy \l0x0036: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IGET  (r0 I:javax.net.ssl.SSLSocketFactory) = (r2 I:okhttp3.Address) okhttp3.Address.sslSocketFactory javax.net.ssl.SSLSocketFactory \l0x003e: IGET  (r1 I:javax.net.ssl.SSLSocketFactory) = (r3 I:okhttp3.Address) okhttp3.Address.sslSocketFactory javax.net.ssl.SSLSocketFactory \l0x0040: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IGET  (r0 I:javax.net.ssl.HostnameVerifier) = (r2 I:okhttp3.Address) okhttp3.Address.hostnameVerifier javax.net.ssl.HostnameVerifier \l0x0048: IGET  (r1 I:javax.net.ssl.HostnameVerifier) = (r3 I:okhttp3.Address) okhttp3.Address.hostnameVerifier javax.net.ssl.HostnameVerifier \l0x004a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: IGET  (r0 I:okhttp3.CertificatePinner) = (r2 I:okhttp3.Address) okhttp3.Address.certificatePinner okhttp3.CertificatePinner \l0x0052: IGET  (r1 I:okhttp3.CertificatePinner) = (r3 I:okhttp3.Address) okhttp3.Address.certificatePinner okhttp3.CertificatePinner \l0x0054: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) okhttp3.internal.Util.equal(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_18 [shape=record,label="{18\:\ 0x005a|0x005a: INVOKE  (r0 I:okhttp3.HttpUrl) = (r2 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x005e: INVOKE  (r0 I:int) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l0x0062: INVOKE  (r3 I:okhttp3.HttpUrl) = (r3 I:okhttp3.Address) okhttp3.Address.url():okhttp3.HttpUrl type: VIRTUAL \l0x0066: INVOKE  (r3 I:int) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006e \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean okhttp3.Address.equalsNonHost((r2 'this' I:okhttp3.Address A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Address A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_21;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_21;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
}

