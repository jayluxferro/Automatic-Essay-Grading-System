digraph "CFG forokhttp3.Request.Builder.method(Ljava\/lang\/String;Lokhttp3\/RequestBody;)Lokhttp3\/Request$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005f \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0057 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String) okhttp3.internal.http.HttpMethod.permitsRequestBody(java.lang.String):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0013: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"method \" \l0x001a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: CONST_STR  (r3 I:java.lang.String) =  \" must not have a request body.\" \l0x0022: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0052 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String) okhttp3.internal.http.HttpMethod.requiresRequestBody(java.lang.String):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003a: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003d: CONST_STR  (r1 I:java.lang.String) =  \"method \" \l0x003f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: CONST_STR  (r3 I:java.lang.String) =  \" must have a request body.\" \l0x0047: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004a: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004e: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|0x0051: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: IPUT  (r3 I:java.lang.String), (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.method java.lang.String \l0x0054: IPUT  (r4 I:okhttp3.RequestBody), (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.body okhttp3.RequestBody \l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: RETURN  (r2 I:okhttp3.Request$Builder) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0059: CONST_STR  (r4 I:java.lang.String) =  \"method.length() == 0\" \l0x005b: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x005e|0x005e: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: NEW_INSTANCE  (r3 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0061: CONST_STR  (r4 I:java.lang.String) =  \"method == null\" \l0x0063: INVOKE  \l  (r3 I:java.lang.NullPointerException)\l  (r4 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.Request$Builder okhttp3.Request.Builder.method((r2 'this' I:okhttp3.Request$Builder A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.RequestBody A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_19;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

