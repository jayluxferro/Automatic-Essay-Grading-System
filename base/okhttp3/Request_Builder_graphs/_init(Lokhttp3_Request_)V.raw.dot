digraph "CFG forokhttp3.Request.Builder.\<init\>(Lokhttp3\/Request;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: INVOKE  (r0 I:java.util.Map) =  java.util.Collections.emptyMap():java.util.Map type: STATIC \l0x0007: IPUT  \l  (r0 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Object\>)\l  (r2 I:okhttp3.Request$Builder)\l okhttp3.Request.Builder.tags java.util.Map \l0x0009: IGET  (r0 I:okhttp3.HttpUrl) = (r3 I:okhttp3.Request) okhttp3.Request.url okhttp3.HttpUrl \l0x000b: IPUT  (r0 I:okhttp3.HttpUrl), (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.url okhttp3.HttpUrl \l0x000d: IGET  (r0 I:java.lang.String) = (r3 I:okhttp3.Request) okhttp3.Request.method java.lang.String \l0x000f: IPUT  (r0 I:java.lang.String), (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.method java.lang.String \l0x0011: IGET  (r0 I:okhttp3.RequestBody) = (r3 I:okhttp3.Request) okhttp3.Request.body okhttp3.RequestBody \l0x0013: IPUT  (r0 I:okhttp3.RequestBody), (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.body okhttp3.RequestBody \l0x0015: IGET  (r0 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Object\>) = (r3 I:okhttp3.Request) okhttp3.Request.tags java.util.Map \l0x0017: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|0x001d: INVOKE  (r0 I:java.util.Map) =  java.util.Collections.emptyMap():java.util.Map type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0024: IGET  (r1 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Object\>) = (r3 I:okhttp3.Request) okhttp3.Request.tags java.util.Map \l0x0026: INVOKE  (r0 I:java.util.LinkedHashMap), (r1 I:java.util.Map) java.util.LinkedHashMap.\<init\>(java.util.Map):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IPUT  \l  (r0 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Object\>)\l  (r2 I:okhttp3.Request$Builder)\l okhttp3.Request.Builder.tags java.util.Map \l0x002b: IGET  (r3 I:okhttp3.Headers) = (r3 I:okhttp3.Request) okhttp3.Request.headers okhttp3.Headers \l0x002d: INVOKE  (r3 I:okhttp3.Headers$Builder) = (r3 I:okhttp3.Headers) okhttp3.Headers.newBuilder():okhttp3.Headers$Builder type: VIRTUAL \l0x0031: IPUT  \l  (r3 I:okhttp3.Headers$Builder)\l  (r2 I:okhttp3.Request$Builder)\l okhttp3.Request.Builder.headers okhttp3.Headers$Builder \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.Request.Builder.\<init\>((r2 'this' I:okhttp3.Request$Builder A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

