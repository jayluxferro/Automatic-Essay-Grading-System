digraph "CFG forokhttp3.Headers.Builder.add(Ljava\/lang\/String;)Lokhttp3\/Headers$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \":\" \l0x0002: INVOKE  (r0 I:int) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.indexOf(java.lang.String):int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.String), (r1 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x000e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0012: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0014: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0018: INVOKE  (r4 I:okhttp3.Headers$Builder) = \l  (r3 I:okhttp3.Headers$Builder)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.add(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: RETURN  (r4 I:okhttp3.Headers$Builder) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected header: \" \l0x0026: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.Headers$Builder okhttp3.Headers.Builder.add((r3 'this' I:okhttp3.Headers$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

