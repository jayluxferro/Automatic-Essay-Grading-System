digraph "CFG forokhttp3.Headers.Builder.addLenient(Ljava\/lang\/String;)Lokhttp3\/Headers$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \":\" \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:int) = \l  (r4 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l java.lang.String.indexOf(java.lang.String, int):int type: VIRTUAL \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r2 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0010: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0014: INVOKE  (r4 I:okhttp3.Headers$Builder) = \l  (r3 I:okhttp3.Headers$Builder)\l  (r2 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.addLenient(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: RETURN  (r4 I:okhttp3.Headers$Builder) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: CONST_STR  (r0 I:java.lang.String) =  \":\" \l0x001b: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0023: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r1 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0027: INVOKE  (r4 I:okhttp3.Headers$Builder) = \l  (r3 I:okhttp3.Headers$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.addLenient(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: RETURN  (r4 I:okhttp3.Headers$Builder) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x002e: INVOKE  (r4 I:okhttp3.Headers$Builder) = \l  (r3 I:okhttp3.Headers$Builder)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.Headers.Builder.addLenient(java.lang.String, java.lang.String):okhttp3.Headers$Builder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: RETURN  (r4 I:okhttp3.Headers$Builder) \l}"];
MethodNode[shape=record,label="{okhttp3.Headers$Builder okhttp3.Headers.Builder.addLenient((r3 'this' I:okhttp3.Headers$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

