digraph "CFG forokhttp3.Headers.Builder.addLenient(Ljava\/lang\/String;)Lokhttp3\/Headers$Builder;" {
subgraph cluster_Region_291515635 {
label = "R(2:0|(2:(1:3)|(1:(2:(1:7)|(1:9)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.indexOf(\":\", 1)\l}"];
subgraph cluster_Region_291041788 {
label = "R(2:(1:3)|(1:(2:(1:7)|(1:9))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1226569272 {
label = "IF [B:1:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 != \-1) goto L_0x000a\l}"];
subgraph cluster_Region_1826131681 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|RETURN\l|return addLenient(r4.substring(0, r0), r4.substring(r0 + 1))\l}"];
}
}
subgraph cluster_Region_996943380 {
label = "R(1:(2:(1:7)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_348478683 {
label = "R(2:(1:7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_338222432 {
label = "IF [B:5:0x001f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|if (r4.startsWith(\":\") == true) goto L_0x0021\l}"];
subgraph cluster_Region_1109989640 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002b|RETURN\l|return addLenient(\"\", r4.substring(1))\l}"];
}
}
subgraph cluster_Region_414178271 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0032|RETURN\l|return addLenient(\"\", r4)\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0019}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002c}"];
MethodNode[shape=record,label="{okhttp3.Headers$Builder okhttp3.Headers.Builder.addLenient((r3v0 'this' okhttp3.Headers$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

