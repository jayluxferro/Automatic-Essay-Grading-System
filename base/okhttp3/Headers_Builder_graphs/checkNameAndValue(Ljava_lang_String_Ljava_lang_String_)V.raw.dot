digraph "CFG forokhttp3.Headers.Builder.checkNameAndValue(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:boolean) = (r10 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0094 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r10 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000f: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0010: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x0012: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x003e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r7 I:char) = (r10 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0019: CONST  (r8 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r7 I:?[int, byte, short, char]) \<= (r8 I:?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r7 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0024: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0026: INVOKE  (r4 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x002a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x002c: INVOKE  (r1 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0030: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0032: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x0034: CONST_STR  (r10 I:java.lang.String) =  \"Unexpected char %#04x at %d in header name: %s\" \l0x0036: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.String), (r0 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x003a: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r10 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0078 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: INVOKE  (r0 I:int) = (r11 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0044: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:23:0x0077 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: INVOKE  (r7 I:char) = (r11 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x004b: CONST  (r8 I:?[int, float, short, byte, char]) = (31 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: IF  (r7 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char])  \-\> B:19:0x0053 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|0x004f: CONST  (r8 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0058 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|0x0053: IF  (r7 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:21:0x0058 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|0x0055: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005a: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x005b: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x005d: INVOKE  (r7 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0061: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0063: INVOKE  (r1 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0067: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0069: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x006b: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x006d: CONST_STR  (r10 I:java.lang.String) =  \"Unexpected char %#04x at %d in %s value: %s\" \l0x006f: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.String), (r5 I:java.lang.Object[]) okhttp3.internal.Util.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0073: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r10 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0076|0x0076: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0077|0x0077: RETURN   \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: NEW_INSTANCE  (r11 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x007a: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007c: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007f: CONST_STR  (r1 I:java.lang.String) =  \"value for name \" \l0x0081: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0084: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: CONST_STR  (r10 I:java.lang.String) =  \" == null\" \l0x0089: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008c: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0090: INVOKE  \l  (r11 I:java.lang.NullPointerException)\l  (r10 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0093|0x0093: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0094|0x0094: NEW_INSTANCE  (r10 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0096: CONST_STR  (r11 I:java.lang.String) =  \"name is empty\" \l0x0098: INVOKE  \l  (r10 I:java.lang.IllegalArgumentException)\l  (r11 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x009b|0x009b: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x009c|0x009c: NEW_INSTANCE  (r10 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x009e: CONST_STR  (r11 I:java.lang.String) =  \"name == null\" \l0x00a0: INVOKE  \l  (r10 I:java.lang.NullPointerException)\l  (r11 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a3|0x00a3: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.Headers.Builder.checkNameAndValue((r9 'this' I:okhttp3.Headers$Builder A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_28;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_26;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_29;
}

