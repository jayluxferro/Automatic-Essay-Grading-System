digraph "CFG forokhttp3.CipherSuite.1.compare(Ljava\/lang\/String;Ljava\/lang\/String;)I" {
subgraph cluster_Region_353176976 {
label = "R(4:0|(2:3|(1:7)(1:(1:15)(1:6)))|8|(2:(1:12)|(1:(2:(1:16)|(1:11)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = java.lang.Math.min(r7.length(), r8.length())\lint r1 = 4\l}"];
subgraph cluster_LoopRegion_2004457439 {
label = "LOOP:0: (2:3|(1:7)(1:(1:15)(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r1 \< r0) goto L_0x0011\l}"];
subgraph cluster_Region_1104582630 {
label = "R(2:3|(1:7)(1:(1:15)(1:6)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0011|char char r4 = r7.charAt(r1)\lchar char r5 = r8.charAt(r1)\l}"];
subgraph cluster_IfRegion_1878977570 {
label = "IF [B:4:0x0019] THEN: R(1:7) ELSE: R(1:(1:15)(1:6))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r4 == r5) goto L_0x0020\l}"];
subgraph cluster_Region_1126527164 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0020|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:7:0x0020\l|r1++\l}"];
}
subgraph cluster_Region_440591764 {
label = "R(1:(1:15)(1:6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_442642332 {
label = "IF [B:5:0x001b] THEN: R(1:15) ELSE: R(1:6) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|if (r4 \< r5) goto L_?\l}"];
subgraph cluster_Region_1598174070 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
subgraph cluster_Region_950682010 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001e|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 1\l}"];
}
}
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0023|int int r7 = r7.length()\lint int r8 = r8.length()\l}"];
subgraph cluster_Region_395998547 {
label = "R(2:(1:12)|(1:(2:(1:16)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1011512257 {
label = "IF [B:9:0x002b] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002b|if (r7 == r8) goto L_0x0032\l}"];
subgraph cluster_Region_444157041 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0032|RETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_1416500683 {
label = "R(1:(2:(1:16)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_1042430029 {
label = "R(2:(1:16)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_129420536 {
label = "IF [B:10:0x002d] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002d|if (r7 \< r8) goto L_?\l}"];
subgraph cluster_Region_2052514359 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_714879944 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0030|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 1\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000d|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:7:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:7:0x0020\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001b|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0023|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int okhttp3.CipherSuite.1.compare((r6v0 'this' okhttp3.CipherSuite$1 A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_14[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_4 -> Node_13[style=dashed];
Node_7 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_1 -> Node_2;
Node_13 -> Node_5;
Node_14 -> Node_8;
}

