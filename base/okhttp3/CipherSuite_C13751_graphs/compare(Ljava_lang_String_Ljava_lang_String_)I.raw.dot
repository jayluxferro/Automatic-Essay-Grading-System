digraph "CFG forokhttp3.CipherSuite.1.compare(Ljava\/lang\/String;Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r7 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0008: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r4 I:char) = (r7 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0015: INVOKE  (r5 I:char) = (r8 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:7:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN  (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: INVOKE  (r7 I:int) = (r7 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0027: INVOKE  (r8 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r7 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: RETURN  (r2 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{public int okhttp3.CipherSuite.1.compare((r6 'this' I:okhttp3.CipherSuite$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
}

