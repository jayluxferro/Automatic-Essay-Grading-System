digraph "CFG forokhttp3.FormBody.writeOrCountBytes(Lokio\/BufferedSink;Z)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 == false) goto L_0x0008\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|okio.Buffer r4 = new okio.Buffer()\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|okio.Buffer r4 = r4.buffer()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|PHI: r4 \l  PHI: (r4v1 okio.Buffer) = (r4v2 okio.Buffer), (r4v3 okio.Buffer) binds: [B:2:0x0008, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|r0 = 0\lint r1 = r3.encodedNames.size()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v4 int) binds: [B:3:0x000c, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0013\-\>B:7:0x001c\l|if (r0 \>= r1) goto L_0x003a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r0 \<= 0) goto L_0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|r4.writeByte(38)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|LOOP_END\lLOOP:0: B:4:0x0013\-\>B:7:0x001c\l|r4.writeUtf8(r3.encodedNames.get(r0))\lr4.writeByte(61)\lr4.writeUtf8(r3.encodedValues.get(r0))\lint r0 = r0 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|if (r5 == false) goto L_0x0044\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|long r0 = r4.size()\lr4.clear()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private long okhttp3.FormBody.writeOrCountBytes((r3v0 'this' okhttp3.FormBody A[IMMUTABLE_TYPE, THIS]), (r4v0 okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_12;
Node_7 -> Node_4;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_11 -> Node_8;
Node_12 -> Node_7;
Node_13 -> Node_7;
}

