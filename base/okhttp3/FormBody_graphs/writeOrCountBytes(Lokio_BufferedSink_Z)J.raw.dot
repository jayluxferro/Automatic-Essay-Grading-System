digraph "CFG forokhttp3.FormBody.writeOrCountBytes(Lokio\/BufferedSink;Z)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0008 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r4 I:okio.Buffer) =  okio.Buffer \l0x0004: INVOKE  (r4 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r4 I:okio.Buffer) = (r4 I:okio.BufferedSink) okio.BufferedSink.buffer():okio.Buffer type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.FormBody) okhttp3.FormBody.encodedNames java.util.List \l0x000f: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r2 I:?[int, float, short, byte, char]) = (38 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r4 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.FormBody) okhttp3.FormBody.encodedNames java.util.List \l0x001e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r4 I:okio.Buffer), (r2 I:java.lang.String) okio.Buffer.writeUtf8(java.lang.String):okio.Buffer type: VIRTUAL \l0x0027: CONST  (r2 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r4 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x002c: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.FormBody) okhttp3.FormBody.encodedValues java.util.List \l0x002e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r4 I:okio.Buffer), (r2 I:java.lang.String) okio.Buffer.writeUtf8(java.lang.String):okio.Buffer type: VIRTUAL \l0x0037: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: INVOKE  (r0 I:long) = (r4 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x0040: INVOKE  (r4 I:okio.Buffer) okio.Buffer.clear():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{private long okhttp3.FormBody.writeOrCountBytes((r3 'this' I:okhttp3.FormBody A[IMMUTABLE_TYPE, THIS]), (r4 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
}

