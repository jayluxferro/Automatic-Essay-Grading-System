digraph "CFG forokhttp3.HttpUrl.Builder.portColonOffset(Ljava\/lang\/String;II)I" {
subgraph cluster_Region_1936210456 {
label = "R(2:(2:1|(2:(1:10)|(2:(1:(2:5|(1:(1:14))))(0)|9)))|11)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_49493511 {
label = "LOOP:0: (2:1|(2:(1:10)|(2:(1:(2:5|(1:(1:14))))(0)|9)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:0:0x0000, B:9:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:9:0x001b\l|if (r3 \< r4) goto L_0x0002\l}"];
subgraph cluster_Region_1320742633 {
label = "R(2:1|(2:(1:10)|(2:(1:(2:5|(1:(1:14))))(0)|9)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|char char r0 = r2.charAt(r3)\l}"];
subgraph cluster_Region_2026143534 {
label = "R(2:(1:10)|(2:(1:(2:5|(1:(1:14))))(0)|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1321743305 {
label = "IF [B:2:0x0008] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r0 == ':') goto L_0x001e\l}"];
subgraph cluster_Region_1071858951 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_224985113 {
label = "R(2:(1:(2:5|(1:(1:14))))(0)|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_988046609 {
label = "IF [B:4:0x000c] THEN: R(1:(2:5|(1:(1:14)))) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r0 == '[') goto L_0x000f\l}"];
subgraph cluster_Region_372329661 {
label = "R(1:(2:5|(1:(1:14))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1297579098 {
label = "LOOP:1: (2:5|(1:(1:14)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_END\lLOOP:1: B:5:0x000f\-\>B:8:0x0019\l|if (r2.charAt(r3) == ']') goto L_0x001b\l}"];
subgraph cluster_Region_1757004682 {
label = "R(2:5|(1:(1:14)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_START\lPHI: r3 \l  PHI: (r3v4 int) = (r3v1 int), (r3v5 int) binds: [B:4:0x000c, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x000f\-\>B:8:0x0019\l|r3++\l}"];
subgraph cluster_Region_764768076 {
label = "R(1:(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_828218087 {
label = "IF [B:6:0x0011] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r3 \>= r4) goto L_0x001b\l}"];
subgraph cluster_Region_1193186618 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x001b|SYNTHETIC\lEDGE_INSN: B:14:0x001b\-\>B:9:0x001b ?: BREAK  \l|break\l}"];
}
}
}
}
}
}
subgraph cluster_Region_1629334464 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_9 [shape=record,label="{9\:\ 0x001b|LOOP_END\lEDGE_INSN: B:14:0x001b\-\>B:9:0x001b ?: BREAK  \lPHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v5 int), (r3v5 int) binds: [B:16:0x001b, B:14:0x001b, B:15:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:9:0x001b\l|r3++\l}"];
}
}
}
}
Node_11 [shape=record,label="{11\:\ 0x001f|RETURN\l|return r4\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001f|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001e|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x001b|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int okhttp3.HttpUrl.Builder.portColonOffset((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_12[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_4 -> Node_5;
Node_4 -> Node_16[style=dashed];
Node_8 -> Node_5[style=dashed];
Node_8 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_14 -> Node_9;
Node_9 -> Node_0;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_12 -> Node_11;
Node_13 -> Node_10;
Node_15 -> Node_9;
Node_16 -> Node_9;
}

