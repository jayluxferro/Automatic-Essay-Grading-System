digraph "CFG forokhttp3.HttpUrl.Builder.reencodeForUri()Lokhttp3\/HttpUrl$Builder;" {
subgraph cluster_Region_1205240927 {
label = "R(5:0|(1:2)|(2:5|(3:7|(1:9)(0)|10))|(1:13)|14)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r10.encodedPathSegments.size()\lint r1 = 0\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1641958953 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v6 int) binds: [B:0:0x0000, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|if (r2 \< r0) goto L_0x000a\l}"];
subgraph cluster_Region_131661474 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|r10.encodedPathSegments.set(r2, okhttp3.HttpUrl.canonicalize(r10.encodedPathSegments.get(r2), okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, true, true, false, true))\lr2++\l}"];
}
}
subgraph cluster_IfRegion_143503035 {
label = "IF [B:4:0x0027] THEN: R(2:5|(3:7|(1:9)(0)|10)) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0027|if (r10.encodedQueryNamesAndValues != null) goto L_0x0029\l}"];
subgraph cluster_Region_1534679189 {
label = "R(2:5|(3:7|(1:9)(0)|10))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0029|int int r0 = r10.encodedQueryNamesAndValues.size()\l}"];
subgraph cluster_LoopRegion_2003133207 {
label = "LOOP:1: (3:7|(1:9)(0)|10)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002f|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v0 int), (r1v3 int) binds: [B:5:0x0029, B:10:0x004b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:6:0x002f\-\>B:10:0x004b\l|if (r1 \< r0) goto L_0x0031\l}"];
subgraph cluster_Region_1742979534 {
label = "R(3:7|(1:9)(0)|10)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0031|java.lang.String java.lang.String r3 = r10.encodedQueryNamesAndValues.get(r1)\l}"];
subgraph cluster_IfRegion_585965445 {
label = "IF [B:8:0x003a] THEN: R(1:9) ELSE: R(0)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x003a|if (r3 != null) goto L_0x003c\l}"];
subgraph cluster_Region_350504209 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003c|r10.encodedQueryNamesAndValues.set(r1, okhttp3.HttpUrl.canonicalize(r3, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, true, true, true, true))\l}"];
}
subgraph cluster_Region_1444848785 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_10 [shape=record,label="{10\:\ 0x004b|LOOP_END\lLOOP:1: B:6:0x002f\-\>B:10:0x004b\l|r1++\l}"];
}
}
}
}
subgraph cluster_IfRegion_814052305 {
label = "IF [B:12:0x0050] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0050|if (r10.encodedFragment != null) goto L_0x0052\l}"];
subgraph cluster_Region_1110880331 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0052|r10.encodedFragment = okhttp3.HttpUrl.canonicalize(r10.encodedFragment, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, true, true, false, false)\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0060|RETURN\l|return r10\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0025}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x004e}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0025|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x004e|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x004b|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x004b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.reencodeForUri((r10v0 'this' okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15[style=dashed];
Node_2 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_11[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_16[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_18[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_6;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_3 -> Node_4;
Node_11 -> Node_12;
Node_15 -> Node_3;
Node_16 -> Node_11;
Node_17 -> Node_10;
Node_18 -> Node_10;
}

