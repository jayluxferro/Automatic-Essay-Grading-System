digraph "CFG forokhttp3.HttpUrl.Builder.push(Ljava\/lang\/String;IIZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r10 = okhttp3.HttpUrl.canonicalize(r10, r11, r12, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, r14, false, false, true, (java.nio.charset.Charset) null)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if (isDot(r10) == false) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (isDotDot(r10) == false) goto L_0x001f\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|pop()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f}"];
Node_8 [shape=record,label="{8\:\ 0x0033|if (r9.encodedPathSegments.get(r9.encodedPathSegments.size() + \-1).isEmpty() == false) goto L_0x0043\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|r9.encodedPathSegments.set(r9.encodedPathSegments.size() + \-1, r10)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|r9.encodedPathSegments.add(r10)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|if (r13 == false) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|r9.encodedPathSegments.add(\"\")\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okhttp3.HttpUrl.Builder.push((r9v0 'this' okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r10v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
}

