digraph "CFG forokhttp3.HttpUrl.Builder.reencodeForUri()Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r3 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x000c: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0011: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0013: IGET  (r3 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0015: CONST_STR  (r5 I:java.lang.String) =  \"[]\" \l0x0017: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0018: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001b: INVOKE  (r4 I:java.lang.String) = \l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:boolean)\l  (r9 I:boolean)\l okhttp3.HttpUrl.canonicalize(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean):java.lang.String type: STATIC \l0x001f: INVOKE  (r3 I:java.util.List), (r2 I:int), (r4 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l0x002b: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x004e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l0x0033: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0037: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0038: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004b \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l0x003e: CONST_STR  (r4 I:java.lang.String) =  \"^`\{\|\}\" \l0x0040: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0041: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0042: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0043: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0044: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:boolean)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:boolean)\l okhttp3.HttpUrl.canonicalize(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean):java.lang.String type: STATIC \l0x0048: INVOKE  (r2 I:java.util.List), (r1 I:int), (r3 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004e|0x004e: IGET  (r0 I:java.lang.String) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l}"];
Node_12 [shape=record,label="{12\:\ 0x0050|0x0050: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0060 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IGET  (r1 I:java.lang.String) = (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l0x0054: CONST_STR  (r2 I:java.lang.String) =  \" \"#\<\>^`\{\|\}\" \l0x0056: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0057: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0058: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0059: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: INVOKE  (r0 I:java.lang.String) = \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:boolean)\l  (r4 I:boolean)\l  (r5 I:boolean)\l  (r6 I:boolean)\l okhttp3.HttpUrl.canonicalize(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean):java.lang.String type: STATIC \l0x005e: IPUT  (r0 I:java.lang.String), (r10 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|0x0060: RETURN  (r10 I:okhttp3.HttpUrl$Builder) \l}"];
MethodNode[shape=record,label="{okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.reencodeForUri((r10 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

