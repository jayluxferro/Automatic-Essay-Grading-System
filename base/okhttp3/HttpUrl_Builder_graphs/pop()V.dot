digraph "CFG forokhttp3.HttpUrl.Builder.pop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r3.encodedPathSegments.remove(r3.encodedPathSegments.size() + \-1).isEmpty() == false) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016}"];
Node_3 [shape=record,label="{3\:\ 0x001c|if (r3.encodedPathSegments.isEmpty() != false) goto L_0x002e\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|r3.encodedPathSegments.set(r3.encodedPathSegments.size() + \-1, \"\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|r3.encodedPathSegments.add(\"\")\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void okhttp3.HttpUrl.Builder.pop((r3v0 'this' okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
}

