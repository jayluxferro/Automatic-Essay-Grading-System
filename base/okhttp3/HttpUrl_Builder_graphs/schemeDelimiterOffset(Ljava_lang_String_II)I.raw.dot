digraph "CFG forokhttp3.HttpUrl.Builder.schemeDelimiterOffset(Ljava\/lang\/String;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r9 I:int) \- (r8 I:int) \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r0 I:char) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l0x000d: CONST  (r3 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l0x000f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l0x0011: CONST  (r5 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:32:0x0048 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r8 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:31:0x0047 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: INVOKE  (r0 I:char) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IF  (r0 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r0 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:16:0x002c \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: CONST  (r6 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|0x0030: CONST  (r6 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: CONST  (r6 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0036|0x0036: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0038|0x0038: CONST  (r6 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_24 [shape=record,label="{24\:\ 0x003c|0x003c: CONST  (r6 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0041 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0041|0x0041: CONST  (r7 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0046 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0045|0x0045: RETURN  (r8 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0046|0x0046: RETURN  (r1 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0047|0x0047: RETURN  (r1 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0048|0x0048: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int okhttp3.HttpUrl.Builder.schemeDelimiterOffset((r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_32;
Node_7 -> Node_9;
Node_7 -> Node_32[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_31;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_9;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_9;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_9;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_9;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_9;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_9[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
}

