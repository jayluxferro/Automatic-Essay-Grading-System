digraph "CFG forokhttp3.HttpUrl.Builder.resolvePath(Ljava\/lang\/String;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r0 I:char) = (r10 I:java.lang.String), (r11 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (92 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0013: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0015: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0019: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x001a: CONST_STR  (r3 I:java.lang.String) =  \"\" \l0x001c: INVOKE  (r0 I:java.util.List), (r1 I:int), (r3 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0022: INVOKE  (r0 I:java.util.List) java.util.List.clear():void type: INTERFACE \l0x0025: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0027: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0029: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x002c: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r5 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:18:0x0049 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: CONST_STR  (r11 I:java.lang.String) =  \"\/\" \l0x0033: INVOKE  (r11 I:int) = \l  (r10 I:java.lang.String)\l  (r5 I:int)\l  (r12 I:int)\l  (r11 I:java.lang.String)\l okhttp3.internal.Util.delimiterOffset(java.lang.String, int, int, java.lang.String):int type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:14:0x003b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003d: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x003e: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x003f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: INVOKE  \l  (r3 I:okhttp3.HttpUrl$Builder)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l  (r8 I:boolean)\l okhttp3.HttpUrl.Builder.push(java.lang.String, int, int, boolean, boolean):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.HttpUrl.Builder.resolvePath((r9 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_9;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_9;
}

