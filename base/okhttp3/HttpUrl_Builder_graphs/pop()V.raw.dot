digraph "CFG forokhttp3.HttpUrl.Builder.pop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0002: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0004: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0018: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002e \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0020: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0022: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0026: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0028: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x002a: INVOKE  (r0 I:java.util.List), (r1 I:int), (r2 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0032: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.HttpUrl.Builder.pop((r3 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

