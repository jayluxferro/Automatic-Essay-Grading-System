digraph "CFG forokhttp3.HttpUrl.Builder.push(Ljava\/lang\/String;IIZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r3 I:java.lang.String) =  \" \"\<\>^`\{\}\|\/?#\" \l0x0002: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r10 I:java.lang.String) = \l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:java.lang.String)\l  (r4 I:boolean)\l  (r5 I:boolean)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:java.nio.charset.Charset)\l okhttp3.HttpUrl.canonicalize(java.lang.String, int, int, java.lang.String, boolean, boolean, boolean, boolean, java.nio.charset.Charset):java.lang.String type: STATIC \l0x000e: INVOKE  (r11 I:boolean) = (r9 I:okhttp3.HttpUrl$Builder), (r10 I:java.lang.String) okhttp3.HttpUrl.Builder.isDot(java.lang.String):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r11 I:boolean) = (r9 I:okhttp3.HttpUrl$Builder), (r10 I:java.lang.String) okhttp3.HttpUrl.Builder.isDotDot(java.lang.String):boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.pop():void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r11 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0021: IGET  (r12 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0023: INVOKE  (r12 I:int) = (r12 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0027: ARITH  (r12 I:int) = (r12 I:int) + (\-1 int) \l0x0029: INVOKE  (r11 I:java.lang.Object) = (r11 I:java.util.List), (r12 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r11 I:java.lang.String) = (java.lang.String) (r11 I:?[OBJECT, ARRAY]) \l0x002f: INVOKE  (r11 I:boolean) = (r11 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0043 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r11 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0037: IGET  (r12 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0039: INVOKE  (r12 I:int) = (r12 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x003d: ARITH  (r12 I:int) = (r12 I:int) + (\-1 int) \l0x003f: INVOKE  \l  (r11 I:java.util.List)\l  (r12 I:int)\l  (r10 I:java.lang.Object)\l java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: IGET  (r11 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0045: INVOKE  (r11 I:java.util.List), (r10 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0051 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: IGET  (r10 I:java.util.List\<java.lang.String\>) = (r9 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x004c: CONST_STR  (r11 I:java.lang.String) =  \"\" \l0x004e: INVOKE  (r10 I:java.util.List), (r11 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.HttpUrl.Builder.push((r9 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

