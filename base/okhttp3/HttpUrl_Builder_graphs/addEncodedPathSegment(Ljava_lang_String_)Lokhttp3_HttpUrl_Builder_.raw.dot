digraph "CFG forokhttp3.HttpUrl.Builder.addEncodedPathSegment(Ljava\/lang\/String;)Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r3 I:int) = (r7 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0007: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x000a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r0 I:okhttp3.HttpUrl$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:boolean)\l  (r5 I:boolean)\l okhttp3.HttpUrl.Builder.push(java.lang.String, int, int, boolean, boolean):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r6 I:okhttp3.HttpUrl$Builder) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: NEW_INSTANCE  (r7 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0011: CONST_STR  (r0 I:java.lang.String) =  \"encodedPathSegment == null\" \l0x0013: INVOKE  \l  (r7 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.addEncodedPathSegment((r6 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

