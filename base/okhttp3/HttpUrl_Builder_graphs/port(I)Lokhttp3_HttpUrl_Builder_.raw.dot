digraph "CFG forokhttp3.HttpUrl.Builder.port(I)Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (65535(0xffff, float:9.1834E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IPUT  (r4 I:int), (r3 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.port int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN  (r3 I:okhttp3.HttpUrl$Builder) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"unexpected port: \" \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0019: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001d: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.port((r3 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

