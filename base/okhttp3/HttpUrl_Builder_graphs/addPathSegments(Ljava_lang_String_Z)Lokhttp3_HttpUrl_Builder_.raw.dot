digraph "CFG forokhttp3.HttpUrl.Builder.addPathSegments(Ljava\/lang\/String;Z)Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r1 I:int) = (r9 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0006: CONST_STR  (r2 I:java.lang.String) =  \"\/\" \l0x0008: INVOKE  (r7 I:int) = \l  (r9 I:java.lang.String)\l  (r3 I:int)\l  (r1 I:int)\l  (r2 I:java.lang.String)\l okhttp3.internal.Util.delimiterOffset(java.lang.String, int, int, java.lang.String):int type: STATIC \l0x000c: INVOKE  (r1 I:int) = (r9 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r7 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0013: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0018: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: INVOKE  \l  (r1 I:okhttp3.HttpUrl$Builder)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l  (r6 I:boolean)\l okhttp3.HttpUrl.Builder.push(java.lang.String, int, int, boolean, boolean):void type: DIRECT \l0x001d: ARITH  (r3 I:int) = (r7 I:int) + (1 int) \l0x001f: INVOKE  (r1 I:int) = (r9 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IF  (r3 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:1:0x0002 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r8 I:okhttp3.HttpUrl$Builder) \l}"];
MethodNode[shape=record,label="{private okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.addPathSegments((r8 'this' I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
}

