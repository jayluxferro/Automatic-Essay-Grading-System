digraph "CFG forokhttp3.HttpUrl.Builder.parse(Lokhttp3\/HttpUrl;Ljava\/lang\/String;)Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r19\lr1 = r20\lr10 = r21\lint r9 = okhttp3.internal.Util.skipLeadingAsciiWhitespace(r10, 0, r21.length())\lint r11 = okhttp3.internal.Util.skipTrailingAsciiWhitespace(r10, r9, r21.length())\lint r12 = schemeDelimiterOffset(r10, r9, r11)\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|if (r12 == \-1) goto L_0x0072\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e}"];
Node_3 [shape=record,label="{3\:\ 0x002a|if (r21.regionMatches(true, r9, \"https:\", 0, 6) == false) goto L_0x0038\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|r0.scheme = \"https\"\lint r9 = r9 + \"https:\".length()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0038}"];
Node_6 [shape=record,label="{6\:\ 0x0044|if (r21.regionMatches(true, r9, \"http:\", 0, 5) == false) goto L_0x0052\l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|r0.scheme = \"http\"\lint r9 = r9 + \"http:\".length()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0052|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Expected URL scheme 'http' or 'https' but was '\")\lr2.append(r10.substring(0, r12))\lr2.append(\"'\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0071|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0072|if (r1 == null) goto L_0x021a\l}"];
Node_11 [shape=record,label="{11\:\ 0x0074|r0.scheme = r1.scheme\l}"];
Node_12 [shape=record,label="{12\:\ 0x0078|PHI: r9 \l  PHI: (r9v1 int) = (r9v0 int), (r9v11 int), (r9v12 int) binds: [B:11:0x0074, B:7:0x0046, B:4:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = slashCount(r10, r9, r11)\lr12 = '#'\l}"];
Node_13 [shape=record,label="{13\:\ 0x007f|if (r2 \>= 2) goto L_0x00c1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0081|if (r1 == null) goto L_0x00c1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0083}"];
Node_16 [shape=record,label="{16\:\ 0x008b|if (r1.scheme.equals(r0.scheme) != false) goto L_0x008e\l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|r0.encodedUsername = r20.encodedUsername()\lr0.encodedPassword = r20.encodedPassword()\lr0.host = r1.host\lr0.port = r1.port\lr0.encodedPathSegments.clear()\lr0.encodedPathSegments.addAll(r20.encodedPathSegments())\l}"];
Node_18 [shape=record,label="{18\:\ 0x00b0|if (r9 == r11) goto L_0x00b8\l}"];
Node_19 [shape=record,label="{19\:\ 0x00b2}"];
Node_20 [shape=record,label="{20\:\ 0x00b6|if (r10.charAt(r9) != '#') goto L_0x01af\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b8|encodedQuery(r20.encodedQuery())\l}"];
Node_22 [shape=record,label="{22\:\ 0x00c1|r2 = r9 + r2\lr15 = false\lr16 = false\l}"];
Node_23 [shape=record,label="{23\:\ 0x00c6|LOOP_START\lPHI: r2 r12 r15 r16 \l  PHI: (r2v10 int) = (r2v9 int), (r2v13 int) binds: [B:22:0x00c1, B:44:0x015e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v3 char) = (r12v1 char), (r12v5 char) binds: [B:22:0x00c1, B:44:0x015e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v1 boolean) = (r15v0 boolean), (r15v2 boolean) binds: [B:22:0x00c1, B:44:0x015e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r16v1 boolean) = (r16v0 boolean), (r16v2 boolean) binds: [B:22:0x00c1, B:44:0x015e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:23:0x00c6\-\>B:44:0x015e\l|int r9 = okhttp3.internal.Util.delimiterOffset(r10, r2, r11, \"@\/?#\")\l}"];
Node_24 [shape=record,label="{24\:\ 0x00cc|if (r9 == r11) goto L_0x00d3\l}"];
Node_25 [shape=record,label="{25\:\ 0x00ce|char r1 = r10.charAt(r9)\l}"];
Node_26 [shape=record,label="{26\:\ 0x00d3|r1 = 65535\l}"];
Node_27 [shape=record,label="{27\:\ 0x00d4|PHI: r1 \l  PHI: (r1v11 char) = (r1v28 char), (r1v29 char) binds: [B:26:0x00d3, B:25:0x00ce] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == 65535) goto L_0x0162\l}"];
Node_28 [shape=record,label="{28\:\ 0x00d6|if (r1 == r12) goto L_0x0162\l}"];
Node_29 [shape=record,label="{29\:\ 0x00d8}"];
Node_30 [shape=record,label="{30\:\ 0x00da|if (r1 == '\/') goto L_0x0162\l}"];
Node_31 [shape=record,label="{31\:\ 0x00dc}"];
Node_32 [shape=record,label="{32\:\ 0x00de|if (r1 == '') goto L_0x0162\l}"];
Node_33 [shape=record,label="{33\:\ 0x00e0|switch(r1) \{\l    case 63: goto L_0x0162;\l    case 64: goto L_0x00e5;\l    default: goto L_0x00e3;\l\}\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e5|if (r15 != false) goto L_0x0135\l}"];
Node_35 [shape=record,label="{35\:\ 0x00e7|int r8 = okhttp3.internal.Util.delimiterOffset(r10, r2, r9, ':')\lr14 = r8\lr12 = r9\ljava.lang.String r1 = okhttp3.HttpUrl.canonicalize(r21, r2, r8, \" \"':;\<=\>@[]^`\{\}\|\/?#\", true, false, false, true, (java.nio.charset.Charset) null)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0103|if (r16 == false) goto L_0x011b\l}"];
Node_37 [shape=record,label="{37\:\ 0x0105|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(r0.encodedUsername)\lr2.append(\"%40\")\lr2.append(r1)\ljava.lang.String r1 = r2.toString()\l}"];
Node_38 [shape=record,label="{38\:\ 0x011b|PHI: r1 \l  PHI: (r1v24 java.lang.String) = (r1v23 java.lang.String), (r1v27 java.lang.String) binds: [B:36:0x0103, B:37:0x0105] A[DONT_GENERATE, DONT_INLINE]\l|r0.encodedUsername = r1\l}"];
Node_39 [shape=record,label="{39\:\ 0x011d|if (r14 == r12) goto L_0x0132\l}"];
Node_40 [shape=record,label="{40\:\ 0x011f|r1 = r21\lr0.encodedPassword = okhttp3.HttpUrl.canonicalize(r1, r14 + 1, r12, \" \"':;\<=\>@[]^`\{\}\|\/?#\", true, false, false, true, (java.nio.charset.Charset) null)\lr15 = true\l}"];
Node_41 [shape=record,label="{41\:\ 0x0132|PHI: r15 \l  PHI: (r15v4 boolean) = (r15v1 boolean), (r15v5 boolean) binds: [B:39:0x011d, B:40:0x011f] A[DONT_GENERATE, DONT_INLINE]\l|r16 = true\l}"];
Node_42 [shape=record,label="{42\:\ 0x0135|r12 = r9\ljava.lang.StringBuilder r14 = new java.lang.StringBuilder()\lr14.append(r0.encodedPassword)\lr14.append(\"%40\")\lr14.append(okhttp3.HttpUrl.canonicalize(r21, r2, r12, \" \"':;\<=\>@[]^`\{\}\|\/?#\", true, false, false, true, (java.nio.charset.Charset) null))\lr0.encodedPassword = r14.toString()\l}"];
Node_43 [shape=record,label="{43\:\ 0x015c|PHI: r12 r15 r16 \l  PHI: (r12v6 int) = (r12v7 int), (r12v8 int) binds: [B:42:0x0135, B:41:0x0132] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v3 boolean) = (r15v1 boolean), (r15v4 boolean) binds: [B:42:0x0135, B:41:0x0132] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r16v3 boolean) = (r16v1 boolean), (r16v4 boolean) binds: [B:42:0x0135, B:41:0x0132] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r12 + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x015e|LOOP_END\lPHI: r2 r15 r16 \l  PHI: (r2v13 int) = (r2v10 int), (r2v14 int) binds: [B:75:0x015e, B:74:0x015e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v2 boolean) = (r15v1 boolean), (r15v3 boolean) binds: [B:75:0x015e, B:74:0x015e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r16v2 boolean) = (r16v1 boolean), (r16v3 boolean) binds: [B:75:0x015e, B:74:0x015e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:23:0x00c6\-\>B:44:0x015e\l|r12 = '#'\l}"];
Node_45 [shape=record,label="{45\:\ 0x0162|r12 = r9\lint r1 = portColonOffset(r10, r2, r12)\lint r3 = r1 + 1\l}"];
Node_46 [shape=record,label="{46\:\ 0x016b|if (r3 \>= r12) goto L_0x019c\l}"];
Node_47 [shape=record,label="{47\:\ 0x016d|r0.host = canonicalizeHost(r10, r2, r1)\lr0.port = parsePort(r10, r3, r12)\l}"];
Node_48 [shape=record,label="{48\:\ 0x017b|if (r0.port == \-1) goto L_0x017e\l}"];
Node_49 [shape=record,label="{49\:\ 0x017e|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid URL port: \"\")\lr2.append(r10.substring(r3, r12))\lr2.append(kotlin.text.Typography.quote)\l}"];
Node_50 [shape=record,label="{50\:\ 0x019b|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_51 [shape=record,label="{51\:\ 0x019c|r0.host = canonicalizeHost(r10, r2, r1)\lr0.port = okhttp3.HttpUrl.defaultPort(r0.scheme)\l}"];
Node_52 [shape=record,label="{52\:\ 0x01aa}"];
Node_53 [shape=record,label="{53\:\ 0x01ac|if (r0.host == null) goto L_0x01fc\l}"];
Node_54 [shape=record,label="{54\:\ 0x01ae|r9 = r12\l}"];
Node_55 [shape=record,label="{55\:\ 0x01af|PHI: r9 \l  PHI: (r9v2 int) = (r9v7 int), (r9v1 int), (r9v1 int) binds: [B:54:0x01ae, B:21:0x00b8, B:20:0x00b6] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = okhttp3.internal.Util.delimiterOffset(r10, r9, r11, \"?#\")\lresolvePath(r10, r9, r1)\l}"];
Node_56 [shape=record,label="{56\:\ 0x01b8|if (r1 \>= r11) goto L_0x01df\l}"];
Node_57 [shape=record,label="{57\:\ 0x01ba}"];
Node_58 [shape=record,label="{58\:\ 0x01c0|if (r10.charAt(r1) != '?') goto L_0x01df\l}"];
Node_59 [shape=record,label="{59\:\ 0x01c2|int r12 = okhttp3.internal.Util.delimiterOffset(r10, r1, r11, '#')\lint r2 = r1 + 1\lr0.encodedQueryNamesAndValues = okhttp3.HttpUrl.queryStringToNamesAndValues(okhttp3.HttpUrl.canonicalize(r21, r2, r12, okhttp3.HttpUrl.QUERY_ENCODE_SET, true, false, true, true, (java.nio.charset.Charset) null))\lr1 = r12\l}"];
Node_60 [shape=record,label="{60\:\ 0x01df|PHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v2 int), (r1v9 int) binds: [B:56:0x01b8, B:58:0x01c0, B:59:0x01c2] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r11) goto L_0x01fb\l}"];
Node_61 [shape=record,label="{61\:\ 0x01e1}"];
Node_62 [shape=record,label="{62\:\ 0x01e7|if (r10.charAt(r1) != '#') goto L_0x01fb\l}"];
Node_63 [shape=record,label="{63\:\ 0x01e9|int r2 = 1 + r1\lr0.encodedFragment = okhttp3.HttpUrl.canonicalize(r21, r2, r11, \"\", true, false, false, false, (java.nio.charset.Charset) null)\l}"];
Node_64 [shape=record,label="{64\:\ 0x01fb|RETURN\l|return r0\l}"];
Node_65 [shape=record,label="{65\:\ 0x01fc|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Invalid URL host: \"\")\lr5.append(r10.substring(r2, r1))\lr5.append(kotlin.text.Typography.quote)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0219|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
Node_67 [shape=record,label="{67\:\ 0x021a}"];
Node_68 [shape=record,label="{68\:\ 0x0221|throw new java.lang.IllegalArgumentException(\"Expected URL scheme 'http' or 'https' but no colon was found\")\l}"];
Node_69 [shape=record,label="{69\:\ 0x0162|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0162|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0162|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0162|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0162|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x015e|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x015e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{okhttp3.HttpUrl$Builder okhttp3.HttpUrl.Builder.parse((r19v0 'this' okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, THIS]), (r20v0 okhttp3.HttpUrl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_67;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_22[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_55;
Node_21 -> Node_55;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_70;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_71;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_72;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_73;
Node_33 -> Node_34;
Node_33 -> Node_69;
Node_33 -> Node_75;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_42;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_43 -> Node_74;
Node_44 -> Node_23;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_51;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_48 -> Node_52[style=dashed];
Node_49 -> Node_50;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_65;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_60;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_64;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_64;
Node_65 -> Node_66;
Node_67 -> Node_68;
Node_69 -> Node_45;
Node_70 -> Node_45;
Node_71 -> Node_45;
Node_72 -> Node_45;
Node_73 -> Node_45;
Node_74 -> Node_44;
Node_75 -> Node_44;
}

