digraph "CFG forokhttp3.Route.requiresTunnel()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Address) = (r2 I:okhttp3.Route) okhttp3.Route.address okhttp3.Address \l0x0002: IGET  (r0 I:javax.net.ssl.SSLSocketFactory) = (r0 I:okhttp3.Address) okhttp3.Address.sslSocketFactory javax.net.ssl.SSLSocketFactory \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.net.Proxy) = (r2 I:okhttp3.Route) okhttp3.Route.proxy java.net.Proxy \l0x0008: INVOKE  (r0 I:java.net.Proxy$Type) = (r0 I:java.net.Proxy) java.net.Proxy.type():java.net.Proxy$Type type: VIRTUAL \l0x000c: SGET  (r1 I:java.net.Proxy$Type) =  java.net.Proxy.Type.HTTP java.net.Proxy$Type \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.Route.requiresTunnel((r2 'this' I:okhttp3.Route A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

