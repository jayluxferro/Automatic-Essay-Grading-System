digraph "CFG forokhttp3.Cache.Entry.writeTo(Lokhttp3\/internal\/cache\/DiskLruCache$Editor;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r7 I:okio.Sink) = \l  (r7 I:okhttp3.internal.cache.DiskLruCache$Editor)\l  (r0 I:int)\l okhttp3.internal.cache.DiskLruCache.Editor.newSink(int):okio.Sink type: VIRTUAL \l0x0005: INVOKE  (r7 I:okio.BufferedSink) = (r7 I:okio.Sink) okio.Okio.buffer(okio.Sink):okio.BufferedSink type: STATIC \l0x0009: IGET  (r1 I:java.lang.String) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.url java.lang.String \l0x000b: INVOKE  (r1 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r1 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x0014: IGET  (r1 I:java.lang.String) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.requestMethod java.lang.String \l0x0016: INVOKE  (r1 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x001a: INVOKE  (r1 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x001d: IGET  (r1 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x001f: INVOKE  (r1 I:int) = (r1 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0023: CAST  (r3 I:long) = (long) (r1 I:int) \l0x0024: INVOKE  (r1 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r3 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x0028: INVOKE  (r1 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x002b: IGET  (r1 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x002d: INVOKE  (r1 I:int) = (r1 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0031: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|0x0032: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0054 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0034|0x0034: IGET  (r4 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x0036: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.Headers), (r3 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x003a: INVOKE  (r4 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r4 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x003e: CONST_STR  (r5 I:java.lang.String) =  \": \" \l0x0040: INVOKE  (r4 I:okio.BufferedSink) = (r4 I:okio.BufferedSink), (r5 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0044: IGET  (r5 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x0046: INVOKE  (r5 I:java.lang.String) = (r5 I:okhttp3.Headers), (r3 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x004a: INVOKE  (r4 I:okio.BufferedSink) = (r4 I:okio.BufferedSink), (r5 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x004e: INVOKE  (r4 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x0051: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0054|0x0054: NEW_INSTANCE  (r1 I:okhttp3.internal.http.StatusLine) =  okhttp3.internal.http.StatusLine \l0x0056: IGET  (r3 I:okhttp3.Protocol) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.protocol okhttp3.Protocol \l0x0058: IGET  (r4 I:int) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.code int \l0x005a: IGET  (r5 I:java.lang.String) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.message java.lang.String \l0x005c: INVOKE  \l  (r1 I:okhttp3.internal.http.StatusLine)\l  (r3 I:okhttp3.Protocol)\l  (r4 I:int)\l  (r5 I:java.lang.String)\l okhttp3.internal.http.StatusLine.\<init\>(okhttp3.Protocol, int, java.lang.String):void type: DIRECT \l0x005f: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.internal.http.StatusLine) okhttp3.internal.http.StatusLine.toString():java.lang.String type: VIRTUAL \l0x0063: INVOKE  (r1 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0067: INVOKE  (r1 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x006a: IGET  (r1 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x006c: INVOKE  (r1 I:int) = (r1 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0070: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x0072: CAST  (r3 I:long) = (long) (r1 I:int) \l0x0073: INVOKE  (r1 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r3 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x0077: INVOKE  (r1 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x007a: IGET  (r1 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x007c: INVOKE  (r1 I:int) = (r1 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0080|0x0080: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x00a2 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0082|0x0082: IGET  (r3 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x0084: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.Headers), (r0 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x0088: INVOKE  (r3 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r3 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x008c: CONST_STR  (r4 I:java.lang.String) =  \": \" \l0x008e: INVOKE  (r3 I:okio.BufferedSink) = (r3 I:okio.BufferedSink), (r4 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0092: IGET  (r4 I:okhttp3.Headers) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x0094: INVOKE  (r4 I:java.lang.String) = (r4 I:okhttp3.Headers), (r0 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x0098: INVOKE  (r3 I:okio.BufferedSink) = (r3 I:okio.BufferedSink), (r4 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x009c: INVOKE  (r3 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x009f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x00a2|0x00a2: SGET  (r0 I:java.lang.String) =  okhttp3.Cache.Entry.SENT_MILLIS java.lang.String \l0x00a4: INVOKE  (r0 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r0 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x00a8: CONST_STR  (r1 I:java.lang.String) =  \": \" \l0x00aa: INVOKE  (r0 I:okio.BufferedSink) = (r0 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x00ae: IGET  (r3 I:long) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.sentRequestMillis long \l0x00b0: INVOKE  (r0 I:okio.BufferedSink) = (r0 I:okio.BufferedSink), (r3 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x00b4: INVOKE  (r0 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x00b7: SGET  (r0 I:java.lang.String) =  okhttp3.Cache.Entry.RECEIVED_MILLIS java.lang.String \l0x00b9: INVOKE  (r0 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r0 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x00bd: CONST_STR  (r1 I:java.lang.String) =  \": \" \l0x00bf: INVOKE  (r0 I:okio.BufferedSink) = (r0 I:okio.BufferedSink), (r1 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x00c3: IGET  (r3 I:long) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.receivedResponseMillis long \l0x00c5: INVOKE  (r0 I:okio.BufferedSink) = (r0 I:okio.BufferedSink), (r3 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x00c9: INVOKE  (r0 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x00cc: INVOKE  (r0 I:boolean) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.isHttps():boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x00d0|0x00d0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0109 \l}"];
Node_8 [shape=record,label="{8\:\ 0x00d2|0x00d2: INVOKE  (r7 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x00d5: IGET  (r0 I:okhttp3.Handshake) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x00d7: INVOKE  (r0 I:okhttp3.CipherSuite) = (r0 I:okhttp3.Handshake) okhttp3.Handshake.cipherSuite():okhttp3.CipherSuite type: VIRTUAL \l0x00db: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.CipherSuite) okhttp3.CipherSuite.javaName():java.lang.String type: VIRTUAL \l0x00df: INVOKE  (r0 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r0 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x00e3: INVOKE  (r0 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l0x00e6: IGET  (r0 I:okhttp3.Handshake) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x00e8: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.Handshake) okhttp3.Handshake.peerCertificates():java.util.List type: VIRTUAL \l0x00ec: INVOKE  \l  (r6 I:okhttp3.Cache$Entry)\l  (r7 I:okio.BufferedSink)\l  (r0 I:java.util.List)\l okhttp3.Cache.Entry.writeCertList(okio.BufferedSink, java.util.List):void type: DIRECT \l0x00ef: IGET  (r0 I:okhttp3.Handshake) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x00f1: INVOKE  (r0 I:java.util.List) = (r0 I:okhttp3.Handshake) okhttp3.Handshake.localCertificates():java.util.List type: VIRTUAL \l0x00f5: INVOKE  \l  (r6 I:okhttp3.Cache$Entry)\l  (r7 I:okio.BufferedSink)\l  (r0 I:java.util.List)\l okhttp3.Cache.Entry.writeCertList(okio.BufferedSink, java.util.List):void type: DIRECT \l0x00f8: IGET  (r0 I:okhttp3.Handshake) = (r6 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x00fa: INVOKE  (r0 I:okhttp3.TlsVersion) = (r0 I:okhttp3.Handshake) okhttp3.Handshake.tlsVersion():okhttp3.TlsVersion type: VIRTUAL \l0x00fe: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.TlsVersion) okhttp3.TlsVersion.javaName():java.lang.String type: VIRTUAL \l0x0102: INVOKE  (r0 I:okio.BufferedSink) = (r7 I:okio.BufferedSink), (r0 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0106: INVOKE  (r0 I:okio.BufferedSink), (r2 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0109|0x0109: INVOKE  (r7 I:okio.BufferedSink) okio.BufferedSink.close():void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x010c|0x010c: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.Cache.Entry.writeTo((r6 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r7 I:okhttp3.internal.cache.DiskLruCache$Editor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

