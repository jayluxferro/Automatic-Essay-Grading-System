digraph "CFG forokhttp3.Cache.Entry.writeTo(Lokhttp3\/internal\/cache\/DiskLruCache$Editor;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\lokio.BufferedSink r7 = okio.Okio.buffer(r7.newSink(0))\lr7.writeUtf8(r6.url).writeByte(10)\lr7.writeUtf8(r6.requestMethod).writeByte(10)\lr7.writeDecimalLong((long) r6.varyHeaders.size()).writeByte(10)\lint r1 = r6.varyHeaders.size()\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|LOOP_START\lPHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v12 int) binds: [B:0:0x0000, B:2:0x0034] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0032\-\>B:2:0x0034\l|if (r3 \>= r1) goto L_0x0054\l}"];
Node_2 [shape=record,label="{2\:\ 0x0034|LOOP_END\lLOOP:0: B:1:0x0032\-\>B:2:0x0034\l|r7.writeUtf8(r6.varyHeaders.name(r3)).writeUtf8(\": \").writeUtf8(r6.varyHeaders.value(r3)).writeByte(10)\lint r3 = r3 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0054|r7.writeUtf8(new okhttp3.internal.http.StatusLine(r6.protocol, r6.code, r6.message).toString()).writeByte(10)\lr7.writeDecimalLong((long) (r6.responseHeaders.size() + 2)).writeByte(10)\lint r1 = r6.responseHeaders.size()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0080|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v23 int) binds: [B:3:0x0054, B:5:0x0082] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0080\-\>B:5:0x0082\l|if (r0 \>= r1) goto L_0x00a2\l}"];
Node_5 [shape=record,label="{5\:\ 0x0082|LOOP_END\lLOOP:1: B:4:0x0080\-\>B:5:0x0082\l|r7.writeUtf8(r6.responseHeaders.name(r0)).writeUtf8(\": \").writeUtf8(r6.responseHeaders.value(r0)).writeByte(10)\lint r0 = r0 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x00a2|r7.writeUtf8(SENT_MILLIS).writeUtf8(\": \").writeDecimalLong(r6.sentRequestMillis).writeByte(10)\lr7.writeUtf8(RECEIVED_MILLIS).writeUtf8(\": \").writeDecimalLong(r6.receivedResponseMillis).writeByte(10)\l}"];
Node_7 [shape=record,label="{7\:\ 0x00d0|if (isHttps() == false) goto L_0x0109\l}"];
Node_8 [shape=record,label="{8\:\ 0x00d2|r7.writeByte(10)\lr7.writeUtf8(r6.handshake.cipherSuite().javaName()).writeByte(10)\lwriteCertList(r7, r6.handshake.peerCertificates())\lwriteCertList(r7, r6.handshake.localCertificates())\lr7.writeUtf8(r6.handshake.tlsVersion().javaName()).writeByte(10)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0109|r7.close()\l}"];
Node_10 [shape=record,label="{10\:\ 0x010c|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x00a2|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void okhttp3.Cache.Entry.writeTo((r6v0 'this' okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r7v0 okhttp3.internal.cache.DiskLruCache$Editor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_3;
Node_12 -> Node_6;
}

