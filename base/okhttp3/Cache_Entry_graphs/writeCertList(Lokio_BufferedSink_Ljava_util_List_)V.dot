digraph "CFG forokhttp3.Cache.Entry.writeCertList(Lokio\/BufferedSink;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ CertificateEncodingException \-\> 0x0032 \}\lSplitter:B:0:0x0000\l|r5.writeDecimalLong((long) r6.size()).writeByte(10)     \/\/ Catch:\{ CertificateEncodingException \-\> 0x0032 \}\lr0 = 0     \/\/ Catch:\{ CertificateEncodingException \-\> 0x0032 \}\lint r2 = r6.size()     \/\/ Catch:\{ CertificateEncodingException \-\> 0x0032 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|LOOP_START\lCatch:\{ CertificateEncodingException \-\> 0x0032 \}\lPHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v5 int) binds: [B:1:?, B:4:0x002e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0013\-\>B:4:0x002e\l|if (r0 \>= r2) goto L_0x0031     \/\/ Catch:\{ CertificateEncodingException \-\> 0x0032 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|Catch:\{ CertificateEncodingException \-\> 0x0032 \}\l|r5.writeUtf8(okio.ByteString.m183of(r6.get(r0).getEncoded()).base64()).writeByte(10)     \/\/ Catch:\{ CertificateEncodingException \-\> 0x0032 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|LOOP_END\lLOOP:0: B:2:0x0013\-\>B:4:0x002e\l|int r0 = r0 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|ExcHandler: CertificateEncodingException (r5v1 'e' java.security.cert.CertificateEncodingException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.security.cert.CertificateEncodingException r5 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033}"];
Node_8 [shape=record,label="{8\:\ 0x003c|throw new java.io.IOException(r5.getMessage())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okhttp3.Cache.Entry.writeCertList((r4v0 'this' okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r5v0 okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokio\/BufferedSink;, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_5;
}

