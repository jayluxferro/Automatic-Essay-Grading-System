digraph "CFG forokhttp3.Cache.Entry.matches(Lokhttp3\/Request;Lokhttp3\/Response;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.url java.lang.String \l0x0002: INVOKE  (r1 I:okhttp3.HttpUrl) = (r3 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x0006: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.HttpUrl) okhttp3.HttpUrl.toString():java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r0 I:java.lang.String) = (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.requestMethod java.lang.String \l0x0012: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r0 I:okhttp3.Headers) = (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x001e: INVOKE  (r3 I:boolean) = \l  (r4 I:okhttp3.Response)\l  (r0 I:okhttp3.Headers)\l  (r3 I:okhttp3.Request)\l okhttp3.internal.http.HttpHeaders.varyMatches(okhttp3.Response, okhttp3.Headers, okhttp3.Request):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.Cache.Entry.matches((r2 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

