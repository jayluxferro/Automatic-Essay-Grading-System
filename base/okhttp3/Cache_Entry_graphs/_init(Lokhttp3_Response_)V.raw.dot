digraph "CFG forokhttp3.Cache.Entry.\<init\>(Lokhttp3\/Response;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: INVOKE  (r0 I:okhttp3.Request) = (r3 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0007: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:okhttp3.Request) okhttp3.Request.url():okhttp3.HttpUrl type: VIRTUAL \l0x000b: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.HttpUrl) okhttp3.HttpUrl.toString():java.lang.String type: VIRTUAL \l0x000f: IPUT  (r0 I:java.lang.String), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.url java.lang.String \l0x0011: INVOKE  (r0 I:okhttp3.Headers) = (r3 I:okhttp3.Response) okhttp3.internal.http.HttpHeaders.varyHeaders(okhttp3.Response):okhttp3.Headers type: STATIC \l0x0015: IPUT  (r0 I:okhttp3.Headers), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x0017: INVOKE  (r0 I:okhttp3.Request) = (r3 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x001b: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x001f: IPUT  (r0 I:java.lang.String), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.requestMethod java.lang.String \l0x0021: INVOKE  (r0 I:okhttp3.Protocol) = (r3 I:okhttp3.Response) okhttp3.Response.protocol():okhttp3.Protocol type: VIRTUAL \l0x0025: IPUT  (r0 I:okhttp3.Protocol), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.protocol okhttp3.Protocol \l0x0027: INVOKE  (r0 I:int) = (r3 I:okhttp3.Response) okhttp3.Response.code():int type: VIRTUAL \l0x002b: IPUT  (r0 I:int), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.code int \l0x002d: INVOKE  (r0 I:java.lang.String) = (r3 I:okhttp3.Response) okhttp3.Response.message():java.lang.String type: VIRTUAL \l0x0031: IPUT  (r0 I:java.lang.String), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.message java.lang.String \l0x0033: INVOKE  (r0 I:okhttp3.Headers) = (r3 I:okhttp3.Response) okhttp3.Response.headers():okhttp3.Headers type: VIRTUAL \l0x0037: IPUT  (r0 I:okhttp3.Headers), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x0039: INVOKE  (r0 I:okhttp3.Handshake) = (r3 I:okhttp3.Response) okhttp3.Response.handshake():okhttp3.Handshake type: VIRTUAL \l0x003d: IPUT  (r0 I:okhttp3.Handshake), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x003f: INVOKE  (r0 I:long) = (r3 I:okhttp3.Response) okhttp3.Response.sentRequestAtMillis():long type: VIRTUAL \l0x0043: IPUT  (r0 I:long), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.sentRequestMillis long \l0x0045: INVOKE  (r0 I:long) = (r3 I:okhttp3.Response) okhttp3.Response.receivedResponseAtMillis():long type: VIRTUAL \l0x0049: IPUT  (r0 I:long), (r2 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.receivedResponseMillis long \l}"];
Node_1 [shape=record,label="{1\:\ 0x004b|0x004b: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.Cache.Entry.\<init\>((r2 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

