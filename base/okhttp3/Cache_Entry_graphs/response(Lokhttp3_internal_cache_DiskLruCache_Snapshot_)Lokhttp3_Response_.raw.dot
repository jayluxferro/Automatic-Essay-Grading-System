digraph "CFG forokhttp3.Cache.Entry.response(Lokhttp3\/internal\/cache\/DiskLruCache$Snapshot;)Lokhttp3\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.Headers) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"Content\-Type\" \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:okhttp3.Headers), (r1 I:java.lang.String) okhttp3.Headers.get(java.lang.String):java.lang.String type: VIRTUAL \l0x0008: IGET  (r1 I:okhttp3.Headers) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x000a: CONST_STR  (r2 I:java.lang.String) =  \"Content\-Length\" \l0x000c: INVOKE  (r1 I:java.lang.String) = (r1 I:okhttp3.Headers), (r2 I:java.lang.String) okhttp3.Headers.get(java.lang.String):java.lang.String type: VIRTUAL \l0x0010: NEW_INSTANCE  (r2 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x0012: INVOKE  (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x0015: IGET  (r3 I:java.lang.String) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.url java.lang.String \l0x0017: INVOKE  (r2 I:okhttp3.Request$Builder) = (r2 I:okhttp3.Request$Builder), (r3 I:java.lang.String) okhttp3.Request.Builder.url(java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x001b: IGET  (r3 I:java.lang.String) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.requestMethod java.lang.String \l0x001d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: INVOKE  (r2 I:okhttp3.Request$Builder) = \l  (r2 I:okhttp3.Request$Builder)\l  (r3 I:java.lang.String)\l  (r4 I:okhttp3.RequestBody)\l okhttp3.Request.Builder.method(java.lang.String, okhttp3.RequestBody):okhttp3.Request$Builder type: VIRTUAL \l0x0022: IGET  (r3 I:okhttp3.Headers) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.varyHeaders okhttp3.Headers \l0x0024: INVOKE  (r2 I:okhttp3.Request$Builder) = (r2 I:okhttp3.Request$Builder), (r3 I:okhttp3.Headers) okhttp3.Request.Builder.headers(okhttp3.Headers):okhttp3.Request$Builder type: VIRTUAL \l0x0028: INVOKE  (r2 I:okhttp3.Request) = (r2 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x002c: NEW_INSTANCE  (r3 I:okhttp3.Response$Builder) =  okhttp3.Response$Builder \l0x002e: INVOKE  (r3 I:okhttp3.Response$Builder) okhttp3.Response.Builder.\<init\>():void type: DIRECT \l0x0031: INVOKE  (r2 I:okhttp3.Response$Builder) = (r3 I:okhttp3.Response$Builder), (r2 I:okhttp3.Request) okhttp3.Response.Builder.request(okhttp3.Request):okhttp3.Response$Builder type: VIRTUAL \l0x0035: IGET  (r3 I:okhttp3.Protocol) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.protocol okhttp3.Protocol \l0x0037: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Protocol) okhttp3.Response.Builder.protocol(okhttp3.Protocol):okhttp3.Response$Builder type: VIRTUAL \l0x003b: IGET  (r3 I:int) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.code int \l0x003d: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:int) okhttp3.Response.Builder.code(int):okhttp3.Response$Builder type: VIRTUAL \l0x0041: IGET  (r3 I:java.lang.String) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.message java.lang.String \l0x0043: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:java.lang.String) okhttp3.Response.Builder.message(java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l0x0047: IGET  (r3 I:okhttp3.Headers) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.responseHeaders okhttp3.Headers \l0x0049: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Headers) okhttp3.Response.Builder.headers(okhttp3.Headers):okhttp3.Response$Builder type: VIRTUAL \l0x004d: NEW_INSTANCE  (r3 I:okhttp3.Cache$CacheResponseBody) =  okhttp3.Cache$CacheResponseBody \l0x004f: INVOKE  \l  (r3 I:okhttp3.Cache$CacheResponseBody)\l  (r6 I:okhttp3.internal.cache.DiskLruCache$Snapshot)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l okhttp3.Cache.CacheResponseBody.\<init\>(okhttp3.internal.cache.DiskLruCache$Snapshot, java.lang.String, java.lang.String):void type: DIRECT \l0x0052: INVOKE  (r6 I:okhttp3.Response$Builder) = \l  (r2 I:okhttp3.Response$Builder)\l  (r3 I:okhttp3.ResponseBody)\l okhttp3.Response.Builder.body(okhttp3.ResponseBody):okhttp3.Response$Builder type: VIRTUAL \l0x0056: IGET  (r0 I:okhttp3.Handshake) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.handshake okhttp3.Handshake \l0x0058: INVOKE  (r6 I:okhttp3.Response$Builder) = (r6 I:okhttp3.Response$Builder), (r0 I:okhttp3.Handshake) okhttp3.Response.Builder.handshake(okhttp3.Handshake):okhttp3.Response$Builder type: VIRTUAL \l0x005c: IGET  (r0 I:long) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.sentRequestMillis long \l0x005e: INVOKE  (r6 I:okhttp3.Response$Builder) = (r6 I:okhttp3.Response$Builder), (r0 I:long) okhttp3.Response.Builder.sentRequestAtMillis(long):okhttp3.Response$Builder type: VIRTUAL \l0x0062: IGET  (r0 I:long) = (r5 I:okhttp3.Cache$Entry) okhttp3.Cache.Entry.receivedResponseMillis long \l0x0064: INVOKE  (r6 I:okhttp3.Response$Builder) = (r6 I:okhttp3.Response$Builder), (r0 I:long) okhttp3.Response.Builder.receivedResponseAtMillis(long):okhttp3.Response$Builder type: VIRTUAL \l0x0068: INVOKE  (r6 I:okhttp3.Response) = (r6 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x006c|0x006c: RETURN  (r6 I:okhttp3.Response) \l}"];
MethodNode[shape=record,label="{public okhttp3.Response okhttp3.Cache.Entry.response((r5 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r6 I:okhttp3.internal.cache.DiskLruCache$Snapshot A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

