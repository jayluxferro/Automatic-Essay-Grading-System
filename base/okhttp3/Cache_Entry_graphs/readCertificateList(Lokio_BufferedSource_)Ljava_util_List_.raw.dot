digraph "CFG forokhttp3.Cache.Entry.readCertificateList(Lokio\/BufferedSource;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r7 I:okio.BufferedSource) okhttp3.Cache.readInt(okio.BufferedSource):int type: STATIC \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r7 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r7 I:java.util.List\<java.security.cert.Certificate\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST_STR  (r1 I:java.lang.String) =  \"X.509\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|SYNTHETIC\lSplitter:B:5:0x000e\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000e\l|0x000e: INVOKE  (r1 I:java.security.cert.CertificateFactory) = (r1 I:java.lang.String) java.security.cert.CertificateFactory.getInstance(java.lang.String):java.security.cert.CertificateFactory type: STATIC A[Catch:\{ CertificateException \-\> 0x0039 \}, TRY_ENTER]\l0x0012: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0014: INVOKE  (r2 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ CertificateException \-\> 0x0039 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0038 A[Catch:\{ CertificateException \-\> 0x0039 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r4 I:java.lang.String) = (r7 I:okio.BufferedSource) okio.BufferedSource.readUtf8LineStrict():java.lang.String type: INTERFACE A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x001e: NEW_INSTANCE  (r5 I:okio.Buffer) =  okio.Buffer A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0020: INVOKE  (r5 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0023: INVOKE  (r4 I:okio.ByteString) = (r4 I:java.lang.String) okio.ByteString.decodeBase64(java.lang.String):okio.ByteString type: STATIC A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0027: INVOKE  (r5 I:okio.Buffer), (r4 I:okio.ByteString) okio.Buffer.write(okio.ByteString):okio.Buffer type: VIRTUAL A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x002a: INVOKE  (r4 I:java.io.InputStream) = (r5 I:okio.Buffer) okio.Buffer.inputStream():java.io.InputStream type: VIRTUAL A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x002e: INVOKE  (r4 I:java.security.cert.Certificate) = \l  (r1 I:java.security.cert.CertificateFactory)\l  (r4 I:java.io.InputStream)\l java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream):java.security.cert.Certificate type: VIRTUAL A[Catch:\{ CertificateException \-\> 0x0039 \}]\l0x0032: INVOKE  (r2 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ CertificateException \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: RETURN  (r2 I:java.util.List\<java.security.cert.Certificate\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|ExcHandler: CertificateException null\lSplitter:B:5:0x000e\l|0x0039: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x003c: INVOKE  (r7 I:java.lang.String) = (r7 I:java.security.cert.CertificateException) java.security.cert.CertificateException.getMessage():java.lang.String type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.io.IOException), (r7 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.util.List\<java.security.cert.Certificate\> okhttp3.Cache.Entry.readCertificateList((r6 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r7 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokio\/BufferedSource;, ), Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_7;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

