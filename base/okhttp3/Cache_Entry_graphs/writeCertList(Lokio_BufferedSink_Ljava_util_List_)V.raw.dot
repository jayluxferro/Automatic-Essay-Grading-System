digraph "CFG forokhttp3.Cache.Entry.writeCertList(Lokio\/BufferedSink;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}, TRY_ENTER]\l0x0004: CAST  (r0 I:long) = (long) (r0 I:int) A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x0005: INVOKE  (r0 I:okio.BufferedSink) = (r5 I:okio.BufferedSink), (r0 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x000b: INVOKE  (r0 I:okio.BufferedSink), (r1 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x000f: INVOKE  (r2 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:5:0x0031 A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r3 I:java.lang.Object) = (r6 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x0019: CHECK_CAST  (r3 I:java.security.cert.Certificate) = (java.security.cert.Certificate) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x001b: INVOKE  (r3 I:byte[]) = (r3 I:java.security.cert.Certificate) java.security.cert.Certificate.getEncoded():byte[] type: VIRTUAL A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x001f: INVOKE  (r3 I:okio.ByteString) = (r3 I:byte[]) okio.ByteString.of(byte[]):okio.ByteString type: STATIC A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x0023: INVOKE  (r3 I:java.lang.String) = (r3 I:okio.ByteString) okio.ByteString.base64():java.lang.String type: VIRTUAL A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x0027: INVOKE  (r3 I:okio.BufferedSink) = (r5 I:okio.BufferedSink), (r3 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}]\l0x002b: INVOKE  (r3 I:okio.BufferedSink), (r1 I:int) okio.BufferedSink.writeByte(int):okio.BufferedSink type: INTERFACE A[Catch:\{ CertificateEncodingException \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|ExcHandler: CertificateEncodingException null\lSplitter:B:0:0x0000\l|0x0032: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: NEW_INSTANCE  (r6 I:java.io.IOException) =  java.io.IOException \l0x0035: INVOKE  (r5 I:java.lang.String) = (r5 I:java.security.cert.CertificateEncodingException) java.security.cert.CertificateEncodingException.getMessage():java.lang.String type: VIRTUAL \l0x0039: INVOKE  (r6 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.Cache.Entry.writeCertList((r4 'this' I:okhttp3.Cache$Entry A[IMMUTABLE_TYPE, THIS]), (r5 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.List\<java.security.cert.Certificate\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lokio\/BufferedSink;, Ljava\/util\/List\<, Ljava\/security\/cert\/Certificate;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

