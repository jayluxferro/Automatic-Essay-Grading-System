digraph "CFG forokhttp3.ConnectionSpec.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) okhttp3.ConnectionSpec \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r5 I:okhttp3.ConnectionSpec) = (okhttp3.ConnectionSpec) (r5 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r2 I:boolean) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tls boolean \l0x000e: IGET  (r3 I:boolean) = (r5 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tls boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r2 I:boolean) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tls boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IGET  (r2 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x0019: IGET  (r3 I:java.lang.String[]) = (r5 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x001b: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object[]), (r3 I:java.lang.Object[]) java.util.Arrays.equals(java.lang.Object[], java.lang.Object[]):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0022 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: IGET  (r2 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x0024: IGET  (r3 I:java.lang.String[]) = (r5 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x0026: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object[]), (r3 I:java.lang.Object[]) java.util.Arrays.equals(java.lang.Object[], java.lang.Object[]):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002d \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: RETURN  (r1 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: IGET  (r2 I:boolean) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.supportsTlsExtensions boolean \l0x002f: IGET  (r5 I:boolean) = (r5 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.supportsTlsExtensions boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: RETURN  (r1 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.ConnectionSpec.equals((r4 'this' I:okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
}

