digraph "CFG forokhttp3.ConnectionSpec.supportedSpec(Ljavax\/net\/ssl\/SSLSocket;Z)Lokhttp3\/ConnectionSpec;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:java.util.Comparator\<java.lang.String\>) =  okhttp3.CipherSuite.ORDER_BY_NAME java.util.Comparator \l0x0006: INVOKE  (r1 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledCipherSuites():java.lang.String[] type: VIRTUAL \l0x000a: IGET  (r2 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x000c: INVOKE  (r0 I:java.lang.String[]) = \l  (r0 I:java.util.Comparator)\l  (r1 I:java.lang.String[])\l  (r2 I:java.lang.String[])\l okhttp3.internal.Util.intersect(java.util.Comparator, java.lang.String[], java.lang.String[]):java.lang.String[] type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r0 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledCipherSuites():java.lang.String[] type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IGET  (r1 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: SGET  (r1 I:java.util.Comparator\<java.lang.String\>) =  okhttp3.internal.Util.NATURAL_ORDER java.util.Comparator \l0x001b: INVOKE  (r2 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledProtocols():java.lang.String[] type: VIRTUAL \l0x001f: IGET  (r3 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x0021: INVOKE  (r1 I:java.lang.String[]) = \l  (r1 I:java.util.Comparator)\l  (r2 I:java.lang.String[])\l  (r3 I:java.lang.String[])\l okhttp3.internal.Util.intersect(java.util.Comparator, java.lang.String[], java.lang.String[]):java.lang.String[] type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r1 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledProtocols():java.lang.String[] type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  (r5 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getSupportedCipherSuites():java.lang.String[] type: VIRTUAL \l0x002e: SGET  (r2 I:java.util.Comparator\<java.lang.String\>) =  okhttp3.CipherSuite.ORDER_BY_NAME java.util.Comparator \l0x0030: CONST_STR  (r3 I:java.lang.String) =  \"TLS_FALLBACK_SCSV\" \l0x0032: INVOKE  (r2 I:int) = \l  (r2 I:java.util.Comparator)\l  (r5 I:java.lang.String[])\l  (r3 I:java.lang.String)\l okhttp3.internal.Util.indexOf(java.util.Comparator, java.lang.String[], java.lang.String):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x003d: INVOKE  (r0 I:java.lang.String[]) = (r0 I:java.lang.String[]), (r5 I:java.lang.String) okhttp3.internal.Util.concat(java.lang.String[], java.lang.String):java.lang.String[] type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: NEW_INSTANCE  (r5 I:okhttp3.ConnectionSpec$Builder) =  okhttp3.ConnectionSpec$Builder \l0x0043: INVOKE  \l  (r5 I:okhttp3.ConnectionSpec$Builder)\l  (r4 I:okhttp3.ConnectionSpec)\l okhttp3.ConnectionSpec.Builder.\<init\>(okhttp3.ConnectionSpec):void type: DIRECT \l0x0046: INVOKE  (r5 I:okhttp3.ConnectionSpec$Builder) = \l  (r5 I:okhttp3.ConnectionSpec$Builder)\l  (r0 I:java.lang.String[])\l okhttp3.ConnectionSpec.Builder.cipherSuites(java.lang.String[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x004a: INVOKE  (r5 I:okhttp3.ConnectionSpec$Builder) = \l  (r5 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:java.lang.String[])\l okhttp3.ConnectionSpec.Builder.tlsVersions(java.lang.String[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x004e: INVOKE  (r5 I:okhttp3.ConnectionSpec) = (r5 I:okhttp3.ConnectionSpec$Builder) okhttp3.ConnectionSpec.Builder.build():okhttp3.ConnectionSpec type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: RETURN  (r5 I:okhttp3.ConnectionSpec) \l}"];
MethodNode[shape=record,label="{private okhttp3.ConnectionSpec okhttp3.ConnectionSpec.supportedSpec((r4 'this' I:okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS]), (r5 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

