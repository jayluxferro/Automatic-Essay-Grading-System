digraph "CFG forokhttp3.ConnectionSpec.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r1 I:okhttp3.CipherSuite[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okhttp3.CipherSuite[] \l0x0003: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 okhttp3.CipherSuite \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0008: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 okhttp3.CipherSuite \l0x000a: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x000d: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 okhttp3.CipherSuite \l0x000f: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0010: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0012: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 okhttp3.CipherSuite \l0x0014: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0015: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0017: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 okhttp3.CipherSuite \l0x0019: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x001a: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x001c: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 okhttp3.CipherSuite \l0x001e: CONST  (r8 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x001f: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0021: SPUT  (r1 I:okhttp3.CipherSuite[]) okhttp3.ConnectionSpec.RESTRICTED_CIPHER_SUITES okhttp3.CipherSuite[] \l0x0023: CONST  (r1 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0025: NEW_ARRAY  (r1 I:okhttp3.CipherSuite[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: okhttp3.CipherSuite[] \l0x0027: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 okhttp3.CipherSuite \l0x0029: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x002b: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 okhttp3.CipherSuite \l0x002d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x002f: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 okhttp3.CipherSuite \l0x0031: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0033: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 okhttp3.CipherSuite \l0x0035: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0037: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 okhttp3.CipherSuite \l0x0039: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x003b: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 okhttp3.CipherSuite \l0x003d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x003f: SGET  (r2 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA okhttp3.CipherSuite \l0x0041: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0043: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA okhttp3.CipherSuite \l0x0045: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0046: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0048: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256 okhttp3.CipherSuite \l0x004a: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x004c: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x004e: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384 okhttp3.CipherSuite \l0x0050: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0052: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0054: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA okhttp3.CipherSuite \l0x0056: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0058: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x005a: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA okhttp3.CipherSuite \l0x005c: CONST  (r2 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x005e: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0060: SGET  (r0 I:okhttp3.CipherSuite) =  okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA okhttp3.CipherSuite \l0x0062: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0064: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0066: SPUT  (r1 I:okhttp3.CipherSuite[]) okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES okhttp3.CipherSuite[] \l0x0068: NEW_INSTANCE  (r0 I:okhttp3.ConnectionSpec$Builder) =  okhttp3.ConnectionSpec$Builder \l0x006a: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder), (r4 I:boolean) okhttp3.ConnectionSpec.Builder.\<init\>(boolean):void type: DIRECT \l0x006d: SGET  (r1 I:okhttp3.CipherSuite[]) =  okhttp3.ConnectionSpec.RESTRICTED_CIPHER_SUITES okhttp3.CipherSuite[] \l0x006f: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.CipherSuite[])\l okhttp3.ConnectionSpec.Builder.cipherSuites(okhttp3.CipherSuite[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x0073: NEW_ARRAY  (r1 I:okhttp3.TlsVersion[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: okhttp3.TlsVersion[] \l0x0075: SGET  (r2 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_2 okhttp3.TlsVersion \l0x0077: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0079: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.TlsVersion[])\l okhttp3.ConnectionSpec.Builder.tlsVersions(okhttp3.TlsVersion[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x007d: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = (r0 I:okhttp3.ConnectionSpec$Builder), (r4 I:boolean) okhttp3.ConnectionSpec.Builder.supportsTlsExtensions(boolean):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x0081: INVOKE  (r0 I:okhttp3.ConnectionSpec) = (r0 I:okhttp3.ConnectionSpec$Builder) okhttp3.ConnectionSpec.Builder.build():okhttp3.ConnectionSpec type: VIRTUAL \l0x0085: SPUT  (r0 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.RESTRICTED_TLS okhttp3.ConnectionSpec \l0x0087: NEW_INSTANCE  (r0 I:okhttp3.ConnectionSpec$Builder) =  okhttp3.ConnectionSpec$Builder \l0x0089: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder), (r4 I:boolean) okhttp3.ConnectionSpec.Builder.\<init\>(boolean):void type: DIRECT \l0x008c: SGET  (r1 I:okhttp3.CipherSuite[]) =  okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES okhttp3.CipherSuite[] \l0x008e: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.CipherSuite[])\l okhttp3.ConnectionSpec.Builder.cipherSuites(okhttp3.CipherSuite[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x0092: NEW_ARRAY  (r1 I:okhttp3.TlsVersion[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: okhttp3.TlsVersion[] \l0x0094: SGET  (r2 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_2 okhttp3.TlsVersion \l0x0096: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0098: SGET  (r2 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_1 okhttp3.TlsVersion \l0x009a: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x009c: SGET  (r2 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_0 okhttp3.TlsVersion \l0x009e: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x00a0: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.TlsVersion[])\l okhttp3.ConnectionSpec.Builder.tlsVersions(okhttp3.TlsVersion[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x00a4: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = (r0 I:okhttp3.ConnectionSpec$Builder), (r4 I:boolean) okhttp3.ConnectionSpec.Builder.supportsTlsExtensions(boolean):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x00a8: INVOKE  (r0 I:okhttp3.ConnectionSpec) = (r0 I:okhttp3.ConnectionSpec$Builder) okhttp3.ConnectionSpec.Builder.build():okhttp3.ConnectionSpec type: VIRTUAL \l0x00ac: SPUT  (r0 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.MODERN_TLS okhttp3.ConnectionSpec \l0x00ae: NEW_INSTANCE  (r0 I:okhttp3.ConnectionSpec$Builder) =  okhttp3.ConnectionSpec$Builder \l0x00b0: SGET  (r1 I:okhttp3.ConnectionSpec) =  okhttp3.ConnectionSpec.MODERN_TLS okhttp3.ConnectionSpec \l0x00b2: INVOKE  \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.ConnectionSpec)\l okhttp3.ConnectionSpec.Builder.\<init\>(okhttp3.ConnectionSpec):void type: DIRECT \l0x00b5: NEW_ARRAY  (r1 I:okhttp3.TlsVersion[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: okhttp3.TlsVersion[] \l0x00b7: SGET  (r2 I:okhttp3.TlsVersion) =  okhttp3.TlsVersion.TLS_1_0 okhttp3.TlsVersion \l0x00b9: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x00bb: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = \l  (r0 I:okhttp3.ConnectionSpec$Builder)\l  (r1 I:okhttp3.TlsVersion[])\l okhttp3.ConnectionSpec.Builder.tlsVersions(okhttp3.TlsVersion[]):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x00bf: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder) = (r0 I:okhttp3.ConnectionSpec$Builder), (r4 I:boolean) okhttp3.ConnectionSpec.Builder.supportsTlsExtensions(boolean):okhttp3.ConnectionSpec$Builder type: VIRTUAL \l0x00c3: INVOKE  (r0 I:okhttp3.ConnectionSpec) = (r0 I:okhttp3.ConnectionSpec$Builder) okhttp3.ConnectionSpec.Builder.build():okhttp3.ConnectionSpec type: VIRTUAL \l0x00c7: SPUT  (r0 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.COMPATIBLE_TLS okhttp3.ConnectionSpec \l0x00c9: NEW_INSTANCE  (r0 I:okhttp3.ConnectionSpec$Builder) =  okhttp3.ConnectionSpec$Builder \l0x00cb: INVOKE  (r0 I:okhttp3.ConnectionSpec$Builder), (r3 I:boolean) okhttp3.ConnectionSpec.Builder.\<init\>(boolean):void type: DIRECT \l0x00ce: INVOKE  (r0 I:okhttp3.ConnectionSpec) = (r0 I:okhttp3.ConnectionSpec$Builder) okhttp3.ConnectionSpec.Builder.build():okhttp3.ConnectionSpec type: VIRTUAL \l0x00d2: SPUT  (r0 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.CLEARTEXT okhttp3.ConnectionSpec \l}"];
Node_1 [shape=record,label="{1\:\ 0x00d4|0x00d4: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.ConnectionSpec.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

