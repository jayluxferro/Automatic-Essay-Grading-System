digraph "CFG forokhttp3.ConnectionSpec.apply(Ljavax\/net\/ssl\/SSLSocket;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.ConnectionSpec r3 = supportedSpec(r2, r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.tlsVersions == null) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r2.setEnabledProtocols(r3.tlsVersions)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r3.cipherSuites == null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|r2.setEnabledCipherSuites(r3.cipherSuites)\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void okhttp3.ConnectionSpec.apply((r1v0 'this' okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS]), (r2v0 javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
}

