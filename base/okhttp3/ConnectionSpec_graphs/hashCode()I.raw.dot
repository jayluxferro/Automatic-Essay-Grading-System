digraph "CFG forokhttp3.ConnectionSpec.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tls boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (527(0x20f, float:7.38E\-43) ?[int, float, short, byte, char])\l \l0x0006: IGET  (r1 I:java.lang.String[]) = (r2 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x0008: INVOKE  (r1 I:int) = (r1 I:java.lang.Object[]) java.util.Arrays.hashCode(java.lang.Object[]):int type: STATIC \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000d: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x000f: IGET  (r1 I:java.lang.String[]) = (r2 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x0011: INVOKE  (r1 I:int) = (r1 I:java.lang.Object[]) java.util.Arrays.hashCode(java.lang.Object[]):int type: STATIC \l0x0015: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0016: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0018: IGET  (r1 I:boolean) = (r2 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.supportsTlsExtensions boolean \l0x001a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l0x001c: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CONST  (r0 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int okhttp3.ConnectionSpec.hashCode((r2 'this' I:okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

