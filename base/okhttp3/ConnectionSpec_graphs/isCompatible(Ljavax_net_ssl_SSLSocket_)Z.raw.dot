digraph "CFG forokhttp3.ConnectionSpec.isCompatible(Ljavax\/net\/ssl\/SSLSocket;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tls boolean \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r0 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: SGET  (r0 I:java.util.Comparator\<java.lang.String\>) =  okhttp3.internal.Util.NATURAL_ORDER java.util.Comparator \l0x000c: IGET  (r2 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x000e: INVOKE  (r3 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledProtocols():java.lang.String[] type: VIRTUAL \l0x0012: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.Comparator)\l  (r2 I:java.lang.String[])\l  (r3 I:java.lang.String[])\l okhttp3.internal.Util.nonEmptyIntersection(java.util.Comparator, java.lang.String[], java.lang.String[]):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r0 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: SGET  (r0 I:java.util.Comparator\<java.lang.String\>) =  okhttp3.CipherSuite.ORDER_BY_NAME java.util.Comparator \l0x001f: IGET  (r2 I:java.lang.String[]) = (r4 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x0021: INVOKE  (r5 I:java.lang.String[]) = (r5 I:javax.net.ssl.SSLSocket) javax.net.ssl.SSLSocket.getEnabledCipherSuites():java.lang.String[] type: VIRTUAL \l0x0025: INVOKE  (r5 I:boolean) = \l  (r0 I:java.util.Comparator)\l  (r2 I:java.lang.String[])\l  (r5 I:java.lang.String[])\l okhttp3.internal.Util.nonEmptyIntersection(java.util.Comparator, java.lang.String[], java.lang.String[]):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.ConnectionSpec.isCompatible((r4 'this' I:okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS]), (r5 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
}

