digraph "CFG forokhttp3.ConnectionSpec.apply(Ljavax\/net\/ssl\/SSLSocket;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:okhttp3.ConnectionSpec) = \l  (r1 I:okhttp3.ConnectionSpec)\l  (r2 I:javax.net.ssl.SSLSocket)\l  (r3 I:boolean)\l okhttp3.ConnectionSpec.supportedSpec(javax.net.ssl.SSLSocket, boolean):okhttp3.ConnectionSpec type: DIRECT \l0x0004: IGET  (r0 I:java.lang.String[]) = (r3 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.lang.String[]) = (r3 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.tlsVersions java.lang.String[] \l0x000a: INVOKE  (r2 I:javax.net.ssl.SSLSocket), (r0 I:java.lang.String[]) javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String[]):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r0 I:java.lang.String[]) = (r3 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r3 I:java.lang.String[]) = (r3 I:okhttp3.ConnectionSpec) okhttp3.ConnectionSpec.cipherSuites java.lang.String[] \l0x0013: INVOKE  (r2 I:javax.net.ssl.SSLSocket), (r3 I:java.lang.String[]) javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String[]):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.ConnectionSpec.apply((r1 'this' I:okhttp3.ConnectionSpec A[IMMUTABLE_TYPE, THIS]), (r2 I:javax.net.ssl.SSLSocket A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

