digraph "CFG forokhttp3.CacheControl.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.CacheControl$Builder) =  okhttp3.CacheControl$Builder \l0x0002: INVOKE  (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r0 I:okhttp3.CacheControl$Builder) = (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.noCache():okhttp3.CacheControl$Builder type: VIRTUAL \l0x0009: INVOKE  (r0 I:okhttp3.CacheControl) = (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.build():okhttp3.CacheControl type: VIRTUAL \l0x000d: SPUT  (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.FORCE_NETWORK okhttp3.CacheControl \l0x000f: NEW_INSTANCE  (r0 I:okhttp3.CacheControl$Builder) =  okhttp3.CacheControl$Builder \l0x0011: INVOKE  (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.\<init\>():void type: DIRECT \l0x0014: INVOKE  (r0 I:okhttp3.CacheControl$Builder) = (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.onlyIfCached():okhttp3.CacheControl$Builder type: VIRTUAL \l0x0018: SGET  (r1 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.SECONDS java.util.concurrent.TimeUnit \l0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x001d: INVOKE  (r0 I:okhttp3.CacheControl$Builder) = \l  (r0 I:okhttp3.CacheControl$Builder)\l  (r2 I:int)\l  (r1 I:java.util.concurrent.TimeUnit)\l okhttp3.CacheControl.Builder.maxStale(int, java.util.concurrent.TimeUnit):okhttp3.CacheControl$Builder type: VIRTUAL \l0x0021: INVOKE  (r0 I:okhttp3.CacheControl) = (r0 I:okhttp3.CacheControl$Builder) okhttp3.CacheControl.Builder.build():okhttp3.CacheControl type: VIRTUAL \l0x0025: SPUT  (r0 I:okhttp3.CacheControl) okhttp3.CacheControl.FORCE_CACHE okhttp3.CacheControl \l}"];
Node_1 [shape=record,label="{1\:\ 0x0027|0x0027: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.CacheControl.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

