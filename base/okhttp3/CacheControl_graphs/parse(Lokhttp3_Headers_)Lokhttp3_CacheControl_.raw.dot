digraph "CFG forokhttp3.CacheControl.parse(Lokhttp3\/Headers;)Lokhttp3\/CacheControl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r1 I:int) = (r23 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0006: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000c: CONST  (r13 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000d: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r17 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0013: CONST  (r18 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0015: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: IF  (r6 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:65:0x014c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|0x001d: INVOKE  (r9 I:java.lang.String) = (r0 I:okhttp3.Headers), (r6 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r2 I:java.lang.String) = (r0 I:okhttp3.Headers), (r6 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x0025: CONST_STR  (r4 I:java.lang.String) =  \"Cache\-Control\" \l0x0027: INVOKE  (r4 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: CONST_STR  (r4 I:java.lang.String) =  \"Pragma\" \l0x0035: INVOKE  (r4 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0145 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: INVOKE  (r9 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: IF  (r4 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:64:0x0145 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: CONST_STR  (r9 I:java.lang.String) =  \"=,;\" \l0x0045: INVOKE  (r9 I:int) = \l  (r2 I:java.lang.String)\l  (r4 I:int)\l  (r9 I:java.lang.String)\l okhttp3.internal.http.HttpHeaders.skipUntil(java.lang.String, int, java.lang.String):int type: STATIC \l0x0049: INVOKE  (r4 I:java.lang.String) = (r2 I:java.lang.String), (r4 I:int), (r9 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0051: INVOKE  (r3 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x009e \l}"];
Node_15 [shape=record,label="{15\:\ 0x0057|0x0057: INVOKE  (r3 I:char) = (r2 I:java.lang.String), (r9 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x005b: CONST  (r5 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|0x005d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x009e \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: INVOKE  (r3 I:char) = (r2 I:java.lang.String), (r9 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0063: CONST  (r5 I:?[int, float, short, byte, char]) = (59 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0065|0x0065: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0068 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|0x0068: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x006a: INVOKE  (r3 I:int) = (r2 I:java.lang.String), (r9 I:int) okhttp3.internal.http.HttpHeaders.skipWhitespace(java.lang.String, int):int type: STATIC \l0x006e: INVOKE  (r5 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0072|0x0072: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:25:0x008d \l}"];
Node_22 [shape=record,label="{22\:\ 0x0074|0x0074: INVOKE  (r5 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0078: CONST  (r9 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007a|0x007a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008d \l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|0x007c: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x007e: CONST_STR  (r5 I:java.lang.String) =  \"\"\" \l0x0080: INVOKE  (r5 I:int) = \l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r5 I:java.lang.String)\l okhttp3.internal.http.HttpHeaders.skipUntil(java.lang.String, int, java.lang.String):int type: STATIC \l0x0084: INVOKE  (r3 I:java.lang.String) = (r2 I:java.lang.String), (r3 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0088: CONST  (r22 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x008a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x008d|0x008d: CONST  (r22 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x008f: CONST_STR  (r5 I:java.lang.String) =  \",;\" \l0x0091: INVOKE  (r5 I:int) = \l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r5 I:java.lang.String)\l okhttp3.internal.http.HttpHeaders.skipUntil(java.lang.String, int, java.lang.String):int type: STATIC \l0x0095: INVOKE  (r3 I:java.lang.String) = (r2 I:java.lang.String), (r3 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0099: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x009e|0x009e: CONST  (r22 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a0: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x00a2: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a3: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a4|0x00a4: CONST_STR  (r9 I:java.lang.String) =  \"no\-cache\" \l0x00a6: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00aa|0x00aa: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00b0 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ac|0x00ac: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00ad: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b0|0x00b0: CONST_STR  (r9 I:java.lang.String) =  \"no\-store\" \l0x00b2: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b6|0x00b6: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00bc \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b8|0x00b8: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00b9: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00bc|0x00bc: CONST_STR  (r9 I:java.lang.String) =  \"max\-age\" \l0x00be: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x00c2|0x00c2: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00cc \l}"];
Node_35 [shape=record,label="{35\:\ 0x00c4|0x00c4: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00c5: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r9 I:int) okhttp3.internal.http.HttpHeaders.parseSeconds(java.lang.String, int):int type: STATIC \l0x00c9: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00cc|0x00cc: CONST_STR  (r9 I:java.lang.String) =  \"s\-maxage\" \l0x00ce: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00d2|0x00d2: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00dc \l}"];
Node_38 [shape=record,label="{38\:\ 0x00d4|0x00d4: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00d5: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r9 I:int) okhttp3.internal.http.HttpHeaders.parseSeconds(java.lang.String, int):int type: STATIC \l0x00d9: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x00dc|0x00dc: CONST_STR  (r9 I:java.lang.String) =  \"private\" \l0x00de: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x00e2|0x00e2: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00e7 \l}"];
Node_41 [shape=record,label="{41\:\ 0x00e4|0x00e4: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00e5: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00e7|0x00e7: CONST_STR  (r9 I:java.lang.String) =  \"public\" \l0x00e9: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x00ed|0x00ed: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00f2 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ef|0x00ef: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00f0: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00f2|0x00f2: CONST_STR  (r9 I:java.lang.String) =  \"must\-revalidate\" \l0x00f4: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_46 [shape=record,label="{46\:\ 0x00f8|0x00f8: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00fe \l}"];
Node_47 [shape=record,label="{47\:\ 0x00fa|0x00fa: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00fb: CONST  (r16 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00fe|0x00fe: CONST_STR  (r9 I:java.lang.String) =  \"max\-stale\" \l0x0100: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_49 [shape=record,label="{49\:\ 0x0104|0x0104: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0111 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0106|0x0106: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0109: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r4 I:int) okhttp3.internal.http.HttpHeaders.parseSeconds(java.lang.String, int):int type: STATIC \l0x010d: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010f: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0111|0x0111: CONST_STR  (r9 I:java.lang.String) =  \"min\-fresh\" \l0x0113: INVOKE  (r9 I:boolean) = (r9 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_52 [shape=record,label="{52\:\ 0x0117|0x0117: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0121 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0119|0x0119: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x011a: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r9 I:int) okhttp3.internal.http.HttpHeaders.parseSeconds(java.lang.String, int):int type: STATIC \l0x011e: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_54 [shape=record,label="{54\:\ 0x0121|0x0121: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0122: CONST_STR  (r3 I:java.lang.String) =  \"only\-if\-cached\" \l0x0124: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_55 [shape=record,label="{55\:\ 0x0128|0x0128: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x012d \l}"];
Node_56 [shape=record,label="{56\:\ 0x012a|0x012a: CONST  (r19 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x012d|0x012d: CONST_STR  (r3 I:java.lang.String) =  \"no\-transform\" \l0x012f: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_58 [shape=record,label="{58\:\ 0x0133|0x0133: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0138 \l}"];
Node_59 [shape=record,label="{59\:\ 0x0135|0x0135: CONST  (r20 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0138|0x0138: CONST_STR  (r3 I:java.lang.String) =  \"immutable\" \l0x013a: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_61 [shape=record,label="{61\:\ 0x013e|0x013e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0142 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0140|0x0140: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0142|0x0142: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_64 [shape=record,label="{64\:\ 0x0145|0x0145: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0146: CONST  (r22 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0148: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_65 [shape=record,label="{65\:\ 0x014c|0x014c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0151 \l}"];
Node_66 [shape=record,label="{66\:\ 0x014e|0x014e: CONST  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_67 [shape=record,label="{67\:\ 0x0151|0x0151: MOVE  (r22 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0153|0x0153: NEW_INSTANCE  (r0 I:okhttp3.CacheControl) =  okhttp3.CacheControl \l0x0155: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0156: INVOKE  \l  (r9 I:okhttp3.CacheControl)\l  (r10 I:boolean)\l  (r11 I:boolean)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:boolean)\l  (r15 I:boolean)\l  (r16 I:boolean)\l  (r17 I:int)\l  (r18 I:int)\l  (r19 I:boolean)\l  (r20 I:boolean)\l  (r21 I:boolean)\l  (r22 I:java.lang.String)\l okhttp3.CacheControl.\<init\>(boolean, boolean, int, int, boolean, boolean, boolean, int, int, boolean, boolean, boolean, java.lang.String):void type: DIRECT \l}"];
Node_69 [shape=record,label="{69\:\ 0x0159|0x0159: RETURN  (r0 I:okhttp3.CacheControl) \l}"];
MethodNode[shape=record,label="{public static okhttp3.CacheControl okhttp3.CacheControl.parse((r23 I:okhttp3.Headers A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_65;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_64;
Node_8 -> Node_5[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_64;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_26;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_26[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_27;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_63;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_63;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_63;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_63;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_63;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_63;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_63;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_63;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_63;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_63;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_63;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_63;
Node_63 -> Node_11;
Node_64 -> Node_1;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_67;
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69;
}

