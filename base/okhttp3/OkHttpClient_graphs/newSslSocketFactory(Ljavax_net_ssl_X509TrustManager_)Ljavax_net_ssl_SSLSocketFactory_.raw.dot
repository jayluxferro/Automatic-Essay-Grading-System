digraph "CFG forokhttp3.OkHttpClient.newSslSocketFactory(Ljavax\/net\/ssl\/X509TrustManager;)Ljavax\/net\/ssl\/SSLSocketFactory;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}, TRY_ENTER]\l0x0004: INVOKE  (r0 I:javax.net.ssl.SSLContext) = (r0 I:okhttp3.internal.platform.Platform) okhttp3.internal.platform.Platform.getSSLContext():javax.net.ssl.SSLContext type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x0009: NEW_ARRAY  (r1 I:javax.net.ssl.TrustManager[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: javax.net.ssl.TrustManager[] A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x000c: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x000e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x000f: INVOKE  \l  (r0 I:javax.net.ssl.SSLContext)\l  (r3 I:javax.net.ssl.KeyManager[])\l  (r1 I:javax.net.ssl.TrustManager[])\l  (r3 I:java.security.SecureRandom)\l javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom):void type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x0012: INVOKE  (r3 I:javax.net.ssl.SSLSocketFactory) = (r0 I:javax.net.ssl.SSLContext) javax.net.ssl.SSLContext.getSocketFactory():javax.net.ssl.SSLSocketFactory type: VIRTUAL A[Catch:\{ GeneralSecurityException \-\> 0x0017 \}]\l0x0015: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: RETURN  (r3 I:javax.net.ssl.SSLSocketFactory) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|ExcHandler: GeneralSecurityException null\lSplitter:B:0:0x0000\l|0x0017: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST_STR  (r0 I:java.lang.String) =  \"No System TLS\" \l0x001a: INVOKE  (r3 I:java.lang.AssertionError) = (r0 I:java.lang.String), (r3 I:java.lang.Exception) okhttp3.internal.Util.assertionError(java.lang.String, java.lang.Exception):java.lang.AssertionError type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static javax.net.ssl.SSLSocketFactory okhttp3.OkHttpClient.newSslSocketFactory((r3 I:javax.net.ssl.X509TrustManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

