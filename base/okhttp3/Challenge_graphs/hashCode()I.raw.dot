digraph "CFG forokhttp3.Challenge.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r2 I:okhttp3.Challenge) okhttp3.Challenge.realm java.lang.String \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (899(0x383, float:1.26E\-42) ?[int, float, short, byte, char])\l \l0x0008: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0009: ARITH  (r1 I:int) = (r1 I:int) * (31 int) \l0x000b: IGET  (r0 I:java.lang.String) = (r2 I:okhttp3.Challenge) okhttp3.Challenge.scheme java.lang.String \l0x000d: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0011: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0012: ARITH  (r1 I:int) = (r1 I:int) * (31 int) \l0x0014: IGET  (r0 I:java.nio.charset.Charset) = (r2 I:okhttp3.Challenge) okhttp3.Challenge.charset java.nio.charset.Charset \l0x0016: INVOKE  (r0 I:int) = (r0 I:java.nio.charset.Charset) java.nio.charset.Charset.hashCode():int type: VIRTUAL \l0x001a: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int okhttp3.Challenge.hashCode((r2 'this' I:okhttp3.Challenge A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

