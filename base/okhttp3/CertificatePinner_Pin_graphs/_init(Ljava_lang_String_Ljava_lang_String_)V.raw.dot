digraph "CFG forokhttp3.CertificatePinner.Pin.\<init\>(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r3 I:java.lang.String)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.pattern java.lang.String \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"*.\" \l0x0007: INVOKE  (r0 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r1 I:java.lang.String) =  \"http:\/\/\" \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"*.\" \l0x0019: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001d: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r1 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r3 I:okhttp3.HttpUrl) = (r3 I:java.lang.String) okhttp3.HttpUrl.get(java.lang.String):okhttp3.HttpUrl type: STATIC \l0x002c: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|0x0031: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0036: CONST_STR  (r1 I:java.lang.String) =  \"http:\/\/\" \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0042: INVOKE  (r3 I:okhttp3.HttpUrl) = (r3 I:java.lang.String) okhttp3.HttpUrl.get(java.lang.String):okhttp3.HttpUrl type: STATIC \l0x0046: INVOKE  (r3 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host():java.lang.String type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x004a|0x004a: IPUT  \l  (r3 I:java.lang.String)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.canonicalHostname java.lang.String \l0x004c: CONST_STR  (r3 I:java.lang.String) =  \"sha1\/\" \l0x004e: INVOKE  (r3 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0052|0x0052: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0069 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0054|0x0054: CONST_STR  (r3 I:java.lang.String) =  \"sha1\/\" \l0x0056: IPUT  \l  (r3 I:java.lang.String)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.hashAlgorithm java.lang.String \l0x0058: CONST_STR  (r3 I:java.lang.String) =  \"sha1\/\" \l0x005a: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x005e: INVOKE  (r3 I:java.lang.String) = (r4 I:java.lang.String), (r3 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0062: INVOKE  (r3 I:okio.ByteString) = (r3 I:java.lang.String) okio.ByteString.decodeBase64(java.lang.String):okio.ByteString type: STATIC \l0x0066: IPUT  \l  (r3 I:okio.ByteString)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.hash okio.ByteString \l}"];
Node_7 [shape=record,label="{7\:\ 0x0069|0x0069: CONST_STR  (r3 I:java.lang.String) =  \"sha256\/\" \l0x006b: INVOKE  (r3 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x006f|0x006f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x00a1 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0071|0x0071: CONST_STR  (r3 I:java.lang.String) =  \"sha256\/\" \l0x0073: IPUT  \l  (r3 I:java.lang.String)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.hashAlgorithm java.lang.String \l0x0075: CONST_STR  (r3 I:java.lang.String) =  \"sha256\/\" \l0x0077: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x007b: INVOKE  (r3 I:java.lang.String) = (r4 I:java.lang.String), (r3 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x007f: INVOKE  (r3 I:okio.ByteString) = (r3 I:java.lang.String) okio.ByteString.decodeBase64(java.lang.String):okio.ByteString type: STATIC \l0x0083: IPUT  \l  (r3 I:okio.ByteString)\l  (r2 I:okhttp3.CertificatePinner$Pin)\l okhttp3.CertificatePinner.Pin.hash okio.ByteString \l}"];
Node_10 [shape=record,label="{10\:\ 0x0085|0x0085: IGET  (r3 I:okio.ByteString) = (r2 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.hash okio.ByteString \l}"];
Node_11 [shape=record,label="{11\:\ 0x0087|0x0087: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x008a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0089|0x0089: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x008a|0x008a: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x008c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x008e: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0091: CONST_STR  (r1 I:java.lang.String) =  \"pins must be base64: \" \l0x0093: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0096: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0099: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x009d: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x00a0|0x00a0: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a1|0x00a1: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00a3: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00a5: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a8: CONST_STR  (r1 I:java.lang.String) =  \"pins must start with 'sha256\/' or 'sha1\/': \" \l0x00aa: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ad: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b0: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b4: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x00b7|0x00b7: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void okhttp3.CertificatePinner.Pin.\<init\>((r2 'this' I:okhttp3.CertificatePinner$Pin A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

