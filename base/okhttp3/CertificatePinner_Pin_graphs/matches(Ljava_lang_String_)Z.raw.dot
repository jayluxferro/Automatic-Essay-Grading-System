digraph "CFG forokhttp3.CertificatePinner.Pin.matches(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r10 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.pattern java.lang.String \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"*.\" \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x000c: INVOKE  (r0 I:int) = (r11 I:java.lang.String), (r0 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0010: INVOKE  (r1 I:int) = (r11 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0014: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x0015: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0017: IGET  (r3 I:java.lang.String) = (r10 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.canonicalHostname java.lang.String \l0x0019: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: ARITH  (r6 I:int) = (r0 I:int) + (1 int) \l0x0022: IGET  (r7 I:java.lang.String) = (r10 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.canonicalHostname java.lang.String \l0x0024: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: IGET  (r0 I:java.lang.String) = (r10 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.canonicalHostname java.lang.String \l0x0027: INVOKE  (r9 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x002b: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  (r11 I:boolean) = \l  (r4 I:java.lang.String)\l  (r5 I:boolean)\l  (r6 I:int)\l  (r7 I:java.lang.String)\l  (r8 I:int)\l  (r9 I:int)\l java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r0 I:java.lang.String) = (r10 I:okhttp3.CertificatePinner$Pin) okhttp3.CertificatePinner.Pin.canonicalHostname java.lang.String \l0x0037: INVOKE  (r11 I:boolean) = (r11 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: RETURN  (r11 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean okhttp3.CertificatePinner.Pin.matches((r10 'this' I:okhttp3.CertificatePinner$Pin A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

