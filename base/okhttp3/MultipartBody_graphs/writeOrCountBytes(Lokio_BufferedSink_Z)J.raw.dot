digraph "CFG forokhttp3.MultipartBody.writeOrCountBytes(Lokio\/BufferedSink;Z)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0009 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r13 I:okio.Buffer) =  okio.Buffer \l0x0004: INVOKE  (r13 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0007: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r1 I:java.util.List\<okhttp3.MultipartBody$Part\>) = (r12 I:okhttp3.MultipartBody) okhttp3.MultipartBody.parts java.util.List \l0x000c: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0013: MOVE  (r4 I:?[long, double]) = (r3 I:?[long, double]) \l0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:24:0x00a7 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r6 I:java.util.List\<okhttp3.MultipartBody$Part\>) = (r12 I:okhttp3.MultipartBody) okhttp3.MultipartBody.parts java.util.List \l0x0019: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r6 I:okhttp3.MultipartBody$Part) = (okhttp3.MultipartBody$Part) (r6 I:?[OBJECT, ARRAY]) \l0x001f: IGET  (r7 I:okhttp3.Headers) = (r6 I:okhttp3.MultipartBody$Part) okhttp3.MultipartBody.Part.headers okhttp3.Headers \l0x0021: IGET  (r6 I:okhttp3.RequestBody) = (r6 I:okhttp3.MultipartBody$Part) okhttp3.MultipartBody.Part.body okhttp3.RequestBody \l0x0023: SGET  (r8 I:byte[]) =  okhttp3.MultipartBody.DASHDASH byte[] \l0x0025: INVOKE  (r13 I:okio.BufferedSink), (r8 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x0028: IGET  (r8 I:okio.ByteString) = (r12 I:okhttp3.MultipartBody) okhttp3.MultipartBody.boundary okio.ByteString \l0x002a: INVOKE  (r13 I:okio.BufferedSink), (r8 I:okio.ByteString) okio.BufferedSink.write(okio.ByteString):okio.BufferedSink type: INTERFACE \l0x002d: SGET  (r8 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x002f: INVOKE  (r13 I:okio.BufferedSink), (r8 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|0x0032: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: INVOKE  (r8 I:int) = (r7 I:okhttp3.Headers) okhttp3.Headers.size():int type: VIRTUAL \l0x0038: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IF  (r9 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: INVOKE  (r10 I:java.lang.String) = (r7 I:okhttp3.Headers), (r9 I:int) okhttp3.Headers.name(int):java.lang.String type: VIRTUAL \l0x003f: INVOKE  (r10 I:okio.BufferedSink) = (r13 I:okio.BufferedSink), (r10 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0043: SGET  (r11 I:byte[]) =  okhttp3.MultipartBody.COLONSPACE byte[] \l0x0045: INVOKE  (r10 I:okio.BufferedSink) = (r10 I:okio.BufferedSink), (r11 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x0049: INVOKE  (r11 I:java.lang.String) = (r7 I:okhttp3.Headers), (r9 I:int) okhttp3.Headers.value(int):java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r10 I:okio.BufferedSink) = (r10 I:okio.BufferedSink), (r11 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0051: SGET  (r11 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x0053: INVOKE  (r10 I:okio.BufferedSink), (r11 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x0056: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: INVOKE  (r7 I:okhttp3.MediaType) = (r6 I:okhttp3.RequestBody) okhttp3.RequestBody.contentType():okhttp3.MediaType type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x005d|0x005d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0072 \l}"];
Node_12 [shape=record,label="{12\:\ 0x005f|0x005f: CONST_STR  (r8 I:java.lang.String) =  \"Content\-Type: \" \l0x0061: INVOKE  (r8 I:okio.BufferedSink) = (r13 I:okio.BufferedSink), (r8 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0065: INVOKE  (r7 I:java.lang.String) = (r7 I:okhttp3.MediaType) okhttp3.MediaType.toString():java.lang.String type: VIRTUAL \l0x0069: INVOKE  (r7 I:okio.BufferedSink) = (r8 I:okio.BufferedSink), (r7 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x006d: SGET  (r8 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x006f: INVOKE  (r7 I:okio.BufferedSink), (r8 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0072|0x0072: INVOKE  (r7 I:long) = (r6 I:okhttp3.RequestBody) okhttp3.RequestBody.contentLength():long type: VIRTUAL \l0x0076: CONST  (r9 I:?[long, double]) = (\-1 ?[long, double]) \l0x0078: CMP_L  (r11 I:int) = (r7 I:long), (r9 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x007a|0x007a: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x008c \l}"];
Node_15 [shape=record,label="{15\:\ 0x007c|0x007c: CONST_STR  (r9 I:java.lang.String) =  \"Content\-Length: \" \l0x007e: INVOKE  (r9 I:okio.BufferedSink) = (r13 I:okio.BufferedSink), (r9 I:java.lang.String) okio.BufferedSink.writeUtf8(java.lang.String):okio.BufferedSink type: INTERFACE \l0x0082: INVOKE  (r9 I:okio.BufferedSink) = (r9 I:okio.BufferedSink), (r7 I:long) okio.BufferedSink.writeDecimalLong(long):okio.BufferedSink type: INTERFACE \l0x0086: SGET  (r10 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x0088: INVOKE  (r9 I:okio.BufferedSink), (r10 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x008c|0x008c: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0092 \l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|0x008e: INVOKE  (r0 I:okio.Buffer) okio.Buffer.clear():void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0091|0x0091: RETURN  (r9 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0092|0x0092: SGET  (r9 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x0094: INVOKE  (r13 I:okio.BufferedSink), (r9 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0097|0x0097: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x009b \l}"];
Node_21 [shape=record,label="{21\:\ 0x0099|0x0099: ARITH  (r4 I:long) = (r4 I:long) + (r7 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x009b|0x009b: INVOKE  (r6 I:okhttp3.RequestBody), (r13 I:okio.BufferedSink) okhttp3.RequestBody.writeTo(okio.BufferedSink):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x009e|0x009e: SGET  (r6 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x00a0: INVOKE  (r13 I:okio.BufferedSink), (r6 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x00a3: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a7|0x00a7: SGET  (r1 I:byte[]) =  okhttp3.MultipartBody.DASHDASH byte[] \l0x00a9: INVOKE  (r13 I:okio.BufferedSink), (r1 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x00ac: IGET  (r1 I:okio.ByteString) = (r12 I:okhttp3.MultipartBody) okhttp3.MultipartBody.boundary okio.ByteString \l0x00ae: INVOKE  (r13 I:okio.BufferedSink), (r1 I:okio.ByteString) okio.BufferedSink.write(okio.ByteString):okio.BufferedSink type: INTERFACE \l0x00b1: SGET  (r1 I:byte[]) =  okhttp3.MultipartBody.DASHDASH byte[] \l0x00b3: INVOKE  (r13 I:okio.BufferedSink), (r1 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l0x00b6: SGET  (r1 I:byte[]) =  okhttp3.MultipartBody.CRLF byte[] \l0x00b8: INVOKE  (r13 I:okio.BufferedSink), (r1 I:byte[]) okio.BufferedSink.write(byte[]):okio.BufferedSink type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x00bb|0x00bb: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00c5 \l}"];
Node_26 [shape=record,label="{26\:\ 0x00bd|0x00bd: INVOKE  (r13 I:long) = (r0 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL \l0x00c1: ARITH  (r4 I:long) = (r4 I:long) + (r13 I:long) \l0x00c2: INVOKE  (r0 I:okio.Buffer) okio.Buffer.clear():void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c5|0x00c5: RETURN  (r4 I:long) \l}"];
MethodNode[shape=record,label="{private long okhttp3.MultipartBody.writeOrCountBytes((r12 'this' I:okhttp3.MultipartBody A[IMMUTABLE_TYPE, THIS]), (r13 I:okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_24;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_4;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
}

