digraph "CFG forokhttp3.MultipartBody.writeOrCountBytes(Lokio\/BufferedSink;Z)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r14 == false) goto L_0x0009\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|okio.Buffer r13 = new okio.Buffer()\lr0 = r13\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|PHI: r0 r13 \l  PHI: (r0v0 okio.Buffer) = (r0v1 okio.Buffer), (r0v2 okio.Buffer) binds: [B:2:0x0009, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 okio.BufferedSink) = (r13v0 okio.BufferedSink), (r13v3 okio.BufferedSink) binds: [B:2:0x0009, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r12.parts.size()\lr4 = 0\lr3 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:3:0x000a, B:23:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 long) = (r4v0 long), (r4v3 long) binds: [B:3:0x000a, B:23:0x009e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0015\-\>B:23:0x009e\l|if (r3 \>= r1) goto L_0x00a7\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|okhttp3.MultipartBody$Part r6 = r12.parts.get(r3)\lokhttp3.Headers r7 = r6.headers\lokhttp3.RequestBody r6 = r6.body\lr13.write(DASHDASH)\lr13.write(r12.boundary)\lr13.write(CRLF)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|if (r7 == null) goto L_0x0059\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|int r8 = r7.size()\lr9 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|LOOP_START\lPHI: r9 \l  PHI: (r9v6 int) = (r9v5 int), (r9v7 int) binds: [B:7:0x0034, B:9:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0039\-\>B:9:0x003b\l|if (r9 \>= r8) goto L_0x0059\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|LOOP_END\lLOOP:1: B:8:0x0039\-\>B:9:0x003b\l|r13.writeUtf8(r7.name(r9)).write(COLONSPACE).writeUtf8(r7.value(r9)).write(CRLF)\lint r9 = r9 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|okhttp3.MediaType r7 = r6.contentType()\l}"];
Node_11 [shape=record,label="{11\:\ 0x005d|if (r7 == null) goto L_0x0072\l}"];
Node_12 [shape=record,label="{12\:\ 0x005f|r13.writeUtf8(\"Content\-Type: \").writeUtf8(r7.toString()).write(CRLF)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0072|long r7 = r6.contentLength()\l}"];
Node_14 [shape=record,label="{14\:\ 0x007a|if ((r7 \> \-1 ? 1 : (r7 == \-1 ? 0 : \-1)) == 0) goto L_0x008c\l}"];
Node_15 [shape=record,label="{15\:\ 0x007c|r13.writeUtf8(\"Content\-Length: \").writeDecimalLong(r7).write(CRLF)\l}"];
Node_16 [shape=record,label="{16\:\ 0x008c|if (r14 == false) goto L_0x0092\l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|r0.clear()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0091|RETURN\l|return \-1\l}"];
Node_19 [shape=record,label="{19\:\ 0x0092|r13.write(CRLF)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0097|if (r14 == false) goto L_0x009b\l}"];
Node_21 [shape=record,label="{21\:\ 0x0099|long r4 = r4 + r7\l}"];
Node_22 [shape=record,label="{22\:\ 0x009b|r6.writeTo(r13)\l}"];
Node_23 [shape=record,label="{23\:\ 0x009e|LOOP_END\lPHI: r4 \l  PHI: (r4v3 long) = (r4v1 long), (r4v4 long) binds: [B:29:0x009e, B:30:0x009e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0015\-\>B:23:0x009e\l|r13.write(CRLF)\lint r3 = r3 + 1\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a7|r13.write(DASHDASH)\lr13.write(r12.boundary)\lr13.write(DASHDASH)\lr13.write(CRLF)\l}"];
Node_25 [shape=record,label="{25\:\ 0x00bb|if (r14 == false) goto L_?\l}"];
Node_26 [shape=record,label="{26\:\ 0x00bd|long r4 = r4 + r0.size()\lr0.clear()\l}"];
Node_27 [shape=record,label="{27\:\ 0x008e|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x00a7|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x009e|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x009e|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0059|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r4\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
MethodNode[shape=record,label="{private long okhttp3.MultipartBody.writeOrCountBytes((r12v0 'this' okhttp3.MultipartBody A[IMMUTABLE_TYPE, THIS]), (r13v0 okio.BufferedSink A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lAnnotation[RUNTIME, javax.annotation.Nullable, \{\}], \lJADX DEBUG: Multi\-variable search result rejected for TypeSearchVarInfo\{r13v1, resolved type: okio.BufferedSink\}\lJADX DEBUG: Multi\-variable search result rejected for TypeSearchVarInfo\{r0v0, resolved type: okio.Buffer\}\lJADX DEBUG: Multi\-variable search result rejected for TypeSearchVarInfo\{r0v1, resolved type: okio.Buffer\}\lJADX DEBUG: Multi\-variable search result rejected for TypeSearchVarInfo\{r13v3, resolved type: okio.BufferedSink\}\lJADX DEBUG: Multi\-variable search result rejected for TypeSearchVarInfo\{r0v2, resolved type: okio.Buffer\}\lMulti\-variable type inference failed\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_28;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_31;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_19;
Node_16 -> Node_27[style=dashed];
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_30;
Node_22 -> Node_29;
Node_23 -> Node_4;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_32;
Node_27 -> Node_17;
Node_28 -> Node_24;
Node_29 -> Node_23;
Node_30 -> Node_23;
Node_31 -> Node_10;
}

