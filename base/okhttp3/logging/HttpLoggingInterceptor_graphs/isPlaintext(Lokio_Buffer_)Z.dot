digraph "CFG forokhttp3.logging.HttpLoggingInterceptor.isPlaintext(Lokio\/Buffer;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ EOFException \-\> 0x0040 \}\lSplitter:B:1:0x0001\l|okio.Buffer r7 = new okio.Buffer()     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|Catch:\{ EOFException \-\> 0x0040 \}\l|if ((r8.size() \> 64 ? 1 : (r8.size() == 64 ? 0 : \-1)) \>= 0) goto L_0x0016     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|Catch:\{ EOFException \-\> 0x0040 \}\l|r5 = r8.size()     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|Catch:\{ EOFException \-\> 0x0040 \}\l|r5 = 64     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|Catch:\{ EOFException \-\> 0x0040 \}\lPHI: r5 \l  PHI: (r5v0 long) = (r5v1 long), (r5v2 long) binds: [B:5:0x0016, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|r8.copyTo(r7, 0, r5)     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\lr8 = 0     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|LOOP_START\lCatch:\{ EOFException \-\> 0x0040 \}\lPHI: r8 \l  PHI: (r8v2 int) = (r8v1 int), (r8v5 int) binds: [B:6:0x0017, B:17:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x001f\-\>B:17:0x003b\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|Catch:\{ EOFException \-\> 0x0040 \}\l|if (r8 \>= 16) goto L_0x003e     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|Catch:\{ EOFException \-\> 0x0040 \}\l|if (r7.exhausted() == false) goto L_0x002a     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|Catch:\{ EOFException \-\> 0x0040 \}\l|int r1 = r7.readUtf8CodePoint()     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|Catch:\{ EOFException \-\> 0x0040 \}\l|if (java.lang.Character.isISOControl(r1) == false) goto L_0x003b     \/\/ Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|Catch:\{ EOFException \-\> 0x0040 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|if (java.lang.Character.isWhitespace(r1) != false) goto L_0x003b\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|LOOP_END\lLOOP:0: B:7:0x001f\-\>B:17:0x003b\l|int r8 = r8 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|RETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lExcHandler: EOFException (unused java.io.EOFException)\lSplitter:B:1:0x0001\l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x003b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{static boolean okhttp3.logging.HttpLoggingInterceptor.isPlaintext((r8v0 okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_21[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_22[style=dashed];
Node_15 -> Node_24;
Node_17 -> Node_7;
Node_19 -> Node_18;
Node_20 -> Node_26;
Node_21 -> Node_11;
Node_22 -> Node_16;
Node_23 -> Node_17;
Node_24 -> Node_17;
}

