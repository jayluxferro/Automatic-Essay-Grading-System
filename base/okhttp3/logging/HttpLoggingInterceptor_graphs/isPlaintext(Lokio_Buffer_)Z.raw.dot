digraph "CFG forokhttp3.logging.HttpLoggingInterceptor.isPlaintext(Lokio\/Buffer;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r7 I:okio.Buffer) =  okio.Buffer A[Catch:\{ EOFException \-\> 0x0040 \}, TRY_ENTER]\l0x0003: INVOKE  (r7 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x0006: INVOKE  (r1 I:long) = (r8 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x000a: CONST  (r3 I:?[long, double]) = (64 ?[long, double]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x000c: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0016 A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r1 I:long) = (r8 I:okio.Buffer) okio.Buffer.size():long type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x0014: MOVE  (r5 I:?[long, double]) = (r1 I:?[long, double]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x0015: GOTO  \-\> 0x0017 A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: MOVE  (r5 I:?[long, double]) = (r3 I:?[long, double]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x0019: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x001a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x001b: INVOKE  \l  (r1 I:okio.Buffer)\l  (r2 I:okio.Buffer)\l  (r3 I:long)\l  (r5 I:long)\l okio.Buffer.copyTo(okio.Buffer, long, long):okio.Buffer type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x001e: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r8 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:18:0x003e A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r1 I:boolean) = (r7 I:okio.Buffer) okio.Buffer.exhausted():boolean type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: GOTO  \-\> 0x003e A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: INVOKE  (r1 I:int) = (r7 I:okio.Buffer) okio.Buffer.readUtf8CodePoint():int type: VIRTUAL A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x002e: INVOKE  (r2 I:boolean) = (r1 I:int) java.lang.Character.isISOControl(int):boolean type: STATIC A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b A[Catch:\{ EOFException \-\> 0x0040 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: INVOKE  (r1 I:boolean) = (r1 I:int) java.lang.Character.isWhitespace(int):boolean type: STATIC A[Catch:\{ EOFException \-\> 0x0040 \}]\l0x0037: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: RETURN  (r8 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lExcHandler: EOFException null\lSplitter:B:1:0x0001\l}"];
MethodNode[shape=record,label="{static boolean okhttp3.logging.HttpLoggingInterceptor.isPlaintext((r8 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_7;
Node_18 -> Node_19;
Node_21 -> Node_20;
}

