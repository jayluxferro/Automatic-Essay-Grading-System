digraph "CFG forokhttp3.logging.HttpLoggingInterceptor.Logger.1.log(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.internal.platform.Platform) =  okhttp3.internal.platform.Platform.get():okhttp3.internal.platform.Platform type: STATIC \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  \l  (r0 I:okhttp3.internal.platform.Platform)\l  (r1 I:int)\l  (r4 I:java.lang.String)\l  (r2 I:java.lang.Throwable)\l okhttp3.internal.platform.Platform.log(int, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{public void okhttp3.logging.HttpLoggingInterceptor.Logger.1.log((r3 'this' I:okhttp3.logging.HttpLoggingInterceptor$Logger$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

