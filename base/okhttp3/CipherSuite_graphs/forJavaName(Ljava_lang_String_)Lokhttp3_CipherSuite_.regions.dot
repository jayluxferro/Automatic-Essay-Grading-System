digraph "CFG forokhttp3.CipherSuite.forJavaName(Ljava\/lang\/String;)Lokhttp3\/CipherSuite;" {
subgraph cluster_Region_1725356722 {
label = "R(3:0|2|7) | DECL_VAR: okhttp3.CipherSuite null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_1900186173 {
label = "Synchronized:R(2:1|(2:3|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_1242965628 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|okhttp3.CipherSuite r1 = INSTANCES.get(r3)\l}"];
subgraph cluster_IfRegion_1809381337 {
label = "IF [B:4:0x000b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r1 == null) goto L_0x000d\l}"];
subgraph cluster_Region_1397199401 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|okhttp3.CipherSuite r1 = new okhttp3.CipherSuite(r3)     \/\/ Catch:\{  \}\lINSTANCES.put(r3, r1)\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return r1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017|DONT_GENERATE\lPHI: r1 \l  PHI: (r1v3 okhttp3.CipherSuite) = (r1v2 okhttp3.CipherSuite), (r1v4 okhttp3.CipherSuite) binds: [B:4:0x000b, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(\l\/\/ error: 0x0017: MONITOR_EXIT  \l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019|REMOVE\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001a|REMOVE\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001b|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public static synchronized okhttp3.CipherSuite okhttp3.CipherSuite.forJavaName((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

