digraph "CFG forokhttp3.Dispatcher.finished(Ljava\/util\/Deque;Ljava\/lang\/Object;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:boolean) = (r1 I:java.util.Deque), (r2 I:java.lang.Object) java.util.Deque.remove(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r0 I:okhttp3.Dispatcher) okhttp3.Dispatcher.promoteCalls():void type: DIRECT A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = (r0 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningCallsCount():int type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l0x0010: IGET  (r2 I:java.lang.Runnable) = (r0 I:okhttp3.Dispatcher) okhttp3.Dispatcher.idleCallback java.lang.Runnable A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: INVOKE  (r2 I:java.lang.Runnable) java.lang.Runnable.run():void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|SYNTHETIC\lSplitter:B:12:0x001b\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x001b\l|0x001b: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"Call wasn't in\-flight!\" A[Catch:\{ all \-\> 0x0023 \}]\l0x001f: INVOKE  (r1 I:java.lang.AssertionError), (r2 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0023: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024|0x0024: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void okhttp3.Dispatcher.finished((r0 'this' I:okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r1 I:java.util.Deque\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Deque\<, TT;\>;TT;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

