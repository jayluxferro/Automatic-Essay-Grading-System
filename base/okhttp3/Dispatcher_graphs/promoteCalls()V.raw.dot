digraph "CFG forokhttp3.Dispatcher.promoteCalls()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.Deque) java.util.Deque.size():int type: INTERFACE \l0x0006: IGET  (r1 I:int) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequests int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.readyAsyncCalls java.util.Deque \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:java.util.Deque) java.util.Deque.isEmpty():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.readyAsyncCalls java.util.Deque \l0x0016: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0024: CHECK_CAST  (r1 I:okhttp3.RealCall$AsyncCall) = (okhttp3.RealCall$AsyncCall) (r1 I:?[OBJECT, ARRAY]) \l0x0026: INVOKE  (r2 I:int) = \l  (r4 I:okhttp3.Dispatcher)\l  (r1 I:okhttp3.RealCall$AsyncCall)\l okhttp3.Dispatcher.runningCallsForHost(okhttp3.RealCall$AsyncCall):int type: DIRECT \l0x002a: IGET  (r3 I:int) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequestsPerHost int \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:12:0x003d \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: INVOKE  (r0 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE \l0x0031: IGET  (r2 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque \l0x0033: INVOKE  (r2 I:java.util.Deque), (r1 I:java.lang.Object) java.util.Deque.add(java.lang.Object):boolean type: INTERFACE \l0x0036: INVOKE  (r2 I:java.util.concurrent.ExecutorService) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.executorService():java.util.concurrent.ExecutorService type: VIRTUAL \l0x003a: INVOKE  \l  (r2 I:java.util.concurrent.ExecutorService)\l  (r1 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IGET  (r1 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque \l0x003f: INVOKE  (r1 I:int) = (r1 I:java.util.Deque) java.util.Deque.size():int type: INTERFACE \l0x0043: IGET  (r2 I:int) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequests int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: RETURN   \l}"];
MethodNode[shape=record,label="{private void okhttp3.Dispatcher.promoteCalls((r4 'this' I:okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_7;
Node_13 -> Node_14[style=dashed];
}

