digraph "CFG forokhttp3.Dispatcher.enqueue(Lokhttp3\/RealCall$AsyncCall;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque A[Catch:\{ all \-\> 0x0027 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:int) = (r0 I:java.util.Deque) java.util.Deque.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0027 \}]\l0x0007: IGET  (r1 I:int) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequests int A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0020 A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r0 I:int) = \l  (r2 I:okhttp3.Dispatcher)\l  (r3 I:okhttp3.RealCall$AsyncCall)\l okhttp3.Dispatcher.runningCallsForHost(okhttp3.RealCall$AsyncCall):int type: DIRECT A[Catch:\{ all \-\> 0x0027 \}]\l0x000f: IGET  (r1 I:int) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequestsPerHost int A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0020 A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque A[Catch:\{ all \-\> 0x0027 \}]\l0x0015: INVOKE  (r0 I:java.util.Deque), (r3 I:java.lang.Object) java.util.Deque.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0027 \}]\l0x0018: INVOKE  (r0 I:java.util.concurrent.ExecutorService) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.executorService():java.util.concurrent.ExecutorService type: VIRTUAL A[Catch:\{ all \-\> 0x0027 \}]\l0x001c: INVOKE  \l  (r0 I:java.util.concurrent.ExecutorService)\l  (r3 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ all \-\> 0x0027 \}]\l0x001f: GOTO  \-\> 0x0025 A[Catch:\{ all \-\> 0x0027 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r2 I:okhttp3.Dispatcher) okhttp3.Dispatcher.readyAsyncCalls java.util.Deque A[Catch:\{ all \-\> 0x0027 \}]\l0x0022: INVOKE  (r0 I:java.util.Deque), (r3 I:java.lang.Object) java.util.Deque.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0027 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0027: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{synchronized void okhttp3.Dispatcher.enqueue((r2 'this' I:okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r3 I:okhttp3.RealCall$AsyncCall A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

