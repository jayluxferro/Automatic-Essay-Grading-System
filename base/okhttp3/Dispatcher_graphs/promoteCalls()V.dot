digraph "CFG forokhttp3.Dispatcher.promoteCalls()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r4.runningAsyncCalls.size() \< r4.maxRequests) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r4.readyAsyncCalls.isEmpty() == false) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|java.util.Iterator r0 = r4.readyAsyncCalls.iterator()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|LOOP_START\lLOOP:0: B:7:0x001a\-\>B:13:0x0045\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|if (r0.hasNext() == false) goto L_0x0048\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|okhttp3.RealCall$AsyncCall r1 = r0.next()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|if (runningCallsForHost(r1) \>= r4.maxRequestsPerHost) goto L_0x003d\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|r0.remove()\lr4.runningAsyncCalls.add(r1)\lexecutorService().execute(r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d}"];
Node_13 [shape=record,label="{13\:\ 0x0045|LOOP_END\lLOOP:0: B:7:0x001a\-\>B:13:0x0045\l|if (r4.runningAsyncCalls.size() \< r4.maxRequests) goto L_0x001a\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void okhttp3.Dispatcher.promoteCalls((r4v0 'this' okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_7;
Node_13 -> Node_16[style=dashed];
Node_16 -> Node_14;
Node_17 -> Node_15;
}

