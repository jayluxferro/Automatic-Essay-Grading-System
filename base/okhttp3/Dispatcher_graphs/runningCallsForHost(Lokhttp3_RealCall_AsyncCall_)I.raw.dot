digraph "CFG forokhttp3.Dispatcher.runningCallsForHost(Lokhttp3\/RealCall$AsyncCall;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Deque\<okhttp3.RealCall$AsyncCall\>) = (r4 I:okhttp3.Dispatcher) okhttp3.Dispatcher.runningAsyncCalls java.util.Deque \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Deque) java.util.Deque.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r2 I:okhttp3.RealCall$AsyncCall) = (okhttp3.RealCall$AsyncCall) (r2 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r3 I:okhttp3.RealCall) = (r2 I:okhttp3.RealCall$AsyncCall) okhttp3.RealCall.AsyncCall.get():okhttp3.RealCall type: VIRTUAL \l0x0017: IGET  (r3 I:boolean) = (r3 I:okhttp3.RealCall) okhttp3.RealCall.forWebSocket boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r2 I:java.lang.String) = (r2 I:okhttp3.RealCall$AsyncCall) okhttp3.RealCall.AsyncCall.host():java.lang.String type: VIRTUAL \l0x0020: INVOKE  (r3 I:java.lang.String) = (r5 I:okhttp3.RealCall$AsyncCall) okhttp3.RealCall.AsyncCall.host():java.lang.String type: VIRTUAL \l0x0024: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0007 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private int okhttp3.Dispatcher.runningCallsForHost((r4 'this' I:okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.RealCall$AsyncCall A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_1[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_1;
}

