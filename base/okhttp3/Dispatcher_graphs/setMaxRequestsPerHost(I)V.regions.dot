digraph "CFG forokhttp3.Dispatcher.setMaxRequestsPerHost(I)V" {
subgraph cluster_Region_1581742411 {
label = "R(1:(1:(1:(1:4)(2:8|9))))";
node [shape=record,color=blue];
subgraph cluster_Region_2038055395 {
label = "R(1:(1:(1:4)(2:8|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_327810906 {
label = "R(1:(1:4)(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2030769405 {
label = "IF [B:2:0x0002] THEN: R(1:4) ELSE: R(2:8|9)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|if (r4 \>= 1) goto L_0x0004\l}"];
subgraph cluster_Region_484685750 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|r3.maxRequestsPerHost = r4\lpromoteCalls()\l}"];
}
subgraph cluster_Region_935172240 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|throw new java.lang.IllegalArgumentException(\"max \< 1: \" + r4)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0009|DONT_GENERATE\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000b|SYNTHETIC\lSplitter:B:7:0x000b\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0022|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0023|REMOVE\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0024|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.Dispatcher.setMaxRequestsPerHost((r3v0 'this' okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_10;
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

