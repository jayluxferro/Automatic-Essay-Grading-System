digraph "CFG forokhttp3.Dispatcher.setMaxRequests(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r4 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:7:0x000b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: IPUT  (r4 I:int), (r3 I:okhttp3.Dispatcher) okhttp3.Dispatcher.maxRequests int A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x0006: INVOKE  (r3 I:okhttp3.Dispatcher) okhttp3.Dispatcher.promoteCalls():void type: DIRECT A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|SYNTHETIC\lSplitter:B:7:0x000b\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000b\l|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x000d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0022 \}]\l0x000f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0022 \}]\l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"max \< 1: \" A[Catch:\{ all \-\> 0x0022 \}]\l0x0014: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x0017: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x001a: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x001e: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x0022: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void okhttp3.Dispatcher.setMaxRequests((r3 'this' I:okhttp3.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

