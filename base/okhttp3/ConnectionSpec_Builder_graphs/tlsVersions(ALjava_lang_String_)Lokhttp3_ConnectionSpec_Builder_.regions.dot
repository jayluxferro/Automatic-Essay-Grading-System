digraph "CFG forokhttp3.ConnectionSpec.Builder.tlsVersions([Ljava\/lang\/String;)Lokhttp3\/ConnectionSpec$Builder;" {
subgraph cluster_Region_1713191935 {
label = "R(1:(1:9)(1:(2:4|5)(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1107362175 {
label = "IF [B:1:0x0002] THEN: R(1:9) ELSE: R(1:(2:4|5)(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.tls != true) goto L_0x0018\l}"];
subgraph cluster_Region_1999761875 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001f|throw new java.lang.IllegalStateException(\"no TLS versions for cleartext connections\")\l}"];
}
subgraph cluster_Region_1878940921 {
label = "R(1:(2:4|5)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1613975610 {
label = "IF [B:3:0x0005] THEN: R(2:4|5) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r2.length != 0) goto L_0x0007\l}"];
subgraph cluster_Region_720613306 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|r1.tlsVersions = (java.lang.String[]) r2.clone()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\l|return r1\l}"];
}
subgraph cluster_Region_1379167326 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0017|throw new java.lang.IllegalArgumentException(\"At least one TLS version is required\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018}"];
MethodNode[shape=record,label="{public okhttp3.ConnectionSpec$Builder okhttp3.ConnectionSpec.Builder.tlsVersions((r1v0 'this' okhttp3.ConnectionSpec$Builder A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

