digraph "CFG forokhttp3.Cache.2.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r4 I:okhttp3.Cache$2) okhttp3.Cache.2.nextUrl java.lang.String \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: IPUT  (r0 I:boolean), (r4 I:okhttp3.Cache$2) okhttp3.Cache.2.canRemove boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r2 I:java.util.Iterator\<okhttp3.internal.cache.DiskLruCache$Snapshot\>) = (r4 I:okhttp3.Cache$2) okhttp3.Cache.2.delegate java.util.Iterator \l0x000b: INVOKE  (r2 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r2 I:java.util.Iterator\<okhttp3.internal.cache.DiskLruCache$Snapshot\>) = (r4 I:okhttp3.Cache$2) okhttp3.Cache.2.delegate java.util.Iterator \l0x0013: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r2 I:okhttp3.internal.cache.DiskLruCache$Snapshot) = (okhttp3.internal.cache.DiskLruCache$Snapshot) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|SYNTHETIC\lSplitter:B:7:0x0019\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0019\l|0x0019: INVOKE  (r3 I:okio.Source) = \l  (r2 I:okhttp3.internal.cache.DiskLruCache$Snapshot)\l  (r0 I:int)\l okhttp3.internal.cache.DiskLruCache.Snapshot.getSource(int):okio.Source type: VIRTUAL A[Catch:\{ IOException \-\> 0x0030, all \-\> 0x002b \}, TRY_ENTER]\l0x001d: INVOKE  (r3 I:okio.BufferedSource) = (r3 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC A[Catch:\{ IOException \-\> 0x0030, all \-\> 0x002b \}]\l0x0021: INVOKE  (r3 I:java.lang.String) = (r3 I:okio.BufferedSource) okio.BufferedSource.readUtf8LineStrict():java.lang.String type: INTERFACE A[Catch:\{ IOException \-\> 0x0030, all \-\> 0x002b \}]\l0x0025: IPUT  (r3 I:java.lang.String), (r4 I:okhttp3.Cache$2) okhttp3.Cache.2.nextUrl java.lang.String A[Catch:\{ IOException \-\> 0x0030, all \-\> 0x002b \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r2 I:okhttp3.internal.cache.DiskLruCache$Snapshot) okhttp3.internal.cache.DiskLruCache.Snapshot.close():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|ExcHandler: all null\lSplitter:B:7:0x0019\l|0x002b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: INVOKE  (r2 I:okhttp3.internal.cache.DiskLruCache$Snapshot) okhttp3.internal.cache.DiskLruCache.Snapshot.close():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: INVOKE  (r2 I:okhttp3.internal.cache.DiskLruCache$Snapshot) okhttp3.internal.cache.DiskLruCache.Snapshot.close():void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:7:0x0019\l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean okhttp3.Cache.2.hasNext((r4 'this' I:okhttp3.Cache$2 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_15;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_8 -> Node_15;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_4;
Node_15 -> Node_14;
}

