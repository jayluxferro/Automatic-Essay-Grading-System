digraph "CFG forokhttp3.Response.peekBody(J)Lokhttp3\/ResponseBody;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.BufferedSource r0 = r3.body.source()\lr0.request(r4)\lokio.Buffer r0 = r0.buffer().clone()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|if ((r0.size() \> r4 ? 1 : (r0.size() == r4 ? 0 : \-1)) \<= 0) goto L_0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|okio.Buffer r1 = new okio.Buffer()\lr1.write(r0, r4)\lr0.clear()\lr0 = r1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|PHI: r0 \l  PHI: (r0v4 okio.Buffer) = (r0v3 okio.Buffer), (r0v5 okio.Buffer) binds: [B:1:0x0017, B:2:0x0019] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0033|RETURN\l|return okhttp3.ResponseBody.create(r3.body.contentType(), r0.size(), r0)\l}"];
MethodNode[shape=record,label="{public okhttp3.ResponseBody okhttp3.Response.peekBody((r3v0 'this' okhttp3.Response A[IMMUTABLE_TYPE, THIS]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

