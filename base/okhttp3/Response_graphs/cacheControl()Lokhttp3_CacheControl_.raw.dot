digraph "CFG forokhttp3.Response.cacheControl()Lokhttp3\/CacheControl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:okhttp3.CacheControl) = (r1 I:okhttp3.Response) okhttp3.Response.cacheControl okhttp3.CacheControl \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:okhttp3.Headers) = (r1 I:okhttp3.Response) okhttp3.Response.headers okhttp3.Headers \l0x0007: INVOKE  (r0 I:okhttp3.CacheControl) = (r0 I:okhttp3.Headers) okhttp3.CacheControl.parse(okhttp3.Headers):okhttp3.CacheControl type: STATIC \l0x000b: IPUT  (r0 I:okhttp3.CacheControl), (r1 I:okhttp3.Response) okhttp3.Response.cacheControl okhttp3.CacheControl \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r0 I:okhttp3.CacheControl) \l}"];
MethodNode[shape=record,label="{public okhttp3.CacheControl okhttp3.Response.cacheControl((r1 'this' I:okhttp3.Response A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4[style=dashed];
Node_3 -> Node_4;
}

