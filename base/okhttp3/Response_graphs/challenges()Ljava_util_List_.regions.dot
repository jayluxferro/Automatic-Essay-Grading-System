digraph "CFG forokhttp3.Response.challenges()Ljava\/util\/List;" {
subgraph cluster_Region_449039186 {
label = "R(2:(1:2)(1:(1:9)(1:5))|7) | DECL_VAR: java.lang.String null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_504042272 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: R(1:(1:9)(1:5))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.code == 401) goto L_0x0006\l}"];
subgraph cluster_Region_1209915248 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|java.lang.String r0 = \"WWW\-Authenticate\"\l}"];
}
subgraph cluster_Region_1441498962 {
label = "R(1:(1:9)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_686763421 {
label = "IF [B:4:0x000d] THEN: R(1:9) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r2.code != 407) goto L_0x001a\l}"];
subgraph cluster_Region_754117257 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|return java.util.Collections.emptyList()\l}"];
}
subgraph cluster_Region_1318192339 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|java.lang.String r0 = \"Proxy\-Authenticate\"\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0019|RETURN\l|return okhttp3.internal.http.HttpHeaders.parseChallenges(headers(), r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0009}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011|PHI: r0 \l  PHI: (r0v1 java.lang.String) = (r0v5 java.lang.String), (r0v6 java.lang.String) binds: [B:5:0x000f, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a}"];
MethodNode[shape=record,label="{public java.util.List\<okhttp3.Challenge\> okhttp3.Response.challenges((r2v0 'this' okhttp3.Response A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Lokhttp3\/Challenge;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

