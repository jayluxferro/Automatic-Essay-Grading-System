digraph "CFG forokhttp3.HttpUrl.newBuilder(Ljava\/lang\/String;)Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.HttpUrl$Builder) =  okhttp3.HttpUrl$Builder A[Catch:\{ IllegalArgumentException \-\> 0x000a \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.\<init\>():void type: DIRECT A[Catch:\{ IllegalArgumentException \-\> 0x000a \}]\l0x0005: INVOKE  (r2 I:okhttp3.HttpUrl$Builder) = \l  (r0 I:okhttp3.HttpUrl$Builder)\l  (r1 I:okhttp3.HttpUrl)\l  (r2 I:java.lang.String)\l okhttp3.HttpUrl.Builder.parse(okhttp3.HttpUrl, java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x000a \}]\l0x0008: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r2 I:okhttp3.HttpUrl$Builder) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r2 I:okhttp3.HttpUrl$Builder) \l}"];
MethodNode[shape=record,label="{public okhttp3.HttpUrl$Builder okhttp3.HttpUrl.newBuilder((r1 'this' I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_3 -> Node_5;
Node_4 -> Node_3;
}

