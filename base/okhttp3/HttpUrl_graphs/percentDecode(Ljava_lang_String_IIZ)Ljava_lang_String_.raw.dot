digraph "CFG forokhttp3.HttpUrl.percentDecode(Ljava\/lang\/String;IIZ)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: NEW_INSTANCE  (r1 I:okio.Buffer) =  okio.Buffer \l0x0017: INVOKE  (r1 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x001a: INVOKE  \l  (r1 I:okio.Buffer)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l  (r0 I:int)\l okio.Buffer.writeUtf8(java.lang.String, int, int):okio.Buffer type: VIRTUAL \l0x001d: INVOKE  \l  (r1 I:okio.Buffer)\l  (r3 I:java.lang.String)\l  (r0 I:int)\l  (r5 I:int)\l  (r6 I:boolean)\l okhttp3.HttpUrl.percentDecode(okio.Buffer, java.lang.String, int, int, boolean):void type: STATIC \l0x0020: INVOKE  (r3 I:java.lang.String) = (r1 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: RETURN  (r3 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r4 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String okhttp3.HttpUrl.percentDecode((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

