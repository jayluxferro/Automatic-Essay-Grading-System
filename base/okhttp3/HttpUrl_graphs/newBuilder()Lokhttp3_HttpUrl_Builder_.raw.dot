digraph "CFG forokhttp3.HttpUrl.newBuilder()Lokhttp3\/HttpUrl$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.HttpUrl$Builder) =  okhttp3.HttpUrl$Builder \l0x0002: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme java.lang.String \l0x0007: IPUT  (r1 I:java.lang.String), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.scheme java.lang.String \l0x0009: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.encodedUsername():java.lang.String type: VIRTUAL \l0x000d: IPUT  (r1 I:java.lang.String), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedUsername java.lang.String \l0x000f: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.encodedPassword():java.lang.String type: VIRTUAL \l0x0013: IPUT  (r1 I:java.lang.String), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPassword java.lang.String \l0x0015: IGET  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host java.lang.String \l0x0017: IPUT  (r1 I:java.lang.String), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.host java.lang.String \l0x0019: IGET  (r1 I:int) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port int \l0x001b: IGET  (r2 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme java.lang.String \l0x001d: INVOKE  (r2 I:int) = (r2 I:java.lang.String) okhttp3.HttpUrl.defaultPort(java.lang.String):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0023|0x0023: IGET  (r1 I:int) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IPUT  (r1 I:int), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.port int \l0x0029: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x002b: INVOKE  (r1 I:java.util.List) java.util.List.clear():void type: INTERFACE \l0x002e: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0030: INVOKE  (r2 I:java.util.List) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.encodedPathSegments():java.util.List type: VIRTUAL \l0x0034: INVOKE  (r1 I:java.util.List), (r2 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l0x0037: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.encodedQuery():java.lang.String type: VIRTUAL \l0x003b: INVOKE  (r0 I:okhttp3.HttpUrl$Builder), (r1 I:java.lang.String) okhttp3.HttpUrl.Builder.encodedQuery(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x003e: INVOKE  (r1 I:java.lang.String) = (r3 I:okhttp3.HttpUrl) okhttp3.HttpUrl.encodedFragment():java.lang.String type: VIRTUAL \l0x0042: IPUT  (r1 I:java.lang.String), (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x0044|0x0044: RETURN  (r0 I:okhttp3.HttpUrl$Builder) \l}"];
MethodNode[shape=record,label="{public okhttp3.HttpUrl$Builder okhttp3.HttpUrl.newBuilder((r3 'this' I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

