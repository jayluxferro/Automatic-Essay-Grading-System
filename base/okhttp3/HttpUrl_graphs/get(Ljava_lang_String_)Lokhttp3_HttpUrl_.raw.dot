digraph "CFG forokhttp3.HttpUrl.get(Ljava\/lang\/String;)Lokhttp3\/HttpUrl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.HttpUrl$Builder) =  okhttp3.HttpUrl$Builder \l0x0002: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  (r2 I:okhttp3.HttpUrl$Builder) = \l  (r0 I:okhttp3.HttpUrl$Builder)\l  (r1 I:okhttp3.HttpUrl)\l  (r2 I:java.lang.String)\l okhttp3.HttpUrl.Builder.parse(okhttp3.HttpUrl, java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x000a: INVOKE  (r2 I:okhttp3.HttpUrl) = (r2 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.build():okhttp3.HttpUrl type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: RETURN  (r2 I:okhttp3.HttpUrl) \l}"];
MethodNode[shape=record,label="{public static okhttp3.HttpUrl okhttp3.HttpUrl.get((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

