digraph "CFG forokhttp3.HttpUrl.queryStringToNamesAndValues(Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r2 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:13:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (38 ?[int, float, short, byte, char]) \l0x000e: INVOKE  (r2 I:int) = (r5 I:java.lang.String), (r2 I:int), (r1 I:int) java.lang.String.indexOf(int, int):int type: VIRTUAL \l0x0012: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r2 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST  (r4 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l0x001b: INVOKE  (r4 I:int) = (r5 I:java.lang.String), (r4 I:int), (r1 I:int) java.lang.String.indexOf(int, int):int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r4 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.String), (r1 I:int), (r4 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0028: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x002b: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x002d: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.String), (r4 I:int), (r2 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0031: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.String), (r1 I:int), (r2 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0039: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x003c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003d: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{static java.util.List\<java.lang.String\> okhttp3.HttpUrl.queryStringToNamesAndValues((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

