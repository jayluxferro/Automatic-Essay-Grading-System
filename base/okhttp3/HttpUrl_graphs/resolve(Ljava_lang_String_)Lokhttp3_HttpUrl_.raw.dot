digraph "CFG forokhttp3.HttpUrl.resolve(Ljava\/lang\/String;)Lokhttp3\/HttpUrl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:okhttp3.HttpUrl$Builder) = (r0 I:okhttp3.HttpUrl), (r1 I:java.lang.String) okhttp3.HttpUrl.newBuilder(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:okhttp3.HttpUrl) = (r1 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.build():okhttp3.HttpUrl type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r1 I:okhttp3.HttpUrl) \l}"];
MethodNode[shape=record,label="{public okhttp3.HttpUrl okhttp3.HttpUrl.resolve((r0 'this' I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

