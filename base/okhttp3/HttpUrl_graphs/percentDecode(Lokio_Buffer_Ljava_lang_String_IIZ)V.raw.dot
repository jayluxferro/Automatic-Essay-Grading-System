digraph "CFG forokhttp3.HttpUrl.percentDecode(Lokio\/Buffer;Ljava\/lang\/String;IIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r6 I:java.lang.String), (r7 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: ARITH  (r1 I:int) = (r7 I:int) + (2 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r2 I:int) = (r7 I:int) + (1 int) \l0x0010: INVOKE  (r2 I:char) = (r6 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0014: INVOKE  (r2 I:int) = (r2 I:char) okhttp3.internal.Util.decodeHexDigit(char):int type: STATIC \l0x0018: INVOKE  (r3 I:char) = (r6 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001c: INVOKE  (r3 I:int) = (r3 I:char) okhttp3.internal.Util.decodeHexDigit(char):int type: STATIC \l0x0020: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: ARITH  (r7 I:int) = (r2 I:int) \<\< (4 int) \l0x0027: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int) \l0x0028: INVOKE  (r5 I:okio.Buffer), (r7 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x002b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: CONST  (r1 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0035: INVOKE  (r5 I:okio.Buffer), (r1 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: INVOKE  (r5 I:okio.Buffer), (r0 I:int) okio.Buffer.writeUtf8CodePoint(int):okio.Buffer type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: INVOKE  (r0 I:int) = (r0 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x0040: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.HttpUrl.percentDecode((r5 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_0;
}

