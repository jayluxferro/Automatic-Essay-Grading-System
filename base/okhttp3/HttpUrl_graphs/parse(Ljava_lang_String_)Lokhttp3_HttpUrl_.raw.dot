digraph "CFG forokhttp3.HttpUrl.parse(Ljava\/lang\/String;)Lokhttp3\/HttpUrl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:java.lang.String) okhttp3.HttpUrl.get(java.lang.String):okhttp3.HttpUrl type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x0005 \}, TRY_ENTER]\l0x0003: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r0 I:okhttp3.HttpUrl) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: RETURN  (r0 I:okhttp3.HttpUrl) \l}"];
MethodNode[shape=record,label="{public static okhttp3.HttpUrl okhttp3.HttpUrl.parse((r0 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, javax.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_3 -> Node_5;
Node_4 -> Node_3;
}

