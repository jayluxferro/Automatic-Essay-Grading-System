digraph "CFG forokhttp3.HttpUrl.canonicalize(Lokio\/Buffer;Ljava\/lang\/String;IILjava\/lang\/String;ZZZZLjava\/nio\/charset\/Charset;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:48:0x009e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0097 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0097 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0097 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001b \l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002d \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0026 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0023|0x0023: CONST_STR  (r2 I:java.lang.String) =  \"+\" \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: CONST_STR  (r2 I:java.lang.String) =  \"%2B\" \l}"];
Node_19 [shape=record,label="{19\:\ 0x0028|0x0028: INVOKE  (r6 I:okio.Buffer), (r2 I:java.lang.String) okio.Buffer.writeUtf8(java.lang.String):okio.Buffer type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x002d|0x002d: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x002f: CONST  (r3 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:36:0x0055 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0033|0x0033: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0055 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0037|0x0037: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0039|0x0039: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:27:0x003d \l}"];
Node_26 [shape=record,label="{26\:\ 0x003b|0x003b: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0055 \l}"];
Node_27 [shape=record,label="{27\:\ 0x003d|0x003d: INVOKE  (r2 I:int) = (r10 I:java.lang.String), (r1 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0041: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0042|0x0042: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0055 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0044|0x0044: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0051 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0046|0x0046: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0055 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0048|0x0048: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0051 \l}"];
Node_32 [shape=record,label="{32\:\ 0x004a|0x004a: INVOKE  (r2 I:boolean) = (r7 I:java.lang.String), (r8 I:int), (r9 I:int) okhttp3.HttpUrl.percentEncoded(java.lang.String, int, int):boolean type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x004e|0x004e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0051 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0051|0x0051: INVOKE  (r6 I:okio.Buffer), (r1 I:int) okio.Buffer.writeUtf8CodePoint(int):okio.Buffer type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x0055|0x0055: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x005c \l}"];
Node_37 [shape=record,label="{37\:\ 0x0057|0x0057: NEW_INSTANCE  (r0 I:okio.Buffer) =  okio.Buffer \l0x0059: INVOKE  (r0 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l}"];
Node_38 [shape=record,label="{38\:\ 0x005c|0x005c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0070 \l}"];
Node_39 [shape=record,label="{39\:\ 0x005e|0x005e: SGET  (r2 I:java.nio.charset.Charset) =  okhttp3.internal.Util.UTF_8 java.nio.charset.Charset \l0x0060: INVOKE  (r2 I:boolean) = (r15 I:java.nio.charset.Charset), (r2 I:java.lang.Object) java.nio.charset.Charset.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x0064|0x0064: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0067 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0067|0x0067: INVOKE  (r2 I:int) = (r1 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x006b: ARITH  (r2 I:int) = (r2 I:int) + (r8 I:int) \l0x006c: INVOKE  \l  (r0 I:okio.Buffer)\l  (r7 I:java.lang.String)\l  (r8 I:int)\l  (r2 I:int)\l  (r15 I:java.nio.charset.Charset)\l okio.Buffer.writeString(java.lang.String, int, int, java.nio.charset.Charset):okio.Buffer type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x0070|0x0070: INVOKE  (r0 I:okio.Buffer), (r1 I:int) okio.Buffer.writeUtf8CodePoint(int):okio.Buffer type: VIRTUAL \l}"];
Node_44 [shape=record,label="{44\:\ 0x0073|0x0073: INVOKE  (r2 I:boolean) = (r0 I:okio.Buffer) okio.Buffer.exhausted():boolean type: VIRTUAL \l}"];
Node_45 [shape=record,label="{45\:\ 0x0077|0x0077: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0097 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0079|0x0079: INVOKE  (r2 I:byte) = (r0 I:okio.Buffer) okio.Buffer.readByte():byte type: VIRTUAL \l0x007d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x007f: INVOKE  (r6 I:okio.Buffer), (r3 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x0082: SGET  (r4 I:char[]) =  okhttp3.HttpUrl.HEX_DIGITS char[] \l0x0084: ARITH  (r5 I:int) = (r2 I:int) \>\> (4 int) \l0x0086: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0088: AGET  (r4 I:char A[IMMUTABLE_TYPE]) = \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x008a: INVOKE  (r6 I:okio.Buffer), (r4 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l0x008d: SGET  (r4 I:char[]) =  okhttp3.HttpUrl.HEX_DIGITS char[] \l0x008f: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0091: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0093: INVOKE  (r6 I:okio.Buffer), (r2 I:int) okio.Buffer.writeByte(int):okio.Buffer type: VIRTUAL \l}"];
Node_47 [shape=record,label="{47\:\ 0x0097|0x0097: INVOKE  (r1 I:int) = (r1 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x009b: ARITH  (r8 I:int) = (r8 I:int) + (r1 I:int) \l}"];
Node_48 [shape=record,label="{48\:\ 0x009e|0x009e: RETURN   \l}"];
MethodNode[shape=record,label="{static void okhttp3.HttpUrl.canonicalize((r6 I:okio.Buffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_48;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_47;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_47;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_47;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_47[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_47;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_36;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_36;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_36;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_36;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_35;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_36;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_44;
Node_47 -> Node_1;
}

