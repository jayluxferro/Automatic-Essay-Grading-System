digraph "CFG forokhttp3.HttpUrl.encodedPathSegments()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l0x0002: IGET  (r1 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme java.lang.String \l0x0004: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0008: ARITH  (r1 I:int) = (r1 I:int) + (3 int) \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l0x000c: INVOKE  (r0 I:int) = (r0 I:java.lang.String), (r2 I:int), (r1 I:int) java.lang.String.indexOf(int, int):int type: VIRTUAL \l0x0010: IGET  (r1 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l0x0012: IGET  (r3 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l0x0014: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0018: CONST_STR  (r4 I:java.lang.String) =  \"?#\" \l0x001a: INVOKE  (r1 I:int) = \l  (r1 I:java.lang.String)\l  (r0 I:int)\l  (r3 I:int)\l  (r4 I:java.lang.String)\l okhttp3.internal.Util.delimiterOffset(java.lang.String, int, int, java.lang.String):int type: STATIC \l0x001e: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x0020: INVOKE  (r3 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|0x0023: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0025|0x0025: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0027: IGET  (r4 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l0x0029: INVOKE  (r4 I:int) = \l  (r4 I:java.lang.String)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:char)\l okhttp3.internal.Util.delimiterOffset(java.lang.String, int, int, char):int type: STATIC \l0x002d: IGET  (r5 I:java.lang.String) = (r6 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l0x002f: INVOKE  (r0 I:java.lang.String) = (r5 I:java.lang.String), (r0 I:int), (r4 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0033: INVOKE  (r3 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0036: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0038|0x0038: RETURN  (r3 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public java.util.List\<java.lang.String\> okhttp3.HttpUrl.encodedPathSegments((r6 'this' I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

