digraph "CFG forokhttp3.HttpUrl.percentDecode(Ljava\/util\/List;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5.size()\ljava.util.ArrayList r1 = new java.util.ArrayList(r0)\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:6:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:6:0x001a\l|if (r2 \>= r0) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|java.lang.String r3 = r5.get(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r3 == null) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|java.lang.String r3 = percentDecode(r3, r6)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|r3 = null\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|LOOP_END\lPHI: r3 \l  PHI: (r3v2 java.lang.String) = (r3v3 java.lang.String), (r3v4 java.lang.String) binds: [B:10:0x001a, B:11:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:6:0x001a\l|r1.add(r3)\lint r2 = r2 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020}"];
Node_8 [shape=record,label="{8\:\ 0x0024|RETURN\l|return java.util.Collections.unmodifiableList(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<java.lang.String\> okhttp3.HttpUrl.percentDecode((r4v0 'this' okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;Z), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_10;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_6;
Node_11 -> Node_6;
}

