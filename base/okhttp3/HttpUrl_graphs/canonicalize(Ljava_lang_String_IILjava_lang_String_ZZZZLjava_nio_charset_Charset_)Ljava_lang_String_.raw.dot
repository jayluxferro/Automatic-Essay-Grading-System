digraph "CFG forokhttp3.HttpUrl.canonicalize(Ljava\/lang\/String;IILjava\/lang\/String;ZZZZLjava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0001: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:25:0x0059 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r11 I:java.lang.String), (r2 I:int) java.lang.String.codePointAt(int):int type: VIRTUAL \l0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:22:0x003a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r5 I:int) = (r14 I:java.lang.String), (r0 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x001c: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: CONST  (r5 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|0x0025: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: INVOKE  (r7 I:boolean) = (r11 I:java.lang.String), (r2 I:int), (r13 I:int) okhttp3.HttpUrl.percentEncoded(java.lang.String, int, int):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: CONST  (r7 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|0x0031: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|0x0034: INVOKE  (r0 I:int) = (r0 I:int) java.lang.Character.charCount(int):int type: STATIC \l0x0038: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|0x003a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|0x003b: NEW_INSTANCE  (r10 I:okio.Buffer) =  okio.Buffer \l0x003d: INVOKE  (r10 I:okio.Buffer) okio.Buffer.\<init\>():void type: DIRECT \l0x0040: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: INVOKE  \l  (r10 I:okio.Buffer)\l  (r11 I:java.lang.String)\l  (r12 I:int)\l  (r2 I:int)\l okio.Buffer.writeUtf8(java.lang.String, int, int):okio.Buffer type: VIRTUAL \l0x0044: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0045: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0046: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0048: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0049: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004f: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0051: INVOKE  \l  (r0 I:okio.Buffer)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:java.lang.String)\l  (r5 I:boolean)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:boolean)\l  (r9 I:java.nio.charset.Charset)\l okhttp3.HttpUrl.canonicalize(okio.Buffer, java.lang.String, int, int, java.lang.String, boolean, boolean, boolean, boolean, java.nio.charset.Charset):void type: STATIC \l0x0054: INVOKE  (r0 I:java.lang.String) = (r10 I:okio.Buffer) okio.Buffer.readUtf8():java.lang.String type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|0x0058: RETURN  (r0 I:java.lang.String) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|0x0059: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: INVOKE  (r0 I:java.lang.String) = (r11 I:java.lang.String), (r12 I:int), (r13 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x005e|0x005e: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String okhttp3.HttpUrl.canonicalize((r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_22;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_22;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_22;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_23;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_21;
Node_19 -> Node_23[style=dashed];
Node_21 -> Node_1;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

