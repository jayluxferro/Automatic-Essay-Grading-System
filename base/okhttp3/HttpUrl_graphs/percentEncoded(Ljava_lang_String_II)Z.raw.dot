digraph "CFG forokhttp3.HttpUrl.percentEncoded(Ljava\/lang\/String;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r4 I:int) + (2 int) \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r5 I:char) = (r3 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: ARITH  (r4 I:int) = (r4 I:int) + (r1 I:int) \l0x000e: INVOKE  (r4 I:char) = (r3 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0012: INVOKE  (r4 I:int) = (r4 I:char) okhttp3.internal.Util.decodeHexDigit(char):int type: STATIC \l0x0016: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r3 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001d: INVOKE  (r3 I:int) = (r3 I:char) okhttp3.internal.Util.decodeHexDigit(char):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{static boolean okhttp3.HttpUrl.percentEncoded((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
}

