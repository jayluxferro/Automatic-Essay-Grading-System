digraph "CFG forokhttp3.HttpUrl.\<init\>(Lokhttp3\/HttpUrl$Builder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.scheme java.lang.String \l0x0005: IPUT  (r0 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.scheme java.lang.String \l0x0007: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedUsername java.lang.String \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:boolean) okhttp3.HttpUrl.percentDecode(java.lang.String, boolean):java.lang.String type: STATIC \l0x000e: IPUT  (r0 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.username java.lang.String \l0x0010: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPassword java.lang.String \l0x0012: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:boolean) okhttp3.HttpUrl.percentDecode(java.lang.String, boolean):java.lang.String type: STATIC \l0x0016: IPUT  (r0 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.password java.lang.String \l0x0018: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.host java.lang.String \l0x001a: IPUT  (r0 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.host java.lang.String \l0x001c: INVOKE  (r0 I:int) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.effectivePort():int type: VIRTUAL \l0x0020: IPUT  (r0 I:int), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.port int \l0x0022: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedPathSegments java.util.List \l0x0024: INVOKE  (r0 I:java.util.List) = \l  (r4 I:okhttp3.HttpUrl)\l  (r0 I:java.util.List)\l  (r1 I:boolean)\l okhttp3.HttpUrl.percentDecode(java.util.List, boolean):java.util.List type: DIRECT \l0x0028: IPUT  \l  (r0 I:java.util.List\<java.lang.String\>)\l  (r4 I:okhttp3.HttpUrl)\l okhttp3.HttpUrl.pathSegments java.util.List \l0x002a: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l0x002c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x002f|0x002f: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedQueryNamesAndValues java.util.List \l0x0031: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0032: INVOKE  (r0 I:java.util.List) = \l  (r4 I:okhttp3.HttpUrl)\l  (r0 I:java.util.List)\l  (r3 I:boolean)\l okhttp3.HttpUrl.percentDecode(java.util.List, boolean):java.util.List type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0037|0x0037: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0038|0x0038: IPUT  \l  (r0 I:java.util.List\<java.lang.String\>)\l  (r4 I:okhttp3.HttpUrl)\l okhttp3.HttpUrl.queryNamesAndValues java.util.List \l0x003a: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0044 \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: IGET  (r0 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.encodedFragment java.lang.String \l0x0040: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:boolean) okhttp3.HttpUrl.percentDecode(java.lang.String, boolean):java.lang.String type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: IPUT  (r2 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.fragment java.lang.String \l0x0046: INVOKE  (r5 I:java.lang.String) = (r5 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.toString():java.lang.String type: VIRTUAL \l0x004a: IPUT  (r5 I:java.lang.String), (r4 I:okhttp3.HttpUrl) okhttp3.HttpUrl.url java.lang.String \l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|0x004c: RETURN   \l}"];
MethodNode[shape=record,label="{void okhttp3.HttpUrl.\<init\>((r4 'this' I:okhttp3.HttpUrl A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.HttpUrl$Builder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

