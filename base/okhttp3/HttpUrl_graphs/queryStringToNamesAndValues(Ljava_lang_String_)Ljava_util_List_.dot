digraph "CFG forokhttp3.HttpUrl.queryStringToNamesAndValues(Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:11:0x0040] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:11:0x0040\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r1 \> r5.length()) goto L_0x0043\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|int r2 = r5.indexOf(38, r1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r2 != \-1) goto L_0x0019\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|int r2 = r5.length()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|PHI: r2 \l  PHI: (r2v3 int) = (r2v2 int), (r2v4 int) binds: [B:4:0x0013, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r5.indexOf(61, r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if (r4 == \-1) goto L_0x0035\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r4 \<= r2) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|r0.add(r5.substring(r1, r4))\lr0.add(r5.substring(r4 + 1, r2))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|r0.add(r5.substring(r1, r2))\lr0.add((java.lang.Object) null)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:11:0x0040\l|int r1 = r2 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|RETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.util.List\<java.lang.String\> okhttp3.HttpUrl.queryStringToNamesAndValues((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_14;
Node_11 -> Node_1;
Node_13 -> Node_12;
Node_14 -> Node_11;
Node_15 -> Node_11;
}

