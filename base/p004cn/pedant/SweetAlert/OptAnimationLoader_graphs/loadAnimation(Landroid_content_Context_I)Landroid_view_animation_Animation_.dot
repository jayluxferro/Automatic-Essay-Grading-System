digraph "CFG forcn.pedant.SweetAlert.OptAnimationLoader.loadAnimation(Landroid\/content\/Context;I)Landroid\/view\/animation\/Animation;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\lSplitter:B:1:0x0001\l|android.content.res.XmlResourceParser r1 = r5.getResources().getAnimation(r6)     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\landroid.view.animation.Animation r3 = createAnimationFromXml(r5, r1)     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r1 == null) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r1.close()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|RETURN\l|return r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|PHI: r1 \l  PHI: (r1v3 'parser' android.content.res.XmlResourceParser) = (r1v0 'parser' android.content.res.XmlResourceParser), (r1v4 'parser' android.content.res.XmlResourceParser) binds: [B:1:0x0001, B:2:?] A[DONT_GENERATE, DONT_INLINE]\lExcHandler: XmlPullParserException (r0v1 'ex' org.xmlpull.v1.XmlPullParserException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|org.xmlpull.v1.XmlPullParserException r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|SYNTHETIC\lSplitter:B:7:0x0014\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\lSplitter:B:7:0x0014\l|android.content.res.Resources$NotFoundException r2 = new android.content.res.Resources.NotFoundException(new java.lang.StringBuilder().append(\"Can't load animation resource ID #0x\").append(java.lang.Integer.toHexString(r6)).toString())     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\lr2.initCause(r0)     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l|throw r2     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|PHI: r1 \l  PHI: (r1v2 'parser' android.content.res.XmlResourceParser) = (r1v1 'parser' android.content.res.XmlResourceParser), (r1v3 'parser' android.content.res.XmlResourceParser) binds: [B:15:0x003c, B:7:0x0014] A[DONT_GENERATE, DONT_INLINE]\lExcHandler: all (r3v4 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x0014\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|if (r1 == null) goto L_0x003a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|r1.close()\l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|throw r3\l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|PHI: r1 \l  PHI: (r1v1 'parser' android.content.res.XmlResourceParser) = (r1v0 'parser' android.content.res.XmlResourceParser), (r1v4 'parser' android.content.res.XmlResourceParser) binds: [B:1:0x0001, B:2:?] A[DONT_GENERATE, DONT_INLINE]\lExcHandler: IOException (r0v0 'ex' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.io.IOException r0 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|SYNTHETIC\lSplitter:B:15:0x003c\l}"];
Node_16 [shape=record,label="{16\:\ ?|Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\lSplitter:B:15:0x003c\l|android.content.res.Resources$NotFoundException r2 = new android.content.res.Resources.NotFoundException(new java.lang.StringBuilder().append(\"Can't load animation resource ID #0x\").append(java.lang.Integer.toHexString(r6)).toString())     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\lr2.initCause(r0)     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l|throw r2     \/\/ Catch:\{ XmlPullParserException \-\> 0x0013, IOException \-\> 0x003b, all \-\> 0x0034 \}\l}"];
MethodNode[shape=record,label="{public static android.view.animation.Animation cn.pedant.SweetAlert.OptAnimationLoader.loadAnimation((r5v0 'context' android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'id' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.content.res.Resources$NotFoundException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_14;
Node_2 -> Node_6;
Node_2 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_17;
}

