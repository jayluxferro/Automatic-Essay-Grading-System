digraph "CFG forcn.pedant.SweetAlert.ProgressHelper.setProgress(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  (r0 I:boolean), (r1 I:cn.pedant.SweetAlert.ProgressHelper) cn.pedant.SweetAlert.ProgressHelper.mIsInstantProgress boolean \l0x0003: IPUT  \l  (r2 I:float A[D('progress' float)])\l  (r1 I:cn.pedant.SweetAlert.ProgressHelper)\l cn.pedant.SweetAlert.ProgressHelper.mProgressVal float \l0x0005: INVOKE  (r1 I:cn.pedant.SweetAlert.ProgressHelper) cn.pedant.SweetAlert.ProgressHelper.updatePropsIfNeed():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: RETURN   \l}"];
MethodNode[shape=record,label="{public void cn.pedant.SweetAlert.ProgressHelper.setProgress((r1 'this' I:cn.pedant.SweetAlert.ProgressHelper A[IMMUTABLE_TYPE, THIS]), (r2 I:float A[D('progress' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0008: r2 'progress' float\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

