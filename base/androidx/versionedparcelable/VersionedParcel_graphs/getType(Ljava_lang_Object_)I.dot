digraph "CFG forandroidx.versionedparcelable.VersionedParcel.getType(Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r3 instanceof java.lang.String) == false) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return 4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if ((r3 instanceof android.os.Parcelable) == false) goto L_0x000c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|RETURN\l|return 2\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if ((r3 instanceof androidx.versionedparcelable.VersionedParcelable) == false) goto L_0x0012\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|RETURN\l|return 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012}"];
Node_10 [shape=record,label="{10\:\ 0x0014|if ((r3 instanceof java.io.Serializable) == false) goto L_0x0018\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|RETURN\l|return 3\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018}"];
Node_13 [shape=record,label="{13\:\ 0x001a|if ((r3 instanceof android.os.IBinder) == false) goto L_0x001e\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|RETURN\l|return 5\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r3.getClass().getName())\lr1.append(\" cannot be VersionedParcelled\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{private int androidx.versionedparcelable.VersionedParcel.getType((r2v0 'this' androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r3v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
}

