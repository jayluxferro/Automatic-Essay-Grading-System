digraph "CFG forandroidx.versionedparcelable.VersionedParcel.readSerializable()Ljava\/io\/Serializable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r5 I:androidx.versionedparcelable.VersionedParcel) androidx.versionedparcelable.VersionedParcel.readString():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:java.io.Serializable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r1 I:byte[]) = (r5 I:androidx.versionedparcelable.VersionedParcel) androidx.versionedparcelable.VersionedParcel.readByteArray():byte[] type: VIRTUAL \l0x000c: NEW_INSTANCE  (r2 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream \l0x000e: INVOKE  (r2 I:java.io.ByteArrayInputStream), (r1 I:byte[]) java.io.ByteArrayInputStream.\<init\>(byte[]):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|SYNTHETIC\lSplitter:B:5:0x0011\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0011\l|0x0011: NEW_INSTANCE  (r1 I:androidx.versionedparcelable.VersionedParcel$1) =  androidx.versionedparcelable.VersionedParcel$1 A[Catch:\{ IOException \-\> 0x003a, ClassNotFoundException \-\> 0x001d \}, TRY_ENTER]\l0x0013: INVOKE  \l  (r1 I:androidx.versionedparcelable.VersionedParcel$1)\l  (r5 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:java.io.InputStream)\l androidx.versionedparcelable.VersionedParcel.1.\<init\>(androidx.versionedparcelable.VersionedParcel, java.io.InputStream):void type: DIRECT A[Catch:\{ IOException \-\> 0x003a, ClassNotFoundException \-\> 0x001d \}]\l0x0016: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.io.ObjectInputStream) java.io.ObjectInputStream.readObject():java.lang.Object type: VIRTUAL A[Catch:\{ IOException \-\> 0x003a, ClassNotFoundException \-\> 0x001d \}]\l0x001a: CHECK_CAST  (r1 I:java.io.Serializable) = (java.io.Serializable) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ IOException \-\> 0x003a, ClassNotFoundException \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r1 I:java.io.Serializable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|ExcHandler: ClassNotFoundException null\lSplitter:B:5:0x0011\l|0x001d: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: NEW_INSTANCE  (r2 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0020: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r4 I:java.lang.String) =  \"VersionedParcelable encountered ClassNotFoundException reading a Serializable object (name = \" \l0x0027: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: CONST_STR  (r0 I:java.lang.String) =  \")\" \l0x002f: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0036: INVOKE  \l  (r2 I:java.lang.RuntimeException)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|ExcHandler: IOException null\lSplitter:B:5:0x0011\l|0x003a: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: NEW_INSTANCE  (r2 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x003d: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003f: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0042: CONST_STR  (r4 I:java.lang.String) =  \"VersionedParcelable encountered IOException reading a Serializable object (name = \" \l0x0044: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004a: CONST_STR  (r0 I:java.lang.String) =  \")\" \l0x004c: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004f: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0053: INVOKE  \l  (r2 I:java.lang.RuntimeException)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0056|0x0056: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected java.io.Serializable androidx.versionedparcelable.VersionedParcel.readSerializable((r5 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

