digraph "CFG forandroidx.versionedparcelable.VersionedParcel.getType(Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r3 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) android.os.Parcelable \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: RETURN  (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) androidx.versionedparcelable.VersionedParcelable \l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0012 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: RETURN  (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0012|0x0012: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.io.Serializable \l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0018 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|0x0017: RETURN  (r3 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|0x0018: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) android.os.IBinder \l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x001e \l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|0x001c: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|0x001d: RETURN  (r3 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0020: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0029: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0030: CONST_STR  (r3 I:java.lang.String) =  \" cannot be VersionedParcelled\" \l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0035: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0039: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|0x003c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private int androidx.versionedparcelable.VersionedParcel.getType((r2 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

