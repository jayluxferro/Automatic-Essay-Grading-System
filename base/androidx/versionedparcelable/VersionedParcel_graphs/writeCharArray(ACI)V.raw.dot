digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeCharArray([CI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:androidx.versionedparcelable.VersionedParcel)\l  (r4 I:int)\l androidx.versionedparcelable.VersionedParcel.setOutputField(int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x0006: INVOKE  \l  (r2 I:androidx.versionedparcelable.VersionedParcel)\l  (r4 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r3 I:char[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x000e: INVOKE  \l  (r2 I:androidx.versionedparcelable.VersionedParcel)\l  (r1 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0015: INVOKE  \l  (r2 I:androidx.versionedparcelable.VersionedParcel)\l  (r3 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcel.writeCharArray((r2 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r3 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_5 -> Node_6;
}

