digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeArray([Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r4 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0008: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0010: INVOKE  (r2 I:int) = \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:java.lang.Object)\l androidx.versionedparcelable.VersionedParcel.getType(java.lang.Object):int type: DIRECT \l0x0014: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:int)\l androidx.versionedparcelable.VersionedParcel.writeInt(int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5] t:[0x004b, 0x003f, 0x0033, 0x0027, 0x001b] \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001f: CHECK_CAST  (r2 I:android.os.IBinder) = (android.os.IBinder) (r2 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:android.os.IBinder)\l androidx.versionedparcelable.VersionedParcel.writeStrongBinder(android.os.IBinder):void type: VIRTUAL \l0x0024: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x002b: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:java.lang.String)\l androidx.versionedparcelable.VersionedParcel.writeString(java.lang.String):void type: VIRTUAL \l0x0030: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0037: CHECK_CAST  (r2 I:java.io.Serializable) = (java.io.Serializable) (r2 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:java.io.Serializable)\l androidx.versionedparcelable.VersionedParcel.writeSerializable(java.io.Serializable):void type: DIRECT \l0x003c: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0043: CHECK_CAST  (r2 I:android.os.Parcelable) = (android.os.Parcelable) (r2 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:android.os.Parcelable)\l androidx.versionedparcelable.VersionedParcel.writeParcelable(android.os.Parcelable):void type: VIRTUAL \l0x0048: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x004f: CHECK_CAST  (r2 I:androidx.versionedparcelable.VersionedParcelable) = (androidx.versionedparcelable.VersionedParcelable) (r2 I:?[OBJECT, ARRAY]) \l0x0051: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcel)\l  (r2 I:androidx.versionedparcelable.VersionedParcelable)\l androidx.versionedparcelable.VersionedParcel.writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):void type: VIRTUAL \l0x0054: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: RETURN   \l}"];
MethodNode[shape=record,label="{protected void androidx.versionedparcelable.VersionedParcel.writeArray((r3 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r4 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10;
Node_6 -> Node_12;
Node_6 -> Node_14;
Node_6 -> Node_16;
Node_6 -> Node_18;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_8;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_10;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_12;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_14;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_16;
}

