digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeCharArray([CI)V" {
subgraph cluster_Region_207943351 {
label = "R(2:0|(2:(3:2|(1:4)|8)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|setOutputField(r4)\l}"];
subgraph cluster_Region_1941595761 {
label = "R(2:(3:2|(1:4)|8)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1884706539 {
label = "IF [B:1:0x0003] THEN: R(3:2|(1:4)|8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3 != null) goto L_0x0005\l}"];
subgraph cluster_Region_1360454408 {
label = "R(3:2|(1:4)|8)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|int int r4 = r3.length\lwriteInt(r4)\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_2014413888 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:2:0x0005, B:4:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000a\-\>B:4:0x000c\l|if (r0 \< r4) goto L_0x000c\l}"];
subgraph cluster_Region_310117389 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|LOOP_END\lLOOP:0: B:3:0x000a\-\>B:4:0x000c\l|writeInt(r1)\lr0++\l}"];
}
}
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1399522491 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|writeInt(\-1)\l}"];
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0018|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcel.writeCharArray((r2v0 'this' androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r3v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_3;
Node_5 -> Node_7;
Node_6 -> Node_8;
}

