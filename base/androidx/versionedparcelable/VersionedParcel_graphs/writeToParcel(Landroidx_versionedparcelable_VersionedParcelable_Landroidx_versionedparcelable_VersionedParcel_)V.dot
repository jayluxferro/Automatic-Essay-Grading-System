digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeToParcel(Landroidx\/versionedparcelable\/VersionedParcelable;Landroidx\/versionedparcelable\/VersionedParcel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IllegalAccessException \-\> 0x004e, InvocationTargetException \-\> 0x0036, NoSuchMethodException \-\> 0x002d, ClassNotFoundException \-\> 0x0024 \}\lSplitter:B:0:0x0000\l|java.lang.Class r0 = findParcelClass(r7)     \/\/ Catch:\{ IllegalAccessException \-\> 0x004e, InvocationTargetException \-\> 0x0036, NoSuchMethodException \-\> 0x002d, ClassNotFoundException \-\> 0x0024 \}\ljava.lang.Class[] r3 = new java.lang.Class[]\{r7.getClass(), androidx.versionedparcelable.VersionedParcel.class\}\ljava.lang.reflect.Method r0 = r0.getDeclaredMethod(\"write\", r3)     \/\/ Catch:\{ IllegalAccessException \-\> 0x004e, InvocationTargetException \-\> 0x0036, NoSuchMethodException \-\> 0x002d, ClassNotFoundException \-\> 0x0024 \}\ljava.lang.Object[] r2 = new java.lang.Object[]\{r7, r8\}\lr0.invoke((java.lang.Object) null, r2)     \/\/ Catch:\{ IllegalAccessException \-\> 0x004e, InvocationTargetException \-\> 0x0036, NoSuchMethodException \-\> 0x002d, ClassNotFoundException \-\> 0x0024 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0023|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|ExcHandler: ClassNotFoundException (r7v6 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.ClassNotFoundException r7 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025}"];
Node_5 [shape=record,label="{5\:\ 0x002c|throw new java.lang.RuntimeException(\"VersionedParcel encountered ClassNotFoundException\", r7)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|ExcHandler: NoSuchMethodException (r7v5 'e' java.lang.NoSuchMethodException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.NoSuchMethodException r7 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e}"];
Node_8 [shape=record,label="{8\:\ 0x0035|throw new java.lang.RuntimeException(\"VersionedParcel encountered NoSuchMethodException\", r7)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|ExcHandler: InvocationTargetException (r7v2 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.reflect.InvocationTargetException r7 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037}"];
Node_11 [shape=record,label="{11\:\ 0x003d|if ((r7.getCause() instanceof java.lang.RuntimeException) == false) goto L_0x0046\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f}"];
Node_13 [shape=record,label="{13\:\ 0x0045|throw ((java.lang.RuntimeException) r7.getCause())\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046}"];
Node_15 [shape=record,label="{15\:\ 0x004d|throw new java.lang.RuntimeException(\"VersionedParcel encountered InvocationTargetException\", r7)\l}"];
Node_16 [shape=record,label="{16\:\ 0x004e|ExcHandler: IllegalAccessException (r7v1 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.IllegalAccessException r7 = move\-exception\l}"];
Node_17 [shape=record,label="{17\:\ 0x004f}"];
Node_18 [shape=record,label="{18\:\ 0x0056|throw new java.lang.RuntimeException(\"VersionedParcel encountered IllegalAccessException\", r7)\l}"];
MethodNode[shape=record,label="{protected static void androidx.versionedparcelable.VersionedParcel.writeToParcel((r7v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Landroidx\/versionedparcelable\/VersionedParcelable;, \>(TT;, Landroidx\/versionedparcelable\/VersionedParcel;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_16;
Node_0 -> Node_9;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_1 -> Node_9;
Node_1 -> Node_6;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

