digraph "CFG forandroidx.versionedparcelable.ParcelUtils.fromParcelable(Landroid\/os\/Parcelable;)Landroidx\/versionedparcelable\/VersionedParcelable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) androidx.versionedparcelable.ParcelImpl \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CHECK_CAST  (r1 I:androidx.versionedparcelable.ParcelImpl) = (androidx.versionedparcelable.ParcelImpl) (r1 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r1 I:androidx.versionedparcelable.VersionedParcelable) = (r1 I:androidx.versionedparcelable.ParcelImpl) androidx.versionedparcelable.ParcelImpl.getVersionedParcel():androidx.versionedparcelable.VersionedParcelable type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r1 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000d: CONST_STR  (r0 I:java.lang.String) =  \"Invalid parcel\" \l0x000f: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static T androidx.versionedparcelable.ParcelUtils.fromParcelable((r1 I:android.os.Parcelable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Landroidx\/versionedparcelable\/VersionedParcelable;, \>(, Landroid\/os\/Parcelable;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

