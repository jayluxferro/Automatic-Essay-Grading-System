digraph "CFG forandroidx.versionedparcelable.VersionedParcelStream.writeObject(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0008 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) android.os.Bundle \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x0010: CHECK_CAST  (r4 I:android.os.Bundle) = (android.os.Bundle) (r4 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:android.os.Bundle)\l androidx.versionedparcelable.VersionedParcelStream.writeBundle(android.os.Bundle):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001c: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x001f: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:java.lang.String)\l androidx.versionedparcelable.VersionedParcelStream.writeString(java.lang.String):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.String[] \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x002b: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x002e: CHECK_CAST  (r4 I:java.lang.String[]) = (java.lang.String[]) (r4 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:java.lang.Object[])\l androidx.versionedparcelable.VersionedParcelStream.writeArray(java.lang.Object[]):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.Boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0048 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x003a: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x003d: CHECK_CAST  (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l0x0043: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:boolean)\l androidx.versionedparcelable.VersionedParcelStream.writeBoolean(boolean):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) boolean[] \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0057 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x004d: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x0050: CHECK_CAST  (r4 I:boolean[]) = (boolean[]) (r4 I:?[OBJECT, ARRAY]) \l0x0052: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:boolean[])\l androidx.versionedparcelable.VersionedParcelStream.writeBooleanArray(boolean[]):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.Double \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_19 [shape=record,label="{19\:\ 0x005b|0x005b: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x005c: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x005f: CHECK_CAST  (r4 I:java.lang.Double) = (java.lang.Double) (r4 I:?[OBJECT, ARRAY]) \l0x0061: INVOKE  (r0 I:double) = (r4 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0065: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:double)\l androidx.versionedparcelable.VersionedParcelStream.writeDouble(double):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|0x006a: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) double[] \l}"];
Node_21 [shape=record,label="{21\:\ 0x006c|0x006c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0079 \l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0070: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x0073: CHECK_CAST  (r4 I:double[]) = (double[]) (r4 I:?[OBJECT, ARRAY]) \l0x0075: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:double[])\l androidx.versionedparcelable.VersionedParcelStream.writeDoubleArray(double[]):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0079|0x0079: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.Integer \l}"];
Node_24 [shape=record,label="{24\:\ 0x007b|0x007b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008c \l}"];
Node_25 [shape=record,label="{25\:\ 0x007d|0x007d: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x007f: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x0082: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x0084: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0088: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x008c|0x008c: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) int[] \l}"];
Node_27 [shape=record,label="{27\:\ 0x008e|0x008e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x009b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0090|0x0090: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0092: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x0095: CHECK_CAST  (r4 I:int[]) = (int[]) (r4 I:?[OBJECT, ARRAY]) \l0x0097: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:int[])\l androidx.versionedparcelable.VersionedParcelStream.writeIntArray(int[]):void type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x009b|0x009b: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.Long \l}"];
Node_30 [shape=record,label="{30\:\ 0x009d|0x009d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00ae \l}"];
Node_31 [shape=record,label="{31\:\ 0x009f|0x009f: CONST  (r0 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x00a1: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x00a4: CHECK_CAST  (r4 I:java.lang.Long) = (java.lang.Long) (r4 I:?[OBJECT, ARRAY]) \l0x00a6: INVOKE  (r0 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x00aa: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:long)\l androidx.versionedparcelable.VersionedParcelStream.writeLong(long):void type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x00ae|0x00ae: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) long[] \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b0|0x00b0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00bd \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b2|0x00b2: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x00b4: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x00b7: CHECK_CAST  (r4 I:long[]) = (long[]) (r4 I:?[OBJECT, ARRAY]) \l0x00b9: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:long[])\l androidx.versionedparcelable.VersionedParcelStream.writeLongArray(long[]):void type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00bd|0x00bd: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.Float \l}"];
Node_36 [shape=record,label="{36\:\ 0x00bf|0x00bf: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00d0 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c1|0x00c1: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x00c3: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x00c6: CHECK_CAST  (r4 I:java.lang.Float) = (java.lang.Float) (r4 I:?[OBJECT, ARRAY]) \l0x00c8: INVOKE  (r4 I:float) = (r4 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x00cc: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:float)\l androidx.versionedparcelable.VersionedParcelStream.writeFloat(float):void type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x00d0|0x00d0: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) float[] \l}"];
Node_39 [shape=record,label="{39\:\ 0x00d2|0x00d2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00df \l}"];
Node_40 [shape=record,label="{40\:\ 0x00d4|0x00d4: CONST  (r0 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x00d6: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r0 I:int)\l androidx.versionedparcelable.VersionedParcelStream.writeInt(int):void type: VIRTUAL \l0x00d9: CHECK_CAST  (r4 I:float[]) = (float[]) (r4 I:?[OBJECT, ARRAY]) \l0x00db: INVOKE  \l  (r3 I:androidx.versionedparcelable.VersionedParcelStream)\l  (r4 I:float[])\l androidx.versionedparcelable.VersionedParcelStream.writeFloatArray(float[]):void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x00de|0x00de: RETURN   \l}"];
Node_42 [shape=record,label="{42\:\ 0x00df|0x00df: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00e1: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00e3: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00e6: CONST_STR  (r2 I:java.lang.String) =  \"Unsupported type \" \l0x00e8: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00eb: INVOKE  (r4 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x00ef: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00f2: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00f6: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x00f9|0x00f9: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void androidx.versionedparcelable.VersionedParcelStream.writeObject((r3 'this' I:androidx.versionedparcelable.VersionedParcelStream A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_41;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_41;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_41;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_41;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_41;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_41;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_41;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_41;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_41;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_41;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_41;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_41;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_42 -> Node_43;
}

