digraph "CFG forandroid.support.multidex.MultiDex.expandFieldArray(Ljava\/lang\/Object;Ljava\/lang\/String;[Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:java.lang.reflect.Field) = \l  (r7 I:java.lang.Object A[D('instance' java.lang.Object)])\l  (r8 I:java.lang.String A[D('fieldName' java.lang.String)])\l android.support.multidex.MultiDex.findField(java.lang.Object, java.lang.String):java.lang.reflect.Field type: STATIC \l0x0005: INVOKE  (r3 I:java.lang.Object) = \l  (r1 I:java.lang.reflect.Field A[D('jlrField' java.lang.reflect.Field)])\l  (r7 I:java.lang.Object A[D('instance' java.lang.Object)])\l java.lang.reflect.Field.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0009: CHECK_CAST  (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:?[OBJECT, ARRAY]) \l0x000b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r3 I:java.lang.Class) = (r2 I:java.lang.Object A[D('original' java.lang.Object[])]) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0012: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Class) java.lang.Class.getComponentType():java.lang.Class type: VIRTUAL \l0x0016: ARRAY_LENGTH  (r4 I:int) = (r2 I:?[] A[D('original' java.lang.Object[])]) \l0x0017: ARRAY_LENGTH  (r5 I:int) = (r9 I:?[] A[D('extraElements' java.lang.Object[])]) \l0x0018: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0019: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.lang.Class), (r4 I:int) java.lang.reflect.Array.newInstance(java.lang.Class, int):java.lang.Object type: STATIC \l0x001d: CHECK_CAST  (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:?[OBJECT, ARRAY]) \l0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0020: CHECK_CAST  (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:?[OBJECT, ARRAY]) \l0x0022: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[] A[D('original' java.lang.Object[])]) \l0x0023: INVOKE  \l  (r2 I:java.lang.Object A[D('original' java.lang.Object[])])\l  (r6 I:int)\l  (r0 I:java.lang.Object A[D('combined' java.lang.Object[])])\l  (r6 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0026: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[] A[D('original' java.lang.Object[])]) \l0x0027: ARRAY_LENGTH  (r4 I:int) = (r9 I:?[] A[D('extraElements' java.lang.Object[])]) \l0x0028: INVOKE  \l  (r9 I:java.lang.Object A[D('extraElements' java.lang.Object[])])\l  (r6 I:int)\l  (r0 I:java.lang.Object A[D('combined' java.lang.Object[])])\l  (r3 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x002b: INVOKE  \l  (r1 I:java.lang.reflect.Field A[D('jlrField' java.lang.reflect.Field)])\l  (r7 I:java.lang.Object A[D('instance' java.lang.Object)])\l  (r0 I:java.lang.Object A[D('combined' java.lang.Object[])])\l java.lang.reflect.Field.set(java.lang.Object, java.lang.Object):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.multidex.MultiDex.expandFieldArray((r7 I:java.lang.Object A[D('instance' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[D('fieldName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object[] A[D('extraElements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0022\-0x002e: r0 'combined' java.lang.Object[]\l  0x0005\-0x002e: r1 'jlrField' java.lang.reflect.Field\l  0x000e\-0x002e: r2 'original' java.lang.Object[]\l  ?\-0x002e: r7 'instance' java.lang.Object\l  ?\-0x002e: r8 'fieldName' java.lang.String\l  ?\-0x002e: r9 'extraElements' java.lang.Object[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.NoSuchFieldException, java.lang.IllegalArgumentException, java.lang.IllegalAccessException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

