digraph "CFG forandroid.support.multidex.MultiDex.isVMMultidexCapable(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('versionString' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST_STR  (r5 I:java.lang.String) =  \"(d+).(d+)(.d+)?\" \l0x0007: INVOKE  (r5 I:java.util.regex.Pattern) = (r5 I:java.lang.String) java.util.regex.Pattern.compile(java.lang.String):java.util.regex.Pattern type: STATIC \l0x000b: INVOKE  (r2 I:java.util.regex.Matcher) = \l  (r5 I:java.util.regex.Pattern)\l  (r7 I:java.lang.CharSequence A[D('versionString' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x000f: INVOKE  (r5 I:boolean) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|SYNTHETIC\lSplitter:B:5:0x0016\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0016\l|0x0016: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r5 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0054 \}, TRY_ENTER]\l0x001a: INVOKE  (r1 I:int) = (r5 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0054 \}]\l0x001e: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0054 \}]\l0x001f: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r5 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0054 \}]\l0x0023: INVOKE  (r3 I:int) = (r5 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0054 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r1 I:?[int, byte, short, char] A[D('major' int)]) \> (r6 I:?[int, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('major' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r3 I:?[int, byte, short, char] A[D('minor' int)]) \< (r4 I:?[int, byte, short, char])  \-\> B:17:0x004f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isMultidexCapable' boolean)]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: CONST_STR  (r5 I:java.lang.String) =  \"MultiDex\" \l0x0030: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0032: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0035: CONST_STR  (r6 I:java.lang.String) =  \"VM with version \" \l0x0037: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r6 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder)\l  (r7 I:java.lang.String A[D('versionString' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isMultidexCapable' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0051 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CONST_STR  (r4 I:java.lang.String) =  \" has multidex support\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: INVOKE  (r4 I:java.lang.StringBuilder) = (r6 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r5 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.i(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x004e|0x004e: RETURN  (r0 I:boolean A[D('isMultidexCapable' boolean)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|0x004f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isMultidexCapable' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: CONST_STR  (r4 I:java.lang.String) =  \" does not have multidex support\" \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|ExcHandler: NumberFormatException null\lSplitter:B:5:0x0016\l|0x0054: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{static boolean android.support.multidex.MultiDex.isVMMultidexCapable((r7 I:java.lang.String A[D('versionString' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001e\-0x002e: r1 'major' int\l  0x000f\-0x002e: r2 'matcher' java.util.regex.Matcher\l  0x0027\-0x002e: r3 'minor' int\l  0x004f\-0x0051: r1 'major' int\l  0x004f\-0x0051: r2 'matcher' java.util.regex.Matcher\l  0x004f\-0x0051: r3 'minor' int\l  0x0003\-0x0055: r0 'isMultidexCapable' boolean\l  0x0054\-0x0055: r2 'matcher' java.util.regex.Matcher\l  ?\-0x0055: r7 'versionString' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_19;
Node_6 -> Node_19;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_12;
Node_18 -> Node_15;
Node_19 -> Node_12;
}

