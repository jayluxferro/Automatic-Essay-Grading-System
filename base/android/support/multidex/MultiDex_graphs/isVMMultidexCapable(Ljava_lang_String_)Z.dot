digraph "CFG forandroid.support.multidex.MultiDex.isVMMultidexCapable(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r7 == null) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|java.util.regex.Matcher r2 = java.util.regex.Pattern.compile(\"(d+).(d+)(.d+)?\").matcher(r7)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r2.matches() == false) goto L_0x002e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015}"];
Node_5 [shape=record,label="{5\:\ 0x0016|SYNTHETIC\lSplitter:B:5:0x0016\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ NumberFormatException \-\> 0x0054 \}\lSplitter:B:5:0x0016\l|int r1 = java.lang.Integer.parseInt(r2.group(1))     \/\/ Catch:\{ NumberFormatException \-\> 0x0054 \}\lint r3 = java.lang.Integer.parseInt(r2.group(2))     \/\/ Catch:\{ NumberFormatException \-\> 0x0054 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|if (r1 \> 2) goto L_0x002d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|if (r1 != 2) goto L_0x004f\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|if (r3 \< 1) goto L_0x004f\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|r0 = true\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|PHI: r0 \l  PHI: (r0v1 'isMultidexCapable' boolean) = (r0v0 'isMultidexCapable' boolean), (r0v0 'isMultidexCapable' boolean), (r0v0 'isMultidexCapable' boolean), (r0v2 'isMultidexCapable' boolean), (r0v3 'isMultidexCapable' boolean) binds: [B:1:0x0003, B:3:0x0013, B:18:0x0054, B:10:0x002d, B:16:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.StringBuilder r6 = new java.lang.StringBuilder().append(\"VM with version \").append(r7)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|if (r0 == false) goto L_0x0051\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|java.lang.String r4 = \" has multidex support\"\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|PHI: r4 \l  PHI: (r4v4 java.lang.String) = (r4v3 java.lang.String), (r4v7 java.lang.String) binds: [B:17:0x0051, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|android.util.Log.i(TAG, r6.append(r4).toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|RETURN\l|return r0\l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|r0 = false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|java.lang.String r4 = \" does not have multidex support\"\l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|ExcHandler: NumberFormatException (e java.lang.NumberFormatException)\lSplitter:B:5:0x0016\l}"];
MethodNode[shape=record,label="{static boolean android.support.multidex.MultiDex.isVMMultidexCapable((r7v0 'versionString' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_18;
Node_6 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_11;
Node_17 -> Node_14;
Node_18 -> Node_11;
}

