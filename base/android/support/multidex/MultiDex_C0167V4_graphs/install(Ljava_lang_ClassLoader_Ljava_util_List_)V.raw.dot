digraph "CFG forandroid.support.multidex.MultiDex.V4.install(Ljava\/lang\/ClassLoader;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:int) = \l  (r14 I:java.util.List A[D('additionalClassPathEntries' java.util.List\<? extends java.io.File\>)])\l java.util.List.size():int type: INTERFACE \l0x0004: CONST_STR  (r11 I:java.lang.String) =  \"path\" \l0x0006: INVOKE  (r10 I:java.lang.reflect.Field) = \l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.String)\l android.support.multidex.MultiDex.access$000(java.lang.Object, java.lang.String):java.lang.reflect.Field type: STATIC \l0x000a: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000c: INVOKE  (r11 I:java.lang.Object) = \l  (r10 I:java.lang.reflect.Field A[D('pathField' java.lang.reflect.Field)])\l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l java.lang.reflect.Field.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0010: CHECK_CAST  (r11 I:java.lang.String) = (java.lang.String) (r11 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r9 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.\<init\>(java.lang.String):void type: DIRECT \l0x0015: NEW_ARRAY  (r4 I:java.lang.String[]) = (r5 I:int A[D('extraSize' int), IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0017: NEW_ARRAY  (r3 I:java.io.File[]) = (r5 I:int A[D('extraSize' int), IMMUTABLE_TYPE]) type: java.io.File[] \l0x0019: NEW_ARRAY  (r6 I:java.util.zip.ZipFile[]) = (r5 I:int A[D('extraSize' int), IMMUTABLE_TYPE]) type: java.util.zip.ZipFile[] \l0x001b: NEW_ARRAY  (r2 I:dalvik.system.DexFile[]) = (r5 I:int A[D('extraSize' int), IMMUTABLE_TYPE]) type: dalvik.system.DexFile[] \l0x001d: INVOKE  (r8 I:java.util.ListIterator) = \l  (r14 I:java.util.List A[D('additionalClassPathEntries' java.util.List\<? extends java.io.File\>)])\l java.util.List.listIterator():java.util.ListIterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0021|0x0021: INVOKE  (r11 I:boolean) = \l  (r8 I:java.util.ListIterator A[D('iterator' java.util.ListIterator\<? extends java.io.File\>)])\l java.util.ListIterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0025|0x0025: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0064 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: INVOKE  (r0 I:java.lang.Object) = \l  (r8 I:java.util.ListIterator A[D('iterator' java.util.ListIterator\<? extends java.io.File\>)])\l java.util.ListIterator.next():java.lang.Object type: INTERFACE \l0x002b: CHECK_CAST  (r0 I:java.io.File) = (java.io.File) (r0 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  (r1 I:java.lang.String) = (r0 I:java.io.File A[D('additionalEntry' java.io.File)]) java.io.File.getAbsolutePath():java.lang.String type: VIRTUAL \l0x0031: CONST  (r11 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0033: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder A[D('path' java.lang.StringBuilder)])\l  (r11 I:char)\l java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  \l  (r11 I:java.lang.StringBuilder)\l  (r1 I:java.lang.String A[D('entryPath' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r7 I:int) = \l  (r8 I:java.util.ListIterator A[D('iterator' java.util.ListIterator\<? extends java.io.File\>)])\l java.util.ListIterator.previousIndex():int type: INTERFACE \l0x003e: APUT  \l  (r4 I:?[OBJECT, ARRAY][] A[D('extraPaths' java.lang.String[])])\l  (r7 I:?[int, short, byte, char] A[D('index' int)])\l  (r1 I:?[OBJECT, ARRAY] A[D('entryPath' java.lang.String)])\l \l0x0040: APUT  \l  (r3 I:?[OBJECT, ARRAY][] A[D('extraFiles' java.io.File[])])\l  (r7 I:?[int, short, byte, char] A[D('index' int)])\l  (r0 I:?[OBJECT, ARRAY] A[D('additionalEntry' java.io.File)])\l \l0x0042: NEW_INSTANCE  (r11 I:java.util.zip.ZipFile) =  java.util.zip.ZipFile \l0x0044: INVOKE  \l  (r11 I:java.util.zip.ZipFile)\l  (r0 I:java.io.File A[D('additionalEntry' java.io.File)])\l java.util.zip.ZipFile.\<init\>(java.io.File):void type: DIRECT \l0x0047: APUT  \l  (r6 I:?[OBJECT, ARRAY][] A[D('extraZips' java.util.zip.ZipFile[])])\l  (r7 I:?[int, short, byte, char] A[D('index' int)])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0049: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004b: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004e: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r1 I:java.lang.String A[D('entryPath' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0052: CONST_STR  (r12 I:java.lang.String) =  \".dex\" \l0x0054: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: INVOKE  (r11 I:dalvik.system.DexFile) = \l  (r1 I:java.lang.String A[D('entryPath' java.lang.String)])\l  (r11 I:java.lang.String)\l  (r12 I:int)\l dalvik.system.DexFile.loadDex(java.lang.String, java.lang.String, int):dalvik.system.DexFile type: STATIC \l0x0061: APUT  \l  (r2 I:?[OBJECT, ARRAY][] A[D('extraDexs' dalvik.system.DexFile[])])\l  (r7 I:?[int, short, byte, char] A[D('index' int)])\l  (r11 I:?[OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0064|0x0064: INVOKE  (r11 I:java.lang.String) = \l  (r9 I:java.lang.StringBuilder A[D('path' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  \l  (r10 I:java.lang.reflect.Field A[D('pathField' java.lang.reflect.Field)])\l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.Object)\l java.lang.reflect.Field.set(java.lang.Object, java.lang.Object):void type: VIRTUAL \l0x006b: CONST_STR  (r11 I:java.lang.String) =  \"mPaths\" \l0x006d: INVOKE  \l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.String)\l  (r4 I:java.lang.Object[] A[D('extraPaths' java.lang.String[])])\l android.support.multidex.MultiDex.access$100(java.lang.Object, java.lang.String, java.lang.Object[]):void type: STATIC \l0x0070: CONST_STR  (r11 I:java.lang.String) =  \"mFiles\" \l0x0072: INVOKE  \l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.String)\l  (r3 I:java.lang.Object[] A[D('extraFiles' java.io.File[])])\l android.support.multidex.MultiDex.access$100(java.lang.Object, java.lang.String, java.lang.Object[]):void type: STATIC \l0x0075: CONST_STR  (r11 I:java.lang.String) =  \"mZips\" \l0x0077: INVOKE  \l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.String)\l  (r6 I:java.lang.Object[] A[D('extraZips' java.util.zip.ZipFile[])])\l android.support.multidex.MultiDex.access$100(java.lang.Object, java.lang.String, java.lang.Object[]):void type: STATIC \l0x007a: CONST_STR  (r11 I:java.lang.String) =  \"mDexs\" \l0x007c: INVOKE  \l  (r13 I:java.lang.Object A[D('loader' java.lang.ClassLoader)])\l  (r11 I:java.lang.String)\l  (r2 I:java.lang.Object[] A[D('extraDexs' dalvik.system.DexFile[])])\l android.support.multidex.MultiDex.access$100(java.lang.Object, java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x007f|0x007f: RETURN   \l}"];
MethodNode[shape=record,label="{static void android.support.multidex.MultiDex.V4.install((r13 I:java.lang.ClassLoader A[D('loader' java.lang.ClassLoader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.util.List\<? extends java.io.File\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002d\-0x0064: r0 'additionalEntry' java.io.File\l  0x0031\-0x0064: r1 'entryPath' java.lang.String\l  0x003e\-0x0064: r7 'index' int\l  0x001d\-0x007f: r2 'extraDexs' dalvik.system.DexFile[]\l  0x0019\-0x007f: r3 'extraFiles' java.io.File[]\l  0x0017\-0x007f: r4 'extraPaths' java.lang.String[]\l  0x0004\-0x007f: r5 'extraSize' int\l  0x001b\-0x007f: r6 'extraZips' java.util.zip.ZipFile[]\l  0x0021\-0x007f: r8 'iterator' java.util.ListIterator\<? extends java.io.File\>\l  0x0015\-0x007f: r9 'path' java.lang.StringBuilder\l  0x000a\-0x007f: r10 'pathField' java.lang.reflect.Field\l  ?\-0x007f: r13 'loader' java.lang.ClassLoader\l  0x0000\-0x007f: r14 'additionalClassPathEntries' java.util.List\<? extends java.io.File\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException, java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/ClassLoader;, Ljava\/util\/List, \<+, Ljava\/io\/File;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

