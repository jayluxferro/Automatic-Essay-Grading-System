digraph "CFG forandroid.support.multidex.MultiDexExtractor.loadExistingExtractions(Landroid\/content\/Context;Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.util.Log.i(TAG, \"loading existing secondary dex files\")\ljava.lang.String r9 = new java.lang.StringBuilder().append(r22.sourceApk.getName()).append(EXTRACTED_NAME_EXT).toString()\landroid.content.SharedPreferences r14 = getMultiDexPreferences(r23)\lint r16 = r14.getInt(new java.lang.StringBuilder().append(r24).append(KEY_DEX_NUMBER).toString(), 1)\ljava.util.ArrayList r11 = new java.util.ArrayList\<\>(r16 + \-1)\lr15 = 2\l}"];
Node_1 [shape=record,label="{1\:\ 0x0053|LOOP_START\lPHI: r15 \l  PHI: (r15v1 'secondaryNumber' int) = (r15v0 'secondaryNumber' int), (r15v2 'secondaryNumber' int) binds: [B:0:0x0000, B:11:0x014a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0053\-\>B:11:0x014a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0055|if (r15 \> r16) goto L_0x0174\l}"];
Node_3 [shape=record,label="{3\:\ 0x0057|java.lang.String r10 = new java.lang.StringBuilder().append(r9).append(r15).append(EXTRACTED_SUFFIX).toString()\landroid.support.multidex.MultiDexExtractor$ExtractedDex r8 = new android.support.multidex.MultiDexExtractor.ExtractedDex(r22.dexDir, r10)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0083|if (r8.isFile() == false) goto L_0x0151\l}"];
Node_5 [shape=record,label="{5\:\ 0x0085|r8.crc = getZipCrc(r8)\llong r4 = r14.getLong(new java.lang.StringBuilder().append(r24).append(KEY_DEX_CRC).append(r15).toString(), \-1)\llong r6 = r14.getLong(new java.lang.StringBuilder().append(r24).append(KEY_DEX_TIME).append(r15).toString(), \-1)\llong r12 = r8.lastModified()\l}"];
Node_6 [shape=record,label="{6\:\ 0x00e1|if ((r6 \> r12 ? 1 : (r6 == r12 ? 0 : \-1)) != 0) goto L_0x00eb\l}"];
Node_7 [shape=record,label="{7\:\ 0x00e3}"];
Node_8 [shape=record,label="{8\:\ 0x00e9|if ((r4 \> r8.crc ? 1 : (r4 == r8.crc ? 0 : \-1)) == 0) goto L_0x014a\l}"];
Node_9 [shape=record,label="{9\:\ 0x00eb|java.lang.StringBuilder r18 = new java.lang.StringBuilder().append(\"Invalid extracted dex: \").append(r8).append(\" (key \"\").append(r24).append(\"\"), expected modification time: \").append(r6).append(\", modification time: \").append(r12).append(\", expected crc: \").append(r4).append(\", file crc: \")\lr20 = r8.crc\l}"];
Node_10 [shape=record,label="{10\:\ 0x0149|throw new java.io.IOException(r18.append(r20).toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x014a|LOOP_END\lLOOP:0: B:1:0x0053\-\>B:11:0x014a\l|r11.add(r8)\lint r15 = r15 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0151}"];
Node_13 [shape=record,label="{13\:\ 0x0173|throw new java.io.IOException(new java.lang.StringBuilder().append(\"Missing extracted secondary dex file '\").append(r8.getPath()).append(\"'\").toString())\l}"];
Node_14 [shape=record,label="{14\:\ 0x0174|RETURN\l|return r11\l}"];
Node_15 [shape=record,label="{15\:\ 0x00eb|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0151|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0174|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x00eb|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\> android.support.multidex.MultiDexExtractor.loadExistingExtractions((r22v0 'this' android.support.multidex.MultiDexExtractor A[IMMUTABLE_TYPE, THIS]), (r23v0 'context' android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'prefsKeyPrefix' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/content\/Context;, Ljava\/lang\/String;, ), Ljava\/util\/List, \<, Landroid\/support\/multidex\/MultiDexExtractor$ExtractedDex;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_8 -> Node_18[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_15 -> Node_9;
Node_16 -> Node_12;
Node_17 -> Node_14;
Node_18 -> Node_9;
}

