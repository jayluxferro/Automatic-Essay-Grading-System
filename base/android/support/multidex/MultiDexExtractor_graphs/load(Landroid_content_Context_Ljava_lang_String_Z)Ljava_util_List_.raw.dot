digraph "CFG forandroid.support.multidex.MultiDexExtractor.load(Landroid\/content\/Context;Ljava\/lang\/String;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"MultiDex\" \l0x0002: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0004: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0007: CONST_STR  (r2 I:java.lang.String) =  \"MultiDexExtractor.load(\" \l0x0009: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000d: IGET  (r2 I:java.io.File) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceApk java.io.File \l0x000f: INVOKE  (r2 I:java.lang.String) = (r2 I:java.io.File) java.io.File.getPath():java.lang.String type: VIRTUAL \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: CONST_STR  (r2 I:java.lang.String) =  \", \" \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder) = \l  (r1 I:java.lang.StringBuilder)\l  (r11 I:boolean A[D('forceReload' boolean)])\l java.lang.StringBuilder.append(boolean):java.lang.StringBuilder type: VIRTUAL \l0x0021: CONST_STR  (r2 I:java.lang.String) =  \", \" \l0x0023: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder) = \l  (r1 I:java.lang.StringBuilder)\l  (r10 I:java.lang.String A[D('prefsKeyPrefix' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002b: CONST_STR  (r2 I:java.lang.String) =  \")\" \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0035: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.i(java.lang.String, java.lang.String):int type: STATIC \l0x0038: IGET  (r0 I:java.nio.channels.FileLock) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.cacheLock java.nio.channels.FileLock \l0x003a: INVOKE  (r0 I:boolean) = (r0 I:java.nio.channels.FileLock) java.nio.channels.FileLock.isValid():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0048 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0040|0x0040: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0042: CONST_STR  (r1 I:java.lang.String) =  \"MultiDexExtractor was closed\" \l0x0044: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0047|0x0047: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0048|0x0048: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('forceReload' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0095 \l}"];
Node_5 [shape=record,label="{5\:\ 0x004a|0x004a: IGET  (r0 I:java.io.File) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceApk java.io.File \l0x004c: IGET  (r2 I:long) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceCrc long \l0x004e: INVOKE  (r0 I:boolean) = \l  (r9 I:android.content.Context A[D('context' android.content.Context)])\l  (r0 I:java.io.File)\l  (r2 I:long)\l  (r10 I:java.lang.String A[D('prefsKeyPrefix' java.lang.String)])\l android.support.multidex.MultiDexExtractor.isModified(android.content.Context, java.io.File, long, java.lang.String):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0095 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0054|SYNTHETIC\lSplitter:B:7:0x0054\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0054\l|0x0054: INVOKE  (r6 I:java.util.List) = \l  (r8 I:android.support.multidex.MultiDexExtractor)\l  (r9 I:android.content.Context A[D('context' android.content.Context)])\l  (r10 I:java.lang.String A[D('prefsKeyPrefix' java.lang.String)])\l android.support.multidex.MultiDexExtractor.loadExistingExtractions(android.content.Context, java.lang.String):java.util.List type: DIRECT A[Catch:\{ IOException \-\> 0x007b \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0058|0x0058: CONST_STR  (r0 I:java.lang.String) =  \"MultiDex\" \l0x005a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005f: CONST_STR  (r2 I:java.lang.String) =  \"load found \" \l0x0061: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0065: INVOKE  (r2 I:int) = \l  (r6 I:java.util.List A[D('files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>)])\l java.util.List.size():int type: INTERFACE \l0x0069: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x006d: CONST_STR  (r2 I:java.lang.String) =  \" secondary dex files\" \l0x006f: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0077: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.i(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x007a|0x007a: RETURN  \l  (r6 I:java.util.List\<? extends java.io.File\> A[D('files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x007b|ExcHandler: IOException null\lSplitter:B:7:0x0054\l|0x007b: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x007c|0x007c: CONST_STR  (r0 I:java.lang.String) =  \"MultiDex\" \l0x007e: CONST_STR  (r1 I:java.lang.String) =  \"Failed to reload existing extracted secondary dex files, falling back to fresh extraction\" \l0x0080: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r7 I:java.lang.Throwable A[D('ioe' java.io.IOException)])\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l0x0083: INVOKE  (r6 I:java.util.List) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.performExtractions():java.util.List type: DIRECT \l0x0087: IGET  (r0 I:java.io.File) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceApk java.io.File \l0x0089: INVOKE  (r2 I:long) = (r0 I:java.io.File) android.support.multidex.MultiDexExtractor.getTimeStamp(java.io.File):long type: STATIC \l0x008d: IGET  (r4 I:long) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceCrc long \l0x008f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r9 I:?[OBJECT, ARRAY] A[D('context' android.content.Context)])\l \l0x0090: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY] A[D('prefsKeyPrefix' java.lang.String)])\l \l0x0091: INVOKE  \l  (r0 I:android.content.Context)\l  (r1 I:java.lang.String)\l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:java.util.List A[D('files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>)])\l android.support.multidex.MultiDexExtractor.putStoredApkInfo(android.content.Context, java.lang.String, long, long, java.util.List):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0095|0x0095: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('forceReload' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x00b0 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0097|0x0097: CONST_STR  (r0 I:java.lang.String) =  \"MultiDex\" \l0x0099: CONST_STR  (r1 I:java.lang.String) =  \"Forced extraction must be performed.\" \l0x009b: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.i(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x009e|0x009e: INVOKE  (r6 I:java.util.List) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.performExtractions():java.util.List type: DIRECT \l0x00a2: IGET  (r0 I:java.io.File) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceApk java.io.File \l0x00a4: INVOKE  (r2 I:long) = (r0 I:java.io.File) android.support.multidex.MultiDexExtractor.getTimeStamp(java.io.File):long type: STATIC \l0x00a8: IGET  (r4 I:long) = (r8 I:android.support.multidex.MultiDexExtractor) android.support.multidex.MultiDexExtractor.sourceCrc long \l0x00aa: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r9 I:?[OBJECT, ARRAY] A[D('context' android.content.Context)])\l \l0x00ab: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY] A[D('prefsKeyPrefix' java.lang.String)])\l \l0x00ac: INVOKE  \l  (r0 I:android.content.Context)\l  (r1 I:java.lang.String)\l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:java.util.List A[D('files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>)])\l android.support.multidex.MultiDexExtractor.putStoredApkInfo(android.content.Context, java.lang.String, long, long, java.util.List):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x00b0|0x00b0: CONST_STR  (r0 I:java.lang.String) =  \"MultiDex\" \l0x00b2: CONST_STR  (r1 I:java.lang.String) =  \"Detected that extraction must be performed.\" \l0x00b4: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.i(java.lang.String, java.lang.String):int type: STATIC \l}"];
MethodNode[shape=record,label="{java.util.List\<? extends java.io.File\> android.support.multidex.MultiDexExtractor.load((r8 'this' I:android.support.multidex.MultiDexExtractor A[IMMUTABLE_TYPE, THIS]), (r9 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[D('prefsKeyPrefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('forceReload' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0058\-0x007b: r6 'files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>\l  0x0087\-0x0095: r6 'files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>\l  0x007c\-0x0095: r7 'ioe' java.io.IOException\l  0x00a2\-0x00b0: r6 'files' java.util.List\<android.support.multidex.MultiDexExtractor$ExtractedDex\>\l  ?\-0x00b7: r9 'context' android.content.Context\l  ?\-0x00b7: r10 'prefsKeyPrefix' java.lang.String\l  ?\-0x00b7: r11 'forceReload' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/content\/Context;, Ljava\/lang\/String;, Z), Ljava\/util\/List, \<+, Ljava\/io\/File;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_12;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_10;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_17 -> Node_16;
}

