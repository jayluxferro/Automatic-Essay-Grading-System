digraph "CFG forandroid.support.multidex.MultiDex.V14.makeDexElements(Ljava\/util\/List;)[Ljava\/lang\/Object;" {
subgraph cluster_Region_34652471 {
label = "R(3:0|(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object[] java.lang.Object[] r0 = new java.lang.Object[r8.size()]\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_2116175807 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r2 \< r0.length) goto L_0x000a\l}"];
subgraph cluster_Region_1273938984 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:3:0x000a\l|java.io.File java.io.File r1 = (java.io.File) r8.get(r2)\lr0[r2] = r7.elementConstructor.newInstance(r1, dalvik.system.DexFile.loadDex(r1.getPath(), optimizedPathFor(r1), 0))\lr2++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0028|RETURN\l|return r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0007|LOOP_START\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:0:0x0000, B:3:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:3:0x000a\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0028|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.lang.Object[] android.support.multidex.MultiDex.V14.makeDexElements((r7v0 'this' android.support.multidex.MultiDex$V14 A[IMMUTABLE_TYPE, THIS]), (r8v0 'files' java.util.List\<? extends java.io.File\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.SecurityException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List, \<+, Ljava\/io\/File;, \>;)[, Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_1;
Node_1 -> Node_2;
Node_5 -> Node_4;
}

