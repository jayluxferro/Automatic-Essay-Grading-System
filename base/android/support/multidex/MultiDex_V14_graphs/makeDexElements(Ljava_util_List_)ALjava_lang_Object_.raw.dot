digraph "CFG forandroid.support.multidex.MultiDex.V14.makeDexElements(Ljava\/util\/List;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:int) = \l  (r8 I:java.util.List A[D('files' java.util.List\<? extends java.io.File\>)])\l java.util.List.size():int type: INTERFACE \l0x0004: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: ARRAY_LENGTH  (r3 I:int) = (r0 I:?[] A[D('elements' java.lang.Object[])]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0028 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r1 I:java.lang.Object) = \l  (r8 I:java.util.List A[D('files' java.util.List\<? extends java.io.File\>)])\l  (r2 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r1 I:java.io.File) = (java.io.File) (r1 I:?[OBJECT, ARRAY]) \l0x0010: IGET  (r3 I:android.support.multidex.MultiDex$V14$ElementConstructor) = (r7 I:android.support.multidex.MultiDex$V14) android.support.multidex.MultiDex.V14.elementConstructor android.support.multidex.MultiDex$V14$ElementConstructor \l0x0012: INVOKE  (r4 I:java.lang.String) = (r1 I:java.io.File A[D('file' java.io.File)]) java.io.File.getPath():java.lang.String type: VIRTUAL \l0x0016: INVOKE  (r5 I:java.lang.String) = (r1 I:java.io.File A[D('file' java.io.File)]) android.support.multidex.MultiDex.V14.optimizedPathFor(java.io.File):java.lang.String type: STATIC \l0x001a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  (r4 I:dalvik.system.DexFile) = \l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r6 I:int)\l dalvik.system.DexFile.loadDex(java.lang.String, java.lang.String, int):dalvik.system.DexFile type: STATIC \l0x001f: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:android.support.multidex.MultiDex$V14$ElementConstructor)\l  (r1 I:java.io.File A[D('file' java.io.File)])\l  (r4 I:dalvik.system.DexFile)\l android.support.multidex.MultiDex.V14.ElementConstructor.newInstance(java.io.File, dalvik.system.DexFile):java.lang.Object type: INTERFACE \l0x0023: APUT  \l  (r0 I:?[OBJECT, ARRAY][] A[D('elements' java.lang.Object[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0025: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: RETURN  \l  (r0 I:java.lang.Object[] A[D('elements' java.lang.Object[])])\l \l}"];
MethodNode[shape=record,label="{private java.lang.Object[] android.support.multidex.MultiDex.V14.makeDexElements((r7 'this' I:android.support.multidex.MultiDex$V14 A[IMMUTABLE_TYPE, THIS]), (r8 I:java.util.List\<? extends java.io.File\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0010\-0x0028: r1 'file' java.io.File\l  0x0006\-0x0028: r0 'elements' java.lang.Object[]\l  0x0007\-0x0028: r2 'i' int\l  0x0000\-0x0028: r8 'files' java.util.List\<? extends java.io.File\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.SecurityException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List, \<+, Ljava\/io\/File;, \>;)[, Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

