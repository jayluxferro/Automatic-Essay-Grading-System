digraph "CFG forandroid.support.multidex.ZipUtil.computeCrcOfCentralDir(Ljava\/io\/RandomAccessFile;Landroid\/support\/multidex\/ZipUtil$CentralDirectory;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.zip.CRC32 r1 = new java.util.zip.CRC32()\llong r4 = r13.size\lr12.seek(r13.offset)\lbyte[] r0 = new byte[16384]\lint r2 = r12.read(r0, 0, (int) java.lang.Math.min(android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PREPARE, r4))\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|LOOP_START\lPHI: r2 r4 \l  PHI: (r2v2 'length' int) = (r2v1 'length' int), (r2v4 'length' int) binds: [B:0:0x0000, B:7:0x002f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'stillToRead' long) = (r4v0 'stillToRead' long), (r4v2 'stillToRead' long) binds: [B:0:0x0000, B:7:0x002f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001c\-\>B:7:0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|if (r2 == \-1) goto L_0x002a\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|r1.update(r0, 0, r2)\llong r4 = r4 \- ((long) r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|if ((r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1)) != 0) goto L_0x002f\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a}"];
Node_6 [shape=record,label="{6\:\ 0x002e|RETURN\l|return r1.getValue()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|LOOP_END\lLOOP:0: B:1:0x001c\-\>B:7:0x002f\l|int r2 = r12.read(r0, 0, (int) java.lang.Math.min(android.support.p000v4.media.session.PlaybackStateCompat.ACTION_PREPARE, r4))\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static long android.support.multidex.ZipUtil.computeCrcOfCentralDir((r12v0 'raf' java.io.RandomAccessFile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'dir' android.support.multidex.ZipUtil$CentralDirectory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_1;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

