digraph "CFG forandroid.support.multidex.ZipUtil.findCentralDirectory(Ljava\/io\/RandomAccessFile;)Landroid\/support\/multidex\/ZipUtil$CentralDirectory;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:long) = \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l java.io.RandomAccessFile.length():long type: VIRTUAL \l0x0004: CONST  (r8 I:?[long, double]) = (22 ?[long, double]) \l0x0006: ARITH  (r2 I:long) = (r6 I:long) \- (r8 I:long) \l0x0008: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x000a: CMP_L  (r6 I:int) = (r2 I:long A[D('scanOffset' long)]), (r6 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:4:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: NEW_INSTANCE  (r6 I:java.util.zip.ZipException) =  java.util.zip.ZipException \l0x0010: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0012: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0015: CONST_STR  (r8 I:java.lang.String) =  \"File too short to be a zip file: \" \l0x0017: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r8 I:long) = \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l java.io.RandomAccessFile.length():long type: VIRTUAL \l0x001f: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0023: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0027: INVOKE  (r6 I:java.util.zip.ZipException), (r7 I:java.lang.String) java.util.zip.ZipException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: CONST  (r6 I:?[long, double]) = (65536(0x10000, double:3.2379E\-319) ?[long, double]) \l0x002e: ARITH  (r4 I:long) = (r2 I:long A[D('scanOffset' long)]) \- (r6 I:long) \l0x0030: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0032: CMP_L  (r6 I:int) = (r4 I:long A[D('stopOffset' long)]), (r6 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: CONST  (r4 I:?[long, double] A[D('stopOffset' long)]) = (0 ?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (101010256(0x6054b50, float:2.506985E\-35) ?[int, float, short, byte, char])\l \l0x003b: INVOKE  (r1 I:int) = (r6 I:int) java.lang.Integer.reverseBytes(int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|0x003f: INVOKE  \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l  (r2 I:long A[D('scanOffset' long)])\l java.io.RandomAccessFile.seek(long):void type: VIRTUAL \l0x0042: INVOKE  (r6 I:int) = \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l java.io.RandomAccessFile.readInt():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endSig' int)])  \-\> B:12:0x0080 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0049: INVOKE  \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l  (r6 I:int)\l java.io.RandomAccessFile.skipBytes(int):int type: VIRTUAL \l0x004c: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004d: INVOKE  \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l  (r6 I:int)\l java.io.RandomAccessFile.skipBytes(int):int type: VIRTUAL \l0x0050: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0051: INVOKE  \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l  (r6 I:int)\l java.io.RandomAccessFile.skipBytes(int):int type: VIRTUAL \l0x0054: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0055: INVOKE  \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l  (r6 I:int)\l java.io.RandomAccessFile.skipBytes(int):int type: VIRTUAL \l0x0058: NEW_INSTANCE  (r0 I:android.support.multidex.ZipUtil$CentralDirectory) =  android.support.multidex.ZipUtil$CentralDirectory \l0x005a: INVOKE  (r0 I:android.support.multidex.ZipUtil$CentralDirectory) android.support.multidex.ZipUtil.CentralDirectory.\<init\>():void type: DIRECT \l0x005d: INVOKE  (r6 I:int) = \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l java.io.RandomAccessFile.readInt():int type: VIRTUAL \l0x0061: INVOKE  (r6 I:int) = (r6 I:int) java.lang.Integer.reverseBytes(int):int type: STATIC \l0x0065: CAST  (r6 I:long) = (long) (r6 I:int) \l0x0066: CONST  (r8 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x006b: ARITH  (r6 I:long) = (r6 I:long) & (r8 I:long) \l0x006c: IPUT  \l  (r6 I:long)\l  (r0 I:android.support.multidex.ZipUtil$CentralDirectory A[D('dir' android.support.multidex.ZipUtil$CentralDirectory)])\l android.support.multidex.ZipUtil.CentralDirectory.size long \l0x006e: INVOKE  (r6 I:int) = \l  (r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile)])\l java.io.RandomAccessFile.readInt():int type: VIRTUAL \l0x0072: INVOKE  (r6 I:int) = (r6 I:int) java.lang.Integer.reverseBytes(int):int type: STATIC \l0x0076: CAST  (r6 I:long) = (long) (r6 I:int) \l0x0077: CONST  (r8 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x007c: ARITH  (r6 I:long) = (r6 I:long) & (r8 I:long) \l0x007d: IPUT  \l  (r6 I:long)\l  (r0 I:android.support.multidex.ZipUtil$CentralDirectory A[D('dir' android.support.multidex.ZipUtil$CentralDirectory)])\l android.support.multidex.ZipUtil.CentralDirectory.offset long \l}"];
Node_11 [shape=record,label="{11\:\ 0x007f|0x007f: RETURN  \l  (r0 I:android.support.multidex.ZipUtil$CentralDirectory A[D('dir' android.support.multidex.ZipUtil$CentralDirectory)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0080|0x0080: CONST  (r6 I:?[long, double]) = (1 ?[long, double]) \l0x0082: ARITH  (r2 I:long A[D('scanOffset' long)]) = (r2 I:long A[D('scanOffset' long)]) \- (r6 I:long) \l0x0083: CMP_L  (r6 I:int) = \l  (r2 I:long A[D('scanOffset' long)])\l  (r4 I:long A[D('stopOffset' long)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0085|0x0085: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x003f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0087|0x0087: NEW_INSTANCE  (r6 I:java.util.zip.ZipException) =  java.util.zip.ZipException \l0x0089: CONST_STR  (r7 I:java.lang.String) =  \"End Of Central Directory signature not found\" \l0x008b: INVOKE  (r6 I:java.util.zip.ZipException), (r7 I:java.lang.String) java.util.zip.ZipException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x008e|0x008e: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static android.support.multidex.ZipUtil$CentralDirectory android.support.multidex.ZipUtil.findCentralDirectory((r10 I:java.io.RandomAccessFile A[D('raf' java.io.RandomAccessFile), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x005d\-0x0080: r0 'dir' android.support.multidex.ZipUtil$CentralDirectory\l  0x003f\-0x008e: r1 'endSig' int\l  0x0008\-0x008e: r2 'scanOffset' long\l  0x0030\-0x008e: r4 'stopOffset' long\l  ?\-0x008e: r10 'raf' java.io.RandomAccessFile\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.util.zip.ZipException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15;
}

