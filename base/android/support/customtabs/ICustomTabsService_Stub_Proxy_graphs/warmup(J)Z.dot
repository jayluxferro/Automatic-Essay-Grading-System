digraph "CFG forandroid.support.customtabs.ICustomTabsService.Stub.Proxy.warmup(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = false\landroid.os.Parcel r0 = android.os.Parcel.obtain()\landroid.os.Parcel r1 = android.os.Parcel.obtain()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|SYNTHETIC\lSplitter:B:1:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0029 \}\lSplitter:B:1:0x000b\l|r0.writeInterfaceToken(android.support.customtabs.ICustomTabsService.Stub.DESCRIPTOR)     \/\/ Catch:\{ all \-\> 0x0029 \}\lr0.writeLong(r8)     \/\/ Catch:\{ all \-\> 0x0029 \}\lr7.mRemote.transact(2, r0, r1, 0)     \/\/ Catch:\{ all \-\> 0x0029 \}\lr1.readException()     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|if (r1.readInt() == 0) goto L_0x0022\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|r2 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|DONT_GENERATE\lPHI: r2 \l  PHI: (r2v1 '_result' boolean) = (r2v0 '_result' boolean), (r2v2 '_result' boolean) binds: [B:3:0x001f, B:4:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|r1.recycle()\lr0.recycle()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|RETURN\l|return r2\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|ExcHandler:  FINALLY\lSplitter:B:1:0x000b\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|FINALLY_INSNS\l|r1.recycle()\lr0.recycle()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|throw r3\l}"];
MethodNode[shape=record,label="{public boolean android.support.customtabs.ICustomTabsService.Stub.Proxy.warmup((r7v0 'this' android.support.customtabs.ICustomTabsService$Stub$Proxy A[IMMUTABLE_TYPE, THIS]), (r8v0 'flags' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.os.RemoteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

