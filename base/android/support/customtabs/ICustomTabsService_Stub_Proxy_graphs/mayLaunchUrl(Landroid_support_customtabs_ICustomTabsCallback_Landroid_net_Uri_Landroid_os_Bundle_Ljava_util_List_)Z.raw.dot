digraph "CFG forandroid.support.customtabs.ICustomTabsService.Stub.Proxy.mayLaunchUrl(Landroid\/support\/customtabs\/ICustomTabsCallback;Landroid\/net\/Uri;Landroid\/os\/Bundle;Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r0 I:android.os.Parcel) =  android.os.Parcel.obtain():android.os.Parcel type: STATIC \l0x0006: INVOKE  (r1 I:android.os.Parcel) =  android.os.Parcel.obtain():android.os.Parcel type: STATIC \l0x000a: CONST_STR  (r4 I:java.lang.String) =  \"android.support.customtabs.ICustomTabsService\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|SYNTHETIC\lSplitter:B:1:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000c\l|0x000c: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:java.lang.String)\l android.os.Parcel.writeInterfaceToken(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('callback' android.support.customtabs.ICustomTabsCallback)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0046 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r4 I:android.os.IBinder) = \l  (r8 I:android.support.customtabs.ICustomTabsCallback A[D('callback' android.support.customtabs.ICustomTabsCallback)])\l android.support.customtabs.ICustomTabsCallback.asBinder():android.os.IBinder type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:android.os.IBinder)\l android.os.Parcel.writeStrongBinder(android.os.IBinder):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('url' android.net.Uri)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0048 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x004d \}]\l0x001b: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.os.Parcel.writeInt(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x001e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l0x001f: INVOKE  \l  (r9 I:android.net.Uri A[D('url' android.net.Uri)])\l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.net.Uri.writeToParcel(android.os.Parcel, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('extras' android.os.Bundle)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0055 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x004d \}]\l0x0025: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.os.Parcel.writeInt(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x0028: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l0x0029: INVOKE  \l  (r10 I:android.os.Bundle A[D('extras' android.os.Bundle)])\l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.os.Bundle.writeToParcel(android.os.Parcel, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r11 I:java.util.List A[D('otherLikelyBundles' java.util.List\<android.os.Bundle\>)])\l android.os.Parcel.writeTypedList(java.util.List):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x002f: IGET  (r4 I:android.os.IBinder) = \l  (r7 I:android.support.customtabs.ICustomTabsService$Stub$Proxy)\l android.support.customtabs.ICustomTabsService.Stub.Proxy.mRemote android.os.IBinder A[Catch:\{ all \-\> 0x004d \}]\l0x0031: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x004d \}]\l0x0032: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l0x0033: INVOKE  \l  (r4 I:android.os.IBinder)\l  (r5 I:int)\l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r1 I:android.os.Parcel A[D('_reply' android.os.Parcel)])\l  (r6 I:int)\l android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l0x0036: INVOKE  (r1 I:android.os.Parcel A[D('_reply' android.os.Parcel)]) android.os.Parcel.readException():void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x0039: INVOKE  (r4 I:int) = (r1 I:android.os.Parcel A[D('_reply' android.os.Parcel)]) android.os.Parcel.readInt():int type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x005a \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: INVOKE  (r1 I:android.os.Parcel A[D('_reply' android.os.Parcel)]) android.os.Parcel.recycle():void type: VIRTUAL \l0x0042: INVOKE  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)]) android.os.Parcel.recycle():void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: RETURN  (r2 I:boolean A[D('_result' boolean)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|SYNTHETIC\lSplitter:B:17:0x0049\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0049\l|0x0049: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.os.Parcel.writeInt(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|ExcHandler: all null\lSplitter:B:1:0x000c\l|0x004d: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|0x004e: INVOKE  (r1 I:android.os.Parcel A[D('_reply' android.os.Parcel)]) android.os.Parcel.recycle():void type: VIRTUAL \l0x0051: INVOKE  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)]) android.os.Parcel.recycle():void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|0x0054: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0055|0x0055: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0056|SYNTHETIC\lSplitter:B:24:0x0056\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0056\l|0x0056: INVOKE  \l  (r0 I:android.os.Parcel A[D('_data' android.os.Parcel)])\l  (r4 I:int)\l android.os.Parcel.writeInt(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x005a|0x005a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean android.support.customtabs.ICustomTabsService.Stub.Proxy.mayLaunchUrl((r7 'this' I:android.support.customtabs.ICustomTabsService$Stub$Proxy A[IMMUTABLE_TYPE, THIS]), (r8 I:android.support.customtabs.ICustomTabsCallback A[D('callback' android.support.customtabs.ICustomTabsCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.net.Uri A[D('url' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.os.Bundle A[D('extras' android.os.Bundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.List\<android.os.Bundle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003f\-0x0046: r2 '_result' boolean\l  0x0006\-0x005b: r0 '_data' android.os.Parcel\l  0x000a\-0x005b: r1 '_reply' android.os.Parcel\l  ?\-0x005b: r8 'callback' android.support.customtabs.ICustomTabsCallback\l  ?\-0x005b: r9 'url' android.net.Uri\l  ?\-0x005b: r10 'extras' android.os.Bundle\l  0x0000\-0x005b: r11 'otherLikelyBundles' java.util.List\<android.os.Bundle\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.os.RemoteException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/customtabs\/ICustomTabsCallback;, Landroid\/net\/Uri;, Landroid\/os\/Bundle;, Ljava\/util\/List, \<, Landroid\/os\/Bundle;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_27;
Node_13 -> Node_14;
Node_15 -> Node_5;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_20;
Node_18 -> Node_8;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_20;
Node_25 -> Node_20;
Node_25 -> Node_10;
Node_27 -> Node_13;
}

