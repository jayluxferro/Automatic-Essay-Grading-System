digraph "CFG forandroid.support.customtabs.CustomTabsSession.mayLaunchUrl(Landroid\/net\/Uri;Landroid\/os\/Bundle;Ljava\/util\/List;)Z" {
subgraph cluster_Region_1325629732 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1468429627 {
label = "Try: R(1:4) catches: R(1:3)";
node [shape=record,color=blue];
subgraph cluster_Region_1062621480 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\l|return r3.mService.mayLaunchUrl(r3.mCallback, r4, r5, r6)\l}"];
}
subgraph cluster_Region_741862158 {
label = "R(1:3) | ExcHandler: RemoteException (e android.os.RemoteException)\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
}
}
subgraph cluster_Region_741862158 {
label = "R(1:3) | ExcHandler: RemoteException (e android.os.RemoteException)\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ RemoteException \-\> 0x0009 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0009|ExcHandler: RemoteException (e android.os.RemoteException)\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public boolean android.support.customtabs.CustomTabsSession.mayLaunchUrl((r3v0 'this' android.support.customtabs.CustomTabsSession A[IMMUTABLE_TYPE, THIS]), (r4v0 'url' android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'extras' android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'otherLikelyBundles' java.util.List\<android.os.Bundle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/net\/Uri;, Landroid\/os\/Bundle;, Ljava\/util\/List, \<, Landroid\/os\/Bundle;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
}

