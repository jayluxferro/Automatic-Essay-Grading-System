digraph "CFG forandroid.support.v7.view.menu.MenuItemWrapperJB.ActionProviderWrapperJB.setVisibilityListener(Landroid\/support\/v4\/view\/ActionProvider$VisibilityListener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r2 I:android.support.v4.view.ActionProvider$VisibilityListener)\l  (r1 I:android.support.v7.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB)\l android.support.v7.view.menu.MenuItemWrapperJB.ActionProviderWrapperJB.mListener android.support.v4.view.ActionProvider$VisibilityListener \l0x0002: IGET  (r0 I:android.view.ActionProvider) = \l  (r1 I:android.support.v7.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB)\l android.support.v7.view.menu.MenuItemWrapperJB.ActionProviderWrapperJB.mInner android.view.ActionProvider \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  \l  (r0 I:android.view.ActionProvider)\l  (r2 I:android.view.ActionProvider$VisibilityListener)\l android.view.ActionProvider.setVisibilityListener(android.view.ActionProvider$VisibilityListener):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.view.menu.MenuItemWrapperJB.ActionProviderWrapperJB.setVisibilityListener((r1 'this' I:android.support.v7.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB A[IMMUTABLE_TYPE, THIS]), (r2 I:android.support.v4.view.ActionProvider$VisibilityListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

