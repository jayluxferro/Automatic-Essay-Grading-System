digraph "CFG forandroid.support.v7.view.menu.MenuBuilder.close(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:android.support.v7.view.menu.MenuBuilder) android.support.v7.view.menu.MenuBuilder.mIsClosing boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: IPUT  \l  (r0 I:boolean)\l  (r3 I:android.support.v7.view.menu.MenuBuilder)\l android.support.v7.view.menu.MenuBuilder.mIsClosing boolean \l0x0008: IGET  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<java.lang.ref.WeakReference\<android.support.v7.view.menu.MenuPresenter\>\>) = (r3 I:android.support.v7.view.menu.MenuBuilder) android.support.v7.view.menu.MenuBuilder.mPresenters java.util.concurrent.CopyOnWriteArrayList \l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r1 I:java.lang.ref.WeakReference) = (java.lang.ref.WeakReference) (r1 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.lang.ref.WeakReference) java.lang.ref.WeakReference.get():java.lang.Object type: VIRTUAL \l0x001e: CHECK_CAST  (r2 I:android.support.v7.view.menu.MenuPresenter) = (android.support.v7.view.menu.MenuPresenter) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IGET  (r2 I:java.util.concurrent.CopyOnWriteArrayList\<java.lang.ref.WeakReference\<android.support.v7.view.menu.MenuPresenter\>\>) = (r3 I:android.support.v7.view.menu.MenuBuilder) android.support.v7.view.menu.MenuBuilder.mPresenters java.util.concurrent.CopyOnWriteArrayList \l0x0024: INVOKE  \l  (r2 I:java.util.concurrent.CopyOnWriteArrayList)\l  (r1 I:java.lang.Object)\l java.util.concurrent.CopyOnWriteArrayList.remove(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: INVOKE  \l  (r2 I:android.support.v7.view.menu.MenuPresenter)\l  (r3 I:android.support.v7.view.menu.MenuBuilder)\l  (r4 I:boolean)\l android.support.v7.view.menu.MenuPresenter.onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: IPUT  \l  (r4 I:boolean)\l  (r3 I:android.support.v7.view.menu.MenuBuilder)\l android.support.v7.view.menu.MenuBuilder.mIsClosing boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public final void android.support.v7.view.menu.MenuBuilder.close((r3 'this' I:android.support.v7.view.menu.MenuBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_4;
Node_10 -> Node_11;
}

