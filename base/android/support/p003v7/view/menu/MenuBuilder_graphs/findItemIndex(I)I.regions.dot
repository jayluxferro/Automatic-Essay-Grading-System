digraph "CFG forandroid.support.v7.view.menu.MenuBuilder.findItemIndex(I)I" {
subgraph cluster_Region_995352611 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = size()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_547736677 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x0016\l|if (r1 \< r0) goto L_0x0007\l}"];
subgraph cluster_Region_86680654 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_328809040 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_464209465 {
label = "IF [B:3:0x0013] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r3.mItems.get(r1).getItemId() == r4) goto L_0x0015\l}"];
subgraph cluster_Region_1071513495 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_1752555499 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x0016\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\l|return \-1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int android.support.v7.view.menu.MenuBuilder.findItemIndex((r3v0 'this' android.support.v7.view.menu.MenuBuilder A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

