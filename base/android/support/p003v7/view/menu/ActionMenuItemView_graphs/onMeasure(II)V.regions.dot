digraph "CFG forandroid.support.v7.view.menu.ActionMenuItemView.onMeasure(II)V" {
subgraph cluster_Region_286930372 {
label = "R(6:0|(1:4)|5|6|(1:14)|(1:(1:18)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean boolean r0 = hasText()\l}"];
subgraph cluster_IfRegion_1275957599 {
label = "IF [B:1:0x0004, B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|ADDED_TO_REGION\l|if (r0 == true) goto L_0x0006\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (r5.mSavedPaddingLeft \>= 0) goto L_0x000a\l}"];
subgraph cluster_Region_96370422 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|super.setPadding(r5.mSavedPaddingLeft, getPaddingTop(), getPaddingRight(), getPaddingBottom())\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x001b|super.onMeasure(r6, r7)\lint int r1 = android.view.View.MeasureSpec.getMode(r6)\lint int r6 = android.view.View.MeasureSpec.getSize(r6)\lint int r2 = getMeasuredWidth()\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|int r6 = r1 == Integer.MIN_VALUE ? java.lang.Math.min(r6, r5.mMinWidth) : r5.mMinWidth\l}"];
subgraph cluster_IfRegion_2139282162 {
label = "IF [B:10:0x0039, B:12:0x003d, B:13:0x003f] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0039|ADDED_TO_REGION\l|if (r1 != 1073741824) goto L_0x003b\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|ADDED_TO_REGION\l|if (r5.mMinWidth \> 0) goto L_0x003f\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|ADDED_TO_REGION\l|if (r2 \< r6) goto L_0x0041\l}"];
subgraph cluster_Region_1064723667 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0041|super.onMeasure(android.view.View.MeasureSpec.makeMeasureSpec(r6, 1073741824), r7)\l}"];
}
}
subgraph cluster_Region_1794237951 {
label = "R(1:(1:18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_760629894 {
label = "IF [B:15:0x0048, B:17:0x004c] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0048|if (r0 != true) goto L_0x004a\l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|ADDED_TO_REGION\l|if (r5.mIcon != null) goto L_0x004e\l}"];
subgraph cluster_Region_1974060046 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x004e|super.setPadding((getMeasuredWidth() \- r5.mIcon.getBounds().width()) \/ 2, getPaddingTop(), getPaddingRight(), getPaddingBottom())\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002e}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0035}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0037|PHI: r6 \l  PHI: (r6v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x003b}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x004a}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void android.support.v7.view.menu.ActionMenuItemView.onMeasure((r5v0 'this' android.support.v7.view.menu.ActionMenuItemView A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_15[style=dashed];
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_20[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_21[style=dashed];
Node_18 -> Node_19;
Node_2 -> Node_3;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_16 -> Node_17;
}

