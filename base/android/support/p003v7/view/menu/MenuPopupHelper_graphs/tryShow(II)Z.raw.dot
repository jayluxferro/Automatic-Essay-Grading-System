digraph "CFG forandroid.support.v7.view.menu.MenuPopupHelper.tryShow(II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:android.support.v7.view.menu.MenuPopupHelper) android.support.v7.view.menu.MenuPopupHelper.isShowing():boolean type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:android.view.View) = (r2 I:android.support.v7.view.menu.MenuPopupHelper) android.support.v7.view.menu.MenuPopupHelper.mAnchorView android.view.View \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: RETURN  (r3 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  \l  (r2 I:android.support.v7.view.menu.MenuPopupHelper)\l  (r3 I:int)\l  (r4 I:int)\l  (r1 I:boolean)\l  (r1 I:boolean)\l android.support.v7.view.menu.MenuPopupHelper.showPopup(int, int, boolean, boolean):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.view.menu.MenuPopupHelper.tryShow((r2 'this' I:android.support.v7.view.menu.MenuPopupHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

