digraph "CFG forandroid.support.v7.view.menu.MenuItemWrapperICS.setExclusiveCheckable(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x002c \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|Catch:\{ Exception \-\> 0x002c \}\l|if (r6.mSetExclusiveCheckableMethod != null) goto L_0x001c     \/\/ Catch:\{ Exception \-\> 0x002c \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|Catch:\{ Exception \-\> 0x002c \}\l|java.lang.Class r0 = ((android.support.p000v4.internal.view.SupportMenuItem) r6.mWrappedObject).getClass()     \/\/ Catch:\{ Exception \-\> 0x002c \}\ljava.lang.Class[] r4 = new java.lang.Class[]\{java.lang.Boolean.TYPE\}\lr6.mSetExclusiveCheckableMethod = r0.getDeclaredMethod(\"setExclusiveCheckable\", r4)     \/\/ Catch:\{ Exception \-\> 0x002c \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|Catch:\{ Exception \-\> 0x002c \}\l|java.lang.reflect.Method r0 = r6.mSetExclusiveCheckableMethod     \/\/ Catch:\{ Exception \-\> 0x002c \}\ljava.lang.Object r3 = r6.mWrappedObject     \/\/ Catch:\{ Exception \-\> 0x002c \}\ljava.lang.Object[] r2 = new java.lang.Object[]\{java.lang.Boolean.valueOf(r7)\}\lr0.invoke(r3, r2)     \/\/ Catch:\{ Exception \-\> 0x002c \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|ExcHandler: Exception (r7v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r7 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|android.util.Log.w(LOG_TAG, \"Error while calling setExclusiveCheckable\", r7)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v7.view.menu.MenuItemWrapperICS.setExclusiveCheckable((r6v0 'this' android.support.v7.view.menu.MenuItemWrapperICS A[IMMUTABLE_TYPE, THIS]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

