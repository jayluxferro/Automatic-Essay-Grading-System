digraph "CFG forandroid.support.v7.view.menu.ListMenuItemView.setShortcut(ZC)V" {
subgraph cluster_Region_1314370887 {
label = "R(3:0|(1:6)|(1:(1:9)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r2 = (!r2 \|\| !r1.mItemData.shouldShowShortcut()) ? 8 : 0\l}"];
subgraph cluster_IfRegion_61414735 {
label = "IF [B:5:0x000e] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|PHI: r2 \l  PHI: (r2v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == 0) goto L_0x0010\l}"];
subgraph cluster_Region_363186730 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|r1.mShortcutView.setText(r1.mItemData.getShortcutLabel())\l}"];
}
}
subgraph cluster_Region_2081370582 {
label = "R(1:(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1738779622 {
label = "IF [B:8:0x0021] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r1.mShortcutView.getVisibility() != r2) goto L_0x0023\l}"];
subgraph cluster_Region_1784372188 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0023|r1.mShortcutView.setVisibility(r2)\l}"];
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008|REMOVE\lADDED_TO_REGION\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001b}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v7.view.menu.ListMenuItemView.setShortcut((r1v0 'this' android.support.v7.view.menu.ListMenuItemView A[IMMUTABLE_TYPE, THIS]), (r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 char A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_11[style=dashed];
Node_9 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_7 -> Node_8;
}

