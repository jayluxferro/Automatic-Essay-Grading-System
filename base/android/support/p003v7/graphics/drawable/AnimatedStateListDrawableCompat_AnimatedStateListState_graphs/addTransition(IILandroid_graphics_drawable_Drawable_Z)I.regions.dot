digraph "CFG forandroid.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.addTransition(IILandroid\/graphics\/drawable\/Drawable;Z)I" {
subgraph cluster_Region_2065015774 {
label = "R(5:0|1|4|(1:6)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r12 = super.addChild(r12)\llong long r0 = generateTransitionKey(r10, r11)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|long r2 = r13 ? REVERSIBLE_FLAG_BIT : 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|PHI: r2 \l  PHI: (r2v0 long) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|long long r5 = (long) r12\lr9.mTransitions.append(r0, java.lang.Long.valueOf(r5 \| r2))\l}"];
subgraph cluster_IfRegion_256471126 {
label = "IF [B:5:0x001e] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001e|if (r13 == true) goto L_0x0020\l}"];
subgraph cluster_Region_1090880493 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0020|r9.mTransitions.append(generateTransitionKey(r11, r10), java.lang.Long.valueOf(REVERSED_BIT \| r5 \| r2))\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0034|RETURN\l|return r12\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0010}"];
MethodNode[shape=record,label="{int android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.addTransition((r9v0 'this' android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState A[IMMUTABLE_TYPE, THIS]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

