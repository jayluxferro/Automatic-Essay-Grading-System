digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.canConstantState()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mCheckedConstantState boolean A[Catch:\{ all \-\> 0x002a \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0009 A[Catch:\{ all \-\> 0x002a \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:boolean) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mCanConstantState boolean A[Catch:\{ all \-\> 0x002a \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|SYNTHETIC\lSplitter:B:7:0x0009\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0009\l|0x0009: INVOKE  \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures():void type: DIRECT A[Catch:\{ all \-\> 0x002a \}, TRY_ENTER]\l0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x002a \}]\l0x000d: IPUT  \l  (r0 I:boolean)\l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mCheckedConstantState boolean A[Catch:\{ all \-\> 0x002a \}]\l0x000f: IGET  (r1 I:int) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mNumChildren int A[Catch:\{ all \-\> 0x002a \}]\l0x0011: IGET  (r2 I:android.graphics.drawable.Drawable[]) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawables android.graphics.drawable.Drawable[] A[Catch:\{ all \-\> 0x002a \}]\l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002a \}]\l0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:16:0x0026 A[Catch:\{ all \-\> 0x002a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x002a \}]\l0x0019: INVOKE  (r5 I:android.graphics.drawable.Drawable$ConstantState) = (r5 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.getConstantState():android.graphics.drawable.Drawable$ConstantState type: VIRTUAL A[Catch:\{ all \-\> 0x002a \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0023 A[Catch:\{ all \-\> 0x002a \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IPUT  \l  (r3 I:boolean)\l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mCanConstantState boolean A[Catch:\{ all \-\> 0x002a \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: RETURN  (r3 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|SYNTHETIC\lSplitter:B:16:0x0026\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0026\l|0x0026: IPUT  \l  (r0 I:boolean)\l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mCanConstantState boolean A[Catch:\{ all \-\> 0x002a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|0x0028: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0029|0x0029: RETURN  (r0 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002a|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x002a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002b: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized boolean android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.canConstantState((r6 'this' I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_9;
Node_16 -> Node_17;
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

