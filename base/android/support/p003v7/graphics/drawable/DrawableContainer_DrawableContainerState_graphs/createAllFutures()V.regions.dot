digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures()V" {
subgraph cluster_Region_1165651708 {
label = "R(1:(1:(3:2|(1:4)|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_2129993256 {
label = "R(1:(3:2|(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_763581577 {
label = "IF [B:1:0x0002] THEN: R(3:2|(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mDrawableFutures != null) goto L_0x0004\l}"];
subgraph cluster_Region_69320417 {
label = "R(3:2|(1:4)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|int int r0 = r6.mDrawableFutures.size()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1594681929 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:2:0x0004, B:4:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000b\-\>B:4:0x000d\l|if (r1 \< r0) goto L_0x000d\l}"];
subgraph cluster_Region_18167180 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|LOOP_END\lLOOP:0: B:3:0x000b\-\>B:4:0x000d\l|r6.mDrawables[r6.mDrawableFutures.keyAt(r1)] = prepareDrawable(r6.mDrawableFutures.valueAt(r1).newDrawable(r6.mSourceRes))\lr1++\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x002c|r6.mDrawableFutures = null\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x002c|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures((r6v0 'this' android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_3;
Node_5 -> Node_7;
Node_0 -> Node_1;
Node_6 -> Node_5;
}

