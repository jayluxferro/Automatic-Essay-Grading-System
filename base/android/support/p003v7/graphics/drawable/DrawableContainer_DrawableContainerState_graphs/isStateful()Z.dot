digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.isStateful()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mCheckedStateful == false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return r6.mStateful\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|createAllFutures()\lint r0 = r6.mNumChildren\landroid.graphics.drawable.Drawable[] r1 = r6.mDrawables\lr2 = false\lr3 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0007, B:10:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0010\-\>B:10:0x001d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r3 \>= r0) goto L_0x0020\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013}"];
Node_8 [shape=record,label="{8\:\ 0x0019|if (r1[r3].isStateful() == false) goto L_0x001d\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|r2 = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|LOOP_END\lLOOP:0: B:5:0x0010\-\>B:10:0x001d\l|int r3 = r3 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:13:0x0020, B:9:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|r6.mStateful = r2\lr6.mCheckedStateful = true\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|RETURN\l|return r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final boolean android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.isStateful((r6v0 'this' android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_14[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_13 -> Node_11;
Node_14 -> Node_9;
}

