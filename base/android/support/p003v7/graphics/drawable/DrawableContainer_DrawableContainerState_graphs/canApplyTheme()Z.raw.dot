digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.canApplyTheme()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mNumChildren int \l0x0002: IGET  (r1 I:android.graphics.drawable.Drawable[]) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawables android.graphics.drawable.Drawable[] \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:13:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: AGET  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x000a: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r4 I:boolean) = (r4 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.canApplyTheme():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r5 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r4 I:android.util.SparseArray\<android.graphics.drawable.Drawable$ConstantState\>) = \l  (r6 I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState)\l android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawableFutures android.util.SparseArray \l0x0016: INVOKE  (r4 I:java.lang.Object) = (r4 I:android.util.SparseArray), (r3 I:int) android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x001a: CHECK_CAST  (r4 I:android.graphics.drawable.Drawable$ConstantState) = (android.graphics.drawable.Drawable$ConstantState) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: INVOKE  (r4 I:boolean) = (r4 I:android.graphics.drawable.Drawable$ConstantState) android.graphics.drawable.Drawable.ConstantState.canApplyTheme():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: RETURN  (r5 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.canApplyTheme((r6 'this' I:android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.RequiresApi, \{value=21\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_1;
}

