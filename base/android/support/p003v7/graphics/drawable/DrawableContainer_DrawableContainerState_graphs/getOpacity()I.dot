digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.getOpacity()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mCheckedOpacity == false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return r6.mOpacity\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|createAllFutures()\lint r0 = r6.mNumChildren\landroid.graphics.drawable.Drawable[] r1 = r6.mDrawables\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r0 \<= 0) goto L_0x0018\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|int r2 = r1[0].getOpacity()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r2 = \-2\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|PHI: r2 \l  PHI: (r2v0 int) = (r2v4 int), (r2v7 int) binds: [B:7:0x0018, B:6:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r2\lr2 = 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_START\lPHI: r2 r4 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:8:0x0019, B:10:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:8:0x0019, B:10:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x001c\-\>B:10:0x001e\l|if (r2 \>= r0) goto L_0x002b\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|LOOP_END\lLOOP:0: B:9:0x001c\-\>B:10:0x001e\l|int r4 = android.graphics.drawable.Drawable.resolveOpacity(r4, r1[r2].getOpacity())\lint r2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|r6.mOpacity = r4\lr6.mCheckedOpacity = true\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|RETURN\l|return r4\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final int android.support.v7.graphics.drawable.DrawableContainer.DrawableContainerState.getOpacity((r6v0 'this' android.support.v7.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_13 -> Node_11;
}

