digraph "CFG forandroid.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.onStateChange([I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState) = \l  (r2 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat)\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.mState android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState \l0x0002: INVOKE  (r0 I:int) = \l  (r0 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState)\l  (r3 I:int[])\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.indexOfKeyframe(int[]):int type: VIRTUAL \l0x0006: INVOKE  (r1 I:int) = \l  (r2 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat)\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.getCurrentIndex():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r1 I:boolean) = \l  (r2 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat)\l  (r0 I:int)\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.selectTransition(int):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r0 I:boolean) = \l  (r2 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat)\l  (r0 I:int)\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.selectDrawable(int):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: INVOKE  (r1 I:android.graphics.drawable.Drawable) = \l  (r2 I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat)\l android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.getCurrent():android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: INVOKE  (r3 I:boolean) = (r1 I:android.graphics.drawable.Drawable), (r3 I:int[]) android.graphics.drawable.Drawable.setState(int[]):boolean type: VIRTUAL \l0x0025: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat.onStateChange((r2 'this' I:android.support.v7.graphics.drawable.AnimatedStateListDrawableCompat A[IMMUTABLE_TYPE, THIS]), (r3 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

