digraph "CFG forandroid.support.v7.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet([I)I" {
subgraph cluster_Region_1669968242 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int[][] int[][] r0 = r4.mStateSets\lint int r1 = getChildCount()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1712271869 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:5:0x0012\l|if (r2 \< r1) goto L_0x0009\l}"];
subgraph cluster_Region_357152059 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_2004481729 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_166453769 {
label = "IF [B:3:0x000f] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|if (android.util.StateSet.stateSetMatches(r0[r2], r5) == true) goto L_0x0011\l}"];
subgraph cluster_Region_1550302779 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1925940017 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:5:0x0012\l|r2++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0015|RETURN\l|return \-1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011|SYNTHETIC\l}"];
MethodNode[shape=record,label="{int android.support.v7.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet((r4v0 'this' android.support.v7.graphics.drawable.StateListDrawable$StateListState A[IMMUTABLE_TYPE, THIS]), (r5v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

