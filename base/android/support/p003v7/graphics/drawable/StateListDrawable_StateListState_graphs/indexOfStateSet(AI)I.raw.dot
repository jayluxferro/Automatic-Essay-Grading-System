digraph "CFG forandroid.support.v7.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet([I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[][]) = \l  (r4 I:android.support.v7.graphics.drawable.StateListDrawable$StateListState)\l android.support.v7.graphics.drawable.StateListDrawable.StateListState.mStateSets int[][] \l0x0002: INVOKE  (r1 I:int) = \l  (r4 I:android.support.v7.graphics.drawable.StateListDrawable$StateListState)\l android.support.v7.graphics.drawable.StateListDrawable.StateListState.getChildCount():int type: VIRTUAL \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x000b: INVOKE  (r3 I:boolean) = (r3 I:int[]), (r5 I:int[]) android.util.StateSet.stateSetMatches(int[], int[]):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r2 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{int android.support.v7.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet((r4 'this' I:android.support.v7.graphics.drawable.StateListDrawable$StateListState A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

