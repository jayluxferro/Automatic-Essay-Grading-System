digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.BlockInvalidateCallback.scheduleDrawable(Landroid\/graphics\/drawable\/Drawable;Ljava\/lang\/Runnable;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable$Callback) = \l  (r1 I:android.support.v7.graphics.drawable.DrawableContainer$BlockInvalidateCallback)\l android.support.v7.graphics.drawable.DrawableContainer.BlockInvalidateCallback.mCallback android.graphics.drawable.Drawable$Callback \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.drawable.Drawable$Callback) = \l  (r1 I:android.support.v7.graphics.drawable.DrawableContainer$BlockInvalidateCallback)\l android.support.v7.graphics.drawable.DrawableContainer.BlockInvalidateCallback.mCallback android.graphics.drawable.Drawable$Callback \l0x0006: INVOKE  \l  (r0 I:android.graphics.drawable.Drawable$Callback)\l  (r2 I:android.graphics.drawable.Drawable)\l  (r3 I:java.lang.Runnable)\l  (r4 I:long)\l android.graphics.drawable.Drawable.Callback.scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.graphics.drawable.DrawableContainer.BlockInvalidateCallback.scheduleDrawable((r1 'this' I:android.support.v7.graphics.drawable.DrawableContainer$BlockInvalidateCallback A[IMMUTABLE_TYPE, THIS]), (r2 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Runnable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

