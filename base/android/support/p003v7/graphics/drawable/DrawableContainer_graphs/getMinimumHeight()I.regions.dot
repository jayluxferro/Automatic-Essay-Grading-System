digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.getMinimumHeight()I" {
subgraph cluster_Region_2052832610 {
label = "R(1:(2:(1:3)|(1:(2:(1:8)|(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1207927995 {
label = "R(2:(1:3)|(1:(2:(1:8)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1342069655 {
label = "IF [B:1:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r1.mDrawableContainerState.isConstantSize() == true) goto L_0x0008\l}"];
subgraph cluster_Region_1481024587 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|RETURN\l|return r1.mDrawableContainerState.getConstantMinimumHeight()\l}"];
}
}
subgraph cluster_Region_2136056460 {
label = "R(1:(2:(1:8)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1144007553 {
label = "R(2:(1:8)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2033185395 {
label = "IF [B:5:0x0011] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r1.mCurrDrawable != null) goto L_0x0013\l}"];
subgraph cluster_Region_346453473 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r1.mCurrDrawable.getMinimumHeight()\l}"];
}
}
subgraph cluster_Region_1712451643 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013}"];
MethodNode[shape=record,label="{public int android.support.v7.graphics.drawable.DrawableContainer.getMinimumHeight((r1v0 'this' android.support.v7.graphics.drawable.DrawableContainer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_8;
}

