digraph "CFG forandroid.support.v7.graphics.drawable.DrawableContainer.getPadding(Landroid\/graphics\/Rect;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.graphics.Rect r0 = r3.mDrawableContainerState.getConstantPadding()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 == null) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r4.set(r0)\lint r0 = r0.right\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if ((r0 \| ((r0.left \| r0.top) \| r0.bottom)) == 0) goto L_0x001a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|r0 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|r0 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r3.mCurrDrawable == null) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|boolean r0 = r3.mCurrDrawable.getPadding(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|boolean r0 = super.getPadding(r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v4 boolean), (r0v6 boolean), (r0v9 boolean), (r0v10 boolean) binds: [B:9:0x0027, B:8:0x0020, B:5:0x001a, B:4:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if (needsMirroring() == false) goto L_0x0039\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|int r1 = r4.left\lr4.left = r4.right\lr4.right = r1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.graphics.drawable.DrawableContainer.getPadding((r3v0 'this' android.support.v7.graphics.drawable.DrawableContainer A[IMMUTABLE_TYPE, THIS]), (r4v0 android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

