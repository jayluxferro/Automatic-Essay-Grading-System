digraph "CFG forandroid.support.v7.widget.LinearLayoutCompat.forceUniformHeight(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 1073741824)\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:7:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:7:0x0037\l|if (r1 \>= r11) goto L_0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|android.view.View r3 = getVirtualChildAt(r1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r3.getVisibility() == 8) goto L_0x0037\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|android.support.v7.widget.LinearLayoutCompat$LayoutParams r8 = (android.support.p003v7.widget.LinearLayoutCompat.LayoutParams) r3.getLayoutParams()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|if (r8.height != \-1) goto L_0x0037\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|int r9 = r8.width\lr8.width = r3.getMeasuredWidth()\lmeasureChildWithMargins(r3, r12, 0, r0, 0)\lr8.width = r9\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:7:0x0037\l|int r1 = r1 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.LinearLayoutCompat.forceUniformHeight((r10v0 'this' android.support.v7.widget.LinearLayoutCompat A[IMMUTABLE_TYPE, THIS]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_10;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_7;
Node_12 -> Node_7;
}

