digraph "CFG forandroid.support.v7.widget.SwitchCompat.drawableStateChanged()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.drawableStateChanged()\lint[] r0 = getDrawableState()\landroid.graphics.drawable.Drawable r1 = r4.mThumbDrawable\lr2 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r1 == null) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r1.isStateful() == false) goto L_0x0017\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|r2 = false \| r1.setState(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v0 boolean), (r2v4 boolean) binds: [B:1:0x000a, B:3:0x0010, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.drawable.Drawable r1 = r4.mTrackDrawable\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|if (r1 == null) goto L_0x0026\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r1.isStateful() == false) goto L_0x0026\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|r2 = r2 \| r1.setState(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v1 boolean), (r2v3 boolean) binds: [B:6:0x0019, B:8:0x001f, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|invalidate()\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void android.support.v7.widget.SwitchCompat.drawableStateChanged((r4v0 'this' android.support.v7.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
}

