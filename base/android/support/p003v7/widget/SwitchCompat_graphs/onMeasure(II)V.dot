digraph "CFG forandroid.support.v7.widget.SwitchCompat.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mShowText == false) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r6.mOnLayout != null) goto L_0x0010\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r6.mOnLayout = makeLayout(r6.mTextOn)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r6.mOffLayout != null) goto L_0x001c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|r6.mOffLayout = makeLayout(r6.mTextOff)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|android.graphics.Rect r0 = r6.mTempRect\lr2 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|if (r6.mThumbDrawable == null) goto L_0x003b\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|r6.mThumbDrawable.getPadding(r0)\lint r1 = (r6.mThumbDrawable.getIntrinsicWidth() \- r0.left) \- r0.right\lint r3 = r6.mThumbDrawable.getIntrinsicHeight()\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|r1 = 0\lr3 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|PHI: r1 r3 \l  PHI: (r1v1 int) = (r1v10 int), (r1v15 int) binds: [B:11:0x003b, B:10:0x0023] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v0 int) = (r3v1 int), (r3v5 int) binds: [B:11:0x003b, B:10:0x0023] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|if (r6.mShowText == false) goto L_0x0057\l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|int r4 = java.lang.Math.max(r6.mOnLayout.getWidth(), r6.mOffLayout.getWidth()) + (r6.mThumbTextPadding * 2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0057|r4 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|PHI: r4 \l  PHI: (r4v1 int) = (r4v7 int), (r4v11 int) binds: [B:15:0x0057, B:14:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|r6.mThumbWidth = java.lang.Math.max(r4, r1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0060|if (r6.mTrackDrawable == null) goto L_0x006e\l}"];
Node_18 [shape=record,label="{18\:\ 0x0062|r6.mTrackDrawable.getPadding(r0)\lint r2 = r6.mTrackDrawable.getIntrinsicHeight()\l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|r0.setEmpty()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0071|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:19:0x006e, B:18:0x0062] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r0.left\lint r0 = r0.right\l}"];
Node_21 [shape=record,label="{21\:\ 0x0077|if (r6.mThumbDrawable == null) goto L_0x008b\l}"];
Node_22 [shape=record,label="{22\:\ 0x0079|android.graphics.Rect r4 = android.support.p003v7.widget.DrawableUtils.getOpticalBounds(r6.mThumbDrawable)\lint r1 = java.lang.Math.max(r1, r4.left)\lint r0 = java.lang.Math.max(r0, r4.right)\l}"];
Node_23 [shape=record,label="{23\:\ 0x008b|PHI: r0 r1 \l  PHI: (r0v3 int) = (r0v2 int), (r0v5 int) binds: [B:21:0x0077, B:22:0x0079] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v5 int) = (r1v4 int), (r1v7 int) binds: [B:21:0x0077, B:22:0x0079] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = java.lang.Math.max(r6.mSwitchMinWidth, ((r6.mThumbWidth * 2) + r1) + r0)\lint r1 = java.lang.Math.max(r2, r3)\lr6.mSwitchWidth = r0\lr6.mSwitchHeight = r1\lsuper.onMeasure(r7, r8)\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a6|if (getMeasuredHeight() \>= r1) goto L_?\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a8|setMeasuredDimension(getMeasuredWidthAndState(), r1)\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.SwitchCompat.onMeasure((r6v0 'this' android.support.v7.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
}

