digraph "CFG forandroid.support.v7.widget.SwitchCompat.setChecked(Z)V" {
subgraph cluster_Region_560445516 {
label = "R(2:0|(2:(3:5|9|10)|(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.setChecked(r2)\lboolean boolean r2 = isChecked()\l}"];
subgraph cluster_Region_569506616 {
label = "R(2:(3:5|9|10)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1836607578 {
label = "IF [B:1:0x000b, B:3:0x0011] THEN: R(3:5|9|10) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|if (getWindowToken() == null) goto L_0x0017\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|ADDED_TO_REGION\l|if (android.support.p000v4.view.ViewCompat.isLaidOut(r1) == false) goto L_0x0017\l}"];
subgraph cluster_Region_190083359 {
label = "R(3:5|9|10)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|cancelPositionAnimator()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|PHI: r2 \l  PHI: (r2v2 float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|setThumbPosition(r2 ? 1.0f : 0.0f)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_469218932 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|animateThumbToCheckedState(r2)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001f}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.SwitchCompat.setChecked((r1v0 'this' android.support.v7.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]), (r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_9 -> Node_10;
Node_4 -> Node_11;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
}

