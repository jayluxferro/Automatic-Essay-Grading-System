digraph "CFG forandroid.support.v7.widget.ListPopupWindow.setHeight(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"Invalid height. Must be a positive value, MATCH_PARENT, or WRAP_CONTENT.\" \l0x000d: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IPUT  \l  (r2 I:int)\l  (r1 I:android.support.v7.widget.ListPopupWindow)\l android.support.v7.widget.ListPopupWindow.mDropDownHeight int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.ListPopupWindow.setHeight((r1 'this' I:android.support.v7.widget.ListPopupWindow A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
}

