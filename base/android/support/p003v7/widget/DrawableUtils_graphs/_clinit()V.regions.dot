digraph "CFG forandroid.support.v7.widget.DrawableUtils.\<clinit\>()V" {
subgraph cluster_Region_278488344 {
label = "R(2:0|(1:(1:4))(0))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_IfRegion_998157351 {
label = "IF [B:1:0x000b] THEN: R(1:(1:4)) ELSE: R(0)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|if (android.os.Build.VERSION.SDK_INT \>= 18) goto L_0x000d\l}"];
subgraph cluster_Region_55430784 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_395852654 {
label = "Try: R(1:4) catches: R(0)";
node [shape=record,color=blue];
subgraph cluster_Region_1290939680 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x0015 \}\lSplitter:B:3:0x000f\l|sInsetsClazz = java.lang.Class.forName(\"android.graphics.Insets\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x0015 \}\l}"];
}
subgraph cluster_Region_35897101 {
label = "R(0) | ExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\l";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1870088199 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_35897101 {
label = "R(0) | ExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\l";
node [shape=record,color=blue];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000d}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000f|SYNTHETIC\lSplitter:B:3:0x000f\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\lSplitter:B:3:0x000f\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static void android.support.v7.widget.DrawableUtils.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_5 -> Node_7;
}

