digraph "CFG forandroid.support.v7.widget.RecyclerView.SmoothScroller.Action.validate()V" {
subgraph cluster_Region_214724956 {
label = "R(1:(1:5)(1:(1:10)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_975278823 {
label = "IF [B:1:0x0003, B:3:0x0007] THEN: R(1:5) ELSE: R(1:(1:10)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r2.mInterpolator != null) goto L_0x0005\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|ADDED_TO_REGION\l|if (r2.mDuration \< 1) goto L_0x000a\l}"];
subgraph cluster_Region_348737585 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|throw new java.lang.IllegalStateException(\"If you provide an interpolator, you must set a positive duration\")\l}"];
}
subgraph cluster_Region_1756705600 {
label = "R(1:(1:10)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_127723931 {
label = "IF [B:7:0x0014] THEN: R(1:10) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r2.mDuration \< 1) goto L_0x0017\l}"];
subgraph cluster_Region_823981349 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001e|throw new java.lang.IllegalStateException(\"Scroll duration must be a positive number\")\l}"];
}
subgraph cluster_Region_1862951919 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0016}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.RecyclerView.SmoothScroller.Action.validate((r2v0 'this' android.support.v7.widget.RecyclerView$SmoothScroller$Action A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_9 -> Node_10;
}

