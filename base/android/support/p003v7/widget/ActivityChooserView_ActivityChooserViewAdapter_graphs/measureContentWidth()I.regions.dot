digraph "CFG forandroid.support.v7.widget.ActivityChooserView.ActivityChooserViewAdapter.measureContentWidth()I" {
subgraph cluster_Region_1150296965 {
label = "R(4:0|(1:2)|3|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r9.mMaxActivityCount\lr9.mMaxActivityCount = Integer.MAX_VALUE\lint r1 = 0\lint int r2 = android.view.View.MeasureSpec.makeMeasureSpec(0, 0)\lint int r3 = android.view.View.MeasureSpec.makeMeasureSpec(0, 0)\lint int r4 = getCount()\landroid.view.View r6 = null\lint r7 = 0\l}"];
subgraph cluster_LoopRegion_2027798480 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0017|LOOP_START\lPHI: r1 r6 r7 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:2:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 android.view.View) = (r6v0 android.view.View), (r6v2 android.view.View) binds: [B:0:0x0000, B:2:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:0:0x0000, B:2:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0017\-\>B:2:0x0019\l|if (r1 \< r4) goto L_0x0019\l}"];
subgraph cluster_Region_1152734597 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0017\-\>B:2:0x0019\l|android.view.View r6 = getView(r1, r6, (android.view.ViewGroup) null)\lr6.measure(r2, r3)\lint r7 = java.lang.Math.max(r7, r6.getMeasuredWidth())\lr1++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x002b|r9.mMaxActivityCount = r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|RETURN\l|return r7\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int android.support.v7.widget.ActivityChooserView.ActivityChooserViewAdapter.measureContentWidth((r9v0 'this' android.support.v7.widget.ActivityChooserView$ActivityChooserViewAdapter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

