digraph "CFG forandroid.support.v7.widget.RecyclerView.Recycler.viewRangeUpdate(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r5 = r5 + r4\lint r0 = r3.mCachedViews.size() + \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:8:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0009\-\>B:8:0x0023\l|if (r0 \< 0) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|android.support.v7.widget.RecyclerView$ViewHolder r1 = r3.mCachedViews.get(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r1 != null) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|int r2 = r1.mPosition\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if (r2 \< r4) goto L_0x0023\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r2 \>= r5) goto L_0x0023\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r1.addFlags(2)\lrecycleCachedViewAt(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|LOOP_END\lLOOP:0: B:1:0x0009\-\>B:8:0x0023\l|int r0 = r0 + \-1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.RecyclerView.Recycler.viewRangeUpdate((r3v0 'this' android.support.v7.widget.RecyclerView$Recycler A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_11;
Node_8 -> Node_1;
Node_10 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_14 -> Node_8;
}

