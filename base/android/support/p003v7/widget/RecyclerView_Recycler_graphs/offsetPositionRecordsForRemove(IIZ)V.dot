digraph "CFG forandroid.support.v7.widget.RecyclerView.Recycler.offsetPositionRecordsForRemove(IIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5 + r6\lint r1 = r4.mCachedViews.size() + \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:0:0x0000, B:10:0x002b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:10:0x002b\l|if (r1 \< 0) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|android.support.v7.widget.RecyclerView$ViewHolder r2 = r4.mCachedViews.get(r1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (r2 == null) goto L_0x002b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if (r2.mPosition \< r0) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|r2.offsetPosition(\-r6, r7)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r2.mPosition \< r5) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|r2.addFlags(8)\lrecycleCachedViewAt(r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:10:0x002b\l|int r1 = r1 + \-1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.RecyclerView.Recycler.offsetPositionRecordsForRemove((r4v0 'this' android.support.v7.widget.RecyclerView$Recycler A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_13;
Node_10 -> Node_1;
Node_12 -> Node_11;
Node_13 -> Node_10;
Node_14 -> Node_10;
Node_15 -> Node_10;
Node_16 -> Node_10;
}

