digraph "CFG forandroid.support.v7.widget.LinearSmoothScroller.calculateTimeForScrolling(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:int) = (r3 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0004: CAST  (r3 I:float) = (float) (r3 I:int) \l0x0005: IGET  (r0 I:float) = (r2 I:android.support.v7.widget.LinearSmoothScroller) android.support.v7.widget.LinearSmoothScroller.MILLISECONDS_PER_PX float \l0x0007: ARITH  (r3 I:float) = (r3 I:float) * (r0 I:float) \l0x0009: CAST  (r0 I:double) = (double) (r3 I:float) \l0x000a: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x000e: CAST  (r3 I:int) = (int) (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{protected int android.support.v7.widget.LinearSmoothScroller.calculateTimeForScrolling((r2 'this' I:android.support.v7.widget.LinearSmoothScroller A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

