digraph "CFG forandroid.support.v7.widget.LinearSmoothScroller.calculateDxToMakeVisible(Landroid\/view\/View;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.support.v7.widget.RecyclerView$LayoutManager) = (r10 I:android.support.v7.widget.LinearSmoothScroller) android.support.v7.widget.LinearSmoothScroller.getLayoutManager():android.support.v7.widget.RecyclerView$LayoutManager type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.canScrollHorizontally():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r1 I:android.view.ViewGroup$LayoutParams) = (r11 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x0011: CHECK_CAST  (r1 I:android.support.v7.widget.RecyclerView$LayoutParams) = (android.support.v7.widget.RecyclerView$LayoutParams) (r1 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r2 I:int) = \l  (r0 I:android.support.v7.widget.RecyclerView$LayoutManager)\l  (r11 I:android.view.View)\l android.support.v7.widget.RecyclerView.LayoutManager.getDecoratedLeft(android.view.View):int type: VIRTUAL \l0x0017: IGET  (r3 I:int) = (r1 I:android.support.v7.widget.RecyclerView$LayoutParams) android.support.v7.widget.RecyclerView.LayoutParams.leftMargin int \l0x0019: ARITH  (r5 I:int) = (r2 I:int) \- (r3 I:int) \l0x001b: INVOKE  (r11 I:int) = \l  (r0 I:android.support.v7.widget.RecyclerView$LayoutManager)\l  (r11 I:android.view.View)\l android.support.v7.widget.RecyclerView.LayoutManager.getDecoratedRight(android.view.View):int type: VIRTUAL \l0x001f: IGET  (r1 I:int) = (r1 I:android.support.v7.widget.RecyclerView$LayoutParams) android.support.v7.widget.RecyclerView.LayoutParams.rightMargin int \l0x0021: ARITH  (r6 I:int) = (r11 I:int) + (r1 I:int) \l0x0023: INVOKE  (r7 I:int) = (r0 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingLeft():int type: VIRTUAL \l0x0027: INVOKE  (r11 I:int) = (r0 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getWidth():int type: VIRTUAL \l0x002b: INVOKE  (r0 I:int) = (r0 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingRight():int type: VIRTUAL \l0x002f: ARITH  (r8 I:int) = (r11 I:int) \- (r0 I:int) \l0x0031: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0032: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: INVOKE  (r11 I:int) = \l  (r4 I:android.support.v7.widget.LinearSmoothScroller)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l android.support.v7.widget.LinearSmoothScroller.calculateDtToFit(int, int, int, int, int):int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: RETURN  (r11 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: RETURN  (r11 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.v7.widget.LinearSmoothScroller.calculateDxToMakeVisible((r10 'this' I:android.support.v7.widget.LinearSmoothScroller A[IMMUTABLE_TYPE, THIS]), (r11 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

