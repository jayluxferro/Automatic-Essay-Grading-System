digraph "CFG forandroid.support.v7.widget.AppCompatDrawableManager.getDrawable(Landroid\/content\/Context;I)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|SYNTHETIC\lSplitter:B:2:0x0002\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0002\l|0x0002: INVOKE  (r2 I:android.graphics.drawable.Drawable) = \l  (r1 I:android.support.v7.widget.AppCompatDrawableManager)\l  (r2 I:android.content.Context)\l  (r3 I:int)\l  (r0 I:boolean)\l android.support.v7.widget.AppCompatDrawableManager.getDrawable(android.content.Context, int, boolean):android.graphics.drawable.Drawable type: VIRTUAL A[Catch:\{ all \-\> 0x0008 \}, TRY_ENTER]\l0x0005: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|ExcHandler: all null\lSplitter:B:2:0x0002\l|0x0008: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized android.graphics.drawable.Drawable android.support.v7.widget.AppCompatDrawableManager.getDrawable((r1 'this' I:android.support.v7.widget.AppCompatDrawableManager A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.DrawableRes, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

