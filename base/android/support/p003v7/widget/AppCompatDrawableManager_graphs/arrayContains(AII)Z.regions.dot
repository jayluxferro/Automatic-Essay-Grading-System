digraph "CFG forandroid.support.v7.widget.AppCompatDrawableManager.arrayContains([II)Z" {
subgraph cluster_Region_858399656 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_774129790 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:5:0x000b\l|if (r2 \< r0) goto L_0x0005\l}"];
subgraph cluster_Region_934507437 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_963400272 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1908368361 {
label = "IF [B:3:0x0007] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r3 == r5) goto L_0x0009\l}"];
subgraph cluster_Region_2111087128 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_9083422 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:5:0x000b\l|r2++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|return false\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0009|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean android.support.v7.widget.AppCompatDrawableManager.arrayContains((r4v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

