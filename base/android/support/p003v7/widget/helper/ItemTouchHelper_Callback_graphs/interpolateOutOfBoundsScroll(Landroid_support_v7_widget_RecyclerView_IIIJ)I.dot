digraph "CFG forandroid.support.v7.widget.helper.ItemTouchHelper.Callback.interpolateOutOfBoundsScroll(Landroid\/support\/v7\/widget\/RecyclerView;IIIJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r5 = getMaxDragScroll(r5)\lint r8 = java.lang.Math.abs(r7)\lr1 = 1.0f\lfloat r6 = java.lang.Math.min(1.0f, (((float) r8) * 1.0f) \/ ((float) r6))\lint r5 = (int) (((float) (((int) java.lang.Math.signum((float) r7)) * r5)) * sDragViewScrollCapInterpolator.getInterpolation(r6))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|if ((r9 \> DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS ? 1 : (r9 == DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS ? 0 : \-1)) \<= 0) goto L_0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x002c|float r1 = ((float) r9) \/ 2000.0f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|PHI: r1 \l  PHI: (r1v1 float) = (r1v0 float), (r1v2 float) binds: [B:1:0x0029, B:2:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|int r5 = (int) (((float) r5) * sDragScrollInterpolator.getInterpolation(r1))\l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|if (r5 != 0) goto L_0x0043\l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|if (r7 \<= 0) goto L_0x0041\l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public int android.support.v7.widget.helper.ItemTouchHelper.Callback.interpolateOutOfBoundsScroll((r4v0 'this' android.support.v7.widget.helper.ItemTouchHelper$Callback A[IMMUTABLE_TYPE, THIS]), (r5v0 android.support.v7.widget.RecyclerView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], , , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
}

