digraph "CFG forandroid.support.v7.widget.SearchView.SearchAutoComplete.getSearchViewTextMinWidthDp()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.content.res.Resources) = \l  (r4 I:android.support.v7.widget.SearchView$SearchAutoComplete)\l android.support.v7.widget.SearchView.SearchAutoComplete.getResources():android.content.res.Resources type: VIRTUAL \l0x0004: INVOKE  (r0 I:android.content.res.Configuration) = (r0 I:android.content.res.Resources) android.content.res.Resources.getConfiguration():android.content.res.Configuration type: VIRTUAL \l0x0008: IGET  (r1 I:int) = (r0 I:android.content.res.Configuration) android.content.res.Configuration.screenWidthDp int \l0x000a: IGET  (r2 I:int) = (r0 I:android.content.res.Configuration) android.content.res.Configuration.screenHeightDp int \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (960(0x3c0, float:1.345E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (720(0x2d0, float:1.009E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:int) = (r0 I:android.content.res.Configuration) android.content.res.Configuration.orientation int \l0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (600(0x258, float:8.41E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (640(0x280, float:8.97E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r1 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:15:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (480(0x1e0, float:6.73E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r2 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:15:0x0029 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (160(0xa0, float:2.24E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: RETURN  (r0 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|0x002e: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v7.widget.SearchView.SearchAutoComplete.getSearchViewTextMinWidthDp((r4 'this' I:android.support.v7.widget.SearchView$SearchAutoComplete A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_17[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_18;
}

