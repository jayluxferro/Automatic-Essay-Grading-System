digraph "CFG forandroid.support.v7.widget.SearchView.SearchAutoComplete.showSoftInputIfNecessary()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r2 I:android.support.v7.widget.SearchView$SearchAutoComplete)\l android.support.v7.widget.SearchView.SearchAutoComplete.mHasPendingShowSoftInputRequest boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:android.content.Context) = \l  (r2 I:android.support.v7.widget.SearchView$SearchAutoComplete)\l android.support.v7.widget.SearchView.SearchAutoComplete.getContext():android.content.Context type: VIRTUAL \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"input_method\" \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) android.content.Context.getSystemService(java.lang.String):java.lang.Object type: VIRTUAL \l0x000e: CHECK_CAST  (r0 I:android.view.inputmethod.InputMethodManager) = (android.view.inputmethod.InputMethodManager) (r0 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INVOKE  \l  (r0 I:android.view.inputmethod.InputMethodManager)\l  (r2 I:android.view.View)\l  (r1 I:int)\l android.view.inputmethod.InputMethodManager.showSoftInput(android.view.View, int):boolean type: VIRTUAL \l0x0014: IPUT  \l  (r1 I:boolean)\l  (r2 I:android.support.v7.widget.SearchView$SearchAutoComplete)\l android.support.v7.widget.SearchView.SearchAutoComplete.mHasPendingShowSoftInputRequest boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.SearchView.SearchAutoComplete.showSoftInputIfNecessary((r2 'this' I:android.support.v7.widget.SearchView$SearchAutoComplete A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

