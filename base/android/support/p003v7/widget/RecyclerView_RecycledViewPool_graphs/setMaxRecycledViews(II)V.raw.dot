digraph "CFG forandroid.support.v7.widget.RecyclerView.RecycledViewPool.setMaxRecycledViews(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:android.support.v7.widget.RecyclerView$RecycledViewPool$ScrapData) = \l  (r1 I:android.support.v7.widget.RecyclerView$RecycledViewPool)\l  (r2 I:int)\l android.support.v7.widget.RecyclerView.RecycledViewPool.getScrapDataForType(int):android.support.v7.widget.RecyclerView$RecycledViewPool$ScrapData type: DIRECT \l0x0004: IPUT  \l  (r3 I:int)\l  (r2 I:android.support.v7.widget.RecyclerView$RecycledViewPool$ScrapData)\l android.support.v7.widget.RecyclerView.RecycledViewPool.ScrapData.mMaxScrap int \l0x0006: IGET  (r2 I:java.util.ArrayList\<android.support.v7.widget.RecyclerView$ViewHolder\>) = \l  (r2 I:android.support.v7.widget.RecyclerView$RecycledViewPool$ScrapData)\l android.support.v7.widget.RecyclerView.RecycledViewPool.ScrapData.mScrapHeap java.util.ArrayList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r2 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r2 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0012: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0014: INVOKE  (r2 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.remove(int):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.RecyclerView.RecycledViewPool.setMaxRecycledViews((r1 'this' I:android.support.v7.widget.RecyclerView$RecycledViewPool A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

