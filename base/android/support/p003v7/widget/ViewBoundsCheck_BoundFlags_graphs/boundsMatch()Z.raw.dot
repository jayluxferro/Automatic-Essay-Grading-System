digraph "CFG forandroid.support.v7.widget.ViewBoundsCheck.BoundFlags.boundsMatch()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x0002: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (7 ?[int, float, short, byte, char]) \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x0009: IGET  (r2 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mChildStart int \l0x000b: IGET  (r3 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mRvStart int \l0x000d: INVOKE  (r2 I:int) = \l  (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r2 I:int)\l  (r3 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.compare(int, int):int type: VIRTUAL \l0x0011: ARITH  (r2 I:int) = (r2 I:int) \<\< (r1 I:int) \l0x0012: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r1 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x0018: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (112(0x70, float:1.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x001e: IGET  (r2 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mChildStart int \l0x0020: IGET  (r3 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mRvEnd int \l0x0022: INVOKE  (r2 I:int) = \l  (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r2 I:int)\l  (r3 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.compare(int, int):int type: VIRTUAL \l0x0026: ARITH  (r2 I:int) = (r2 I:int) \<\< (4 int) \l0x0028: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: RETURN  (r1 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x002e: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (1792(0x700, float:2.511E\-42) ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x0034: IGET  (r2 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mChildEnd int \l0x0036: IGET  (r3 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mRvStart int \l0x0038: INVOKE  (r2 I:int) = \l  (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r2 I:int)\l  (r3 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.compare(int, int):int type: VIRTUAL \l0x003c: ARITH  (r2 I:int) = (r2 I:int) \<\< (8 int) \l0x003e: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x0044: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (28672(0x7000, float:4.0178E\-41) ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0058 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: IGET  (r0 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mBoundFlags int \l0x004a: IGET  (r2 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mChildEnd int \l0x004c: IGET  (r3 I:int) = (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.mRvEnd int \l0x004e: INVOKE  (r2 I:int) = \l  (r4 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r2 I:int)\l  (r3 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.compare(int, int):int type: VIRTUAL \l0x0052: ARITH  (r2 I:int) = (r2 I:int) \<\< (12 int) \l0x0054: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|0x0055: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0058 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0057|0x0057: RETURN  (r1 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|0x0058: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|0x0059: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean android.support.v7.widget.ViewBoundsCheck.BoundFlags.boundsMatch((r4 'this' I:android.support.v7.widget.ViewBoundsCheck$BoundFlags A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
}

