digraph "CFG forandroid.support.v7.widget.LinearLayoutManager.computeScrollVectorForPosition(I)Landroid\/graphics\/PointF;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (getChildCount() != 0) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|r0 = false\lr2 = 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r4 \>= getPosition(getChildAt(0))) goto L_0x0015\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r0 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v4 boolean) binds: [B:4:0x0012, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if (r0 == r3.mShouldReverseLayout) goto L_0x001a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|r2 = \-1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:7:0x0017, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|if (r3.mOrientation != 0) goto L_0x0026\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f}"];
Node_12 [shape=record,label="{12\:\ 0x0025|RETURN\l|return new android.graphics.PointF((float) r2, 0.0f)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026}"];
Node_14 [shape=record,label="{14\:\ 0x002c|RETURN\l|return new android.graphics.PointF(0.0f, (float) r2)\l}"];
MethodNode[shape=record,label="{public android.graphics.PointF android.support.v7.widget.LinearLayoutManager.computeScrollVectorForPosition((r3v0 'this' android.support.v7.widget.LinearLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

