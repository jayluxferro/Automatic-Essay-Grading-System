digraph "CFG forandroid.support.v7.widget.LinearLayoutManager.collectPrefetchPositionsForLayoutState(Landroid\/support\/v7\/widget\/RecyclerView$State;Landroid\/support\/v7\/widget\/LinearLayoutManager$LayoutState;Landroid\/support\/v7\/widget\/RecyclerView$LayoutManager$LayoutPrefetchRegistry;)V" {
subgraph cluster_Region_248866285 {
label = "R(2:0|(1:(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r3.mCurrentPosition\l}"];
subgraph cluster_Region_2117130912 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1004169563 {
label = "IF [B:1:0x0002, B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r0 \>= 0) goto L_0x0004\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (r0 \< r2.getItemCount()) goto L_0x000a\l}"];
subgraph cluster_Region_1157854726 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|r4.addPosition(r0, java.lang.Math.max(0, r3.mScrollingOffset))\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.LinearLayoutManager.collectPrefetchPositionsForLayoutState((r1v0 'this' android.support.v7.widget.LinearLayoutManager A[IMMUTABLE_TYPE, THIS]), (r2v0 android.support.v7.widget.RecyclerView$State A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.support.v7.widget.LinearLayoutManager$LayoutState A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.support.v7.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_2 -> Node_3;
}

