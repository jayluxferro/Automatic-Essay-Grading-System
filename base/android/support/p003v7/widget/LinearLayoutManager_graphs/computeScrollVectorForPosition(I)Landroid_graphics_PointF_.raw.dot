digraph "CFG forandroid.support.v7.widget.LinearLayoutManager.computeScrollVectorForPosition(I)Landroid\/graphics\/PointF;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:android.support.v7.widget.LinearLayoutManager) android.support.v7.widget.LinearLayoutManager.getChildCount():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r4 I:android.graphics.PointF) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r1 I:android.view.View) = \l  (r3 I:android.support.v7.widget.LinearLayoutManager)\l  (r0 I:int)\l android.support.v7.widget.LinearLayoutManager.getChildAt(int):android.view.View type: VIRTUAL \l0x000d: INVOKE  (r1 I:int) = \l  (r3 I:android.support.v7.widget.LinearLayoutManager)\l  (r1 I:android.view.View)\l android.support.v7.widget.LinearLayoutManager.getPosition(android.view.View):int type: VIRTUAL \l0x0011: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r4 I:boolean) = (r3 I:android.support.v7.widget.LinearLayoutManager) android.support.v7.widget.LinearLayoutManager.mShouldReverseLayout boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IGET  (r4 I:int) = (r3 I:android.support.v7.widget.LinearLayoutManager) android.support.v7.widget.LinearLayoutManager.mOrientation int \l0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: NEW_INSTANCE  (r4 I:android.graphics.PointF) =  android.graphics.PointF \l0x0021: CAST  (r1 I:float) = (float) (r2 I:int) \l0x0022: INVOKE  (r4 I:android.graphics.PointF), (r1 I:float), (r0 I:float) android.graphics.PointF.\<init\>(float, float):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: RETURN  (r4 I:android.graphics.PointF) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:android.graphics.PointF) =  android.graphics.PointF \l0x0028: CAST  (r1 I:float) = (float) (r2 I:int) \l0x0029: INVOKE  (r4 I:android.graphics.PointF), (r0 I:float), (r1 I:float) android.graphics.PointF.\<init\>(float, float):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: RETURN  (r4 I:android.graphics.PointF) \l}"];
MethodNode[shape=record,label="{public android.graphics.PointF android.support.v7.widget.LinearLayoutManager.computeScrollVectorForPosition((r3 'this' I:android.support.v7.widget.LinearLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

