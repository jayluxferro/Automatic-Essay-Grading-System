digraph "CFG forandroid.support.v7.widget.AppCompatTextViewAutoSizeHelper.setAutoSizeTextTypeWithDefaults(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (supportsAutoSizeText() == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|switch(r4) \{\l    case 0: goto L_0x0046;\l    case 1: goto L_0x0020;\l    default: goto L_0x0009;\l\}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unknown auto\-size text type: \")\lr1.append(r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|android.util.DisplayMetrics r4 = r3.mContext.getResources().getDisplayMetrics()\lvalidateAndSetAutoSizeTextTypeUniformConfiguration(android.util.TypedValue.applyDimension(2, 12.0f, r4), android.util.TypedValue.applyDimension(2, 112.0f, r4), 1.0f)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0040|if (setupAutoSizeText() == false) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|autoSizeText()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|clearAutoSizeConfiguration()\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.AppCompatTextViewAutoSizeHelper.setAutoSizeTextTypeWithDefaults((r3v0 'this' android.support.v7.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_12;
Node_8 -> Node_9;
}

