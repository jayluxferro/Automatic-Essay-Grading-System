digraph "CFG forandroid.support.v7.widget.AppCompatTextViewAutoSizeHelper.cleanupAutoSizePresetSizes([I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r7 I:int[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r7 I:int[]) java.util.Arrays.sort(int[]):void type: STATIC \l0x0007: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0009: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: AGET  (r4 I:?[int, float]) = (r7 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r5 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0018: INVOKE  (r5 I:int) = (r1 I:java.util.List), (r5 I:java.lang.Object) java.util.Collections.binarySearch(java.util.List, java.lang.Object):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0022: INVOKE  (r1 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: INVOKE  (r3 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: RETURN  (r7 I:int[]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: INVOKE  (r7 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0033: NEW_ARRAY  (r0 I:int[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: int[] \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IF  (r2 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:17:0x0046 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0041: APUT  \l  (r0 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0043: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: RETURN  (r0 I:int[]) \l}"];
MethodNode[shape=record,label="{private int[] android.support.v7.widget.AppCompatTextViewAutoSizeHelper.cleanupAutoSizePresetSizes((r6 'this' I:android.support.v7.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r7 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_4;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_15;
}

