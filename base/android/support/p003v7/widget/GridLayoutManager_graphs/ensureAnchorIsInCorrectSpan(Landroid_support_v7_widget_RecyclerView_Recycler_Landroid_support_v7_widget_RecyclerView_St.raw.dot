digraph "CFG forandroid.support.v7.widget.GridLayoutManager.ensureAnchorIsInCorrectSpan(Landroid\/support\/v7\/widget\/RecyclerView$Recycler;Landroid\/support\/v7\/widget\/RecyclerView$State;Landroid\/support\/v7\/widget\/LinearLayoutManager$AnchorInfo;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r1 I:int) = \l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l0x0008: INVOKE  (r1 I:int) = \l  (r4 I:android.support.v7.widget.GridLayoutManager)\l  (r5 I:android.support.v7.widget.RecyclerView$Recycler)\l  (r6 I:android.support.v7.widget.RecyclerView$State)\l  (r1 I:int)\l android.support.v7.widget.GridLayoutManager.getSpanIndex(android.support.v7.widget.RecyclerView$Recycler, android.support.v7.widget.RecyclerView$State, int):int type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0036 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r8 I:int) = \l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0036 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IGET  (r8 I:int) = \l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l0x0016: ARITH  (r8 I:int) = (r8 I:int) \- (r0 I:int) \l0x0017: IPUT  \l  (r8 I:int)\l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l0x0019: IGET  (r8 I:int) = \l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l0x001b: INVOKE  (r1 I:int) = \l  (r4 I:android.support.v7.widget.GridLayoutManager)\l  (r5 I:android.support.v7.widget.RecyclerView$Recycler)\l  (r6 I:android.support.v7.widget.RecyclerView$State)\l  (r8 I:int)\l android.support.v7.widget.GridLayoutManager.getSpanIndex(android.support.v7.widget.RecyclerView$Recycler, android.support.v7.widget.RecyclerView$State, int):int type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INVOKE  (r8 I:int) = (r6 I:android.support.v7.widget.RecyclerView$State) android.support.v7.widget.RecyclerView.State.getItemCount():int type: VIRTUAL \l0x0024: ARITH  (r8 I:int) = (r8 I:int) \- (r0 I:int) \l0x0025: IGET  (r0 I:int) = \l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: ARITH  (r2 I:int) = (r0 I:int) + (1 int) \l0x002b: INVOKE  (r3 I:int) = \l  (r4 I:android.support.v7.widget.GridLayoutManager)\l  (r5 I:android.support.v7.widget.RecyclerView$Recycler)\l  (r6 I:android.support.v7.widget.RecyclerView$State)\l  (r2 I:int)\l android.support.v7.widget.GridLayoutManager.getSpanIndex(android.support.v7.widget.RecyclerView$Recycler, android.support.v7.widget.RecyclerView$State, int):int type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r3 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: IPUT  \l  (r0 I:int)\l  (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo)\l android.support.v7.widget.LinearLayoutManager.AnchorInfo.mPosition int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.GridLayoutManager.ensureAnchorIsInCorrectSpan((r4 'this' I:android.support.v7.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r5 I:android.support.v7.widget.RecyclerView$Recycler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.support.v7.widget.RecyclerView$State A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.support.v7.widget.LinearLayoutManager$AnchorInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
}

