digraph "CFG forandroid.support.v7.widget.GridLayoutManager.setSpanCount(I)V" {
subgraph cluster_Region_1332140436 {
label = "R(1:(1:(2:3|(2:(2:5|6)|(2:7|8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1620695294 {
label = "R(1:(2:3|(2:(2:5|6)|(2:7|8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2073411782 {
label = "IF [B:1:0x0002] THEN: R(2:3|(2:(2:5|6)|(2:7|8))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 != r3.mSpanCount) goto L_0x0005\l}"];
subgraph cluster_Region_1960207150 {
label = "R(2:3|(2:(2:5|6)|(2:7|8)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|r3.mPendingSpanCountChange = true\l}"];
subgraph cluster_Region_226868825 {
label = "R(2:(2:5|6)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_603314495 {
label = "IF [B:4:0x0008] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r4 \>= 1) goto L_0x000a\l}"];
subgraph cluster_Region_1983098487 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000a|r3.mSpanCount = r4\lr3.mSpanSizeLookup.invalidateSpanIndexCache()\lrequestLayout()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_825977996 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x002b|throw new java.lang.IllegalArgumentException(\"Span count should be at least 1. Provided \" + r4)\l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.GridLayoutManager.setSpanCount((r3v0 'this' android.support.v7.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_0 -> Node_1;
}

