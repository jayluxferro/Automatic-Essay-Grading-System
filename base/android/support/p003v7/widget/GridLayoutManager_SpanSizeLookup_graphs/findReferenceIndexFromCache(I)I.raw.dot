digraph "CFG forandroid.support.v7.widget.GridLayoutManager.SpanSizeLookup.findReferenceIndexFromCache(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.util.SparseIntArray) = \l  (r4 I:android.support.v7.widget.GridLayoutManager$SpanSizeLookup)\l android.support.v7.widget.GridLayoutManager.SpanSizeLookup.mSpanIndexCache android.util.SparseIntArray \l0x0002: INVOKE  (r0 I:int) = (r0 I:android.util.SparseIntArray) android.util.SparseIntArray.size():int type: VIRTUAL \l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: ARITH  (r2 I:int) = (r1 I:int) + (r0 I:int) \l0x000d: ARITH  (r2 I:int) = (r2 I:int) \>\>\> (1 int) \l0x000f: IGET  (r3 I:android.util.SparseIntArray) = \l  (r4 I:android.support.v7.widget.GridLayoutManager$SpanSizeLookup)\l android.support.v7.widget.GridLayoutManager.SpanSizeLookup.mSpanIndexCache android.util.SparseIntArray \l0x0011: INVOKE  (r3 I:int) = (r3 I:android.util.SparseIntArray), (r2 I:int) android.util.SparseIntArray.keyAt(int):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0019: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x001d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0032 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r5 I:android.util.SparseIntArray) = \l  (r4 I:android.support.v7.widget.GridLayoutManager$SpanSizeLookup)\l android.support.v7.widget.GridLayoutManager.SpanSizeLookup.mSpanIndexCache android.util.SparseIntArray \l0x0025: INVOKE  (r5 I:int) = (r5 I:android.util.SparseIntArray) android.util.SparseIntArray.size():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r1 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:12:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IGET  (r5 I:android.util.SparseIntArray) = \l  (r4 I:android.support.v7.widget.GridLayoutManager$SpanSizeLookup)\l android.support.v7.widget.GridLayoutManager.SpanSizeLookup.mSpanIndexCache android.util.SparseIntArray \l0x002d: INVOKE  (r5 I:int) = (r5 I:android.util.SparseIntArray), (r1 I:int) android.util.SparseIntArray.keyAt(int):int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: RETURN  (r5 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{int android.support.v7.widget.GridLayoutManager.SpanSizeLookup.findReferenceIndexFromCache((r4 'this' I:android.support.v7.widget.GridLayoutManager$SpanSizeLookup A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

