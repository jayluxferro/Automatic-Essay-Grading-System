digraph "CFG forandroid.support.v7.widget.DefaultItemAnimator.animateMoveImpl(Landroid\/support\/v7\/widget\/RecyclerView$ViewHolder;IIII)V" {
subgraph cluster_Region_1077880658 {
label = "R(4:0|(1:2)|(1:4)|5)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.view.View final android.view.View r4 = r8.itemView\lint final int r3 = r11 \- r9\lint final int r5 = r12 \- r10\l}"];
subgraph cluster_IfRegion_804779583 {
label = "IF [B:1:0x0007] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3 != 0) goto L_0x0009\l}"];
subgraph cluster_Region_1386174079 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|r4.animate().translationX(0.0f)\l}"];
}
}
subgraph cluster_IfRegion_382419236 {
label = "IF [B:3:0x0010] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r5 != 0) goto L_0x0012\l}"];
subgraph cluster_Region_1889371787 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|r4.animate().translationY(0.0f)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0019|android.view.ViewPropertyAnimator final android.view.ViewPropertyAnimator r6 = r4.animate()\lr7.mMoveAnimations.add(r8)\lfinal android.support.p003v7.widget.RecyclerView.ViewHolder r2 = r8\lr6.setDuration(getMoveDuration()).setListener(new android.support.p003v7.widget.DefaultItemAnimator.C04826()).start()\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0039}"];
MethodNode[shape=record,label="{void android.support.v7.widget.DefaultItemAnimator.animateMoveImpl((r7v0 'this' android.support.v7.widget.DefaultItemAnimator A[IMMUTABLE_TYPE, THIS]), (r8v0 android.support.v7.widget.RecyclerView$ViewHolder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
}

