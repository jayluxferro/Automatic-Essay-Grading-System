digraph "CFG forandroid.support.v7.widget.StaggeredGridLayoutManager.findLastVisibleItemPositions([I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 != null) goto L_0x0007\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|int[] r4 = new int[r3.mSpanCount]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r4.length \< r3.mSpanCount) goto L_0x001f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r4 \l  PHI: (r4v1 int[]) = (r4v0 int[]), (r4v5 int[]) binds: [B:3:0x000a, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|r0 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:4:0x000c, B:7:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000d\-\>B:7:0x0011\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r0 \>= r3.mSpanCount) goto L_0x001e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|LOOP_END\lLOOP:0: B:5:0x000d\-\>B:7:0x0011\l|r4[r0] = r3.mSpans[r0].findLastVisibleItemPosition()\lint r0 = r0 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|RETURN\l|return r4\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Provided int[]'s size must be more than or equal to span count. Expected:\")\lr1.append(r3.mSpanCount)\lr1.append(\", array size:\")\lr1.append(r4.length)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int[] android.support.v7.widget.StaggeredGridLayoutManager.findLastVisibleItemPositions((r3v0 'this' android.support.v7.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_5;
Node_9 -> Node_10;
Node_11 -> Node_8;
}

