digraph "CFG forandroid.support.v7.widget.GapWorker.flushTasksWithDeadline(J)V" {
subgraph cluster_Region_1792329146 {
label = "R(2:0|(2:3|(1:5)(1:8)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_1748984845 {
label = "LOOP:0: (2:3|(1:5)(1:8))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r0 \< r3.mTasks.size()) goto L_0x0009\l}"];
subgraph cluster_Region_1275276402 {
label = "R(2:3|(1:5)(1:8))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|android.support.v7.widget.GapWorker$Task android.support.p003v7.widget.GapWorker.Task r1 = r3.mTasks.get(r0)\l}"];
subgraph cluster_IfRegion_3594589 {
label = "IF [B:4:0x0013] THEN: R(1:5) ELSE: R(1:8)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r1.view != null) goto L_0x0016\l}"];
subgraph cluster_Region_1728911265 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x0016\l|flushTaskWithDeadline(r1, r4)\lr1.clear()\lr0++\l}"];
}
subgraph cluster_Region_1816620217 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x0016\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001f|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.GapWorker.flushTasksWithDeadline((r3v0 'this' android.support.v7.widget.GapWorker A[IMMUTABLE_TYPE, THIS]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_1;
Node_1 -> Node_2;
Node_6 -> Node_8;
Node_7 -> Node_9;
}

