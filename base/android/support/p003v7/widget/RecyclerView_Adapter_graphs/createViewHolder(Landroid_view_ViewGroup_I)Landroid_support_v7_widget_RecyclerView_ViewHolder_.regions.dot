digraph "CFG forandroid.support.v7.widget.RecyclerView.Adapter.createViewHolder(Landroid\/view\/ViewGroup;I)Landroid\/support\/v7\/widget\/RecyclerView$ViewHolder;" {
subgraph cluster_Region_2127994606 {
label = "R(1:(2:2|(2:(1:5)|(2:10|12))))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1200980343 {
label = "Try: R(2:2|(2:(1:5)|(2:10|12))) finally: R(3:6|7|8)";
node [shape=record,color=blue];
subgraph cluster_Region_880400504 {
label = "R(2:2|(2:(1:5)|(2:10|12)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0019 \}\lSplitter:B:1:0x0002\l|android.support.p000v4.p002os.TraceCompat.beginSection(android.support.p003v7.widget.RecyclerView.TRACE_CREATE_VIEW_TAG)     \/\/ Catch:\{ all \-\> 0x0019 \}\landroid.support.v7.widget.RecyclerView$ViewHolder VH r0 = onCreateViewHolder(r4, r5)     \/\/ Catch:\{ all \-\> 0x0019 \}\l}"];
subgraph cluster_Region_916907461 {
label = "R(2:(1:5)|(2:10|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1837866695 {
label = "IF [B:3:0x000f] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|Catch:\{ all \-\> 0x0019 \}\l|if (r0.itemView.getParent() != null) goto L_0x0011     \/\/ Catch:\{ all \-\> 0x0019 \}\l}"];
subgraph cluster_Region_1677347019 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|Catch:\{ all \-\> 0x0019 \}\l|throw new java.lang.IllegalStateException(\"ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)\")     \/\/ Catch:\{ all \-\> 0x0019 \}\l}"];
}
}
subgraph cluster_Region_1785673028 {
label = "R(2:10|12)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ ?|Catch:\{ all \-\> 0x0019 \}\lSplitter:B:9:0x001e\l|r0.mItemViewType = r5     \/\/ Catch:\{ all \-\> 0x0019 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|RETURN\l|return r0\l}"];
}
}
}
subgraph cluster_Region_697404340 {
label = "R(3:6|7|8) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler:  FINALLY\lSplitter:B:1:0x0002\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|FINALLY_INSNS\l|android.support.p000v4.p002os.TraceCompat.endSection()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|throw r1\l}"];
}
}
}
subgraph cluster_Region_697404340 {
label = "R(3:6|7|8) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler:  FINALLY\lSplitter:B:1:0x0002\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|FINALLY_INSNS\l|android.support.p000v4.p002os.TraceCompat.endSection()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|throw r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0011|Catch:\{ all \-\> 0x0019 \}\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e|SYNTHETIC\lSplitter:B:9:0x001e\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0020|DONT_GENERATE\l|android.support.p000v4.p002os.TraceCompat.endSection()\l}"];
MethodNode[shape=record,label="{public final VH android.support.v7.widget.RecyclerView.Adapter.createViewHolder((r3v0 'this' android.support.v7.widget.RecyclerView$Adapter A[IMMUTABLE_TYPE, THIS]), (r4v0 'parent' android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'viewType' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/view\/ViewGroup;, I)TVH;]\}]\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_10 -> Node_11;
Node_10 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_4 -> Node_5;
Node_9 -> Node_10;
Node_9 -> Node_6;
Node_11 -> Node_12;
}

