digraph "CFG forandroid.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.addPosition(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0045 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x003d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mCount int \l0x0006: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0008: IGET  (r1 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x000d: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000f: IPUT  \l  (r1 I:int[])\l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x0011: IGET  (r1 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0014: INVOKE  (r1 I:int[]), (r2 I:int) java.util.Arrays.fill(int[], int):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r1 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x001a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r1 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x001f: ARITH  (r2 I:int) = (r0 I:int) * (2 int) \l0x0021: NEW_ARRAY  (r2 I:int[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0023: IPUT  \l  (r2 I:int[])\l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x0025: IGET  (r2 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x0027: ARRAY_LENGTH  (r3 I:int) = (r1 I:?[]) \l0x0028: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: INVOKE  \l  (r1 I:java.lang.Object)\l  (r4 I:int)\l  (r2 I:java.lang.Object)\l  (r4 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IGET  (r1 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x002e: APUT  \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x0030: IGET  (r6 I:int[]) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] \l0x0032: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0034: APUT  \l  (r6 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x0036: IGET  (r6 I:int) = \l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mCount int \l0x0038: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x003a: IPUT  \l  (r6 I:int)\l  (r5 I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl)\l android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.mCount int \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003f: CONST_STR  (r7 I:java.lang.String) =  \"Pixel distance must be non\-negative\" \l0x0041: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0047: CONST_STR  (r7 I:java.lang.String) =  \"Layout positions must be non\-negative\" \l0x0049: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.addPosition((r5 'this' I:android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

