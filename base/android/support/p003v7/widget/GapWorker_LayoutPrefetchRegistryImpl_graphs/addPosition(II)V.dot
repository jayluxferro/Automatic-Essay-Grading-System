digraph "CFG forandroid.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.addPosition(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r6 \< 0) goto L_0x0045\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7 \< 0) goto L_0x003d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r0 = r5.mCount * 2\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r5.mPrefetchArray != null) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|r5.mPrefetchArray = new int[4]\ljava.util.Arrays.fill(r5.mPrefetchArray, \-1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r0 \< r5.mPrefetchArray.length) goto L_0x002c\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|int[] r1 = r5.mPrefetchArray\lr5.mPrefetchArray = new int[(r0 * 2)]\ljava.lang.System.arraycopy(r1, 0, r5.mPrefetchArray, 0, r1.length)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|r5.mPrefetchArray[r0] = r6\lr5.mPrefetchArray[r0 + 1] = r7\lr5.mCount = r5.mCount + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x003d}"];
Node_11 [shape=record,label="{11\:\ 0x0044|throw new java.lang.IllegalArgumentException(\"Pixel distance must be non\-negative\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0045}"];
Node_13 [shape=record,label="{13\:\ 0x004c|throw new java.lang.IllegalArgumentException(\"Layout positions must be non\-negative\")\l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.GapWorker.LayoutPrefetchRegistryImpl.addPosition((r5v0 'this' android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

