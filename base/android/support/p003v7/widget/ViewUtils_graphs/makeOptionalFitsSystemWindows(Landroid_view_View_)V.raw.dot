digraph "CFG forandroid.support.v7.widget.ViewUtils.makeOptionalFitsSystemWindows(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: INVOKE  (r0 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}, TRY_ENTER]\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"makeOptionalFitsSystemWindows\" A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x000d: NEW_ARRAY  (r3 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x000f: INVOKE  (r0 I:java.lang.reflect.Method) = \l  (r0 I:java.lang.Class)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x0013: INVOKE  (r1 I:boolean) = (r0 I:java.lang.reflect.Method) java.lang.reflect.Method.isAccessible():boolean type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x001a: INVOKE  (r0 I:java.lang.reflect.Method), (r1 I:boolean) java.lang.reflect.Method.setAccessible(boolean):void type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}]\l0x001f: INVOKE  \l  (r0 I:java.lang.reflect.Method)\l  (r4 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0035, InvocationTargetException \-\> 0x002c, IllegalAccessException \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|ExcHandler: IllegalAccessException null\lSplitter:B:2:0x0006\l|0x0023: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: CONST_STR  (r0 I:java.lang.String) =  \"ViewUtils\" \l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"Could not invoke makeOptionalFitsSystemWindows\" \l0x0028: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l android.util.Log.d(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|ExcHandler: InvocationTargetException null\lSplitter:B:2:0x0006\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: CONST_STR  (r0 I:java.lang.String) =  \"ViewUtils\" \l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"Could not invoke makeOptionalFitsSystemWindows\" \l0x0031: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l android.util.Log.d(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: CONST_STR  (r4 I:java.lang.String) =  \"ViewUtils\" \l0x0037: CONST_STR  (r0 I:java.lang.String) =  \"Could not find method makeOptionalFitsSystemWindows. Oh well...\" \l0x0039: INVOKE  (r4 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: NoSuchMethodException null\lSplitter:B:2:0x0006\l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: RETURN   \l}"];
MethodNode[shape=record,label="{public static void android.support.v7.widget.ViewUtils.makeOptionalFitsSystemWindows((r4 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_2 -> Node_10;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_12;
}

