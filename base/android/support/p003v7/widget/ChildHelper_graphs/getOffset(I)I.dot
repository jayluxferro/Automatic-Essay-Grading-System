digraph "CFG forandroid.support.v7.widget.ChildHelper.getOffset(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 \>= 0) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return \-1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|int r1 = r4.mCallback.getChildCount()\lr2 = r5\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v4 int) binds: [B:3:0x0004, B:11:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000b\-\>B:11:0x0025\l|if (r2 \>= r1) goto L_0x0027\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|int r3 = r5 \- (r2 \- r4.mBucket.countOnesBefore(r2))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|if (r3 != 0) goto L_0x0025\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|LOOP_START\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:13:0x0019, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0019\-\>B:9:0x0021\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r4.mBucket.get(r2) == false) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_END\lLOOP:1: B:7:0x0019\-\>B:9:0x0021\l|int r2 = r2 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|RETURN\l|return r2\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|LOOP_END\lLOOP:0: B:4:0x000b\-\>B:11:0x0025\l|int r2 = r2 + r3\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|RETURN\l|return \-1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private int android.support.v7.widget.ChildHelper.getOffset((r4v0 'this' android.support.v7.widget.ChildHelper A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_11;
Node_6 -> Node_13[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_7;
Node_11 -> Node_4;
Node_13 -> Node_7;
Node_14 -> Node_12;
Node_15 -> Node_10;
}

