digraph "CFG forandroid.support.v7.widget.LinearLayoutManager.LayoutState.nextViewFromScrapList()Landroid\/view\/View;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5.mScrapList.size()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:8:0x002c\l|if (r1 \>= r0) goto L_0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|android.view.View r2 = r5.mScrapList.get(r1).itemView\landroid.support.v7.widget.RecyclerView$LayoutParams r3 = (android.support.p003v7.widget.RecyclerView.LayoutParams) r2.getLayoutParams()\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|if (r3.isItemRemoved() == false) goto L_0x0020\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020}"];
Node_5 [shape=record,label="{5\:\ 0x0026|if (r5.mCurrentPosition != r3.getViewLayoutPosition()) goto L_0x002c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|assignPositionFromScrapList(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:8:0x002c\l|int r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private android.view.View android.support.v7.widget.LinearLayoutManager.LayoutState.nextViewFromScrapList((r5v0 'this' android.support.v7.widget.LinearLayoutManager$LayoutState A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_10[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_8 -> Node_1;
Node_10 -> Node_6;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

