digraph "CFG forandroid.support.v7.widget.LinearLayoutManager.LayoutState.assignPositionFromScrapList(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:android.view.View) = \l  (r0 I:android.support.v7.widget.LinearLayoutManager$LayoutState)\l  (r1 I:android.view.View)\l android.support.v7.widget.LinearLayoutManager.LayoutState.nextViewInLimitedList(android.view.View):android.view.View type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0007: IPUT  \l  (r1 I:int)\l  (r0 I:android.support.v7.widget.LinearLayoutManager$LayoutState)\l android.support.v7.widget.LinearLayoutManager.LayoutState.mCurrentPosition int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r1 I:android.view.ViewGroup$LayoutParams) = (r1 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x000e: CHECK_CAST  (r1 I:android.support.v7.widget.RecyclerView$LayoutParams) = (android.support.v7.widget.RecyclerView$LayoutParams) (r1 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:int) = (r1 I:android.support.v7.widget.RecyclerView$LayoutParams) android.support.v7.widget.RecyclerView.LayoutParams.getViewLayoutPosition():int type: VIRTUAL \l0x0014: IPUT  \l  (r1 I:int)\l  (r0 I:android.support.v7.widget.LinearLayoutManager$LayoutState)\l android.support.v7.widget.LinearLayoutManager.LayoutState.mCurrentPosition int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.LinearLayoutManager.LayoutState.assignPositionFromScrapList((r0 'this' I:android.support.v7.widget.LinearLayoutManager$LayoutState A[IMMUTABLE_TYPE, THIS]), (r1 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

