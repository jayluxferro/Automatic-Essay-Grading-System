digraph "CFG forandroid.support.v7.widget.RecyclerView.5.removeAllViews()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:android.support.v7.widget.RecyclerView$5) android.support.v7.widget.RecyclerView.5.getChildCount():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:android.view.View) = (r4 I:android.support.v7.widget.RecyclerView$5), (r1 I:int) android.support.v7.widget.RecyclerView.5.getChildAt(int):android.view.View type: VIRTUAL \l0x000b: IGET  (r3 I:android.support.v7.widget.RecyclerView) = (r4 I:android.support.v7.widget.RecyclerView$5) android.support.v7.widget.RecyclerView.5.this$0 android.support.v7.widget.RecyclerView \l0x000d: INVOKE  \l  (r3 I:android.support.v7.widget.RecyclerView)\l  (r2 I:android.view.View)\l android.support.v7.widget.RecyclerView.dispatchChildDetached(android.view.View):void type: VIRTUAL \l0x0010: INVOKE  (r2 I:android.view.View) android.view.View.clearAnimation():void type: VIRTUAL \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IGET  (r0 I:android.support.v7.widget.RecyclerView) = (r4 I:android.support.v7.widget.RecyclerView$5) android.support.v7.widget.RecyclerView.5.this$0 android.support.v7.widget.RecyclerView \l0x0018: INVOKE  (r0 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.removeAllViews():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.RecyclerView.5.removeAllViews((r4 'this' I:android.support.v7.widget.RecyclerView$5 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

