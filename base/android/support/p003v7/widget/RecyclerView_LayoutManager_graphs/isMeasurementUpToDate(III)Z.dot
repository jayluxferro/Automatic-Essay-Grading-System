digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.isMeasurementUpToDate(III)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = android.view.View.MeasureSpec.getMode(r4)\lint r4 = android.view.View.MeasureSpec.getSize(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r5 \<= 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r3 == r5) goto L_0x000e\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r0 == Integer.MIN_VALUE) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r0 == 0) goto L_0x001e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x0017|if (r0 == 1073741824) goto L_0x001a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|if (r4 != r3) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|return true\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|if (r4 \< r3) goto L_?\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean android.support.v7.widget.RecyclerView.LayoutManager.isMeasurementUpToDate((r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
}

