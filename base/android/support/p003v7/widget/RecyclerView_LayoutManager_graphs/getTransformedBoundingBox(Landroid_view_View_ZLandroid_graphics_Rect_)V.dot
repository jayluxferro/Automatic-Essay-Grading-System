digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.getTransformedBoundingBox(Landroid\/view\/View;ZLandroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 == false) goto L_0x0022\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|android.graphics.Rect r7 = ((android.support.p003v7.widget.RecyclerView.LayoutParams) r6.getLayoutParams()).mDecorInsets\lr8.set(\-r7.left, \-r7.top, r6.getWidth() + r7.right, r6.getHeight() + r7.bottom)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|r8.set(0, 0, r6.getWidth(), r6.getHeight())\l}"];
Node_3 [shape=record,label="{3\:\ 0x002e}"];
Node_4 [shape=record,label="{4\:\ 0x0030|if (r5.mRecyclerView == null) goto L_0x006b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|android.graphics.Matrix r7 = r6.getMatrix()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|if (r7 == null) goto L_0x006b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0038}"];
Node_8 [shape=record,label="{8\:\ 0x003c|if (r7.isIdentity() != false) goto L_0x006b\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|android.graphics.RectF r0 = r5.mRecyclerView.mTempRectF\lr0.set(r8)\lr7.mapRect(r0)\lr8.set((int) java.lang.Math.floor((double) r0.left), (int) java.lang.Math.floor((double) r0.top), (int) java.lang.Math.ceil((double) r0.right), (int) java.lang.Math.ceil((double) r0.bottom))\l}"];
Node_10 [shape=record,label="{10\:\ 0x006b|r8.offset(r6.getLeft(), r6.getTop())\l}"];
Node_11 [shape=record,label="{11\:\ 0x0076|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.RecyclerView.LayoutManager.getTransformedBoundingBox((r5v0 'this' android.support.v7.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r6v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], , Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

