digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.ignoreView(Landroid\/view\/View;)V" {
subgraph cluster_Region_760328979 {
label = "R(1:(2:(2:6|7)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_1708908152 {
label = "R(2:(2:6|7)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_36432049 {
label = "IF [B:1:0x0006, B:3:0x000f] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.getParent() != r2.mRecyclerView) goto L_0x0022\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|ADDED_TO_REGION\l|if (r2.mRecyclerView.indexOfChild(r3) == \-1) goto L_0x0022\l}"];
subgraph cluster_Region_1780826257 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0022}"];
Node_7 [shape=record,label="{7\:\ 0x003e|throw new java.lang.IllegalArgumentException(\"View should be fully attached to be ignored\" + r2.mRecyclerView.exceptionLabel())\l}"];
}
}
subgraph cluster_Region_573300095 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|android.support.v7.widget.RecyclerView$ViewHolder android.support.p003v7.widget.RecyclerView.ViewHolder r3 = android.support.p003v7.widget.RecyclerView.getChildViewHolderInt(r3)\lr3.addFlags(128)\lr2.mRecyclerView.mViewInfoStore.removeViewHolder(r3)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0021}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.RecyclerView.LayoutManager.ignoreView((r2v0 'this' android.support.v7.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r3v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_6 -> Node_7;
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

