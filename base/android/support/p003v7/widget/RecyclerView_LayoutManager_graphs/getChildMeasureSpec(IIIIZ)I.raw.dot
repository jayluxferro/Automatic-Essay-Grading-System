digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.getChildMeasureSpec(IIIIZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r4 I:int) = (r4 I:int) \- (r6 I:int) \l0x0001: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r4 I:int) = (r6 I:int), (r4 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0033 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0030 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0034 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|0x0030: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: INVOKE  (r4 I:int) = (r4 I:int), (r6 I:int) android.view.View.MeasureSpec.makeMeasureSpec(int, int):int type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v7.widget.RecyclerView.LayoutManager.getChildMeasureSpec((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_20;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_20;
Node_11 -> Node_13;
Node_11 -> Node_3[style=dashed];
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

