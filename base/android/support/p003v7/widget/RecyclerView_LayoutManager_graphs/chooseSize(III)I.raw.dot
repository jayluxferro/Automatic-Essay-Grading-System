digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.chooseSize(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:int) android.view.View.MeasureSpec.getMode(int):int type: STATIC \l0x0004: INVOKE  (r2 I:int) = (r2 I:int) android.view.View.MeasureSpec.getSize(int):int type: STATIC \l0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r2 I:int) = (r3 I:int), (r4 I:int) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r2 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x001a: INVOKE  (r2 I:int) = (r2 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v7.widget.RecyclerView.LayoutManager.chooseSize((r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_7 -> Node_8;
}

