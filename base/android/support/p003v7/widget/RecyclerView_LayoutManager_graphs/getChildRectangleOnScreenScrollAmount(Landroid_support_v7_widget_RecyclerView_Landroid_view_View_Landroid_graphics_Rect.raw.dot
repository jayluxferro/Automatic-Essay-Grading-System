digraph "CFG forandroid.support.v7.widget.RecyclerView.LayoutManager.getChildRectangleOnScreenScrollAmount(Landroid\/support\/v7\/widget\/RecyclerView;Landroid\/view\/View;Landroid\/graphics\/Rect;Z)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r8 I:int[]) = (r8 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0003: INVOKE  (r11 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingLeft():int type: VIRTUAL \l0x0007: INVOKE  (r0 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingTop():int type: VIRTUAL \l0x000b: INVOKE  (r1 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getWidth():int type: VIRTUAL \l0x000f: INVOKE  (r2 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingRight():int type: VIRTUAL \l0x0013: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0014: INVOKE  (r2 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getHeight():int type: VIRTUAL \l0x0018: INVOKE  (r3 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getPaddingBottom():int type: VIRTUAL \l0x001c: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001d: INVOKE  (r3 I:int) = (r9 I:android.view.View) android.view.View.getLeft():int type: VIRTUAL \l0x0021: IGET  (r4 I:int) = (r10 I:android.graphics.Rect) android.graphics.Rect.left int \l0x0023: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x0024: INVOKE  (r4 I:int) = (r9 I:android.view.View) android.view.View.getScrollX():int type: VIRTUAL \l0x0028: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0029: INVOKE  (r4 I:int) = (r9 I:android.view.View) android.view.View.getTop():int type: VIRTUAL \l0x002d: IGET  (r5 I:int) = (r10 I:android.graphics.Rect) android.graphics.Rect.top int \l0x002f: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0030: INVOKE  (r9 I:int) = (r9 I:android.view.View) android.view.View.getScrollY():int type: VIRTUAL \l0x0034: ARITH  (r4 I:int) = (r4 I:int) \- (r9 I:int) \l0x0035: INVOKE  (r9 I:int) = (r10 I:android.graphics.Rect) android.graphics.Rect.width():int type: VIRTUAL \l0x0039: ARITH  (r9 I:int) = (r9 I:int) + (r3 I:int) \l0x003a: INVOKE  (r10 I:int) = (r10 I:android.graphics.Rect) android.graphics.Rect.height():int type: VIRTUAL \l0x003e: ARITH  (r10 I:int) = (r10 I:int) + (r4 I:int) \l0x003f: ARITH  (r3 I:int) = (r3 I:int) \- (r11 I:int) \l0x0040: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: INVOKE  (r5 I:int) = (r11 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0045: ARITH  (r4 I:int) = (r4 I:int) \- (r0 I:int) \l0x0046: INVOKE  (r0 I:int) = (r11 I:int), (r4 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x004a: ARITH  (r9 I:int) = (r9 I:int) \- (r1 I:int) \l0x004b: INVOKE  (r1 I:int) = (r11 I:int), (r9 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x004f: ARITH  (r10 I:int) = (r10 I:int) \- (r2 I:int) \l0x0050: INVOKE  (r10 I:int) = (r11 I:int), (r10 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0054: INVOKE  (r2 I:int) = (r7 I:android.support.v7.widget.RecyclerView$LayoutManager) android.support.v7.widget.RecyclerView.LayoutManager.getLayoutDirection():int type: VIRTUAL \l0x0058: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0059|0x0059: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0063 \l}"];
Node_2 [shape=record,label="{2\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x005e \l}"];
Node_4 [shape=record,label="{4\:\ 0x005e|0x005e: INVOKE  (r1 I:int) = (r5 I:int), (r9 I:int) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0063|0x0063: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0067 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0065|0x0065: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0067|0x0067: INVOKE  (r5 I:int) = (r3 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x006c|0x006c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x006f \l}"];
Node_10 [shape=record,label="{10\:\ 0x006f|0x006f: INVOKE  (r0 I:int) = (r4 I:int), (r10 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0073|0x0073: APUT  \l  (r8 I:?[int, float][])\l  (r11 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x0075: APUT  \l  (r8 I:?[int, float][])\l  (r6 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0077|0x0077: RETURN  (r8 I:int[]) \l}"];
MethodNode[shape=record,label="{private int[] android.support.v7.widget.RecyclerView.LayoutManager.getChildRectangleOnScreenScrollAmount((r7 'this' I:android.support.v7.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r8 I:android.support.v7.widget.RecyclerView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_4;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
}

