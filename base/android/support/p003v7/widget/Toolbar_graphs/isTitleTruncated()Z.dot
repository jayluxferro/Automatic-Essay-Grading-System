digraph "CFG forandroid.support.v7.widget.Toolbar.isTitleTruncated()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5.mTitleTextView != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|android.text.Layout r0 = r5.mTitleTextView.getLayout()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r0 != null) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|int r2 = r0.getLineCount()\lr3 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:6:0x000f, B:11:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0014\-\>B:11:0x001e\l|if (r3 \>= r2) goto L_0x0021\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r0.getEllipsisCount(r3) \<= 0) goto L_0x001e\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|return true\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|LOOP_END\lLOOP:0: B:7:0x0014\-\>B:11:0x001e\l|int r3 = r3 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.widget.Toolbar.isTitleTruncated((r5v0 'this' android.support.v7.widget.Toolbar A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_14[style=dashed];
Node_11 -> Node_7;
Node_13 -> Node_12;
Node_14 -> Node_10;
}

