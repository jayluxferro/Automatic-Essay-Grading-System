digraph "CFG forandroid.support.v7.widget.Toolbar.getChildVerticalGravity(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (112(0x70, float:1.57E\-43) ?[int, float, short, byte, char]) \l0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (80 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r2 I:int) = (r1 I:android.support.v7.widget.Toolbar) android.support.v7.widget.Toolbar.mGravity int \l0x0010: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (112(0x70, float:1.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v7.widget.Toolbar.getChildVerticalGravity((r1 'this' I:android.support.v7.widget.Toolbar A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
}

