digraph "CFG forandroid.support.v7.widget.Toolbar.onRtlPropertiesChanged(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:android.view.ViewGroup), (r3 I:int) android.view.ViewGroup.onRtlPropertiesChanged(int):void type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r2 I:android.support.v7.widget.Toolbar) android.support.v7.widget.Toolbar.ensureContentInsets():void type: DIRECT \l0x000c: IGET  (r0 I:android.support.v7.widget.RtlSpacingHelper) = (r2 I:android.support.v7.widget.Toolbar) android.support.v7.widget.Toolbar.mContentInsets android.support.v7.widget.RtlSpacingHelper \l0x000e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: INVOKE  \l  (r0 I:android.support.v7.widget.RtlSpacingHelper)\l  (r1 I:boolean)\l android.support.v7.widget.RtlSpacingHelper.setDirection(boolean):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.widget.Toolbar.onRtlPropertiesChanged((r2 'this' I:android.support.v7.widget.Toolbar A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
}

