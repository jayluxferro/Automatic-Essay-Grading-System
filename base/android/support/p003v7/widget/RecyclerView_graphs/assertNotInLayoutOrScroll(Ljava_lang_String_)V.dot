digraph "CFG forandroid.support.v7.widget.RecyclerView.assertNotInLayoutOrScroll(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isComputingLayout() == false) goto L_0x0029\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r5 != null) goto L_0x0023\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Cannot call this method while RecyclerView is computing a layout or scrolling\")\lr0.append(exceptionLabel())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|throw new java.lang.IllegalStateException(r0.toString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023}"];
Node_6 [shape=record,label="{6\:\ 0x0028|throw new java.lang.IllegalStateException(r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029}"];
Node_8 [shape=record,label="{8\:\ 0x002b|if (r4.mDispatchScrollCounter \<= 0) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"\")\lr2.append(exceptionLabel())\landroid.util.Log.w(TAG, \"Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.\", new java.lang.IllegalStateException(r2.toString()))\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.RecyclerView.assertNotInLayoutOrScroll((r4v0 'this' android.support.v7.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
}

