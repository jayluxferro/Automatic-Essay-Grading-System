digraph "CFG forandroid.support.v7.widget.RecyclerView.findNestedRecyclerView(Landroid\/view\/View;)Landroid\/support\/v7\/widget\/RecyclerView;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r4 instanceof android.view.ViewGroup) != false) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if ((r4 instanceof android.support.p003v7.widget.RecyclerView) == false) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\l|return (android.support.p003v7.widget.RecyclerView) r4\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|android.view.ViewGroup r4 = (android.view.ViewGroup) r4\lint r0 = r4.getChildCount()\lr2 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:7:0x000d, B:12:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0014\-\>B:12:0x0021\l|if (r2 \>= r0) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|android.support.v7.widget.RecyclerView r3 = findNestedRecyclerView(r4.getChildAt(r2))\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|if (r3 == null) goto L_0x0021\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|return r3\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|LOOP_END\lLOOP:0: B:8:0x0014\-\>B:12:0x0021\l|int r2 = r2 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static android.support.v7.widget.RecyclerView android.support.v7.widget.RecyclerView.findNestedRecyclerView((r4v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_15[style=dashed];
Node_12 -> Node_8;
Node_14 -> Node_13;
Node_15 -> Node_11;
}

