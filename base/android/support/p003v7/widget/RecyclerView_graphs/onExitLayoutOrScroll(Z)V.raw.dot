digraph "CFG forandroid.support.v7.widget.RecyclerView.onExitLayoutOrScroll(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.mLayoutOrScrollCounter int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0004: IPUT  (r0 I:int), (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.mLayoutOrScrollCounter int \l0x0006: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.mLayoutOrScrollCounter int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IPUT  (r0 I:int), (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.mLayoutOrScrollCounter int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.dispatchContentChangedIfNecessary():void type: DIRECT \l0x0012: INVOKE  (r2 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.dispatchPendingImportantForAccessibilityChanges():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{void android.support.v7.widget.RecyclerView.onExitLayoutOrScroll((r2 'this' I:android.support.v7.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

