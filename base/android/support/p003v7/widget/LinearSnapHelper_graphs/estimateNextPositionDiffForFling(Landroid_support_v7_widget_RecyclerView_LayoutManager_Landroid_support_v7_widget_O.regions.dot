digraph "CFG forandroid.support.v7.widget.LinearSnapHelper.estimateNextPositionDiffForFling(Landroid\/support\/v7\/widget\/RecyclerView$LayoutManager;Landroid\/support\/v7\/widget\/OrientationHelper;II)I" {
subgraph cluster_Region_1948448206 {
label = "R(2:0|(2:(1:2)|(1:8)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int[] int[] r5 = calculateScrollDistance(r5, r6)\lfloat float r3 = computeDistancePerChild(r3, r4)\l}"];
subgraph cluster_Region_2098727491 {
label = "R(2:(1:2)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1951509215 {
label = "IF [B:1:0x000c] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r3 \<= 0.0f) goto L_0x000e\l}"];
subgraph cluster_Region_1347075088 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|RETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_2064363368 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0029|RETURN\l|return java.lang.Math.round(((float) (java.lang.Math.abs(r5[0]) \> java.lang.Math.abs(r5[1]) ? r5[0] : r5[1])) \/ r3)\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000f}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001c}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0023|PHI: r4 \l  PHI: (r4v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{private int android.support.v7.widget.LinearSnapHelper.estimateNextPositionDiffForFling((r2v0 'this' android.support.v7.widget.LinearSnapHelper A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.v7.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.support.v7.widget.OrientationHelper A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

