digraph "CFG forandroid.support.v7.widget.ViewBoundsCheck.findOneViewWithinBoundFlags(IIII)Landroid\/view\/View;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v7.widget.ViewBoundsCheck$Callback) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mCallback android.support.v7.widget.ViewBoundsCheck$Callback \l0x0002: INVOKE  (r0 I:int) = (r0 I:android.support.v7.widget.ViewBoundsCheck$Callback) android.support.v7.widget.ViewBoundsCheck.Callback.getParentStart():int type: INTERFACE \l0x0006: IGET  (r1 I:android.support.v7.widget.ViewBoundsCheck$Callback) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mCallback android.support.v7.widget.ViewBoundsCheck$Callback \l0x0008: INVOKE  (r1 I:int) = (r1 I:android.support.v7.widget.ViewBoundsCheck$Callback) android.support.v7.widget.ViewBoundsCheck.Callback.getParentEnd():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r10 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r4 I:android.support.v7.widget.ViewBoundsCheck$Callback) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mCallback android.support.v7.widget.ViewBoundsCheck$Callback \l0x0016: INVOKE  (r4 I:android.view.View) = \l  (r4 I:android.support.v7.widget.ViewBoundsCheck$Callback)\l  (r9 I:int)\l android.support.v7.widget.ViewBoundsCheck.Callback.getChildAt(int):android.view.View type: INTERFACE \l0x001a: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$Callback) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mCallback android.support.v7.widget.ViewBoundsCheck$Callback \l0x001c: INVOKE  (r5 I:int) = \l  (r5 I:android.support.v7.widget.ViewBoundsCheck$Callback)\l  (r4 I:android.view.View)\l android.support.v7.widget.ViewBoundsCheck.Callback.getChildStart(android.view.View):int type: INTERFACE \l0x0020: IGET  (r6 I:android.support.v7.widget.ViewBoundsCheck$Callback) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mCallback android.support.v7.widget.ViewBoundsCheck$Callback \l0x0022: INVOKE  (r6 I:int) = \l  (r6 I:android.support.v7.widget.ViewBoundsCheck$Callback)\l  (r4 I:android.view.View)\l android.support.v7.widget.ViewBoundsCheck.Callback.getChildEnd(android.view.View):int type: INTERFACE \l0x0026: IGET  (r7 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x0028: INVOKE  \l  (r7 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r0 I:int)\l  (r1 I:int)\l  (r5 I:int)\l  (r6 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.setBounds(int, int, int, int):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0040 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x002f: INVOKE  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.resetFlags():void type: VIRTUAL \l0x0032: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x0034: INVOKE  \l  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r11 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.addFlags(int):void type: VIRTUAL \l0x0037: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x0039: INVOKE  (r5 I:boolean) = (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.boundsMatch():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: RETURN  (r4 I:android.view.View) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0055 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x0044: INVOKE  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.resetFlags():void type: VIRTUAL \l0x0047: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x0049: INVOKE  \l  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags)\l  (r12 I:int)\l android.support.v7.widget.ViewBoundsCheck.BoundFlags.addFlags(int):void type: VIRTUAL \l0x004c: IGET  (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) = (r8 I:android.support.v7.widget.ViewBoundsCheck) android.support.v7.widget.ViewBoundsCheck.mBoundFlags android.support.v7.widget.ViewBoundsCheck$BoundFlags \l0x004e: INVOKE  (r5 I:boolean) = (r5 I:android.support.v7.widget.ViewBoundsCheck$BoundFlags) android.support.v7.widget.ViewBoundsCheck.BoundFlags.boundsMatch():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: ARITH  (r9 I:int) = (r9 I:int) + (r2 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: RETURN  (r3 I:android.view.View) \l}"];
MethodNode[shape=record,label="{android.view.View android.support.v7.widget.ViewBoundsCheck.findOneViewWithinBoundFlags((r8 'this' I:android.support.v7.widget.ViewBoundsCheck A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_5;
}

