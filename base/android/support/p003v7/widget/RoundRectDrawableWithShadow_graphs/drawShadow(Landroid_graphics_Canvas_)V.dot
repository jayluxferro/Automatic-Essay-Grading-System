digraph "CFG forandroid.support.v7.widget.RoundRectDrawableWithShadow.drawShadow(Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|float r0 = (\-r12.mCornerRadius) \- r12.mShadowSize\lfloat r1 = (r12.mCornerRadius + ((float) r12.mInsetShadow)) + (r12.mRawShadowSize \/ 2.0f)\lfloat r8 = r1 * 2.0f\l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|if (((r12.mCardBounds.width() \- r8) \> 0.0f ? 1 : ((r12.mCardBounds.width() \- r8) == 0.0f ? 0 : \-1)) \<= 0) goto L_0x0024\l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|r9 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|r9 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|PHI: r9 \l  PHI: (r9v0 boolean) = (r9v3 boolean), (r9v4 boolean) binds: [B:3:0x0024, B:2:0x0022] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|if (((r12.mCardBounds.height() \- r8) \> 0.0f ? 1 : ((r12.mCardBounds.height() \- r8) == 0.0f ? 0 : \-1)) \<= 0) goto L_0x0032\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|r10 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|r10 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|PHI: r10 \l  PHI: (r10v0 boolean) = (r10v1 boolean), (r10v2 boolean) binds: [B:7:0x0032, B:6:0x0030] A[DONT_GENERATE, DONT_INLINE]\l|int r11 = r13.save()\lr13.translate(r12.mCardBounds.left + r1, r12.mCardBounds.top + r1)\lr13.drawPath(r12.mCornerShadowPath, r12.mCornerShadowPaint)\l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|if (r9 == false) goto L_0x0060\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|r2 = r13\lr4 = r0\lr2.drawRect(0.0f, r4, r12.mCardBounds.width() \- r8, \-r12.mCornerRadius, r12.mEdgeShadowPaint)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0060|r13.restoreToCount(r11)\lint r11 = r13.save()\lr13.translate(r12.mCardBounds.right \- r1, r12.mCardBounds.bottom \- r1)\lr13.rotate(180.0f)\lr13.drawPath(r12.mCornerShadowPath, r12.mCornerShadowPaint)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0080|if (r9 == false) goto L_0x0099\l}"];
Node_13 [shape=record,label="{13\:\ 0x0082|r2 = r13\lr4 = r0\lr2.drawRect(0.0f, r4, r12.mCardBounds.width() \- r8, (\-r12.mCornerRadius) + r12.mShadowSize, r12.mEdgeShadowPaint)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0099|r13.restoreToCount(r11)\lint r9 = r13.save()\lr13.translate(r12.mCardBounds.left + r1, r12.mCardBounds.bottom \- r1)\lr13.rotate(270.0f)\lr13.drawPath(r12.mCornerShadowPath, r12.mCornerShadowPaint)\l}"];
Node_15 [shape=record,label="{15\:\ 0x00b9|if (r10 == false) goto L_0x00ce\l}"];
Node_16 [shape=record,label="{16\:\ 0x00bb|r2 = r13\lr4 = r0\lr2.drawRect(0.0f, r4, r12.mCardBounds.height() \- r8, \-r12.mCornerRadius, r12.mEdgeShadowPaint)\l}"];
Node_17 [shape=record,label="{17\:\ 0x00ce|r13.restoreToCount(r9)\lint r9 = r13.save()\lr13.translate(r12.mCardBounds.right \- r1, r12.mCardBounds.top + r1)\lr13.rotate(90.0f)\lr13.drawPath(r12.mCornerShadowPath, r12.mCornerShadowPaint)\l}"];
Node_18 [shape=record,label="{18\:\ 0x00ee|if (r10 == false) goto L_0x0103\l}"];
Node_19 [shape=record,label="{19\:\ 0x00f0|r2 = r13\lr4 = r0\lr2.drawRect(0.0f, r4, r12.mCardBounds.height() \- r8, \-r12.mCornerRadius, r12.mEdgeShadowPaint)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0103|r13.restoreToCount(r9)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0106|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.RoundRectDrawableWithShadow.drawShadow((r12v0 'this' android.support.v7.widget.RoundRectDrawableWithShadow A[IMMUTABLE_TYPE, THIS]), (r13v0 android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

