digraph "CFG forandroid.support.v7.widget.FastScroller.isPointInsideVerticalThumb(FF)Z" {
subgraph cluster_Region_394186329 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1125898119 {
label = "IF [B:1:0x0004, B:3:0x000d, B:5:0x0018] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|ADDED_TO_REGION\l|if (isLayoutRTL() == false) goto L_0x0010\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ADDED_TO_REGION\l|if (r3 \<= ((float) (r2.mVerticalThumbWidth \/ 2))) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|ADDED_TO_REGION\l|if (r3 \>= ((float) (r2.mRecyclerViewWidth \- r2.mVerticalThumbWidth))) goto L_0x001a\l}"];
subgraph cluster_Region_2037466510 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0024|RETURN\l|return r4 \>= ((float) (r2.mVerticalThumbCenterY \- (r2.mVerticalThumbHeight \/ 2))) && r4 \<= ((float) (r2.mVerticalThumbCenterY + (r2.mVerticalThumbHeight \/ 2)))\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001a}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0026}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0030|REMOVE\lADDED_TO_REGION\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0032|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0034|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{boolean android.support.v7.widget.FastScroller.isPointInsideVerticalThumb((r2v0 'this' android.support.v7.widget.FastScroller A[IMMUTABLE_TYPE, THIS]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_3 -> Node_11[style=dashed];
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_5 -> Node_11[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11;
}

