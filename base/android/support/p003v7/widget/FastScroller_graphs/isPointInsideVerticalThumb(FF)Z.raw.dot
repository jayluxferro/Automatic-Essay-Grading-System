digraph "CFG forandroid.support.v7.widget.FastScroller.isPointInsideVerticalThumb(FF)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.isLayoutRTL():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbWidth int \l0x0008: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x000a: CAST  (r0 I:float) = (float) (r0 I:int) \l0x000b: CMP_G  (r3 I:int) = (r3 I:float), (r0 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mRecyclerViewWidth int \l0x0012: IGET  (r1 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbWidth int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0015: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0016: CMP_L  (r3 I:int) = (r3 I:float), (r0 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IGET  (r3 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbCenterY int \l0x001c: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbHeight int \l0x001e: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x0020: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int) \l0x0021: CAST  (r3 I:float) = (float) (r3 I:int) \l0x0022: CMP_L  (r3 I:int) = (r4 I:float), (r3 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IGET  (r3 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbCenterY int \l0x0028: IGET  (r0 I:int) = (r2 I:android.support.v7.widget.FastScroller) android.support.v7.widget.FastScroller.mVerticalThumbHeight int \l0x002a: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x002c: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) \l0x002d: CAST  (r3 I:float) = (float) (r3 I:int) \l0x002e: CMP_G  (r3 I:int) = (r4 I:float), (r3 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean android.support.v7.widget.FastScroller.isPointInsideVerticalThumb((r2 'this' I:android.support.v7.widget.FastScroller A[IMMUTABLE_TYPE, THIS]), (r3 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_12;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
}

