digraph "CFG forandroid.support.v7.widget.FastScroller.isPointInsideVerticalThumb(FF)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isLayoutRTL() == false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if ((r3 \> ((float) (r2.mVerticalThumbWidth \/ 2)) ? 1 : (r3 == ((float) (r2.mVerticalThumbWidth \/ 2)) ? 0 : \-1)) \> 0) goto L_0x0034\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if ((r3 \> ((float) (r2.mRecyclerViewWidth \- r2.mVerticalThumbWidth)) ? 1 : (r3 == ((float) (r2.mRecyclerViewWidth \- r2.mVerticalThumbWidth)) ? 0 : \-1)) \< 0) goto L_0x0034\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if ((r4 \> ((float) (r2.mVerticalThumbCenterY \- (r2.mVerticalThumbHeight \/ 2))) ? 1 : (r4 == ((float) (r2.mVerticalThumbCenterY \- (r2.mVerticalThumbHeight \/ 2))) ? 0 : \-1)) \< 0) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026}"];
Node_9 [shape=record,label="{9\:\ 0x0030|if ((r4 \> ((float) (r2.mVerticalThumbCenterY + (r2.mVerticalThumbHeight \/ 2))) ? 1 : (r4 == ((float) (r2.mVerticalThumbCenterY + (r2.mVerticalThumbHeight \/ 2))) ? 0 : \-1)) \> 0) goto L_0x0034\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|SYNTHETIC\lRETURN\l|return true\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean android.support.v7.widget.FastScroller.isPointInsideVerticalThumb((r2v0 'this' android.support.v7.widget.FastScroller A[IMMUTABLE_TYPE, THIS]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_11;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
}

