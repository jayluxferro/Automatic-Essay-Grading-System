digraph "CFG forandroid.support.v7.widget.SuggestionsAdapter.setViewDrawable(Landroid\/widget\/ImageView;Landroid\/graphics\/drawable\/Drawable;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r1 I:android.widget.ImageView)\l  (r2 I:android.graphics.drawable.Drawable)\l android.widget.ImageView.setImageDrawable(android.graphics.drawable.Drawable):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r1 I:android.widget.ImageView), (r3 I:int) android.widget.ImageView.setVisibility(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r1 I:android.widget.ImageView), (r3 I:int) android.widget.ImageView.setVisibility(int):void type: VIRTUAL \l0x000d: INVOKE  \l  (r2 I:android.graphics.drawable.Drawable)\l  (r3 I:boolean)\l  (r3 I:boolean)\l android.graphics.drawable.Drawable.setVisible(boolean, boolean):boolean type: VIRTUAL \l0x0010: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  \l  (r2 I:android.graphics.drawable.Drawable)\l  (r1 I:boolean)\l  (r3 I:boolean)\l android.graphics.drawable.Drawable.setVisible(boolean, boolean):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v7.widget.SuggestionsAdapter.setViewDrawable((r0 'this' I:android.support.v7.widget.SuggestionsAdapter A[IMMUTABLE_TYPE, THIS]), (r1 I:android.widget.ImageView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

