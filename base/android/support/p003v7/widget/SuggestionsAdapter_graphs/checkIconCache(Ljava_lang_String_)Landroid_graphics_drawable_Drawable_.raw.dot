digraph "CFG forandroid.support.v7.widget.SuggestionsAdapter.checkIconCache(Ljava\/lang\/String;)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.WeakHashMap\<java.lang.String, android.graphics.drawable.Drawable$ConstantState\>) = (r1 I:android.support.v7.widget.SuggestionsAdapter) android.support.v7.widget.SuggestionsAdapter.mOutsideDrawablesCache java.util.WeakHashMap \l0x0002: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.WeakHashMap), (r2 I:java.lang.Object) java.util.WeakHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r2 I:android.graphics.drawable.Drawable$ConstantState) = (android.graphics.drawable.Drawable$ConstantState) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r2 I:android.graphics.drawable.Drawable) = (r2 I:android.graphics.drawable.Drawable$ConstantState) android.graphics.drawable.Drawable.ConstantState.newDrawable():android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{private android.graphics.drawable.Drawable android.support.v7.widget.SuggestionsAdapter.checkIconCache((r1 'this' I:android.support.v7.widget.SuggestionsAdapter A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

