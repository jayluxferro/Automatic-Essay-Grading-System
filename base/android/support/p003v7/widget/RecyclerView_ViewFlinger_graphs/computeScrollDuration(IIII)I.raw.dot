digraph "CFG forandroid.support.v7.widget.RecyclerView.ViewFlinger.computeScrollDuration(IIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0004: INVOKE  (r1 I:int) = (r6 I:int) java.lang.Math.abs(int):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: ARITH  (r7 I:int) = (r7 I:int) * (r7 I:int) \l0x000f: ARITH  (r8 I:int) = (r8 I:int) * (r8 I:int) \l0x0011: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x0012: CAST  (r7 I:double) = (double) (r7 I:int) \l0x0013: INVOKE  (r7 I:double) = (r7 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0017: CAST  (r7 I:int) = (int) (r7 I:double) \l0x0018: ARITH  (r5 I:int) = (r5 I:int) * (r5 I:int) \l0x001a: ARITH  (r6 I:int) = (r6 I:int) * (r6 I:int) \l0x001c: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x001d: CAST  (r5 I:double) = (double) (r5 I:int) \l0x001e: INVOKE  (r5 I:double) = (r5 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0022: CAST  (r5 I:int) = (int) (r5 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IGET  (r6 I:android.support.v7.widget.RecyclerView) = (r4 I:android.support.v7.widget.RecyclerView$ViewFlinger) android.support.v7.widget.RecyclerView.ViewFlinger.this$0 android.support.v7.widget.RecyclerView \l0x0027: INVOKE  (r6 I:int) = (r6 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.getWidth():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: IGET  (r6 I:android.support.v7.widget.RecyclerView) = (r4 I:android.support.v7.widget.RecyclerView$ViewFlinger) android.support.v7.widget.RecyclerView.ViewFlinger.this$0 android.support.v7.widget.RecyclerView \l0x002e: INVOKE  (r6 I:int) = (r6 I:android.support.v7.widget.RecyclerView) android.support.v7.widget.RecyclerView.getHeight():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: ARITH  (r8 I:int) = (r6 I:int) \/ (2 int) \l0x0034: CAST  (r5 I:float) = (float) (r5 I:int) \l0x0035: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0037: ARITH  (r5 I:float) = (r5 I:float) * (r3 I:float) \l0x0039: CAST  (r6 I:float) = (float) (r6 I:int) \l0x003a: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x003b: INVOKE  (r5 I:float) = (r3 I:float), (r5 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x003f: CAST  (r8 I:float) = (float) (r8 I:int) \l0x0040: INVOKE  (r5 I:float) = \l  (r4 I:android.support.v7.widget.RecyclerView$ViewFlinger)\l  (r5 I:float)\l android.support.v7.widget.RecyclerView.ViewFlinger.distanceInfluenceForSnapDuration(float):float type: DIRECT \l0x0044: ARITH  (r5 I:float) = (r5 I:float) * (r8 I:float) \l0x0046: ARITH  (r8 I:float) = (r8 I:float) + (r5 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|0x0047: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x005a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1148846080(0x447a0000, float:1000.0) ?[int, float, short, byte, char])\l \l0x004b: CAST  (r6 I:float) = (float) (r7 I:int) \l0x004c: ARITH  (r8 I:float) = (r8 I:float) \/ (r6 I:float) \l0x004d: INVOKE  (r6 I:float) = (r8 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0051: ARITH  (r6 I:float) = (r6 I:float) * (r5 I:float) \l0x0053: INVOKE  (r5 I:int) = (r6 I:float) java.lang.Math.round(float):int type: STATIC \l0x0057: ARITH  (r5 I:int) = (r5 I:int) * (4 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x005a|0x005a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005d \l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|0x005d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x005e|0x005e: CAST  (r5 I:float) = (float) (r0 I:int) \l0x005f: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x0060: ARITH  (r5 I:float) = (r5 I:float) + (r3 I:float) \l0x0061: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1133903872(0x43960000, float:300.0) ?[int, float, short, byte, char])\l \l0x0063: ARITH  (r5 I:float) = (r5 I:float) * (r6 I:float) \l0x0065: CAST  (r5 I:int) = (int) (r5 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|0x0066: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (2000(0x7d0, float:2.803E\-42) ?[int, float, short, byte, char])\l \l0x0068: INVOKE  (r5 I:int) = (r5 I:int), (r6 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x006c|0x006c: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v7.widget.RecyclerView.ViewFlinger.computeScrollDuration((r4 'this' I:android.support.v7.widget.RecyclerView$ViewFlinger A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_15;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

