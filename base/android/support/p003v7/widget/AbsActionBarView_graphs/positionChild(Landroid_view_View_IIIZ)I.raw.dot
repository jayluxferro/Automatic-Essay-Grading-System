digraph "CFG forandroid.support.v7.widget.AbsActionBarView.positionChild(Landroid\/view\/View;IIIZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x0008: ARITH  (r6 I:int) = (r6 I:int) \- (r1 I:int) \l0x0009: ARITH  (r6 I:int) = (r6 I:int) \/ (2 int) \l0x000b: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: ARITH  (r6 I:int) = (r4 I:int) \- (r0 I:int) \l0x0010: ARITH  (r1 I:int) = (r1 I:int) + (r5 I:int) \l0x0011: INVOKE  \l  (r3 I:android.view.View)\l  (r6 I:int)\l  (r5 I:int)\l  (r4 I:int)\l  (r1 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: ARITH  (r6 I:int) = (r4 I:int) + (r0 I:int) \l0x0017: ARITH  (r1 I:int) = (r1 I:int) + (r5 I:int) \l0x0018: INVOKE  \l  (r3 I:android.view.View)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r1 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: NEG  (r0 I:int) = (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{protected int android.support.v7.widget.AbsActionBarView.positionChild((r2 'this' I:android.support.v7.widget.AbsActionBarView A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

