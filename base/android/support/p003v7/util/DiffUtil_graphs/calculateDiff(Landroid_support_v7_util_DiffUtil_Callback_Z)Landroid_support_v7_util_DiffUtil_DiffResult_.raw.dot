digraph "CFG forandroid.support.v7.util.DiffUtil.calculateDiff(Landroid\/support\/v7\/util\/DiffUtil$Callback;Z)Landroid\/support\/v7\/util\/DiffUtil$DiffResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r15 I:android.support.v7.util.DiffUtil$Callback) android.support.v7.util.DiffUtil.Callback.getOldListSize():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r15 I:android.support.v7.util.DiffUtil$Callback) android.support.v7.util.DiffUtil.Callback.getNewListSize():int type: VIRTUAL \l0x0008: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x000a: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000d: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x000f: INVOKE  (r2 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0012: NEW_INSTANCE  (r3 I:android.support.v7.util.DiffUtil$Range) =  android.support.v7.util.DiffUtil$Range \l0x0014: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  \l  (r3 I:android.support.v7.util.DiffUtil$Range)\l  (r5 I:int)\l  (r0 I:int)\l  (r5 I:int)\l  (r1 I:int)\l android.support.v7.util.DiffUtil.Range.\<init\>(int, int, int, int):void type: DIRECT \l0x0018: INVOKE  (r2 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x001b: ARITH  (r3 I:int) = (r0 I:int) + (r1 I:int) \l0x001d: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x001e: INVOKE  (r0 I:int) = (r0 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0022: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x0023: ARITH  (r1 I:int) = (r0 I:int) * (2 int) \l0x0025: NEW_ARRAY  (r13 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0027: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0029: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x002b: INVOKE  (r3 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: INVOKE  (r5 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00f3 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0034|0x0034: INVOKE  (r5 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0038: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x003a: INVOKE  (r5 I:java.lang.Object) = (r2 I:java.util.List), (r5 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l0x003e: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x003f: CHECK_CAST  (r14 I:android.support.v7.util.DiffUtil$Range) = (android.support.v7.util.DiffUtil$Range) (r14 I:?[OBJECT, ARRAY]) \l0x0041: IGET  (r6 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x0043: IGET  (r7 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListEnd int \l0x0045: IGET  (r8 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l0x0047: IGET  (r9 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListEnd int \l0x0049: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x004a: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x004b: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x004c: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: INVOKE  (r5 I:android.support.v7.util.DiffUtil$Snake) = \l  (r5 I:android.support.v7.util.DiffUtil$Callback)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:int[])\l  (r11 I:int[])\l  (r12 I:int)\l android.support.v7.util.DiffUtil.diffPartial(android.support.v7.util.DiffUtil$Callback, int, int, int, int, int[], int[], int):android.support.v7.util.DiffUtil$Snake type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0051|0x0051: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00ee \l}"];
Node_5 [shape=record,label="{5\:\ 0x0053|0x0053: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0055|0x0055: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x005a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0057|0x0057: INVOKE  (r4 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x005a|0x005a: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x005c: IGET  (r7 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x005e: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x005f: IPUT  (r6 I:int), (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x0061: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x0063: IGET  (r7 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l0x0065: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x0066: IPUT  (r6 I:int), (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x0068: INVOKE  (r6 I:boolean) = (r3 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x006c|0x006c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0074 \l}"];
Node_10 [shape=record,label="{10\:\ 0x006e|0x006e: NEW_INSTANCE  (r6 I:android.support.v7.util.DiffUtil$Range) =  android.support.v7.util.DiffUtil$Range \l0x0070: INVOKE  (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0074|0x0074: INVOKE  (r6 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0078: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l0x007a: INVOKE  (r6 I:java.lang.Object) = (r3 I:java.util.List), (r6 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l0x007e: CHECK_CAST  (r6 I:android.support.v7.util.DiffUtil$Range) = (android.support.v7.util.DiffUtil$Range) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0080|0x0080: IGET  (r7 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x0082: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x0084: IGET  (r7 I:int) = (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l0x0086: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l0x0088: IGET  (r7 I:boolean) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.reverse boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x008a|0x008a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0095 \l}"];
Node_14 [shape=record,label="{14\:\ 0x008c|0x008c: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x008e: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListEnd int \l0x0090: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x0092: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListEnd int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0095|0x0095: IGET  (r7 I:boolean) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.removal boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|0x0097: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x00a4 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0099|0x0099: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x009b: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l0x009d: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListEnd int \l0x009f: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x00a1: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListEnd int \l}"];
Node_18 [shape=record,label="{18\:\ 0x00a4|0x00a4: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x00a6: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListEnd int \l0x00a8: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x00aa: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l0x00ac: IPUT  (r7 I:int), (r6 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListEnd int \l}"];
Node_19 [shape=record,label="{19\:\ 0x00ae|0x00ae: INVOKE  (r2 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00b1: IGET  (r6 I:boolean) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.reverse boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x00b3|0x00b3: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00db \l}"];
Node_21 [shape=record,label="{21\:\ 0x00b5|0x00b5: IGET  (r6 I:boolean) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.removal boolean \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b7|0x00b7: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00ca \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b9|0x00b9: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x00bb: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00bd: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x00be: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x00c0: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x00c2: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x00c4: IGET  (r5 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00c6: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l0x00c7: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ca|0x00ca: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x00cc: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00ce: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x00cf: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x00d1: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x00d3: IGET  (r5 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00d5: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l0x00d6: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x00d8: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l}"];
Node_25 [shape=record,label="{25\:\ 0x00db|0x00db: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x00dd: IGET  (r7 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00df: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x00e0: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.oldListStart int \l0x00e2: IGET  (r6 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x00e4: IGET  (r5 I:int) = (r5 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x00e6: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l0x00e7: IPUT  (r6 I:int), (r14 I:android.support.v7.util.DiffUtil$Range) android.support.v7.util.DiffUtil.Range.newListStart int \l}"];
Node_26 [shape=record,label="{26\:\ 0x00e9|0x00e9: INVOKE  (r2 I:java.util.List), (r14 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ee|0x00ee: INVOKE  (r3 I:java.util.List), (r14 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_28 [shape=record,label="{28\:\ 0x00f3|0x00f3: SGET  (r0 I:java.util.Comparator\<android.support.v7.util.DiffUtil$Snake\>) =  android.support.v7.util.DiffUtil.SNAKE_COMPARATOR java.util.Comparator \l0x00f5: INVOKE  (r4 I:java.util.List), (r0 I:java.util.Comparator) java.util.Collections.sort(java.util.List, java.util.Comparator):void type: STATIC \l0x00f8: NEW_INSTANCE  (r0 I:android.support.v7.util.DiffUtil$DiffResult) =  android.support.v7.util.DiffUtil$DiffResult \l0x00fa: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00fb: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x00fc: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x00fd: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x00fe: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0100: INVOKE  \l  (r2 I:android.support.v7.util.DiffUtil$DiffResult)\l  (r3 I:android.support.v7.util.DiffUtil$Callback)\l  (r4 I:java.util.List)\l  (r5 I:int[])\l  (r6 I:int[])\l  (r7 I:boolean)\l android.support.v7.util.DiffUtil.DiffResult.\<init\>(android.support.v7.util.DiffUtil$Callback, java.util.List, int[], int[], boolean):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x0103|0x0103: RETURN  (r0 I:android.support.v7.util.DiffUtil$DiffResult) \l}"];
MethodNode[shape=record,label="{public static android.support.v7.util.DiffUtil$DiffResult android.support.v7.util.DiffUtil.calculateDiff((r15 I:android.support.v7.util.DiffUtil$Callback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_28;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_27;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_26;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_1;
Node_27 -> Node_1;
Node_28 -> Node_29;
}

