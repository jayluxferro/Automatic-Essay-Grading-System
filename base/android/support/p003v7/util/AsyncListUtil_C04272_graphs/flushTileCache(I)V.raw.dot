digraph "CFG forandroid.support.v7.util.AsyncListUtil.2.flushTileCache(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:android.support.v7.util.AsyncListUtil) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.this$0 android.support.v7.util.AsyncListUtil \l0x0002: IGET  (r5 I:android.support.v7.util.AsyncListUtil$DataCallback\<T\>) = (r5 I:android.support.v7.util.AsyncListUtil) android.support.v7.util.AsyncListUtil.mDataCallback android.support.v7.util.AsyncListUtil$DataCallback \l0x0004: INVOKE  (r0 I:int) = (r5 I:android.support.v7.util.AsyncListUtil$DataCallback) android.support.v7.util.AsyncListUtil.DataCallback.getMaxCachedTiles():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IGET  (r5 I:android.util.SparseBooleanArray) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mLoadedTiles android.util.SparseBooleanArray \l0x000a: INVOKE  (r5 I:int) = (r5 I:android.util.SparseBooleanArray) android.util.SparseBooleanArray.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r5 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char] A[D('cacheSizeLimit' int)])  \-\> B:14:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r5 I:android.util.SparseBooleanArray) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mLoadedTiles android.util.SparseBooleanArray \l0x0012: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  (r2 I:int) = (r5 I:android.util.SparseBooleanArray), (r6 I:int) android.util.SparseBooleanArray.keyAt(int):int type: VIRTUAL \l0x0017: IGET  (r5 I:android.util.SparseBooleanArray) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mLoadedTiles android.util.SparseBooleanArray \l0x0019: IGET  (r6 I:android.util.SparseBooleanArray) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mLoadedTiles android.util.SparseBooleanArray \l0x001b: INVOKE  (r6 I:int) = (r6 I:android.util.SparseBooleanArray) android.util.SparseBooleanArray.size():int type: VIRTUAL \l0x001f: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l0x0021: INVOKE  (r3 I:int) = (r5 I:android.util.SparseBooleanArray), (r6 I:int) android.util.SparseBooleanArray.keyAt(int):int type: VIRTUAL \l0x0025: IGET  (r5 I:int) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mFirstRequiredTileStart int \l0x0027: ARITH  (r4 I:int) = (r5 I:int) \- (r2 I:int A[D('firstLoadedTileStart' int)]) \l0x0029: IGET  (r5 I:int) = \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l android.support.v7.util.AsyncListUtil.2.mLastRequiredTileStart int \l0x002b: ARITH  (r1 I:int) = (r3 I:int A[D('lastLoadedTileStart' int)]) \- (r5 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r4 I:?[int, byte, short, char] A[D('startMargin' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IF  (r4 I:?[int, byte, short, char] A[D('startMargin' int)]) \>= (r1 I:?[int, byte, short, char] A[D('endMargin' int)])  \-\> B:8:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scrollHint' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: INVOKE  \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l  (r2 I:int A[D('firstLoadedTileStart' int)])\l android.support.v7.util.AsyncListUtil.2.removeTile(int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: IF  (r1 I:?[int, byte, short, char] A[D('endMargin' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r4 I:?[int, byte, short, char] A[D('startMargin' int)]) \< (r1 I:?[int, byte, short, char] A[D('endMargin' int)])  \-\> B:13:0x003f \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scrollHint' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: INVOKE  \l  (r7 I:android.support.v7.util.AsyncListUtil$2 A[D('this' android.support.v7.util.AsyncListUtil$2)])\l  (r3 I:int A[D('lastLoadedTileStart' int)])\l android.support.v7.util.AsyncListUtil.2.removeTile(int):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v7.util.AsyncListUtil.2.flushTileCache((r7 'this' I:android.support.v7.util.AsyncListUtil$2 A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('scrollHint' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002d\-0x0043: r1 'endMargin' int\l  0x0017\-0x0043: r2 'firstLoadedTileStart' int\l  0x0025\-0x0043: r3 'lastLoadedTileStart' int\l  0x0029\-0x0043: r4 'startMargin' int\l  0x0008\-0x0043: r0 'cacheSizeLimit' int\l  0x0000\-0x0043: r7 'this' android.support.v7.util.AsyncListUtil$2\l  ?\-0x0043: r8 'scrollHint' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_1;
}

