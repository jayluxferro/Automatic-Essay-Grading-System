digraph "CFG forandroid.support.v7.util.SortedList.findSameItem(Ljava\/lang\/Object;[Ljava\/lang\/Object;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:android.support.v7.util.SortedList$Callback) = (r2 I:android.support.v7.util.SortedList) android.support.v7.util.SortedList.mCallback android.support.v7.util.SortedList$Callback \l0x0004: AGET  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0006: INVOKE  (r0 I:boolean) = \l  (r0 I:android.support.v7.util.SortedList$Callback)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l android.support.v7.util.SortedList.Callback.areItemsTheSame(java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r5 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v7.util.SortedList.findSameItem((r2 'this' I:android.support.v7.util.SortedList A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;[TT;II)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_0;
Node_5 -> Node_6;
}

