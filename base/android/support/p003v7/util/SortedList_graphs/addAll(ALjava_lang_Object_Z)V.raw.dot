digraph "CFG forandroid.support.v7.util.SortedList.addAll([Ljava\/lang\/Object;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:android.support.v7.util.SortedList) android.support.v7.util.SortedList.throwIfInMutationOperation():void type: DIRECT \l0x0003: ARRAY_LENGTH  (r0 I:int) = (r2 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  \l  (r1 I:android.support.v7.util.SortedList)\l  (r2 I:java.lang.Object[])\l android.support.v7.util.SortedList.addAllInternal(java.lang.Object[]):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object[]) = \l  (r1 I:android.support.v7.util.SortedList)\l  (r2 I:java.lang.Object[])\l android.support.v7.util.SortedList.copyArray(java.lang.Object[]):java.lang.Object[] type: DIRECT \l0x0011: INVOKE  \l  (r1 I:android.support.v7.util.SortedList)\l  (r2 I:java.lang.Object[])\l android.support.v7.util.SortedList.addAllInternal(java.lang.Object[]):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v7.util.SortedList.addAll((r1 'this' I:android.support.v7.util.SortedList A[IMMUTABLE_TYPE, THIS]), (r2 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([TT;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

