digraph "CFG forandroid.support.v7.util.SortedList.addAllInternal([Ljava\/lang\/Object;)V" {
subgraph cluster_Region_1588179436 {
label = "R(1:(1:(2:3|(2:(2:5|8)|(1:6)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1825776885 {
label = "R(1:(2:3|(2:(2:5|8)|(1:6))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_968130546 {
label = "IF [B:1:0x0002] THEN: R(2:3|(2:(2:5|8)|(1:6))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.length \>= 1) goto L_0x0005\l}"];
subgraph cluster_Region_911131808 {
label = "R(2:3|(2:(2:5|8)|(1:6)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|int int r0 = sortAndDedup(r3)\l}"];
subgraph cluster_Region_2001878682 {
label = "R(2:(2:5|8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1692911437 {
label = "IF [B:4:0x000b] THEN: R(2:5|8) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r2.mSize == 0) goto L_0x000d\l}"];
subgraph cluster_Region_599606260 {
label = "R(2:5|8)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|r2.mData = r3\lr2.mSize = r0\lr2.mCallback.onInserted(0, r0)\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1754063268 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|merge(r3, r0)\l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{private void android.support.v7.util.SortedList.addAllInternal((r2v0 'this' android.support.v7.util.SortedList A[IMMUTABLE_TYPE, THIS]), (r3v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_0 -> Node_1;
}

