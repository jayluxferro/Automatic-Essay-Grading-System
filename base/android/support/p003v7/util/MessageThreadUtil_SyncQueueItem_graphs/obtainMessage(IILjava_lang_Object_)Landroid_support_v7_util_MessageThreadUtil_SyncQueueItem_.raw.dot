digraph "CFG forandroid.support.v7.util.MessageThreadUtil.SyncQueueItem.obtainMessage(IILjava\/lang\/Object;)Landroid\/support\/v7\/util\/MessageThreadUtil$SyncQueueItem;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0007: INVOKE  (r7 I:android.support.v7.util.MessageThreadUtil$SyncQueueItem) = \l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l android.support.v7.util.MessageThreadUtil.SyncQueueItem.obtainMessage(int, int, int, int, int, int, java.lang.Object):android.support.v7.util.MessageThreadUtil$SyncQueueItem type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: RETURN  \l  (r7 I:android.support.v7.util.MessageThreadUtil$SyncQueueItem)\l \l}"];
MethodNode[shape=record,label="{static android.support.v7.util.MessageThreadUtil$SyncQueueItem android.support.v7.util.MessageThreadUtil.SyncQueueItem.obtainMessage((r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

