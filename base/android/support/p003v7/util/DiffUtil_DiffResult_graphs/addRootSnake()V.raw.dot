digraph "CFG forandroid.support.v7.util.DiffUtil.DiffResult.addRootSnake()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<android.support.v7.util.DiffUtil$Snake\>) = (r3 I:android.support.v7.util.DiffUtil$DiffResult) android.support.v7.util.DiffUtil.DiffResult.mSnakes java.util.List \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.List\<android.support.v7.util.DiffUtil$Snake\>) = (r3 I:android.support.v7.util.DiffUtil$DiffResult) android.support.v7.util.DiffUtil.DiffResult.mSnakes java.util.List \l0x000d: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r0 I:android.support.v7.util.DiffUtil$Snake) = (android.support.v7.util.DiffUtil$Snake) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r2 I:int) = (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IGET  (r0 I:int) = (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:android.support.v7.util.DiffUtil$Snake) =  android.support.v7.util.DiffUtil$Snake \l0x001f: INVOKE  (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.\<init\>():void type: DIRECT \l0x0022: IPUT  (r1 I:int), (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.x int \l0x0024: IPUT  (r1 I:int), (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.y int \l0x0026: IPUT  \l  (r1 I:boolean)\l  (r0 I:android.support.v7.util.DiffUtil$Snake)\l android.support.v7.util.DiffUtil.Snake.removal boolean \l0x0028: IPUT  (r1 I:int), (r0 I:android.support.v7.util.DiffUtil$Snake) android.support.v7.util.DiffUtil.Snake.size int \l0x002a: IPUT  \l  (r1 I:boolean)\l  (r0 I:android.support.v7.util.DiffUtil$Snake)\l android.support.v7.util.DiffUtil.Snake.reverse boolean \l0x002c: IGET  (r2 I:java.util.List\<android.support.v7.util.DiffUtil$Snake\>) = (r3 I:android.support.v7.util.DiffUtil$DiffResult) android.support.v7.util.DiffUtil.DiffResult.mSnakes java.util.List \l0x002e: INVOKE  (r2 I:java.util.List), (r1 I:int), (r0 I:java.lang.Object) java.util.List.add(int, java.lang.Object):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v7.util.DiffUtil.DiffResult.addRootSnake((r3 'this' I:android.support.v7.util.DiffUtil$DiffResult A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
}

