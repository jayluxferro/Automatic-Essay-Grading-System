digraph "CFG forandroid.support.v7.util.DiffUtil.1.compare(Landroid\/support\/v7\/util\/DiffUtil$Snake;Landroid\/support\/v7\/util\/DiffUtil$Snake;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = \l  (r4 I:android.support.v7.util.DiffUtil$Snake A[D('o1' android.support.v7.util.DiffUtil$Snake)])\l android.support.v7.util.DiffUtil.Snake.x int \l0x0002: IGET  (r2 I:int) = \l  (r5 I:android.support.v7.util.DiffUtil$Snake A[D('o2' android.support.v7.util.DiffUtil$Snake)])\l android.support.v7.util.DiffUtil.Snake.x int \l0x0004: ARITH  (r0 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cmpX' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r1 I:int) = \l  (r4 I:android.support.v7.util.DiffUtil$Snake A[D('o1' android.support.v7.util.DiffUtil$Snake)])\l android.support.v7.util.DiffUtil.Snake.y int \l0x000a: IGET  (r2 I:int) = \l  (r5 I:android.support.v7.util.DiffUtil$Snake A[D('o2' android.support.v7.util.DiffUtil$Snake)])\l android.support.v7.util.DiffUtil.Snake.y int \l0x000c: ARITH  (r0 I:int A[D('cmpX' int)]) = (r1 I:int) \- (r2 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r0 I:int A[D('cmpX' int)]) \l}"];
MethodNode[shape=record,label="{public int android.support.v7.util.DiffUtil.1.compare((r3 'this' I:android.support.v7.util.DiffUtil$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.v7.util.DiffUtil$Snake A[D('o1' android.support.v7.util.DiffUtil$Snake), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.support.v7.util.DiffUtil$Snake A[D('o2' android.support.v7.util.DiffUtil$Snake), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0006\-0x000e: r0 'cmpX' int\l  ?\-0x000e: r4 'o1' android.support.v7.util.DiffUtil$Snake\l  ?\-0x000e: r5 'o2' android.support.v7.util.DiffUtil$Snake\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

