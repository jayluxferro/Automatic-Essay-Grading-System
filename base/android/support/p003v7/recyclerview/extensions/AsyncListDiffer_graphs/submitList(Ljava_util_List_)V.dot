digraph "CFG forandroid.support.v7.recyclerview.extensions.AsyncListDiffer.submitList(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r4.mMaxScheduledGeneration + 1\lr4.mMaxScheduledGeneration = r0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r5 != r4.mList) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r5 != null) goto L_0x0023\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|int r5 = r4.mList.size()\lr4.mList = null\lr4.mReadOnlyList = java.util.Collections.emptyList()\lr4.mUpdateCallback.onRemoved(0, r5)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023}"];
Node_8 [shape=record,label="{8\:\ 0x0025|if (r4.mList != null) goto L_0x0039\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|r4.mList = r5\lr4.mReadOnlyList = java.util.Collections.unmodifiableList(r5)\lr4.mUpdateCallback.onInserted(0, r5.size())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|java.util.List\<T\> r1 = r4.mList\lr4.mConfig.getBackgroundThreadExecutor().execute(new android.support.p003v7.recyclerview.extensions.AsyncListDiffer.C04341(r4))\l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v7.recyclerview.extensions.AsyncListDiffer.submitList((r4v0 'this' android.support.v7.recyclerview.extensions.AsyncListDiffer A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.List\<T\> A[DONT_INLINE, IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

