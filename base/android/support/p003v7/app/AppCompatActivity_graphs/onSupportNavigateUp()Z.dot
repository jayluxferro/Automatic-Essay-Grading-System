digraph "CFG forandroid.support.v7.app.AppCompatActivity.onSupportNavigateUp()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.content.Intent r0 = getSupportParentActivityIntent()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == null) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (supportShouldUpRecreateTask(r0) == false) goto L_0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|android.support.v4.app.TaskStackBuilder r0 = android.support.p000v4.app.TaskStackBuilder.create(r2)\lonCreateSupportNavigateUpTaskStack(r0)\lonPrepareSupportNavigateUpTaskStack(r0)\lr0.startActivities()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|SYNTHETIC\lSplitter:B:5:0x0019\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ IllegalStateException \-\> 0x001d \}\lSplitter:B:5:0x0019\l|android.support.p000v4.app.ActivityCompat.finishAffinity(r2)     \/\/ Catch:\{ IllegalStateException \-\> 0x001d \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|finish()\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: IllegalStateException (unused java.lang.IllegalStateException)\lSplitter:B:5:0x0019\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|supportNavigateUpTo(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.app.AppCompatActivity.onSupportNavigateUp((r2v0 'this' android.support.v7.app.AppCompatActivity A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_6 -> Node_13;
Node_7 -> Node_12;
Node_8 -> Node_7;
Node_9 -> Node_11;
}

