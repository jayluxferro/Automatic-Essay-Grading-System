digraph "CFG forandroid.support.v7.app.TwilightCalculator.calculateTwilight(JDD)V" {
subgraph cluster_Region_1559644537 {
label = "R(2:0|(1:2)(1:(1:6)(2:8|(1:13)(1:12))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r16\lfloat float r4 = ((float) (r17 \- UTC_2000)) \/ 8.64E7f\lfloat float r5 = (0.01720197f * r4) + 6.24006f\ldouble double r6 = (double) r5\ldouble double r8 = (java.lang.Math.sin(r6) * 0.03341960161924362d) + r6 + (java.lang.Math.sin((double) (2.0f * r5)) * 3.4906598739326E\-4d) + (java.lang.Math.sin((double) (r5 * 3.0f)) * 5.236000106378924E\-6d) + 1.796593063d + 3.141592653589793d\ldouble double r10 = (\-r21) \/ 360.0d\ldouble double r4 = ((double) (((float) java.lang.Math.round(((double) (r4 \- f37J0)) \- r10)) + f37J0)) + r10 + (java.lang.Math.sin(r6) * 0.0053d) + (java.lang.Math.sin(2.0d * r8) * \-0.0069d)\ldouble double r6 = java.lang.Math.asin(java.lang.Math.sin(r8) * java.lang.Math.sin(0.4092797040939331d))\ldouble double r8 = 0.01745329238474369d * r19\ldouble double r10 = (java.lang.Math.sin(\-0.10471975803375244d) \- (java.lang.Math.sin(r8) * java.lang.Math.sin(r6))) \/ (java.lang.Math.cos(r8) * java.lang.Math.cos(r6))\l}"];
subgraph cluster_IfRegion_719940965 {
label = "IF [B:1:0x00c5] THEN: R(1:2) ELSE: R(1:(1:6)(2:8|(1:13)(1:12)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x00c5|if (r10 \>= 1.0d) goto L_0x00c7\l}"];
subgraph cluster_Region_781059122 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x00c7|r0.state = 1\lr0.sunset = \-1\lr0.sunrise = \-1\l}"];
}
subgraph cluster_Region_173903364 {
label = "R(1:(1:6)(2:8|(1:13)(1:12))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1574524635 {
label = "IF [B:5:0x00d3] THEN: R(1:6) ELSE: R(2:8|(1:13)(1:12)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x00d3|if (r10 \<= \-1.0d) goto L_0x00d5\l}"];
subgraph cluster_Region_1368638134 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x00d5|r0.state = 0\lr0.sunset = \-1\lr0.sunrise = \-1\l}"];
}
subgraph cluster_Region_1192861043 {
label = "R(2:8|(1:13)(1:12))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x00dc|double double r7 = (double) ((float) (java.lang.Math.acos(r10) \/ 6.283185307179586d))\lr0.sunset = java.lang.Math.round((r4 + r7) * 8.64E7d) + UTC_2000\lr0.sunrise = java.lang.Math.round((r4 \- r7) * 8.64E7d) + UTC_2000\l}"];
subgraph cluster_IfRegion_1520856264 {
label = "IF [B:9:0x0106, B:11:0x010c] THEN: R(1:13) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0106|if (r0.sunrise \>= r17) goto L_0x0111\l}"];
Node_11 [shape=record,label="{11\:\ 0x010c|ADDED_TO_REGION\l|if (r0.sunset \<= r17) goto L_0x0111\l}"];
subgraph cluster_Region_72830010 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0111|r0.state = 1\l}"];
}
subgraph cluster_Region_1654447898 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x010e|r0.state = 0\l}"];
}
}
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x00cd}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x00ce}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x00db}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0108}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v7.app.TwilightCalculator.calculateTwilight((r16v0 'this' android.support.v7.app.TwilightCalculator A[IMMUTABLE_TYPE, THIS]), (r17v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_12 -> Node_15;
Node_4 -> Node_5;
Node_10 -> Node_11;
}

