digraph "CFG forandroid.support.v7.app.AlertController.RecycleListView.setHasDecor(ZZ)V" {
subgraph cluster_Region_2131265068 {
label = "R(1:(1:(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_1786896429 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_529330618 {
label = "IF [B:0:0x0000, B:1:0x0002] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == false) goto L_0x0004\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r3 == false) goto L_0x0004\l}"];
subgraph cluster_Region_1007746616 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001e|PHI: r4 \l  PHI: (r4v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|setPadding(getPaddingLeft(), r3 ? getPaddingTop() : r2.mPaddingTopNoTitle, getPaddingRight(), r4 ? getPaddingBottom() : r2.mPaddingBottomNoButtons)\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000f}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011|PHI: r3 \l  PHI: (r3v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0015}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001c}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v7.app.AlertController.RecycleListView.setHasDecor((r2v0 'this' android.support.v7.app.AlertController$RecycleListView A[IMMUTABLE_TYPE, THIS]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_1 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

