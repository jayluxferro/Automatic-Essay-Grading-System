digraph "CFG forandroid.support.v7.app.AlertDialog.resolveDialogTheme(Landroid\/content\/Context;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r3 I:int) \>\>\> (24 int) \l0x0002: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: NEW_INSTANCE  (r3 I:android.util.TypedValue) =  android.util.TypedValue \l0x000a: INVOKE  (r3 I:android.util.TypedValue) android.util.TypedValue.\<init\>():void type: DIRECT \l0x000d: INVOKE  (r2 I:android.content.res.Resources$Theme) = (r2 I:android.content.Context) android.content.Context.getTheme():android.content.res.Resources$Theme type: VIRTUAL \l0x0011: SGET  (r0 I:int) =  android.support.v7.appcompat.R.attr.alertDialogTheme int \l0x0013: INVOKE  \l  (r2 I:android.content.res.Resources$Theme)\l  (r0 I:int)\l  (r3 I:android.util.TypedValue)\l  (r1 I:boolean)\l android.content.res.Resources.Theme.resolveAttribute(int, android.util.TypedValue, boolean):boolean type: VIRTUAL \l0x0016: IGET  (r2 I:int) = (r3 I:android.util.TypedValue) android.util.TypedValue.resourceId int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{static int android.support.v7.app.AlertDialog.resolveDialogTheme((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.StyleRes, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

