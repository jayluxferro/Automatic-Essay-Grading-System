digraph "CFG forandroid.support.v7.app.WindowDecorActionBar.onKeyShortcut(ILandroid\/view\/KeyEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.mActionMode != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|android.view.Menu r0 = r4.mActionMode.getMenu()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r0 == null) goto L_0x002b\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r6 == null) goto L_0x0015\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|int r2 = r6.getDeviceId()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|r2 = \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|PHI: r2 \l  PHI: (r2v0 int) = (r2v3 int), (r2v4 int) binds: [B:7:0x0015, B:6:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|r3 = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|if (android.view.KeyCharacterMap.load(r2).getKeyboardType() == 1) goto L_0x0022\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|r3 = false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|PHI: r3 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:9:0x001f, B:10:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|r0.setQwertyMode(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|RETURN\l|return r0.performShortcut(r5, r6, 0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean android.support.v7.app.WindowDecorActionBar.onKeyShortcut((r4v0 'this' android.support.v7.app.WindowDecorActionBar A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.KeyEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
}

