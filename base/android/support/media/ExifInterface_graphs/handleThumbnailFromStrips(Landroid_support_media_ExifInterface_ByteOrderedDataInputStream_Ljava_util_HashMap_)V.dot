digraph "CFG forandroid.support.media.ExifInterface.handleThumbnailFromStrips(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;Ljava\/util\/HashMap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.media.ExifInterface$ExifAttribute r0 = (android.support.media.ExifInterface.ExifAttribute) r12.get(TAG_STRIP_OFFSETS)\landroid.support.media.ExifInterface$ExifAttribute r12 = (android.support.media.ExifInterface.ExifAttribute) r12.get(TAG_STRIP_BYTE_COUNTS)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r0 == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|if (r12 == null) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|long[] r0 = convertToLongArray(android.support.media.ExifInterface.ExifAttribute.access$500(r0, r10.mExifByteOrder))\llong[] r12 = convertToLongArray(android.support.media.ExifInterface.ExifAttribute.access$500(r12, r10.mExifByteOrder))\l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|if (r0 != null) goto L_0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|android.util.Log.w(TAG, \"stripOffsets should not be null.\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|if (r12 != null) goto L_0x003c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|android.util.Log.w(TAG, \"stripByteCounts should not be null.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|int r3 = r12.length\lr5 = 0\lr1 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|LOOP_START\lPHI: r1 r5 \l  PHI: (r1v5 int) = (r1v4 int), (r1v8 int) binds: [B:10:0x003c, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 long) = (r5v0 long), (r5v5 long) binds: [B:10:0x003c, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0042\-\>B:12:0x0044\l|if (r1 \>= r3) goto L_0x004a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|LOOP_END\lLOOP:0: B:11:0x0042\-\>B:12:0x0044\l|long r5 = r5 + r12[r1]\lint r1 = r1 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|byte[] r1 = new byte[((int) r5)]\lr2 = 0\lr3 = 0\lr5 = 0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|LOOP_START\lPHI: r2 r3 r5 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:13:0x004a, B:19:0x0063] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 int) = (r3v1 int), (r3v4 int) binds: [B:13:0x004a, B:19:0x0063] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 int) = (r5v2 int), (r5v4 int) binds: [B:13:0x004a, B:19:0x0063] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:14:0x0050\-\>B:19:0x0063\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|if (r2 \>= r0.length) goto L_0x0077\l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|int r7 = (int) r12[r2]\lint r6 = ((int) r0[r2]) \- r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|if (r6 \>= 0) goto L_0x0063\l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|android.util.Log.d(TAG, \"Invalid strip offset value\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|LOOP_END\lLOOP:1: B:14:0x0050\-\>B:19:0x0063\l|r11.seek((long) r6)\lint r3 = r3 + r6\lbyte[] r6 = new byte[r7]\lr11.read(r6)\lint r3 = r3 + r7\ljava.lang.System.arraycopy(r6, 0, r1, r5, r6.length)\lint r5 = r5 + r6.length\lint r2 = r2 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0077|r10.mHasThumbnail = true\lr10.mThumbnailBytes = r1\lr10.mThumbnailLength = r1.length\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0077|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0063|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0063|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.handleThumbnailFromStrips((r10v0 'this' android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r11v0 android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.util.HashMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_27;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_23;
Node_19 -> Node_14;
Node_20 -> Node_25;
Node_21 -> Node_13;
Node_22 -> Node_20;
Node_23 -> Node_19;
Node_24 -> Node_19;
}

