digraph "CFG forandroid.support.media.ExifInterface.getMimeType(Ljava\/io\/BufferedInputStream;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (5000(0x1388, float:7.006E\-42) ?[int, float, short, byte, char])\l \l0x0002: INVOKE  (r2 I:java.io.BufferedInputStream), (r0 I:int) java.io.BufferedInputStream.mark(int):void type: VIRTUAL \l0x0005: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0007: INVOKE  (r2 I:java.io.BufferedInputStream), (r0 I:byte[]) java.io.BufferedInputStream.read(byte[]):int type: VIRTUAL \l0x000a: INVOKE  (r2 I:java.io.BufferedInputStream) java.io.BufferedInputStream.reset():void type: VIRTUAL \l0x000d: INVOKE  (r2 I:boolean) = (r0 I:byte[]) android.support.media.ExifInterface.isJpegFormat(byte[]):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: INVOKE  (r2 I:boolean) = (r1 I:android.support.media.ExifInterface), (r0 I:byte[]) android.support.media.ExifInterface.isRafFormat(byte[]):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r2 I:boolean) = (r1 I:android.support.media.ExifInterface), (r0 I:byte[]) android.support.media.ExifInterface.isOrfFormat(byte[]):boolean type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: RETURN  (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: INVOKE  (r2 I:boolean) = (r1 I:android.support.media.ExifInterface), (r0 I:byte[]) android.support.media.ExifInterface.isRw2Format(byte[]):boolean type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002f \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: RETURN  (r2 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.media.ExifInterface.getMimeType((r1 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.BufferedInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

