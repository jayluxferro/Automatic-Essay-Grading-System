digraph "CFG forandroid.support.media.ExifInterface.getRotationDegrees()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"Orientation\" \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:int) = \l  (r2 I:android.support.media.ExifInterface)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l android.support.media.ExifInterface.getAttributeInt(java.lang.String, int):int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[3, 4, 5, 6, 7, 8] t:[0x0012, 0x0012, 0x000f, 0x000c, 0x000c, 0x000f] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (270(0x10e, float:3.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (180(0xb4, float:2.52E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.media.ExifInterface.getRotationDegrees((r2 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

