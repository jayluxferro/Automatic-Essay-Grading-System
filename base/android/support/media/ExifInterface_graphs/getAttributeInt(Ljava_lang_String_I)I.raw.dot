digraph "CFG forandroid.support.media.ExifInterface.getAttributeInt(Ljava\/lang\/String;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:android.support.media.ExifInterface$ExifAttribute) = \l  (r1 I:android.support.media.ExifInterface)\l  (r2 I:java.lang.String)\l android.support.media.ExifInterface.getExifAttribute(java.lang.String):android.support.media.ExifInterface$ExifAttribute type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|SYNTHETIC\lSplitter:B:3:0x0007\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0007\l|0x0007: IGET  (r0 I:java.nio.ByteOrder) = (r1 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder A[Catch:\{ NumberFormatException \-\> 0x000e \}, TRY_ENTER]\l0x0009: INVOKE  (r2 I:int) = \l  (r2 I:android.support.media.ExifInterface$ExifAttribute)\l  (r0 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.getIntValue(java.nio.ByteOrder):int type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x000e \}]\l0x000c: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: RETURN  (r3 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:3:0x0007\l}"];
MethodNode[shape=record,label="{public int android.support.media.ExifInterface.getAttributeInt((r1 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_7 -> Node_6;
}

