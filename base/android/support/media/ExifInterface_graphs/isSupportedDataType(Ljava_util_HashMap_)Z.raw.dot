digraph "CFG forandroid.support.media.ExifInterface.isSupportedDataType(Ljava\/util\/HashMap;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"BitsPerSample\" \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.HashMap), (r0 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r1 I:java.nio.ByteOrder) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x000c: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.access$500(android.support.media.ExifInterface$ExifAttribute, java.nio.ByteOrder):java.lang.Object type: STATIC \l0x0010: CHECK_CAST  (r0 I:int[]) = (int[]) (r0 I:?[OBJECT, ARRAY]) \l0x0012: SGET  (r1 I:int[]) =  android.support.media.ExifInterface.BITS_PER_SAMPLE_RGB int[] \l0x0014: INVOKE  (r1 I:boolean) = (r1 I:int[]), (r0 I:int[]) java.util.Arrays.equals(int[], int[]):boolean type: STATIC \l0x0018: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN  (r2 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IGET  (r1 I:int) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x001e: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: CONST_STR  (r1 I:java.lang.String) =  \"PhotometricInterpretation\" \l0x0023: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0027: CHECK_CAST  (r5 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IGET  (r1 I:java.nio.ByteOrder) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x002d: INVOKE  (r5 I:int) = \l  (r5 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.getIntValue(java.nio.ByteOrder):int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: SGET  (r1 I:int[]) =  android.support.media.ExifInterface.BITS_PER_SAMPLE_GREYSCALE_2 int[] \l0x0035: INVOKE  (r1 I:boolean) = (r0 I:int[]), (r1 I:int[]) java.util.Arrays.equals(int[], int[]):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0046 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: SGET  (r5 I:int[]) =  android.support.media.ExifInterface.BITS_PER_SAMPLE_RGB int[] \l0x0040: INVOKE  (r5 I:boolean) = (r0 I:int[]), (r5 I:int[]) java.util.Arrays.equals(int[], int[]):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: RETURN  (r2 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.media.ExifInterface.isSupportedDataType((r4 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.HashMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
}

