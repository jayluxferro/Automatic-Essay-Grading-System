digraph "CFG forandroid.support.media.ExifInterface.retrieveJpegImageSize(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0002: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"ImageLength\" \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r0 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r1 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x000e: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"ImageWidth\" \l0x0012: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.HashMap), (r2 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0016: CHECK_CAST  (r1 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0033 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IGET  (r0 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x001e: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0020: CONST_STR  (r1 I:java.lang.String) =  \"JPEGInterchangeFormat\" \l0x0022: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0026: CHECK_CAST  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IGET  (r1 I:java.nio.ByteOrder) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x002c: INVOKE  (r0 I:int) = \l  (r0 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.getIntValue(java.nio.ByteOrder):int type: VIRTUAL \l0x0030: INVOKE  \l  (r3 I:android.support.media.ExifInterface)\l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l  (r5 I:int)\l android.support.media.ExifInterface.getJpegAttributes(android.support.media.ExifInterface$ByteOrderedDataInputStream, int, int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.retrieveJpegImageSize((r3 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

