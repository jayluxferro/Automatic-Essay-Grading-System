digraph "CFG forandroid.support.media.ExifInterface.handleThumbnailFromStrips(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;Ljava\/util\/HashMap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"StripOffsets\" \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r12 I:java.util.HashMap), (r0 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r0 I:?[OBJECT, ARRAY]) \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"StripByteCounts\" \l0x000a: INVOKE  (r12 I:java.lang.Object) = (r12 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000e: CHECK_CAST  (r12 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x007f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x007f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r1 I:java.nio.ByteOrder) = (r10 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0016: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.access$500(android.support.media.ExifInterface$ExifAttribute, java.nio.ByteOrder):java.lang.Object type: STATIC \l0x001a: INVOKE  (r0 I:long[]) = (r0 I:java.lang.Object) android.support.media.ExifInterface.convertToLongArray(java.lang.Object):long[] type: STATIC \l0x001e: IGET  (r1 I:java.nio.ByteOrder) = (r10 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0020: INVOKE  (r12 I:java.lang.Object) = \l  (r12 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.access$500(android.support.media.ExifInterface$ExifAttribute, java.nio.ByteOrder):java.lang.Object type: STATIC \l0x0024: INVOKE  (r12 I:long[]) = (r12 I:java.lang.Object) android.support.media.ExifInterface.convertToLongArray(java.lang.Object):long[] type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: CONST_STR  (r11 I:java.lang.String) =  \"ExifInterface\" \l0x002c: CONST_STR  (r12 I:java.lang.String) =  \"stripOffsets should not be null.\" \l0x002e: INVOKE  (r11 I:java.lang.String), (r12 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: CONST_STR  (r11 I:java.lang.String) =  \"ExifInterface\" \l0x0036: CONST_STR  (r12 I:java.lang.String) =  \"stripByteCounts should not be null.\" \l0x0038: INVOKE  (r11 I:java.lang.String), (r12 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x003e: ARRAY_LENGTH  (r3 I:int) = (r12 I:?[]) \l0x003f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: MOVE  (r5 I:?[long, double]) = (r1 I:?[long, double]) \l0x0041: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:13:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: AGET  (r7 I:?[long, double]) = (r12 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x0046: ARITH  (r5 I:long) = (r5 I:long) + (r7 I:long) \l0x0047: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: CAST  (r1 I:int) = (int) (r5 I:long) \l0x004b: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x004d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: ARRAY_LENGTH  (r6 I:int) = (r0 I:?[]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r2 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:20:0x0077 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: AGET  (r6 I:?[long, double]) = (r0 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0055: CAST  (r6 I:int) = (int) (r6 I:long) \l0x0056: AGET  (r7 I:?[long, double]) = (r12 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0058: CAST  (r7 I:int) = (int) (r7 I:long) \l0x0059: ARITH  (r6 I:int) = (r6 I:int) \- (r3 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:19:0x0063 \l}"];
Node_18 [shape=record,label="{18\:\ 0x005c|0x005c: CONST_STR  (r8 I:java.lang.String) =  \"ExifInterface\" \l0x005e: CONST_STR  (r9 I:java.lang.String) =  \"Invalid strip offset value\" \l0x0060: INVOKE  (r8 I:java.lang.String), (r9 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|0x0063: CAST  (r8 I:long) = (long) (r6 I:int) \l0x0064: INVOKE  \l  (r11 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r8 I:long)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.seek(long):void type: VIRTUAL \l0x0067: ARITH  (r3 I:int) = (r3 I:int) + (r6 I:int) \l0x0068: NEW_ARRAY  (r6 I:byte[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x006a: INVOKE  \l  (r11 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r6 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.read(byte[]):int type: VIRTUAL \l0x006d: ARITH  (r3 I:int) = (r3 I:int) + (r7 I:int) \l0x006e: ARRAY_LENGTH  (r7 I:int) = (r6 I:?[]) \l0x006f: INVOKE  \l  (r6 I:java.lang.Object)\l  (r4 I:int)\l  (r1 I:java.lang.Object)\l  (r5 I:int)\l  (r7 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0072: ARRAY_LENGTH  (r6 I:int) = (r6 I:?[]) \l0x0073: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x0074: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0077|0x0077: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0078: IPUT  \l  (r11 I:boolean)\l  (r10 I:android.support.media.ExifInterface)\l android.support.media.ExifInterface.mHasThumbnail boolean \l0x007a: IPUT  (r1 I:byte[]), (r10 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mThumbnailBytes byte[] \l0x007c: ARRAY_LENGTH  (r11 I:int) = (r1 I:?[]) \l0x007d: IPUT  (r11 I:int), (r10 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mThumbnailLength int \l}"];
Node_21 [shape=record,label="{21\:\ 0x007f|0x007f: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.handleThumbnailFromStrips((r10 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r11 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.HashMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_14;
Node_20 -> Node_21;
}

