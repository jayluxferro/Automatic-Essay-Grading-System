digraph "CFG forandroid.support.media.ExifInterface.validateImages(Ljava\/io\/InputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r6 I:android.support.media.ExifInterface)\l  (r7 I:int)\l  (r0 I:int)\l android.support.media.ExifInterface.swapBasedOnImageSize(int, int):void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0006: INVOKE  \l  (r6 I:android.support.media.ExifInterface)\l  (r7 I:int)\l  (r1 I:int)\l android.support.media.ExifInterface.swapBasedOnImageSize(int, int):void type: DIRECT \l0x0009: INVOKE  \l  (r6 I:android.support.media.ExifInterface)\l  (r0 I:int)\l  (r1 I:int)\l android.support.media.ExifInterface.swapBasedOnImageSize(int, int):void type: DIRECT \l0x000c: IGET  (r2 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x000e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0011: CONST_STR  (r4 I:java.lang.String) =  \"PixelXDimension\" \l0x0013: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.HashMap), (r4 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0017: CHECK_CAST  (r2 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r2 I:?[OBJECT, ARRAY]) \l0x0019: IGET  (r4 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x001b: AGET  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x001d: CONST_STR  (r4 I:java.lang.String) =  \"PixelYDimension\" \l0x001f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.HashMap), (r4 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0023: CHECK_CAST  (r3 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x003b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: IGET  (r4 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x002b: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"ImageWidth\" \l0x002f: INVOKE  \l  (r4 I:java.util.HashMap)\l  (r5 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0032: IGET  (r2 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0034: AGET  (r7 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0036: CONST_STR  (r2 I:java.lang.String) =  \"ImageLength\" \l0x0038: INVOKE  \l  (r7 I:java.util.HashMap)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: IGET  (r7 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x003d: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x003f: INVOKE  (r7 I:boolean) = (r7 I:java.util.HashMap) java.util.HashMap.isEmpty():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0060 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|0x0045: IGET  (r7 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0047: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0049: INVOKE  (r7 I:boolean) = \l  (r6 I:android.support.media.ExifInterface)\l  (r7 I:java.util.HashMap)\l android.support.media.ExifInterface.isThumbnail(java.util.HashMap):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0060 \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: IGET  (r7 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0051: IGET  (r2 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0053: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0055: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0057: IGET  (r7 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0059: NEW_INSTANCE  (r2 I:java.util.HashMap) =  java.util.HashMap \l0x005b: INVOKE  (r2 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x005e: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0060|0x0060: IGET  (r7 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0062: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0064: INVOKE  (r7 I:boolean) = \l  (r6 I:android.support.media.ExifInterface)\l  (r7 I:java.util.HashMap)\l android.support.media.ExifInterface.isThumbnail(java.util.HashMap):boolean type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0068|0x0068: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0071 \l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|0x006a: CONST_STR  (r7 I:java.lang.String) =  \"ExifInterface\" \l0x006c: CONST_STR  (r0 I:java.lang.String) =  \"No image meets the size requirements of a thumbnail image.\" \l0x006e: INVOKE  (r7 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0071|0x0071: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.validateImages((r6 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

