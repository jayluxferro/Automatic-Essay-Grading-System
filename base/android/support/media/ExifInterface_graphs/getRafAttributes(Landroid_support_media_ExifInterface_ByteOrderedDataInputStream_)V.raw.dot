digraph "CFG forandroid.support.media.ExifInterface.getRafAttributes(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (84 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.skipBytes(int):int type: VIRTUAL \l0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0006: NEW_ARRAY  (r1 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0008: NEW_ARRAY  (r2 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000a: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r1 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.read(byte[]):int type: VIRTUAL \l0x000d: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.skipBytes(int):int type: VIRTUAL \l0x0010: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r2 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.read(byte[]):int type: VIRTUAL \l0x0013: INVOKE  (r0 I:java.nio.ByteBuffer) = (r1 I:byte[]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x0017: INVOKE  (r0 I:int) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.getInt():int type: VIRTUAL \l0x001b: INVOKE  (r1 I:java.nio.ByteBuffer) = (r2 I:byte[]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x001f: INVOKE  (r1 I:int) = (r1 I:java.nio.ByteBuffer) java.nio.ByteBuffer.getInt():int type: VIRTUAL \l0x0023: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0024: INVOKE  \l  (r6 I:android.support.media.ExifInterface)\l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l  (r2 I:int)\l android.support.media.ExifInterface.getJpegAttributes(android.support.media.ExifInterface$ByteOrderedDataInputStream, int, int):void type: DIRECT \l0x0027: CAST  (r0 I:long) = (long) (r1 I:int) \l0x0028: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:long)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.seek(long):void type: VIRTUAL \l0x002b: SGET  (r0 I:java.nio.ByteOrder) =  java.nio.ByteOrder.BIG_ENDIAN java.nio.ByteOrder \l0x002d: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.setByteOrder(java.nio.ByteOrder):void type: VIRTUAL \l0x0030: INVOKE  (r0 I:int) = \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readInt():int type: VIRTUAL \l0x0034: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0036|0x0036: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0073 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0038|0x0038: INVOKE  (r3 I:int) = \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readUnsignedShort():int type: VIRTUAL \l0x003c: INVOKE  (r4 I:int) = \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readUnsignedShort():int type: VIRTUAL \l0x0040: SGET  (r5 I:android.support.media.ExifInterface$ExifTag) =  android.support.media.ExifInterface.TAG_RAF_IMAGE_SIZE android.support.media.ExifInterface$ExifTag \l0x0042: IGET  (r5 I:int) = (r5 I:android.support.media.ExifInterface$ExifTag) android.support.media.ExifInterface.ExifTag.number int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0044|0x0044: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x006d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0046|0x0046: INVOKE  (r0 I:short) = \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readShort():short type: VIRTUAL \l0x004a: INVOKE  (r7 I:short) = \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readShort():short type: VIRTUAL \l0x004e: IGET  (r2 I:java.nio.ByteOrder) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0050: INVOKE  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (r0 I:int), (r2 I:java.nio.ByteOrder) android.support.media.ExifInterface.ExifAttribute.createUShort(int, java.nio.ByteOrder):android.support.media.ExifInterface$ExifAttribute type: STATIC \l0x0054: IGET  (r2 I:java.nio.ByteOrder) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0056: INVOKE  (r7 I:android.support.media.ExifInterface$ExifAttribute) = (r7 I:int), (r2 I:java.nio.ByteOrder) android.support.media.ExifInterface.ExifAttribute.createUShort(int, java.nio.ByteOrder):android.support.media.ExifInterface$ExifAttribute type: STATIC \l0x005a: IGET  (r2 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x005c: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x005e: CONST_STR  (r3 I:java.lang.String) =  \"ImageLength\" \l0x0060: INVOKE  \l  (r2 I:java.util.HashMap)\l  (r3 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0063: IGET  (r0 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r6 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0065: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0067: CONST_STR  (r1 I:java.lang.String) =  \"ImageWidth\" \l0x0069: INVOKE  \l  (r0 I:java.util.HashMap)\l  (r1 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x006c|0x006c: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x006d|0x006d: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r4 I:int)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.skipBytes(int):int type: VIRTUAL \l0x0070: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0073|0x0073: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.getRafAttributes((r6 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r7 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
}

