digraph "CFG forandroid.support.media.ExifInterface.isRw2Format([B)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream) =  android.support.media.ExifInterface$ByteOrderedDataInputStream \l0x0002: INVOKE  \l  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r2 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.\<init\>(byte[]):void type: DIRECT \l0x0005: INVOKE  (r2 I:java.nio.ByteOrder) = \l  (r1 I:android.support.media.ExifInterface)\l  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.readByteOrder(android.support.media.ExifInterface$ByteOrderedDataInputStream):java.nio.ByteOrder type: DIRECT \l0x0009: IPUT  \l  (r2 I:java.nio.ByteOrder)\l  (r1 I:android.support.media.ExifInterface)\l android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x000b: IGET  (r2 I:java.nio.ByteOrder) = (r1 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x000d: INVOKE  \l  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r2 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.setByteOrder(java.nio.ByteOrder):void type: VIRTUAL \l0x0010: INVOKE  (r2 I:short) = \l  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readShort():short type: VIRTUAL \l0x0014: INVOKE  \l  (r0 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.close():void type: VIRTUAL \l0x0017: CONST  (r0 I:?[int, float, short, byte, char]) = (85 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.media.ExifInterface.isRw2Format((r1 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r2 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

