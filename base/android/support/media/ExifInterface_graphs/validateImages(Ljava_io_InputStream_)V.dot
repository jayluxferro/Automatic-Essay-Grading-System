digraph "CFG forandroid.support.media.ExifInterface.validateImages(Ljava\/io\/InputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|swapBasedOnImageSize(0, 5)\lswapBasedOnImageSize(0, 4)\lswapBasedOnImageSize(5, 4)\landroid.support.media.ExifInterface$ExifAttribute r2 = r6.mAttributes[1].get(TAG_PIXEL_X_DIMENSION)\landroid.support.media.ExifInterface$ExifAttribute r3 = r6.mAttributes[1].get(TAG_PIXEL_Y_DIMENSION)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|if (r2 == null) goto L_0x003b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|if (r3 == null) goto L_0x003b\l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|r6.mAttributes[0].put(TAG_IMAGE_WIDTH, r2)\lr6.mAttributes[0].put(TAG_IMAGE_LENGTH, r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x003b}"];
Node_5 [shape=record,label="{5\:\ 0x0043|if (r6.mAttributes[4].isEmpty() == false) goto L_0x0060\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045}"];
Node_7 [shape=record,label="{7\:\ 0x004d|if (isThumbnail(r6.mAttributes[5]) == false) goto L_0x0060\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|r6.mAttributes[4] = r6.mAttributes[5]\lr6.mAttributes[5] = new java.util.HashMap\<\>()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0060}"];
Node_10 [shape=record,label="{10\:\ 0x0068|if (isThumbnail(r6.mAttributes[4]) != false) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|android.util.Log.d(TAG, \"No image meets the size requirements of a thumbnail image.\")\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.validateImages((r6v0 'this' android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r7v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
}

