digraph "CFG forandroid.support.media.ExifInterface.getRawAttributes(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.available():int type: VIRTUAL \l0x0004: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.parseTiffHeaders(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.readImageFileDirectory(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x000b: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.updateImageSizeValues(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x000e: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x000f: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.updateImageSizeValues(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x0012: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0013: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.updateImageSizeValues(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x0016: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r5 I:java.io.InputStream)\l android.support.media.ExifInterface.validateImages(java.io.InputStream):void type: DIRECT \l0x0019: IGET  (r5 I:int) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x001b: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x005b \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: IGET  (r5 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0021: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0022: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"MakerNote\" \l0x0026: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x002a: CHECK_CAST  (r5 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x005b \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: NEW_INSTANCE  (r1 I:android.support.media.ExifInterface$ByteOrderedDataInputStream) =  android.support.media.ExifInterface$ByteOrderedDataInputStream \l0x0030: IGET  (r5 I:byte[]) = (r5 I:android.support.media.ExifInterface$ExifAttribute) android.support.media.ExifInterface.ExifAttribute.bytes byte[] \l0x0032: INVOKE  \l  (r1 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r5 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.\<init\>(byte[]):void type: DIRECT \l0x0035: IGET  (r5 I:java.nio.ByteOrder) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0037: INVOKE  \l  (r1 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r5 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.setByteOrder(java.nio.ByteOrder):void type: VIRTUAL \l0x003a: CONST  (r2 I:?[long, double]) = (6 ?[long, double]) \l0x003c: INVOKE  \l  (r1 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r2 I:long)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.seek(long):void type: VIRTUAL \l0x003f: CONST  (r5 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0041: INVOKE  \l  (r4 I:android.support.media.ExifInterface)\l  (r1 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r5 I:int)\l android.support.media.ExifInterface.readImageFileDirectory(android.support.media.ExifInterface$ByteOrderedDataInputStream, int):void type: DIRECT \l0x0044: IGET  (r1 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0046: AGET  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0048: CONST_STR  (r1 I:java.lang.String) =  \"ColorSpace\" \l0x004a: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x004e: CHECK_CAST  (r5 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0050|0x0050: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x005b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0052|0x0052: IGET  (r1 I:java.util.HashMap\<java.lang.String, android.support.media.ExifInterface$ExifAttribute\>[]) = (r4 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAttributes java.util.HashMap[] \l0x0054: AGET  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0056: CONST_STR  (r1 I:java.lang.String) =  \"ColorSpace\" \l0x0058: INVOKE  \l  (r0 I:java.util.HashMap)\l  (r1 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x005b|0x005b: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.getRawAttributes((r4 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r5 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

