digraph "CFG forandroid.support.media.ExifInterface.getLatLong()[D" {
subgraph cluster_Region_1975757242 {
label = "R(2:0|(2:(1:15)|(1:(2:7|8))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = getAttribute(TAG_GPS_LATITUDE)\ljava.lang.String java.lang.String r1 = getAttribute(TAG_GPS_LATITUDE_REF)\ljava.lang.String java.lang.String r2 = getAttribute(TAG_GPS_LONGITUDE)\ljava.lang.String java.lang.String r3 = getAttribute(TAG_GPS_LONGITUDE_REF)\l}"];
subgraph cluster_Region_2094488714 {
label = "R(2:(1:15)|(1:(2:7|8)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_426033554 {
label = "IF [B:1:0x0018, B:2:0x001a, B:3:0x001c, B:4:0x001e] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0018|if (r0 == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|ADDED_TO_REGION\l|if (r1 == null) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|ADDED_TO_REGION\l|if (r2 == null) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|ADDED_TO_REGION\l|if (r3 == null) goto L_?\l}"];
subgraph cluster_Region_746042567 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1395805037 {
label = "R(1:(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_601028786 {
label = "Try: R(2:7|8) catches: R(2:9|11)";
node [shape=record,color=blue];
subgraph cluster_Region_81419099 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0032 \}\lSplitter:B:6:0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|RETURN\l|return new double[]\{convertRationalLatLonToDouble(r0, r1), convertRationalLatLonToDouble(r2, r3)\}\l}"];
}
subgraph cluster_Region_489304242 {
label = "R(2:9|11) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0032|android.util.Log.w(TAG, \"Latitude\/longitude values are not parseable. \" + java.lang.String.format(\"latValue=%s, latRef=%s, lngValue=%s, lngRef=%s\", new java.lang.Object[]\{r0, r1, r2, r3\}))\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
}
}
}
}
}
subgraph cluster_Region_489304242 {
label = "R(2:9|11) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0032|android.util.Log.w(TAG, \"Latitude\/longitude values are not parseable. \" + java.lang.String.format(\"latValue=%s, latRef=%s, lngValue=%s, lngRef=%s\", new java.lang.Object[]\{r0, r1, r2, r3\}))\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0020}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0023|SYNTHETIC\lSplitter:B:6:0x0023\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:6:0x0023\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return null\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return null\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return null\l}"];
MethodNode[shape=record,label="{public double[] android.support.media.ExifInterface.getLatLong((r12v0 'this' android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_9 -> Node_11;
Node_9 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_10 -> Node_9;
}

