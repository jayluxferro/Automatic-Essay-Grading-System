digraph "CFG forandroid.support.media.ExifInterface.getDateTime()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"DateTime\" \l0x0002: INVOKE  (r0 I:java.lang.String) = \l  (r9 I:android.support.media.ExifInterface)\l  (r0 I:java.lang.String)\l android.support.media.ExifInterface.getAttribute(java.lang.String):java.lang.String type: VIRTUAL \l0x0006: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0044 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SGET  (r3 I:java.util.regex.Pattern) =  android.support.media.ExifInterface.sNonZeroTimePattern java.util.regex.Pattern \l0x000c: INVOKE  (r3 I:java.util.regex.Matcher) = \l  (r3 I:java.util.regex.Pattern)\l  (r0 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0010: INVOKE  (r3 I:boolean) = (r3 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: NEW_INSTANCE  (r3 I:java.text.ParsePosition) =  java.text.ParsePosition \l0x0019: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: INVOKE  (r3 I:java.text.ParsePosition), (r4 I:int) java.text.ParsePosition.\<init\>(int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|SYNTHETIC\lSplitter:B:6:0x001d\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x001d\l|0x001d: SGET  (r4 I:java.text.SimpleDateFormat) =  android.support.media.ExifInterface.sFormatter java.text.SimpleDateFormat A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}, TRY_ENTER]\l0x001f: INVOKE  (r0 I:java.util.Date) = \l  (r4 I:java.text.SimpleDateFormat)\l  (r0 I:java.lang.String)\l  (r3 I:java.text.ParsePosition)\l java.text.SimpleDateFormat.parse(java.lang.String, java.text.ParsePosition):java.util.Date type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: RETURN  (r1 I:long) A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: INVOKE  (r3 I:long) = (r0 I:java.util.Date) java.util.Date.getTime():long type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l0x002a: CONST_STR  (r0 I:java.lang.String) =  \"SubSecTime\" A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l0x002c: INVOKE  (r0 I:java.lang.String) = \l  (r9 I:android.support.media.ExifInterface)\l  (r0 I:java.lang.String)\l android.support.media.ExifInterface.getAttribute(java.lang.String):java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0043 \}]\l0x002f: NOP   A[TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|SYNTHETIC\lSplitter:B:12:0x0032\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0032\l|0x0032: INVOKE  (r5 I:long) = (r0 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0042 \}, TRY_ENTER]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CONST  (r7 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) A[Catch:\{ NumberFormatException \-\> 0x0042 \}]\l0x0038: CMP_L  (r0 I:int) = (r5 I:long), (r7 I:long) A[Catch:\{ NumberFormatException \-\> 0x0042 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x0040 A[Catch:\{ NumberFormatException \-\> 0x0042 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: CONST  (r7 I:?[long, double]) = (10 ?[long, double]) A[Catch:\{ NumberFormatException \-\> 0x0042 \}]\l0x003e: ARITH  (r5 I:long) = (r5 I:long) \/ (r7 I:long) A[Catch:\{ NumberFormatException \-\> 0x0042 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: ARITH  (r3 I:long) = (r3 I:long) + (r5 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: RETURN  (r3 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:12:0x0032\l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: RETURN  (r1 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:6:0x001d\l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|0x0044: RETURN  (r1 I:long) \l}"];
MethodNode[shape=record,label="{public long android.support.media.ExifInterface.getDateTime((r9 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_23[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_22;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_14;
Node_18 -> Node_19;
Node_20 -> Node_19;
Node_22 -> Node_21;
}

