digraph "CFG forandroid.support.media.ExifInterface.parseTiffHeaders(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.nio.ByteOrder) = \l  (r3 I:android.support.media.ExifInterface)\l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.readByteOrder(android.support.media.ExifInterface$ByteOrderedDataInputStream):java.nio.ByteOrder type: DIRECT \l0x0004: IPUT  \l  (r0 I:java.nio.ByteOrder)\l  (r3 I:android.support.media.ExifInterface)\l android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0006: IGET  (r0 I:java.nio.ByteOrder) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0008: INVOKE  \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.setByteOrder(java.nio.ByteOrder):void type: VIRTUAL \l0x000b: INVOKE  (r0 I:int) = \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readUnsignedShort():int type: VIRTUAL \l0x000f: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, short, byte, char]) = (42 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x0021: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0023: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"Invalid start code: \" \l0x0028: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002b: INVOKE  (r0 I:java.lang.String) = (r0 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x002f: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r4 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: INVOKE  (r0 I:int) = \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readInt():int type: VIRTUAL \l0x003e: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:20:0x0067 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:20:0x0067 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: ARITH  (r0 I:int) = (r0 I:int) + (\-8 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:19:0x0066 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: INVOKE  (r4 I:int) = \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:int)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.skipBytes(int):int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004f \l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|0x004f: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x0051: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0053: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0056: CONST_STR  (r1 I:java.lang.String) =  \"Couldn't jump to first Ifd: \" \l0x0058: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x005e: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0062: INVOKE  (r4 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0065|0x0065: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x0067|0x0067: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x0069: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006b: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006e: CONST_STR  (r1 I:java.lang.String) =  \"Invalid first Ifd offset: \" \l0x0070: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0076: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007a: INVOKE  (r4 I:java.io.IOException), (r5 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x007d|0x007d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.parseTiffHeaders((r3 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_20;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_20 -> Node_21;
}

