digraph "CFG forandroid.support.media.ExifInterface.handleThumbnailFromJfif(Landroid\/support\/media\/ExifInterface$ByteOrderedDataInputStream;Ljava\/util\/HashMap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"JPEGInterchangeFormat\" \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.HashMap), (r0 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r0 I:?[OBJECT, ARRAY]) \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"JPEGInterchangeFormatLength\" \l0x000a: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000e: CHECK_CAST  (r5 I:android.support.media.ExifInterface$ExifAttribute) = (android.support.media.ExifInterface$ExifAttribute) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r1 I:java.nio.ByteOrder) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x0016: INVOKE  (r0 I:int) = \l  (r0 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.getIntValue(java.nio.ByteOrder):int type: VIRTUAL \l0x001a: IGET  (r1 I:java.nio.ByteOrder) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifByteOrder java.nio.ByteOrder \l0x001c: INVOKE  (r5 I:int) = \l  (r5 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:java.nio.ByteOrder)\l android.support.media.ExifInterface.ExifAttribute.getIntValue(java.nio.ByteOrder):int type: VIRTUAL \l0x0020: INVOKE  (r1 I:int) = \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.available():int type: VIRTUAL \l0x0024: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x0025: INVOKE  (r5 I:int) = (r5 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0029: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x002b: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x0030: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x0036: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mMimeType int \l0x003d: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0047 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mOrfMakerNoteOffset int \l0x0042: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: IGET  (r1 I:int) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mExifOffset int \l0x0046: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004c: IPUT  (r1 I:boolean), (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mHasThumbnail boolean \l0x004e: IPUT  (r0 I:int), (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mThumbnailOffset int \l0x0050: IPUT  (r5 I:int), (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mThumbnailLength int \l0x0052: IGET  (r1 I:java.lang.String) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mFilename java.lang.String \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IGET  (r1 I:android.content.res.AssetManager$AssetInputStream) = (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mAssetInputStream android.content.res.AssetManager$AssetInputStream \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|0x005a: NEW_ARRAY  (r5 I:byte[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x005c: CAST  (r0 I:long) = (long) (r0 I:int) \l0x005d: INVOKE  \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r0 I:long)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.seek(long):void type: VIRTUAL \l0x0060: INVOKE  \l  (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r5 I:byte[])\l android.support.media.ExifInterface.ByteOrderedDataInputStream.readFully(byte[]):void type: VIRTUAL \l0x0063: IPUT  (r5 I:byte[]), (r3 I:android.support.media.ExifInterface) android.support.media.ExifInterface.mThumbnailBytes byte[] \l}"];
Node_21 [shape=record,label="{21\:\ 0x0065|0x0065: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.media.ExifInterface.handleThumbnailFromJfif((r3 'this' I:android.support.media.ExifInterface A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.HashMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_13[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
}

