digraph "CFG forandroid.support.media.ExifInterface.ByteOrderedDataOutputStream.writeShort(S)V" {
subgraph cluster_Region_810051221 {
label = "R(1:(1:2)(1:(1:5)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1380299346 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: R(1:(1:5)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.mByteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) goto L_0x0006\l}"];
subgraph cluster_Region_330211252 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|r2.mOutputStream.write((r3 \>\>\> 0) & 255)\lr2.mOutputStream.write((r3 \>\>\> 8) & 255)\l}"];
}
subgraph cluster_Region_1285965511 {
label = "R(1:(1:5)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1068100872 {
label = "IF [B:4:0x001d] THEN: R(1:5) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|if (r2.mByteOrder == java.nio.ByteOrder.BIG_ENDIAN) goto L_0x001f\l}"];
subgraph cluster_Region_1073811341 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|r2.mOutputStream.write((r3 \>\>\> 8) & 255)\lr2.mOutputStream.write((r3 \>\>\> 0) & 255)\l}"];
}
subgraph cluster_Region_657816326 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0019}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.media.ExifInterface.ByteOrderedDataOutputStream.writeShort((r2v0 'this' android.support.media.ExifInterface$ByteOrderedDataOutputStream A[IMMUTABLE_TYPE, THIS]), (r3v0 short A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

