digraph "CFG forandroid.support.media.ExifInterface.ByteOrderedDataOutputStream.writeShort(S)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.nio.ByteOrder) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mByteOrder java.nio.ByteOrder \l0x0002: SGET  (r1 I:java.nio.ByteOrder) =  java.nio.ByteOrder.LITTLE_ENDIAN java.nio.ByteOrder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.io.OutputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mOutputStream java.io.OutputStream \l0x0008: ARITH  (r1 I:int) = (r3 I:int) \>\>\> (0 int) \l0x000a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000c: INVOKE  (r0 I:java.io.OutputStream), (r1 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l0x000f: IGET  (r0 I:java.io.OutputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mOutputStream java.io.OutputStream \l0x0011: ARITH  (r3 I:int) = (r3 I:int) \>\>\> (8 int) \l0x0013: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0015: INVOKE  (r0 I:java.io.OutputStream), (r3 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IGET  (r0 I:java.nio.ByteOrder) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mByteOrder java.nio.ByteOrder \l0x001b: SGET  (r1 I:java.nio.ByteOrder) =  java.nio.ByteOrder.BIG_ENDIAN java.nio.ByteOrder \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r0 I:java.io.OutputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mOutputStream java.io.OutputStream \l0x0021: ARITH  (r1 I:int) = (r3 I:int) \>\>\> (8 int) \l0x0023: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0025: INVOKE  (r0 I:java.io.OutputStream), (r1 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l0x0028: IGET  (r0 I:java.io.OutputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataOutputStream)\l android.support.media.ExifInterface.ByteOrderedDataOutputStream.mOutputStream java.io.OutputStream \l0x002a: ARITH  (r3 I:int) = (r3 I:int) \>\>\> (0 int) \l0x002c: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x002e: INVOKE  (r0 I:java.io.OutputStream), (r3 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.media.ExifInterface.ByteOrderedDataOutputStream.writeShort((r2 'this' I:android.support.media.ExifInterface$ByteOrderedDataOutputStream A[IMMUTABLE_TYPE, THIS]), (r3 I:short A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

