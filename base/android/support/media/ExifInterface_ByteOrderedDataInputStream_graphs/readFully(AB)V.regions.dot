digraph "CFG forandroid.support.media.ExifInterface.ByteOrderedDataInputStream.readFully([B)V" {
subgraph cluster_Region_256915378 {
label = "R(2:0|(1:8)(1:(1:6)(0)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.mPosition += r4.length\l}"];
subgraph cluster_IfRegion_828857025 {
label = "IF [B:1:0x000a] THEN: R(1:8) ELSE: R(1:(1:6)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r3.mPosition \> r3.mLength) goto L_0x0020\l}"];
subgraph cluster_Region_735417103 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0025|throw new java.io.EOFException()\l}"];
}
subgraph cluster_Region_1657461704 {
label = "R(1:(1:6)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1823055236 {
label = "IF [B:3:0x0015] THEN: R(1:6) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r3.mDataInputStream.read(r4, 0, r4.length) != r4.length) goto L_0x0018\l}"];
subgraph cluster_Region_1729323906 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001f|throw new java.io.IOException(\"Couldn't read up to the length of buffer\")\l}"];
}
subgraph cluster_Region_1616501124 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0017}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0020}"];
MethodNode[shape=record,label="{public void android.support.media.ExifInterface.ByteOrderedDataInputStream.readFully((r3v0 'this' android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, THIS]), (r4v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

