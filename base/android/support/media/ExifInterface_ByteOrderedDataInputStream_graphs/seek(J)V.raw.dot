digraph "CFG forandroid.support.media.ExifInterface.ByteOrderedDataInputStream.seek(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mPosition int \l0x0002: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0003: CMP_L  (r0 I:int) = (r0 I:long), (r3 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: IPUT  \l  (r0 I:int)\l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mPosition int \l0x000a: IGET  (r0 I:java.io.DataInputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mDataInputStream java.io.DataInputStream \l0x000c: INVOKE  (r0 I:java.io.DataInputStream) java.io.DataInputStream.reset():void type: VIRTUAL \l0x000f: IGET  (r0 I:java.io.DataInputStream) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mDataInputStream java.io.DataInputStream \l0x0011: IGET  (r1 I:int) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mLength int \l0x0013: INVOKE  (r0 I:java.io.DataInputStream), (r1 I:int) java.io.DataInputStream.mark(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IGET  (r0 I:int) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.mPosition int \l0x0019: CAST  (r0 I:long) = (long) (r0 I:int) \l0x001a: ARITH  (r3 I:long) = (r3 I:long) \- (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: CAST  (r3 I:int) = (int) (r3 I:long) \l0x001c: INVOKE  (r4 I:int) = \l  (r2 I:android.support.media.ExifInterface$ByteOrderedDataInputStream)\l  (r3 I:int)\l android.support.media.ExifInterface.ByteOrderedDataInputStream.skipBytes(int):int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: NEW_INSTANCE  (r3 I:java.io.IOException) =  java.io.IOException \l0x0025: CONST_STR  (r4 I:java.lang.String) =  \"Couldn't seek up to the byteCount\" \l0x0027: INVOKE  (r3 I:java.io.IOException), (r4 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.media.ExifInterface.ByteOrderedDataInputStream.seek((r2 'this' I:android.support.media.ExifInterface$ByteOrderedDataInputStream A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
}

