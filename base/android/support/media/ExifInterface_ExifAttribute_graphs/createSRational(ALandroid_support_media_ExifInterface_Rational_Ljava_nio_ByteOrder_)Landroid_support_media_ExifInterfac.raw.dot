digraph "CFG forandroid.support.media.ExifInterface.ExifAttribute.createSRational([Landroid\/support\/media\/ExifInterface$Rational;Ljava\/nio\/ByteOrder;)Landroid\/support\/media\/ExifInterface$ExifAttribute;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  android.support.media.ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT int[] \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0004: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0006: ARRAY_LENGTH  (r2 I:int) = (r6 I:?[]) \l0x0007: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x0009: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000b: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:byte[]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x000f: INVOKE  (r0 I:java.nio.ByteBuffer), (r7 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x0012: ARRAY_LENGTH  (r7 I:int) = (r6 I:?[]) \l0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r2 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:3:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0018: IGET  (r4 I:long) = (r3 I:android.support.media.ExifInterface$Rational) android.support.media.ExifInterface.Rational.numerator long \l0x001a: CAST  (r4 I:int) = (int) (r4 I:long) \l0x001b: INVOKE  (r0 I:java.nio.ByteBuffer), (r4 I:int) java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x001e: IGET  (r3 I:long) = (r3 I:android.support.media.ExifInterface$Rational) android.support.media.ExifInterface.Rational.denominator long \l0x0020: CAST  (r3 I:int) = (int) (r3 I:long) \l0x0021: INVOKE  (r0 I:java.nio.ByteBuffer), (r3 I:int) java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x0024: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: NEW_INSTANCE  (r7 I:android.support.media.ExifInterface$ExifAttribute) =  android.support.media.ExifInterface$ExifAttribute \l0x0029: ARRAY_LENGTH  (r6 I:int) = (r6 I:?[]) \l0x002a: INVOKE  (r0 I:byte[]) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l0x002e: INVOKE  \l  (r7 I:android.support.media.ExifInterface$ExifAttribute)\l  (r1 I:int)\l  (r6 I:int)\l  (r0 I:byte[])\l android.support.media.ExifInterface.ExifAttribute.\<init\>(int, int, byte[]):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: RETURN  (r7 I:android.support.media.ExifInterface$ExifAttribute) \l}"];
MethodNode[shape=record,label="{public static android.support.media.ExifInterface$ExifAttribute android.support.media.ExifInterface.ExifAttribute.createSRational((r6 I:android.support.media.ExifInterface$Rational[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.nio.ByteOrder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

