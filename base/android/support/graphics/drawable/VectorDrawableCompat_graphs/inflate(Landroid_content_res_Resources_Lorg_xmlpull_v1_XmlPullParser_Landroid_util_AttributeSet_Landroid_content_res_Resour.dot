digraph "CFG forandroid.support.graphics.drawable.VectorDrawableCompat.inflate(Landroid\/content\/res\/Resources;Lorg\/xmlpull\/v1\/XmlPullParser;Landroid\/util\/AttributeSet;Landroid\/content\/res\/Resources$Theme;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.mDelegateDrawable == null) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|android.support.p000v4.graphics.drawable.DrawableCompat.inflate(r2.mDelegateDrawable, r3, r4, r5, r6)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0 = r2.mVectorState\lr0.mVPathRenderer = new android.support.graphics.drawable.VectorDrawableCompat.VPathRenderer()\landroid.content.res.TypedArray r1 = android.support.p000v4.content.res.TypedArrayUtils.obtainAttributes(r3, r6, r5, android.support.graphics.drawable.AndroidResources.STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY)\lupdateStateFromTypedArray(r1, r4)\lr1.recycle()\lr0.mChangingConfigurations = getChangingConfigurations()\lr0.mCacheDirty = true\linflateInternal(r3, r4, r5, r6)\lr2.mTintFilter = updateTintFilter(r2.mTintFilter, r0.mTint, r0.mTintMode)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.graphics.drawable.VectorDrawableCompat.inflate((r2v0 'this' android.support.graphics.drawable.VectorDrawableCompat A[IMMUTABLE_TYPE, THIS]), (r3v0 android.content.res.Resources A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 android.util.AttributeSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.content.res.Resources$Theme A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

