digraph "CFG forandroid.support.graphics.drawable.VectorDrawableCompat.VPathRenderer.drawGroupTree(Landroid\/support\/graphics\/drawable\/VectorDrawableCompat$VGroup;Landroid\/graphics\/Matrix;Landroid\/graphics\/Canvas;IILandroid\/graphics\/ColorFilter;)V" {
subgraph cluster_Region_1943089447 {
label = "R(3:0|(3:3|(1:5)(1:(1:8)(0))|9)|10)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r10.mStackedMatrix.set(r11)\lr10.mStackedMatrix.preConcat(r10.mLocalMatrix)\lr12.save()\lint r11 = 0\l}"];
subgraph cluster_LoopRegion_1911890049 {
label = "LOOP:0: (3:3|(1:5)(1:(1:8)(0))|9)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|if (r11 \< r10.mChildren.size()) goto L_0x0018\l}"];
subgraph cluster_Region_988649178 {
label = "R(3:3|(1:5)(1:(1:8)(0))|9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|android.support.graphics.drawable.VectorDrawableCompat$VObject android.support.graphics.drawable.VectorDrawableCompat.VObject r0 = r10.mChildren.get(r11)\l}"];
subgraph cluster_IfRegion_4797142 {
label = "IF [B:4:0x0022] THEN: R(1:5) ELSE: R(1:(1:8)(0))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0022|if ((r0 instanceof android.support.graphics.drawable.VectorDrawableCompat.VGroup) == true) goto L_0x0024\l}"];
subgraph cluster_Region_2062250993 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0024|drawGroupTree((android.support.graphics.drawable.VectorDrawableCompat.VGroup) r0, r10.mStackedMatrix, r12, r13, r14, r15)\l}"];
}
subgraph cluster_Region_814513592 {
label = "R(1:(1:8)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_583181573 {
label = "IF [B:7:0x0034] THEN: R(1:8) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0034|if ((r0 instanceof android.support.graphics.drawable.VectorDrawableCompat.VPath) == true) goto L_0x0036\l}"];
subgraph cluster_Region_1959767233 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0036|drawPath(r10, (android.support.graphics.drawable.VectorDrawableCompat.VPath) r0, r12, r13, r14, r15)\l}"];
}
subgraph cluster_Region_2079213563 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_9 [shape=record,label="{9\:\ 0x0042|LOOP_END\lLOOP:0: B:1:0x0010\-\>B:9:0x0042\l|r11++\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0045|r12.restore()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0010|LOOP_START\lPHI: r11 \l  PHI: (r11v3 int) = (r11v2 int), (r11v4 int) binds: [B:0:0x0000, B:9:0x0042] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:9:0x0042\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0032}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0048}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0045|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0042|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0042|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.graphics.drawable.VectorDrawableCompat.VPathRenderer.drawGroupTree((r9v0 'this' android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, THIS]), (r10v0 android.support.graphics.drawable.VectorDrawableCompat$VGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 android.graphics.ColorFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_12[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_7 -> Node_8;
Node_7 -> Node_15[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_6 -> Node_7;
Node_12 -> Node_10;
Node_13 -> Node_9;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

