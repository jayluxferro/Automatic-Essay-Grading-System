digraph "CFG forandroid.support.graphics.drawable.VectorDrawableCompat.VPathRenderer.\<init\>(Landroid\/support\/graphics\/drawable\/VectorDrawableCompat$VPathRenderer;)V" {
subgraph cluster_Region_903720296 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.mFinalPathMatrix = new android.graphics.Matrix()\lr3.mBaseWidth = 0.0f\lr3.mBaseHeight = 0.0f\lr3.mViewportWidth = 0.0f\lr3.mViewportHeight = 0.0f\lr3.mRootAlpha = 255\lr3.mRootName = null\lr3.mIsStateful = null\lr3.mVGTargetsMap = new android.support.p000v4.util.ArrayMap\<\>()\lr3.mRootGroup = new android.support.graphics.drawable.VectorDrawableCompat.VGroup(r4.mRootGroup, r3.mVGTargetsMap)\lr3.mPath = new android.graphics.Path(r4.mPath)\lr3.mRenderPath = new android.graphics.Path(r4.mRenderPath)\lr3.mBaseWidth = r4.mBaseWidth\lr3.mBaseHeight = r4.mBaseHeight\lr3.mViewportWidth = r4.mViewportWidth\lr3.mViewportHeight = r4.mViewportHeight\lr3.mChangingConfigurations = r4.mChangingConfigurations\lr3.mRootAlpha = r4.mRootAlpha\lr3.mRootName = r4.mRootName\l}"];
subgraph cluster_IfRegion_1917271511 {
label = "IF [B:1:0x005e] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x005e|if (r4.mRootName != null) goto L_0x0060\l}"];
subgraph cluster_Region_1000844199 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0060|r3.mVGTargetsMap.put(r4.mRootName, r3)\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0067|r3.mIsStateful = r4.mIsStateful\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x006b}"];
MethodNode[shape=record,label="{public void android.support.graphics.drawable.VectorDrawableCompat.VPathRenderer.\<init\>((r3v0 'this' android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, THIS]), (r4v0 android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

