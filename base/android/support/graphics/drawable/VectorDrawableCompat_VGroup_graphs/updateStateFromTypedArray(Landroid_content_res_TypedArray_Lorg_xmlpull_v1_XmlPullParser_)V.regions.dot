digraph "CFG forandroid.support.graphics.drawable.VectorDrawableCompat.VGroup.updateStateFromTypedArray(Landroid\/content\/res\/TypedArray;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
subgraph cluster_Region_1812505352 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.mThemeAttrs = null\lr3.mRotate = android.support.p000v4.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"rotation\", 5, r3.mRotate)\lr3.mPivotX = r4.getFloat(1, r3.mPivotX)\lr3.mPivotY = r4.getFloat(2, r3.mPivotY)\lr3.mScaleX = android.support.p000v4.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"scaleX\", 3, r3.mScaleX)\lr3.mScaleY = android.support.p000v4.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"scaleY\", 4, r3.mScaleY)\lr3.mTranslateX = android.support.p000v4.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"translateX\", 6, r3.mTranslateX)\lr3.mTranslateY = android.support.p000v4.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"translateY\", 7, r3.mTranslateY)\ljava.lang.String java.lang.String r4 = r4.getString(0)\l}"];
subgraph cluster_IfRegion_1958933053 {
label = "IF [B:1:0x0051] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0051|if (r4 != null) goto L_0x0053\l}"];
subgraph cluster_Region_1434804537 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0053|r3.mGroupName = r4\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0055|updateLocalMatrix()\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0058}"];
MethodNode[shape=record,label="{private void android.support.graphics.drawable.VectorDrawableCompat.VGroup.updateStateFromTypedArray((r3v0 'this' android.support.graphics.drawable.VectorDrawableCompat$VGroup A[IMMUTABLE_TYPE, THIS]), (r4v0 android.content.res.TypedArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

