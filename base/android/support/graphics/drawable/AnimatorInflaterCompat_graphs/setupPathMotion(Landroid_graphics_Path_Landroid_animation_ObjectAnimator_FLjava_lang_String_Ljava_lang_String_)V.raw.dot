digraph "CFG forandroid.support.graphics.drawable.AnimatorInflaterCompat.setupPathMotion(Landroid\/graphics\/Path;Landroid\/animation\/ObjectAnimator;FLjava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0008: NEW_INSTANCE  (r4 I:android.graphics.PathMeasure) =  android.graphics.PathMeasure \l0x000a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  \l  (r4 I:android.graphics.PathMeasure)\l  (r0 I:android.graphics.Path)\l  (r5 I:boolean)\l android.graphics.PathMeasure.\<init\>(android.graphics.Path, boolean):void type: DIRECT \l0x000e: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x0010: INVOKE  (r6 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0013: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: INVOKE  (r8 I:java.lang.Float) = (r7 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0018: INVOKE  (r6 I:java.util.ArrayList), (r8 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x001b: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: INVOKE  (r9 I:float) = (r4 I:android.graphics.PathMeasure) android.graphics.PathMeasure.getLength():float type: VIRTUAL \l0x0020: ARITH  (r8 I:float) = (r8 I:float) + (r9 I:float) \l0x0021: INVOKE  (r9 I:java.lang.Float) = (r8 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0025: INVOKE  (r6 I:java.util.ArrayList), (r9 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0028: INVOKE  (r9 I:boolean) = (r4 I:android.graphics.PathMeasure) android.graphics.PathMeasure.nextContour():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x002c|0x002c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x002e|0x002e: NEW_INSTANCE  (r4 I:android.graphics.PathMeasure) =  android.graphics.PathMeasure \l0x0030: INVOKE  \l  (r4 I:android.graphics.PathMeasure)\l  (r0 I:android.graphics.Path)\l  (r5 I:boolean)\l android.graphics.PathMeasure.\<init\>(android.graphics.Path, boolean):void type: DIRECT \l0x0033: CONST  (r0 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x0035: ARITH  (r9 I:float) = (r8 I:float) \/ (r19 I:float) \l0x0037: CAST  (r9 I:int) = (int) (r9 I:float) \l0x0038: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0039: ARITH  (r9 I:int) = (r9 I:int) + (r10 I:int) \l0x003a: INVOKE  (r0 I:int) = (r0 I:int), (r9 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x003e: NEW_ARRAY  (r9 I:float[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0040: NEW_ARRAY  (r11 I:float[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0042: CONST  (r12 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0043: NEW_ARRAY  (r13 I:float[]) = (r12 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0045: ARITH  (r14 I:int) = (r0 I:int) + (\-1 int) \l0x0047: CAST  (r14 I:float) = (float) (r14 I:int) \l0x0048: ARITH  (r8 I:float) = (r8 I:float) \/ (r14 I:float) \l0x0049: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004a: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x004c|0x004c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|0x004d: IF  (r7 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x0086 \l}"];
Node_6 [shape=record,label="{6\:\ 0x004f|0x004f: INVOKE  (r16 I:java.lang.Object) = (r6 I:java.util.ArrayList), (r15 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0053: CHECK_CAST  (r16 I:java.lang.Float) = (java.lang.Float) (r16 I:?[OBJECT, ARRAY]) \l0x0055: INVOKE  (r16 I:float) = (r16 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x0059: ARITH  (r10 I:float) = (r14 I:float) \- (r16 I:float) \l0x005b: INVOKE  \l  (r4 I:android.graphics.PathMeasure)\l  (r10 I:float)\l  (r13 I:float[])\l  (r12 I:float[])\l android.graphics.PathMeasure.getPosTan(float, float[], float[]):boolean type: VIRTUAL \l0x005e: AGET  (r10 I:?[int, float]) = (r13 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0060: APUT  \l  (r9 I:?[int, float][])\l  (r7 I:?[int, short, byte, char])\l  (r10 I:?[int, float])\l \l0x0062: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0063: AGET  (r12 I:?[int, float]) = (r13 I:?[int, float][]), (r10 I:?[int, short, byte, char]) \l0x0065: APUT  \l  (r11 I:?[int, float][])\l  (r7 I:?[int, short, byte, char])\l  (r12 I:?[int, float])\l \l0x0067: ARITH  (r14 I:float) = (r14 I:float) + (r8 I:float) \l0x0068: ARITH  (r10 I:int) = (r15 I:int) + (1 int) \l0x006a: INVOKE  (r12 I:int) = (r6 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x006e|0x006e: IF  (r10 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:11:0x0082 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0070|0x0070: INVOKE  (r12 I:java.lang.Object) = (r6 I:java.util.ArrayList), (r10 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0074: CHECK_CAST  (r12 I:java.lang.Float) = (java.lang.Float) (r12 I:?[OBJECT, ARRAY]) \l0x0076: INVOKE  (r12 I:float) = (r12 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x007a: CMP_L  (r12 I:int) = (r14 I:float), (r12 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x007c|0x007c: IF  (r12 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0082 \l}"];
Node_10 [shape=record,label="{10\:\ 0x007e|0x007e: INVOKE  (r4 I:android.graphics.PathMeasure) android.graphics.PathMeasure.nextContour():boolean type: VIRTUAL \l0x0081: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0082|0x0082: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x0084: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0086|0x0086: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x008d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0088|0x0088: INVOKE  (r0 I:android.animation.PropertyValuesHolder) = (r2 I:java.lang.String), (r9 I:float[]) android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float[]):android.animation.PropertyValuesHolder type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x008d|0x008d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x008e|0x008e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0094 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0090|0x0090: INVOKE  (r12 I:android.animation.PropertyValuesHolder) = (r3 I:java.lang.String), (r11 I:float[]) android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float[]):android.animation.PropertyValuesHolder type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0094|0x0094: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x009f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0096|0x0096: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0097: NEW_ARRAY  (r0 I:android.animation.PropertyValuesHolder[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: android.animation.PropertyValuesHolder[] \l0x0099: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l \l0x009b: INVOKE  \l  (r1 I:android.animation.ObjectAnimator)\l  (r0 I:android.animation.PropertyValuesHolder[])\l android.animation.ObjectAnimator.setValues(android.animation.PropertyValuesHolder[]):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x009f|0x009f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a0|0x00a0: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00aa \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a2|0x00a2: NEW_ARRAY  (r2 I:android.animation.PropertyValuesHolder[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: android.animation.PropertyValuesHolder[] \l0x00a4: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x00a6: INVOKE  \l  (r1 I:android.animation.ObjectAnimator)\l  (r2 I:android.animation.PropertyValuesHolder[])\l android.animation.ObjectAnimator.setValues(android.animation.PropertyValuesHolder[]):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00aa|0x00aa: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00ab: NEW_ARRAY  (r3 I:android.animation.PropertyValuesHolder[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: android.animation.PropertyValuesHolder[] \l0x00ad: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x00af: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l \l0x00b1: INVOKE  \l  (r1 I:android.animation.ObjectAnimator)\l  (r3 I:android.animation.PropertyValuesHolder[])\l android.animation.ObjectAnimator.setValues(android.animation.PropertyValuesHolder[]):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b4|0x00b4: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.graphics.drawable.AnimatorInflaterCompat.setupPathMotion((r17 I:android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:android.animation.ObjectAnimator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_1;
Node_2 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
}

