digraph "CFG forandroid.support.graphics.drawable.AnimatorInflaterCompat.inferValueTypeOfKeyframe(Landroid\/content\/res\/Resources;Landroid\/content\/res\/Resources$Theme;Landroid\/util\/AttributeSet;Lorg\/xmlpull\/v1\/XmlPullParser;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.content.res.TypedArray r1 = android.support.p000v4.content.res.TypedArrayUtils.obtainAttributes(r1, r2, r3, android.support.graphics.drawable.AndroidResources.STYLEABLE_KEYFRAME)\lr3 = 0\landroid.util.TypedValue r2 = android.support.p000v4.content.res.TypedArrayUtils.peekNamedValue(r1, r4, \"value\", 0)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r2 == null) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|r4 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|r4 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|PHI: r4 \l  PHI: (r4v1 boolean) = (r4v2 boolean), (r4v3 boolean) binds: [B:3:0x0011, B:2:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == false) goto L_0x001d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014}"];
Node_6 [shape=record,label="{6\:\ 0x001a|if (isColorType(r2.type) == false) goto L_0x001d\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r3 = 3\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|PHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v1 int), (r3v3 int) binds: [B:4:0x0012, B:6:0x001a, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|r1.recycle()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{private static int android.support.graphics.drawable.AnimatorInflaterCompat.inferValueTypeOfKeyframe((r1v0 android.content.res.Resources A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 android.content.res.Resources$Theme A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.util.AttributeSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

