digraph "CFG forandroid.support.design.internal.BottomNavigationMenuView.isShifting(II)Z" {
subgraph cluster_Region_1778283068 {
label = "R(1:(2:(1:3)|(1:(1:(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1935349750 {
label = "R(2:(1:3)|(1:(1:(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1845937154 {
label = "IF [B:1:0x0003] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4 == \-1) goto L_0x0005\l}"];
subgraph cluster_Region_2135986411 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return r5 \> 3\l}"];
}
}
subgraph cluster_Region_1696953007 {
label = "R(1:(1:(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1315581274 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_378852929 {
label = "IF [B:5:0x000a] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r4 != 0) goto L_?\l}"];
subgraph cluster_Region_1832442800 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008|SYNTHETIC\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{private boolean android.support.design.internal.BottomNavigationMenuView.isShifting((r3v0 'this' android.support.design.internal.BottomNavigationMenuView A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lRemoved duplicated region for block: B:4:0x0008 A[RETURN, SYNTHETIC]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_5 -> Node_4[style=dashed];
Node_5 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

