digraph "CFG forandroid.support.design.internal.BottomNavigationMenuView.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:int) = \l  (r4 I:android.support.design.internal.BottomNavigationMenuView)\l android.support.design.internal.BottomNavigationMenuView.getChildCount():int type: VIRTUAL \l0x0004: ARITH  (r8 I:int) = (r8 I:int) \- (r6 I:int) \l0x0005: ARITH  (r9 I:int) = (r9 I:int) \- (r7 I:int) \l0x0006: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r7 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r1 I:android.view.View) = \l  (r4 I:android.support.design.internal.BottomNavigationMenuView)\l  (r7 I:int)\l android.support.design.internal.BottomNavigationMenuView.getChildAt(int):android.view.View type: VIRTUAL \l0x000f: INVOKE  (r2 I:int) = (r1 I:android.view.View) android.view.View.getVisibility():int type: VIRTUAL \l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: INVOKE  (r2 I:int) = (r4 I:android.view.View) android.support.v4.view.ViewCompat.getLayoutDirection(android.view.View):int type: STATIC \l0x001c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: ARITH  (r2 I:int) = (r8 I:int) \- (r0 I:int) \l0x0021: INVOKE  (r3 I:int) = (r1 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0025: ARITH  (r3 I:int) = (r2 I:int) \- (r3 I:int) \l0x0027: INVOKE  \l  (r1 I:android.view.View)\l  (r3 I:int)\l  (r6 I:int)\l  (r2 I:int)\l  (r9 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  (r2 I:int) = (r1 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x002f: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0030: INVOKE  \l  (r1 I:android.view.View)\l  (r0 I:int)\l  (r6 I:int)\l  (r2 I:int)\l  (r9 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: INVOKE  (r1 I:int) = (r1 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0037: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.design.internal.BottomNavigationMenuView.onLayout((r4 'this' I:android.support.design.internal.BottomNavigationMenuView A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

