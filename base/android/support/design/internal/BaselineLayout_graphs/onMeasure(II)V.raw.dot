digraph "CFG forandroid.support.design.internal.BaselineLayout.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r11 I:android.support.design.internal.BaselineLayout) android.support.design.internal.BaselineLayout.getChildCount():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0008: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r8 I:android.view.View) = \l  (r11 I:android.support.design.internal.BaselineLayout)\l  (r2 I:int)\l android.support.design.internal.BaselineLayout.getChildAt(int):android.view.View type: VIRTUAL \l0x0011: INVOKE  (r9 I:int) = (r8 I:android.view.View) android.view.View.getVisibility():int type: VIRTUAL \l0x0015: CONST  (r10 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  \l  (r11 I:android.support.design.internal.BaselineLayout)\l  (r8 I:android.view.View)\l  (r12 I:int)\l  (r13 I:int)\l android.support.design.internal.BaselineLayout.measureChild(android.view.View, int, int):void type: VIRTUAL \l0x001d: INVOKE  (r9 I:int) = (r8 I:android.view.View) android.view.View.getBaseline():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0030 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r3 I:int) = (r3 I:int), (r9 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0027: INVOKE  (r10 I:int) = (r8 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x002b: ARITH  (r10 I:int) = (r10 I:int) \- (r9 I:int) \l0x002c: INVOKE  (r4 I:int) = (r4 I:int), (r10 I:int) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: INVOKE  (r9 I:int) = (r8 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0034: INVOKE  (r6 I:int) = (r6 I:int), (r9 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0038: INVOKE  (r9 I:int) = (r8 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x003c: INVOKE  (r5 I:int) = (r5 I:int), (r9 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0040: INVOKE  (r8 I:int) = (r8 I:android.view.View) android.view.View.getMeasuredState():int type: VIRTUAL \l0x0044: INVOKE  (r7 I:int) = (r7 I:int), (r8 I:int) android.view.View.combineMeasuredStates(int, int):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x005c \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: INVOKE  (r0 I:int) = (r11 I:android.support.design.internal.BaselineLayout) android.support.design.internal.BaselineLayout.getPaddingBottom():int type: VIRTUAL \l0x0051: INVOKE  (r0 I:int) = (r4 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0055: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x0056: INVOKE  (r5 I:int) = (r5 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x005a: IPUT  \l  (r3 I:int)\l  (r11 I:android.support.design.internal.BaselineLayout)\l android.support.design.internal.BaselineLayout.baseline int \l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|0x005c: INVOKE  (r0 I:int) = (r11 I:android.support.design.internal.BaselineLayout) android.support.design.internal.BaselineLayout.getSuggestedMinimumHeight():int type: VIRTUAL \l0x0060: INVOKE  (r0 I:int) = (r5 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0064: INVOKE  (r1 I:int) = (r11 I:android.support.design.internal.BaselineLayout) android.support.design.internal.BaselineLayout.getSuggestedMinimumWidth():int type: VIRTUAL \l0x0068: INVOKE  (r1 I:int) = (r6 I:int), (r1 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x006c: INVOKE  (r12 I:int) = (r1 I:int), (r12 I:int), (r7 I:int) android.view.View.resolveSizeAndState(int, int, int):int type: STATIC \l0x0070: ARITH  (r1 I:int) = (r7 I:int) \<\< (16 int) \l0x0072: INVOKE  (r13 I:int) = (r0 I:int), (r13 I:int), (r1 I:int) android.view.View.resolveSizeAndState(int, int, int):int type: STATIC \l0x0076: INVOKE  \l  (r11 I:android.support.design.internal.BaselineLayout)\l  (r12 I:int)\l  (r13 I:int)\l android.support.design.internal.BaselineLayout.setMeasuredDimension(int, int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0079|0x0079: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.design.internal.BaselineLayout.onMeasure((r11 'this' I:android.support.design.internal.BaselineLayout A[IMMUTABLE_TYPE, THIS]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

