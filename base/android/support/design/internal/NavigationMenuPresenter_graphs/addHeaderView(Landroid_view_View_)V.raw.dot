digraph "CFG forandroid.support.design.internal.NavigationMenuPresenter.addHeaderView(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.widget.LinearLayout) = \l  (r2 I:android.support.design.internal.NavigationMenuPresenter)\l android.support.design.internal.NavigationMenuPresenter.headerLayout android.widget.LinearLayout \l0x0002: INVOKE  \l  (r0 I:android.widget.LinearLayout)\l  (r3 I:android.view.View)\l android.widget.LinearLayout.addView(android.view.View):void type: VIRTUAL \l0x0005: IGET  (r3 I:android.support.design.internal.NavigationMenuView) = \l  (r2 I:android.support.design.internal.NavigationMenuPresenter)\l android.support.design.internal.NavigationMenuPresenter.menuView android.support.design.internal.NavigationMenuView \l0x0007: IGET  (r0 I:android.support.design.internal.NavigationMenuView) = \l  (r2 I:android.support.design.internal.NavigationMenuPresenter)\l android.support.design.internal.NavigationMenuPresenter.menuView android.support.design.internal.NavigationMenuView \l0x0009: INVOKE  (r0 I:int) = (r0 I:android.support.design.internal.NavigationMenuView) android.support.design.internal.NavigationMenuView.getPaddingBottom():int type: VIRTUAL \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: INVOKE  \l  (r3 I:android.support.design.internal.NavigationMenuView)\l  (r1 I:int)\l  (r1 I:int)\l  (r1 I:int)\l  (r0 I:int)\l android.support.design.internal.NavigationMenuView.setPadding(int, int, int, int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.design.internal.NavigationMenuPresenter.addHeaderView((r2 'this' I:android.support.design.internal.NavigationMenuPresenter A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

