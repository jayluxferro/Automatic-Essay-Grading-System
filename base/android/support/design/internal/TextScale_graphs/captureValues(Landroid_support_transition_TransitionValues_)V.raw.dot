digraph "CFG forandroid.support.design.internal.TextScale.captureValues(Landroid\/support\/transition\/TransitionValues;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.view.View) = (r3 I:android.support.transition.TransitionValues) android.support.transition.TransitionValues.view android.view.View \l0x0002: INSTANCE_OF  (r0 I:boolean) = (r0 I:?[OBJECT, ARRAY]) android.widget.TextView \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.view.View) = (r3 I:android.support.transition.TransitionValues) android.support.transition.TransitionValues.view android.view.View \l0x0008: CHECK_CAST  (r0 I:android.widget.TextView) = (android.widget.TextView) (r0 I:?[OBJECT, ARRAY]) \l0x000a: IGET  (r3 I:java.util.Map\<java.lang.String, java.lang.Object\>) = (r3 I:android.support.transition.TransitionValues) android.support.transition.TransitionValues.values java.util.Map \l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"android:textscale:scale\" \l0x000e: INVOKE  (r0 I:float) = (r0 I:android.widget.TextView) android.widget.TextView.getScaleX():float type: VIRTUAL \l0x0012: INVOKE  (r0 I:java.lang.Float) = (r0 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0016: INVOKE  \l  (r3 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.design.internal.TextScale.captureValues((r2 'this' I:android.support.design.internal.TextScale A[IMMUTABLE_TYPE, THIS]), (r3 I:android.support.transition.TransitionValues A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

