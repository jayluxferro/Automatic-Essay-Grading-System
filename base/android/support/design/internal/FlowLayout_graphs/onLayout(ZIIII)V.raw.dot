digraph "CFG forandroid.support.design.internal.FlowLayout.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r9 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getChildCount():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r9 I:int) = (r8 I:android.view.View) android.support.v4.view.ViewCompat.getLayoutDirection(android.view.View):int type: STATIC \l0x000b: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: INVOKE  (r9 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getPaddingRight():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: INVOKE  (r9 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getPaddingLeft():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: INVOKE  (r0 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getPaddingLeft():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: INVOKE  (r0 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getPaddingRight():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: INVOKE  (r1 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getPaddingTop():int type: VIRTUAL \l0x002b: ARITH  (r12 I:int) = (r12 I:int) \- (r10 I:int) \l0x002c: ARITH  (r12 I:int) = (r12 I:int) \- (r0 I:int) \l0x002d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: INVOKE  (r3 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.getChildCount():int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: IF  (r10 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:33:0x0092 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: INVOKE  (r3 I:android.view.View) = \l  (r8 I:android.support.design.internal.FlowLayout)\l  (r10 I:int)\l android.support.design.internal.FlowLayout.getChildAt(int):android.view.View type: VIRTUAL \l0x003a: INVOKE  (r4 I:int) = (r3 I:android.view.View) android.view.View.getVisibility():int type: VIRTUAL \l0x003e: CONST  (r5 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|0x0040: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0043 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: INVOKE  (r4 I:android.view.ViewGroup$LayoutParams) = (r3 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x0047: INSTANCE_OF  (r5 I:boolean) = (r4 I:?[OBJECT, ARRAY]) android.view.ViewGroup$MarginLayoutParams \l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|0x0049: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0056 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: CHECK_CAST  (r4 I:android.view.ViewGroup$MarginLayoutParams) = (android.view.ViewGroup$MarginLayoutParams) (r4 I:?[OBJECT, ARRAY]) \l0x004d: INVOKE  (r5 I:int) = (r4 I:android.view.ViewGroup$MarginLayoutParams) android.support.v4.view.MarginLayoutParamsCompat.getMarginStart(android.view.ViewGroup$MarginLayoutParams):int type: STATIC \l0x0051: INVOKE  (r4 I:int) = (r4 I:android.view.ViewGroup$MarginLayoutParams) android.support.v4.view.MarginLayoutParamsCompat.getMarginEnd(android.view.ViewGroup$MarginLayoutParams):int type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0058|0x0058: ARITH  (r6 I:int) = (r0 I:int) + (r5 I:int) \l0x005a: INVOKE  (r7 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x005e: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x005f: IGET  (r7 I:boolean) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.singleLine boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|0x0061: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x006a \l}"];
Node_25 [shape=record,label="{25\:\ 0x0063|0x0063: IF  (r6 I:?[int, byte, short, char]) \<= (r12 I:?[int, byte, short, char])  \-\> B:27:0x006a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0065|0x0065: IGET  (r0 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.lineSpacing int \l0x0067: ARITH  (r2 I:int) = (r1 I:int) + (r0 I:int) \l0x0069: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x006a|0x006a: ARITH  (r1 I:int) = (r0 I:int) + (r5 I:int) \l0x006c: INVOKE  (r6 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0070: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int) \l0x0071: INVOKE  (r7 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x0075: ARITH  (r7 I:int) = (r7 I:int) + (r2 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0076|0x0076: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0081 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0078|0x0078: ARITH  (r1 I:int) = (r12 I:int) \- (r6 I:int) \l0x007a: ARITH  (r6 I:int) = (r12 I:int) \- (r0 I:int) \l0x007c: ARITH  (r6 I:int) = (r6 I:int) \- (r5 I:int) \l0x007d: INVOKE  \l  (r3 I:android.view.View)\l  (r1 I:int)\l  (r2 I:int)\l  (r6 I:int)\l  (r7 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0081|0x0081: INVOKE  \l  (r3 I:android.view.View)\l  (r1 I:int)\l  (r2 I:int)\l  (r6 I:int)\l  (r7 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0084|0x0084: ARITH  (r5 I:int) = (r5 I:int) + (r4 I:int) \l0x0085: INVOKE  (r1 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0089: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x008a: IGET  (r1 I:int) = (r8 I:android.support.design.internal.FlowLayout) android.support.design.internal.FlowLayout.itemSpacing int \l0x008c: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x008d: ARITH  (r0 I:int) = (r0 I:int) + (r5 I:int) \l0x008e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x008f|0x008f: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0092|0x0092: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.design.internal.FlowLayout.onLayout((r8 'this' I:android.support.design.internal.FlowLayout A[IMMUTABLE_TYPE, THIS]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_33;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_32[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_14;
}

