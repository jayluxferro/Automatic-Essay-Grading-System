digraph "CFG forandroid.support.design.widget.CoordinatorLayout.Behavior.onStartNestedScroll(Landroid\/support\/design\/widget\/CoordinatorLayout;Landroid\/view\/View;Landroid\/view\/View;Landroid\/view\/View;II)Z" {
subgraph cluster_Region_1845952553 {
label = "R(1:(2:(1:2)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_773892494 {
label = "R(2:(1:2)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_930987116 {
label = "IF [B:0:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r6 == 0) goto L_0x0002\l}"];
subgraph cluster_Region_1215083311 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return onStartNestedScroll(r1, r2, r3, r4, r5)\l}"];
}
}
subgraph cluster_Region_515695683 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|return false\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
MethodNode[shape=record,label="{public boolean android.support.design.widget.CoordinatorLayout.Behavior.onStartNestedScroll((r0v0 'this' android.support.design.widget.CoordinatorLayout$Behavior A[IMMUTABLE_TYPE, THIS]), (r1v0 android.support.design.widget.CoordinatorLayout A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 V A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/design\/widget\/CoordinatorLayout;, TV;, Landroid\/view\/View;, Landroid\/view\/View;, II)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3[style=dashed];
Node_1 -> Node_2;
}

