digraph "CFG forandroid.support.design.widget.CoordinatorLayout.getTopSortedChildren(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r5.clear()\lboolean r0 = isChildrenDrawingOrderEnabled()\lint r1 = getChildCount()\lint r2 = r1 + \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x0017\l|if (r2 \< 0) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r0 == false) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|int r3 = getChildDrawingOrder(r1, r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|r3 = r2\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|LOOP_END\lPHI: r3 \l  PHI: (r3v0 int) = (r3v2 int), (r3v3 int) binds: [B:10:0x0017, B:11:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x0017\l|r5.add(getChildAt(r3))\lint r2 = r2 + \-1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021}"];
Node_7 [shape=record,label="{7\:\ 0x0023|if (TOP_SORTED_CHILDREN_COMPARATOR == null) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|java.util.Collections.sort(r5, TOP_SORTED_CHILDREN_COMPARATOR)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.design.widget.CoordinatorLayout.getTopSortedChildren((r4v0 'this' android.support.design.widget.CoordinatorLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.List\<android.view.View\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Landroid\/view\/View;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_10;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_12;
Node_9 -> Node_6;
Node_10 -> Node_5;
Node_11 -> Node_5;
}

