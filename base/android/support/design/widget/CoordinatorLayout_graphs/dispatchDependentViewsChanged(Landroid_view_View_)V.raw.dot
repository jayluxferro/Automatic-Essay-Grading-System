digraph "CFG forandroid.support.design.widget.CoordinatorLayout.dispatchDependentViewsChanged(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v4.widget.DirectedAcyclicGraph\<android.view.View\>) = (r4 I:android.support.design.widget.CoordinatorLayout) android.support.design.widget.CoordinatorLayout.mChildDag android.support.v4.widget.DirectedAcyclicGraph \l0x0002: INVOKE  (r0 I:java.util.List) = \l  (r0 I:android.support.v4.widget.DirectedAcyclicGraph)\l  (r5 I:java.lang.Object)\l android.support.v4.widget.DirectedAcyclicGraph.getIncomingEdges(java.lang.Object):java.util.List type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r2 I:android.view.View) = (android.view.View) (r2 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r3 I:android.view.ViewGroup$LayoutParams) = (r2 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x001f: CHECK_CAST  (r3 I:android.support.design.widget.CoordinatorLayout$LayoutParams) = (android.support.design.widget.CoordinatorLayout$LayoutParams) (r3 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r3 I:android.support.design.widget.CoordinatorLayout$Behavior) = \l  (r3 I:android.support.design.widget.CoordinatorLayout$LayoutParams)\l android.support.design.widget.CoordinatorLayout.LayoutParams.getBehavior():android.support.design.widget.CoordinatorLayout$Behavior type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  \l  (r3 I:android.support.design.widget.CoordinatorLayout$Behavior)\l  (r4 I:android.support.design.widget.CoordinatorLayout)\l  (r2 I:android.view.View)\l  (r5 I:android.view.View)\l android.support.design.widget.CoordinatorLayout.Behavior.onDependentViewChanged(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.design.widget.CoordinatorLayout.dispatchDependentViewsChanged((r4 'this' I:android.support.design.widget.CoordinatorLayout A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_5;
}

