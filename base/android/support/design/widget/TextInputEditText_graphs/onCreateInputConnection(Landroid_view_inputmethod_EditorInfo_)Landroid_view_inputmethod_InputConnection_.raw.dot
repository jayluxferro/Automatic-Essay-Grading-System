digraph "CFG forandroid.support.design.widget.TextInputEditText.onCreateInputConnection(Landroid\/view\/inputmethod\/EditorInfo;)Landroid\/view\/inputmethod\/InputConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.view.inputmethod.InputConnection) = \l  (r2 I:android.support.v7.widget.AppCompatEditText)\l  (r3 I:android.view.inputmethod.EditorInfo)\l android.support.v7.widget.AppCompatEditText.onCreateInputConnection(android.view.inputmethod.EditorInfo):android.view.inputmethod.InputConnection type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:java.lang.CharSequence) = (r3 I:android.view.inputmethod.EditorInfo) android.view.inputmethod.EditorInfo.hintText java.lang.CharSequence \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r1 I:java.lang.CharSequence) = (r2 I:android.support.design.widget.TextInputEditText) android.support.design.widget.TextInputEditText.getHintFromLayout():java.lang.CharSequence type: DIRECT \l0x000e: IPUT  \l  (r1 I:java.lang.CharSequence)\l  (r3 I:android.view.inputmethod.EditorInfo)\l android.view.inputmethod.EditorInfo.hintText java.lang.CharSequence \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r0 I:android.view.inputmethod.InputConnection) \l}"];
MethodNode[shape=record,label="{public android.view.inputmethod.InputConnection android.support.design.widget.TextInputEditText.onCreateInputConnection((r2 'this' I:android.support.design.widget.TextInputEditText A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.inputmethod.EditorInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

