digraph "CFG forandroid.support.design.widget.TextInputEditText.getHint()Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.support.design.widget.TextInputLayout) = (r2 I:android.support.design.widget.TextInputEditText) android.support.design.widget.TextInputEditText.getTextInputLayout():android.support.design.widget.TextInputLayout type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:android.support.design.widget.TextInputLayout) android.support.design.widget.TextInputLayout.isProvidingHint():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r0 I:java.lang.CharSequence) = (r0 I:android.support.design.widget.TextInputLayout) android.support.design.widget.TextInputLayout.getHint():java.lang.CharSequence type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r0 I:java.lang.CharSequence) = (r2 I:android.support.v7.widget.AppCompatEditText) android.support.v7.widget.AppCompatEditText.getHint():java.lang.CharSequence type: SUPER \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r0 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence android.support.design.widget.TextInputEditText.getHint((r2 'this' I:android.support.design.widget.TextInputEditText A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

