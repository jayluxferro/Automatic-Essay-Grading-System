digraph "CFG forandroid.support.design.widget.HeaderScrollingViewBehavior.getOverlapPixelsForOffset(Landroid\/view\/View;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r2 I:android.support.design.widget.HeaderScrollingViewBehavior)\l android.support.design.widget.HeaderScrollingViewBehavior.overlayTop int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r3 I:float) = \l  (r2 I:android.support.design.widget.HeaderScrollingViewBehavior)\l  (r3 I:android.view.View)\l android.support.design.widget.HeaderScrollingViewBehavior.getOverlapRatioForOffset(android.view.View):float type: VIRTUAL \l0x000a: IGET  (r0 I:int) = \l  (r2 I:android.support.design.widget.HeaderScrollingViewBehavior)\l android.support.design.widget.HeaderScrollingViewBehavior.overlayTop int \l0x000c: CAST  (r0 I:float) = (float) (r0 I:int) \l0x000d: ARITH  (r3 I:float) = (r3 I:float) * (r0 I:float) \l0x000f: CAST  (r3 I:int) = (int) (r3 I:float) \l0x0010: IGET  (r0 I:int) = \l  (r2 I:android.support.design.widget.HeaderScrollingViewBehavior)\l android.support.design.widget.HeaderScrollingViewBehavior.overlayTop int \l0x0012: INVOKE  (r1 I:int) = (r3 I:int), (r1 I:int), (r0 I:int) android.support.v4.math.MathUtils.clamp(int, int, int):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{final int android.support.design.widget.HeaderScrollingViewBehavior.getOverlapPixelsForOffset((r2 'this' I:android.support.design.widget.HeaderScrollingViewBehavior A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4[style=dashed];
Node_3 -> Node_4;
}

