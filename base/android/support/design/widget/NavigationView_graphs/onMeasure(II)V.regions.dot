digraph "CFG forandroid.support.design.widget.NavigationView.onMeasure(II)V" {
subgraph cluster_Region_842876524 {
label = "R(3:0|(1:4)(1:(1:3))|5)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = android.view.View.MeasureSpec.getMode(r4)\l}"];
subgraph cluster_IfRegion_751545460 {
label = "IF [B:1:0x0008] THEN: R(1:4) ELSE: R(1:(1:3))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 == Integer.MIN_VALUE) goto L_0x0014\l}"];
subgraph cluster_Region_1820468693 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|int r4 = android.view.View.MeasureSpec.makeMeasureSpec(java.lang.Math.min(android.view.View.MeasureSpec.getSize(r4), r3.maxWidth), 1073741824)\l}"];
}
subgraph cluster_Region_1247902582 {
label = "R(1:(1:3)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_488692422 {
label = "IF [B:2:0x000a] THEN: R(1:3) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0 == 0) goto L_0x000d\l}"];
subgraph cluster_Region_1840582496 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|int r4 = android.view.View.MeasureSpec.makeMeasureSpec(r3.maxWidth, 1073741824)\l}"];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x0022|PHI: r4 \l  PHI: (r4v1 int) = (r4v4 int), (r4v0 int), (r4v6 int) binds: [B:4:0x0014, B:2:0x000a, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|super.onMeasure(r4, r5)\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0025}"];
MethodNode[shape=record,label="{protected void android.support.design.widget.NavigationView.onMeasure((r3v0 'this' android.support.design.widget.NavigationView A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_4 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

