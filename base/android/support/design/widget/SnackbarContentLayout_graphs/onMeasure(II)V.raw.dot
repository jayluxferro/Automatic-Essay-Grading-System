digraph "CFG forandroid.support.design.widget.SnackbarContentLayout.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:android.widget.LinearLayout), (r8 I:int), (r9 I:int) android.widget.LinearLayout.onMeasure(int, int):void type: SUPER \l0x0003: IGET  (r0 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.maxWidth int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.getMeasuredWidth():int type: VIRTUAL \l0x000b: IGET  (r1 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.maxWidth int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r8 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.maxWidth int \l0x0011: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x0013: INVOKE  (r8 I:int) = (r8 I:int), (r0 I:int) android.view.View.MeasureSpec.makeMeasureSpec(int, int):int type: STATIC \l0x0017: INVOKE  (r7 I:android.widget.LinearLayout), (r8 I:int), (r9 I:int) android.widget.LinearLayout.onMeasure(int, int):void type: SUPER \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r0 I:android.content.res.Resources) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.getResources():android.content.res.Resources type: VIRTUAL \l0x001e: SGET  (r1 I:int) =  android.support.design.R.dimen.design_snackbar_padding_vertical_2lines int \l0x0020: INVOKE  (r0 I:int) = (r0 I:android.content.res.Resources), (r1 I:int) android.content.res.Resources.getDimensionPixelSize(int):int type: VIRTUAL \l0x0024: INVOKE  (r1 I:android.content.res.Resources) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.getResources():android.content.res.Resources type: VIRTUAL \l0x0028: SGET  (r2 I:int) =  android.support.design.R.dimen.design_snackbar_padding_vertical int \l0x002a: INVOKE  (r1 I:int) = (r1 I:android.content.res.Resources), (r2 I:int) android.content.res.Resources.getDimensionPixelSize(int):int type: VIRTUAL \l0x002e: IGET  (r2 I:android.widget.TextView) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.messageView android.widget.TextView \l0x0030: INVOKE  (r2 I:android.text.Layout) = (r2 I:android.widget.TextView) android.widget.TextView.getLayout():android.text.Layout type: VIRTUAL \l0x0034: INVOKE  (r2 I:int) = (r2 I:android.text.Layout) android.text.Layout.getLineCount():int type: VIRTUAL \l0x0038: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0039: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: IF  (r2 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:8:0x003e \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0058 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: IGET  (r5 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.maxInlineActionWidth int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0058 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: IGET  (r5 I:android.widget.Button) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.actionView android.widget.Button \l0x0047: INVOKE  (r5 I:int) = (r5 I:android.widget.Button) android.widget.Button.getMeasuredWidth():int type: VIRTUAL \l0x004b: IGET  (r6 I:int) = (r7 I:android.support.design.widget.SnackbarContentLayout) android.support.design.widget.SnackbarContentLayout.maxInlineActionWidth int \l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: IF  (r5 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:17:0x0058 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: ARITH  (r1 I:int) = (r0 I:int) \- (r1 I:int) \l0x0051: INVOKE  (r0 I:boolean) = \l  (r7 I:android.support.design.widget.SnackbarContentLayout)\l  (r4 I:int)\l  (r0 I:int)\l  (r1 I:int)\l android.support.design.widget.SnackbarContentLayout.updateViewsWithinLayout(int, int, int):boolean type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0063 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005b \l}"];
Node_19 [shape=record,label="{19\:\ 0x005b|0x005b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x005c|0x005c: INVOKE  (r0 I:boolean) = \l  (r7 I:android.support.design.widget.SnackbarContentLayout)\l  (r3 I:int)\l  (r0 I:int)\l  (r0 I:int)\l android.support.design.widget.SnackbarContentLayout.updateViewsWithinLayout(int, int, int):boolean type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0060|0x0060: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0063 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0063|0x0063: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|0x0064: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0069 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|0x0066: INVOKE  (r7 I:android.widget.LinearLayout), (r8 I:int), (r9 I:int) android.widget.LinearLayout.onMeasure(int, int):void type: SUPER \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.design.widget.SnackbarContentLayout.onMeasure((r7 'this' I:android.support.design.widget.SnackbarContentLayout A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_23;
Node_15 -> Node_24[style=dashed];
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
}

