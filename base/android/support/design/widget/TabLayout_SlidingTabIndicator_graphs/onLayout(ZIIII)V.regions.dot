digraph "CFG forandroid.support.design.widget.TabLayout.SlidingTabIndicator.onLayout(ZIIII)V" {
subgraph cluster_Region_587078994 {
label = "R(2:0|(2:(2:5|6)|(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.onLayout(r1, r2, r3, r4, r5)\l}"];
subgraph cluster_Region_857595248 {
label = "R(2:(2:5|6)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_227815721 {
label = "IF [B:1:0x0005, B:3:0x000d] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0.indicatorAnimator == null) goto L_0x0030\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ADDED_TO_REGION\l|if (r0.indicatorAnimator.isRunning() == false) goto L_0x0030\l}"];
subgraph cluster_Region_1681385178 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0030|updateIndicatorPosition()\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_921793411 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|r0.indicatorAnimator.cancel()\lanimateIndicatorToPosition(r0.selectedPosition, java.lang.Math.round((1.0f \- r0.indicatorAnimator.getAnimatedFraction()) * ((float) r0.indicatorAnimator.getDuration())))\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void android.support.design.widget.TabLayout.SlidingTabIndicator.onLayout((r0v0 'this' android.support.design.widget.TabLayout$SlidingTabIndicator A[IMMUTABLE_TYPE, THIS]), (r1v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_7;
Node_2 -> Node_3;
}

