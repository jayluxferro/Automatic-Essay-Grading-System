digraph "CFG forandroid.support.design.widget.CutoutDrawable.preDraw(Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.graphics.drawable.Drawable$Callback) = (r2 I:android.support.design.widget.CutoutDrawable) android.support.design.widget.CutoutDrawable.getCallback():android.graphics.drawable.Drawable$Callback type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = \l  (r2 I:android.support.design.widget.CutoutDrawable)\l  (r0 I:android.graphics.drawable.Drawable$Callback)\l android.support.design.widget.CutoutDrawable.useHardwareLayer(android.graphics.drawable.Drawable$Callback):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CHECK_CAST  (r0 I:android.view.View) = (android.view.View) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: INVOKE  \l  (r0 I:android.view.View)\l  (r3 I:int)\l  (r1 I:android.graphics.Paint)\l android.view.View.setLayerType(int, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  \l  (r2 I:android.support.design.widget.CutoutDrawable)\l  (r3 I:android.graphics.Canvas)\l android.support.design.widget.CutoutDrawable.saveCanvasLayer(android.graphics.Canvas):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.design.widget.CutoutDrawable.preDraw((r2 'this' I:android.support.design.widget.CutoutDrawable A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

