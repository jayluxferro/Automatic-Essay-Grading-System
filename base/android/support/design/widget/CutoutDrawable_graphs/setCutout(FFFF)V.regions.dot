digraph "CFG forandroid.support.design.widget.CutoutDrawable.setCutout(FFFF)V" {
subgraph cluster_Region_1971789360 {
label = "R(1:(1:(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_2036561059 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2014843140 {
label = "IF [B:1:0x0006, B:3:0x000e, B:5:0x0016, B:7:0x001e] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2 != r1.cutoutBounds.left) goto L_0x0020\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|ADDED_TO_REGION\l|if (r3 != r1.cutoutBounds.top) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|ADDED_TO_REGION\l|if (r4 != r1.cutoutBounds.right) goto L_0x0020\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|ADDED_TO_REGION\l|if (r5 != r1.cutoutBounds.bottom) goto L_0x0020\l}"];
subgraph cluster_Region_1412142516 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0020|r1.cutoutBounds.set(r2, r3, r4, r5)\linvalidateSelf()\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0018}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void android.support.design.widget.CutoutDrawable.setCutout((r1v0 'this' android.support.design.widget.CutoutDrawable A[IMMUTABLE_TYPE, THIS]), (r2v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_7 -> Node_8;
Node_7 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

