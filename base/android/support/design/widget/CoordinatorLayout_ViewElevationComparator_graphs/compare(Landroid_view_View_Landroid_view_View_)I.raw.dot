digraph "CFG forandroid.support.design.widget.CoordinatorLayout.ViewElevationComparator.compare(Landroid\/view\/View;Landroid\/view\/View;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:float) = (r2 I:android.view.View) android.support.v4.view.ViewCompat.getZ(android.view.View):float type: STATIC \l0x0004: INVOKE  (r3 I:float) = (r3 I:android.view.View) android.support.v4.view.ViewCompat.getZ(android.view.View):float type: STATIC \l0x0008: CMP_L  (r0 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CMP_G  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.design.widget.CoordinatorLayout.ViewElevationComparator.compare((r1 'this' I:android.support.design.widget.CoordinatorLayout$ViewElevationComparator A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

