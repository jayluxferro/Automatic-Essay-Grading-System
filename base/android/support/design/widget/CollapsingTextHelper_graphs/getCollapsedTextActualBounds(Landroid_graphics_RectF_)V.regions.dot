digraph "CFG forandroid.support.design.widget.CollapsingTextHelper.getCollapsedTextActualBounds(Landroid\/graphics\/RectF;)V" {
subgraph cluster_Region_730424136 {
label = "R(4:0|(1:2)(1:3)|4|8) | DECL_VAR: float null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean boolean r0 = calculateIsRtl(r3.text)\l}"];
subgraph cluster_IfRegion_93434740 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 == false) goto L_0x0008\l}"];
subgraph cluster_Region_288123162 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|float r1 = (float) r3.collapsedBounds.left\l}"];
}
subgraph cluster_Region_1633001653 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|float r1 = ((float) r3.collapsedBounds.right) \- calculateCollapsedTextWidth()\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0018|PHI: r1 \l  PHI: (r1v0 float) = (r1v9 float), (r1v12 float) binds: [B:3:0x000e, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|r4.left = r1\lr4.top = (float) r3.collapsedBounds.top\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|PHI: r0 \l  PHI: (r0v2 float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r4.right = !r0 ? r4.left + calculateCollapsedTextWidth() : (float) r3.collapsedBounds.right\lr4.bottom = ((float) r3.collapsedBounds.top) + getCollapsedTextHeight()\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0021}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0023}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002b}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x003e}"];
MethodNode[shape=record,label="{public void android.support.design.widget.CollapsingTextHelper.getCollapsedTextActualBounds((r3v0 'this' android.support.design.widget.CollapsingTextHelper A[IMMUTABLE_TYPE, THIS]), (r4v0 android.graphics.RectF A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

