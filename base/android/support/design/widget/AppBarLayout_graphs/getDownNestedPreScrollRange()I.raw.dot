digraph "CFG forandroid.support.design.widget.AppBarLayout.getDownNestedPreScrollRange()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r9 I:android.support.design.widget.AppBarLayout) android.support.design.widget.AppBarLayout.downPreScrollRange int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r9 I:android.support.design.widget.AppBarLayout) android.support.design.widget.AppBarLayout.downPreScrollRange int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r9 I:android.support.design.widget.AppBarLayout) android.support.design.widget.AppBarLayout.getChildCount():int type: VIRTUAL \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:18:0x004f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r3 I:android.view.View) = \l  (r9 I:android.support.design.widget.AppBarLayout)\l  (r0 I:int)\l android.support.design.widget.AppBarLayout.getChildAt(int):android.view.View type: VIRTUAL \l0x0016: INVOKE  (r4 I:android.view.ViewGroup$LayoutParams) = (r3 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x001a: CHECK_CAST  (r4 I:android.support.design.widget.AppBarLayout$LayoutParams) = (android.support.design.widget.AppBarLayout$LayoutParams) (r4 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r5 I:int) = (r3 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x0020: IGET  (r6 I:int) = \l  (r4 I:android.support.design.widget.AppBarLayout$LayoutParams)\l android.support.design.widget.AppBarLayout.LayoutParams.scrollFlags int \l0x0022: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (5 ?[int, float, short, byte, char]) \l0x0024: CONST  (r8 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0049 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IGET  (r7 I:int) = \l  (r4 I:android.support.design.widget.AppBarLayout$LayoutParams)\l android.support.design.widget.AppBarLayout.LayoutParams.topMargin int \l0x0029: IGET  (r4 I:int) = \l  (r4 I:android.support.design.widget.AppBarLayout$LayoutParams)\l android.support.design.widget.AppBarLayout.LayoutParams.bottomMargin int \l0x002b: ARITH  (r7 I:int) = (r7 I:int) + (r4 I:int) \l0x002c: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x002d: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0037 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: INVOKE  (r3 I:int) = (r3 I:android.view.View) android.support.v4.view.ViewCompat.getMinimumHeight(android.view.View):int type: STATIC \l0x0035: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0042 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: INVOKE  (r3 I:int) = (r3 I:android.view.View) android.support.v4.view.ViewCompat.getMinimumHeight(android.view.View):int type: STATIC \l0x003f: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l0x0040: ARITH  (r2 I:int) = (r2 I:int) + (r5 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: INVOKE  (r3 I:int) = (r9 I:android.support.design.widget.AppBarLayout) android.support.design.widget.AppBarLayout.getTopInset():int type: VIRTUAL \l0x0046: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l0x0047: ARITH  (r2 I:int) = (r2 I:int) + (r5 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x004c \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004f|0x004f: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0053: IPUT  \l  (r0 I:int)\l  (r9 I:android.support.design.widget.AppBarLayout)\l android.support.design.widget.AppBarLayout.downPreScrollRange int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{int android.support.design.widget.AppBarLayout.getDownNestedPreScrollRange((r9 'this' I:android.support.design.widget.AppBarLayout A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_17;
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_5;
Node_18 -> Node_19;
}

