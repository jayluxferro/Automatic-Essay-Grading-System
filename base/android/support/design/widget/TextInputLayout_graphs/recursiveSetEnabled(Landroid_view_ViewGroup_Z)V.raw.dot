digraph "CFG forandroid.support.design.widget.TextInputLayout.recursiveSetEnabled(Landroid\/view\/ViewGroup;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:android.view.ViewGroup) android.view.ViewGroup.getChildCount():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:android.view.View) = (r4 I:android.view.ViewGroup), (r1 I:int) android.view.ViewGroup.getChildAt(int):android.view.View type: VIRTUAL \l0x000b: INVOKE  (r2 I:android.view.View), (r5 I:boolean) android.view.View.setEnabled(boolean):void type: VIRTUAL \l0x000e: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) android.view.ViewGroup \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CHECK_CAST  (r2 I:android.view.ViewGroup) = (android.view.ViewGroup) (r2 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  (r2 I:android.view.ViewGroup), (r5 I:boolean) android.support.design.widget.TextInputLayout.recursiveSetEnabled(android.view.ViewGroup, boolean):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.design.widget.TextInputLayout.recursiveSetEnabled((r4 I:android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
}

