digraph "CFG forandroid.support.design.widget.TextInputLayout.getCounterOverflowDescription()Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_1182207396 {
label = "R(1:(2:(1:10)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1476061912 {
label = "R(2:(1:10)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1596438070 {
label = "IF [B:1:0x0002, B:3:0x0006, B:5:0x000a] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.counterEnabled == false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|ADDED_TO_REGION\l|if (r1.counterOverflowed == false) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|ADDED_TO_REGION\l|if (r1.counterView == null) goto L_?\l}"];
subgraph cluster_Region_437309713 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1693775322 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|return r1.counterView.getContentDescription()\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return null\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return null\l}"];
MethodNode[shape=record,label="{java.lang.CharSequence android.support.design.widget.TextInputLayout.getCounterOverflowDescription((r1v0 'this' android.support.design.widget.TextInputLayout A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

