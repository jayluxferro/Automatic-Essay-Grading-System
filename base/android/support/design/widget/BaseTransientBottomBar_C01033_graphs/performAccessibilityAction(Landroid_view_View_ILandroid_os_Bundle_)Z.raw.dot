digraph "CFG forandroid.support.design.widget.BaseTransientBottomBar.3.performAccessibilityAction(Landroid\/view\/View;ILandroid\/os\/Bundle;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1048576(0x100000, float:1.469368E\-39) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r2 I:android.support.design.widget.BaseTransientBottomBar) = \l  (r1 I:android.support.design.widget.BaseTransientBottomBar$3)\l android.support.design.widget.BaseTransientBottomBar.3.this$0 android.support.design.widget.BaseTransientBottomBar \l0x0006: INVOKE  (r2 I:android.support.design.widget.BaseTransientBottomBar) android.support.design.widget.BaseTransientBottomBar.dismiss():void type: VIRTUAL \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r2 I:boolean) = \l  (r1 I:android.support.v4.view.AccessibilityDelegateCompat)\l  (r2 I:android.view.View)\l  (r3 I:int)\l  (r4 I:android.os.Bundle)\l android.support.v4.view.AccessibilityDelegateCompat.performAccessibilityAction(android.view.View, int, android.os.Bundle):boolean type: SUPER \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.design.widget.BaseTransientBottomBar.3.performAccessibilityAction((r1 'this' I:android.support.design.widget.BaseTransientBottomBar$3 A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

