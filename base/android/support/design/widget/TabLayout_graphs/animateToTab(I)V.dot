digraph "CFG forandroid.support.design.widget.TabLayout.animateToTab(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 != \-1) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (getWindowToken() == null) goto L_0x0042\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c}"];
Node_6 [shape=record,label="{6\:\ 0x0010|if (android.support.p000v4.view.ViewCompat.isLaidOut(r6) == false) goto L_0x0042\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012}"];
Node_8 [shape=record,label="{8\:\ 0x0018|if (r6.slidingTabIndicator.childrenNeedLayout() == false) goto L_0x001b\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|int r0 = getScrollX()\lint r2 = calculateScrollXForTab(r7, 0.0f)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r0 == r2) goto L_0x003a\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|ensureScrollAnimator()\landroid.animation.ValueAnimator r3 = r6.scrollAnimator\lint[] r4 = new int[]\{r0, r2\}\lr3.setIntValues(r4)\lr6.scrollAnimator.start()\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|r6.slidingTabIndicator.animateIndicatorToPosition(r7, r6.tabIndicatorAnimationDuration)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|setScrollPosition(r7, 0.0f, true)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.design.widget.TabLayout.animateToTab((r6v0 'this' android.support.design.widget.TabLayout A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_14[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

