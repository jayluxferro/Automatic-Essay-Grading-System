digraph "CFG forandroid.support.design.widget.TabLayout.setInlineLabel(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.inlineLabel == r3) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r2.inlineLabel = r3\lr3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|LOOP_START\lPHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:2:0x0004, B:8:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0007\-\>B:8:0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r3 \>= r2.slidingTabIndicator.getChildCount()) goto L_0x0021\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|android.view.View r0 = r2.slidingTabIndicator.getChildAt(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|if ((r0 instanceof android.support.design.widget.TabLayout.TabView) == false) goto L_0x001e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|((android.support.design.widget.TabLayout.TabView) r0).updateOrientation()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:8:0x001e\l|int r3 = r3 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|applyModeAndGravity()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.design.widget.TabLayout.setInlineLabel((r2v0 'this' android.support.design.widget.TabLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_11;
Node_8 -> Node_3;
Node_9 -> Node_13;
Node_10 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_8;
}

