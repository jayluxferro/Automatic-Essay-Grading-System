digraph "CFG forandroid.support.design.widget.TabLayout.setPagerAdapter(Landroid\/support\/v4\/view\/PagerAdapter;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.pagerAdapter == null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.pagerAdapterObserver == null) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r2.pagerAdapter.unregisterDataSetObserver(r2.pagerAdapterObserver)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r2.pagerAdapter = r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r4 == false) goto L_0x0025\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|if (r3 == null) goto L_0x0025\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015}"];
Node_9 [shape=record,label="{9\:\ 0x0017|if (r2.pagerAdapterObserver != null) goto L_0x0020\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|r2.pagerAdapterObserver = new android.support.design.widget.TabLayout.PagerAdapterObserver(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|r3.registerDataSetObserver(r2.pagerAdapterObserver)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|populateFromPagerAdapter()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.design.widget.TabLayout.setPagerAdapter((r2v0 'this' android.support.design.widget.TabLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.v4.view.PagerAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

