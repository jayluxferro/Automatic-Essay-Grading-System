digraph "CFG forandroid.support.design.widget.AppBarLayout.BaseBehavior.animateOffsetTo(Landroid\/support\/design\/widget\/CoordinatorLayout;Landroid\/support\/design\/widget\/AppBarLayout;IF)V" {
subgraph cluster_Region_1176931408 {
label = "R(3:0|(1:2)(1:3)|4) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = java.lang.Math.abs(getTopBottomOffsetForScrollingSibling() \- r5)\lfloat float r6 = java.lang.Math.abs(r6)\l}"];
subgraph cluster_IfRegion_558360395 {
label = "IF [B:1:0x0010] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r6 \> 0.0f) goto L_0x0012\l}"];
subgraph cluster_Region_1887506878 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0012|int r6 = java.lang.Math.round((((float) r0) \/ r6) * 1000.0f) * 3\l}"];
}
subgraph cluster_Region_936991957 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001f|int r6 = (int) (((((float) r0) \/ ((float) r4.getHeight())) + 1.0f) * 150.0f)\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x002e|PHI: r6 \l  PHI: (r6v2 int) = (r6v7 int), (r6v9 int) binds: [B:3:0x001f, B:2:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|animateOffsetWithDuration(r3, r4, r5, r6)\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0031}"];
MethodNode[shape=record,label="{private void android.support.design.widget.AppBarLayout.BaseBehavior.animateOffsetTo((r2v0 'this' android.support.design.widget.AppBarLayout$BaseBehavior A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.design.widget.CoordinatorLayout A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/design\/widget\/CoordinatorLayout;, TT;IF)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

