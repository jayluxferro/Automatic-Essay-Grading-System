digraph "CFG forandroid.support.design.widget.SnackbarManager.1.handleMessage(Landroid\/os\/Message;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:android.os.Message) android.os.Message.what int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r2 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:android.support.design.widget.SnackbarManager) = (r1 I:android.support.design.widget.SnackbarManager$1) android.support.design.widget.SnackbarManager.1.this$0 android.support.design.widget.SnackbarManager \l0x0008: IGET  (r2 I:java.lang.Object) = (r2 I:android.os.Message) android.os.Message.obj java.lang.Object \l0x000a: CHECK_CAST  (r2 I:android.support.design.widget.SnackbarManager$SnackbarRecord) = (android.support.design.widget.SnackbarManager$SnackbarRecord) (r2 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  \l  (r0 I:android.support.design.widget.SnackbarManager)\l  (r2 I:android.support.design.widget.SnackbarManager$SnackbarRecord)\l android.support.design.widget.SnackbarManager.handleTimeout(android.support.design.widget.SnackbarManager$SnackbarRecord):void type: VIRTUAL \l0x000f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.design.widget.SnackbarManager.1.handleMessage((r1 'this' I:android.support.design.widget.SnackbarManager$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:android.os.Message A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

