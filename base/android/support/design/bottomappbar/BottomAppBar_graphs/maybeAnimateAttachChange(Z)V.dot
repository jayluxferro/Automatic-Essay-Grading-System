digraph "CFG forandroid.support.design.bottomappbar.BottomAppBar.maybeAnimateAttachChange(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.support.p000v4.view.ViewCompat.isLaidOut(r2) != false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r2.attachAnimator == null) goto L_0x0010\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|r2.attachAnimator.cancel()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.util.ArrayList r0 = new java.util.ArrayList()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|if (r3 == false) goto L_0x001f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017}"];
Node_9 [shape=record,label="{9\:\ 0x001b|if (isVisibleFab() == false) goto L_0x001f\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|r1 = true\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|r1 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|PHI: r1 \l  PHI: (r1v0 boolean) = (r1v1 boolean), (r1v3 boolean) binds: [B:11:0x001f, B:10:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|createCradleShapeAnimation(r1, r0)\lcreateFabTranslationYAnimation(r3, r0)\landroid.animation.AnimatorSet r3 = new android.animation.AnimatorSet()\lr3.playTogether(r0)\lr2.attachAnimator = r3\lr2.attachAnimator.addListener(new android.support.design.bottomappbar.BottomAppBar.C00695(r2))\lr2.attachAnimator.start()\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.design.bottomappbar.BottomAppBar.maybeAnimateAttachChange((r2v0 'this' android.support.design.bottomappbar.BottomAppBar A[IMMUTABLE_TYPE, THIS]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

