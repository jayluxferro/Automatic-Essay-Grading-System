digraph "CFG forandroid.support.design.shape.MaterialShapeDrawable.getPathForSize(IILandroid\/graphics\/Path;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.rewind()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r3.shapedViewModel != null) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|r0 = 0\lr1 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:3:0x0008, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000a\-\>B:6:0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r1 \>= 4) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|LOOP_END\lLOOP:0: B:4:0x000a\-\>B:6:0x000d\l|setCornerPathAndTransform(r1, r4, r5)\lsetEdgeTransform(r1, r4, r5)\lint r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:11:0x0016, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0016\-\>B:8:0x0018\l|if (r0 \>= 4) goto L_0x0021\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|LOOP_END\lLOOP:1: B:7:0x0016\-\>B:8:0x0018\l|appendCornerPath(r0, r6)\lappendEdgePath(r0, r6)\lint r0 = r0 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|r6.close()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.design.shape.MaterialShapeDrawable.getPathForSize((r3v0 'this' android.support.design.shape.MaterialShapeDrawable A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_11 -> Node_7;
Node_12 -> Node_9;
}

