digraph "CFG forandroid.support.design.chip.ChipDrawable.setChipIcon(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.graphics.drawable.Drawable r0 = getChipIcon()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == r3) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|float r1 = calculateChipIconWidth()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r3 == null) goto L_0x0015\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|android.graphics.drawable.Drawable r3 = android.support.p000v4.graphics.drawable.DrawableCompat.wrap(r3).mutate()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|r3 = null\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|PHI: r3 \l  PHI: (r3v1 android.graphics.drawable.Drawable) = (r3v4 android.graphics.drawable.Drawable), (r3v6 android.graphics.drawable.Drawable) binds: [B:5:0x0015, B:4:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|r2.chipIcon = r3\lfloat r3 = calculateChipIconWidth()\lunapplyChildDrawable(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|if (showsChipIcon() == false) goto L_0x002a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|applyChildDrawable(r2.chipIcon)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|invalidateSelf()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|if ((r1 \> r3 ? 1 : (r1 == r3 ? 0 : \-1)) == 0) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|onSizeChange()\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.design.chip.ChipDrawable.setChipIcon((r2v0 'this' android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
}

