digraph "CFG forandroid.support.design.chip.ChipDrawable.onLevelChange(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:android.graphics.drawable.Drawable), (r3 I:int) android.graphics.drawable.Drawable.onLevelChange(int):boolean type: SUPER \l0x0004: INVOKE  (r1 I:boolean) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.showsChipIcon():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r1 I:android.graphics.drawable.Drawable) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.chipIcon android.graphics.drawable.Drawable \l0x000c: INVOKE  (r1 I:boolean) = (r1 I:android.graphics.drawable.Drawable), (r3 I:int) android.graphics.drawable.Drawable.setLevel(int):boolean type: VIRTUAL \l0x0010: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r1 I:boolean) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.showsCheckedIcon():boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r1 I:android.graphics.drawable.Drawable) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.checkedIcon android.graphics.drawable.Drawable \l0x0019: INVOKE  (r1 I:boolean) = (r1 I:android.graphics.drawable.Drawable), (r3 I:int) android.graphics.drawable.Drawable.setLevel(int):boolean type: VIRTUAL \l0x001d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r1 I:boolean) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.showsCloseIcon():boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r1 I:android.graphics.drawable.Drawable) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.closeIcon android.graphics.drawable.Drawable \l0x0026: INVOKE  (r3 I:boolean) = (r1 I:android.graphics.drawable.Drawable), (r3 I:int) android.graphics.drawable.Drawable.setLevel(int):boolean type: VIRTUAL \l0x002a: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0030 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: INVOKE  (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.invalidateSelf():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean android.support.design.chip.ChipDrawable.onLevelChange((r2 'this' I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

