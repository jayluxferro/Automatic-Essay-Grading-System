digraph "CFG forandroid.support.design.chip.ChipDrawable.getTextWidth()F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.textWidthDirty boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:float) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.textWidth float \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r0 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:java.lang.CharSequence) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.unicodeWrappedText java.lang.CharSequence \l0x0009: INVOKE  (r0 I:float) = \l  (r1 I:android.support.design.chip.ChipDrawable)\l  (r0 I:java.lang.CharSequence)\l android.support.design.chip.ChipDrawable.calculateTextWidth(java.lang.CharSequence):float type: DIRECT \l0x000d: IPUT  \l  (r0 I:float)\l  (r1 I:android.support.design.chip.ChipDrawable)\l android.support.design.chip.ChipDrawable.textWidth float \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.support.design.chip.ChipDrawable)\l android.support.design.chip.ChipDrawable.textWidthDirty boolean \l0x0012: IGET  (r0 I:float) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.textWidth float \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private float android.support.design.chip.ChipDrawable.getTextWidth((r1 'this' I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

