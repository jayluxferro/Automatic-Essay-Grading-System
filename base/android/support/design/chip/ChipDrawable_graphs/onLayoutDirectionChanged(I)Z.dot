digraph "CFG forandroid.support.design.chip.ChipDrawable.onLayoutDirectionChanged(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = super.onLayoutDirectionChanged(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (showsChipIcon() == false) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|r0 = r0 \| r2.chipIcon.setLayoutDirection(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v6 boolean) binds: [B:1:0x0008, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (showsCheckedIcon() == false) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|r0 = r0 \| r2.checkedIcon.setLayoutDirection(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v5 boolean) binds: [B:4:0x0015, B:5:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if (showsCloseIcon() == false) goto L_0x002b\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|r0 = r0 \| r2.closeIcon.setLayoutDirection(r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v4 boolean) binds: [B:7:0x0022, B:8:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|invalidateSelf()\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean android.support.design.chip.ChipDrawable.onLayoutDirectionChanged((r2v0 'this' android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.annotation.TargetApi, \{value=23\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
}

