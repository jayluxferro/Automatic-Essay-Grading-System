digraph "CFG forandroid.support.design.chip.ChipDrawable.setChipIconSize(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.chipIconSize float \l0x0002: CMP_L  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:float) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.calculateChipIconWidth():float type: VIRTUAL \l0x000a: IPUT  \l  (r2 I:float)\l  (r1 I:android.support.design.chip.ChipDrawable)\l android.support.design.chip.ChipDrawable.chipIconSize float \l0x000c: INVOKE  (r2 I:float) = (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.calculateChipIconWidth():float type: VIRTUAL \l0x0010: INVOKE  (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.invalidateSelf():void type: VIRTUAL \l0x0013: CMP_L  (r2 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: INVOKE  (r1 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.onSizeChange():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.design.chip.ChipDrawable.setChipIconSize((r1 'this' I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r2 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

