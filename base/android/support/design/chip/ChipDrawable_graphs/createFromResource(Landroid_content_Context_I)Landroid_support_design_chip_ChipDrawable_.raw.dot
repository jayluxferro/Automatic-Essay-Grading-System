digraph "CFG forandroid.support.design.chip.ChipDrawable.createFromResource(Landroid\/content\/Context;I)Landroid\/support\/design\/chip\/ChipDrawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:android.content.res.Resources) = (r4 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}, TRY_ENTER]\l0x0004: INVOKE  (r0 I:android.content.res.XmlResourceParser) = (r0 I:android.content.res.Resources), (r5 I:int) android.content.res.Resources.getXml(int):android.content.res.XmlResourceParser type: VIRTUAL A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r1 I:int) = (r0 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0008 A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003b A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.String) = (r0 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"chip\" A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x001a: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.CharSequence)\l  (r2 I:java.lang.CharSequence)\l android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean type: STATIC A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0033 A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: INVOKE  (r0 I:android.util.AttributeSet) = (r0 I:org.xmlpull.v1.XmlPullParser) android.util.Xml.asAttributeSet(org.xmlpull.v1.XmlPullParser):android.util.AttributeSet type: STATIC A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x0024: INVOKE  (r1 I:int) = (r0 I:android.util.AttributeSet) android.util.AttributeSet.getStyleAttribute():int type: INTERFACE A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: SGET  (r1 I:int) =  android.support.design.R.style.Widget_MaterialComponents_Chip_Entry int A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: SGET  (r2 I:int) =  android.support.design.R.attr.chipStandaloneStyle int A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x002e: INVOKE  (r4 I:android.support.design.chip.ChipDrawable) = \l  (r4 I:android.content.Context)\l  (r0 I:android.util.AttributeSet)\l  (r2 I:int)\l  (r1 I:int)\l android.support.design.chip.ChipDrawable.createFromAttributes(android.content.Context, android.util.AttributeSet, int, int):android.support.design.chip.ChipDrawable type: STATIC A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: RETURN  (r4 I:android.support.design.chip.ChipDrawable) A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: NEW_INSTANCE  (r4 I:org.xmlpull.v1.XmlPullParserException) =  org.xmlpull.v1.XmlPullParserException A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x0035: CONST_STR  (r0 I:java.lang.String) =  \"Must have a \<chip\> start tag\" A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x0037: INVOKE  \l  (r4 I:org.xmlpull.v1.XmlPullParserException)\l  (r0 I:java.lang.String)\l org.xmlpull.v1.XmlPullParserException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: NEW_INSTANCE  (r4 I:org.xmlpull.v1.XmlPullParserException) =  org.xmlpull.v1.XmlPullParserException A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x003d: CONST_STR  (r0 I:java.lang.String) =  \"No start tag found\" A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l0x003f: INVOKE  \l  (r4 I:org.xmlpull.v1.XmlPullParserException)\l  (r0 I:java.lang.String)\l org.xmlpull.v1.XmlPullParserException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ IOException \| XmlPullParserException \-\> 0x0043 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|ExcHandler: IOException \| XmlPullParserException null\lSplitter:B:0:0x0000\l|0x0043: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: NEW_INSTANCE  (r0 I:android.content.res.Resources$NotFoundException) =  android.content.res.Resources$NotFoundException \l0x0046: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004b: CONST_STR  (r2 I:java.lang.String) =  \"Can't load chip resource ID #0x\" \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r5 I:java.lang.String) = (r5 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0054: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0057: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005b: INVOKE  \l  (r0 I:android.content.res.Resources$NotFoundException)\l  (r5 I:java.lang.String)\l android.content.res.Resources.NotFoundException.\<init\>(java.lang.String):void type: DIRECT \l0x005e: INVOKE  \l  (r0 I:android.content.res.Resources$NotFoundException)\l  (r4 I:java.lang.Throwable)\l android.content.res.Resources.NotFoundException.initCause(java.lang.Throwable):java.lang.Throwable type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|0x0061: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.support.design.chip.ChipDrawable android.support.design.chip.ChipDrawable.createFromResource((r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, android.support.annotation.XmlRes, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_18;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

