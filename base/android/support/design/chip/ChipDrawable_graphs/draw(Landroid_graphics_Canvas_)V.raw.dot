digraph "CFG forandroid.support.design.chip.ChipDrawable.draw(Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.graphics.Rect) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.getBounds():android.graphics.Rect type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = (r0 I:android.graphics.Rect) android.graphics.Rect.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.getAlpha():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: IGET  (r2 I:int) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.alpha int \l0x0014: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IGET  (r1 I:int) = (r0 I:android.graphics.Rect) android.graphics.Rect.left int \l0x001a: CAST  (r5 I:float) = (float) (r1 I:int) \l0x001b: IGET  (r1 I:int) = (r0 I:android.graphics.Rect) android.graphics.Rect.top int \l0x001d: CAST  (r6 I:float) = (float) (r1 I:int) \l0x001e: IGET  (r1 I:int) = (r0 I:android.graphics.Rect) android.graphics.Rect.right int \l0x0020: CAST  (r7 I:float) = (float) (r1 I:int) \l0x0021: IGET  (r1 I:int) = (r0 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x0023: CAST  (r8 I:float) = (float) (r1 I:int) \l0x0024: IGET  (r9 I:int) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.alpha int \l0x0026: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  (r1 I:int) = \l  (r4 I:android.graphics.Canvas)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:float)\l  (r9 I:int)\l android.support.design.canvas.CanvasCompat.saveLayerAlpha(android.graphics.Canvas, float, float, float, float, int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawChipBackground(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x002e: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawChipStroke(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x0031: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawCompatRipple(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x0034: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawChipIcon(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x0037: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawCheckedIcon(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x003a: IGET  (r2 I:boolean) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.shouldDrawText boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawText(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawCloseIcon(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x0044: INVOKE  \l  (r10 I:android.support.design.chip.ChipDrawable)\l  (r11 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Rect)\l android.support.design.chip.ChipDrawable.drawDebug(android.graphics.Canvas, android.graphics.Rect):void type: DIRECT \l0x0047: IGET  (r0 I:int) = (r10 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.alpha int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:14:0x004e \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: INVOKE  (r11 I:android.graphics.Canvas), (r1 I:int) android.graphics.Canvas.restoreToCount(int):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.design.chip.ChipDrawable.draw((r10 'this' I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r11 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

