digraph "CFG forandroid.support.design.chip.ChipDrawable.calculateTextOriginAndAlignment(Landroid\/graphics\/Rect;Landroid\/graphics\/PointF;)Landroid\/graphics\/Paint$Align;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r4 I:android.graphics.PointF), (r0 I:float), (r0 I:float) android.graphics.PointF.set(float, float):void type: VIRTUAL \l0x0004: SGET  (r0 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.LEFT android.graphics.Paint$Align \l0x0006: IGET  (r1 I:java.lang.CharSequence) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.unicodeWrappedText java.lang.CharSequence \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:float) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.chipStartPadding float \l0x000c: INVOKE  (r1 I:float) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.calculateChipIconWidth():float type: VIRTUAL \l0x0010: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0011: IGET  (r1 I:float) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.textStartPadding float \l0x0013: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0014: INVOKE  (r1 I:int) = (r2 I:android.graphics.drawable.Drawable) android.support.v4.graphics.drawable.DrawableCompat.getLayoutDirection(android.graphics.drawable.Drawable):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r1 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.left int \l0x001c: CAST  (r1 I:float) = (float) (r1 I:int) \l0x001d: ARITH  (r1 I:float) = (r1 I:float) + (r0 I:float) \l0x001e: IPUT  (r1 I:float), (r4 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0020: SGET  (r0 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.LEFT android.graphics.Paint$Align \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IGET  (r1 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.right int \l0x0025: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0026: ARITH  (r1 I:float) = (r1 I:float) \- (r0 I:float) \l0x0027: IPUT  (r1 I:float), (r4 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0029: SGET  (r0 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.RIGHT android.graphics.Paint$Align \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: INVOKE  (r3 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.centerY():int type: VIRTUAL \l0x002f: CAST  (r3 I:float) = (float) (r3 I:int) \l0x0030: INVOKE  (r1 I:float) = (r2 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.calculateTextCenterFromBaseline():float type: DIRECT \l0x0034: ARITH  (r3 I:float) = (r3 I:float) \- (r1 I:float) \l0x0035: IPUT  (r3 I:float), (r4 I:android.graphics.PointF) android.graphics.PointF.y float \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: RETURN  (r0 I:android.graphics.Paint$Align) \l}"];
MethodNode[shape=record,label="{android.graphics.Paint$Align android.support.design.chip.ChipDrawable.calculateTextOriginAndAlignment((r2 'this' I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.PointF A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

