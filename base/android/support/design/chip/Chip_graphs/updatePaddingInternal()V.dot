digraph "CFG forandroid.support.design.chip.Chip.updatePaddingInternal()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (android.text.TextUtils.isEmpty(getText()) != false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r4.chipDrawable != null) goto L_0x0010\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|float r0 = ((r4.chipDrawable.getChipStartPadding() + r4.chipDrawable.getChipEndPadding()) + r4.chipDrawable.getTextStartPadding()) + r4.chipDrawable.getTextEndPadding()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|if (r4.chipDrawable.isChipIconVisible() == false) goto L_0x003b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033}"];
Node_7 [shape=record,label="{7\:\ 0x0039|if (r4.chipDrawable.getChipIcon() != null) goto L_0x0051\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b}"];
Node_9 [shape=record,label="{9\:\ 0x0041|if (r4.chipDrawable.getCheckedIcon() == null) goto L_0x0066\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043}"];
Node_11 [shape=record,label="{11\:\ 0x0049|if (r4.chipDrawable.isCheckedIconVisible() == false) goto L_0x0066\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b}"];
Node_13 [shape=record,label="{13\:\ 0x004f|if (isChecked() == false) goto L_0x0066\l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|float r0 = r0 + ((r4.chipDrawable.getIconStartPadding() + r4.chipDrawable.getIconEndPadding()) + r4.chipDrawable.getChipIconSize())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|PHI: r0 \l  PHI: (r0v8 float) = (r0v12 float), (r0v7 float), (r0v7 float), (r0v7 float) binds: [B:14:0x0051, B:9:0x0041, B:11:0x0049, B:13:0x004f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x006c|if (r4.chipDrawable.isCloseIconVisible() == false) goto L_0x008b\l}"];
Node_17 [shape=record,label="{17\:\ 0x006e}"];
Node_18 [shape=record,label="{18\:\ 0x0074|if (r4.chipDrawable.getCloseIcon() == null) goto L_0x008b\l}"];
Node_19 [shape=record,label="{19\:\ 0x0076|float r0 = r0 + ((r4.chipDrawable.getCloseIconStartPadding() + r4.chipDrawable.getCloseIconEndPadding()) + r4.chipDrawable.getCloseIconSize())\l}"];
Node_20 [shape=record,label="{20\:\ 0x008b|PHI: r0 \l  PHI: (r0v9 float) = (r0v8 float), (r0v8 float), (r0v11 float) binds: [B:16:0x006c, B:18:0x0074, B:19:0x0076] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0092|if ((((float) android.support.p000v4.view.ViewCompat.getPaddingEnd(r4)) \> r0 ? 1 : (((float) android.support.p000v4.view.ViewCompat.getPaddingEnd(r4)) == r0 ? 0 : \-1)) == 0) goto L_?\l}"];
Node_22 [shape=record,label="{22\:\ 0x0094|android.support.p000v4.view.ViewCompat.setPaddingRelative(r4, android.support.p000v4.view.ViewCompat.getPaddingStart(r4), getPaddingTop(), (int) r0, getPaddingBottom())\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.design.chip.Chip.updatePaddingInternal((r4v0 'this' android.support.design.chip.Chip A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_26[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
}

