digraph "CFG forandroid.support.design.chip.Chip.moveFocus(Z)Z" {
subgraph cluster_Region_521518000 {
label = "R(3:0|(1:(2:4|9))(1:(2:7|10))|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|ensureFocus()\l}"];
subgraph cluster_IfRegion_518779580 {
label = "IF [B:1:0x0006] THEN: R(1:(2:4|9)) ELSE: R(1:(2:7|10))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4 == true) goto L_0x0008\l}"];
subgraph cluster_Region_1178979022 {
label = "R(1:(2:4|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1108230224 {
label = "IF [B:3:0x000a] THEN: R(2:4|9) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r3.focusedVirtualView == \-1) goto L_0x000c\l}"];
subgraph cluster_Region_1895082906 {
label = "R(2:4|9)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|setFocusedVirtualView(0)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
}
subgraph cluster_Region_827054378 {
label = "R(1:(2:7|10)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1496348279 {
label = "IF [B:6:0x0012] THEN: R(2:7|10) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r3.focusedVirtualView == 0) goto L_0x0014\l}"];
subgraph cluster_Region_1770828225 {
label = "R(2:7|10)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|setFocusedVirtualView(\-1)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0018|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0010}"];
MethodNode[shape=record,label="{private boolean android.support.design.chip.Chip.moveFocus((r3v0 'this' android.support.design.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
}

