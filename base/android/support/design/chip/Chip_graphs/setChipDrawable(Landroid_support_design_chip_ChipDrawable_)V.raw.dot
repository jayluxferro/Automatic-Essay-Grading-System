digraph "CFG forandroid.support.design.chip.Chip.setChipDrawable(Landroid\/support\/design\/chip\/ChipDrawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x0006: INVOKE  \l  (r3 I:android.support.design.chip.Chip)\l  (r0 I:android.support.design.chip.ChipDrawable)\l android.support.design.chip.Chip.unapplyChipDrawable(android.support.design.chip.ChipDrawable):void type: DIRECT \l0x0009: IPUT  \l  (r4 I:android.support.design.chip.ChipDrawable)\l  (r3 I:android.support.design.chip.Chip)\l android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x000b: IGET  (r4 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x000d: INVOKE  \l  (r3 I:android.support.design.chip.Chip)\l  (r4 I:android.support.design.chip.ChipDrawable)\l android.support.design.chip.Chip.applyChipDrawable(android.support.design.chip.ChipDrawable):void type: DIRECT \l0x0010: SGET  (r4 I:boolean) =  android.support.design.ripple.RippleUtils.USE_FRAMEWORK_RIPPLE boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r4 I:android.graphics.drawable.RippleDrawable) =  android.graphics.drawable.RippleDrawable \l0x0016: IGET  (r0 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x0018: INVOKE  (r0 I:android.content.res.ColorStateList) = (r0 I:android.support.design.chip.ChipDrawable) android.support.design.chip.ChipDrawable.getRippleColor():android.content.res.ColorStateList type: VIRTUAL \l0x001c: INVOKE  (r0 I:android.content.res.ColorStateList) = (r0 I:android.content.res.ColorStateList) android.support.design.ripple.RippleUtils.convertToRippleDrawableColor(android.content.res.ColorStateList):android.content.res.ColorStateList type: STATIC \l0x0020: IGET  (r1 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x0022: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  \l  (r4 I:android.graphics.drawable.RippleDrawable)\l  (r0 I:android.content.res.ColorStateList)\l  (r1 I:android.graphics.drawable.Drawable)\l  (r2 I:android.graphics.drawable.Drawable)\l android.graphics.drawable.RippleDrawable.\<init\>(android.content.res.ColorStateList, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable):void type: DIRECT \l0x0026: IPUT  \l  (r4 I:android.graphics.drawable.RippleDrawable)\l  (r3 I:android.support.design.chip.Chip)\l android.support.design.chip.Chip.ripple android.graphics.drawable.RippleDrawable \l0x0028: IGET  (r4 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x002a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: INVOKE  \l  (r4 I:android.support.design.chip.ChipDrawable)\l  (r0 I:boolean)\l android.support.design.chip.ChipDrawable.setUseCompatRipple(boolean):void type: VIRTUAL \l0x002e: IGET  (r4 I:android.graphics.drawable.RippleDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.ripple android.graphics.drawable.RippleDrawable \l0x0030: INVOKE  \l  (r3 I:android.view.View)\l  (r4 I:android.graphics.drawable.Drawable)\l android.support.v4.view.ViewCompat.setBackground(android.view.View, android.graphics.drawable.Drawable):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IGET  (r4 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x0036: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0037: INVOKE  \l  (r4 I:android.support.design.chip.ChipDrawable)\l  (r0 I:boolean)\l android.support.design.chip.ChipDrawable.setUseCompatRipple(boolean):void type: VIRTUAL \l0x003a: IGET  (r4 I:android.support.design.chip.ChipDrawable) = (r3 I:android.support.design.chip.Chip) android.support.design.chip.Chip.chipDrawable android.support.design.chip.ChipDrawable \l0x003c: INVOKE  \l  (r3 I:android.view.View)\l  (r4 I:android.graphics.drawable.Drawable)\l android.support.v4.view.ViewCompat.setBackground(android.view.View, android.graphics.drawable.Drawable):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.design.chip.Chip.setChipDrawable((r3 'this' I:android.support.design.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.design.chip.ChipDrawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

