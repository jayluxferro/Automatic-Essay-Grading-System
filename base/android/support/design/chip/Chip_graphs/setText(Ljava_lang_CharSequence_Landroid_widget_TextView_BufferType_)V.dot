digraph "CFG forandroid.support.design.chip.Chip.setText(Ljava\/lang\/CharSequence;Landroid\/widget\/TextView$BufferType;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.chipDrawable != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r3 != null) goto L_0x0009\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|java.lang.String r3 = \"\"\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|PHI: r3 \l  PHI: (r3v1 java.lang.CharSequence) = (r3v0 java.lang.CharSequence), (r3v2 java.lang.CharSequence) binds: [B:3:0x0005, B:4:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.CharSequence r0 = android.support.p000v4.text.BidiFormatter.getInstance().unicodeWrap(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|if (r2.chipDrawable.shouldDrawText() == false) goto L_0x001a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|r0 = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|PHI: r0 \l  PHI: (r0v3 java.lang.CharSequence) = (r0v2 java.lang.CharSequence), (r0v4 java.lang.CharSequence) binds: [B:6:0x0017, B:7:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|super.setText(r0, r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|if (r2.chipDrawable == null) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|r2.chipDrawable.setText(r3)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.design.chip.Chip.setText((r2v0 'this' android.support.design.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.widget.TextView$BufferType A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
}

