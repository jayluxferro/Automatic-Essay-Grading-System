digraph "CFG forandroid.support.design.circularreveal.CircularRevealHelper.shouldDrawCircularReveal()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.design.circularreveal.CircularRevealWidget$RevealInfo) = \l  (r4 I:android.support.design.circularreveal.CircularRevealHelper)\l android.support.design.circularreveal.CircularRevealHelper.revealInfo android.support.design.circularreveal.CircularRevealWidget$RevealInfo \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.support.design.circularreveal.CircularRevealWidget$RevealInfo) = \l  (r4 I:android.support.design.circularreveal.CircularRevealHelper)\l android.support.design.circularreveal.CircularRevealHelper.revealInfo android.support.design.circularreveal.CircularRevealWidget$RevealInfo \l0x0008: INVOKE  (r0 I:boolean) = \l  (r0 I:android.support.design.circularreveal.CircularRevealWidget$RevealInfo)\l android.support.design.circularreveal.CircularRevealWidget.RevealInfo.isInvalid():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: SGET  (r3 I:int) =  android.support.design.circularreveal.CircularRevealHelper.STRATEGY int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IGET  (r0 I:boolean) = \l  (r4 I:android.support.design.circularreveal.CircularRevealHelper)\l android.support.design.circularreveal.CircularRevealHelper.hasCircularRevealCache boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.design.circularreveal.CircularRevealHelper.shouldDrawCircularReveal((r4 'this' I:android.support.design.circularreveal.CircularRevealHelper A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

