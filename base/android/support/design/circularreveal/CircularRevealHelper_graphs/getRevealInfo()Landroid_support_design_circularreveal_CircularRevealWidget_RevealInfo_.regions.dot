digraph "CFG forandroid.support.design.circularreveal.CircularRevealHelper.getRevealInfo()Landroid\/support\/design\/circularreveal\/CircularRevealWidget$RevealInfo;" {
subgraph cluster_Region_1845487092 {
label = "R(1:(2:(1:2)|(3:3|(1:5)|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_918456982 {
label = "R(2:(1:2)|(3:3|(1:5)|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1258244637 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.revealInfo == null) goto L_0x0004\l}"];
subgraph cluster_Region_1556824163 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1963967786 {
label = "R(3:3|(1:5)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|android.support.design.circularreveal.CircularRevealWidget$RevealInfo android.support.design.circularreveal.CircularRevealWidget.RevealInfo r0 = new android.support.design.circularreveal.CircularRevealWidget.RevealInfo(r2.revealInfo)\l}"];
subgraph cluster_IfRegion_1062239168 {
label = "IF [B:4:0x0011] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r0.isInvalid() == true) goto L_0x0013\l}"];
subgraph cluster_Region_264234 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|r0.radius = getDistanceToFurthestCorner(r0)\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\l|return r0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public android.support.design.circularreveal.CircularRevealWidget$RevealInfo android.support.design.circularreveal.CircularRevealHelper.getRevealInfo((r2v0 'this' android.support.design.circularreveal.CircularRevealHelper A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
}

