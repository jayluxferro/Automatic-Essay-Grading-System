digraph "CFG forandroid.support.design.animation.MotionSpec.getTiming(Ljava\/lang\/String;)Landroid\/support\/design\/animation\/MotionTiming;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r1 I:android.support.design.animation.MotionSpec)\l  (r2 I:java.lang.String)\l android.support.design.animation.MotionSpec.hasTiming(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.support.v4.util.SimpleArrayMap\<java.lang.String, android.support.design.animation.MotionTiming\>) = (r1 I:android.support.design.animation.MotionSpec) android.support.design.animation.MotionSpec.timings android.support.v4.util.SimpleArrayMap \l0x0008: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:android.support.v4.util.SimpleArrayMap)\l  (r2 I:java.lang.Object)\l android.support.v4.util.SimpleArrayMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000c: CHECK_CAST  (r2 I:android.support.design.animation.MotionTiming) = (android.support.design.animation.MotionTiming) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r2 I:android.support.design.animation.MotionTiming) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0011: INVOKE  (r2 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.support.design.animation.MotionTiming android.support.design.animation.MotionSpec.getTiming((r1 'this' I:android.support.design.animation.MotionSpec A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

