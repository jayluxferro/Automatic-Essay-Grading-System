digraph "CFG forandroid.support.design.resources.MaterialResources.getTextAppearance(Landroid\/content\/Context;Landroid\/content\/res\/TypedArray;I)Landroid\/support\/design\/resources\/TextAppearance;" {
subgraph cluster_Region_1529453568 {
label = "R(1:(2:(1:7)|(1:5))) | DECL_VAR: int null\l";
node [shape=record,color=blue];
subgraph cluster_Region_455165548 {
label = "R(2:(1:7)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1142471824 {
label = "IF [B:1:0x0004, B:3:0x000b] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.hasValue(r3) == false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|ADDED_TO_REGION\l|if ((r2 = r2.getResourceId(r3, 0)) == 0) goto L_?\l}"];
subgraph cluster_Region_13844156 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_386755386 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|RETURN\l|return new android.support.design.resources.TextAppearance(r1, r2)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return null\l}"];
MethodNode[shape=record,label="{public static android.support.design.resources.TextAppearance android.support.design.resources.MaterialResources.getTextAppearance((r1v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 android.content.res.TypedArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, android.support.annotation.StyleableRes, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

