digraph "CFG forandroid.support.design.transformation.FabTransformationBehavior.createExpansionAnimation(Landroid\/view\/View;Landroid\/view\/View;ZZLandroid\/support\/design\/transformation\/FabTransformationBehavior$FabTransformationSpec;FFLjava\/util\/List;Ljava\/util\/List;)V" {
subgraph cluster_Region_1190457663 {
label = "R(2:0|(1:(3:3|(3:(1:6)|7|10)(1:11)|12))) | DECL_VAR: android.support.design.animation.MotionTiming null, android.animation.Animator null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r12 = r20\landroid.view.View r0 = r21\landroid.view.View r8 = r22\landroid.support.design.transformation.FabTransformationBehavior.FabTransformationSpec r9 = r25\l}"];
subgraph cluster_Region_2094047510 {
label = "R(1:(3:3|(3:(1:6)|7|10)(1:11)|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1620961624 {
label = "IF [B:1:0x000a] THEN: R(3:3|(3:(1:6)|7|10)(1:11)|12) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|if ((r8 instanceof android.support.design.circularreveal.CircularRevealWidget) != false) goto L_0x000d\l}"];
subgraph cluster_Region_225562360 {
label = "R(3:3|(3:(1:6)|7|10)(1:11)|12)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|android.support.design.circularreveal.CircularRevealWidget final android.support.design.circularreveal.CircularRevealWidget r13 = (android.support.design.circularreveal.CircularRevealWidget) r8\lfloat float r2 = calculateRevealCenterX(r0, r8, r9.positioning)\lfloat float r3 = calculateRevealCenterY(r0, r8, r9.positioning)\l((android.support.design.widget.FloatingActionButton) r0).getContentRect(r12.tmpRect)\lfloat float r10 = ((float) r12.tmpRect.width()) \/ 2.0f\landroid.support.design.animation.MotionTiming android.support.design.animation.MotionTiming r11 = r9.timings.getTiming(\"expansion\")\l}"];
subgraph cluster_IfRegion_2099164127 {
label = "IF [B:4:0x0036] THEN: R(3:(1:6)|7|10) ELSE: R(1:11)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0036|if (r23 == true) goto L_0x0038\l}"];
subgraph cluster_Region_1894371233 {
label = "R(3:(1:6)|7|10)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1670478535 {
label = "IF [B:5:0x0038] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0038|if (r24 == false) goto L_0x003a\l}"];
subgraph cluster_Region_1936513338 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x003a|r13.setRevealInfo(new android.support.design.circularreveal.CircularRevealWidget.RevealInfo(r2, r3, r10))\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0042|float r6 = r24 ? r13.getRevealInfo().radius : r10\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|PHI: r6 \l  PHI: (r6v2 float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|android.animation.Animator r9 = android.support.design.circularreveal.CircularRevealCompat.createCircularReveal(r13, r2, r3, android.support.design.widget.MathUtils.distanceToFurthestCorner(r2, r3, 0.0f, 0.0f, r26, r27))\lr9.addListener(new android.support.design.transformation.FabTransformationBehavior.C00944())\lcreatePreFillRadialExpansion(r22, r11.getDelay(), (int) r2, (int) r3, r6, r28)\lr15 = r11\l}"];
}
subgraph cluster_Region_317763410 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x007b|float float r6 = r13.getRevealInfo().radius\landroid.animation.Animator android.animation.Animator r14 = android.support.design.circularreveal.CircularRevealCompat.createCircularReveal(r13, r2, r3, r10)\lint int r15 = (int) r2\lint int r7 = (int) r3\landroid.view.View r1 = r22\lcreatePreFillRadialExpansion(r1, r11.getDelay(), r15, r7, r6, r28)\lr15 = r11\lcreatePostFillRadialExpansion(r1, r11.getDelay(), r11.getDuration(), r9.timings.getTotalDuration(), r15, r7, r10, r28)\lr9 = r14\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x00b3|PHI: r9 r15 \l  PHI: (r9v1 android.animation.Animator) = (r9v3 android.animation.Animator), (r9v4 android.animation.Animator) binds: [B:11:0x007b, B:10:0x004d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v0 android.support.design.animation.MotionTiming) = (r15v2 android.support.design.animation.MotionTiming), (r15v4 android.support.design.animation.MotionTiming) binds: [B:11:0x007b, B:10:0x004d] A[DONT_GENERATE, DONT_INLINE]\l|r15.apply(r9)\lr28.add(r9)\lr29.add(android.support.design.circularreveal.CircularRevealCompat.createCircularRevealListener(r13))\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0044}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x004c}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x00c4}"];
MethodNode[shape=record,label="{private void android.support.design.transformation.FabTransformationBehavior.createExpansionAnimation((r20v0 'this' android.support.design.transformation.FabTransformationBehavior A[IMMUTABLE_TYPE, THIS]), (r21v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28v0 java.util.List\<android.animation.Animator\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29v0 java.util.List\<android.animation.Animator$AnimatorListener\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/view\/View;, Landroid\/view\/View;, ZZ, Landroid\/support\/design\/transformation\/FabTransformationBehavior$FabTransformationSpec;, FF, Ljava\/util\/List\<, Landroid\/animation\/Animator;, \>;, Ljava\/util\/List\<, Landroid\/animation\/Animator$AnimatorListener;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_11[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

