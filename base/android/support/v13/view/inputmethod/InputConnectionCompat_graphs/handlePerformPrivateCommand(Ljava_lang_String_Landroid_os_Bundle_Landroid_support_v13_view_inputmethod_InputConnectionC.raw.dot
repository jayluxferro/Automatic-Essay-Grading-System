digraph "CFG forandroid.support.v13.view.inputmethod.InputConnectionCompat.handlePerformPrivateCommand(Ljava\/lang\/String;Landroid\/os\/Bundle;Landroid\/support\/v13\/view\/inputmethod\/InputConnectionCompat$OnCommitContentListener;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.COMMIT_CONTENT\" \l0x0002: INVOKE  (r7 I:boolean) = \l  (r0 I:java.lang.CharSequence)\l  (r7 I:java.lang.CharSequence)\l android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean type: STATIC \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_RESULT_RECEIVER\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|SYNTHETIC\lSplitter:B:6:0x0010\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0010\l|0x0010: INVOKE  (r1 I:android.os.Parcelable) = (r8 I:android.os.Bundle), (r1 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x0014: CHECK_CAST  (r1 I:android.os.ResultReceiver) = (android.os.ResultReceiver) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST_STR  (r2 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_URI\" \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|SYNTHETIC\lSplitter:B:9:0x0018\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0018\l|0x0018: INVOKE  (r2 I:android.os.Parcelable) = (r8 I:android.os.Bundle), (r2 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL A[Catch:\{ all \-\> 0x004b \}, TRY_ENTER]\l0x001c: CHECK_CAST  (r2 I:android.net.Uri) = (android.net.Uri) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}]\l0x001e: CONST_STR  (r3 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_DESCRIPTION\" A[Catch:\{ all \-\> 0x004b \}]\l0x0020: INVOKE  (r3 I:android.os.Parcelable) = (r8 I:android.os.Bundle), (r3 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL A[Catch:\{ all \-\> 0x004b \}]\l0x0024: CHECK_CAST  (r3 I:android.content.ClipDescription) = (android.content.ClipDescription) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}]\l0x0026: CONST_STR  (r4 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_LINK_URI\" A[Catch:\{ all \-\> 0x004b \}]\l0x0028: INVOKE  (r4 I:android.os.Parcelable) = (r8 I:android.os.Bundle), (r4 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL A[Catch:\{ all \-\> 0x004b \}]\l0x002c: CHECK_CAST  (r4 I:android.net.Uri) = (android.net.Uri) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}]\l0x002e: CONST_STR  (r5 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_FLAGS\" A[Catch:\{ all \-\> 0x004b \}]\l0x0030: INVOKE  (r5 I:int) = (r8 I:android.os.Bundle), (r5 I:java.lang.String) android.os.Bundle.getInt(java.lang.String):int type: VIRTUAL A[Catch:\{ all \-\> 0x004b \}]\l0x0034: CONST_STR  (r6 I:java.lang.String) =  \"android.support.v13.view.inputmethod.InputConnectionCompat.CONTENT_OPTS\" A[Catch:\{ all \-\> 0x004b \}]\l0x0036: INVOKE  (r8 I:android.os.Parcelable) = (r8 I:android.os.Bundle), (r6 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL A[Catch:\{ all \-\> 0x004b \}]\l0x003a: CHECK_CAST  (r8 I:android.os.Bundle) = (android.os.Bundle) (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}]\l0x003c: NEW_INSTANCE  (r6 I:android.support.v13.view.inputmethod.InputContentInfoCompat) =  android.support.v13.view.inputmethod.InputContentInfoCompat A[Catch:\{ all \-\> 0x004b \}]\l0x003e: INVOKE  \l  (r6 I:android.support.v13.view.inputmethod.InputContentInfoCompat)\l  (r2 I:android.net.Uri)\l  (r3 I:android.content.ClipDescription)\l  (r4 I:android.net.Uri)\l android.support.v13.view.inputmethod.InputContentInfoCompat.\<init\>(android.net.Uri, android.content.ClipDescription, android.net.Uri):void type: DIRECT A[Catch:\{ all \-\> 0x004b \}]\l0x0041: INVOKE  (r8 I:boolean) = \l  (r9 I:android.support.v13.view.inputmethod.InputConnectionCompat$OnCommitContentListener)\l  (r6 I:android.support.v13.view.inputmethod.InputContentInfoCompat)\l  (r5 I:int)\l  (r8 I:android.os.Bundle)\l android.support.v13.view.inputmethod.InputConnectionCompat.OnCommitContentListener.onCommitContent(android.support.v13.view.inputmethod.InputContentInfoCompat, int, android.os.Bundle):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004b \}]\l0x0044: NOP   A[TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: INVOKE  \l  (r1 I:android.os.ResultReceiver)\l  (r8 I:int)\l  (r7 I:android.os.Bundle)\l android.os.ResultReceiver.send(int, android.os.Bundle):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: RETURN  (r8 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|ExcHandler: all null\lSplitter:B:9:0x0018\l|0x004b: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|ExcHandler: all null\lSplitter:B:6:0x0010\l|0x004d: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004f|0x004f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0054 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: INVOKE  \l  (r1 I:android.os.ResultReceiver)\l  (r0 I:int)\l  (r7 I:android.os.Bundle)\l android.os.ResultReceiver.send(int, android.os.Bundle):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static boolean android.support.v13.view.inputmethod.InputConnectionCompat.handlePerformPrivateCommand((r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.support.v13.view.inputmethod.InputConnectionCompat$OnCommitContentListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
}

