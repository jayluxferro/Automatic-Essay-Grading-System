digraph "CFG forandroid.support.constraint.ConstraintSet.clone(Landroid\/support\/constraint\/ConstraintSet;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Integer, android.support.constraint.ConstraintSet$Constraint\>) = (r4 I:android.support.constraint.ConstraintSet) android.support.constraint.ConstraintSet.mConstraints java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.clear():void type: VIRTUAL \l0x0005: IGET  (r0 I:java.util.HashMap\<java.lang.Integer, android.support.constraint.ConstraintSet$Constraint\>) = (r5 I:android.support.constraint.ConstraintSet) android.support.constraint.ConstraintSet.mConstraints java.util.HashMap \l0x0007: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.HashMap) java.util.HashMap.keySet():java.util.Set type: VIRTUAL \l0x000b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l0x001b: IGET  (r2 I:java.util.HashMap\<java.lang.Integer, android.support.constraint.ConstraintSet$Constraint\>) = (r4 I:android.support.constraint.ConstraintSet) android.support.constraint.ConstraintSet.mConstraints java.util.HashMap \l0x001d: IGET  (r3 I:java.util.HashMap\<java.lang.Integer, android.support.constraint.ConstraintSet$Constraint\>) = (r5 I:android.support.constraint.ConstraintSet) android.support.constraint.ConstraintSet.mConstraints java.util.HashMap \l0x001f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0023: CHECK_CAST  (r3 I:android.support.constraint.ConstraintSet$Constraint) = (android.support.constraint.ConstraintSet$Constraint) (r3 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r3 I:android.support.constraint.ConstraintSet$Constraint) = (r3 I:android.support.constraint.ConstraintSet$Constraint) android.support.constraint.ConstraintSet.Constraint.clone():android.support.constraint.ConstraintSet$Constraint type: VIRTUAL \l0x0029: INVOKE  \l  (r2 I:java.util.HashMap)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.constraint.ConstraintSet.clone((r4 'this' I:android.support.constraint.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r5 I:android.support.constraint.ConstraintSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

