digraph "CFG forandroid.support.constraint.ConstraintSet.setMargin(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.constraint.ConstraintSet$Constraint r1 = get(r1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|switch(r2) \{\l    case 1: goto L_0x0026;\l    case 2: goto L_0x0023;\l    case 3: goto L_0x0020;\l    case 4: goto L_0x001d;\l    case 5: goto L_0x0015;\l    case 6: goto L_0x0012;\l    case 7: goto L_0x000f;\l    default: goto L_0x0007;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000e|throw new java.lang.IllegalArgumentException(\"unknown constraint\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r1.endMargin = r3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|r1.startMargin = r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015}"];
Node_7 [shape=record,label="{7\:\ 0x001c|throw new java.lang.IllegalArgumentException(\"baseline does not support margins\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|r1.bottomMargin = r3\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|r1.topMargin = r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|r1.rightMargin = r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|r1.leftMargin = r3\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.ConstraintSet.setMargin((r0v0 'this' android.support.constraint.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r1v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_8;
Node_1 -> Node_9;
Node_1 -> Node_10;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_4 -> Node_13;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_8 -> Node_15;
Node_9 -> Node_16;
Node_10 -> Node_17;
Node_11 -> Node_12;
}

