digraph "CFG forandroid.support.constraint.ConstraintSet.removeFromVerticalChain(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r9.mConstraints.containsKey(java.lang.Integer.valueOf(r10)) == false) goto L_0x0057\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|android.support.constraint.ConstraintSet$Constraint r0 = r9.mConstraints.get(java.lang.Integer.valueOf(r10))\lint r7 = r0.topToBottom\lint r8 = r0.bottomToTop\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|if (r7 != \-1) goto L_0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (r8 == \-1) goto L_0x0057\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|if (r7 == \-1) goto L_0x0036\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if (r8 == \-1) goto L_0x0036\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|r1 = r9\lconnect(r7, 4, r8, 3, 0)\lconnect(r8, 3, r7, 4, 0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|if (r7 != \-1) goto L_0x003a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|if (r8 == \-1) goto L_0x0057\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a}"];
Node_11 [shape=record,label="{11\:\ 0x003c|if (r0.bottomToBottom == \-1) goto L_0x0049\l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|r1 = r9\lr2 = r7\lconnect(r2, 4, r0.bottomToBottom, 4, 0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0049}"];
Node_14 [shape=record,label="{14\:\ 0x004b|if (r0.topToTop == \-1) goto L_0x0057\l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|r1 = r9\lr2 = r8\lconnect(r2, 3, r0.topToTop, 3, 0)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|clear(r10, 3)\lclear(r10, 4)\l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.ConstraintSet.removeFromVerticalChain((r9v0 'this' android.support.constraint.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_16;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

