digraph "CFG forandroid.support.constraint.ConstraintSet.clone(Landroid\/support\/constraint\/Constraints;)V" {
subgraph cluster_Region_1614120668 {
label = "R(2:0|(2:2|(4:(1:6)|7|(1:9)(0)|10)(1:12)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r10.getChildCount()\lr9.mConstraints.clear()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_195974421 {
label = "LOOP:0: (2:2|(4:(1:6)|7|(1:9)(0)|10)(1:12))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:10:0x004d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:10:0x004d\l|if (r1 \< r0) goto L_0x000c\l}"];
subgraph cluster_Region_1404402306 {
label = "R(2:2|(4:(1:6)|7|(1:9)(0)|10)(1:12))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000c|android.view.View android.view.View r2 = r10.getChildAt(r1)\landroid.support.constraint.Constraints$LayoutParams android.support.constraint.Constraints.LayoutParams r3 = (android.support.constraint.Constraints.LayoutParams) r2.getLayoutParams()\lint int r4 = r2.getId()\l}"];
subgraph cluster_IfRegion_790735743 {
label = "IF [B:3:0x001b] THEN: R(4:(1:6)|7|(1:9)(0)|10) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001b|if (r4 != \-1) goto L_0x001d\l}"];
subgraph cluster_Region_1351827393 {
label = "R(4:(1:6)|7|(1:9)(0)|10)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1463330163 {
label = "IF [B:5:0x0027] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0027|if (r9.mConstraints.containsKey(java.lang.Integer.valueOf(r4)) == false) goto L_0x0029\l}"];
subgraph cluster_Region_413633199 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0029|r9.mConstraints.put(java.lang.Integer.valueOf(r4), new android.support.constraint.ConstraintSet.Constraint())\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0038|android.support.constraint.ConstraintSet$Constraint android.support.constraint.ConstraintSet.Constraint r5 = r9.mConstraints.get(java.lang.Integer.valueOf(r4))\l}"];
subgraph cluster_IfRegion_528090446 {
label = "IF [B:8:0x0046] THEN: R(1:9) ELSE: R(0)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0046|if ((r2 instanceof android.support.constraint.ConstraintHelper) == true) goto L_0x0048\l}"];
subgraph cluster_Region_1711668553 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0048|r5.fillFromConstraints((android.support.constraint.ConstraintHelper) r2, r4, r3)\l}"];
}
subgraph cluster_Region_953039074 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_10 [shape=record,label="{10\:\ 0x004d|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:10:0x004d\l|r5.fillFromConstraints(r4, r3)\lr1++\l}"];
}
subgraph cluster_Region_593991869 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x005a|throw new java.lang.RuntimeException(\"All children of ConstraintLayout must have ids to use ConstraintSet\")\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x001d}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0053}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x005b}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x005b|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0053|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x004d|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x004d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.ConstraintSet.clone((r9v0 'this' android.support.constraint.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r10v0 android.support.constraint.Constraints A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_17[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_1;
Node_4 -> Node_5;
Node_11 -> Node_12;
Node_14 -> Node_13;
Node_15 -> Node_11;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

