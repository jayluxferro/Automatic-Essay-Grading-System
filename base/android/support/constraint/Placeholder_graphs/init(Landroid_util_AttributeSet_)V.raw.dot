digraph "CFG forandroid.support.constraint.Placeholder.init(Landroid\/util\/AttributeSet;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mEmptyVisibility int \l0x0002: INVOKE  (r4 I:android.view.View), (r0 I:int) android.view.View.setVisibility(int):void type: SUPER \l0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0006: IPUT  (r0 I:int), (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mContentId int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:android.content.Context) = (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.getContext():android.content.Context type: VIRTUAL \l0x000e: SGET  (r1 I:int[]) =  android.support.constraint.R.styleable.ConstraintLayout_placeholder int[] \l0x0010: INVOKE  (r5 I:android.content.res.TypedArray) = \l  (r0 I:android.content.Context)\l  (r5 I:android.util.AttributeSet)\l  (r1 I:int[])\l android.content.Context.obtainStyledAttributes(android.util.AttributeSet, int[]):android.content.res.TypedArray type: VIRTUAL \l0x0014: INVOKE  (r0 I:int) = (r5 I:android.content.res.TypedArray) android.content.res.TypedArray.getIndexCount():int type: VIRTUAL \l0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x003b \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: INVOKE  (r2 I:int) = (r5 I:android.content.res.TypedArray), (r1 I:int) android.content.res.TypedArray.getIndex(int):int type: VIRTUAL \l0x001f: SGET  (r3 I:int) =  android.support.constraint.R.styleable.ConstraintLayout_placeholder_content int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r3 I:int) = (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mContentId int \l0x0025: INVOKE  (r2 I:int) = \l  (r5 I:android.content.res.TypedArray)\l  (r2 I:int)\l  (r3 I:int)\l android.content.res.TypedArray.getResourceId(int, int):int type: VIRTUAL \l0x0029: IPUT  (r2 I:int), (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mContentId int \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: SGET  (r3 I:int) =  android.support.constraint.R.styleable.ConstraintLayout_placeholder_emptyVisibility int \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IGET  (r3 I:int) = (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mEmptyVisibility int \l0x0032: INVOKE  (r2 I:int) = \l  (r5 I:android.content.res.TypedArray)\l  (r2 I:int)\l  (r3 I:int)\l android.content.res.TypedArray.getInt(int, int):int type: VIRTUAL \l0x0036: IPUT  (r2 I:int), (r4 I:android.support.constraint.Placeholder) android.support.constraint.Placeholder.mEmptyVisibility int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.constraint.Placeholder.init((r4 'this' I:android.support.constraint.Placeholder A[IMMUTABLE_TYPE, THIS]), (r5 I:android.util.AttributeSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_3;
}

