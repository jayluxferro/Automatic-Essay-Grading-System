digraph "CFG forandroid.support.constraint.solver.LinearSystem.minimizeGoal(Landroid\/support\/constraint\/solver\/LinearSystem$Row;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l0x0006: IGET  (r1 I:long) = (r0 I:android.support.constraint.solver.Metrics) android.support.constraint.solver.Metrics.minimizeGoal long \l0x0008: CONST  (r3 I:?[long, double]) = (1 ?[long, double]) \l0x000a: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x000b: IPUT  \l  (r1 I:long)\l  (r0 I:android.support.constraint.solver.Metrics)\l android.support.constraint.solver.Metrics.minimizeGoal long \l0x000d: SGET  (r0 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l0x000f: SGET  (r1 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l0x0011: IGET  (r1 I:long) = (r1 I:android.support.constraint.solver.Metrics) android.support.constraint.solver.Metrics.maxVariables long \l0x0013: IGET  (r3 I:int) = (r5 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumColumns int \l0x0015: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0016: INVOKE  (r1 I:long) = (r1 I:long), (r3 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x001a: IPUT  \l  (r1 I:long)\l  (r0 I:android.support.constraint.solver.Metrics)\l android.support.constraint.solver.Metrics.maxVariables long \l0x001c: SGET  (r0 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l0x001e: SGET  (r1 I:android.support.constraint.solver.Metrics) =  android.support.constraint.solver.LinearSystem.sMetrics android.support.constraint.solver.Metrics \l0x0020: IGET  (r1 I:long) = (r1 I:android.support.constraint.solver.Metrics) android.support.constraint.solver.Metrics.maxRows long \l0x0022: IGET  (r3 I:int) = (r5 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumRows int \l0x0024: CAST  (r3 I:long) = (long) (r3 I:int) \l0x0025: INVOKE  (r1 I:long) = (r1 I:long), (r3 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x0029: IPUT  \l  (r1 I:long)\l  (r0 I:android.support.constraint.solver.Metrics)\l android.support.constraint.solver.Metrics.maxRows long \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x002c: CHECK_CAST  (r0 I:android.support.constraint.solver.ArrayRow) = (android.support.constraint.solver.ArrayRow) (r0 I:?[OBJECT, ARRAY]) \l0x002e: INVOKE  \l  (r5 I:android.support.constraint.solver.LinearSystem)\l  (r0 I:android.support.constraint.solver.ArrayRow)\l android.support.constraint.solver.LinearSystem.updateRowFromVariables(android.support.constraint.solver.ArrayRow):void type: DIRECT \l0x0031: INVOKE  \l  (r5 I:android.support.constraint.solver.LinearSystem)\l  (r6 I:android.support.constraint.solver.LinearSystem$Row)\l android.support.constraint.solver.LinearSystem.enforceBFS(android.support.constraint.solver.LinearSystem$Row):int type: DIRECT \l0x0034: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: INVOKE  \l  (r5 I:android.support.constraint.solver.LinearSystem)\l  (r6 I:android.support.constraint.solver.LinearSystem$Row)\l  (r0 I:boolean)\l android.support.constraint.solver.LinearSystem.optimize(android.support.constraint.solver.LinearSystem$Row, boolean):int type: DIRECT \l0x0038: INVOKE  (r5 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.computeValues():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{void android.support.constraint.solver.LinearSystem.minimizeGoal((r5 'this' I:android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r6 I:android.support.constraint.solver.LinearSystem$Row A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

