digraph "CFG forandroid.support.constraint.solver.LinearSystem.minimize()V" {
subgraph cluster_Region_2137206596 {
label = "R(2:(1:2)|(2:(4:(1:7)|8|(1:(2:14|1)(1:(1:23)(1:13)))|(2:(2:16|25)|(3:(1:19)|20|26)))|(1:21)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_994172529 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (sMetrics != null) goto L_0x0006\l}"];
subgraph cluster_Region_11442716 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|sMetrics.minimize++\l}"];
}
}
subgraph cluster_Region_2071323644 {
label = "R(2:(4:(1:7)|8|(1:(2:14|1)(1:(1:23)(1:13)))|(2:(2:16|25)|(3:(1:19)|20|26)))|(1:21))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_495643353 {
label = "IF [B:4:0x000f] THEN: R(4:(1:7)|8|(1:(2:14|1)(1:(1:23)(1:13)))|(2:(2:16|25)|(3:(1:19)|20|26))) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r5.graphOptimizer == true) goto L_0x0011\l}"];
subgraph cluster_Region_1880436788 {
label = "R(4:(1:7)|8|(1:(2:14|1)(1:(1:23)(1:13)))|(2:(2:16|25)|(3:(1:19)|20|26)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_671944015 {
label = "IF [B:6:0x0013] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0013|if (sMetrics != null) goto L_0x0015\l}"];
subgraph cluster_Region_1543965736 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0015|sMetrics.graphOptimizer++\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x001c|boolean r0 = false\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_137981527 {
label = "LOOP:0: (1:(2:14|1)(1:(1:23)(1:13)))";
node [shape=record,color=blue];
subgraph cluster_Region_1118802347 {
label = "R(1:(2:14|1)(1:(1:23)(1:13)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_731707383 {
label = "IF [B:10:0x0020] THEN: R(2:14|1) ELSE: R(1:(1:23)(1:13))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0020|if (r3 \>= r5.mNumRows) goto L_0x002e\l}"];
subgraph cluster_Region_563621953 {
label = "R(2:14|1)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x002e|EDGE_INSN: B:14:0x002e\-\>B:15:0x002f ?: BREAK  \l|r0 = true\l}"];
Node_InsnContainer_42503108 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_1720361457 {
label = "R(1:(1:23)(1:13)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1265025277 {
label = "IF [B:12:0x0028] THEN: R(1:23) ELSE: R(1:13) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0028|if (r5.mRows[r3].isSimpleDefinition == false) goto L_0x002f\l}"];
subgraph cluster_Region_620900513 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x002f|SYNTHETIC\lEDGE_INSN: B:23:0x002f\-\>B:15:0x002f ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_1926364425 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002b|LOOP_END\lLOOP:0: B:9:0x001e\-\>B:13:0x002b\l|r3++\l}"];
}
}
}
}
}
}
subgraph cluster_Region_455004003 {
label = "R(2:(2:16|25)|(3:(1:19)|20|26))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1881304207 {
label = "IF [B:15:0x002f] THEN: R(2:16|25) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002f|EDGE_INSN: B:14:0x002e\-\>B:15:0x002f ?: BREAK  \lEDGE_INSN: B:23:0x002f\-\>B:15:0x002f ?: BREAK  \lPHI: r0 \l  PHI: (r0v6 boolean) = (r0v5 boolean), (r0v4 boolean) binds: [B:14:0x002e, B:23:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x0031\l}"];
subgraph cluster_Region_1569628527 {
label = "R(2:16|25)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0031|minimizeGoal(r5.mGoal)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1849169414 {
label = "R(3:(1:19)|20|26)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1510716504 {
label = "IF [B:18:0x0039] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0039|if (sMetrics != null) goto L_0x003b\l}"];
subgraph cluster_Region_922946989 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x003b|sMetrics.fullySolved++\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x0042|computeValues()\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
}
subgraph cluster_Region_523130875 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0046|minimizeGoal(r5.mGoal)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000d}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v4 int) binds: [B:8:0x001c, B:13:0x002b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x001e\-\>B:13:0x002b\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0022}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0037}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x002e|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.LinearSystem.minimize((r5v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_21[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_22;
Node_14 -> Node_15;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_23 -> Node_15;
Node_13 -> Node_9;
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_18 -> Node_19;
Node_18 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_26;
Node_21 -> Node_24;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_17 -> Node_18;
Node_22 -> Node_14;
}

