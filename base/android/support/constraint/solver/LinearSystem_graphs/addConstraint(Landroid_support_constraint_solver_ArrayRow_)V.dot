digraph "CFG forandroid.support.constraint.solver.LinearSystem.addConstraint(Landroid\/support\/constraint\/solver\/ArrayRow;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r8 != null) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (sMetrics == null) goto L_0x001b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|android.support.constraint.solver.Metrics r0 = sMetrics\lr0.constraints = r0.constraints + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r8.isSimpleDefinition == false) goto L_0x001b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|android.support.constraint.solver.Metrics r0 = sMetrics\lr0.simpleconstraints = r0.simpleconstraints + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if ((r7.mNumRows + 1) \>= r7.mMaxRows) goto L_0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023}"];
Node_10 [shape=record,label="{10\:\ 0x0028|if ((r7.mNumColumns + 1) \< r7.mMaxColumns) goto L_0x002d\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|increaseTableSize()\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|r0 = false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|if (r8.isSimpleDefinition != false) goto L_0x008b\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|updateRowFromVariables(r8)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|if (r8.isEmpty() == false) goto L_0x003c\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|r8.ensurePositiveConstant()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|if (r8.chooseSubject(r7) == false) goto L_0x0084\l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|android.support.constraint.solver.SolverVariable r0 = createExtraVariable()\lr8.variable = r0\laddRow(r8)\lr7.mTempGoal.initFromRow(r8)\loptimize(r7.mTempGoal, true)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|if (r0.definitionId != \-1) goto L_0x0083\l}"];
Node_21 [shape=record,label="{21\:\ 0x005d}"];
Node_22 [shape=record,label="{22\:\ 0x005f|if (r8.variable != r0) goto L_0x0075\l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|android.support.constraint.solver.SolverVariable r0 = r8.pickPivot(r0)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0065|if (r0 == null) goto L_0x0075\l}"];
Node_25 [shape=record,label="{25\:\ 0x0067}"];
Node_26 [shape=record,label="{26\:\ 0x0069|if (sMetrics == null) goto L_0x0072\l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|android.support.constraint.solver.Metrics r4 = sMetrics\lr4.pivots = r4.pivots + 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0072|r8.pivot(r0)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0075}"];
Node_30 [shape=record,label="{30\:\ 0x0077|if (r8.isSimpleDefinition != false) goto L_0x007e\l}"];
Node_31 [shape=record,label="{31\:\ 0x0079|r8.variable.updateReferencesWithNewDefinition(r8)\l}"];
Node_32 [shape=record,label="{32\:\ 0x007e|r7.mNumRows = r7.mNumRows \- 1\l}"];
Node_33 [shape=record,label="{33\:\ 0x0083|r0 = true\l}"];
Node_34 [shape=record,label="{34\:\ 0x0084|PHI: r0 \l  PHI: (r0v5 boolean) = (r0v3 boolean), (r0v7 boolean) binds: [B:18:0x0043, B:33:0x0083] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0088|if (r8.hasKeyVariable() != false) goto L_0x008b\l}"];
Node_36 [shape=record,label="{36\:\ 0x008a|RETURN\l|return\l}"];
Node_37 [shape=record,label="{37\:\ 0x008b|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v5 boolean) binds: [B:13:0x0030, B:35:0x0088] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L_?\l}"];
Node_38 [shape=record,label="{38\:\ 0x008d|addRow(r8)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.LinearSystem.addConstraint((r7v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r8v0 android.support.constraint.solver.ArrayRow A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_37;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_34;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_39;
}

