digraph "CFG forandroid.support.constraint.solver.LinearSystem.optimize(Landroid\/support\/constraint\/solver\/Goal;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4 = false\lr12 = 0\lr6 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r6 \l  PHI: (r6v1 'i' int) = (r6v0 'i' int), (r6v8 'i' int) binds: [B:0:0x0000, B:3:0x0009] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:3:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r6 \>= r18.mNumColumns) goto L_0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:3:0x0009\l|r18.mAlreadyTestedCandidates[r6] = false\lint r6 = r6 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|r11 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_START\lPHI: r4 r11 r12 \l  PHI: (r4v1 'done' boolean) = (r4v0 'done' boolean), (r4v3 'done' boolean) binds: [B:4:0x0014, B:43:0x0015] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'tested' int) = (r11v0 'tested' int), (r11v2 'tested' int) binds: [B:4:0x0014, B:43:0x0015] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'tries' int) = (r12v0 'tries' int), (r12v2 'tries' int) binds: [B:4:0x0014, B:43:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0015\-\>B:43:0x0015\l|if (r4 != false) goto L_0x00c2\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|int r12 = r12 + 1\landroid.support.constraint.solver.SolverVariable r8 = r19.getPivotCandidate()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r8 == null) goto L_0x002c\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f}"];
Node_9 [shape=record,label="{9\:\ 0x0029|if (r18.mAlreadyTestedCandidates[r8.f3id] == false) goto L_0x004c\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|r8 = null\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|PHI: r4 r8 r11 \l  PHI: (r4v2 'done' boolean) = (r4v1 'done' boolean), (r4v1 'done' boolean), (r4v6 'done' boolean), (r4v1 'done' boolean) binds: [B:7:0x001d, B:19:0x005e, B:20:0x0060, B:10:0x002b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 'pivotCandidate' android.support.constraint.solver.SolverVariable) = (r8v0 'pivotCandidate' android.support.constraint.solver.SolverVariable), (r8v0 'pivotCandidate' android.support.constraint.solver.SolverVariable), (r8v0 'pivotCandidate' android.support.constraint.solver.SolverVariable), (r8v2 'pivotCandidate' android.support.constraint.solver.SolverVariable) binds: [B:7:0x001d, B:19:0x005e, B:20:0x0060, B:10:0x002b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v2 'tested' int) = (r11v1 'tested' int), (r11v3 'tested' int), (r11v3 'tested' int), (r11v1 'tested' int) binds: [B:7:0x001d, B:19:0x005e, B:20:0x0060, B:10:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|if (r8 == null) goto L_0x00bf\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|r7 = Float.MAX_VALUE\lr10 = \-1\lr6 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|LOOP_START\lPHI: r6 r7 r10 \l  PHI: (r6v3 'i' int) = (r6v2 'i' int), (r6v7 'i' int) binds: [B:12:0x002e, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 'min' float) = (r7v0 'min' float), (r7v3 'min' float) binds: [B:12:0x002e, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 'pivotRowIndex' int) = (r10v0 'pivotRowIndex' int), (r10v3 'pivotRowIndex' int) binds: [B:12:0x002e, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:13:0x0033\-\>B:17:0x0049\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|if (r6 \>= r18.mNumRows) goto L_0x007f\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|r3 = r18.mRows[r6]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|if (r3.variable.mType != android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED) goto L_0x0062\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|LOOP_END\lPHI: r7 r10 \l  PHI: (r7v3 'min' float) = (r7v1 'min' float), (r7v1 'min' float), (r7v1 'min' float), (r7v1 'min' float), (r7v2 'min' float) binds: [B:50:0x0049, B:51:0x0049, B:52:0x0049, B:53:0x0049, B:54:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v3 'pivotRowIndex' int) = (r10v1 'pivotRowIndex' int), (r10v1 'pivotRowIndex' int), (r10v1 'pivotRowIndex' int), (r10v1 'pivotRowIndex' int), (r10v2 'pivotRowIndex' int) binds: [B:50:0x0049, B:51:0x0049, B:52:0x0049, B:53:0x0049, B:54:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:13:0x0033\-\>B:17:0x0049\l|int r6 = r6 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|r18.mAlreadyTestedCandidates[r8.f3id] = true\lint r11 = r11 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|if (r11 \< r18.mNumColumns) goto L_0x002c\l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|r4 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x0062}"];
Node_22 [shape=record,label="{22\:\ 0x0066|if (r3.hasVariable(r8) == false) goto L_0x0049\l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|float r2 = r3.variables.get(r8)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0071|if ((r2 \> 0.0f ? 1 : (r2 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0049\l}"];
Node_25 [shape=record,label="{25\:\ 0x0073|float r13 = (\-r3.constantValue) \/ r2\l}"];
Node_26 [shape=record,label="{26\:\ 0x007a|if ((r13 \> r7 ? 1 : (r13 == r7 ? 0 : \-1)) \>= 0) goto L_0x0049\l}"];
Node_27 [shape=record,label="{27\:\ 0x007c|r7 = r13\lr10 = r6\l}"];
Node_28 [shape=record,label="{28\:\ 0x007f}"];
Node_29 [shape=record,label="{29\:\ 0x0080|if (r10 \<= \-1) goto L_0x00bc\l}"];
Node_30 [shape=record,label="{30\:\ 0x0082|r9 = r18.mRows[r10]\lr9.variable.definitionId = \-1\lr9.pivot(r8)\lr9.variable.definitionId = r10\lr6 = 0\l}"];
Node_31 [shape=record,label="{31\:\ 0x0098|LOOP_START\lPHI: r6 \l  PHI: (r6v5 'i' int) = (r6v4 'i' int), (r6v6 'i' int) binds: [B:30:0x0082, B:33:0x009e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:31:0x0098\-\>B:33:0x009e\l}"];
Node_32 [shape=record,label="{32\:\ 0x009c|if (r6 \>= r18.mNumRows) goto L_0x00aa\l}"];
Node_33 [shape=record,label="{33\:\ 0x009e|LOOP_END\lLOOP:3: B:31:0x0098\-\>B:33:0x009e\l|r18.mRows[r6].updateRowWithEquation(r9)\lint r6 = r6 + 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x00aa|r19.updateFromSystem(r18)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00b1|SYNTHETIC\lSplitter:B:35:0x00b1\l}"];
Node_36 [shape=record,label="{36\:\ ?|Catch:\{ Exception \-\> 0x00b6 \}\lSplitter:B:35:0x00b1\l|enforceBFS(r19)     \/\/ Catch:\{ Exception \-\> 0x00b6 \}\l}"];
Node_37 [shape=record,label="{37\:\ 0x00b6|ExcHandler: Exception (r5v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:35:0x00b1\l|java.lang.Exception r5 = move\-exception\l}"];
Node_38 [shape=record,label="{38\:\ 0x00b7|r5.printStackTrace()\l}"];
Node_39 [shape=record,label="{39\:\ 0x00bc|r4 = true\l}"];
Node_40 [shape=record,label="{40\:\ 0x00bf|r4 = true\l}"];
Node_41 [shape=record,label="{41\:\ 0x00c2|RETURN\l|return r12\l}"];
Node_42 [shape=record,label="{42\:\ 0x0014|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0015|LOOP_END\lSYNTHETIC\lPHI: r4 \l  PHI: (r4v3 'done' boolean) = (r4v4 'done' boolean), (r4v5 'done' boolean), (r4v2 'done' boolean), (r4v2 'done' boolean) binds: [B:48:0x0015, B:47:0x0015, B:46:0x0015, B:45:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0015\-\>B:43:0x0015\l}"];
Node_44 [shape=record,label="{44\:\ 0x00c2|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0015|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0015|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0015|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0015|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x007f|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0049|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0049|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0049|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0049|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0049|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x00aa|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private int android.support.constraint.solver.LinearSystem.optimize((r18v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r19v0 'goal' android.support.constraint.solver.Goal A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_42;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_44;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_40;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_49;
Node_15 -> Node_16;
Node_16 -> Node_21;
Node_16 -> Node_50[style=dashed];
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_11;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_51;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_52;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_53;
Node_27 -> Node_54;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_39;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_55;
Node_33 -> Node_31;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_46;
Node_39 -> Node_47;
Node_40 -> Node_48;
Node_42 -> Node_4;
Node_43 -> Node_5;
Node_44 -> Node_41;
Node_45 -> Node_43;
Node_46 -> Node_43;
Node_47 -> Node_43;
Node_48 -> Node_43;
Node_49 -> Node_28;
Node_50 -> Node_17;
Node_51 -> Node_17;
Node_52 -> Node_17;
Node_53 -> Node_17;
Node_54 -> Node_17;
Node_55 -> Node_34;
}

