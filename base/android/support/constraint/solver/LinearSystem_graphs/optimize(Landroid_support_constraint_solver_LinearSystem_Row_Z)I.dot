digraph "CFG forandroid.support.constraint.solver.LinearSystem.optimize(Landroid\/support\/constraint\/solver\/LinearSystem$Row;Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (sMetrics == null) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|android.support.constraint.solver.Metrics r15 = sMetrics\lr15.optimize = r15.optimize + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|r2 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v6 int) binds: [B:3:0x000d, B:6:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000f\-\>B:6:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r2 \>= r13.mNumColumns) goto L_0x001a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|LOOP_END\lLOOP:0: B:4:0x000f\-\>B:6:0x0013\l|r13.mAlreadyTestedCandidates[r2] = false\lint r2 = r2 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|r2 = false\lr3 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|LOOP_START\lPHI: r2 r3 \l  PHI: (r2v3 boolean) = (r2v2 boolean), (r2v4 boolean) binds: [B:7:0x001a, B:48:0x001c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:7:0x001a, B:48:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x001c\-\>B:48:0x001c\l|if (r2 != false) goto L_0x00bf\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e}"];
Node_10 [shape=record,label="{10\:\ 0x0020|if (sMetrics == null) goto L_0x0029\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|android.support.constraint.solver.Metrics r4 = sMetrics\lr4.iterations = r4.iterations + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|int r3 = r3 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|if (r3 \< (r13.mNumColumns * 2)) goto L_0x0032\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|RETURN\l|return r3\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032}"];
Node_16 [shape=record,label="{16\:\ 0x0037|if (r14.getKey() == null) goto L_0x0043\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|r13.mAlreadyTestedCandidates[r14.getKey().f3id] = true\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|android.support.constraint.solver.SolverVariable r4 = r14.getPivotCandidate(r13, r13.mAlreadyTestedCandidates)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|if (r4 == null) goto L_0x005a\l}"];
Node_20 [shape=record,label="{20\:\ 0x004b}"];
Node_21 [shape=record,label="{21\:\ 0x0051|if (r13.mAlreadyTestedCandidates[r4.f3id] == false) goto L_0x0054\l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|RETURN\l|return r3\l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|r13.mAlreadyTestedCandidates[r4.f3id] = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|if (r4 == null) goto L_0x00bc\l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|r6 = 0\lr8 = \-1\lr9 = Float.MAX_VALUE\l}"];
Node_26 [shape=record,label="{26\:\ 0x0065|LOOP_START\lPHI: r6 r8 r9 \l  PHI: (r6v2 int) = (r6v1 int), (r6v6 int) binds: [B:25:0x005c, B:39:0x0096] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:25:0x005c, B:39:0x0096] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 float) = (r9v0 float), (r9v4 float) binds: [B:25:0x005c, B:39:0x0096] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:26:0x0065\-\>B:39:0x0096\l}"];
Node_27 [shape=record,label="{27\:\ 0x0067|if (r6 \>= r13.mNumRows) goto L_0x0099\l}"];
Node_28 [shape=record,label="{28\:\ 0x0069|r10 = r13.mRows[r6]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0073|if (r10.variable.mType != android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED) goto L_0x0076\l}"];
Node_30 [shape=record,label="{30\:\ 0x0076}"];
Node_31 [shape=record,label="{31\:\ 0x0078|if (r10.isSimpleDefinition == false) goto L_0x007b\l}"];
Node_32 [shape=record,label="{32\:\ 0x007b}"];
Node_33 [shape=record,label="{33\:\ 0x007f|if (r10.hasVariable(r4) == false) goto L_0x0096\l}"];
Node_34 [shape=record,label="{34\:\ 0x0081|float r11 = r10.variables.get(r4)\l}"];
Node_35 [shape=record,label="{35\:\ 0x008a|if ((r11 \> 0.0f ? 1 : (r11 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0096\l}"];
Node_36 [shape=record,label="{36\:\ 0x008c|float r10 = (\-r10.constantValue) \/ r11\l}"];
Node_37 [shape=record,label="{37\:\ 0x0092|if ((r10 \> r9 ? 1 : (r10 == r9 ? 0 : \-1)) \>= 0) goto L_0x0096\l}"];
Node_38 [shape=record,label="{38\:\ 0x0094|r8 = r6\lr9 = r10\l}"];
Node_39 [shape=record,label="{39\:\ 0x0096|LOOP_END\lPHI: r8 r9 \l  PHI: (r8v2 int) = (r8v1 int), (r8v1 int), (r8v1 int), (r8v1 int), (r8v1 int), (r8v3 int) binds: [B:59:0x0096, B:60:0x0096, B:56:0x0096, B:57:0x0096, B:58:0x0096, B:55:0x0096] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v4 float) = (r9v1 float), (r9v1 float), (r9v1 float), (r9v1 float), (r9v1 float), (r9v5 float) binds: [B:59:0x0096, B:60:0x0096, B:56:0x0096, B:57:0x0096, B:58:0x0096, B:55:0x0096] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:26:0x0065\-\>B:39:0x0096\l|int r6 = r6 + 1\l}"];
Node_40 [shape=record,label="{40\:\ 0x0099|if (r8 \<= \-1) goto L_0x00bc\l}"];
Node_41 [shape=record,label="{41\:\ 0x009b|r5 = r13.mRows[r8]\lr5.variable.definitionId = \-1\l}"];
Node_42 [shape=record,label="{42\:\ 0x00a5|if (sMetrics == null) goto L_0x00ae\l}"];
Node_43 [shape=record,label="{43\:\ 0x00a7|android.support.constraint.solver.Metrics r6 = sMetrics\lr6.pivots = r6.pivots + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x00ae|r5.pivot(r4)\lr5.variable.definitionId = r8\lr5.variable.updateReferencesWithNewDefinition(r5)\l}"];
Node_45 [shape=record,label="{45\:\ 0x00bc|r2 = true\l}"];
Node_46 [shape=record,label="{46\:\ 0x00bf|RETURN\l|return r3\l}"];
Node_47 [shape=record,label="{47\:\ 0x001a|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x001c|LOOP_END\lSYNTHETIC\lPHI: r2 \l  PHI: (r2v4 boolean) = (r2v5 boolean), (r2v3 boolean) binds: [B:53:0x001c, B:52:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x001c\-\>B:48:0x001c\l}"];
Node_49 [shape=record,label="{49\:\ 0x0053|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x00bf|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0031|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x001c|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x001c|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0099|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0096|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0096|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0096|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0096|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0096|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0096|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final int android.support.constraint.solver.LinearSystem.optimize((r13v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r14v0 android.support.constraint.solver.LinearSystem$Row A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_47;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_50;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_51[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_49[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_45;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_54;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_59[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_60[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_56;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_57;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_58;
Node_38 -> Node_55;
Node_39 -> Node_26;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_45;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_52;
Node_45 -> Node_53;
Node_47 -> Node_7;
Node_48 -> Node_8;
Node_49 -> Node_22;
Node_50 -> Node_46;
Node_51 -> Node_14;
Node_52 -> Node_48;
Node_53 -> Node_48;
Node_54 -> Node_40;
Node_55 -> Node_39;
Node_56 -> Node_39;
Node_57 -> Node_39;
Node_58 -> Node_39;
Node_59 -> Node_39;
Node_60 -> Node_39;
}

