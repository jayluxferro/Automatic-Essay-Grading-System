digraph "CFG forandroid.support.constraint.solver.LinearSystem.enforceBFS(Landroid\/support\/constraint\/solver\/Goal;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0005: IGET  (r0 I:int) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumRows int \l0x0007: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000f: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x0011: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0013: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0015: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r0 I:android.support.constraint.solver.SolverVariable) = (r0 I:android.support.constraint.solver.ArrayRow) android.support.constraint.solver.ArrayRow.variable android.support.constraint.solver.SolverVariable \l0x0019: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l0x001d: IGET  (r0 I:android.support.constraint.solver.SolverVariable$Type) = (r0 I:android.support.constraint.solver.SolverVariable) android.support.constraint.solver.SolverVariable.mType android.support.constraint.solver.SolverVariable$Type \l0x001f: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0021: SGET  (r19 I:android.support.constraint.solver.SolverVariable$Type) =  android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED android.support.constraint.solver.SolverVariable$Type \l0x0023: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0025: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x002e: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x0030: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0032: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0036: IGET  (r0 I:float) = (r0 I:android.support.constraint.solver.ArrayRow) android.support.constraint.solver.ArrayRow.constantValue float \l0x0038: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: CMP_G  (r18 I:int) = (r18 I:float), (r19 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0029 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: CONST  (r7 I:?[boolean, int, float, short, byte, char] A[D('infeasibleSystem' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('infeasibleSystem' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0128 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0044: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tries' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('done' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0128 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: ARITH  (r15 I:int A[D('tries' int)]) = (r15 I:int A[D('tries' int)]) + (1 int) \l0x0049: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (2139095039(0x7f7fffff, float:3.4028235E38) ?[int, float, short, byte, char])\l \l0x004c: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: CONST  (r13 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x004e: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x004f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0052: IGET  (r0 I:int) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumRows int \l0x0054: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0056: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|0x0058: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:35:0x00cc \l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005c: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x005e: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0060: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0062: IGET  (r0 I:android.support.constraint.solver.SolverVariable) = \l  (r4 I:android.support.constraint.solver.ArrayRow A[D('current' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.variable android.support.constraint.solver.SolverVariable \l0x0064: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0066: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l0x0068: IGET  (r0 I:android.support.constraint.solver.SolverVariable$Type) = (r0 I:android.support.constraint.solver.SolverVariable) android.support.constraint.solver.SolverVariable.mType android.support.constraint.solver.SolverVariable$Type \l0x006a: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x006c: SGET  (r19 I:android.support.constraint.solver.SolverVariable$Type) =  android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED android.support.constraint.solver.SolverVariable$Type \l0x006e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0070: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0072|0x0072: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0077 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|0x0074: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0077|0x0077: IGET  (r0 I:float) = \l  (r4 I:android.support.constraint.solver.ArrayRow A[D('current' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.constantValue float \l0x0079: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007b: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007d: CMP_G  (r18 I:int) = (r18 I:float), (r19 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x007f|0x007f: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x0074 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0081|0x0081: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0082|0x0082: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0084: IGET  (r0 I:int) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumColumns int \l0x0086: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0088: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x008a|0x008a: IF  (r8 I:?[int, byte, short, char] A[D('j' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:17:0x0074 \l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|0x008c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008e: IGET  (r0 I:android.support.constraint.solver.Cache) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mCache android.support.constraint.solver.Cache \l0x0090: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0092: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0094: IGET  (r0 I:android.support.constraint.solver.SolverVariable[]) = (r0 I:android.support.constraint.solver.Cache) android.support.constraint.solver.Cache.mIndexedVariables android.support.constraint.solver.SolverVariable[] \l0x0096: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0098: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char] A[D('j' int)])\l \l0x009a: IGET  (r0 I:android.support.constraint.solver.ArrayLinkedVariables) = \l  (r4 I:android.support.constraint.solver.ArrayRow A[D('current' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.variables android.support.constraint.solver.ArrayLinkedVariables \l0x009c: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x009e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00a0: INVOKE  (r2 I:float) = \l  (r0 I:android.support.constraint.solver.ArrayLinkedVariables)\l  (r3 I:android.support.constraint.solver.SolverVariable A[D('candidate' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.ArrayLinkedVariables.get(android.support.constraint.solver.SolverVariable):float type: VIRTUAL \l0x00a4: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a6: CMP_G  (r18 I:int) = (r2 I:float A[D('a_j' float)]), (r18 I:float) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a8|0x00a8: IF  (r18 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:26:0x00ad \l}"];
Node_25 [shape=record,label="{25\:\ 0x00aa|0x00aa: ARITH  (r8 I:int A[D('j' int)]) = (r8 I:int A[D('j' int)]) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00ad|0x00ad: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ae|0x00ae: CONST  (r18 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x00b0: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00b2|0x00b2: IF  (r9 I:?[int, byte, short, char] A[D('k' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:25:0x00aa \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b4|0x00b4: IGET  (r0 I:float[]) = \l  (r3 I:android.support.constraint.solver.SolverVariable A[D('candidate' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.SolverVariable.strengthVector float[] \l0x00b6: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00b8: AGET  (r18 I:?[int, float]) = \l  (r18 I:?[int, float][])\l  (r9 I:?[int, short, byte, char] A[D('k' int)])\l \l0x00ba: ARITH  (r16 I:float) = (r18 I:float) \/ (r2 I:float A[D('a_j' float)]) \l0x00bc: CMP_G  (r18 I:int) = \l  (r16 I:float A[D('value' float)])\l  (r10 I:float A[D('min' float)])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00be|0x00be: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:32:0x00c2 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00c0|0x00c0: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('k' int)]) == (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('strength' int)])  \-\> B:33:0x00c4 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00c2|0x00c2: IF  (r9 I:?[int, byte, short, char] A[D('k' int)]) \<= (r14 I:?[int, byte, short, char] A[D('strength' int)])  \-\> B:34:0x00c9 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00c4|0x00c4: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('min' float)]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])\l \l0x00c6: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pivotRowIndex' int)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x00c7: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pivotColumnIndex' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)])\l \l0x00c8: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('strength' int)]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('k' int)])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x00c9|0x00c9: ARITH  (r9 I:int A[D('k' int)]) = (r9 I:int A[D('k' int)]) + (1 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00cc|0x00cc: CONST  (r18 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00ce: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00d0|0x00d0: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pivotRowIndex' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0125 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00d2|0x00d2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d4: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x00d6: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00d8: AGET  (r12 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r13 I:?[int, short, byte, char] A[D('pivotRowIndex' int)])\l \l0x00da: IGET  (r0 I:android.support.constraint.solver.SolverVariable) = \l  (r12 I:android.support.constraint.solver.ArrayRow A[D('pivotEquation' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.variable android.support.constraint.solver.SolverVariable \l0x00dc: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00de: CONST  (r19 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00e0: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e2: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00e4: IPUT  \l  (r0 I:int)\l  (r1 I:android.support.constraint.solver.SolverVariable)\l android.support.constraint.solver.SolverVariable.definitionId int \l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00e8: IGET  (r0 I:android.support.constraint.solver.Cache) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mCache android.support.constraint.solver.Cache \l0x00ea: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00ec: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00ee: IGET  (r0 I:android.support.constraint.solver.SolverVariable[]) = (r0 I:android.support.constraint.solver.Cache) android.support.constraint.solver.Cache.mIndexedVariables android.support.constraint.solver.SolverVariable[] \l0x00f0: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00f2: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char] A[D('pivotColumnIndex' int)])\l \l0x00f4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00f6: INVOKE  \l  (r12 I:android.support.constraint.solver.ArrayRow A[D('pivotEquation' android.support.constraint.solver.ArrayRow)])\l  (r0 I:android.support.constraint.solver.SolverVariable)\l android.support.constraint.solver.ArrayRow.pivot(android.support.constraint.solver.SolverVariable):void type: VIRTUAL \l0x00f9: IGET  (r0 I:android.support.constraint.solver.SolverVariable) = \l  (r12 I:android.support.constraint.solver.ArrayRow A[D('pivotEquation' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.variable android.support.constraint.solver.SolverVariable \l0x00fb: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00fd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00ff: IPUT  \l  (r13 I:int A[D('pivotRowIndex' int)])\l  (r0 I:android.support.constraint.solver.SolverVariable)\l android.support.constraint.solver.SolverVariable.definitionId int \l0x0101: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x0102|0x0102: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0104: IGET  (r0 I:int) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumRows int \l0x0106: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0108: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x010a|0x010a: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:41:0x011c \l}"];
Node_40 [shape=record,label="{40\:\ 0x010c|0x010c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x010e: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x0110: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0112: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0114: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0116: INVOKE  \l  (r0 I:android.support.constraint.solver.ArrayRow)\l  (r12 I:android.support.constraint.solver.ArrayRow A[D('pivotEquation' android.support.constraint.solver.ArrayRow)])\l android.support.constraint.solver.ArrayRow.updateRowWithEquation(android.support.constraint.solver.ArrayRow):boolean type: VIRTUAL \l0x0119: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_41 [shape=record,label="{41\:\ 0x011c|0x011c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('goal' android.support.constraint.solver.Goal)])\l \l0x011e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0120: INVOKE  \l  (r0 I:android.support.constraint.solver.Goal)\l  (r1 I:android.support.constraint.solver.LinearSystem)\l android.support.constraint.solver.Goal.updateFromSystem(android.support.constraint.solver.LinearSystem):void type: VIRTUAL \l}"];
Node_42 [shape=record,label="{42\:\ 0x0125|0x0125: CONST  (r5 I:?[boolean, int, float, short, byte, char] A[D('done' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0128|0x0128: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('infeasibleSystem' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0129: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x012a|0x012a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x012c: IGET  (r0 I:int) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mNumRows int \l0x012e: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0130: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x0132|0x0132: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:52:0x0168 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0134|0x0134: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0136: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x0138: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x013a: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x013c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x013e: IGET  (r0 I:android.support.constraint.solver.SolverVariable) = (r0 I:android.support.constraint.solver.ArrayRow) android.support.constraint.solver.ArrayRow.variable android.support.constraint.solver.SolverVariable \l0x0140: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0142: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l0x0144: IGET  (r0 I:android.support.constraint.solver.SolverVariable$Type) = (r0 I:android.support.constraint.solver.SolverVariable) android.support.constraint.solver.SolverVariable.mType android.support.constraint.solver.SolverVariable$Type \l0x0146: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0148: SGET  (r19 I:android.support.constraint.solver.SolverVariable$Type) =  android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED android.support.constraint.solver.SolverVariable$Type \l0x014a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x014c: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x014e|0x014e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0153 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0150|0x0150: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0153|0x0153: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0155: IGET  (r0 I:android.support.constraint.solver.ArrayRow[]) = (r0 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mRows android.support.constraint.solver.ArrayRow[] \l0x0157: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0159: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x015b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x015d: IGET  (r0 I:float) = (r0 I:android.support.constraint.solver.ArrayRow) android.support.constraint.solver.ArrayRow.constantValue float \l0x015f: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0161: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0163: CMP_G  (r18 I:int) = (r18 I:float), (r19 I:float) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0165|0x0165: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:48:0x0150 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0167|0x0167: CONST  (r7 I:?[boolean, int, float, short, byte, char] A[D('infeasibleSystem' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0168|0x0168: RETURN  (r15 I:int A[D('tries' int)]) \l}"];
MethodNode[shape=record,label="{private int android.support.constraint.solver.LinearSystem.enforceBFS((r20 'this' I:android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r21 I:android.support.constraint.solver.Goal A[D('goal' android.support.constraint.solver.Goal), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001b\-0x0041: r17 'variable' android.support.constraint.solver.SolverVariable\l  0x00a4\-0x00cc: r2 'a_j' float\l  0x009a\-0x00cc: r3 'candidate' android.support.constraint.solver.SolverVariable\l  0x0062\-0x00cc: r4 'current' android.support.constraint.solver.ArrayRow\l  0x0082\-0x00cc: r8 'j' int\l  0x00ae\-0x00cc: r9 'k' int\l  0x00bc\-0x00cc: r16 'value' float\l  0x0066\-0x00cc: r17 'variable' android.support.constraint.solver.SolverVariable\l  0x00da\-0x0125: r12 'pivotEquation' android.support.constraint.solver.ArrayRow\l  0x0044\-0x0128: r5 'done' boolean\l  0x004c\-0x0128: r10 'min' float\l  0x004f\-0x0128: r11 'pivotColumnIndex' int\l  0x004e\-0x0128: r13 'pivotRowIndex' int\l  0x004d\-0x0128: r14 'strength' int\l  0x0142\-0x0168: r17 'variable' android.support.constraint.solver.SolverVariable\l  0x0003\-0x0168: r6 'i' int\l  0x0002\-0x0168: r7 'infeasibleSystem' boolean\l  0x0001\-0x0168: r15 'tries' int\l  ?\-0x0168: r21 'goal' android.support.constraint.solver.Goal\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_5;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_43;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_43;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_35;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_17;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_21;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_25;
Node_28 -> Node_29[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_27;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_42;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_38;
Node_41 -> Node_11;
Node_42 -> Node_11;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_52;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_44;
Node_49 -> Node_50;
Node_50 -> Node_48;
Node_50 -> Node_51[style=dashed];
Node_51 -> Node_52;
}

