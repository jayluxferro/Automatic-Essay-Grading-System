digraph "CFG forandroid.support.constraint.solver.LinearSystem.acquireSolverVariable(Landroid\/support\/constraint\/solver\/SolverVariable$Type;)Landroid\/support\/constraint\/solver\/SolverVariable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:android.support.constraint.solver.Cache) = (r4 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mCache android.support.constraint.solver.Cache \l0x0002: IGET  (r1 I:android.support.constraint.solver.Pools$Pool\<android.support.constraint.solver.SolverVariable\>) = (r1 I:android.support.constraint.solver.Cache) android.support.constraint.solver.Cache.solverVariablePool android.support.constraint.solver.Pools$Pool \l0x0004: INVOKE  (r0 I:java.lang.Object) = (r1 I:android.support.constraint.solver.Pools$Pool) android.support.constraint.solver.Pools.Pool.acquire():java.lang.Object type: INTERFACE \l0x0008: CHECK_CAST  (r0 I:android.support.constraint.solver.SolverVariable) = (android.support.constraint.solver.SolverVariable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('variable' android.support.constraint.solver.SolverVariable)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)]) =  android.support.constraint.solver.SolverVariable \l0x000e: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l  (r5 I:android.support.constraint.solver.SolverVariable$Type A[D('type' android.support.constraint.solver.SolverVariable$Type)])\l android.support.constraint.solver.SolverVariable.\<init\>(android.support.constraint.solver.SolverVariable$Type):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r1 I:int) = (r4 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x0013: SGET  (r2 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:6:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: SGET  (r1 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x0019: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x001b: SPUT  (r1 I:int) android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x001d: IGET  (r1 I:android.support.constraint.solver.SolverVariable[]) = (r4 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l0x001f: SGET  (r2 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x0021: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r2 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x0025: CHECK_CAST  (r1 I:android.support.constraint.solver.SolverVariable[]) = (android.support.constraint.solver.SolverVariable[]) (r1 I:?[OBJECT, ARRAY]) \l0x0027: IPUT  \l  (r1 I:android.support.constraint.solver.SolverVariable[])\l  (r4 I:android.support.constraint.solver.LinearSystem)\l android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IGET  (r1 I:android.support.constraint.solver.SolverVariable[]) = (r4 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l0x002b: IGET  (r2 I:int) = (r4 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x002d: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x002f: IPUT  \l  (r3 I:int)\l  (r4 I:android.support.constraint.solver.LinearSystem)\l android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x0031: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: RETURN  \l  (r0 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.SolverVariable.reset():void type: VIRTUAL \l0x0037: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l  (r5 I:android.support.constraint.solver.SolverVariable$Type A[D('type' android.support.constraint.solver.SolverVariable$Type)])\l android.support.constraint.solver.SolverVariable.setType(android.support.constraint.solver.SolverVariable$Type):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private android.support.constraint.solver.SolverVariable android.support.constraint.solver.LinearSystem.acquireSolverVariable((r4 'this' I:android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r5 I:android.support.constraint.solver.SolverVariable$Type A[D('type' android.support.constraint.solver.SolverVariable$Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000a\-0x000e: r0 'variable' android.support.constraint.solver.SolverVariable\l  0x0011\-0x003a: r0 'variable' android.support.constraint.solver.SolverVariable\l  ?\-0x003a: r5 'type' android.support.constraint.solver.SolverVariable$Type\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_3;
}

