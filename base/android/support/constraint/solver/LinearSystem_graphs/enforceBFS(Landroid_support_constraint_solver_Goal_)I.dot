digraph "CFG forandroid.support.constraint.solver.LinearSystem.enforceBFS(Landroid\/support\/constraint\/solver\/Goal;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r15 = 0\lr7 = false\lr6 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r6 \l  PHI: (r6v1 'i' int) = (r6v0 'i' int), (r6v11 'i' int) binds: [B:0:0x0000, B:5:0x0029] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:5:0x0029\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r6 \>= r20.mNumRows) goto L_0x0041\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d}"];
Node_4 [shape=record,label="{4\:\ 0x0027|if (r20.mRows[r6].variable.mType != android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED) goto L_0x002c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:5:0x0029\l|int r6 = r6 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c}"];
Node_7 [shape=record,label="{7\:\ 0x003e|if ((r20.mRows[r6].constantValue \> 0.0f ? 1 : (r20.mRows[r6].constantValue == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0029\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|r7 = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|PHI: r7 \l  PHI: (r7v1 'infeasibleSystem' boolean) = (r7v0 'infeasibleSystem' boolean), (r7v4 'infeasibleSystem' boolean) binds: [B:53:0x0041, B:8:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L_0x0128\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|r5 = false\lr15 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|LOOP_START\lPHI: r5 r15 \l  PHI: (r5v1 'done' boolean) = (r5v0 'done' boolean), (r5v2 'done' boolean) binds: [B:10:0x0043, B:57:0x0045] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v3 'tries' int) = (r15v2 'tries' int), (r15v4 'tries' int) binds: [B:10:0x0043, B:57:0x0045] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:11:0x0045\-\>B:57:0x0045\l|if (r5 != false) goto L_0x0128\l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|int r15 = r15 + 1\lr10 = Float.MAX_VALUE\lr14 = 0\lr13 = \-1\lr11 = \-1\lr6 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|LOOP_START\lPHI: r6 r10 r11 r13 r14 \l  PHI: (r6v6 'i' int) = (r6v5 'i' int), (r6v10 'i' int) binds: [B:12:0x0047, B:17:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 'min' float) = (r10v0 'min' float), (r10v7 'min' float) binds: [B:12:0x0047, B:17:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'pivotColumnIndex' int) = (r11v0 'pivotColumnIndex' int), (r11v7 'pivotColumnIndex' int) binds: [B:12:0x0047, B:17:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 'pivotRowIndex' int) = (r13v0 'pivotRowIndex' int), (r13v7 'pivotRowIndex' int) binds: [B:12:0x0047, B:17:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 'strength' int) = (r14v0 'strength' int), (r14v7 'strength' int) binds: [B:12:0x0047, B:17:0x0074] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:13:0x0050\-\>B:17:0x0074\l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|if (r6 \>= r20.mNumRows) goto L_0x00cc\l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|r4 = r20.mRows[r6]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0072|if (r4.variable.mType != android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED) goto L_0x0077\l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|LOOP_END\lPHI: r10 r11 r13 r14 \l  PHI: (r10v7 'min' float) = (r10v1 'min' float), (r10v1 'min' float), (r10v2 'min' float) binds: [B:62:0x0074, B:63:0x0074, B:64:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v7 'pivotColumnIndex' int) = (r11v1 'pivotColumnIndex' int), (r11v1 'pivotColumnIndex' int), (r11v2 'pivotColumnIndex' int) binds: [B:62:0x0074, B:63:0x0074, B:64:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v7 'pivotRowIndex' int) = (r13v1 'pivotRowIndex' int), (r13v1 'pivotRowIndex' int), (r13v2 'pivotRowIndex' int) binds: [B:62:0x0074, B:63:0x0074, B:64:0x0074] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v7 'strength' int) = (r14v1 'strength' int), (r14v1 'strength' int), (r14v2 'strength' int) binds: [B:62:0x0074, B:63:0x0074, B:64:0x0074] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:13:0x0050\-\>B:17:0x0074\l|int r6 = r6 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x0077}"];
Node_19 [shape=record,label="{19\:\ 0x007f|if ((r4.constantValue \> 0.0f ? 1 : (r4.constantValue == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0074\l}"];
Node_20 [shape=record,label="{20\:\ 0x0081|r8 = 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0082|LOOP_START\lPHI: r8 r10 r11 r13 r14 \l  PHI: (r8v1 'j' int) = (r8v0 'j' int), (r8v2 'j' int) binds: [B:20:0x0081, B:25:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v2 'min' float) = (r10v1 'min' float), (r10v6 'min' float) binds: [B:20:0x0081, B:25:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v2 'pivotColumnIndex' int) = (r11v1 'pivotColumnIndex' int), (r11v6 'pivotColumnIndex' int) binds: [B:20:0x0081, B:25:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v2 'pivotRowIndex' int) = (r13v1 'pivotRowIndex' int), (r13v6 'pivotRowIndex' int) binds: [B:20:0x0081, B:25:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v2 'strength' int) = (r14v1 'strength' int), (r14v6 'strength' int) binds: [B:20:0x0081, B:25:0x00aa] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:21:0x0082\-\>B:25:0x00aa\l}"];
Node_22 [shape=record,label="{22\:\ 0x008a|if (r8 \>= r20.mNumColumns) goto L_0x0074\l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|r3 = r20.mCache.mIndexedVariables[r8]\lfloat r2 = r4.variables.get(r3)\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a8|if ((r2 \> 0.0f ? 1 : (r2 == 0.0f ? 0 : \-1)) \> 0) goto L_0x00ad\l}"];
Node_25 [shape=record,label="{25\:\ 0x00aa|LOOP_END\lPHI: r10 r11 r13 r14 \l  PHI: (r10v6 'min' float) = (r10v2 'min' float), (r10v3 'min' float) binds: [B:65:0x00aa, B:66:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v6 'pivotColumnIndex' int) = (r11v2 'pivotColumnIndex' int), (r11v3 'pivotColumnIndex' int) binds: [B:65:0x00aa, B:66:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v6 'pivotRowIndex' int) = (r13v2 'pivotRowIndex' int), (r13v3 'pivotRowIndex' int) binds: [B:65:0x00aa, B:66:0x00aa] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v6 'strength' int) = (r14v2 'strength' int), (r14v3 'strength' int) binds: [B:65:0x00aa, B:66:0x00aa] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:21:0x0082\-\>B:25:0x00aa\l|int r8 = r8 + 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x00ad|r9 = 0\l}"];
Node_27 [shape=record,label="{27\:\ 0x00ae|LOOP_START\lPHI: r9 r10 r11 r13 r14 \l  PHI: (r9v1 'k' int) = (r9v0 'k' int), (r9v2 'k' int) binds: [B:26:0x00ad, B:34:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v3 'min' float) = (r10v2 'min' float), (r10v4 'min' float) binds: [B:26:0x00ad, B:34:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v3 'pivotColumnIndex' int) = (r11v2 'pivotColumnIndex' int), (r11v4 'pivotColumnIndex' int) binds: [B:26:0x00ad, B:34:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v3 'pivotRowIndex' int) = (r13v2 'pivotRowIndex' int), (r13v4 'pivotRowIndex' int) binds: [B:26:0x00ad, B:34:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v3 'strength' int) = (r14v2 'strength' int), (r14v4 'strength' int) binds: [B:26:0x00ad, B:34:0x00c9] A[DONT_GENERATE, DONT_INLINE]\lLOOP:4: B:27:0x00ae\-\>B:34:0x00c9\l}"];
Node_28 [shape=record,label="{28\:\ 0x00b2|if (r9 \>= 6) goto L_0x00aa\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b4|float r16 = r3.strengthVector[r9] \/ r2\l}"];
Node_30 [shape=record,label="{30\:\ 0x00be|if ((r16 \> r10 ? 1 : (r16 == r10 ? 0 : \-1)) \>= 0) goto L_0x00c2\l}"];
Node_31 [shape=record,label="{31\:\ 0x00c0|if (r9 == r14) goto L_0x00c4\l}"];
Node_32 [shape=record,label="{32\:\ 0x00c2|if (r9 \<= r14) goto L_0x00c9\l}"];
Node_33 [shape=record,label="{33\:\ 0x00c4|r10 = r16\lr13 = r6\lr11 = r8\lr14 = r9\l}"];
Node_34 [shape=record,label="{34\:\ 0x00c9|LOOP_END\lPHI: r10 r11 r13 r14 \l  PHI: (r10v4 'min' float) = (r10v5 'min' float), (r10v3 'min' float) binds: [B:67:0x00c9, B:68:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v4 'pivotColumnIndex' int) = (r11v5 'pivotColumnIndex' int), (r11v3 'pivotColumnIndex' int) binds: [B:67:0x00c9, B:68:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v4 'pivotRowIndex' int) = (r13v5 'pivotRowIndex' int), (r13v3 'pivotRowIndex' int) binds: [B:67:0x00c9, B:68:0x00c9] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v4 'strength' int) = (r14v5 'strength' int), (r14v3 'strength' int) binds: [B:67:0x00c9, B:68:0x00c9] A[DONT_GENERATE, DONT_INLINE]\lLOOP:4: B:27:0x00ae\-\>B:34:0x00c9\l|int r9 = r9 + 1\l}"];
Node_35 [shape=record,label="{35\:\ 0x00cc}"];
Node_36 [shape=record,label="{36\:\ 0x00d0|if (r13 == \-1) goto L_0x0125\l}"];
Node_37 [shape=record,label="{37\:\ 0x00d2|r12 = r20.mRows[r13]\lr12.variable.definitionId = \-1\lr12.pivot(r20.mCache.mIndexedVariables[r11])\lr12.variable.definitionId = r13\lr6 = 0\l}"];
Node_38 [shape=record,label="{38\:\ 0x0102|LOOP_START\lPHI: r6 \l  PHI: (r6v8 'i' int) = (r6v7 'i' int), (r6v9 'i' int) binds: [B:37:0x00d2, B:40:0x010c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:5: B:38:0x0102\-\>B:40:0x010c\l}"];
Node_39 [shape=record,label="{39\:\ 0x010a|if (r6 \>= r20.mNumRows) goto L_0x011c\l}"];
Node_40 [shape=record,label="{40\:\ 0x010c|LOOP_END\lLOOP:5: B:38:0x0102\-\>B:40:0x010c\l|r20.mRows[r6].updateRowWithEquation(r12)\lint r6 = r6 + 1\l}"];
Node_41 [shape=record,label="{41\:\ 0x011c|r21.updateFromSystem(r20)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0125|r5 = true\l}"];
Node_43 [shape=record,label="{43\:\ 0x0128|PHI: r15 \l  PHI: (r15v1 'tries' int) = (r15v0 'tries' int), (r15v3 'tries' int) binds: [B:9:0x0041, B:58:0x0128] A[DONT_GENERATE, DONT_INLINE]\l|r6 = 0\l}"];
Node_44 [shape=record,label="{44\:\ 0x012a|LOOP_START\lPHI: r6 \l  PHI: (r6v3 'i' int) = (r6v2 'i' int), (r6v4 'i' int) binds: [B:43:0x0128, B:48:0x0150] A[DONT_GENERATE, DONT_INLINE]\lLOOP:6: B:44:0x012a\-\>B:48:0x0150\l}"];
Node_45 [shape=record,label="{45\:\ 0x0132|if (r6 \>= r20.mNumRows) goto L_0x0168\l}"];
Node_46 [shape=record,label="{46\:\ 0x0134}"];
Node_47 [shape=record,label="{47\:\ 0x014e|if (r20.mRows[r6].variable.mType != android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED) goto L_0x0153\l}"];
Node_48 [shape=record,label="{48\:\ 0x0150|LOOP_END\lLOOP:6: B:44:0x012a\-\>B:48:0x0150\l|int r6 = r6 + 1\l}"];
Node_49 [shape=record,label="{49\:\ 0x0153}"];
Node_50 [shape=record,label="{50\:\ 0x0165|if ((r20.mRows[r6].constantValue \> 0.0f ? 1 : (r20.mRows[r6].constantValue == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0150\l}"];
Node_51 [shape=record,label="{51\:\ 0x0167}"];
Node_52 [shape=record,label="{52\:\ 0x0168|RETURN\l|return r15\l}"];
Node_53 [shape=record,label="{53\:\ 0x0041|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0040|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0029|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0029|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0045|LOOP_END\lSYNTHETIC\lPHI: r5 \l  PHI: (r5v2 'done' boolean) = (r5v3 'done' boolean), (r5v1 'done' boolean) binds: [B:60:0x0045, B:59:0x0045] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:11:0x0045\-\>B:57:0x0045\l}"];
Node_58 [shape=record,label="{58\:\ 0x0128|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0045|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0045|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x00cc|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0074|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0074|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0074|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x00aa|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x00aa|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x00c9|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x00c9|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x011c|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0168|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0167|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0150|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0150|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private int android.support.constraint.solver.LinearSystem.enforceBFS((r20v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r21v0 'goal' android.support.constraint.solver.Goal A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_53;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_55[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_54[style=dashed];
Node_7 -> Node_56;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_43;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_58;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_61;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_62[style=dashed];
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_63;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_64;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_65[style=dashed];
Node_25 -> Node_21;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_66;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_68;
Node_33 -> Node_67;
Node_34 -> Node_27;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_42;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_69;
Node_40 -> Node_38;
Node_41 -> Node_59;
Node_42 -> Node_60;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_70;
Node_46 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_72[style=dashed];
Node_48 -> Node_44;
Node_49 -> Node_50;
Node_50 -> Node_71[style=dashed];
Node_50 -> Node_73;
Node_51 -> Node_52;
Node_53 -> Node_9;
Node_54 -> Node_8;
Node_55 -> Node_5;
Node_56 -> Node_5;
Node_57 -> Node_11;
Node_58 -> Node_43;
Node_59 -> Node_57;
Node_60 -> Node_57;
Node_61 -> Node_35;
Node_62 -> Node_17;
Node_63 -> Node_17;
Node_64 -> Node_17;
Node_65 -> Node_25;
Node_66 -> Node_25;
Node_67 -> Node_34;
Node_68 -> Node_34;
Node_69 -> Node_41;
Node_70 -> Node_52;
Node_71 -> Node_51;
Node_72 -> Node_48;
Node_73 -> Node_48;
}

