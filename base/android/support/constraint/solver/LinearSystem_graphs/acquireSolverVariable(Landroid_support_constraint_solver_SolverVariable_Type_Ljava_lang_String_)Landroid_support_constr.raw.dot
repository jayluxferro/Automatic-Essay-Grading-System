digraph "CFG forandroid.support.constraint.solver.LinearSystem.acquireSolverVariable(Landroid\/support\/constraint\/solver\/SolverVariable$Type;Ljava\/lang\/String;)Landroid\/support\/constraint\/solver\/SolverVariable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.constraint.solver.Cache) = (r2 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mCache android.support.constraint.solver.Cache \l0x0002: IGET  (r0 I:android.support.constraint.solver.Pools$Pool\<android.support.constraint.solver.SolverVariable\>) = (r0 I:android.support.constraint.solver.Cache) android.support.constraint.solver.Cache.solverVariablePool android.support.constraint.solver.Pools$Pool \l0x0004: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.support.constraint.solver.Pools$Pool) android.support.constraint.solver.Pools.Pool.acquire():java.lang.Object type: INTERFACE \l0x0008: CHECK_CAST  (r0 I:android.support.constraint.solver.SolverVariable) = (android.support.constraint.solver.SolverVariable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:android.support.constraint.solver.SolverVariable) =  android.support.constraint.solver.SolverVariable \l0x000e: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable)\l  (r3 I:android.support.constraint.solver.SolverVariable$Type)\l  (r4 I:java.lang.String)\l android.support.constraint.solver.SolverVariable.\<init\>(android.support.constraint.solver.SolverVariable$Type, java.lang.String):void type: DIRECT \l0x0011: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable)\l  (r3 I:android.support.constraint.solver.SolverVariable$Type)\l  (r4 I:java.lang.String)\l android.support.constraint.solver.SolverVariable.setType(android.support.constraint.solver.SolverVariable$Type, java.lang.String):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r0 I:android.support.constraint.solver.SolverVariable) android.support.constraint.solver.SolverVariable.reset():void type: VIRTUAL \l0x0018: INVOKE  \l  (r0 I:android.support.constraint.solver.SolverVariable)\l  (r3 I:android.support.constraint.solver.SolverVariable$Type)\l  (r4 I:java.lang.String)\l android.support.constraint.solver.SolverVariable.setType(android.support.constraint.solver.SolverVariable$Type, java.lang.String):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IGET  (r3 I:int) = (r2 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x001d: SGET  (r4 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: SGET  (r3 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x0023: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0025: SPUT  (r3 I:int) android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x0027: IGET  (r3 I:android.support.constraint.solver.SolverVariable[]) = (r2 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l0x0029: SGET  (r4 I:int) =  android.support.constraint.solver.LinearSystem.POOL_SIZE int \l0x002b: INVOKE  (r3 I:java.lang.Object[]) = (r3 I:java.lang.Object[]), (r4 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x002f: CHECK_CAST  (r3 I:android.support.constraint.solver.SolverVariable[]) = (android.support.constraint.solver.SolverVariable[]) (r3 I:?[OBJECT, ARRAY]) \l0x0031: IPUT  \l  (r3 I:android.support.constraint.solver.SolverVariable[])\l  (r2 I:android.support.constraint.solver.LinearSystem)\l android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: IGET  (r3 I:android.support.constraint.solver.SolverVariable[]) = (r2 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariables android.support.constraint.solver.SolverVariable[] \l0x0035: IGET  (r4 I:int) = (r2 I:android.support.constraint.solver.LinearSystem) android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x0037: ARITH  (r1 I:int) = (r4 I:int) + (1 int) \l0x0039: IPUT  \l  (r1 I:int)\l  (r2 I:android.support.constraint.solver.LinearSystem)\l android.support.constraint.solver.LinearSystem.mPoolVariablesCount int \l0x003b: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: RETURN  (r0 I:android.support.constraint.solver.SolverVariable) \l}"];
MethodNode[shape=record,label="{private android.support.constraint.solver.SolverVariable android.support.constraint.solver.LinearSystem.acquireSolverVariable((r2 'this' I:android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r3 I:android.support.constraint.solver.SolverVariable$Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

