digraph "CFG forandroid.support.constraint.solver.LinearSystem.acquireSolverVariable(Landroid\/support\/constraint\/solver\/SolverVariable$Type;Ljava\/lang\/String;)Landroid\/support\/constraint\/solver\/SolverVariable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.constraint.solver.SolverVariable r0 = r2.mCache.solverVariablePool.acquire()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r0 != null) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|android.support.constraint.solver.SolverVariable r0 = new android.support.constraint.solver.SolverVariable(r3, r4)\lr0.setType(r3, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|r0.reset()\lr0.setType(r3, r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|PHI: r0 \l  PHI: (r0v4 android.support.constraint.solver.SolverVariable) = (r0v3 android.support.constraint.solver.SolverVariable), (r0v5 android.support.constraint.solver.SolverVariable) binds: [B:3:0x0015, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|if (r2.mPoolVariablesCount \< POOL_SIZE) goto L_0x0033\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|POOL_SIZE = POOL_SIZE * 2\lr2.mPoolVariables = (android.support.constraint.solver.SolverVariable[]) java.util.Arrays.copyOf(r2.mPoolVariables, POOL_SIZE)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|android.support.constraint.solver.SolverVariable[] r3 = r2.mPoolVariables\lint r4 = r2.mPoolVariablesCount\lr2.mPoolVariablesCount = r4 + 1\lr3[r4] = r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private android.support.constraint.solver.SolverVariable android.support.constraint.solver.LinearSystem.acquireSolverVariable((r2v0 'this' android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.constraint.solver.SolverVariable$Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

