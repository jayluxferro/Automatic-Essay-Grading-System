digraph "CFG forandroid.support.constraint.solver.ArrayLinkedVariables.pickPivotCandidate()Landroid\/support\/constraint\/solver\/SolverVariable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: IGET  (r2 I:int) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mHead int \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('current' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r7 I:int) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.currentSize int \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char] A[D('counter' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:29:0x005d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r7 I:float[]) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mArrayValues float[] \l0x000f: AGET  (r0 I:?[int, float]) = \l  (r7 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('current' int)])\l \l0x0011: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (981668463(0x3a83126f, float:0.001) ?[int, float, short, byte, char])\l \l0x0014: CMP_G  (r7 I:int) = (r0 I:float A[D('amount' float)]), (r9 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: NEG  (r7 I:float) = (r3 I:float A[D('epsilon' float)]) \l0x0019: CMP_L  (r7 I:int) = (r0 I:float A[D('amount' float)]), (r7 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IGET  (r7 I:float[]) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mArrayValues float[] \l0x001f: APUT  \l  (r7 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('current' int)])\l  (r9 I:?[int, float])\l \l0x0021: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('amount' float)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: CMP_L  (r7 I:int) = (r0 I:float A[D('amount' float)]), (r9 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IGET  (r7 I:android.support.constraint.solver.Cache) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mCache android.support.constraint.solver.Cache \l0x0028: IGET  (r7 I:android.support.constraint.solver.SolverVariable[]) = (r7 I:android.support.constraint.solver.Cache) android.support.constraint.solver.Cache.mIndexedVariables android.support.constraint.solver.SolverVariable[] \l0x002a: IGET  (r8 I:int[]) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mArrayIndices int[] \l0x002c: AGET  (r8 I:?[int, float]) = \l  (r8 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('current' int)])\l \l0x002e: AGET  (r6 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0030: IGET  (r7 I:android.support.constraint.solver.SolverVariable$Type) = \l  (r6 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.SolverVariable.mType android.support.constraint.solver.SolverVariable$Type \l0x0032: SGET  (r8 I:android.support.constraint.solver.SolverVariable$Type) =  android.support.constraint.solver.SolverVariable.Type.UNRESTRICTED android.support.constraint.solver.SolverVariable$Type \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CMP_G  (r7 I:int) = (r0 I:float A[D('amount' float)]), (r9 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x0045 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: RETURN  \l  (r6 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: CMP_G  (r7 I:int) = \l  (r0 I:float A[D('amount' float)])\l  (r3 I:float A[D('epsilon' float)])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IGET  (r7 I:float[]) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mArrayValues float[] \l0x0041: APUT  \l  (r7 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('current' int)])\l  (r9 I:?[int, float])\l \l0x0043: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('amount' float)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unrestrictedCandidate' android.support.constraint.solver.SolverVariable)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0048 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: MOVE  (r5 I:?[OBJECT, ARRAY] A[D('unrestrictedCandidate' android.support.constraint.solver.SolverVariable)]) = \l  (r6 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IGET  (r7 I:int[]) = \l  (r10 I:android.support.constraint.solver.ArrayLinkedVariables)\l android.support.constraint.solver.ArrayLinkedVariables.mArrayNextIndices int[] \l0x004a: AGET  (r2 I:?[int, float] A[D('current' int)]) = \l  (r7 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('current' int)])\l \l0x004c: ARITH  (r1 I:int A[D('counter' int)]) = (r1 I:int A[D('counter' int)]) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: CMP_G  (r7 I:int) = (r0 I:float A[D('amount' float)]), (r9 I:float) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x0048 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0053|0x0053: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('restrictedCandidate' android.support.constraint.solver.SolverVariable)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x005b \l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: IGET  (r7 I:int) = \l  (r6 I:android.support.constraint.solver.SolverVariable A[D('variable' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.SolverVariable.strength int \l0x0057: IGET  (r8 I:int) = \l  (r4 I:android.support.constraint.solver.SolverVariable A[D('restrictedCandidate' android.support.constraint.solver.SolverVariable)])\l android.support.constraint.solver.SolverVariable.strength int \l}"];
Node_27 [shape=record,label="{27\:\ 0x0059|0x0059: IF  (r7 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:22:0x0048 \l}"];
Node_28 [shape=record,label="{28\:\ 0x005b|0x005b: MOVE  (r4 I:?[OBJECT, ARRAY] A[D('restrictedCandidate' android.support.constraint.solver.SolverVariable)]) = \l  (r6 I:?[OBJECT, ARRAY] A[D('variable' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|0x005d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unrestrictedCandidate' android.support.constraint.solver.SolverVariable)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0061 \l}"];
Node_30 [shape=record,label="{30\:\ 0x005f|0x005f: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r5 I:?[OBJECT, ARRAY] A[D('unrestrictedCandidate' android.support.constraint.solver.SolverVariable)])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|0x0061: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY] A[D('restrictedCandidate' android.support.constraint.solver.SolverVariable)])\l \l}"];
MethodNode[shape=record,label="{android.support.constraint.solver.SolverVariable android.support.constraint.solver.ArrayLinkedVariables.pickPivotCandidate((r10 'this' I:android.support.constraint.solver.ArrayLinkedVariables A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0011\-0x003a: r0 'amount' float\l  0x0014\-0x003a: r3 'epsilon' float\l  0x0030\-0x003a: r6 'variable' android.support.constraint.solver.SolverVariable\l  0x0045\-0x0048: r6 'variable' android.support.constraint.solver.SolverVariable\l  0x003b\-0x005d: r0 'amount' float\l  0x003b\-0x005d: r3 'epsilon' float\l  0x004f\-0x005d: r6 'variable' android.support.constraint.solver.SolverVariable\l  0x0006\-0x0062: r1 'counter' int\l  0x0005\-0x0062: r2 'current' int\l  0x0002\-0x0062: r4 'restrictedCandidate' android.support.constraint.solver.SolverVariable\l  0x0003\-0x0062: r5 'unrestrictedCandidate' android.support.constraint.solver.SolverVariable\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_29;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_29;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_10;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_10;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_22;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_22;
Node_27 -> Node_28[style=dashed];
Node_28 -> Node_22;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_16;
Node_31 -> Node_16;
}

