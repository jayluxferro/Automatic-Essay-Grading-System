digraph "CFG forandroid.support.constraint.solver.ArrayRow.chooseSubject(Landroid\/support\/constraint\/solver\/LinearSystem;)Z" {
subgraph cluster_Region_1177093026 {
label = "R(4:0|(1:2)(1:3)|(1:6)|7) | DECL_VAR: boolean null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.constraint.solver.SolverVariable android.support.constraint.solver.SolverVariable r3 = r2.variables.chooseSubject(r3)\l}"];
subgraph cluster_IfRegion_349525791 {
label = "IF [B:1:0x0007] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3 == null) goto L_0x0009\l}"];
subgraph cluster_Region_142627756 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|r3 = true\l}"];
}
subgraph cluster_Region_1053623471 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|pivot(r3)\lr3 = false\l}"];
}
}
subgraph cluster_IfRegion_1662182224 {
label = "IF [B:5:0x0013] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r2.variables.currentSize == 0) goto L_0x0015\l}"];
subgraph cluster_Region_1657300341 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0015|r2.isSimpleDefinition = true\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|return r3\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x000f|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v3 boolean), (r3v4 boolean) binds: [B:3:0x000b, B:2:0x0009] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{boolean android.support.constraint.solver.ArrayRow.chooseSubject((r2v0 'this' android.support.constraint.solver.ArrayRow A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_4 -> Node_5;
}

