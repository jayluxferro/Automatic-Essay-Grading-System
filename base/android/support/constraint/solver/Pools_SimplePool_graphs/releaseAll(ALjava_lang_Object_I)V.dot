digraph "CFG forandroid.support.constraint.solver.Pools.SimplePool.releaseAll([Ljava\/lang\/Object;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r6 \<= r5.length) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|int r6 = r5.length\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|PHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:1:0x0001, B:2:0x0003] A[DONT_GENERATE, DONT_INLINE]\l|r0 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:3:0x0004, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0005\-\>B:8:0x001c\l|if (r0 \>= r6) goto L_0x001f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|r1 = r5[r0]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r4.mPoolSize \>= r4.mPool.length) goto L_0x001c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|r4.mPool[r4.mPoolSize] = r1\lr4.mPoolSize = r4.mPoolSize + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|LOOP_END\lLOOP:0: B:4:0x0005\-\>B:8:0x001c\l|int r0 = r0 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.Pools.SimplePool.releaseAll((r4v0 'this' android.support.constraint.solver.Pools$SimplePool A[IMMUTABLE_TYPE, THIS]), (r5v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([TT;I)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_11;
Node_8 -> Node_4;
Node_10 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_8;
}

