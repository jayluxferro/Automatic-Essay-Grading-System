digraph "CFG forandroid.support.constraint.solver.Pools.SimplePool.releaseAll([Ljava\/lang\/Object;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: ARRAY_LENGTH  (r6 I:int) = (r5 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: AGET  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0009: IGET  (r2 I:int) = (r4 I:android.support.constraint.solver.Pools$SimplePool) android.support.constraint.solver.Pools.SimplePool.mPoolSize int \l0x000b: IGET  (r3 I:java.lang.Object[]) = (r4 I:android.support.constraint.solver.Pools$SimplePool) android.support.constraint.solver.Pools.SimplePool.mPool java.lang.Object[] \l0x000d: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r2 I:java.lang.Object[]) = (r4 I:android.support.constraint.solver.Pools$SimplePool) android.support.constraint.solver.Pools.SimplePool.mPool java.lang.Object[] \l0x0012: IGET  (r3 I:int) = (r4 I:android.support.constraint.solver.Pools$SimplePool) android.support.constraint.solver.Pools.SimplePool.mPoolSize int \l0x0014: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0016: IGET  (r1 I:int) = (r4 I:android.support.constraint.solver.Pools$SimplePool) android.support.constraint.solver.Pools.SimplePool.mPoolSize int \l0x0018: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001a: IPUT  \l  (r1 I:int)\l  (r4 I:android.support.constraint.solver.Pools$SimplePool)\l android.support.constraint.solver.Pools.SimplePool.mPoolSize int \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.Pools.SimplePool.releaseAll((r4 'this' I:android.support.constraint.solver.Pools$SimplePool A[IMMUTABLE_TYPE, THIS]), (r5 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([TT;I)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_4;
}

