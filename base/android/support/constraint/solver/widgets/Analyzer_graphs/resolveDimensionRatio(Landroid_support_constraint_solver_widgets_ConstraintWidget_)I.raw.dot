digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.resolveDimensionRatio(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getHorizontalDimensionBehaviour():android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour type: VIRTUAL \l0x0004: SGET  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatioSide int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x0010: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0011: IGET  (r1 I:float) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatio float \l0x0013: ARITH  (r0 I:float) = (r0 I:float) * (r1 I:float) \l0x0015: CAST  (r0 I:int) = (int) (r0 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x001b: CAST  (r0 I:float) = (float) (r0 I:int) \l0x001c: IGET  (r1 I:float) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatio float \l0x001e: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x001f: CAST  (r0 I:int) = (int) (r0 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: INVOKE  \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r0 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.setWidth(int):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: INVOKE  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getVerticalDimensionBehaviour():android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour type: VIRTUAL \l0x0028: SGET  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0049 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IGET  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatioSide int \l0x002e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: INVOKE  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x0035: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0036: IGET  (r1 I:float) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatio float \l0x0038: ARITH  (r0 I:float) = (r0 I:float) * (r1 I:float) \l0x003a: CAST  (r0 I:int) = (int) (r0 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: INVOKE  (r0 I:int) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x0040: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0041: IGET  (r1 I:float) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatio float \l0x0043: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x0044: CAST  (r0 I:int) = (int) (r0 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: INVOKE  \l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r0 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.setHeight(int):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int android.support.constraint.solver.widgets.Analyzer.resolveDimensionRatio((r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_14 -> Node_15;
}

