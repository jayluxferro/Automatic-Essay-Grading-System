digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.getMaxDimension(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidgetGroup;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r10 I:int) * (2 int) \l0x0002: INVOKE  (r1 I:java.util.List) = \l  (r9 I:android.support.constraint.solver.widgets.ConstraintWidgetGroup)\l  (r10 I:int)\l android.support.constraint.solver.widgets.ConstraintWidgetGroup.getStartWidgets(int):java.util.List type: VIRTUAL \l0x0006: INVOKE  (r2 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:12:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r6 I:java.lang.Object) = (r1 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0013: CHECK_CAST  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget) = (android.support.constraint.solver.widgets.ConstraintWidget) (r6 I:?[OBJECT, ARRAY]) \l0x0015: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0017: ARITH  (r8 I:int) = (r0 I:int) + (1 int) \l0x0019: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x001b: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0021: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0023: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0029: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x002b: IGET  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: INVOKE  (r6 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r10 I:int)\l  (r7 I:boolean)\l  (r3 I:int)\l android.support.constraint.solver.widgets.Analyzer.getMaxDimensionTraversal(android.support.constraint.solver.widgets.ConstraintWidget, int, boolean, int):int type: STATIC \l0x0037: INVOKE  (r5 I:int) = (r5 I:int), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x003b: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IGET  (r9 I:int[]) = \l  (r9 I:android.support.constraint.solver.widgets.ConstraintWidgetGroup)\l android.support.constraint.solver.widgets.ConstraintWidgetGroup.mGroupDimensions int[] \l0x0040: APUT  \l  (r9 I:?[int, float][])\l  (r10 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{private static int android.support.constraint.solver.widgets.Analyzer.getMaxDimension((r9 I:android.support.constraint.solver.widgets.ConstraintWidgetGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
}

