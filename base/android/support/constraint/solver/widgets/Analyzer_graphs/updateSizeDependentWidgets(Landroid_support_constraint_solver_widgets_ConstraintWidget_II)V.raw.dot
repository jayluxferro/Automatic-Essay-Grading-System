digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.updateSizeDependentWidgets(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r7 I:int) * (2 int) \l0x0002: IGET  (r1 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0004: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0006: IGET  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0008: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x000a: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x000c: IGET  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x000e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IGET  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r8 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l android.support.constraint.solver.widgets.Analyzer.getParentBiasOffset(android.support.constraint.solver.widgets.ConstraintWidget, int):int type: STATIC \l0x001e: INVOKE  (r0 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getMargin():int type: VIRTUAL \l0x0022: ARITH  (r8 I:int) = (r8 I:int) + (r0 I:int) \l0x0023: INVOKE  \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l  (r8 I:int)\l android.support.constraint.solver.widgets.Optimizer.setOptimizedWidget(android.support.constraint.solver.widgets.ConstraintWidget, int, int):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IGET  (r3 I:float) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mDimensionRatio float \l0x0029: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CMP_L  (r3 I:int) = (r3 I:float), (r5 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0062 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: INVOKE  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.getDimensionBehaviour(int):android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour type: VIRTUAL \l0x0032: SGET  (r5 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0062 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: INVOKE  (r8 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.Analyzer.resolveDimensionRatio(android.support.constraint.solver.widgets.ConstraintWidget):int type: STATIC \l0x003a: IGET  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x003c: AGET  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x003e: INVOKE  (r0 I:android.support.constraint.solver.widgets.ResolutionAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getResolutionNode():android.support.constraint.solver.widgets.ResolutionAnchor type: VIRTUAL \l0x0042: IGET  (r0 I:float) = \l  (r0 I:android.support.constraint.solver.widgets.ResolutionAnchor)\l android.support.constraint.solver.widgets.ResolutionAnchor.resolvedOffset float \l0x0044: CAST  (r0 I:int) = (int) (r0 I:float) \l0x0045: ARITH  (r3 I:int) = (r0 I:int) + (r8 I:int) \l0x0047: INVOKE  (r5 I:android.support.constraint.solver.widgets.ResolutionAnchor) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getResolutionNode():android.support.constraint.solver.widgets.ResolutionAnchor type: VIRTUAL \l0x004b: INVOKE  (r1 I:android.support.constraint.solver.widgets.ResolutionAnchor) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getResolutionNode():android.support.constraint.solver.widgets.ResolutionAnchor type: VIRTUAL \l0x004f: IPUT  \l  (r1 I:android.support.constraint.solver.widgets.ResolutionAnchor)\l  (r5 I:android.support.constraint.solver.widgets.ResolutionAnchor)\l android.support.constraint.solver.widgets.ResolutionAnchor.resolvedTarget android.support.constraint.solver.widgets.ResolutionAnchor \l0x0051: INVOKE  (r1 I:android.support.constraint.solver.widgets.ResolutionAnchor) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getResolutionNode():android.support.constraint.solver.widgets.ResolutionAnchor type: VIRTUAL \l0x0055: CAST  (r8 I:float) = (float) (r8 I:int) \l0x0056: IPUT  \l  (r8 I:float)\l  (r1 I:android.support.constraint.solver.widgets.ResolutionAnchor)\l android.support.constraint.solver.widgets.ResolutionAnchor.resolvedOffset float \l0x0058: INVOKE  (r8 I:android.support.constraint.solver.widgets.ResolutionAnchor) = \l  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getResolutionNode():android.support.constraint.solver.widgets.ResolutionAnchor type: VIRTUAL \l0x005c: IPUT  \l  (r4 I:int)\l  (r8 I:android.support.constraint.solver.widgets.ResolutionAnchor)\l android.support.constraint.solver.widgets.ResolutionAnchor.state int \l0x005e: INVOKE  \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r0 I:int)\l  (r3 I:int)\l  (r7 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.setFrame(int, int, int):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0061|0x0061: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0062|0x0062: INVOKE  (r0 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.getRelativePositioning(int):int type: VIRTUAL \l0x0066: ARITH  (r8 I:int) = (r8 I:int) \- (r0 I:int) \l0x0067: INVOKE  (r0 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.getLength(int):int type: VIRTUAL \l0x006b: ARITH  (r0 I:int) = (r8 I:int) \- (r0 I:int) \l0x006d: INVOKE  \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r0 I:int)\l  (r8 I:int)\l  (r7 I:int)\l android.support.constraint.solver.widgets.ConstraintWidget.setFrame(int, int, int):void type: VIRTUAL \l0x0070: INVOKE  \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r7 I:int)\l  (r0 I:int)\l android.support.constraint.solver.widgets.Optimizer.setOptimizedWidget(android.support.constraint.solver.widgets.ConstraintWidget, int, int):void type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0073|0x0073: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.constraint.solver.widgets.Analyzer.updateSizeDependentWidgets((r6 I:android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

