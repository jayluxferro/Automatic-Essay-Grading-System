digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.resolveDimensionRatio(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;)I" {
subgraph cluster_Region_608106268 {
label = "R(1:(3:(1:4)(1:5)|6|15)(1:(1:14)(3:(1:11)(1:12)|13|16))) | DECL_VAR: int null, int null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_361324214 {
label = "IF [B:1:0x0006] THEN: R(3:(1:4)(1:5)|6|15) ELSE: R(1:(1:14)(3:(1:11)(1:12)|13|16))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2.getHorizontalDimensionBehaviour() == android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L_0x0008\l}"];
subgraph cluster_Region_1262405703 {
label = "R(3:(1:4)(1:5)|6|15)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_675357502 {
label = "IF [B:3:0x000a] THEN: R(1:4) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r2.mDimensionRatioSide == 0) goto L_0x000c\l}"];
subgraph cluster_Region_538892205 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|int r0 = (int) (((float) r2.getHeight()) * r2.mDimensionRatio)\l}"];
}
subgraph cluster_Region_1699498557 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|int r0 = (int) (((float) r2.getHeight()) \/ r2.mDimensionRatio)\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0020|PHI: r0 \l  PHI: (r0v14 int) = (r0v18 int), (r0v22 int) binds: [B:5:0x0017, B:4:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|r2.setWidth(r0)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
subgraph cluster_Region_2064955197 {
label = "R(1:(1:14)(3:(1:11)(1:12)|13|16)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_615987719 {
label = "IF [B:8:0x002a] THEN: R(1:14) ELSE: R(3:(1:11)(1:12)|13|16) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002a|if (r2.getVerticalDimensionBehaviour() != android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L_0x0049\l}"];
subgraph cluster_Region_427209254 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0049|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
}
subgraph cluster_Region_940518117 {
label = "R(3:(1:11)(1:12)|13|16)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1727844230 {
label = "IF [B:10:0x002f] THEN: R(1:11) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002f|if (r2.mDimensionRatioSide == 1) goto L_0x0031\l}"];
subgraph cluster_Region_1476795688 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0031|int r0 = (int) (((float) r2.getWidth()) * r2.mDimensionRatio)\l}"];
}
subgraph cluster_Region_1285264641 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x003c|int r0 = (int) (((float) r2.getWidth()) \/ r2.mDimensionRatio)\l}"];
}
}
Node_13 [shape=record,label="{13\:\ 0x0045|PHI: r0 \l  PHI: (r0v4 int) = (r0v8 int), (r0v12 int) binds: [B:12:0x003c, B:11:0x0031] A[DONT_GENERATE, DONT_INLINE]\l|r2.setHeight(r0)\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0024}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002c}"];
MethodNode[shape=record,label="{private static int android.support.constraint.solver.widgets.Analyzer.resolveDimensionRatio((r2v0 android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_16;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

