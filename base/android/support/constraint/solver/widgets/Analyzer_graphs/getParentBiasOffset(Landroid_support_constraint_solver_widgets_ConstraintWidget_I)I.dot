digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.getParentBiasOffset(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5 * 2\lr1 = r4.mListAnchors[r0]\lr0 = r4.mListAnchors[r0 + 1]\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r1.mTarget == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if (r1.mTarget.mOwner != r4.mParent) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r0.mTarget == null) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if (r0.mTarget.mOwner != r4.mParent) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|int r2 = r4.mParent.getLength(r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|if (r5 != 0) goto L_0x002f\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|float r3 = r4.mHorizontalBiasPercent\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|float r3 = r4.mVerticalBiasPercent\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|PHI: r3 \l  PHI: (r3v2 float) = (r3v3 float), (r3v4 float) binds: [B:11:0x002f, B:10:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r4.getLength(r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|RETURN\l|return (int) (((float) (((r2 \- r1.getMargin()) \- r0.getMargin()) \- r4)) * r3)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
MethodNode[shape=record,label="{private static int android.support.constraint.solver.widgets.Analyzer.getParentBiasOffset((r4v0 android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

