digraph "CFG forandroid.support.constraint.solver.widgets.Analyzer.getMaxDimensionTraversal(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;IZI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r23\lr1 = r24\lr2 = r25\lr4 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r0.mOptimizerMeasurable != false) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|RETURN\l|return 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r0.mBaseline.mTarget == null) goto L_0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r1 != 1) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|r3 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|r3 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|PHI: r3 \l  PHI: (r3v3 boolean) = (r3v25 boolean), (r3v26 boolean) binds: [B:7:0x0017, B:6:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x002c\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|int r6 = r23.getBaselineDistance()\lint r7 = r23.getHeight() \- r23.getBaselineDistance()\lint r8 = r1 * 2\lint r9 = r8 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|int r6 = r23.getHeight() \- r23.getBaselineDistance()\lint r7 = r23.getBaselineDistance()\lint r9 = r1 * 2\lint r8 = r9 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|PHI: r6 r7 r8 r9 \l  PHI: (r6v0 int) = (r6v2 int), (r6v3 int) binds: [B:10:0x002c, B:9:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v0 int) = (r7v2 int), (r7v4 int) binds: [B:10:0x002c, B:9:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v0 int) = (r8v3 int), (r8v5 int) binds: [B:10:0x002c, B:9:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v4 int), (r9v5 int) binds: [B:10:0x002c, B:9:0x001a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|if (r0.mListAnchors[r9].mTarget == null) goto L_0x0051\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045}"];
Node_14 [shape=record,label="{14\:\ 0x004b|if (r0.mListAnchors[r8].mTarget != null) goto L_0x0051\l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|r10 = r8\lr8 = r9\lr9 = \-1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|r10 = r9\lr9 = 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|PHI: r8 r9 r10 \l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:16:0x0051, B:15:0x004d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v2 int), (r9v3 int) binds: [B:16:0x0051, B:15:0x004d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v3 int) = (r10v12 int), (r10v16 int) binds: [B:16:0x0051, B:15:0x004d] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L_0x0058\l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|int r12 = r26 \- r6\l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|r12 = r26\l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|PHI: r12 \l  PHI: (r12v0 int) = (r12v4 int), (r12v5 int) binds: [B:19:0x0058, B:18:0x0055] A[DONT_GENERATE, DONT_INLINE]\l|int r13 = (r0.mListAnchors[r8].getMargin() * r9) + getParentBiasOffset(r23, r24)\lint r12 = r12 + r13\l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|if (r1 != 0) goto L_0x0071\l}"];
Node_22 [shape=record,label="{22\:\ 0x006c|int r14 = r23.getWidth()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0071|int r14 = r23.getHeight()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0075|PHI: r14 \l  PHI: (r14v1 int) = (r14v3 int), (r14v4 int) binds: [B:23:0x0071, B:22:0x006c] A[DONT_GENERATE, DONT_INLINE]\l|int r14 = r14 * r9\ljava.util.Iterator r15 = r0.mListAnchors[r8].getResolutionNode().dependents.iterator()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|LOOP_START\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v5 int) binds: [B:24:0x0075, B:27:0x008b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:25:0x0085\-\>B:27:0x008b\l}"];
Node_26 [shape=record,label="{26\:\ 0x0089|if (r15.hasNext() == false) goto L_0x00a2\l}"];
Node_27 [shape=record,label="{27\:\ 0x008b|LOOP_END\lLOOP:0: B:25:0x0085\-\>B:27:0x008b\l|int r4 = java.lang.Math.max(r4, getMaxDimensionTraversal(((android.support.constraint.solver.widgets.ResolutionAnchor) ((android.support.constraint.solver.widgets.ResolutionNode) r15.next())).myAnchor.mOwner, r1, r2, r12))\l}"];
Node_28 [shape=record,label="{28\:\ 0x00a2|java.util.Iterator r11 = r0.mListAnchors[r10].getResolutionNode().dependents.iterator()\lr15 = 0\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b1|LOOP_START\lPHI: r11 r15 \l  PHI: (r11v5 java.util.Iterator) = (r11v4 java.util.Iterator), (r11v19 java.util.Iterator) binds: [B:28:0x00a2, B:31:0x00b7] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v6 int) = (r15v5 int), (r15v10 int) binds: [B:28:0x00a2, B:31:0x00b7] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:29:0x00b1\-\>B:31:0x00b7\l}"];
Node_30 [shape=record,label="{30\:\ 0x00b5|if (r11.hasNext() == false) goto L_0x00d5\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b7|LOOP_END\lLOOP:1: B:29:0x00b1\-\>B:31:0x00b7\l|r18 = r11\lint r15 = java.lang.Math.max(r15, getMaxDimensionTraversal(((android.support.constraint.solver.widgets.ResolutionAnchor) ((android.support.constraint.solver.widgets.ResolutionNode) r11.next())).myAnchor.mOwner, r1, r2, r14 + r12))\lr11 = r18\l}"];
Node_32 [shape=record,label="{32\:\ 0x00d5|if (r3 == false) goto L_0x00db\l}"];
Node_33 [shape=record,label="{33\:\ 0x00d7|int r4 = r4 \- r6\lint r15 = r15 + r7\l}"];
Node_34 [shape=record,label="{34\:\ 0x00d9|PHI: r4 r15 \l  PHI: (r4v2 int) = (r4v1 int), (r4v4 int) binds: [B:38:0x00e6, B:33:0x00d7] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v8 int) = (r15v7 int), (r15v9 int) binds: [B:38:0x00e6, B:33:0x00d7] A[DONT_GENERATE, DONT_INLINE]\l|r5 = 1\l}"];
Node_35 [shape=record,label="{35\:\ 0x00db|if (r1 != 0) goto L_0x00e2\l}"];
Node_36 [shape=record,label="{36\:\ 0x00dd|int r5 = r23.getWidth()\l}"];
Node_37 [shape=record,label="{37\:\ 0x00e2|int r5 = r23.getHeight()\l}"];
Node_38 [shape=record,label="{38\:\ 0x00e6|PHI: r5 \l  PHI: (r5v1 int) = (r5v3 int), (r5v4 int) binds: [B:37:0x00e2, B:36:0x00dd] A[DONT_GENERATE, DONT_INLINE]\l|int r15 = r15 + (r5 * r9)\l}"];
Node_39 [shape=record,label="{39\:\ 0x00ea|if (r1 != 1) goto L_0x015e\l}"];
Node_40 [shape=record,label="{40\:\ 0x00ec|java.util.Iterator r11 = r0.mBaseline.getResolutionNode().dependents.iterator()\lr19 = 0\l}"];
Node_41 [shape=record,label="{41\:\ 0x00fa|LOOP_START\lPHI: r5 r10 r11 r19 \l  PHI: (r5v6 int) = (r5v5 int), (r5v8 int) binds: [B:40:0x00ec, B:47:0x0139] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v4 int) = (r10v3 int), (r10v9 int) binds: [B:40:0x00ec, B:47:0x0139] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v10 java.util.Iterator) = (r11v9 java.util.Iterator), (r11v13 java.util.Iterator) binds: [B:40:0x00ec, B:47:0x0139] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r19v1 int) = (r19v0 int), (r19v2 int) binds: [B:40:0x00ec, B:47:0x0139] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:41:0x00fa\-\>B:47:0x0139\l}"];
Node_42 [shape=record,label="{42\:\ 0x00fe|if (r11.hasNext() == false) goto L_0x013f\l}"];
Node_43 [shape=record,label="{43\:\ 0x0100|r20 = r11\landroid.support.constraint.solver.widgets.ResolutionAnchor r11 = (android.support.constraint.solver.widgets.ResolutionAnchor) ((android.support.constraint.solver.widgets.ResolutionNode) r11.next())\l}"];
Node_44 [shape=record,label="{44\:\ 0x010c|if (r9 != r5) goto L_0x0123\l}"];
Node_45 [shape=record,label="{45\:\ 0x010e|int r5 = getMaxDimensionTraversal(r11.myAnchor.mOwner, r1, r2, r6 + r12)\lr19 = java.lang.Math.max(r19, r5)\lr21 = r10\l}"];
Node_46 [shape=record,label="{46\:\ 0x0123|r21 = r10\lr19 = java.lang.Math.max(r19, getMaxDimensionTraversal(r11.myAnchor.mOwner, r1, r2, (r7 * r9) + r12))\l}"];
Node_47 [shape=record,label="{47\:\ 0x0139|LOOP_END\lPHI: r19 r21 \l  PHI: (r19v2 int) = (r19v3 int), (r19v4 int) binds: [B:81:0x0139, B:82:0x0139] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r21v3 int) = (r21v4 int), (r21v5 int) binds: [B:81:0x0139, B:82:0x0139] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:41:0x00fa\-\>B:47:0x0139\l|r11 = r20\lr10 = r21\lr5 = 1\l}"];
Node_48 [shape=record,label="{48\:\ 0x013f|r21 = r10\lr5 = r19\l}"];
Node_49 [shape=record,label="{49\:\ 0x014f|if (r0.mBaseline.getResolutionNode().dependents.size() \<= 0) goto L_0x015c\l}"];
Node_50 [shape=record,label="{50\:\ 0x0151|if (r3 != false) goto L_0x015c\l}"];
Node_51 [shape=record,label="{51\:\ 0x0153}"];
Node_52 [shape=record,label="{52\:\ 0x0154|if (r9 != 1) goto L_0x0159\l}"];
Node_53 [shape=record,label="{53\:\ 0x0156|int r3 = r5 + r6\l}"];
Node_54 [shape=record,label="{54\:\ 0x0159|int r3 = r5 \- r7\l}"];
Node_55 [shape=record,label="{55\:\ 0x015c|r3 = r5\l}"];
Node_56 [shape=record,label="{56\:\ 0x015e|r21 = r10\lr3 = 0\l}"];
Node_57 [shape=record,label="{57\:\ 0x0161|PHI: r3 r21 \l  PHI: (r3v4 int) = (r3v20 int), (r3v21 int), (r3v23 int), (r3v24 int) binds: [B:56:0x015e, B:55:0x015c, B:54:0x0159, B:53:0x0156] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r21v0 int) = (r21v1 int), (r21v2 int), (r21v2 int), (r21v2 int) binds: [B:56:0x015e, B:55:0x015c, B:54:0x0159, B:53:0x0156] A[DONT_GENERATE, DONT_INLINE]\l|int r13 = r13 + java.lang.Math.max(r4, java.lang.Math.max(r15, r3))\lint r3 = r12 + r14\l}"];
Node_58 [shape=record,label="{58\:\ 0x016d|if (r9 != \-1) goto L_0x0174\l}"];
Node_59 [shape=record,label="{59\:\ 0x016f|r22 = r12\lr12 = r3\lr3 = r22\l}"];
Node_60 [shape=record,label="{60\:\ 0x0174|PHI: r3 r12 \l  PHI: (r3v8 int) = (r3v7 int), (r3v19 int) binds: [B:58:0x016d, B:59:0x016f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v2 int) = (r12v1 int), (r12v3 int) binds: [B:58:0x016d, B:59:0x016f] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x017d\l}"];
Node_61 [shape=record,label="{61\:\ 0x0176|android.support.constraint.solver.widgets.Optimizer.setOptimizedWidget(r0, r1, r12)\lr0.setFrame(r12, r3, r1)\l}"];
Node_62 [shape=record,label="{62\:\ 0x017d|r0.mBelongingGroup.addWidgetsToSet(r0, r1)\lr0.setRelativePositioning(r12, r1)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0185}"];
Node_64 [shape=record,label="{64\:\ 0x018b|if (r23.getDimensionBehaviour(r24) != android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L_0x0199\l}"];
Node_65 [shape=record,label="{65\:\ 0x018d}"];
Node_66 [shape=record,label="{66\:\ 0x0192|if ((r0.mDimensionRatio \> 0.0f ? 1 : (r0.mDimensionRatio == 0.0f ? 0 : \-1)) == 0) goto L_0x0199\l}"];
Node_67 [shape=record,label="{67\:\ 0x0194|r0.mBelongingGroup.addWidgetsToSet(r0, r1)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0199}"];
Node_69 [shape=record,label="{69\:\ 0x019f|if (r0.mListAnchors[r8].mTarget == null) goto L_0x01c6\l}"];
Node_70 [shape=record,label="{70\:\ 0x01a1}"];
Node_71 [shape=record,label="{71\:\ 0x01a7|if (r0.mListAnchors[r21].mTarget == null) goto L_0x01c6\l}"];
Node_72 [shape=record,label="{72\:\ 0x01a9|android.support.constraint.solver.widgets.ConstraintWidget r2 = r23.getParent()\l}"];
Node_73 [shape=record,label="{73\:\ 0x01b5|if (r0.mListAnchors[r8].mTarget.mOwner != r2) goto L_0x01c6\l}"];
Node_74 [shape=record,label="{74\:\ 0x01b7}"];
Node_75 [shape=record,label="{75\:\ 0x01bf|if (r0.mListAnchors[r21].mTarget.mOwner != r2) goto L_0x01c6\l}"];
Node_76 [shape=record,label="{76\:\ 0x01c1|r0.mBelongingGroup.addWidgetsToSet(r0, r1)\l}"];
Node_77 [shape=record,label="{77\:\ 0x01c6|RETURN\l|return r13\l}"];
Node_78 [shape=record,label="{78\:\ 0x00a2|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x00d5|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x013f|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0139|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0139|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int android.support.constraint.solver.widgets.Analyzer.getMaxDimensionTraversal((r23v0 android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_78;
Node_27 -> Node_25;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_79;
Node_31 -> Node_29;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_39;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_34;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_56;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_80;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_82;
Node_46 -> Node_81;
Node_47 -> Node_41;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_55;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_55;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_57;
Node_54 -> Node_57;
Node_55 -> Node_57;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_63;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_68;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_77;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_77;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_77;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_76 -> Node_77;
Node_78 -> Node_28;
Node_79 -> Node_32;
Node_80 -> Node_48;
Node_81 -> Node_47;
Node_82 -> Node_47;
}

