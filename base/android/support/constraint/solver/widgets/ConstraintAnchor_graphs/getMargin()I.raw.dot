digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintAnchor.getMargin()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mOwner android.support.constraint.solver.widgets.ConstraintWidget \l0x0002: INVOKE  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getVisibility():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:int) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mGoneMargin int \l0x000e: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x0017: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mOwner android.support.constraint.solver.widgets.ConstraintWidget \l0x0019: INVOKE  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getVisibility():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IGET  (r0 I:int) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mGoneMargin int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r0 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IGET  (r0 I:int) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mMargin int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.constraint.solver.widgets.ConstraintAnchor.getMargin((r3 'this' I:android.support.constraint.solver.widgets.ConstraintAnchor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

