digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintAnchor.isConnectionToMe(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;Ljava\/util\/HashSet;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r8 I:java.util.HashSet), (r7 I:java.lang.Object) java.util.HashSet.contains(java.lang.Object):boolean type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r8 I:java.util.HashSet), (r7 I:java.lang.Object) java.util.HashSet.add(java.lang.Object):boolean type: VIRTUAL \l0x000b: INVOKE  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getOwner():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x000f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r7 I:java.util.ArrayList) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getAnchors():java.util.ArrayList type: VIRTUAL \l0x0017: INVOKE  (r0 I:int) = (r7 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x001b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:16:0x0042 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r4 I:java.lang.Object) = (r7 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0022: CHECK_CAST  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor) = (android.support.constraint.solver.widgets.ConstraintAnchor) (r4 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r5 I:boolean) = \l  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l  (r6 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.isSimilarDimensionConnection(android.support.constraint.solver.widgets.ConstraintAnchor):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r5 I:boolean) = \l  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.isConnected():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getTarget():android.support.constraint.solver.widgets.ConstraintAnchor type: VIRTUAL \l0x0034: INVOKE  (r4 I:android.support.constraint.solver.widgets.ConstraintWidget) = \l  (r4 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.getOwner():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x0038: INVOKE  (r4 I:boolean) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l  (r4 I:android.support.constraint.solver.widgets.ConstraintWidget)\l  (r8 I:java.util.HashSet)\l android.support.constraint.solver.widgets.ConstraintAnchor.isConnectionToMe(android.support.constraint.solver.widgets.ConstraintWidget, java.util.HashSet):boolean type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003f \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.constraint.solver.widgets.ConstraintAnchor.isConnectionToMe((r6 'this' I:android.support.constraint.solver.widgets.ConstraintAnchor A[IMMUTABLE_TYPE, THIS]), (r7 I:android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.HashSet\<android.support.constraint.solver.widgets.ConstraintWidget\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, Ljava\/util\/HashSet\<, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_7;
}

