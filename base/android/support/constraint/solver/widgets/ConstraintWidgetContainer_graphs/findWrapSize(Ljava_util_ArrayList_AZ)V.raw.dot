digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidgetContainer.findWrapSize(Ljava\/util\/ArrayList;[Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  (r13 I:int) = \l  (r18 I:java.util.ArrayList A[D('children' java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\>)])\l java.util.ArrayList.size():int type: VIRTUAL \l0x000a: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r16 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: APUT  \l  (r19 I:boolean[] A[D('flags' boolean[]), IMMUTABLE_TYPE])\l  (r15 I:?[int, short, byte, char])\l  (r16 I:boolean A[IMMUTABLE_TYPE])\l \l0x000f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r5 I:?[int, byte, short, char] A[D('j' int)]) \>= (r13 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:24:0x00d1 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('children' java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\>)])\l \l0x0014: INVOKE  (r14 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r5 I:int A[D('j' int)]) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0018: CHECK_CAST  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget) = (android.support.constraint.solver.widgets.ConstraintWidget) (r14 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r15 I:boolean) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.isRoot():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: ARITH  (r5 I:int A[D('j' int)]) = (r5 I:int A[D('j' int)]) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IGET  (r15 I:boolean) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mHorizontalWrapVisited boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0029: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY] A[D('flags' boolean[])]) \l0x002b: INVOKE  \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l  (r1 I:boolean[])\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.findHorizontalWrapRecursive(android.support.constraint.solver.widgets.ConstraintWidget, boolean[]):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IGET  (r15 I:boolean) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mVerticalWrapVisited boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0034: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY] A[D('flags' boolean[])]) \l0x0036: INVOKE  \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l  (r1 I:boolean[])\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.findVerticalWrapRecursive(android.support.constraint.solver.widgets.ConstraintWidget, boolean[]):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: AGET  (r15 I:boolean A[IMMUTABLE_TYPE]) = \l  (r19 I:boolean[] A[D('flags' boolean[]), IMMUTABLE_TYPE])\l  (r15 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToLeft int \l0x0041: IGET  (r0 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToRight int \l0x0043: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: ARITH  (r15 I:int) = (r15 I:int) + (r16 I:int) \l0x0047: INVOKE  (r16 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x004b: ARITH  (r4 I:int) = (r15 I:int) \- (r16 I:int) \l0x004d: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToTop int \l0x004f: IGET  (r0 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToBottom int \l0x0051: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0053: ARITH  (r15 I:int) = (r15 I:int) + (r16 I:int) \l0x0055: INVOKE  (r16 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x0059: ARITH  (r3 I:int) = (r15 I:int) \- (r16 I:int) \l0x005b: IGET  (r15 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mHorizontalDimensionBehaviour android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l0x005d: SGET  (r16 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_PARENT android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l0x005f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0061|0x0061: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x007f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|0x0063: INVOKE  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x0067: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mLeft android.support.constraint.solver.widgets.ConstraintAnchor \l0x0069: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x006d: IGET  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mMargin int \l0x006f: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0071: ARITH  (r15 I:int) = (r15 I:int) + (r16 I:int) \l0x0073: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mRight android.support.constraint.solver.widgets.ConstraintAnchor \l0x0075: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0077: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0079: IGET  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mMargin int \l0x007b: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007d: ARITH  (r4 I:int A[D('connectWidth' int)]) = (r15 I:int) + (r16 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x007f|0x007f: IGET  (r15 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mVerticalDimensionBehaviour android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l0x0081: SGET  (r16 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_PARENT android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l0x0083: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0085|0x0085: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00a3 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0087|0x0087: INVOKE  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x008b: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mTop android.support.constraint.solver.widgets.ConstraintAnchor \l0x008d: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x008f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0091: IGET  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mMargin int \l0x0093: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0095: ARITH  (r15 I:int) = (r15 I:int) + (r16 I:int) \l0x0097: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mBottom android.support.constraint.solver.widgets.ConstraintAnchor \l0x0099: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x009b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x009d: IGET  (r0 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mMargin int \l0x009f: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a1: ARITH  (r3 I:int A[D('connectHeight' int)]) = (r15 I:int) + (r16 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a3|0x00a3: INVOKE  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.getVisibility():int type: VIRTUAL \l0x00a7: CONST  (r16 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x00a9: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x00ab|0x00ab: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00af \l}"];
Node_22 [shape=record,label="{22\:\ 0x00ad|0x00ad: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('connectWidth' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ae: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('connectHeight' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x00af|0x00af: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToLeft int \l0x00b1: INVOKE  (r10 I:int A[D('maxLeftDist' int)]) = (r10 I:int A[D('maxLeftDist' int)]), (r15 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00b5: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToRight int \l0x00b7: INVOKE  (r11 I:int A[D('maxRightDist' int)]) = (r11 I:int A[D('maxRightDist' int)]), (r15 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00bb: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToBottom int \l0x00bd: INVOKE  (r7 I:int A[D('maxBottomDist' int)]) = (r7 I:int A[D('maxBottomDist' int)]), (r15 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00c1: IGET  (r15 I:int) = \l  (r14 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('widget' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mDistToTop int \l0x00c3: INVOKE  (r12 I:int A[D('maxTopDist' int)]) = (r12 I:int A[D('maxTopDist' int)]), (r15 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00c7: INVOKE  (r9 I:int A[D('maxConnectWidth' int)]) = \l  (r9 I:int A[D('maxConnectWidth' int)])\l  (r4 I:int A[D('connectWidth' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x00cb: INVOKE  (r8 I:int A[D('maxConnectHeight' int)]) = \l  (r8 I:int A[D('maxConnectHeight' int)])\l  (r3 I:int A[D('connectHeight' int)])\l java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x00d1|0x00d1: INVOKE  (r6 I:int) = \l  (r10 I:int A[D('maxLeftDist' int)])\l  (r11 I:int A[D('maxRightDist' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x00d5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00d7: IGET  (r15 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.mMinWidth int \l0x00d9: INVOKE  (r16 I:int) = \l  (r6 I:int A[D('max' int)])\l  (r9 I:int A[D('maxConnectWidth' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x00dd: INVOKE  (r15 I:int) = (r15 I:int), (r16 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00e1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00e3: IPUT  \l  (r15 I:int)\l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.mWrapWidth int \l0x00e5: INVOKE  (r6 I:int A[D('max' int)]) = \l  (r12 I:int A[D('maxTopDist' int)])\l  (r7 I:int A[D('maxBottomDist' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x00e9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00eb: IGET  (r15 I:int) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.mMinHeight int \l0x00ed: INVOKE  (r16 I:int) = \l  (r6 I:int A[D('max' int)])\l  (r8 I:int A[D('maxConnectHeight' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x00f1: INVOKE  (r15 I:int) = (r15 I:int), (r16 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x00f5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00f7: IPUT  \l  (r15 I:int)\l  (r0 I:android.support.constraint.solver.widgets.ConstraintWidgetContainer)\l android.support.constraint.solver.widgets.ConstraintWidgetContainer.mWrapHeight int \l0x00f9: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x00fa|0x00fa: IF  (r5 I:?[int, byte, short, char] A[D('j' int)]) \>= (r13 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:13:0x003e \l}"];
Node_26 [shape=record,label="{26\:\ 0x00fc|0x00fc: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('children' java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\>)])\l \l0x00fe: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r5 I:int A[D('j' int)]) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0102: CHECK_CAST  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget) = (android.support.constraint.solver.widgets.ConstraintWidget) (r2 I:?[OBJECT, ARRAY]) \l0x0104: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0105: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mHorizontalWrapVisited boolean \l0x0107: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0108: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mVerticalWrapVisited boolean \l0x010a: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010b: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mLeftHasCentered boolean \l0x010d: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010e: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mRightHasCentered boolean \l0x0110: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0111: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mTopHasCentered boolean \l0x0113: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0114: IPUT  \l  (r15 I:boolean)\l  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget A[D('child' android.support.constraint.solver.widgets.ConstraintWidget)])\l android.support.constraint.solver.widgets.ConstraintWidget.mBottomHasCentered boolean \l0x0116: ARITH  (r5 I:int A[D('j' int)]) = (r5 I:int A[D('j' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.ConstraintWidgetContainer.findWrapSize((r17 'this' I:android.support.constraint.solver.widgets.ConstraintWidgetContainer A[IMMUTABLE_TYPE, THIS]), (r18 I:java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean[] A[D('flags' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x003e: r14 'widget' android.support.constraint.solver.widgets.ConstraintWidget\l  0x005b\-0x00d1: r3 'connectHeight' int\l  0x004d\-0x00d1: r4 'connectWidth' int\l  0x003f\-0x00d1: r14 'widget' android.support.constraint.solver.widgets.ConstraintWidget\l  0x0104\-0x0118: r2 'child' android.support.constraint.solver.widgets.ConstraintWidget\l  0x0010\-0x0118: r5 'j' int\l  0x00d5\-0x0118: r6 'max' int\l  0x0004\-0x0118: r7 'maxBottomDist' int\l  0x0006\-0x0118: r8 'maxConnectHeight' int\l  0x0005\-0x0118: r9 'maxConnectWidth' int\l  0x0002\-0x0118: r10 'maxLeftDist' int\l  0x0003\-0x0118: r11 'maxRightDist' int\l  0x0001\-0x0118: r12 'maxTopDist' int\l  0x000a\-0x0118: r13 'size' int\l  0x0000\-0x0118: r18 'children' java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\>\l  ?\-0x0118: r19 'flags' boolean[]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList, \<, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, \>;[Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_4;
Node_24 -> Node_25;
Node_25 -> Node_13;
Node_25 -> Node_26[style=dashed];
Node_26 -> Node_25;
}

