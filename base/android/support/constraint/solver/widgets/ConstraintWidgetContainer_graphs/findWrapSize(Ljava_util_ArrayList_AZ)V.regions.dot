digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidgetContainer.findWrapSize(Ljava\/util\/ArrayList;[Z)V" {
subgraph cluster_Region_1821042464 {
label = "R(4:0|(3:2|(3:(1:7)|(1:10)|(5:13|(1:15)|(1:18)|(1:21)|22)(1:31))(0)|4)|23|(1:25))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r12 = 0\lint r10 = 0\lint r11 = 0\lint r7 = 0\lint r9 = 0\lint r8 = 0\lint int r13 = r18.size()\lr19[0] = true\lint r5 = 0\l}"];
subgraph cluster_LoopRegion_1026098203 {
label = "LOOP:0: (3:2|(3:(1:7)|(1:10)|(5:13|(1:15)|(1:18)|(1:21)|22)(1:31))(0)|4)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0010|LOOP_START\lPHI: r5 r7 r8 r9 r10 r11 r12 \l  PHI: (r5v1 'j' int) = (r5v0 'j' int), (r5v5 'j' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 'maxBottomDist' int) = (r7v0 'maxBottomDist' int), (r7v3 'maxBottomDist' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 'maxConnectHeight' int) = (r8v0 'maxConnectHeight' int), (r8v3 'maxConnectHeight' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'maxConnectWidth' int) = (r9v0 'maxConnectWidth' int), (r9v3 'maxConnectWidth' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 'maxLeftDist' int) = (r10v0 'maxLeftDist' int), (r10v3 'maxLeftDist' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'maxRightDist' int) = (r11v0 'maxRightDist' int), (r11v3 'maxRightDist' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'maxTopDist' int) = (r12v0 'maxTopDist' int), (r12v3 'maxTopDist' int) binds: [B:0:0x0000, B:4:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:4:0x0020\l|if (r5 \< r13) goto L_0x0012\l}"];
subgraph cluster_Region_1865034109 {
label = "R(3:2|(3:(1:7)|(1:10)|(5:13|(1:15)|(1:18)|(1:21)|22)(1:31))(0)|4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0012|android.support.constraint.solver.widgets.ConstraintWidget android.support.constraint.solver.widgets.ConstraintWidget r14 = r18.get(r5)\l}"];
subgraph cluster_IfRegion_1505403903 {
label = "IF [B:3:0x001e] THEN: R(3:(1:7)|(1:10)|(5:13|(1:15)|(1:18)|(1:21)|22)(1:31)) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001e|if (r14.isRoot() == false) goto L_0x0023\l}"];
subgraph cluster_Region_839087434 {
label = "R(3:(1:7)|(1:10)|(5:13|(1:15)|(1:18)|(1:21)|22)(1:31))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_510014561 {
label = "IF [B:6:0x0025] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0025|if (r14.mHorizontalWrapVisited == false) goto L_0x0027\l}"];
subgraph cluster_Region_540645137 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0027|findHorizontalWrapRecursive(r14, r19)\l}"];
}
}
subgraph cluster_IfRegion_1065167829 {
label = "IF [B:9:0x0030] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0030|if (r14.mVerticalWrapVisited == false) goto L_0x0032\l}"];
subgraph cluster_Region_869581470 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0032|findVerticalWrapRecursive(r14, r19)\l}"];
}
}
subgraph cluster_IfRegion_1292464861 {
label = "IF [B:12:0x003c] THEN: R(5:13|(1:15)|(1:18)|(1:21)|22) ELSE: R(1:31)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x003c|if (r19[0] != false) goto L_0x003f\l}"];
subgraph cluster_Region_745400400 {
label = "R(5:13|(1:15)|(1:18)|(1:21)|22)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x003f|int int r4 = (r14.mDistToLeft + r14.mDistToRight) \- r14.getWidth()\lint int r3 = (r14.mDistToTop + r14.mDistToBottom) \- r14.getHeight()\l}"];
subgraph cluster_IfRegion_473836985 {
label = "IF [B:14:0x0061] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0061|if (r14.mHorizontalDimensionBehaviour == android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_PARENT) goto L_0x0063\l}"];
subgraph cluster_Region_1884528688 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0063|int r4 = r14.getWidth() + r14.mLeft.mMargin + r14.mRight.mMargin\l}"];
}
}
subgraph cluster_IfRegion_640028268 {
label = "IF [B:17:0x0085] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0085|if (r14.mVerticalDimensionBehaviour == android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_PARENT) goto L_0x0087\l}"];
subgraph cluster_Region_871626756 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0087|int r3 = r14.getHeight() + r14.mTop.mMargin + r14.mBottom.mMargin\l}"];
}
}
subgraph cluster_IfRegion_1590511654 {
label = "IF [B:20:0x00ab] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x00ab|if (r14.getVisibility() == 8) goto L_0x00ad\l}"];
subgraph cluster_Region_863121903 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x00ad|r4 = 0\lr3 = 0\l}"];
}
}
Node_22 [shape=record,label="{22\:\ 0x00af|PHI: r3 r4 \l  PHI: (r3v2 'connectHeight' int) = (r3v1 'connectHeight' int), (r3v3 'connectHeight' int) binds: [B:20:0x00ab, B:21:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'connectWidth' int) = (r4v1 'connectWidth' int), (r4v3 'connectWidth' int) binds: [B:20:0x00ab, B:21:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l|int r10 = java.lang.Math.max(r10, r14.mDistToLeft)\lint r11 = java.lang.Math.max(r11, r14.mDistToRight)\lint r7 = java.lang.Math.max(r7, r14.mDistToBottom)\lint r12 = java.lang.Math.max(r12, r14.mDistToTop)\lint r9 = java.lang.Math.max(r9, r4)\lint r8 = java.lang.Math.max(r8, r3)\l}"];
}
subgraph cluster_Region_115224446 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
}
subgraph cluster_Region_1666255983 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_4 [shape=record,label="{4\:\ 0x0020|LOOP_END\lPHI: r7 r8 r9 r10 r11 r12 \l  PHI: (r7v3 'maxBottomDist' int) = (r7v1 'maxBottomDist' int), (r7v2 'maxBottomDist' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v3 'maxConnectHeight' int) = (r8v1 'maxConnectHeight' int), (r8v2 'maxConnectHeight' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v3 'maxConnectWidth' int) = (r9v1 'maxConnectWidth' int), (r9v2 'maxConnectWidth' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v3 'maxLeftDist' int) = (r10v1 'maxLeftDist' int), (r10v2 'maxLeftDist' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v3 'maxRightDist' int) = (r11v1 'maxRightDist' int), (r11v2 'maxRightDist' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v3 'maxTopDist' int) = (r12v1 'maxTopDist' int), (r12v2 'maxTopDist' int) binds: [B:28:0x0020, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:4:0x0020\l|r5++\l}"];
}
}
Node_23 [shape=record,label="{23\:\ 0x00d1|r17.mWrapWidth = java.lang.Math.max(r17.mMinWidth, java.lang.Math.max(java.lang.Math.max(r10, r11), r9))\lr17.mWrapHeight = java.lang.Math.max(r17.mMinHeight, java.lang.Math.max(java.lang.Math.max(r12, r7), r8))\lint r5 = 0\l}"];
subgraph cluster_LoopRegion_1411540798 {
label = "LOOP:1: (1:25)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x00fa|LOOP_START\lPHI: r5 \l  PHI: (r5v3 'j' int) = (r5v2 'j' int), (r5v4 'j' int) binds: [B:23:0x00d1, B:25:0x00fc] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:24:0x00fa\-\>B:25:0x00fc\l|if (r5 \< r13) goto L_0x00fc\l}"];
subgraph cluster_Region_751199136 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x00fc|LOOP_END\lLOOP:1: B:24:0x00fa\-\>B:25:0x00fc\l|android.support.constraint.solver.widgets.ConstraintWidget android.support.constraint.solver.widgets.ConstraintWidget r2 = r18.get(r5)\lr2.mHorizontalWrapVisited = false\lr2.mVerticalWrapVisited = false\lr2.mLeftHasCentered = false\lr2.mRightHasCentered = false\lr2.mTopHasCentered = false\lr2.mBottomHasCentered = false\lr5++\l}"];
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0023}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002e}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0039}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x007f|PHI: r4 \l  PHI: (r4v1 'connectWidth' int) = (r4v0 'connectWidth' int), (r4v4 'connectWidth' int) binds: [B:14:0x0061, B:15:0x0063] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x00a3|PHI: r3 \l  PHI: (r3v1 'connectHeight' int) = (r3v0 'connectHeight' int), (r3v4 'connectHeight' int) binds: [B:17:0x0085, B:18:0x0087] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x00d1|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x003e|SYNTHETIC\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0020|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0020|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x003e|SYNTHETIC\l}"];
Node_32 [shape=record,color=red,label="{32\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.ConstraintWidgetContainer.findWrapSize((r17v0 'this' android.support.constraint.solver.widgets.ConstraintWidgetContainer A[IMMUTABLE_TYPE, THIS]), (r18v0 'children' java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'flags' boolean[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList, \<, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, \>;[Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_26[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_28[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_27[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_22[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_29;
Node_4 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_30[style=dashed];
Node_25 -> Node_24;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_16 -> Node_17;
Node_19 -> Node_20;
Node_26 -> Node_23;
Node_27 -> Node_31;
Node_28 -> Node_4;
Node_29 -> Node_4;
Node_30 -> Node_32;
}

