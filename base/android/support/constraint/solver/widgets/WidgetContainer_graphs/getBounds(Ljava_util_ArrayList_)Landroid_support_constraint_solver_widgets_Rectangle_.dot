digraph "CFG forandroid.support.constraint.solver.widgets.WidgetContainer.getBounds(Ljava\/util\/ArrayList;)Landroid\/support\/constraint\/solver\/widgets\/Rectangle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.constraint.solver.widgets.Rectangle r0 = new android.support.constraint.solver.widgets.Rectangle()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r9.size() != 0) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|RETURN\l|return r0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|int r1 = r9.size()\lr2 = Integer.MAX_VALUE\lr3 = 0\lr4 = Integer.MAX_VALUE\lr5 = 0\lr6 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|LOOP_START\lPHI: r2 r3 r4 r5 r6 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:3:0x000c, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:3:0x000c, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:3:0x000c, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v0 int), (r5v3 int) binds: [B:3:0x000c, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:3:0x000c, B:17:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0019\-\>B:17:0x0049\l|if (r3 \>= r1) goto L_0x004c\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|android.support.constraint.solver.widgets.ConstraintWidget r7 = r9.get(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|if (r7.getX() \>= r2) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|int r2 = r7.getX()\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|PHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:6:0x0025, B:7:0x0027] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|if (r7.getY() \>= r4) goto L_0x0035\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|int r4 = r7.getY()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|PHI: r4 \l  PHI: (r4v2 int) = (r4v1 int), (r4v3 int) binds: [B:9:0x002f, B:10:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|if (r7.getRight() \<= r5) goto L_0x003f\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|int r5 = r7.getRight()\l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|PHI: r5 \l  PHI: (r5v3 int) = (r5v1 int), (r5v4 int) binds: [B:12:0x0039, B:13:0x003b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|if (r7.getBottom() \<= r6) goto L_0x0049\l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|int r6 = r7.getBottom()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|LOOP_END\lPHI: r6 \l  PHI: (r6v3 int) = (r6v1 int), (r6v4 int) binds: [B:22:0x0049, B:21:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0019\-\>B:17:0x0049\l|int r3 = r3 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|r0.setBounds(r2, r4, r5 \- r2, r6 \- r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|RETURN\l|return r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static android.support.constraint.solver.widgets.Rectangle android.support.constraint.solver.widgets.WidgetContainer.getBounds((r9v0 java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, \>;), Landroid\/support\/constraint\/solver\/widgets\/Rectangle;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_21;
Node_17 -> Node_4;
Node_18 -> Node_19;
Node_20 -> Node_18;
Node_21 -> Node_17;
Node_22 -> Node_17;
}

