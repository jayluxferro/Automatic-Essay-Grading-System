digraph "CFG forandroid.support.constraint.solver.widgets.WidgetContainer.getBounds(Ljava\/util\/ArrayList;)Landroid\/support\/constraint\/solver\/widgets\/Rectangle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:android.support.constraint.solver.widgets.Rectangle) =  android.support.constraint.solver.widgets.Rectangle \l0x0002: INVOKE  (r0 I:android.support.constraint.solver.widgets.Rectangle) android.support.constraint.solver.widgets.Rectangle.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r9 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r0 I:android.support.constraint.solver.widgets.Rectangle) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = (r9 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0017: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:18:0x004c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r7 I:java.lang.Object) = (r9 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x001f: CHECK_CAST  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget) = (android.support.constraint.solver.widgets.ConstraintWidget) (r7 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r8 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getX():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r8 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: INVOKE  (r2 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getX():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  (r8 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getY():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IF  (r8 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: INVOKE  (r4 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getY():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r8 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getRight():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: IF  (r8 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: INVOKE  (r5 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getRight():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: INVOKE  (r8 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getBottom():int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r8 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:17:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: INVOKE  (r6 I:int) = \l  (r7 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getBottom():int type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: ARITH  (r5 I:int) = (r5 I:int) \- (r2 I:int) \l0x004d: ARITH  (r6 I:int) = (r6 I:int) \- (r4 I:int) \l0x004e: INVOKE  \l  (r0 I:android.support.constraint.solver.widgets.Rectangle)\l  (r2 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l android.support.constraint.solver.widgets.Rectangle.setBounds(int, int, int, int):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: RETURN  (r0 I:android.support.constraint.solver.widgets.Rectangle) \l}"];
MethodNode[shape=record,label="{public static android.support.constraint.solver.widgets.Rectangle android.support.constraint.solver.widgets.WidgetContainer.getBounds((r9 I:java.util.ArrayList\<android.support.constraint.solver.widgets.ConstraintWidget\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;, \>;), Landroid\/support\/constraint\/solver\/widgets\/Rectangle;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_4;
Node_18 -> Node_19;
}

