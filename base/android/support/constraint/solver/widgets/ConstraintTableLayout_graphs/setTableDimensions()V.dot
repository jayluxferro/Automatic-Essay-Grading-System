digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintTableLayout.setTableDimensions()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r4.mChildren.size()\lr1 = 0\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v13 int) binds: [B:0:0x0000, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:0:0x0000, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|if (r1 \>= r0) goto L_0x001a\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|int r2 = r2 + ((android.support.constraint.solver.widgets.ConstraintWidget) r4.mChildren.get(r1)).getContainerItemSkip()\lint r1 = r1 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|int r0 = r0 + r2\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|if (r4.mVerticalGrowth == false) goto L_0x0049\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020}"];
Node_6 [shape=record,label="{6\:\ 0x0022|if (r4.mNumCols != 0) goto L_0x0027\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|setNumCols(1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|int r1 = r0 \/ r4.mNumCols\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|if ((r4.mNumCols * r1) \>= r0) goto L_0x0033\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|int r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|PHI: r1 \l  PHI: (r1v11 int) = (r1v10 int), (r1v12 int) binds: [B:9:0x002f, B:10:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|if (r4.mNumRows != r1) goto L_0x0043\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037}"];
Node_14 [shape=record,label="{14\:\ 0x0040|if (r4.mVerticalGuidelines.size() != (r4.mNumCols \- 1)) goto L_0x0043\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|r4.mNumRows = r1\lsetHorizontalSlices()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049}"];
Node_18 [shape=record,label="{18\:\ 0x004b|if (r4.mNumRows != 0) goto L_0x0050\l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|setNumRows(1)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|int r1 = r0 \/ r4.mNumRows\l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|if ((r4.mNumRows * r1) \>= r0) goto L_0x005c\l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|int r1 = r1 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x005c|PHI: r1 \l  PHI: (r1v6 int) = (r1v5 int), (r1v7 int) binds: [B:21:0x0058, B:22:0x005a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|if (r4.mNumCols != r1) goto L_0x006c\l}"];
Node_25 [shape=record,label="{25\:\ 0x0060}"];
Node_26 [shape=record,label="{26\:\ 0x0069|if (r4.mHorizontalGuidelines.size() != (r4.mNumRows \- 1)) goto L_0x006c\l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ 0x006c|r4.mNumCols = r1\lsetVerticalSlices()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0071|setChildrenConnections()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0074|RETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.ConstraintTableLayout.setTableDimensions((r4v0 'this' android.support.constraint.solver.widgets.ConstraintTableLayout A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_29;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_3;
}

