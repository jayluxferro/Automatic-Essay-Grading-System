digraph "CFG forandroid.support.constraint.solver.widgets.Guideline.setDrawOrigin(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mOrientation int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r6 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mOffsetX int \l0x000a: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x000b: IGET  (r6 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativeBegin int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r5 I:int)\l android.support.constraint.solver.widgets.Guideline.setGuideBegin(int):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IGET  (r6 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativeEnd int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.getParent():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x001b: INVOKE  (r6 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x001f: ARITH  (r6 I:int) = (r6 I:int) \- (r5 I:int) \l0x0020: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r6 I:int)\l android.support.constraint.solver.widgets.Guideline.setGuideEnd(int):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r6 I:float) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativePercent float \l0x0026: CMP_L  (r6 I:int) = (r6 I:float), (r1 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0069 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CAST  (r5 I:float) = (float) (r5 I:int) \l0x002b: INVOKE  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.getParent():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x002f: INVOKE  (r6 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getWidth():int type: VIRTUAL \l0x0033: CAST  (r6 I:float) = (float) (r6 I:int) \l0x0034: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x0035: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r5 I:float)\l android.support.constraint.solver.widgets.Guideline.setGuidePercent(float):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IGET  (r5 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mOffsetY int \l0x003b: ARITH  (r6 I:int) = (r6 I:int) \- (r5 I:int) \l0x003c: IGET  (r5 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativeBegin int \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r6 I:int)\l android.support.constraint.solver.widgets.Guideline.setGuideBegin(int):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: IGET  (r5 I:int) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativeEnd int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0055 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: INVOKE  (r5 I:android.support.constraint.solver.widgets.ConstraintWidget) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.getParent():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x004c: INVOKE  (r5 I:int) = \l  (r5 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x0050: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l0x0051: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r5 I:int)\l android.support.constraint.solver.widgets.Guideline.setGuideEnd(int):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: IGET  (r5 I:float) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mRelativePercent float \l0x0057: CMP_L  (r5 I:int) = (r5 I:float), (r1 I:float) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0069 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005b|0x005b: CAST  (r5 I:float) = (float) (r6 I:int) \l0x005c: INVOKE  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget) = (r4 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.getParent():android.support.constraint.solver.widgets.ConstraintWidget type: VIRTUAL \l0x0060: INVOKE  (r6 I:int) = \l  (r6 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.getHeight():int type: VIRTUAL \l0x0064: CAST  (r6 I:float) = (float) (r6 I:int) \l0x0065: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x0066: INVOKE  \l  (r4 I:android.support.constraint.solver.widgets.Guideline)\l  (r5 I:float)\l android.support.constraint.solver.widgets.Guideline.setGuidePercent(float):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0069|0x0069: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.Guideline.setDrawOrigin((r4 'this' I:android.support.constraint.solver.widgets.Guideline A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
}

