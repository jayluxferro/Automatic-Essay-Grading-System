digraph "CFG forandroid.support.constraint.solver.widgets.Guideline.getAnchor(Landroid\/support\/constraint\/solver\/widgets\/ConstraintAnchor$Type;)Landroid\/support\/constraint\/solver\/widgets\/ConstraintAnchor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  android.support.constraint.solver.widgets.Guideline.1.$SwitchMap$android$support$constraint$solver$widgets$ConstraintAnchor$Type int[] \l0x0002: INVOKE  (r1 I:int) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor$Type)\l android.support.constraint.solver.widgets.ConstraintAnchor.Type.ordinal():int type: VIRTUAL \l0x0006: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6, 7, 8, 9] t:[0x0015, 0x0015, 0x000e, 0x000e, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r0 I:int) = (r2 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mOrientation int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IGET  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor) = (r2 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mAnchor android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: RETURN  \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IGET  (r0 I:int) = (r2 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mOrientation int \l0x0017: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IGET  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor) = (r2 I:android.support.constraint.solver.widgets.Guideline) android.support.constraint.solver.widgets.Guideline.mAnchor android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: RETURN  \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001f: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor$Type)\l android.support.constraint.solver.widgets.ConstraintAnchor.Type.name():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r0 I:java.lang.AssertionError), (r3 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.support.constraint.solver.widgets.ConstraintAnchor android.support.constraint.solver.widgets.Guideline.getAnchor((r2 'this' I:android.support.constraint.solver.widgets.Guideline A[IMMUTABLE_TYPE, THIS]), (r3 I:android.support.constraint.solver.widgets.ConstraintAnchor$Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_5;
Node_1 -> Node_9;
Node_1 -> Node_13;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

