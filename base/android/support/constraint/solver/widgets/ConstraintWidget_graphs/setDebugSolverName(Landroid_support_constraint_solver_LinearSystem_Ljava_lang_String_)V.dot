digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.setDebugSolverName(Landroid\/support\/constraint\/solver\/LinearSystem;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.mDebugName = r8\landroid.support.constraint.solver.SolverVariable r0 = r7.createObjectVariable(r6.mLeft)\landroid.support.constraint.solver.SolverVariable r1 = r7.createObjectVariable(r6.mTop)\landroid.support.constraint.solver.SolverVariable r2 = r7.createObjectVariable(r6.mRight)\landroid.support.constraint.solver.SolverVariable r3 = r7.createObjectVariable(r6.mBottom)\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(r8)\lr4.append(\".left\")\lr0.setName(r4.toString())\ljava.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r8)\lr0.append(\".top\")\lr1.setName(r0.toString())\ljava.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r8)\lr0.append(\".right\")\lr2.setName(r0.toString())\ljava.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r8)\lr0.append(\".bottom\")\lr3.setName(r0.toString())\l}"];
Node_1 [shape=record,label="{1\:\ 0x006c|if (r6.mBaselineDistance \<= 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x006e|android.support.constraint.solver.SolverVariable r7 = r7.createObjectVariable(r6.mBaseline)\ljava.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r8)\lr0.append(\".baseline\")\lr7.setName(r0.toString())\l}"];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.ConstraintWidget.setDebugSolverName((r6v0 'this' android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r7v0 android.support.constraint.solver.LinearSystem A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

