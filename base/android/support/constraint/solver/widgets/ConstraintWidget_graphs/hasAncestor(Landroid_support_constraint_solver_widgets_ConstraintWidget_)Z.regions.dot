digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.hasAncestor(Landroid\/support\/constraint\/solver\/widgets\/ConstraintWidget;)Z" {
subgraph cluster_Region_909690581 {
label = "R(2:0|(2:(1:2)|(1:(2:(1:5)|(2:(1:(2:(1:11)|(1:12)))|13)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.constraint.solver.widgets.ConstraintWidget android.support.constraint.solver.widgets.ConstraintWidget r0 = getParent()\l}"];
subgraph cluster_Region_2096286879 {
label = "R(2:(1:2)|(1:(2:(1:5)|(2:(1:(2:(1:11)|(1:12)))|13))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_289097247 {
label = "IF [B:1:0x0005] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 == r5) goto L_0x0007\l}"];
subgraph cluster_Region_988692226 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_188172866 {
label = "R(1:(2:(1:5)|(2:(1:(2:(1:11)|(1:12)))|13)))";
node [shape=record,color=blue];
subgraph cluster_Region_795414304 {
label = "R(2:(1:5)|(2:(1:(2:(1:11)|(1:12)))|13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1939025853 {
label = "IF [B:4:0x000d] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r0 == r5.getParent()) goto L_0x000f\l}"];
subgraph cluster_Region_1159051366 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_248023529 {
label = "R(2:(1:(2:(1:11)|(1:12)))|13)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_65884532 {
label = "LOOP:0: (1:(2:(1:11)|(1:12)))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|LOOP_START\lPHI: r0 \l  PHI: (r0v1 android.support.constraint.solver.widgets.ConstraintWidget) = (r0v0 android.support.constraint.solver.widgets.ConstraintWidget), (r0v2 android.support.constraint.solver.widgets.ConstraintWidget) binds: [B:4:0x000d, B:12:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0010\-\>B:12:0x001c\l|if (r0 != null) goto L_0x0012\l}"];
subgraph cluster_Region_1067231016 {
label = "R(1:(2:(1:11)|(1:12)))";
node [shape=record,color=blue];
subgraph cluster_Region_1483452404 {
label = "R(2:(1:11)|(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1774139268 {
label = "IF [B:7:0x0012, B:10:0x0019] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r0 == r5) goto L_0x0014\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|ADDED_TO_REGION\l|if (r0 == r5.getParent()) goto L_0x001b\l}"];
subgraph cluster_Region_810940951 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001b|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_411981507 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001c|LOOP_END\lLOOP:0: B:6:0x0010\-\>B:12:0x001c\l|android.support.constraint.solver.widgets.ConstraintWidget r0 = r0.getParent()\l}"];
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x0021|RETURN\l|return false\l}"];
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0014|RETURN\lADDED_TO_REGION\l|return true\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0015}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0021|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0014|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean android.support.constraint.solver.widgets.ConstraintWidget.hasAncestor((r4v0 'this' android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r5v0 android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_14[style=dashed];
Node_7 -> Node_9[style=dashed];
Node_7 -> Node_15;
Node_10 -> Node_12[style=dashed];
Node_10 -> Node_16;
Node_12 -> Node_6;
Node_3 -> Node_4;
Node_9 -> Node_10;
Node_14 -> Node_13;
Node_15 -> Node_8;
Node_16 -> Node_11;
}

