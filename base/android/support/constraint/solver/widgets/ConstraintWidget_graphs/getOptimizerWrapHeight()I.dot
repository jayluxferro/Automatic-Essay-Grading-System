digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.getOptimizerWrapHeight()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r4.mHeight\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r4.mListDimensionBehaviors[1] != android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r4.mMatchConstraintDefaultHeight != 1) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|int r0 = java.lang.Math.max(r4.mMatchConstraintMinHeight, r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r4.mMatchConstraintMinHeight \<= 0) goto L_0x001f\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|int r0 = r4.mMatchConstraintMinHeight\lr4.mHeight = r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|r0 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|PHI: r0 \l  PHI: (r0v1 int) = (r0v4 int), (r0v5 int), (r0v6 int) binds: [B:8:0x001f, B:7:0x001a, B:4:0x000f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|if (r4.mMatchConstraintMaxHeight \<= 0) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024}"];
Node_12 [shape=record,label="{12\:\ 0x0026|if (r4.mMatchConstraintMaxHeight \>= r0) goto L_?\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r4.mMatchConstraintMaxHeight\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public int android.support.constraint.solver.widgets.ConstraintWidget.getOptimizerWrapHeight((r4v0 'this' android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
}

