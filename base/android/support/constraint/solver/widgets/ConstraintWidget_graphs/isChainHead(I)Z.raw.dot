digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.isChainHead(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l0x0002: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0004: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0006: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x000d: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x000f: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x0011: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x0013: IGET  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0015: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x001b: ARITH  (r4 I:int) = (r4 I:int) + (r1 I:int) \l0x001c: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x001e: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x0024: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0026: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x0028: IGET  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor) = \l  (r0 I:android.support.constraint.solver.widgets.ConstraintAnchor)\l android.support.constraint.solver.widgets.ConstraintAnchor.mTarget android.support.constraint.solver.widgets.ConstraintAnchor \l0x002a: IGET  (r2 I:android.support.constraint.solver.widgets.ConstraintAnchor[]) = \l  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListAnchors android.support.constraint.solver.widgets.ConstraintAnchor[] \l0x002c: AGET  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.constraint.solver.widgets.ConstraintWidget.isChainHead((r3 'this' I:android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
}

