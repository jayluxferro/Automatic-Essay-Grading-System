digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.setFrame(IIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r4 I:int) = (r4 I:int) \- (r2 I:int) \l0x0001: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l0x0002: IPUT  \l  (r2 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mX int \l0x0004: IPUT  \l  (r3 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mY int \l0x0006: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mVisibility int \l0x0008: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IPUT  \l  (r3 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l0x000f: IPUT  \l  (r3 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour[]) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListDimensionBehaviors android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour[] \l0x0014: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0016: SGET  (r3 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.FIXED android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IGET  (r4 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r2 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour[]) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mListDimensionBehaviors android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour[] \l0x0022: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0023: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0025: SGET  (r0 I:android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour) =  android.support.constraint.solver.widgets.ConstraintWidget.DimensionBehaviour.FIXED android.support.constraint.solver.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r5 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IGET  (r5 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IPUT  \l  (r4 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l0x0031: IPUT  \l  (r5 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l0x0033: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l0x0035: IGET  (r4 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mMinHeight int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:17:0x003d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mMinHeight int \l0x003b: IPUT  \l  (r2 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mHeight int \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l0x003f: IGET  (r4 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mMinWidth int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:20:0x0047 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: IGET  (r2 I:int) = \l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mMinWidth int \l0x0045: IPUT  \l  (r2 I:int)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mWidth int \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: IPUT  \l  (r3 I:boolean)\l  (r1 I:android.support.constraint.solver.widgets.ConstraintWidget)\l android.support.constraint.solver.widgets.ConstraintWidget.mOptimizerMeasured boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.constraint.solver.widgets.ConstraintWidget.setFrame((r1 'this' I:android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

