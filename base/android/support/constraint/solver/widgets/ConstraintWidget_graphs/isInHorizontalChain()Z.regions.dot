digraph "CFG forandroid.support.constraint.solver.widgets.ConstraintWidget.isInHorizontalChain()Z" {
subgraph cluster_Region_90292076 {
label = "R(1:(2:(1:5)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1674556904 {
label = "R(2:(1:5)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_639412835 {
label = "IF [B:1:0x0004, B:3:0x000e] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.mLeft.mTarget == null) goto L_0x0010\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|ADDED_TO_REGION\l|if (r2.mLeft.mTarget.mTarget != r2.mLeft) goto L_0x0010\l}"];
subgraph cluster_Region_1765193088 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|return r2.mRight.mTarget != null && r2.mRight.mTarget.mTarget == r2.mRight\l}"];
}
}
subgraph cluster_Region_1638202645 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0016}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e|REMOVE\lADDED_TO_REGION\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean android.support.constraint.solver.widgets.ConstraintWidget.isInHorizontalChain((r2v0 'this' android.support.constraint.solver.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_10;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_11;
}

