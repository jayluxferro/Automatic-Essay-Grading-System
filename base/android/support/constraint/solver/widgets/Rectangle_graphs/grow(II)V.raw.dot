digraph "CFG forandroid.support.constraint.solver.widgets.Rectangle.grow(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r1 I:android.support.constraint.solver.widgets.Rectangle) android.support.constraint.solver.widgets.Rectangle.x int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0003: IPUT  \l  (r0 I:int)\l  (r1 I:android.support.constraint.solver.widgets.Rectangle)\l android.support.constraint.solver.widgets.Rectangle.x int \l0x0005: IGET  (r0 I:int) = (r1 I:android.support.constraint.solver.widgets.Rectangle) android.support.constraint.solver.widgets.Rectangle.y int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) \- (r3 I:int) \l0x0008: IPUT  \l  (r0 I:int)\l  (r1 I:android.support.constraint.solver.widgets.Rectangle)\l android.support.constraint.solver.widgets.Rectangle.y int \l0x000a: IGET  (r0 I:int) = (r1 I:android.support.constraint.solver.widgets.Rectangle) android.support.constraint.solver.widgets.Rectangle.width int \l0x000c: ARITH  (r2 I:int) = (r2 I:int) * (2 int) \l0x000e: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l0x000f: IPUT  \l  (r0 I:int)\l  (r1 I:android.support.constraint.solver.widgets.Rectangle)\l android.support.constraint.solver.widgets.Rectangle.width int \l0x0011: IGET  (r2 I:int) = (r1 I:android.support.constraint.solver.widgets.Rectangle) android.support.constraint.solver.widgets.Rectangle.height int \l0x0013: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0015: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0016: IPUT  \l  (r2 I:int)\l  (r1 I:android.support.constraint.solver.widgets.Rectangle)\l android.support.constraint.solver.widgets.Rectangle.height int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{void android.support.constraint.solver.widgets.Rectangle.grow((r1 'this' I:android.support.constraint.solver.widgets.Rectangle A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

