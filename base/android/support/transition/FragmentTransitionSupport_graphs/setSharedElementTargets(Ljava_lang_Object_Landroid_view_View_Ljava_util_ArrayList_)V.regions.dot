digraph "CFG forandroid.support.transition.FragmentTransitionSupport.setSharedElementTargets(Ljava\/lang\/Object;Landroid\/view\/View;Ljava\/util\/ArrayList;)V" {
subgraph cluster_Region_1797535544 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.transition.TransitionSet android.support.transition.TransitionSet r5 = (android.support.transition.TransitionSet) r5\ljava.util.List java.util.List\<android.view.View\> r0 = r5.getTargets()\lr0.clear()\lint int r1 = r7.size()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_192587669 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|if (r2 \< r1) goto L_0x0010\l}"];
subgraph cluster_Region_1450859317 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_END\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|bfsAddViewChildren(r0, r7.get(r2))\lr2++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x001c|r0.add(r6)\lr7.add(r6)\laddTargets(r5, r7)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0025}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.transition.FragmentTransitionSupport.setSharedElementTargets((r4v0 'this' android.support.transition.FragmentTransitionSupport A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.ArrayList\<android.view.View\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Object;, Landroid\/view\/View;, Ljava\/util\/ArrayList\<, Landroid\/view\/View;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

