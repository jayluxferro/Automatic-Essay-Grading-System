digraph "CFG forandroid.support.transition.ImageViewUtils.animateTransform(Landroid\/widget\/ImageView;Landroid\/graphics\/Matrix;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  \l  (r3 I:android.widget.ImageView)\l  (r4 I:android.graphics.Matrix)\l android.widget.ImageView.setImageMatrix(android.graphics.Matrix):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE   android.support.transition.ImageViewUtils.fetchAnimateTransformMethod():void type: STATIC \l0x000d: SGET  (r0 I:java.lang.reflect.Method) =  android.support.transition.ImageViewUtils.sAnimateTransformMethod java.lang.reflect.Method \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|SYNTHETIC\lSplitter:B:5:0x0011\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0011\l|0x0011: SGET  (r0 I:java.lang.reflect.Method) =  android.support.transition.ImageViewUtils.sAnimateTransformMethod java.lang.reflect.Method A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}, TRY_ENTER]\l0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}]\l0x0014: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}]\l0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}]\l0x0017: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}]\l0x0019: INVOKE  \l  (r0 I:java.lang.reflect.Method)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x0028, InvocationTargetException \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|ExcHandler: InvocationTargetException null\lSplitter:B:5:0x0011\l|0x001d: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: NEW_INSTANCE  (r4 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0020: INVOKE  (r3 I:java.lang.Throwable) = (r3 I:java.lang.reflect.InvocationTargetException) java.lang.reflect.InvocationTargetException.getCause():java.lang.Throwable type: VIRTUAL \l0x0024: INVOKE  \l  (r4 I:java.lang.RuntimeException)\l  (r3 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException null\lSplitter:B:5:0x0011\l}"];
MethodNode[shape=record,label="{static void android.support.transition.ImageViewUtils.animateTransform((r3 I:android.widget.ImageView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_5 -> Node_12;
Node_5 -> Node_8;
Node_6 -> Node_12;
Node_6 -> Node_8;
Node_6 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_12 -> Node_11;
}

