digraph "CFG forandroid.support.transition.TransitionUtils.createViewBitmap(Landroid\/view\/View;Landroid\/graphics\/Matrix;Landroid\/graphics\/RectF;Landroid\/view\/ViewGroup;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:boolean) =  android.support.transition.TransitionUtils.HAS_IS_ATTACHED_TO_WINDOW boolean \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:boolean) = (r8 I:android.view.View) android.view.View.isAttachedToWindow():boolean type: VIRTUAL \l0x0009: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: INVOKE  (r2 I:boolean) = (r11 I:android.view.ViewGroup) android.view.ViewGroup.isAttachedToWindow():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: SGET  (r3 I:boolean) =  android.support.transition.TransitionUtils.HAS_OVERLAY boolean \l0x0017: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001f \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: RETURN  (r4 I:android.graphics.Bitmap) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: INVOKE  (r1 I:android.view.ViewParent) = (r8 I:android.view.View) android.view.View.getParent():android.view.ViewParent type: VIRTUAL \l0x0023: CHECK_CAST  (r1 I:android.view.ViewGroup) = (android.view.ViewGroup) (r1 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:int) = (r1 I:android.view.ViewGroup), (r8 I:android.view.View) android.view.ViewGroup.indexOfChild(android.view.View):int type: VIRTUAL \l0x0029: INVOKE  (r3 I:android.view.ViewGroupOverlay) = (r11 I:android.view.ViewGroup) android.view.ViewGroup.getOverlay():android.view.ViewGroupOverlay type: VIRTUAL \l0x002d: INVOKE  \l  (r3 I:android.view.ViewGroupOverlay)\l  (r8 I:android.view.View)\l android.view.ViewGroupOverlay.add(android.view.View):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0032: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: INVOKE  (r3 I:float) = (r10 I:android.graphics.RectF) android.graphics.RectF.width():float type: VIRTUAL \l0x0037: INVOKE  (r3 I:int) = (r3 I:float) java.lang.Math.round(float):int type: STATIC \l0x003b: INVOKE  (r5 I:float) = (r10 I:android.graphics.RectF) android.graphics.RectF.height():float type: VIRTUAL \l0x003f: INVOKE  (r5 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0099 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0099 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0049: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1233125376(0x49800000, float:1048576.0) ?[int, float, short, byte, char])\l \l0x004b: ARITH  (r7 I:int) = (r3 I:int) * (r5 I:int) \l0x004d: CAST  (r7 I:float) = (float) (r7 I:int) \l0x004e: ARITH  (r6 I:float) = (r6 I:float) \/ (r7 I:float) \l0x004f: INVOKE  (r4 I:float) = (r4 I:float), (r6 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x0053: CAST  (r3 I:float) = (float) (r3 I:int) \l0x0054: ARITH  (r3 I:float) = (r3 I:float) * (r4 I:float) \l0x0056: INVOKE  (r3 I:int) = (r3 I:float) java.lang.Math.round(float):int type: STATIC \l0x005a: CAST  (r5 I:float) = (float) (r5 I:int) \l0x005b: ARITH  (r5 I:float) = (r5 I:float) * (r4 I:float) \l0x005d: INVOKE  (r5 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x0061: IGET  (r6 I:float) = (r10 I:android.graphics.RectF) android.graphics.RectF.left float \l0x0063: NEG  (r6 I:float) = (r6 I:float) \l0x0064: IGET  (r10 I:float) = (r10 I:android.graphics.RectF) android.graphics.RectF.top float \l0x0066: NEG  (r10 I:float) = (r10 I:float) \l0x0067: INVOKE  (r9 I:android.graphics.Matrix), (r6 I:float), (r10 I:float) android.graphics.Matrix.postTranslate(float, float):boolean type: VIRTUAL \l0x006a: INVOKE  (r9 I:android.graphics.Matrix), (r4 I:float), (r4 I:float) android.graphics.Matrix.postScale(float, float):boolean type: VIRTUAL \l0x006d: SGET  (r10 I:boolean) =  android.support.transition.TransitionUtils.HAS_PICTURE_BITMAP boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|0x006f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0088 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0071|0x0071: NEW_INSTANCE  (r10 I:android.graphics.Picture) =  android.graphics.Picture \l0x0073: INVOKE  (r10 I:android.graphics.Picture) android.graphics.Picture.\<init\>():void type: DIRECT \l0x0076: INVOKE  (r3 I:android.graphics.Canvas) = (r10 I:android.graphics.Picture), (r3 I:int), (r5 I:int) android.graphics.Picture.beginRecording(int, int):android.graphics.Canvas type: VIRTUAL \l0x007a: INVOKE  \l  (r3 I:android.graphics.Canvas)\l  (r9 I:android.graphics.Matrix)\l android.graphics.Canvas.concat(android.graphics.Matrix):void type: VIRTUAL \l0x007d: INVOKE  (r8 I:android.view.View), (r3 I:android.graphics.Canvas) android.view.View.draw(android.graphics.Canvas):void type: VIRTUAL \l0x0080: INVOKE  (r10 I:android.graphics.Picture) android.graphics.Picture.endRecording():void type: VIRTUAL \l0x0083: INVOKE  (r4 I:android.graphics.Bitmap) = (r10 I:android.graphics.Picture) android.graphics.Bitmap.createBitmap(android.graphics.Picture):android.graphics.Bitmap type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0088|0x0088: SGET  (r10 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config \l0x008a: INVOKE  (r4 I:android.graphics.Bitmap) = \l  (r3 I:int)\l  (r5 I:int)\l  (r10 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC \l0x008e: NEW_INSTANCE  (r10 I:android.graphics.Canvas) =  android.graphics.Canvas \l0x0090: INVOKE  \l  (r10 I:android.graphics.Canvas)\l  (r4 I:android.graphics.Bitmap)\l android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void type: DIRECT \l0x0093: INVOKE  \l  (r10 I:android.graphics.Canvas)\l  (r9 I:android.graphics.Matrix)\l android.graphics.Canvas.concat(android.graphics.Matrix):void type: VIRTUAL \l0x0096: INVOKE  (r8 I:android.view.View), (r10 I:android.graphics.Canvas) android.view.View.draw(android.graphics.Canvas):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|0x0099: SGET  (r9 I:boolean) =  android.support.transition.TransitionUtils.HAS_OVERLAY boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x009b|0x009b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00a9 \l}"];
Node_24 [shape=record,label="{24\:\ 0x009d|0x009d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00a9 \l}"];
Node_25 [shape=record,label="{25\:\ 0x009f|0x009f: INVOKE  (r9 I:android.view.ViewGroupOverlay) = (r11 I:android.view.ViewGroup) android.view.ViewGroup.getOverlay():android.view.ViewGroupOverlay type: VIRTUAL \l0x00a3: INVOKE  \l  (r9 I:android.view.ViewGroupOverlay)\l  (r8 I:android.view.View)\l android.view.ViewGroupOverlay.remove(android.view.View):void type: VIRTUAL \l0x00a6: INVOKE  \l  (r1 I:android.view.ViewGroup)\l  (r8 I:android.view.View)\l  (r2 I:int)\l android.view.ViewGroup.addView(android.view.View, int):void type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a9|0x00a9: RETURN  (r4 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{private static android.graphics.Bitmap android.support.transition.TransitionUtils.createViewBitmap((r8 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.graphics.RectF A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
}

