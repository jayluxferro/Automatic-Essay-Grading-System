digraph "CFG forandroid.support.transition.Transition.addListener(Landroid\/support\/transition\/Transition$TransitionListener;)Landroid\/support\/transition\/Transition;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.ArrayList\<android.support.transition.Transition$TransitionListener\>) = (r1 I:android.support.transition.Transition) android.support.transition.Transition.mListeners java.util.ArrayList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0009: IPUT  \l  (r0 I:java.util.ArrayList\<android.support.transition.Transition$TransitionListener\>)\l  (r1 I:android.support.transition.Transition)\l android.support.transition.Transition.mListeners java.util.ArrayList \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.ArrayList\<android.support.transition.Transition$TransitionListener\>) = (r1 I:android.support.transition.Transition) android.support.transition.Transition.mListeners java.util.ArrayList \l0x000d: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r1 I:android.support.transition.Transition) \l}"];
MethodNode[shape=record,label="{public android.support.transition.Transition android.support.transition.Transition.addListener((r1 'this' I:android.support.transition.Transition A[IMMUTABLE_TYPE, THIS]), (r2 I:android.support.transition.Transition$TransitionListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

