digraph "CFG forandroid.support.transition.Transition.start()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.mNumInstances != 0) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r5.mListeners == null) goto L_0x002c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r5.mListeners.size() \<= 0) goto L_0x002c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|java.util.ArrayList r0 = (java.util.ArrayList) r5.mListeners.clone()\lint r2 = r0.size()\lr3 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:6:0x0011, B:8:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x001e\-\>B:8:0x0020\l|if (r3 \>= r2) goto L_0x002c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|LOOP_END\lLOOP:0: B:7:0x001e\-\>B:8:0x0020\l|((android.support.transition.Transition.TransitionListener) r0.get(r3)).onTransitionStart(r5)\lint r3 = r3 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|r5.mEnded = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|r5.mNumInstances = r5.mNumInstances + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void android.support.transition.Transition.start((r5v0 'this' android.support.transition.Transition A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_9;
}

