digraph "CFG forandroid.support.transition.Transition.excludeId(Ljava\/util\/ArrayList;IZ)Ljava\/util\/ArrayList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0008: INVOKE  (r1 I:java.util.ArrayList) = (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) android.support.transition.Transition.ArrayListManager.add(java.util.ArrayList, java.lang.Object):java.util.ArrayList type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0011: INVOKE  (r1 I:java.util.ArrayList) = (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) android.support.transition.Transition.ArrayListManager.remove(java.util.ArrayList, java.lang.Object):java.util.ArrayList type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r1 I:java.util.ArrayList\<java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{private java.util.ArrayList\<java.lang.Integer\> android.support.transition.Transition.excludeId((r0 'this' I:android.support.transition.Transition A[IMMUTABLE_TYPE, THIS]), (r1 I:java.util.ArrayList\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Ljava\/lang\/Integer;, \>;IZ), Ljava\/util\/ArrayList\<, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

