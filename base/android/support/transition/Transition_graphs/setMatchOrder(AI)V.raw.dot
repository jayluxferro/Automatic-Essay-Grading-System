digraph "CFG forandroid.support.transition.Transition.setMatchOrder([I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0034 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r3 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: ARRAY_LENGTH  (r1 I:int) = (r3 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: AGET  (r1 I:?[int, float]) = (r3 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x000c: INVOKE  (r1 I:boolean) = (r1 I:int) android.support.transition.Transition.isValidMatch(int):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0023 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: INVOKE  (r1 I:boolean) = (r3 I:int[]), (r0 I:int) android.support.transition.Transition.alreadyContains(int[], int):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001d: CONST_STR  (r0 I:java.lang.String) =  \"matches contains a duplicate value\" \l0x001f: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0025: CONST_STR  (r0 I:java.lang.String) =  \"matches contains invalid value\" \l0x0027: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x002f: CHECK_CAST  (r3 I:int[]) = (int[]) (r3 I:?[OBJECT, ARRAY]) \l0x0031: IPUT  (r3 I:int[]), (r2 I:android.support.transition.Transition) android.support.transition.Transition.mMatchOrder int[] \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: SGET  (r3 I:int[]) =  android.support.transition.Transition.DEFAULT_MATCH_ORDER int[] \l0x0036: IPUT  (r3 I:int[]), (r2 I:android.support.transition.Transition) android.support.transition.Transition.mMatchOrder int[] \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.transition.Transition.setMatchOrder((r2 'this' I:android.support.transition.Transition A[IMMUTABLE_TYPE, THIS]), (r3 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_17;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_17[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_18;
Node_17 -> Node_18;
}

