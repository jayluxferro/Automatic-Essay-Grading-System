digraph "CFG forandroid.support.transition.TransitionManager.sceneChangeSetup(Landroid\/view\/ViewGroup;Landroid\/support\/transition\/Transition;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.support.v4.util.ArrayMap) =  android.support.transition.TransitionManager.getRunningTransitions():android.support.v4.util.ArrayMap type: STATIC \l0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.v4.util.ArrayMap)\l  (r2 I:java.lang.Object)\l android.support.v4.util.ArrayMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0008: CHECK_CAST  (r0 I:java.util.ArrayList) = (java.util.ArrayList) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0020: CHECK_CAST  (r1 I:android.support.transition.Transition) = (android.support.transition.Transition) (r1 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  \l  (r1 I:android.support.transition.Transition)\l  (r2 I:android.view.View)\l android.support.transition.Transition.pause(android.view.View):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0029: INVOKE  \l  (r3 I:android.support.transition.Transition)\l  (r2 I:android.view.ViewGroup)\l  (r0 I:boolean)\l android.support.transition.Transition.captureValues(android.view.ViewGroup, boolean):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r2 I:android.support.transition.Scene) = (r2 I:android.view.View) android.support.transition.Scene.getCurrentScene(android.view.View):android.support.transition.Scene type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: INVOKE  (r2 I:android.support.transition.Scene) android.support.transition.Scene.exit():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.transition.TransitionManager.sceneChangeSetup((r2 I:android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.support.transition.Transition A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

