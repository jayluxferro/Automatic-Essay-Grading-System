digraph "CFG forandroid.support.transition.ViewUtils.setTransitionVisibility(Landroid\/view\/View;I)V" {
subgraph cluster_Region_1160477844 {
label = "R(2:0|(1:(1:3))(0))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|fetchViewFlagsField()\l}"];
subgraph cluster_IfRegion_1050931321 {
label = "IF [B:1:0x0005] THEN: R(1:(1:3)) ELSE: R(0)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (sViewFlagsField != null) goto L_0x0007\l}"];
subgraph cluster_Region_1528149981 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_964372901 {
label = "Try: R(1:3) catches: R(0)";
node [shape=record,color=blue];
subgraph cluster_Region_657079746 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ IllegalAccessException \-\> 0x0015 \}\lSplitter:B:2:0x0007\l|sViewFlagsField.setInt(r2, r3 \| (sViewFlagsField.getInt(r2) & \-13))     \/\/ Catch:\{ IllegalAccessException \-\> 0x0015 \}\l}"];
}
subgraph cluster_Region_111882598 {
label = "R(0) | ExcHandler: IllegalAccessException (unused java.lang.IllegalAccessException)\l";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1895220529 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_111882598 {
label = "R(0) | ExcHandler: IllegalAccessException (unused java.lang.IllegalAccessException)\l";
node [shape=record,color=blue];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007|SYNTHETIC\lSplitter:B:2:0x0007\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException (unused java.lang.IllegalAccessException)\lSplitter:B:2:0x0007\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static void android.support.transition.ViewUtils.setTransitionVisibility((r2v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_6;
}

