digraph "CFG forandroid.support.transition.GhostViewApi21.addGhost(Landroid\/view\/View;Landroid\/view\/ViewGroup;Landroid\/graphics\/Matrix;)Landroid\/support\/transition\/GhostViewImpl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|fetchAddGhostMethod()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (sAddGhostMethod == null) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ IllegalAccessException \-\> 0x002d, InvocationTargetException \-\> 0x0022 \}\lSplitter:B:2:0x0008\l|java.lang.reflect.Method r2 = sAddGhostMethod     \/\/ Catch:\{ IllegalAccessException \-\> 0x002d, InvocationTargetException \-\> 0x0022 \}\ljava.lang.Object[] r3 = new java.lang.Object[]\{r5, r6, r7\}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|RETURN\l|return new android.support.transition.GhostViewApi21((android.view.View) r2.invoke((java.lang.Object) null, r3))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|ExcHandler: InvocationTargetException (r5v1 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0008\l|java.lang.reflect.InvocationTargetException r5 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023}"];
Node_7 [shape=record,label="{7\:\ 0x002c|throw new java.lang.RuntimeException(r5.getCause())\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|RETURN\l|return null\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException (unused java.lang.IllegalAccessException)\lSplitter:B:2:0x0008\l}"];
MethodNode[shape=record,label="{static android.support.transition.GhostViewImpl android.support.transition.GhostViewApi21.addGhost((r5v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_9 -> Node_8;
}

