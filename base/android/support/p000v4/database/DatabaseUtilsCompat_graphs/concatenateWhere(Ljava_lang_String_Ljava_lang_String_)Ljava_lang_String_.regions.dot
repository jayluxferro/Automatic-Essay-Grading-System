digraph "CFG forandroid.support.v4.database.DatabaseUtilsCompat.concatenateWhere(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_1574389330 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(2:6|7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_552445205 {
label = "R(2:(1:2)|(1:(2:(1:5)|(2:6|7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1888197146 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.text.TextUtils.isEmpty(r2) == true) goto L_0x0006\l}"];
subgraph cluster_Region_1936794176 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_351473578 {
label = "R(1:(2:(1:5)|(2:6|7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1501287724 {
label = "R(2:(1:5)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1972166483 {
label = "IF [B:4:0x000b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|if (android.text.TextUtils.isEmpty(r3) == true) goto L_0x000d\l}"];
subgraph cluster_Region_261460096 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_51855495 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x002c|RETURN\l|return \"(\" + r2 + \") AND (\" + r3 + \")\"\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
MethodNode[shape=record,label="{public static java.lang.String android.support.v4.database.DatabaseUtilsCompat.concatenateWhere((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

