digraph "CFG forandroid.support.v4.widget.DrawerLayout.dispatchOnDrawerOpened(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.v4.widget.DrawerLayout$LayoutParams r0 = (android.support.p000v4.widget.DrawerLayout.LayoutParams) r4.getLayoutParams()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if ((r0.openState & 1) != 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|r0.openState = 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r3.mListeners == null) goto L_0x0029\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|int r0 = r3.mListeners.size() \- 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|LOOP_START\lPHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v7 int) binds: [B:4:0x0012, B:6:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0019\-\>B:6:0x001b\l|if (r0 \< 0) goto L_0x0029\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|LOOP_END\lLOOP:0: B:5:0x0019\-\>B:6:0x001b\l|r3.mListeners.get(r0).onDrawerOpened(r4)\lint r0 = r0 + \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|updateChildrenImportantForAccessibility(r4, true)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (hasWindowFocus() == false) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|sendAccessibilityEvent(32)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v4.widget.DrawerLayout.dispatchOnDrawerOpened((r3v0 'this' android.support.v4.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r4v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_11;
Node_10 -> Node_7;
}

