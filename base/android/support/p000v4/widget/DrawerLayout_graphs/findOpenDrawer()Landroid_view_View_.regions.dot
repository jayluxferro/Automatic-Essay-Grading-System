digraph "CFG forandroid.support.v4.widget.DrawerLayout.findOpenDrawer()Landroid\/view\/View;" {
subgraph cluster_Region_1100752138 {
label = "R(3:0|(2:2|(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = getChildCount()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_131022693 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x0018\l|if (r1 \< r0) goto L_0x0007\l}"];
subgraph cluster_Region_1828250219 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|android.view.View android.view.View r2 = getChildAt(r1)\l}"];
subgraph cluster_Region_8906814 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1290550923 {
label = "IF [B:3:0x0015] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|if ((((android.support.p000v4.widget.DrawerLayout.LayoutParams) r2.getLayoutParams()).openState & 1) == 1) goto L_0x0017\l}"];
subgraph cluster_Region_841356388 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_601713896 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x0018\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x001b|RETURN\l|return null\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x001b|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{android.view.View android.support.v4.widget.DrawerLayout.findOpenDrawer((r5v0 'this' android.support.v4.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

