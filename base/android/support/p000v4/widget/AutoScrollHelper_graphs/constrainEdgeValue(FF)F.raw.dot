digraph "CFG forandroid.support.v4.widget.AutoScrollHelper.constrainEdgeValue(FF)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CMP_L  (r1 I:int) = (r5 I:float), (r0 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: RETURN  (r0 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r1 I:int) = (r3 I:android.support.v4.widget.AutoScrollHelper) android.support.v4.widget.AutoScrollHelper.mEdgeType int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2] t:[0x0013, 0x0013, 0x000c] \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CMP_G  (r1 I:int) = (r4 I:float), (r0 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: NEG  (r5 I:float) = (r5 I:float) \l0x0011: ARITH  (r4 I:float) = (r4 I:float) \/ (r5 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: RETURN  (r4 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: CMP_G  (r1 I:int) = (r4 I:float), (r5 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x002a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0019: CMP_L  (r2 I:int) = (r4 I:float), (r0 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0020 \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: ARITH  (r4 I:float) = (r4 I:float) \/ (r5 I:float) \l0x001e: ARITH  (r1 I:float) = (r1 I:float) \- (r4 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: RETURN  (r1 I:float) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0020|0x0020: IGET  (r4 I:boolean) = (r3 I:android.support.v4.widget.AutoScrollHelper) android.support.v4.widget.AutoScrollHelper.mAnimating boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|0x0024: IGET  (r4 I:int) = (r3 I:android.support.v4.widget.AutoScrollHelper) android.support.v4.widget.AutoScrollHelper.mEdgeType int \l0x0026: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|0x0029: RETURN  (r1 I:float) \l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|0x002a: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private float android.support.v4.widget.AutoScrollHelper.constrainEdgeValue((r3 'this' I:android.support.v4.widget.AutoScrollHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_10;
Node_4 -> Node_21;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_21;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
}

