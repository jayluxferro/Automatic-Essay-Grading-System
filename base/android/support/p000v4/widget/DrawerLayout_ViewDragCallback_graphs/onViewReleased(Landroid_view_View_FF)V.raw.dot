digraph "CFG forandroid.support.v4.widget.DrawerLayout.ViewDragCallback.onViewReleased(Landroid\/view\/View;FF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r8 I:android.support.v4.widget.DrawerLayout) = \l  (r5 I:android.support.v4.widget.DrawerLayout$ViewDragCallback)\l android.support.v4.widget.DrawerLayout.ViewDragCallback.this$0 android.support.v4.widget.DrawerLayout \l0x0002: INVOKE  (r8 I:float) = \l  (r8 I:android.support.v4.widget.DrawerLayout)\l  (r6 I:android.view.View)\l android.support.v4.widget.DrawerLayout.getDrawerViewOffset(android.view.View):float type: VIRTUAL \l0x0006: INVOKE  (r0 I:int) = (r6 I:android.view.View) android.view.View.getWidth():int type: VIRTUAL \l0x000a: IGET  (r1 I:android.support.v4.widget.DrawerLayout) = \l  (r5 I:android.support.v4.widget.DrawerLayout$ViewDragCallback)\l android.support.v4.widget.DrawerLayout.ViewDragCallback.this$0 android.support.v4.widget.DrawerLayout \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000d: INVOKE  (r1 I:boolean) = \l  (r1 I:android.support.v4.widget.DrawerLayout)\l  (r6 I:android.view.View)\l  (r2 I:int)\l android.support.v4.widget.DrawerLayout.checkDrawerViewAbsoluteGravity(android.view.View, int):boolean type: VIRTUAL \l0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: CMP_L  (r7 I:int) = (r7 I:float), (r3 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: CMP_L  (r7 I:int) = (r8 I:float), (r2 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: NEG  (r7 I:int) = (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IGET  (r1 I:android.support.v4.widget.DrawerLayout) = \l  (r5 I:android.support.v4.widget.DrawerLayout$ViewDragCallback)\l android.support.v4.widget.DrawerLayout.ViewDragCallback.this$0 android.support.v4.widget.DrawerLayout \l0x0027: INVOKE  (r1 I:int) = (r1 I:android.support.v4.widget.DrawerLayout) android.support.v4.widget.DrawerLayout.getWidth():int type: VIRTUAL \l0x002b: CMP_G  (r4 I:int) = (r7 I:float), (r3 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0037 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: CMP_L  (r7 I:int) = (r7 I:float), (r3 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0038 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: CMP_L  (r7 I:int) = (r8 I:float), (r2 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0038 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: IGET  (r8 I:android.support.v4.widget.ViewDragHelper) = \l  (r5 I:android.support.v4.widget.DrawerLayout$ViewDragCallback)\l android.support.v4.widget.DrawerLayout.ViewDragCallback.mDragger android.support.v4.widget.ViewDragHelper \l0x003b: INVOKE  (r6 I:int) = (r6 I:android.view.View) android.view.View.getTop():int type: VIRTUAL \l0x003f: INVOKE  \l  (r8 I:android.support.v4.widget.ViewDragHelper)\l  (r7 I:int)\l  (r6 I:int)\l android.support.v4.widget.ViewDragHelper.settleCapturedViewAt(int, int):boolean type: VIRTUAL \l0x0042: IGET  (r6 I:android.support.v4.widget.DrawerLayout) = \l  (r5 I:android.support.v4.widget.DrawerLayout$ViewDragCallback)\l android.support.v4.widget.DrawerLayout.ViewDragCallback.this$0 android.support.v4.widget.DrawerLayout \l0x0044: INVOKE  (r6 I:android.support.v4.widget.DrawerLayout) android.support.v4.widget.DrawerLayout.invalidate():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|0x0047: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.widget.DrawerLayout.ViewDragCallback.onViewReleased((r5 'this' I:android.support.v4.widget.DrawerLayout$ViewDragCallback A[IMMUTABLE_TYPE, THIS]), (r6 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

