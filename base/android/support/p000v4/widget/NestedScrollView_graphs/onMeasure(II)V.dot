digraph "CFG forandroid.support.v4.widget.NestedScrollView.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.onMeasure(r5, r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4.mFillViewport != false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (android.view.View.MeasureSpec.getMode(r6) != 0) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f}"];
Node_7 [shape=record,label="{7\:\ 0x0013|if (getChildCount() \<= 0) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|android.view.View r6 = getChildAt(0)\landroid.widget.FrameLayout$LayoutParams r0 = (android.widget.FrameLayout.LayoutParams) r6.getLayoutParams()\lint r1 = r6.getMeasuredHeight()\lint r2 = (((getMeasuredHeight() \- getPaddingTop()) \- getPaddingBottom()) \- r0.topMargin) \- r0.bottomMargin\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|if (r1 \>= r2) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|r6.measure(getChildMeasureSpec(r5, ((getPaddingLeft() + getPaddingRight()) + r0.leftMargin) + r0.rightMargin, r0.width), android.view.View.MeasureSpec.makeMeasureSpec(r2, 1073741824))\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void android.support.v4.widget.NestedScrollView.onMeasure((r4v0 'this' android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
}

