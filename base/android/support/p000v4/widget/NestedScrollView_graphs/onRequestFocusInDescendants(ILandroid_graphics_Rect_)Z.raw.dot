digraph "CFG forandroid.support.v4.widget.NestedScrollView.onRequestFocusInDescendants(ILandroid\/graphics\/Rect;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (130(0x82, float:1.82E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: INVOKE  (r0 I:android.view.FocusFinder) =  android.view.FocusFinder.getInstance():android.view.FocusFinder type: STATIC \l0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: INVOKE  (r0 I:android.view.View) = \l  (r0 I:android.view.FocusFinder)\l  (r3 I:android.view.ViewGroup)\l  (r1 I:android.view.View)\l  (r4 I:int)\l android.view.FocusFinder.findNextFocus(android.view.ViewGroup, android.view.View, int):android.view.View type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: INVOKE  (r0 I:android.view.FocusFinder) =  android.view.FocusFinder.getInstance():android.view.FocusFinder type: STATIC \l0x001b: INVOKE  (r0 I:android.view.View) = \l  (r0 I:android.view.FocusFinder)\l  (r3 I:android.view.ViewGroup)\l  (r5 I:android.graphics.Rect)\l  (r4 I:int)\l android.view.FocusFinder.findNextFocusFromRect(android.view.ViewGroup, android.graphics.Rect, int):android.view.View type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: INVOKE  (r2 I:boolean) = \l  (r3 I:android.support.v4.widget.NestedScrollView)\l  (r0 I:android.view.View)\l android.support.v4.widget.NestedScrollView.isOffScreen(android.view.View):boolean type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: INVOKE  (r4 I:boolean) = \l  (r0 I:android.view.View)\l  (r4 I:int)\l  (r5 I:android.graphics.Rect)\l android.view.View.requestFocus(int, android.graphics.Rect):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean android.support.v4.widget.NestedScrollView.onRequestFocusInDescendants((r3 'this' I:android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
}

