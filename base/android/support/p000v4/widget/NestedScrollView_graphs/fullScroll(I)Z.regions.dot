digraph "CFG forandroid.support.v4.widget.NestedScrollView.fullScroll(I)Z" {
subgraph cluster_Region_2015617293 {
label = "R(4:1|4|(1:8)|10) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|boolean r2 = r6 == 130\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|PHI: r2 \l  PHI: (r2v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r3 = getHeight()\lr5.mTempRect.top = 0\lr5.mTempRect.bottom = r3\l}"];
subgraph cluster_IfRegion_154287405 {
label = "IF [B:5:0x0015, B:7:0x001b] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|ADDED_TO_REGION\l|if (r2 == true) goto L_0x0017\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|ADDED_TO_REGION\l|if ((r0 = getChildCount()) \> 0) goto L_0x001d\l}"];
subgraph cluster_Region_1610654347 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001d|android.view.View android.view.View r0 = getChildAt(r0 \- 1)\lr5.mTempRect.bottom = r0.getBottom() + ((android.widget.FrameLayout.LayoutParams) r0.getLayoutParams()).bottomMargin + getPaddingBottom()\lr5.mTempRect.top = r5.mTempRect.bottom \- r3\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x004d|RETURN\l|return scrollAndFocus(r6, r5.mTempRect.top, r5.mTempRect.bottom)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0041}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.NestedScrollView.fullScroll((r5v0 'this' android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_9 -> Node_10;
}

