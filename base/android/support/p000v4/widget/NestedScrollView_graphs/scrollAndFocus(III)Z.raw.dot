digraph "CFG forandroid.support.v4.widget.NestedScrollView.scrollAndFocus(III)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.getHeight():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r6 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.getScrollY():int type: VIRTUAL \l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r4 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r5 I:android.view.View) = \l  (r6 I:android.support.v4.widget.NestedScrollView)\l  (r4 I:boolean)\l  (r8 I:int)\l  (r9 I:int)\l android.support.v4.widget.NestedScrollView.findFocusableViewInBounds(boolean, int, int):android.view.View type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r8 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r9 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: ARITH  (r8 I:int) = (r8 I:int) \- (r1 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: ARITH  (r8 I:int) = (r9 I:int) \- (r0 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: INVOKE  \l  (r6 I:android.support.v4.widget.NestedScrollView)\l  (r8 I:int)\l android.support.v4.widget.NestedScrollView.doScrollY(int):void type: DIRECT \l0x0027: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r8 I:android.view.View) = (r6 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.findFocus():android.view.View type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0031 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: INVOKE  (r5 I:android.view.View), (r7 I:int) android.view.View.requestFocus(int):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean android.support.v4.widget.NestedScrollView.scrollAndFocus((r6 'this' I:android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_14[style=dashed];
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
}

