digraph "CFG forandroid.support.v4.widget.NestedScrollView.endDrag()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.support.v4.widget.NestedScrollView)\l android.support.v4.widget.NestedScrollView.mIsBeingDragged boolean \l0x0003: INVOKE  (r1 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.recycleVelocityTracker():void type: DIRECT \l0x0006: INVOKE  \l  (r1 I:android.support.v4.widget.NestedScrollView)\l  (r0 I:int)\l android.support.v4.widget.NestedScrollView.stopNestedScroll(int):void type: VIRTUAL \l0x0009: IGET  (r0 I:android.widget.EdgeEffect) = (r1 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.mEdgeGlowTop android.widget.EdgeEffect \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r0 I:android.widget.EdgeEffect) = (r1 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.mEdgeGlowTop android.widget.EdgeEffect \l0x000f: INVOKE  (r0 I:android.widget.EdgeEffect) android.widget.EdgeEffect.onRelease():void type: VIRTUAL \l0x0012: IGET  (r0 I:android.widget.EdgeEffect) = (r1 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.mEdgeGlowBottom android.widget.EdgeEffect \l0x0014: INVOKE  (r0 I:android.widget.EdgeEffect) android.widget.EdgeEffect.onRelease():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.NestedScrollView.endDrag((r1 'this' I:android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

