digraph "CFG forandroid.support.v4.widget.NestedScrollView.flingWithNestedDispatch(I)V" {
subgraph cluster_Region_2314604 {
label = "R(4:0|1|8|(1:(1:10)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = getScrollY()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|boolean r0 = (r0 \> 0 \|\| r5 \> 0) && (r0 \< getScrollRange() \|\| r5 \< 0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|PHI: r0 \l  PHI: (r0v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|float float r1 = (float) r5\l}"];
subgraph cluster_Region_1572296067 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_66754288 {
label = "IF [B:9:0x001a] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001a|if (dispatchNestedPreFling(0.0f, r1) == false) goto L_0x001c\l}"];
subgraph cluster_Region_407566586 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|dispatchNestedFling(0.0f, r1, r0)\lfling(r5)\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006|REMOVE\lADDED_TO_REGION\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c|REMOVE\lADDED_TO_REGION\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000e|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.NestedScrollView.flingWithNestedDispatch((r4v0 'this' android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

