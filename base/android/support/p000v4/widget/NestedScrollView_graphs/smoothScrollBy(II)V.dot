digraph "CFG forandroid.support.v4.widget.NestedScrollView.smoothScrollBy(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (getChildCount() != 0) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (((android.view.animation.AnimationUtils.currentAnimationTimeMillis() \- r4.mLastScroll) \> 250 ? 1 : ((android.view.animation.AnimationUtils.currentAnimationTimeMillis() \- r4.mLastScroll) == 250 ? 0 : \-1)) \<= 0) goto L_0x005d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|android.view.View r0 = getChildAt(0)\landroid.widget.FrameLayout$LayoutParams r1 = (android.widget.FrameLayout.LayoutParams) r0.getLayoutParams()\lint r0 = (r0.getHeight() + r1.topMargin) + r1.bottomMargin\lint r1 = (getHeight() \- getPaddingTop()) \- getPaddingBottom()\lint r2 = getScrollY()\lint r6 = r6 + r2\lr4.mLastScrollerY = getScrollY()\landroid.widget.OverScroller r0 = r4.mScroller\lint r1 = getScrollX()\lr0.startScroll(r1, r2, 0, java.lang.Math.max(0, java.lang.Math.min(r6, java.lang.Math.max(0, r0 \- r1))) \- r2)\landroid.support.p000v4.view.ViewCompat.postInvalidateOnAnimation(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x005d}"];
Node_7 [shape=record,label="{7\:\ 0x0063|if (r4.mScroller.isFinished() != false) goto L_0x006a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0065|r4.mScroller.abortAnimation()\l}"];
Node_9 [shape=record,label="{9\:\ 0x006a|scrollBy(r5, r6)\l}"];
Node_10 [shape=record,label="{10\:\ 0x006d|r4.mLastScroll = android.view.animation.AnimationUtils.currentAnimationTimeMillis()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0073|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void android.support.v4.widget.NestedScrollView.smoothScrollBy((r4v0 'this' android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

