digraph "CFG forandroid.support.v4.widget.NestedScrollView.getTopFadingEdgeStrength()F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.getChildCount():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r2 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.getVerticalFadingEdgeLength():int type: VIRTUAL \l0x000c: INVOKE  (r1 I:int) = (r2 I:android.support.v4.widget.NestedScrollView) android.support.v4.widget.NestedScrollView.getScrollY():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0013: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0014: ARITH  (r1 I:float) = (r1 I:float) \/ (r0 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r1 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{protected float android.support.v4.widget.NestedScrollView.getTopFadingEdgeStrength((r2 'this' I:android.support.v4.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

