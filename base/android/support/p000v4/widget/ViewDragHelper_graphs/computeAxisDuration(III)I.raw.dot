digraph "CFG forandroid.support.v4.widget.ViewDragHelper.computeAxisDuration(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r4 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r0 I:android.view.ViewGroup) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mParentView android.view.ViewGroup \l0x0006: INVOKE  (r0 I:int) = (r0 I:android.view.ViewGroup) android.view.ViewGroup.getWidth():int type: VIRTUAL \l0x000a: ARITH  (r1 I:int) = (r0 I:int) \/ (2 int) \l0x000c: INVOKE  (r2 I:int) = (r4 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0010: CAST  (r2 I:float) = (float) (r2 I:int) \l0x0011: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0012: ARITH  (r2 I:float) = (r2 I:float) \/ (r0 I:float) \l0x0013: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0015: INVOKE  (r2 I:float) = (r0 I:float), (r2 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x0019: CAST  (r1 I:float) = (float) (r1 I:int) \l0x001a: INVOKE  (r2 I:float) = \l  (r3 I:android.support.v4.widget.ViewDragHelper)\l  (r2 I:float)\l android.support.v4.widget.ViewDragHelper.distanceInfluenceForSnapDuration(float):float type: DIRECT \l0x001e: ARITH  (r2 I:float) = (r2 I:float) * (r1 I:float) \l0x0020: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0021: INVOKE  (r5 I:int) = (r5 I:int) java.lang.Math.abs(int):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1148846080(0x447a0000, float:1000.0) ?[int, float, short, byte, char])\l \l0x0029: CAST  (r5 I:float) = (float) (r5 I:int) \l0x002a: ARITH  (r1 I:float) = (r1 I:float) \/ (r5 I:float) \l0x002b: INVOKE  (r5 I:float) = (r1 I:float) java.lang.Math.abs(float):float type: STATIC \l0x002f: ARITH  (r5 I:float) = (r5 I:float) * (r4 I:float) \l0x0031: INVOKE  (r4 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x0035: ARITH  (r4 I:int) = (r4 I:int) * (4 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: INVOKE  (r4 I:int) = (r4 I:int) java.lang.Math.abs(int):int type: STATIC \l0x003c: CAST  (r4 I:float) = (float) (r4 I:int) \l0x003d: CAST  (r5 I:float) = (float) (r6 I:int) \l0x003e: ARITH  (r4 I:float) = (r4 I:float) \/ (r5 I:float) \l0x003f: ARITH  (r4 I:float) = (r4 I:float) + (r0 I:float) \l0x0040: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1132462080(0x43800000, float:256.0) ?[int, float, short, byte, char])\l \l0x0042: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x0044: CAST  (r4 I:int) = (int) (r4 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (600(0x258, float:8.41E\-43) ?[int, float, short, byte, char])\l \l0x0047: INVOKE  (r4 I:int) = (r4 I:int), (r5 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v4.widget.ViewDragHelper.computeAxisDuration((r3 'this' I:android.support.v4.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

