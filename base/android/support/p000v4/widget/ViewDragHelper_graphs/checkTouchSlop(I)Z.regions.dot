digraph "CFG forandroid.support.v4.widget.ViewDragHelper.checkTouchSlop(I)Z" {
subgraph cluster_Region_1568117474 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.mInitialMotionX.length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_833677847 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x000f\l|if (r2 \< r0) goto L_0x0007\l}"];
subgraph cluster_Region_618262375 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1594170042 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_201908254 {
label = "IF [B:3:0x000b] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (checkTouchSlop(r5, r2) == true) goto L_0x000d\l}"];
subgraph cluster_Region_962292279 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_694532452 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x000f\l|r2++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0012|RETURN\l|return false\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0012|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.ViewDragHelper.checkTouchSlop((r4v0 'this' android.support.v4.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

