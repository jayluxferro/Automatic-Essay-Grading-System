digraph "CFG forandroid.support.v4.widget.ViewDragHelper.isEdgeTouched(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r4 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mInitialEdgesTouched int[] \l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r3 I:boolean) = \l  (r4 I:android.support.v4.widget.ViewDragHelper)\l  (r5 I:int)\l  (r2 I:int)\l android.support.v4.widget.ViewDragHelper.isEdgeTouched(int, int):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  (r5 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.ViewDragHelper.isEdgeTouched((r4 'this' I:android.support.v4.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
}

