digraph "CFG forandroid.support.v4.widget.ViewDragHelper.getEdgesTouched(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.view.ViewGroup) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mParentView android.view.ViewGroup \l0x0002: INVOKE  (r0 I:int) = (r0 I:android.view.ViewGroup) android.view.ViewGroup.getLeft():int type: VIRTUAL \l0x0006: IGET  (r1 I:int) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mEdgeSize int \l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r1 I:android.view.ViewGroup) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mParentView android.view.ViewGroup \l0x0010: INVOKE  (r1 I:int) = (r1 I:android.view.ViewGroup) android.view.ViewGroup.getTop():int type: VIRTUAL \l0x0014: IGET  (r2 I:int) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mEdgeSize int \l0x0016: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r5 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (4 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r1 I:android.view.ViewGroup) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mParentView android.view.ViewGroup \l0x001d: INVOKE  (r1 I:int) = (r1 I:android.view.ViewGroup) android.view.ViewGroup.getRight():int type: VIRTUAL \l0x0021: IGET  (r2 I:int) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mEdgeSize int \l0x0023: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r4 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (2 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IGET  (r4 I:android.view.ViewGroup) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mParentView android.view.ViewGroup \l0x002a: INVOKE  (r4 I:int) = (r4 I:android.view.ViewGroup) android.view.ViewGroup.getBottom():int type: VIRTUAL \l0x002e: IGET  (r1 I:int) = (r3 I:android.support.v4.widget.ViewDragHelper) android.support.v4.widget.ViewDragHelper.mEdgeSize int \l0x0030: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r5 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:13:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) \| (8 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v4.widget.ViewDragHelper.getEdgesTouched((r3 'this' I:android.support.v4.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

