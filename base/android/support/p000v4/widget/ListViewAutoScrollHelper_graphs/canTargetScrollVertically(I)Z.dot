digraph "CFG forandroid.support.v4.widget.ListViewAutoScrollHelper.canTargetScrollVertically(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.widget.ListView r0 = r7.mTarget\lint r1 = r0.getCount()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r1 != 0) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|int r3 = r0.getChildCount()\lint r4 = r0.getFirstVisiblePosition()\lint r5 = r4 + r3\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (r8 \<= 0) goto L_0x0029\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r5 \< r1) goto L_0x0038\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019}"];
Node_7 [shape=record,label="{7\:\ 0x0026|if (r0.getChildAt(r3 \- 1).getBottom() \> r0.getHeight()) goto L_0x0038\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|if (r8 \>= 0) goto L_0x0039\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (r4 \> 0) goto L_0x0038\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d}"];
Node_12 [shape=record,label="{12\:\ 0x0035|if (r0.getChildAt(0).getTop() \< 0) goto L_0x0038\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.ListViewAutoScrollHelper.canTargetScrollVertically((r7v0 'this' android.support.v4.widget.ListViewAutoScrollHelper A[IMMUTABLE_TYPE, THIS]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
}

