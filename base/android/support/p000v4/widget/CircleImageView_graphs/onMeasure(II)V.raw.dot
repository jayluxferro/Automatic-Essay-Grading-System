digraph "CFG forandroid.support.v4.widget.CircleImageView.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:android.widget.ImageView), (r2 I:int), (r3 I:int) android.widget.ImageView.onMeasure(int, int):void type: SUPER \l0x0003: INVOKE  (r2 I:boolean) = (r1 I:android.support.v4.widget.CircleImageView) android.support.v4.widget.CircleImageView.elevationSupported():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r2 I:int) = (r1 I:android.support.v4.widget.CircleImageView) android.support.v4.widget.CircleImageView.getMeasuredWidth():int type: VIRTUAL \l0x000d: IGET  (r3 I:int) = (r1 I:android.support.v4.widget.CircleImageView) android.support.v4.widget.CircleImageView.mShadowRadius int \l0x000f: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0011: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0012: INVOKE  (r3 I:int) = (r1 I:android.support.v4.widget.CircleImageView) android.support.v4.widget.CircleImageView.getMeasuredHeight():int type: VIRTUAL \l0x0016: IGET  (r0 I:int) = (r1 I:android.support.v4.widget.CircleImageView) android.support.v4.widget.CircleImageView.mShadowRadius int \l0x0018: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x001a: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) \l0x001b: INVOKE  \l  (r1 I:android.support.v4.widget.CircleImageView)\l  (r2 I:int)\l  (r3 I:int)\l android.support.v4.widget.CircleImageView.setMeasuredDimension(int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.v4.widget.CircleImageView.onMeasure((r1 'this' I:android.support.v4.widget.CircleImageView A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

