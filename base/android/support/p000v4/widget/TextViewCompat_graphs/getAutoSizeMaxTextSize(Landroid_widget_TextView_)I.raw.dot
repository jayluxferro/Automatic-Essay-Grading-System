digraph "CFG forandroid.support.v4.widget.TextViewCompat.getAutoSizeMaxTextSize(Landroid\/widget\/TextView;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (27 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:int) = (r2 I:android.widget.TextView) android.widget.TextView.getAutoSizeMaxTextSize():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) android.support.v4.widget.AutoSizeableTextView \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CHECK_CAST  (r2 I:android.support.v4.widget.AutoSizeableTextView) = (android.support.v4.widget.AutoSizeableTextView) (r2 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:int) = (r2 I:android.support.v4.widget.AutoSizeableTextView) android.support.v4.widget.AutoSizeableTextView.getAutoSizeMaxTextSize():int type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.widget.TextViewCompat.getAutoSizeMaxTextSize((r2 I:android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

