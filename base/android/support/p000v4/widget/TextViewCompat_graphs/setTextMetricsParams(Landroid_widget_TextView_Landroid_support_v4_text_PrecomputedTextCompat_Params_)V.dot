digraph "CFG forandroid.support.v4.widget.TextViewCompat.setTextMetricsParams(Landroid\/widget\/TextView;Landroid\/support\/v4\/text\/PrecomputedTextCompat$Params;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 18) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|r2.setTextDirection(getTextDirection(r3.getTextDirection()))\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (android.os.Build.VERSION.SDK_INT \>= 23) goto L_0x0040\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|float r0 = r3.getTextPaint().getTextScaleX()\lr2.getPaint().set(r3.getTextPaint())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|if ((r0 \> r2.getTextScaleX() ? 1 : (r0 == r2.getTextScaleX() ? 0 : \-1)) != 0) goto L_0x003c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|r2.setTextScaleX((r0 \/ 2.0f) + 1.0f)\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|r2.setTextScaleX(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|r2.getPaint().set(r3.getTextPaint())\lr2.setBreakStrategy(r3.getBreakStrategy())\lr2.setHyphenationFrequency(r3.getHyphenationFrequency())\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void android.support.v4.widget.TextViewCompat.setTextMetricsParams((r2v0 android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.support.v4.text.PrecomputedTextCompat$Params A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_9 -> Node_10;
}

