digraph "CFG forandroid.support.v4.widget.TextViewCompat.setFirstBaselineToTopHeight(Landroid\/widget\/TextView;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.p000v4.util.Preconditions.checkArgumentNonnegative(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (android.os.Build.VERSION.SDK_INT \< 28) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r3.setFirstBaselineToTopHeight(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|android.graphics.Paint$FontMetricsInt r0 = r3.getPaint().getFontMetricsInt()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|if (android.os.Build.VERSION.SDK_INT \< 16) goto L_0x0025\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if (r3.getIncludeFontPadding() == false) goto L_0x0022\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|int r0 = r0.ascent\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|int r0 = r0.top\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|PHI: r0 \l  PHI: (r0v3 int) = (r0v6 int), (r0v7 int) binds: [B:9:0x0025, B:8:0x0022] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|if (r4 \<= java.lang.Math.abs(r0)) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|int r4 = r4 \- (\-r0)\lr3.setPadding(r3.getPaddingLeft(), r4, r3.getPaddingRight(), r3.getPaddingBottom())\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void android.support.v4.widget.TextViewCompat.setFirstBaselineToTopHeight((r3v0 android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Px, \{\}], Annotation[BUILD, android.support.annotation.IntRange, \{from=0\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
}

