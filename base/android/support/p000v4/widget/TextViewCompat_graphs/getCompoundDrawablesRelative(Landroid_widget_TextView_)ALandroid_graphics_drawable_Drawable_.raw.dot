digraph "CFG forandroid.support.v4.widget.TextViewCompat.getCompoundDrawablesRelative(Landroid\/widget\/TextView;)[Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r4 I:android.graphics.drawable.Drawable[]) = (r4 I:android.widget.TextView) android.widget.TextView.getCompoundDrawablesRelative():android.graphics.drawable.Drawable[] type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:android.graphics.drawable.Drawable[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000d: CONST  (r1 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = (r4 I:android.widget.TextView) android.widget.TextView.getLayoutDirection():int type: VIRTUAL \l0x0015: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: INVOKE  (r4 I:android.graphics.drawable.Drawable[]) = (r4 I:android.widget.TextView) android.widget.TextView.getCompoundDrawables():android.graphics.drawable.Drawable[] type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0022: AGET  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0024: AGET  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0026: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0028: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: RETURN  (r4 I:android.graphics.drawable.Drawable[]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: INVOKE  (r4 I:android.graphics.drawable.Drawable[]) = (r4 I:android.widget.TextView) android.widget.TextView.getCompoundDrawables():android.graphics.drawable.Drawable[] type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: RETURN  (r4 I:android.graphics.drawable.Drawable[]) \l}"];
MethodNode[shape=record,label="{public static android.graphics.drawable.Drawable[] android.support.v4.widget.TextViewCompat.getCompoundDrawablesRelative((r4 I:android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

