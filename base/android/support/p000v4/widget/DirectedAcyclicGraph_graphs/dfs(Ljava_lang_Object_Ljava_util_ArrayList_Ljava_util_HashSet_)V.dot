digraph "CFG forandroid.support.v4.widget.DirectedAcyclicGraph.dfs(Ljava\/lang\/Object;Ljava\/util\/ArrayList;Ljava\/util\/HashSet;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r6.contains(r5) == false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r7.contains(r5) != false) goto L_0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|r7.add(r5)\ljava.util.ArrayList r0 = r4.mGraph.get(r5)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r0 == null) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|r1 = 0\lint r2 = r0.size()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:7:0x001a, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\l|if (r1 \>= r2) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_END\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\l|dfs(r0.get(r1), r6, r7)\lint r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|r7.remove(r5)\lr6.add(r5)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032}"];
Node_13 [shape=record,label="{13\:\ 0x0039|throw new java.lang.RuntimeException(\"This graph contains cyclic dependencies\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.DirectedAcyclicGraph.dfs((r4v0 'this' android.support.v4.widget.DirectedAcyclicGraph A[IMMUTABLE_TYPE, THIS]), (r5v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.ArrayList\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.HashSet\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;, Ljava\/util\/ArrayList\<, TT;\>;, Ljava\/util\/HashSet\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_10;
}

