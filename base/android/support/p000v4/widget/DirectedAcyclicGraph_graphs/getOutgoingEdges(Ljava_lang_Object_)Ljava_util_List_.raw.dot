digraph "CFG forandroid.support.v4.widget.DirectedAcyclicGraph.getOutgoingEdges(Ljava\/lang\/Object;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v4.util.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = (r4 I:android.support.v4.widget.DirectedAcyclicGraph) android.support.v4.widget.DirectedAcyclicGraph.mGraph android.support.v4.util.SimpleArrayMap \l0x0002: INVOKE  (r0 I:int) = (r0 I:android.support.v4.util.SimpleArrayMap) android.support.v4.util.SimpleArrayMap.size():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r3 I:android.support.v4.util.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = (r4 I:android.support.v4.widget.DirectedAcyclicGraph) android.support.v4.widget.DirectedAcyclicGraph.mGraph android.support.v4.util.SimpleArrayMap \l0x000c: INVOKE  (r3 I:java.lang.Object) = (r3 I:android.support.v4.util.SimpleArrayMap), (r2 I:int) android.support.v4.util.SimpleArrayMap.valueAt(int):java.lang.Object type: VIRTUAL \l0x0010: CHECK_CAST  (r3 I:java.util.ArrayList) = (java.util.ArrayList) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r3 I:boolean) = (r3 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.contains(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x001e: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r3 I:android.support.v4.util.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = (r4 I:android.support.v4.widget.DirectedAcyclicGraph) android.support.v4.widget.DirectedAcyclicGraph.mGraph android.support.v4.util.SimpleArrayMap \l0x0023: INVOKE  (r3 I:java.lang.Object) = (r3 I:android.support.v4.util.SimpleArrayMap), (r2 I:int) android.support.v4.util.SimpleArrayMap.keyAt(int):java.lang.Object type: VIRTUAL \l0x0027: INVOKE  (r1 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  (r1 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> android.support.v4.widget.DirectedAcyclicGraph.getOutgoingEdges((r4 'this' I:android.support.v4.widget.DirectedAcyclicGraph A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

