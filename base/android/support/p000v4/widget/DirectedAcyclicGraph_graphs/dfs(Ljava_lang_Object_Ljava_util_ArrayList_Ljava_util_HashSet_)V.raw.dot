digraph "CFG forandroid.support.v4.widget.DirectedAcyclicGraph.dfs(Ljava\/lang\/Object;Ljava\/util\/ArrayList;Ljava\/util\/HashSet;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r6 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.contains(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r7 I:java.util.HashSet), (r5 I:java.lang.Object) java.util.HashSet.contains(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r7 I:java.util.HashSet), (r5 I:java.lang.Object) java.util.HashSet.add(java.lang.Object):boolean type: VIRTUAL \l0x0010: IGET  (r0 I:android.support.v4.util.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = (r4 I:android.support.v4.widget.DirectedAcyclicGraph) android.support.v4.widget.DirectedAcyclicGraph.mGraph android.support.v4.util.SimpleArrayMap \l0x0012: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.v4.util.SimpleArrayMap)\l  (r5 I:java.lang.Object)\l android.support.v4.util.SimpleArrayMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0016: CHECK_CAST  (r0 I:java.util.ArrayList) = (java.util.ArrayList) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  (r2 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0025: INVOKE  \l  (r4 I:android.support.v4.widget.DirectedAcyclicGraph)\l  (r3 I:java.lang.Object)\l  (r6 I:java.util.ArrayList)\l  (r7 I:java.util.HashSet)\l android.support.v4.widget.DirectedAcyclicGraph.dfs(java.lang.Object, java.util.ArrayList, java.util.HashSet):void type: DIRECT \l0x0028: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: INVOKE  (r7 I:java.util.HashSet), (r5 I:java.lang.Object) java.util.HashSet.remove(java.lang.Object):boolean type: VIRTUAL \l0x002e: INVOKE  (r6 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: NEW_INSTANCE  (r5 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0034: CONST_STR  (r6 I:java.lang.String) =  \"This graph contains cyclic dependencies\" \l0x0036: INVOKE  (r5 I:java.lang.RuntimeException), (r6 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.DirectedAcyclicGraph.dfs((r4 'this' I:android.support.v4.widget.DirectedAcyclicGraph A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.ArrayList\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.HashSet\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;, Ljava\/util\/ArrayList\<, TT;\>;, Ljava\/util\/HashSet\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

