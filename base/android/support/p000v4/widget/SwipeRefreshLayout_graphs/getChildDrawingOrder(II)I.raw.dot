digraph "CFG forandroid.support.v4.widget.SwipeRefreshLayout.getChildDrawingOrder(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r1 I:android.support.v4.widget.SwipeRefreshLayout) android.support.v4.widget.SwipeRefreshLayout.mCircleViewIndex int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IGET  (r2 I:int) = (r1 I:android.support.v4.widget.SwipeRefreshLayout) android.support.v4.widget.SwipeRefreshLayout.mCircleViewIndex int \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: RETURN  (r2 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IGET  (r2 I:int) = (r1 I:android.support.v4.widget.SwipeRefreshLayout) android.support.v4.widget.SwipeRefreshLayout.mCircleViewIndex int \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IF  (r3 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: RETURN  (r3 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{protected int android.support.v4.widget.SwipeRefreshLayout.getChildDrawingOrder((r1 'this' I:android.support.v4.widget.SwipeRefreshLayout A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
}

