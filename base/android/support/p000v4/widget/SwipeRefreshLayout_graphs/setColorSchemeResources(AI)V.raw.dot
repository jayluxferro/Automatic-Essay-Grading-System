digraph "CFG forandroid.support.v4.widget.SwipeRefreshLayout.setColorSchemeResources([I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.content.Context) = (r4 I:android.support.v4.widget.SwipeRefreshLayout) android.support.v4.widget.SwipeRefreshLayout.getContext():android.content.Context type: VIRTUAL \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l0x0005: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: ARRAY_LENGTH  (r3 I:int) = (r5 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: AGET  (r3 I:?[int, float]) = (r5 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x000d: INVOKE  (r3 I:int) = (r0 I:android.content.Context), (r3 I:int) android.support.v4.content.ContextCompat.getColor(android.content.Context, int):int type: STATIC \l0x0011: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0013: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  \l  (r4 I:android.support.v4.widget.SwipeRefreshLayout)\l  (r1 I:int[])\l android.support.v4.widget.SwipeRefreshLayout.setColorSchemeColors(int[]):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.widget.SwipeRefreshLayout.setColorSchemeResources((r4 'this' I:android.support.v4.widget.SwipeRefreshLayout A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.ColorRes, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

