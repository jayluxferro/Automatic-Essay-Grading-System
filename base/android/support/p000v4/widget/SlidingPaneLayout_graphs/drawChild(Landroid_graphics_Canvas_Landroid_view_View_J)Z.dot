digraph "CFG forandroid.support.v4.widget.SlidingPaneLayout.drawChild(Landroid\/graphics\/Canvas;Landroid\/view\/View;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.v4.widget.SlidingPaneLayout$LayoutParams r0 = (android.support.p000v4.widget.SlidingPaneLayout.LayoutParams) r6.getLayoutParams()\lint r1 = r5.save()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r4.mCanSlide == false) goto L_0x004b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r0.slideable != false) goto L_0x004b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012}"];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r4.mSlideableView == null) goto L_0x004b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|r5.getClipBounds(r4.mTmpRect)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if (isLayoutRtlSupport() == false) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|android.graphics.Rect r0 = r4.mTmpRect\lr0.left = java.lang.Math.max(r4.mTmpRect.left, r4.mSlideableView.getRight())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|android.graphics.Rect r0 = r4.mTmpRect\lr0.right = java.lang.Math.min(r4.mTmpRect.right, r4.mSlideableView.getLeft())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|r5.clipRect(r4.mTmpRect)\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|boolean r6 = super.drawChild(r5, r6, r7)\lr5.restoreToCount(r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0052|RETURN\l|return r6\l}"];
MethodNode[shape=record,label="{protected boolean android.support.v4.widget.SlidingPaneLayout.drawChild((r4v0 'this' android.support.v4.widget.SlidingPaneLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

