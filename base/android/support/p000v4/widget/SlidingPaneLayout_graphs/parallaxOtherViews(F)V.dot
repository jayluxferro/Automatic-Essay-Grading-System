digraph "CFG forandroid.support.v4.widget.SlidingPaneLayout.parallaxOtherViews(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = isLayoutRtlSupport()\landroid.support.v4.widget.SlidingPaneLayout$LayoutParams r1 = (android.support.p000v4.widget.SlidingPaneLayout.LayoutParams) r9.mSlideableView.getLayoutParams()\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if (r1.dimWhenOffset == false) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|if (r0 == false) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|int r1 = r1.rightMargin\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|int r1 = r1.leftMargin\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|PHI: r1 \l  PHI: (r1v5 int) = (r1v7 int), (r1v8 int) binds: [B:4:0x0016, B:3:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \> 0) goto L_0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|r1 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r1 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|PHI: r1 \l  PHI: (r1v3 boolean) = (r1v4 boolean), (r1v6 boolean) binds: [B:7:0x001c, B:6:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = getChildCount()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:8:0x001d, B:21:0x005a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0021\-\>B:21:0x005a\l|if (r3 \>= r2) goto L_0x005d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|android.view.View r4 = getChildAt(r3)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|if (r4 != r9.mSlideableView) goto L_0x002c\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|r9.mParallaxOffset = r10\lint r5 = ((int) ((1.0f \- r9.mParallaxOffset) * ((float) r9.mParallaxBy))) \- ((int) ((1.0f \- r10) * ((float) r9.mParallaxBy)))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|if (r0 == false) goto L_0x0046\l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|int r5 = \-r5\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|PHI: r5 \l  PHI: (r5v6 int) = (r5v5 int), (r5v12 int) binds: [B:13:0x0043, B:14:0x0045] A[DONT_GENERATE, DONT_INLINE]\l|r4.offsetLeftAndRight(r5)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|if (r1 == false) goto L_0x005a\l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|if (r0 == false) goto L_0x0051\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|float r5 = r9.mParallaxOffset \- 1.0f\l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|float r5 = 1.0f \- r9.mParallaxOffset\l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|PHI: r5 \l  PHI: (r5v7 float) = (r5v9 float), (r5v11 float) binds: [B:19:0x0051, B:18:0x004d] A[DONT_GENERATE, DONT_INLINE]\l|dimChildView(r4, r5, r9.mCoveredFadeColor)\l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|LOOP_END\lLOOP:0: B:9:0x0021\-\>B:21:0x005a\l|int r3 = r3 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x005d|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x005a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.SlidingPaneLayout.parallaxOtherViews((r9v0 'this' android.support.v4.widget.SlidingPaneLayout A[IMMUTABLE_TYPE, THIS]), (r10v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_26[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_24;
Node_21 -> Node_9;
Node_23 -> Node_22;
Node_24 -> Node_21;
Node_25 -> Node_21;
Node_26 -> Node_21;
}

