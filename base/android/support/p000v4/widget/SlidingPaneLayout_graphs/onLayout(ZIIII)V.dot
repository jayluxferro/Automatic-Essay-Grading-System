digraph "CFG forandroid.support.v4.widget.SlidingPaneLayout.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r18\lboolean r1 = isLayoutRtlSupport()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r1 == false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r0.mDragHelper.setEdgeTrackingEnabled(2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|r0.mDragHelper.setEdgeTrackingEnabled(1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|int r3 = r22 \- r20\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r1 == false) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|int r4 = getPaddingRight()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|int r4 = getPaddingLeft()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|PHI: r4 \l  PHI: (r4v0 int) = (r4v5 int), (r4v6 int) binds: [B:7:0x001e, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L_0x0029\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|int r5 = getPaddingLeft()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|int r5 = getPaddingRight()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|PHI: r5 \l  PHI: (r5v0 int) = (r5v1 int), (r5v2 int) binds: [B:10:0x0029, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|int r6 = getPaddingTop()\lint r7 = getChildCount()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|if (r0.mFirstLayout == false) goto L_0x0047\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039}"];
Node_14 [shape=record,label="{14\:\ 0x003b|if (r0.mCanSlide == false) goto L_0x0044\l}"];
Node_15 [shape=record,label="{15\:\ 0x003d}"];
Node_16 [shape=record,label="{16\:\ 0x003f|if (r0.mPreservedOpenState == false) goto L_0x0044\l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|r8 = 1.0f\l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|r8 = 0.0f\l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|PHI: r8 \l  PHI: (r8v16 float) = (r8v17 float), (r8v19 float) binds: [B:18:0x0044, B:17:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|r0.mSlideOffset = r8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|r11 = r4\lr12 = r11\lr4 = 0\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|LOOP_START\lPHI: r4 r11 r12 \l  PHI: (r4v2 int) = (r4v1 int), (r4v4 int) binds: [B:20:0x0047, B:47:0x00da] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 int) = (r11v0 int), (r11v2 int) binds: [B:20:0x0047, B:47:0x00da] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 int) = (r12v0 int), (r12v2 int) binds: [B:20:0x0047, B:47:0x00da] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:21:0x004a\-\>B:47:0x00da\l|if (r4 \>= r7) goto L_0x00df\l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|android.view.View r13 = getChildAt(r4)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|if (r13.getVisibility() != 8) goto L_0x005c\l}"];
Node_24 [shape=record,label="{24\:\ 0x0058}"];
Node_25 [shape=record,label="{25\:\ 0x005c|android.support.v4.widget.SlidingPaneLayout$LayoutParams r14 = (android.support.p000v4.widget.SlidingPaneLayout.LayoutParams) r13.getLayoutParams()\lint r15 = r13.getMeasuredWidth()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|if (r14.slideable == false) goto L_0x00a5\l}"];
Node_27 [shape=record,label="{27\:\ 0x006a|int r2 = r14.leftMargin + r14.rightMargin\lint r8 = r3 \- r5\lint r10 = (java.lang.Math.min(r11, r8 \- r0.mOverhangSize) \- r12) \- r2\lr0.mSlideRange = r10\l}"];
Node_28 [shape=record,label="{28\:\ 0x007d|if (r1 == false) goto L_0x0082\l}"];
Node_29 [shape=record,label="{29\:\ 0x007f|int r2 = r14.rightMargin\l}"];
Node_30 [shape=record,label="{30\:\ 0x0082|int r2 = r14.leftMargin\l}"];
Node_31 [shape=record,label="{31\:\ 0x0084|PHI: r2 \l  PHI: (r2v17 int) = (r2v20 int), (r2v21 int) binds: [B:30:0x0082, B:29:0x007f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x008c|if ((((r12 + r2) + r10) + (r15 \/ 2)) \<= r8) goto L_0x0090\l}"];
Node_33 [shape=record,label="{33\:\ 0x008e|r8 = true\l}"];
Node_34 [shape=record,label="{34\:\ 0x0090|r8 = false\l}"];
Node_35 [shape=record,label="{35\:\ 0x0091|PHI: r8 \l  PHI: (r8v5 boolean) = (r8v12 boolean), (r8v13 boolean) binds: [B:34:0x0090, B:33:0x008e] A[DONT_GENERATE, DONT_INLINE]\l|r14.dimWhenOffset = r8\lint r8 = (int) (((float) r10) * r0.mSlideOffset)\lint r2 = (r2 + r8) + r12\lr0.mSlideOffset = ((float) r8) \/ ((float) r0.mSlideRange)\l}"];
Node_36 [shape=record,label="{36\:\ 0x00a5}"];
Node_37 [shape=record,label="{37\:\ 0x00a7|if (r0.mCanSlide == false) goto L_0x00bc\l}"];
Node_38 [shape=record,label="{38\:\ 0x00a9}"];
Node_39 [shape=record,label="{39\:\ 0x00ab|if (r0.mParallaxBy == 0) goto L_0x00bc\l}"];
Node_40 [shape=record,label="{40\:\ 0x00ad|r9 = (int) ((1.0f \- r0.mSlideOffset) * ((float) r0.mParallaxBy))\lr2 = r11\l}"];
Node_41 [shape=record,label="{41\:\ 0x00bc|r2 = r11\l}"];
Node_42 [shape=record,label="{42\:\ 0x00bf|PHI: r2 \l  PHI: (r2v6 int) = (r2v8 int), (r2v19 int) binds: [B:41:0x00bc, B:35:0x0091] A[DONT_GENERATE, DONT_INLINE]\l|r9 = 0\l}"];
Node_43 [shape=record,label="{43\:\ 0x00c0|PHI: r2 r9 \l  PHI: (r2v5 int) = (r2v6 int), (r2v14 int) binds: [B:42:0x00bf, B:40:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v0 int) = (r9v5 int), (r9v8 int) binds: [B:42:0x00bf, B:40:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L_0x00c8\l}"];
Node_44 [shape=record,label="{44\:\ 0x00c2|int r10 = (r3 \- r2) + r9\lint r9 = r10 \- r15\l}"];
Node_45 [shape=record,label="{45\:\ 0x00c8|int r9 = r2 \- r9\lint r10 = r9 + r15\l}"];
Node_46 [shape=record,label="{46\:\ 0x00cc|PHI: r9 r10 \l  PHI: (r9v1 int) = (r9v3 int), (r9v4 int) binds: [B:45:0x00c8, B:44:0x00c2] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v0 int) = (r10v1 int), (r10v3 int) binds: [B:45:0x00c8, B:44:0x00c2] A[DONT_GENERATE, DONT_INLINE]\l|r13.layout(r9, r6, r10, r13.getMeasuredHeight() + r6)\lint r11 = r11 + r13.getWidth()\lr12 = r2\l}"];
Node_47 [shape=record,label="{47\:\ 0x00da|LOOP_END\lPHI: r11 r12 \l  PHI: (r11v2 int) = (r11v3 int), (r11v1 int) binds: [B:65:0x00da, B:66:0x00da] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v2 int) = (r12v5 int), (r12v1 int) binds: [B:65:0x00da, B:66:0x00da] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:21:0x004a\-\>B:47:0x00da\l|int r4 = r4 + 1\l}"];
Node_48 [shape=record,label="{48\:\ 0x00df}"];
Node_49 [shape=record,label="{49\:\ 0x00e1|if (r0.mFirstLayout == false) goto L_0x011b\l}"];
Node_50 [shape=record,label="{50\:\ 0x00e3}"];
Node_51 [shape=record,label="{51\:\ 0x00e5|if (r0.mCanSlide == false) goto L_0x0106\l}"];
Node_52 [shape=record,label="{52\:\ 0x00e7}"];
Node_53 [shape=record,label="{53\:\ 0x00e9|if (r0.mParallaxBy == 0) goto L_0x00f0\l}"];
Node_54 [shape=record,label="{54\:\ 0x00eb|parallaxOtherViews(r0.mSlideOffset)\l}"];
Node_55 [shape=record,label="{55\:\ 0x00f0}"];
Node_56 [shape=record,label="{56\:\ 0x00fa|if (((android.support.p000v4.widget.SlidingPaneLayout.LayoutParams) r0.mSlideableView.getLayoutParams()).dimWhenOffset == false) goto L_0x0116\l}"];
Node_57 [shape=record,label="{57\:\ 0x00fc|dimChildView(r0.mSlideableView, r0.mSlideOffset, r0.mSliderFadeColor)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0106|r1 = 0\l}"];
Node_59 [shape=record,label="{59\:\ 0x0107|LOOP_START\lPHI: r1 \l  PHI: (r1v6 int) = (r1v5 int), (r1v7 int) binds: [B:58:0x0106, B:60:0x0109] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:59:0x0107\-\>B:60:0x0109\l|if (r1 \>= r7) goto L_0x0116\l}"];
Node_60 [shape=record,label="{60\:\ 0x0109|LOOP_END\lLOOP:1: B:59:0x0107\-\>B:60:0x0109\l|dimChildView(getChildAt(r1), 0.0f, r0.mSliderFadeColor)\lint r1 = r1 + 1\l}"];
Node_61 [shape=record,label="{61\:\ 0x0116|updateObscuredViewsVisibility(r0.mSlideableView)\l}"];
Node_62 [shape=record,label="{62\:\ 0x011b|r0.mFirstLayout = false\l}"];
Node_63 [shape=record,label="{63\:\ 0x011e|RETURN\l|return\l}"];
Node_64 [shape=record,label="{64\:\ 0x00df|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x00da|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x00da|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0116|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void android.support.v4.widget.SlidingPaneLayout.onLayout((r18v0 'this' android.support.v4.widget.SlidingPaneLayout A[IMMUTABLE_TYPE, THIS]), (r19v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_64;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_66;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_36;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_42;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_45 -> Node_46;
Node_46 -> Node_65;
Node_47 -> Node_21;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_62;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_58;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_61;
Node_57 -> Node_61;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_67;
Node_60 -> Node_59;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_64 -> Node_48;
Node_65 -> Node_47;
Node_66 -> Node_47;
Node_67 -> Node_61;
}

