digraph "CFG forandroid.support.v4.widget.SlidingPaneLayout.AccessibilityDelegate.onRequestSendAccessibilityEvent(Landroid\/view\/ViewGroup;Landroid\/view\/View;Landroid\/view\/accessibility\/AccessibilityEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r1 I:android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate)\l  (r3 I:android.view.View)\l android.support.v4.widget.SlidingPaneLayout.AccessibilityDelegate.filter(android.view.View):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:boolean) = \l  (r1 I:android.support.v4.view.AccessibilityDelegateCompat)\l  (r2 I:android.view.ViewGroup)\l  (r3 I:android.view.View)\l  (r4 I:android.view.accessibility.AccessibilityEvent)\l android.support.v4.view.AccessibilityDelegateCompat.onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent):boolean type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.SlidingPaneLayout.AccessibilityDelegate.onRequestSendAccessibilityEvent((r1 'this' I:android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.accessibility.AccessibilityEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

