digraph "CFG forandroid.support.v4.widget.DrawerLayout.AccessibilityDelegate.dispatchPopulateAccessibilityEvent(Landroid\/view\/View;Landroid\/view\/accessibility\/AccessibilityEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:android.view.accessibility.AccessibilityEvent) android.view.accessibility.AccessibilityEvent.getEventType():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:java.util.List) = (r4 I:android.view.accessibility.AccessibilityEvent) android.view.accessibility.AccessibilityEvent.getText():java.util.List type: VIRTUAL \l0x000c: IGET  (r4 I:android.support.v4.widget.DrawerLayout) = \l  (r2 I:android.support.v4.widget.DrawerLayout$AccessibilityDelegate)\l android.support.v4.widget.DrawerLayout.AccessibilityDelegate.this$0 android.support.v4.widget.DrawerLayout \l0x000e: INVOKE  (r4 I:android.view.View) = (r4 I:android.support.v4.widget.DrawerLayout) android.support.v4.widget.DrawerLayout.findVisibleDrawer():android.view.View type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:android.support.v4.widget.DrawerLayout) = \l  (r2 I:android.support.v4.widget.DrawerLayout$AccessibilityDelegate)\l android.support.v4.widget.DrawerLayout.AccessibilityDelegate.this$0 android.support.v4.widget.DrawerLayout \l0x0016: INVOKE  (r4 I:int) = \l  (r0 I:android.support.v4.widget.DrawerLayout)\l  (r4 I:android.view.View)\l android.support.v4.widget.DrawerLayout.getDrawerViewAbsoluteGravity(android.view.View):int type: VIRTUAL \l0x001a: IGET  (r0 I:android.support.v4.widget.DrawerLayout) = \l  (r2 I:android.support.v4.widget.DrawerLayout$AccessibilityDelegate)\l android.support.v4.widget.DrawerLayout.AccessibilityDelegate.this$0 android.support.v4.widget.DrawerLayout \l0x001c: INVOKE  (r4 I:java.lang.CharSequence) = (r0 I:android.support.v4.widget.DrawerLayout), (r4 I:int) android.support.v4.widget.DrawerLayout.getDrawerTitle(int):java.lang.CharSequence type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN  (r3 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r3 I:boolean) = \l  (r2 I:android.support.v4.view.AccessibilityDelegateCompat)\l  (r3 I:android.view.View)\l  (r4 I:android.view.accessibility.AccessibilityEvent)\l android.support.v4.view.AccessibilityDelegateCompat.dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent):boolean type: SUPER \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.DrawerLayout.AccessibilityDelegate.dispatchPopulateAccessibilityEvent((r2 'this' I:android.support.v4.widget.DrawerLayout$AccessibilityDelegate A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.accessibility.AccessibilityEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

