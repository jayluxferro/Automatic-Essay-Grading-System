digraph "CFG forandroid.support.v4.widget.CircularProgressDrawable.applyFinishTranslation(FLandroid\/support\/v4\/widget\/CircularProgressDrawable$Ring;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r4 I:android.support.v4.widget.CircularProgressDrawable)\l  (r5 I:float)\l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.updateRingColor(float, android.support.v4.widget.CircularProgressDrawable$Ring):void type: VIRTUAL \l0x0003: INVOKE  (r0 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingRotation():float type: VIRTUAL \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1061997773(0x3f4ccccd, float:0.8) ?[int, float, short, byte, char])\l \l0x000a: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x000b: CAST  (r0 I:double) = (double) (r0 I:float) \l0x000c: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0010: CONST  (r2 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0012: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0013: CAST  (r0 I:float) = (float) (r0 I:double) \l0x0014: INVOKE  (r1 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingStartTrim():float type: VIRTUAL \l0x0018: INVOKE  (r2 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingEndTrim():float type: VIRTUAL \l0x001c: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1008981770(0x3c23d70a, float:0.01) ?[int, float, short, byte, char])\l \l0x001f: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0020: INVOKE  (r3 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingStartTrim():float type: VIRTUAL \l0x0024: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0025: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0027: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0028: INVOKE  \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l  (r1 I:float)\l android.support.v4.widget.CircularProgressDrawable.Ring.setStartTrim(float):void type: VIRTUAL \l0x002b: INVOKE  (r1 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingEndTrim():float type: VIRTUAL \l0x002f: INVOKE  \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l  (r1 I:float)\l android.support.v4.widget.CircularProgressDrawable.Ring.setEndTrim(float):void type: VIRTUAL \l0x0032: INVOKE  (r1 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingRotation():float type: VIRTUAL \l0x0036: INVOKE  (r2 I:float) = \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l android.support.v4.widget.CircularProgressDrawable.Ring.getStartingRotation():float type: VIRTUAL \l0x003a: ARITH  (r0 I:float) = (r0 I:float) \- (r2 I:float) \l0x003b: ARITH  (r0 I:float) = (r0 I:float) * (r5 I:float) \l0x003d: ARITH  (r1 I:float) = (r1 I:float) + (r0 I:float) \l0x003e: INVOKE  \l  (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring)\l  (r1 I:float)\l android.support.v4.widget.CircularProgressDrawable.Ring.setRotation(float):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v4.widget.CircularProgressDrawable.applyFinishTranslation((r4 'this' I:android.support.v4.widget.CircularProgressDrawable A[IMMUTABLE_TYPE, THIS]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.support.v4.widget.CircularProgressDrawable$Ring A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

