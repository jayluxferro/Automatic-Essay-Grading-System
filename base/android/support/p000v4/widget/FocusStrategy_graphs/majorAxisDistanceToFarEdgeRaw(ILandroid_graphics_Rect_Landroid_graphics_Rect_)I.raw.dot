digraph "CFG forandroid.support.v4.widget.FocusStrategy.majorAxisDistanceToFarEdgeRaw(ILandroid\/graphics\/Rect;Landroid\/graphics\/Rect;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = (66 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (130(0x82, float:1.82E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0016 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IGET  (r1 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x0012: IGET  (r2 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x0014: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: RETURN  (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"direction must be one of \{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT\}.\" \l0x001a: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r1 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.right int \l0x0020: IGET  (r2 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.right int \l0x0022: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: RETURN  (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IGET  (r1 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.top int \l0x0026: IGET  (r2 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.top int \l0x0028: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: RETURN  (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: IGET  (r1 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.left int \l0x002c: IGET  (r2 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.left int \l0x002e: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|0x002f: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int android.support.v4.widget.FocusStrategy.majorAxisDistanceToFarEdgeRaw((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

