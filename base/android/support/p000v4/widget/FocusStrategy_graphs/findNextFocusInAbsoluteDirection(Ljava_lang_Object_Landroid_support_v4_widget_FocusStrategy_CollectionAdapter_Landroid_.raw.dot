digraph "CFG forandroid.support.v4.widget.FocusStrategy.findNextFocusInAbsoluteDirection(Ljava\/lang\/Object;Landroid\/support\/v4\/widget\/FocusStrategy$CollectionAdapter;Landroid\/support\/v4\/widget\/FocusStrategy$BoundsAdapter;Ljava\/lang\/Object;Landroid\/graphics\/Rect;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:android.graphics.Rect) =  android.graphics.Rect \l0x0002: INVOKE  (r0 I:android.graphics.Rect), (r11 I:android.graphics.Rect) android.graphics.Rect.\<init\>(android.graphics.Rect):void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (66 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (130(0x82, float:1.82E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: INVOKE  (r1 I:int) = (r11 I:android.graphics.Rect) android.graphics.Rect.height():int type: VIRTUAL \l0x001a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001c: NEG  (r1 I:int) = (r1 I:int) \l0x001d: INVOKE  (r0 I:android.graphics.Rect), (r2 I:int), (r1 I:int) android.graphics.Rect.offset(int, int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r8 I:java.lang.String) =  \"direction must be one of \{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT\}.\" \l0x0025: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r1 I:int) = (r11 I:android.graphics.Rect) android.graphics.Rect.width():int type: VIRTUAL \l0x002d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x002f: NEG  (r1 I:int) = (r1 I:int) \l0x0030: INVOKE  (r0 I:android.graphics.Rect), (r1 I:int), (r2 I:int) android.graphics.Rect.offset(int, int):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: INVOKE  (r1 I:int) = (r11 I:android.graphics.Rect) android.graphics.Rect.height():int type: VIRTUAL \l0x0038: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x003a: INVOKE  (r0 I:android.graphics.Rect), (r2 I:int), (r1 I:int) android.graphics.Rect.offset(int, int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: INVOKE  (r1 I:int) = (r11 I:android.graphics.Rect) android.graphics.Rect.width():int type: VIRTUAL \l0x0042: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0044: INVOKE  (r0 I:android.graphics.Rect), (r1 I:int), (r2 I:int) android.graphics.Rect.offset(int, int):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0048: INVOKE  (r3 I:int) = \l  (r8 I:android.support.v4.widget.FocusStrategy$CollectionAdapter)\l  (r7 I:java.lang.Object)\l android.support.v4.widget.FocusStrategy.CollectionAdapter.size(java.lang.Object):int type: INTERFACE \l0x004c: NEW_INSTANCE  (r4 I:android.graphics.Rect) =  android.graphics.Rect \l0x004e: INVOKE  (r4 I:android.graphics.Rect) android.graphics.Rect.\<init\>():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:23:0x006a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: INVOKE  (r5 I:java.lang.Object) = \l  (r8 I:android.support.v4.widget.FocusStrategy$CollectionAdapter)\l  (r7 I:java.lang.Object)\l  (r2 I:int)\l android.support.v4.widget.FocusStrategy.CollectionAdapter.get(java.lang.Object, int):java.lang.Object type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005a \l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|0x005a: INVOKE  \l  (r9 I:android.support.v4.widget.FocusStrategy$BoundsAdapter)\l  (r5 I:java.lang.Object)\l  (r4 I:android.graphics.Rect)\l android.support.v4.widget.FocusStrategy.BoundsAdapter.obtainBounds(java.lang.Object, android.graphics.Rect):void type: INTERFACE \l0x005d: INVOKE  (r6 I:boolean) = \l  (r12 I:int)\l  (r11 I:android.graphics.Rect)\l  (r4 I:android.graphics.Rect)\l  (r0 I:android.graphics.Rect)\l android.support.v4.widget.FocusStrategy.isBetterCandidate(int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect):boolean type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|0x0061: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0067 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0063|0x0063: INVOKE  (r0 I:android.graphics.Rect), (r4 I:android.graphics.Rect) android.graphics.Rect.set(android.graphics.Rect):void type: VIRTUAL \l0x0066: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0067|0x0067: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x006a|0x006a: RETURN  (r1 I:T) \l}"];
MethodNode[shape=record,label="{public static T android.support.v4.widget.FocusStrategy.findNextFocusInAbsoluteDirection((r7 I:L A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.support.v4.widget.FocusStrategy$CollectionAdapter\<L, T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.support.v4.widget.FocusStrategy$BoundsAdapter\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<, L:Ljava\/lang\/Object;, T:, Ljava\/lang\/Object;, \>(T, L;, Landroid\/support\/v4\/widget\/FocusStrategy$CollectionAdapter\<, T, L;, TT;\>;, Landroid\/support\/v4\/widget\/FocusStrategy$BoundsAdapter\<, TT;\>;TT;, Landroid\/graphics\/Rect;, I)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_22[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_15;
}

