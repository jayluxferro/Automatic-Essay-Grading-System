digraph "CFG forandroid.support.v4.widget.SlidingPaneLayout.DragHelperCallback.tryCaptureView(Landroid\/view\/View;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:android.support.v4.widget.SlidingPaneLayout) = \l  (r0 I:android.support.v4.widget.SlidingPaneLayout$DragHelperCallback)\l android.support.v4.widget.SlidingPaneLayout.DragHelperCallback.this$0 android.support.v4.widget.SlidingPaneLayout \l0x0002: IGET  (r2 I:boolean) = (r2 I:android.support.v4.widget.SlidingPaneLayout) android.support.v4.widget.SlidingPaneLayout.mIsUnableToDrag boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r1 I:android.view.ViewGroup$LayoutParams) = (r1 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x000c: CHECK_CAST  (r1 I:android.support.v4.widget.SlidingPaneLayout$LayoutParams) = (android.support.v4.widget.SlidingPaneLayout$LayoutParams) (r1 I:?[OBJECT, ARRAY]) \l0x000e: IGET  (r1 I:boolean) = \l  (r1 I:android.support.v4.widget.SlidingPaneLayout$LayoutParams)\l android.support.v4.widget.SlidingPaneLayout.LayoutParams.slideable boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.widget.SlidingPaneLayout.DragHelperCallback.tryCaptureView((r0 'this' I:android.support.v4.widget.SlidingPaneLayout$DragHelperCallback A[IMMUTABLE_TYPE, THIS]), (r1 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

