digraph "CFG forandroid.support.v4.widget.PopupWindowCompat.getOverlapAnchor(Landroid\/widget\/PopupWindow;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r4 I:boolean) = (r4 I:android.widget.PopupWindow) android.widget.PopupWindow.getOverlapAnchor():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000d: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:22:0x0049 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: SGET  (r0 I:boolean) =  android.support.v4.widget.PopupWindowCompat.sOverlapAnchorFieldAttempted boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: CONST_CLASS  (r1 I:java.lang.Class\<android.widget.PopupWindow\>) =  android.widget.PopupWindow.class \l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"mOverlapAnchor\" \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|SYNTHETIC\lSplitter:B:9:0x001a\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x001a\l|0x001a: INVOKE  (r1 I:java.lang.reflect.Field) = (r1 I:java.lang.Class), (r2 I:java.lang.String) java.lang.Class.getDeclaredField(java.lang.String):java.lang.reflect.Field type: VIRTUAL A[Catch:\{ NoSuchFieldException \-\> 0x0026 \}, TRY_ENTER]\l0x001e: SPUT  (r1 I:java.lang.reflect.Field) android.support.v4.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field A[Catch:\{ NoSuchFieldException \-\> 0x0026 \}]\l0x0020: SGET  (r1 I:java.lang.reflect.Field) =  android.support.v4.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field A[Catch:\{ NoSuchFieldException \-\> 0x0026 \}]\l0x0022: INVOKE  (r1 I:java.lang.reflect.Field), (r0 I:boolean) java.lang.reflect.Field.setAccessible(boolean):void type: VIRTUAL A[Catch:\{ NoSuchFieldException \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|ExcHandler: NoSuchFieldException null\lSplitter:B:9:0x001a\l|0x0026: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: CONST_STR  (r2 I:java.lang.String) =  \"PopupWindowCompatApi21\" \l0x0029: CONST_STR  (r3 I:java.lang.String) =  \"Could not fetch mOverlapAnchor field from PopupWindow\" \l0x002b: INVOKE  \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l android.util.Log.i(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: SPUT  (r0 I:boolean) android.support.v4.widget.PopupWindowCompat.sOverlapAnchorFieldAttempted boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: SGET  (r0 I:java.lang.reflect.Field) =  android.support.v4.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0049 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|SYNTHETIC\lSplitter:B:17:0x0034\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0034\l|0x0034: SGET  (r0 I:java.lang.reflect.Field) =  android.support.v4.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field A[Catch:\{ IllegalAccessException \-\> 0x0041 \}, TRY_ENTER]\l0x0036: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.lang.reflect.Field), (r4 I:java.lang.Object) java.lang.reflect.Field.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x0041 \}]\l0x003a: CHECK_CAST  (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalAccessException \-\> 0x0041 \}]\l0x003c: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x0041 \}]\l0x003f: NOP   A[TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: RETURN  (r4 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|ExcHandler: IllegalAccessException null\lSplitter:B:17:0x0034\l|0x0041: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: CONST_STR  (r0 I:java.lang.String) =  \"PopupWindowCompatApi21\" \l0x0044: CONST_STR  (r1 I:java.lang.String) =  \"Could not get overlap anchor field in PopupWindow\" \l0x0046: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l android.util.Log.i(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.widget.PopupWindowCompat.getOverlapAnchor((r4 I:android.widget.PopupWindow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_22;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_10 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

