digraph "CFG forandroid.support.v4.view.PagerTitleStrip.SingleLineAllCapsTransform.getTransformation(Ljava\/lang\/CharSequence;Landroid\/view\/View;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.CharSequence) = \l  (r0 I:android.text.method.SingleLineTransformationMethod)\l  (r1 I:java.lang.CharSequence)\l  (r2 I:android.view.View)\l android.text.method.SingleLineTransformationMethod.getTransformation(java.lang.CharSequence, android.view.View):java.lang.CharSequence type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.CharSequence) java.lang.CharSequence.toString():java.lang.String type: INTERFACE \l0x000a: IGET  (r2 I:java.util.Locale) = \l  (r0 I:android.support.v4.view.PagerTitleStrip$SingleLineAllCapsTransform)\l android.support.v4.view.PagerTitleStrip.SingleLineAllCapsTransform.mLocale java.util.Locale \l0x000c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.util.Locale) java.lang.String.toUpperCase(java.util.Locale):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN  (r1 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence android.support.v4.view.PagerTitleStrip.SingleLineAllCapsTransform.getTransformation((r0 'this' I:android.support.v4.view.PagerTitleStrip$SingleLineAllCapsTransform A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

