digraph "CFG forandroid.support.v4.view.ViewCompat.UnhandledKeyEventManager.dispatch(Landroid\/view\/View;Landroid\/view\/KeyEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:android.view.KeyEvent) android.view.KeyEvent.getAction():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  \l  (r2 I:android.support.v4.view.ViewCompat$UnhandledKeyEventManager)\l android.support.v4.view.ViewCompat.UnhandledKeyEventManager.recalcViewsWithUnhandled():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r3 I:android.view.View) = \l  (r2 I:android.support.v4.view.ViewCompat$UnhandledKeyEventManager)\l  (r3 I:android.view.View)\l  (r4 I:android.view.KeyEvent)\l android.support.v4.view.ViewCompat.UnhandledKeyEventManager.dispatchInOrder(android.view.View, android.view.KeyEvent):android.view.View type: DIRECT \l0x000d: INVOKE  (r0 I:int) = (r4 I:android.view.KeyEvent) android.view.KeyEvent.getAction():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r4 I:int) = (r4 I:android.view.KeyEvent) android.view.KeyEvent.getKeyCode():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r0 I:boolean) = (r4 I:int) android.view.KeyEvent.isModifierKey(int):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  (r0 I:android.util.SparseArray) = \l  (r2 I:android.support.v4.view.ViewCompat$UnhandledKeyEventManager)\l android.support.v4.view.ViewCompat.UnhandledKeyEventManager.getCapturedKeys():android.util.SparseArray type: DIRECT \l0x0023: NEW_INSTANCE  (r1 I:java.lang.ref.WeakReference) =  java.lang.ref.WeakReference \l0x0025: INVOKE  (r1 I:java.lang.ref.WeakReference), (r3 I:java.lang.Object) java.lang.ref.WeakReference.\<init\>(java.lang.Object):void type: DIRECT \l0x0028: INVOKE  \l  (r0 I:android.util.SparseArray)\l  (r4 I:int)\l  (r1 I:java.lang.Object)\l android.util.SparseArray.put(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean android.support.v4.view.ViewCompat.UnhandledKeyEventManager.dispatch((r2 'this' I:android.support.v4.view.ViewCompat$UnhandledKeyEventManager A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.KeyEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
}

