digraph "CFG forandroid.support.v4.view.ViewCompat.UnhandledKeyEventManager.onUnhandledKeyEvent(Landroid\/view\/View;Landroid\/view\/KeyEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = (java.util.ArrayList) r5.getTag(android.support.compat.C0031R.C0033id.tag_unhandled_key_listeners)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|int r1 = r0.size() \- 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:2:0x000a, B:7:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0010\-\>B:7:0x001f\l|if (r1 \< 0) goto L_0x0022\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012}"];
Node_5 [shape=record,label="{5\:\ 0x001c|if (((android.support.p000v4.view.ViewCompat.OnUnhandledKeyEventListenerCompat) r0.get(r1)).onUnhandledKeyEvent(r5, r6) == false) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|LOOP_END\lLOOP:0: B:3:0x0010\-\>B:7:0x001f\l|int r1 = r1 + \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean android.support.v4.view.ViewCompat.UnhandledKeyEventManager.onUnhandledKeyEvent((r4v0 'this' android.support.v4.view.ViewCompat$UnhandledKeyEventManager A[IMMUTABLE_TYPE, THIS]), (r5v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.KeyEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_3;
Node_8 -> Node_11;
Node_9 -> Node_6;
}

