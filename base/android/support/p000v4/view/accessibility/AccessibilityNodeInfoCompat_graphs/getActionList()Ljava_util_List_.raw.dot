digraph "CFG forandroid.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActionList()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.view.accessibility.AccessibilityNodeInfo) = \l  (r6 I:android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)\l android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.mInfo android.view.accessibility.AccessibilityNodeInfo \l0x0008: INVOKE  (r0 I:java.util.List) = (r0 I:android.view.accessibility.AccessibilityNodeInfo) android.view.accessibility.AccessibilityNodeInfo.getActionList():java.util.List type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0012: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0015: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0019: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0020: NEW_INSTANCE  (r5 I:android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) =  android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat \l0x0022: INVOKE  \l  (r5 I:android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)\l  (r4 I:java.lang.Object)\l android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.\<init\>(java.lang.Object):void type: DIRECT \l0x0025: INVOKE  (r1 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0028: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: RETURN  \l  (r1 I:java.util.List\<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: INVOKE  (r0 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: RETURN  \l  (r0 I:java.util.List\<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)\l \l}"];
MethodNode[shape=record,label="{public java.util.List\<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActionList((r6 'this' I:android.support.v4.view.accessibility.AccessibilityNodeInfoCompat A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Landroid\/support\/v4\/view\/accessibility\/AccessibilityNodeInfoCompat$AccessibilityActionCompat;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_9 -> Node_10;
}

