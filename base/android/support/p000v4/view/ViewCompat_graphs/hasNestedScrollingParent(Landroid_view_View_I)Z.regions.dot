digraph "CFG forandroid.support.v4.view.ViewCompat.hasNestedScrollingParent(Landroid\/view\/View;I)Z" {
subgraph cluster_Region_1845525144 {
label = "R(1:(2:2|6)(1:(1:5)(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1927964215 {
label = "IF [B:1:0x0002] THEN: R(2:2|6) ELSE: R(1:(1:5)(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r1 instanceof android.support.p000v4.view.NestedScrollingChild2) == true) goto L_0x0004\l}"];
subgraph cluster_Region_1335379962 {
label = "R(2:2|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|((android.support.p000v4.view.NestedScrollingChild2) r1).hasNestedScrollingParent(r2)\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
subgraph cluster_Region_2082644827 {
label = "R(1:(1:5)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_295424765 {
label = "IF [B:3:0x000a] THEN: R(1:5) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r2 == 0) goto L_0x000c\l}"];
subgraph cluster_Region_820102439 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|RETURN\l|return hasNestedScrollingParent(r1)\l}"];
}
subgraph cluster_Region_1036776278 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.view.ViewCompat.hasNestedScrollingParent((r1v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_0 -> Node_1;
Node_4 -> Node_5;
}

