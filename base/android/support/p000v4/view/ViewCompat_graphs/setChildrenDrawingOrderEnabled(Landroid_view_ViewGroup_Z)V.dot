digraph "CFG forandroid.support.v4.view.ViewCompat.setChildrenDrawingOrderEnabled(Landroid\/view\/ViewGroup;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (sChildrenDrawingOrderMethod != null) goto L_0x0024\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.lang.Class\<android.view.ViewGroup\> r0 = android.view.ViewGroup.class\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|SYNTHETIC\lSplitter:B:3:0x000a\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ NoSuchMethodException \-\> 0x0017 \}\lSplitter:B:3:0x000a\l|java.lang.Class[] r4 = new java.lang.Class[]\{java.lang.Boolean.TYPE\}\lsChildrenDrawingOrderMethod = r0.getDeclaredMethod(\"setChildrenDrawingOrderEnabled\", r4)     \/\/ Catch:\{ NoSuchMethodException \-\> 0x0017 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|ExcHandler: NoSuchMethodException (r0v7 'e' java.lang.NoSuchMethodException A[CUSTOM_DECLARE])\lSplitter:B:3:0x000a\l|java.lang.NoSuchMethodException r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|android.util.Log.e(TAG, \"Unable to find childrenDrawingOrderEnabled\", r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|sChildrenDrawingOrderMethod.setAccessible(true)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|SYNTHETIC\lSplitter:B:8:0x0024\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ IllegalAccessException \-\> 0x0044, IllegalArgumentException \-\> 0x003b, InvocationTargetException \-\> 0x0032 \}\lSplitter:B:8:0x0024\l|java.lang.reflect.Method r0 = sChildrenDrawingOrderMethod     \/\/ Catch:\{ IllegalAccessException \-\> 0x0044, IllegalArgumentException \-\> 0x003b, InvocationTargetException \-\> 0x0032 \}\ljava.lang.Object[] r2 = new java.lang.Object[]\{java.lang.Boolean.valueOf(r7)\}\lr0.invoke(r6, r2)     \/\/ Catch:\{ IllegalAccessException \-\> 0x0044, IllegalArgumentException \-\> 0x003b, InvocationTargetException \-\> 0x0032 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|ExcHandler: InvocationTargetException (r6v3 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:8:0x0024\l|java.lang.reflect.InvocationTargetException r6 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|android.util.Log.e(TAG, \"Unable to invoke childrenDrawingOrderEnabled\", r6)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|ExcHandler: IllegalArgumentException (r6v2 'e' java.lang.IllegalArgumentException A[CUSTOM_DECLARE])\lSplitter:B:8:0x0024\l|java.lang.IllegalArgumentException r6 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|android.util.Log.e(TAG, \"Unable to invoke childrenDrawingOrderEnabled\", r6)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|ExcHandler: IllegalAccessException (r6v1 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:8:0x0024\l|java.lang.IllegalAccessException r6 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|android.util.Log.e(TAG, \"Unable to invoke childrenDrawingOrderEnabled\", r6)\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void android.support.v4.view.ViewCompat.setChildrenDrawingOrderEnabled((r6v0 android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_14;
Node_8 -> Node_12;
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_9 -> Node_12;
Node_9 -> Node_10;
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

