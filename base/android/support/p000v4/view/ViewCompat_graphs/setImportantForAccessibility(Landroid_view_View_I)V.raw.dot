digraph "CFG forandroid.support.v4.view.ViewCompat.setImportantForAccessibility(Landroid\/view\/View;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:android.view.View), (r3 I:int) android.view.View.setImportantForAccessibility(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r2 I:android.view.View), (r3 I:int) android.view.View.setImportantForAccessibility(int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{public static void android.support.v4.view.ViewCompat.setImportantForAccessibility((r2 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

