digraph "CFG forandroid.support.v4.view.ViewPager.scrollToItem(IZIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.support.v4.view.ViewPager$ItemInfo r0 = infoForPosition(r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 == null) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|int r0 = (int) (((float) getClientWidth()) * java.lang.Math.max(r5.mFirstOffset, java.lang.Math.min(r0.offset, r5.mLastOffset)))\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|r0 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|PHI: r0 \l  PHI: (r0v1 int) = (r0v2 int), (r0v6 int) binds: [B:3:0x001e, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L_0x002a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|smoothScrollTo(r0, 0, r8)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r9 == false) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|dispatchOnPageSelected(r6)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|if (r9 == false) goto L_0x002f\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|dispatchOnPageSelected(r6)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|completeScroll(false)\lscrollTo(r0, 0)\lpageScrolled(r0)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.v4.view.ViewPager.scrollToItem((r5v0 'this' android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_13;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

