digraph "CFG forandroid.support.v4.view.ViewPager.getChildDrawingOrder(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.mDrawingOrder int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0007: ARITH  (r4 I:int) = (r3 I:int) \- (r4 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r3 I:java.util.ArrayList\<android.view.View\>) = (r2 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.mDrawingOrderedChildren java.util.ArrayList \l0x000b: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.ArrayList), (r4 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x000f: CHECK_CAST  (r3 I:android.view.View) = (android.view.View) (r3 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:android.view.ViewGroup$LayoutParams) = (r3 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x0015: CHECK_CAST  (r3 I:android.support.v4.view.ViewPager$LayoutParams) = (android.support.v4.view.ViewPager$LayoutParams) (r3 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r3 I:int) = (r3 I:android.support.v4.view.ViewPager$LayoutParams) android.support.v4.view.ViewPager.LayoutParams.childIndex int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{protected int android.support.v4.view.ViewPager.getChildDrawingOrder((r2 'this' I:android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

