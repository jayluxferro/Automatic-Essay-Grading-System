digraph "CFG forandroid.support.v4.view.ViewPager.scrollToItem(IZIZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.support.v4.view.ViewPager$ItemInfo) = (r5 I:android.support.v4.view.ViewPager), (r6 I:int) android.support.v4.view.ViewPager.infoForPosition(int):android.support.v4.view.ViewPager$ItemInfo type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:int) = (r5 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.getClientWidth():int type: DIRECT \l0x000b: CAST  (r2 I:float) = (float) (r2 I:int) \l0x000c: IGET  (r3 I:float) = (r5 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.mFirstOffset float \l0x000e: IGET  (r0 I:float) = (r0 I:android.support.v4.view.ViewPager$ItemInfo) android.support.v4.view.ViewPager.ItemInfo.offset float \l0x0010: IGET  (r4 I:float) = (r5 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.mLastOffset float \l0x0012: INVOKE  (r0 I:float) = (r0 I:float), (r4 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x0016: INVOKE  (r0 I:float) = (r3 I:float), (r0 I:float) java.lang.Math.max(float, float):float type: STATIC \l0x001a: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float) \l0x001c: CAST  (r0 I:int) = (int) (r2 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: INVOKE  \l  (r5 I:android.support.v4.view.ViewPager)\l  (r0 I:int)\l  (r1 I:int)\l  (r8 I:int)\l android.support.v4.view.ViewPager.smoothScrollTo(int, int, int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0038 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r5 I:android.support.v4.view.ViewPager), (r6 I:int) android.support.v4.view.ViewPager.dispatchOnPageSelected(int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: INVOKE  (r5 I:android.support.v4.view.ViewPager), (r6 I:int) android.support.v4.view.ViewPager.dispatchOnPageSelected(int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: INVOKE  (r5 I:android.support.v4.view.ViewPager), (r1 I:boolean) android.support.v4.view.ViewPager.completeScroll(boolean):void type: DIRECT \l0x0032: INVOKE  \l  (r5 I:android.support.v4.view.ViewPager)\l  (r0 I:int)\l  (r1 I:int)\l android.support.v4.view.ViewPager.scrollTo(int, int):void type: VIRTUAL \l0x0035: INVOKE  (r5 I:android.support.v4.view.ViewPager), (r0 I:int) android.support.v4.view.ViewPager.pageScrolled(int):boolean type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: RETURN   \l}"];
MethodNode[shape=record,label="{private void android.support.v4.view.ViewPager.scrollToItem((r5 'this' I:android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_11;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

