digraph "CFG forandroid.support.v4.view.ViewPager.determineTargetPage(IFII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (java.lang.Math.abs(r5) \<= r1.mFlingDistance) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (java.lang.Math.abs(r4) \<= r1.mMinimumVelocity) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r4 \<= 0) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|int r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016}"];
Node_7 [shape=record,label="{7\:\ 0x0018|if (r2 \< r1.mCurItem) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|r4 = 0.4f\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|r4 = 0.6f\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|PHI: r4 \l  PHI: (r4v7 float) = (r4v8 float), (r4v9 float) binds: [B:9:0x001e, B:8:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + ((int) (r3 + r4))\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|PHI: r2 \l  PHI: (r2v1 int) = (r2v4 int), (r2v0 int), (r2v5 int) binds: [B:10:0x0021, B:4:0x0010, B:5:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|if (r1.mItems.size() \<= 0) goto L_?\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.lang.Math.max(r1.mItems.get(0).position, java.lang.Math.min(r2, r1.mItems.get(r1.mItems.size() + \-1).position))\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
MethodNode[shape=record,label="{private int android.support.v4.view.ViewPager.determineTargetPage((r1v0 'this' android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_11[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
}

