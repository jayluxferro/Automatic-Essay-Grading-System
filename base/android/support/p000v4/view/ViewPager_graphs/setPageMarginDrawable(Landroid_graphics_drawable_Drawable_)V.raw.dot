digraph "CFG forandroid.support.v4.view.ViewPager.setPageMarginDrawable(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r1 I:android.graphics.drawable.Drawable)\l  (r0 I:android.support.v4.view.ViewPager)\l android.support.v4.view.ViewPager.mMarginDrawable android.graphics.drawable.Drawable \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.refreshDrawableState():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r0 I:android.support.v4.view.ViewPager), (r1 I:boolean) android.support.v4.view.ViewPager.setWillNotDraw(boolean):void type: VIRTUAL \l0x000f: INVOKE  (r0 I:android.support.v4.view.ViewPager) android.support.v4.view.ViewPager.invalidate():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.view.ViewPager.setPageMarginDrawable((r0 'this' I:android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r1 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

