digraph "CFG forandroid.support.v4.view.ViewPager.addView(Landroid\/view\/View;ILandroid\/view\/ViewGroup$LayoutParams;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (checkLayoutParams(r6) != false) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|android.view.ViewGroup$LayoutParams r6 = generateLayoutParams(r6)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|PHI: r6 \l  PHI: (r6v1 android.view.ViewGroup$LayoutParams) = (r6v0 android.view.ViewGroup$LayoutParams), (r6v2 android.view.ViewGroup$LayoutParams) binds: [B:1:0x0004, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|android.support.v4.view.ViewPager$LayoutParams r0 = (android.support.p000v4.view.ViewPager.LayoutParams) r6\lr0.isDecor = r0.isDecor \| isDecorView(r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r3.mInLayout == false) goto L_0x0030\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r0 == null) goto L_0x0029\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r0.isDecor != false) goto L_0x0021\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021}"];
Node_9 [shape=record,label="{9\:\ 0x0028|throw new java.lang.IllegalStateException(\"Cannot add pager decor view during layout\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|r0.needsMeasure = true\laddViewInLayout(r4, r5, r6)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|super.addView(r4, r5, r6)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v4.view.ViewPager.addView((r3v0 'this' android.support.v4.view.ViewPager A[IMMUTABLE_TYPE, THIS]), (r4v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.view.ViewGroup$LayoutParams A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_13;
Node_11 -> Node_12;
}

