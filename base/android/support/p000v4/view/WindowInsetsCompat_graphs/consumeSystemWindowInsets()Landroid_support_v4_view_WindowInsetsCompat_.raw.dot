digraph "CFG forandroid.support.v4.view.WindowInsetsCompat.consumeSystemWindowInsets()Landroid\/support\/v4\/view\/WindowInsetsCompat;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:android.support.v4.view.WindowInsetsCompat) =  android.support.v4.view.WindowInsetsCompat \l0x0008: IGET  (r1 I:java.lang.Object) = (r2 I:android.support.v4.view.WindowInsetsCompat) android.support.v4.view.WindowInsetsCompat.mInsets java.lang.Object \l0x000a: CHECK_CAST  (r1 I:android.view.WindowInsets) = (android.view.WindowInsets) (r1 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:android.view.WindowInsets) = (r1 I:android.view.WindowInsets) android.view.WindowInsets.consumeSystemWindowInsets():android.view.WindowInsets type: VIRTUAL \l0x0010: INVOKE  \l  (r0 I:android.support.v4.view.WindowInsetsCompat)\l  (r1 I:java.lang.Object)\l android.support.v4.view.WindowInsetsCompat.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  (r0 I:android.support.v4.view.WindowInsetsCompat) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN  (r0 I:android.support.v4.view.WindowInsetsCompat) \l}"];
MethodNode[shape=record,label="{public android.support.v4.view.WindowInsetsCompat android.support.v4.view.WindowInsetsCompat.consumeSystemWindowInsets((r2 'this' I:android.support.v4.view.WindowInsetsCompat A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

