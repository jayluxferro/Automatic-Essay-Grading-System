digraph "CFG forandroid.support.v4.view.PagerTitleStrip.updateTextPositions(IFZ)V" {
subgraph cluster_Region_1138173515 {
label = "R(7:0|(1:2)(1:(1:6))|7|(1:9)|10|(1:16)(1:(1:14)(1:15))|17) | DECL_VAR: int null, int null, int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r18\lint r1 = r19\lfloat r2 = r20\l}"];
subgraph cluster_IfRegion_1819855137 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: R(1:(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r1 != r0.mLastKnownCurrentPage) goto L_0x000a\l}"];
subgraph cluster_Region_920516810 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|updateText(r1, r0.mPager.getAdapter())\l}"];
}
subgraph cluster_Region_236980604 {
label = "R(1:(1:6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1122721928 {
label = "IF [B:3:0x0014, B:5:0x001a] THEN: R(1:6) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0014|ADDED_TO_REGION\l|if (r21 == false) goto L_0x0016\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|ADDED_TO_REGION\l|if (r2 == r0.mLastKnownPositionOffset) goto L_0x001c\l}"];
subgraph cluster_Region_582878992 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x001d|r0.mUpdatingPositions = true\lint int r1 = r0.mPrevText.getMeasuredWidth()\lint int r3 = r0.mCurrText.getMeasuredWidth()\lint int r4 = r0.mNextText.getMeasuredWidth()\lint int r5 = r3 \/ 2\lint int r6 = getWidth()\lint int r7 = getHeight()\lint int r8 = getPaddingLeft()\lint int r9 = getPaddingRight()\lint int r10 = getPaddingTop()\lint int r11 = getPaddingBottom()\lint int r13 = r9 + r5\lint int r12 = (r6 \- (r8 + r5)) \- r13\lfloat float r14 = 0.5f + r2\l}"];
subgraph cluster_IfRegion_1303339428 {
label = "IF [B:8:0x005a] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x005a|if (r14 \> 1.0f) goto L_0x005c\l}"];
subgraph cluster_Region_1390113772 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x005c|r14 \-= 1.0f\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x005d|PHI: r14 \l  PHI: (r14v2 float) = (r14v1 float), (r14v10 float) binds: [B:8:0x005a, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\l|int int r13 = ((r6 \- r13) \- ((int) (((float) r12) * r14))) \- r5\lint int r3 = r3 + r13\lint int r5 = r0.mPrevText.getBaseline()\lint int r12 = r0.mCurrText.getBaseline()\lint int r14 = r0.mNextText.getBaseline()\lint int r15 = java.lang.Math.max(java.lang.Math.max(r5, r12), r14)\lint int r5 = r15 \- r5\lint int r12 = r15 \- r12\lint int r15 = r15 \- r14\lint r17 = r4\lint int r2 = java.lang.Math.max(java.lang.Math.max(r0.mPrevText.getMeasuredHeight() + r5, r0.mCurrText.getMeasuredHeight() + r12), r0.mNextText.getMeasuredHeight() + r15)\lint r4 = r0.mGravity & 112\l}"];
subgraph cluster_IfRegion_663372651 {
label = "IF [B:11:0x00aa] THEN: R(1:16) ELSE: R(1:(1:14)(1:15))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x00aa|if (r4 == 16) goto L_0x00bb\l}"];
subgraph cluster_Region_947188704 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x00bb|int int r7 = (((r7 \- r10) \- r11) \- r2) \/ 2\lint r5 = r5 + r7\lint r12 = r12 + r7\lint r10 = r7 + r15\l}"];
}
subgraph cluster_Region_368904539 {
label = "R(1:(1:14)(1:15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_19426822 {
label = "IF [B:13:0x00ae] THEN: R(1:14) ELSE: R(1:15) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x00ae|if (r4 != 80) goto L_0x00b0\l}"];
subgraph cluster_Region_1261286689 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x00b0|int r5 = r5 + r10\lint r12 = r12 + r10\lint r10 = r10 + r15\l}"];
}
subgraph cluster_Region_309265422 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x00b4|int int r7 = (r7 \- r11) \- r2\lint r5 = r5 + r7\lint r12 = r12 + r7\lint r10 = r7 + r15\l}"];
}
}
}
}
Node_17 [shape=record,label="{17\:\ 0x00c4|PHI: r5 r10 r12 \l  PHI: (r5v4 int) = (r5v5 int), (r5v6 int), (r5v7 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 int) = (r10v2 int), (r10v3 int), (r10v4 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v9 int) = (r12v10 int), (r12v11 int), (r12v12 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l|r0.mCurrText.layout(r13, r12, r3, r0.mCurrText.getMeasuredHeight() + r12)\lint int r2 = java.lang.Math.min(r8, (r13 \- r0.mScaledTextSpacing) \- r1)\lr0.mPrevText.layout(r2, r5, r1 + r2, r0.mPrevText.getMeasuredHeight() + r5)\lint int r1 = java.lang.Math.max((r6 \- r9) \- r17, r3 + r0.mScaledTextSpacing)\lr0.mNextText.layout(r1, r10, r1 + r17, r0.mNextText.getMeasuredHeight() + r10)\lr0.mLastKnownPositionOffset = r20\lr0.mUpdatingPositions = false\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0016}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x00ac}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0104}"];
MethodNode[shape=record,label="{void android.support.v4.view.PagerTitleStrip.updateTextPositions((r18v0 'this' android.support.v4.view.PagerTitleStrip A[IMMUTABLE_TYPE, THIS]), (r19v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_16 -> Node_17;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_4 -> Node_5;
Node_12 -> Node_13;
}

