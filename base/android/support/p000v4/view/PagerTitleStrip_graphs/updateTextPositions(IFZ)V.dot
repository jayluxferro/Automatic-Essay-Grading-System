digraph "CFG forandroid.support.v4.view.PagerTitleStrip.updateTextPositions(IFZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r18\lr1 = r19\lr2 = r20\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r1 == r0.mLastKnownCurrentPage) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|updateText(r1, r0.mPager.getAdapter())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (r21 != false) goto L_0x001d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if ((r2 \> r0.mLastKnownPositionOffset ? 1 : (r2 == r0.mLastKnownPositionOffset ? 0 : \-1)) != 0) goto L_0x001d\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r0.mUpdatingPositions = true\lint r1 = r0.mPrevText.getMeasuredWidth()\lint r3 = r0.mCurrText.getMeasuredWidth()\lint r4 = r0.mNextText.getMeasuredWidth()\lint r5 = r3 \/ 2\lint r6 = getWidth()\lint r7 = getHeight()\lint r8 = getPaddingLeft()\lint r9 = getPaddingRight()\lint r10 = getPaddingTop()\lint r11 = getPaddingBottom()\lint r13 = r9 + r5\lint r12 = (r6 \- (r8 + r5)) \- r13\lfloat r14 = 0.5f + r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x005a|if ((r14 \> 1.0f ? 1 : (r14 == 1.0f ? 0 : \-1)) \<= 0) goto L_0x005d\l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|float r14 = r14 \- 1.0f\l}"];
Node_10 [shape=record,label="{10\:\ 0x005d|PHI: r14 \l  PHI: (r14v2 float) = (r14v1 float), (r14v10 float) binds: [B:8:0x005a, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\l|int r13 = ((r6 \- r13) \- ((int) (((float) r12) * r14))) \- r5\lint r3 = r3 + r13\lint r5 = r0.mPrevText.getBaseline()\lint r12 = r0.mCurrText.getBaseline()\lint r14 = r0.mNextText.getBaseline()\lint r15 = java.lang.Math.max(java.lang.Math.max(r5, r12), r14)\lint r5 = r15 \- r5\lint r12 = r15 \- r12\lint r15 = r15 \- r14\lr17 = r4\lint r2 = java.lang.Math.max(r0.mPrevText.getMeasuredHeight() + r5, r0.mCurrText.getMeasuredHeight() + r12)\lint r2 = java.lang.Math.max(r2, r0.mNextText.getMeasuredHeight() + r15)\lr4 = r0.mGravity & 112\l}"];
Node_11 [shape=record,label="{11\:\ 0x00aa|if (r4 == 16) goto L_0x00bb\l}"];
Node_12 [shape=record,label="{12\:\ 0x00ac}"];
Node_13 [shape=record,label="{13\:\ 0x00ae|if (r4 == 80) goto L_0x00b4\l}"];
Node_14 [shape=record,label="{14\:\ 0x00b0|int r5 = r5 + r10\lint r12 = r12 + r10\lint r10 = r10 + r15\l}"];
Node_15 [shape=record,label="{15\:\ 0x00b4|int r7 = (r7 \- r11) \- r2\lint r5 = r5 + r7\lint r12 = r12 + r7\lint r10 = r7 + r15\l}"];
Node_16 [shape=record,label="{16\:\ 0x00bb|int r7 = (((r7 \- r10) \- r11) \- r2) \/ 2\lint r5 = r5 + r7\lint r12 = r12 + r7\lint r10 = r7 + r15\l}"];
Node_17 [shape=record,label="{17\:\ 0x00c4|PHI: r5 r10 r12 \l  PHI: (r5v4 int) = (r5v5 int), (r5v6 int), (r5v7 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 int) = (r10v2 int), (r10v3 int), (r10v4 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v9 int) = (r12v10 int), (r12v11 int), (r12v12 int) binds: [B:16:0x00bb, B:15:0x00b4, B:14:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l|r0.mCurrText.layout(r13, r12, r3, r0.mCurrText.getMeasuredHeight() + r12)\lint r2 = java.lang.Math.min(r8, (r13 \- r0.mScaledTextSpacing) \- r1)\lr0.mPrevText.layout(r2, r5, r1 + r2, r0.mPrevText.getMeasuredHeight() + r5)\lint r1 = java.lang.Math.max((r6 \- r9) \- r17, r3 + r0.mScaledTextSpacing)\lr0.mNextText.layout(r1, r10, r1 + r17, r0.mNextText.getMeasuredHeight() + r10)\lr0.mLastKnownPositionOffset = r20\lr0.mUpdatingPositions = false\l}"];
Node_18 [shape=record,label="{18\:\ 0x0104|RETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v4.view.PagerTitleStrip.updateTextPositions((r18v0 'this' android.support.v4.view.PagerTitleStrip A[IMMUTABLE_TYPE, THIS]), (r19v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

