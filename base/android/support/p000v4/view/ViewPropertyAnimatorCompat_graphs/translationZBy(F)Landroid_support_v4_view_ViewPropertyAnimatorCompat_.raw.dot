digraph "CFG forandroid.support.v4.view.ViewPropertyAnimatorCompat.translationZBy(F)Landroid\/support\/v4\/view\/ViewPropertyAnimatorCompat;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<android.view.View\>) = (r3 I:android.support.v4.view.ViewPropertyAnimatorCompat) android.support.v4.view.ViewPropertyAnimatorCompat.mView java.lang.ref.WeakReference \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) java.lang.ref.WeakReference.get():java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:android.view.View) = (android.view.View) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r0 I:android.view.ViewPropertyAnimator) = (r0 I:android.view.View) android.view.View.animate():android.view.ViewPropertyAnimator type: VIRTUAL \l0x0014: INVOKE  (r0 I:android.view.ViewPropertyAnimator), (r4 I:float) android.view.ViewPropertyAnimator.translationZBy(float):android.view.ViewPropertyAnimator type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r3 I:android.support.v4.view.ViewPropertyAnimatorCompat) \l}"];
MethodNode[shape=record,label="{public android.support.v4.view.ViewPropertyAnimatorCompat android.support.v4.view.ViewPropertyAnimatorCompat.translationZBy((r3 'this' I:android.support.v4.view.ViewPropertyAnimatorCompat A[IMMUTABLE_TYPE, THIS]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

