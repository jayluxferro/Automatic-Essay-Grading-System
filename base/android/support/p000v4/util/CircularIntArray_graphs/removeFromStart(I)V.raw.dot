digraph "CFG forandroid.support.v4.util.CircularIntArray.removeFromStart(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r0 I:int) = (r1 I:android.support.v4.util.CircularIntArray) android.support.v4.util.CircularIntArray.size():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:int) = (r1 I:android.support.v4.util.CircularIntArray) android.support.v4.util.CircularIntArray.mHead int \l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l0x000c: IGET  (r2 I:int) = (r1 I:android.support.v4.util.CircularIntArray) android.support.v4.util.CircularIntArray.mCapacityBitmask int \l0x000e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l0x000f: IPUT  (r2 I:int), (r1 I:android.support.v4.util.CircularIntArray) android.support.v4.util.CircularIntArray.mHead int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: NEW_INSTANCE  (r2 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x0014: INVOKE  (r2 I:java.lang.ArrayIndexOutOfBoundsException) java.lang.ArrayIndexOutOfBoundsException.\<init\>():void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.CircularIntArray.removeFromStart((r1 'this' I:android.support.v4.util.CircularIntArray A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

