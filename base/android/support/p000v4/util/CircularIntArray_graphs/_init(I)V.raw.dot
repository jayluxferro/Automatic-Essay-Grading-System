digraph "CFG forandroid.support.v4.util.CircularIntArray.\<init\>(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r3 I:int) java.lang.Integer.bitCount(int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0012: INVOKE  (r3 I:int) = (r3 I:int) java.lang.Integer.highestOneBit(int):int type: STATIC \l0x0016: ARITH  (r3 I:int) = (r3 I:int) \<\< (r0 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: ARITH  (r0 I:int) = (r3 I:int) + (\-1 int) \l0x0019: IPUT  (r0 I:int), (r2 I:android.support.v4.util.CircularIntArray) android.support.v4.util.CircularIntArray.mCapacityBitmask int \l0x001b: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001d: IPUT  \l  (r3 I:int[])\l  (r2 I:android.support.v4.util.CircularIntArray)\l android.support.v4.util.CircularIntArray.mElements int[] \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0022: CONST_STR  (r0 I:java.lang.String) =  \"capacity must be \<= 2^30\" \l0x0024: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002a: CONST_STR  (r0 I:java.lang.String) =  \"capacity must be \>= 1\" \l0x002c: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.CircularIntArray.\<init\>((r2 'this' I:android.support.v4.util.CircularIntArray A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

