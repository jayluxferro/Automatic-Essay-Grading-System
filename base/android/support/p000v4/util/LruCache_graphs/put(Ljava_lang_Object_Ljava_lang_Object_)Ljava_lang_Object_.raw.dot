digraph "CFG forandroid.support.v4.util.LruCache.put(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0035 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\lSplitter:B:3:0x0005\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0005\l|0x0005: IGET  (r0 I:int) = (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.putCount int A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x0007: ARITH  (r0 I:int) = (r0 I:int) + (1 int) A[Catch:\{ all \-\> 0x0032 \}]\l0x0009: IPUT  (r0 I:int), (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.putCount int A[Catch:\{ all \-\> 0x0032 \}]\l0x000b: IGET  (r0 I:int) = (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.size int A[Catch:\{ all \-\> 0x0032 \}]\l0x000d: INVOKE  (r1 I:int) = \l  (r3 I:android.support.v4.util.LruCache)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l android.support.v4.util.LruCache.safeSizeOf(java.lang.Object, java.lang.Object):int type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) A[Catch:\{ all \-\> 0x0032 \}]\l0x0012: IPUT  (r0 I:int), (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.size int A[Catch:\{ all \-\> 0x0032 \}]\l0x0014: IGET  (r0 I:java.util.LinkedHashMap\<K, V\>) = (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.map java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0032 \}]\l0x0016: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.util.LinkedHashMap)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r1 I:int) = (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.size int A[Catch:\{ all \-\> 0x0032 \}]\l0x001e: INVOKE  (r2 I:int) = \l  (r3 I:android.support.v4.util.LruCache)\l  (r4 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l android.support.v4.util.LruCache.safeSizeOf(java.lang.Object, java.lang.Object):int type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l0x0022: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) A[Catch:\{ all \-\> 0x0032 \}]\l0x0023: IPUT  (r1 I:int), (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.size int A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: INVOKE  \l  (r3 I:android.support.v4.util.LruCache)\l  (r1 I:boolean)\l  (r4 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l android.support.v4.util.LruCache.entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r4 I:int) = (r3 I:android.support.v4.util.LruCache) android.support.v4.util.LruCache.maxSize int \l0x002e: INVOKE  (r3 I:android.support.v4.util.LruCache), (r4 I:int) android.support.v4.util.LruCache.trimToSize(int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: RETURN  (r0 I:V) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|ExcHandler: all null\lSplitter:B:3:0x0005\l|0x0032: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|SYNTHETIC\lSplitter:B:13:0x0033\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0033\l|0x0033: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0037: CONST_STR  (r5 I:java.lang.String) =  \"key == null \|\| value == null\" \l0x0039: INVOKE  \l  (r4 I:java.lang.NullPointerException)\l  (r5 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final V android.support.v4.util.LruCache.put((r3 'this' I:android.support.v4.util.LruCache A[IMMUTABLE_TYPE, THIS]), (r4 I:K A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:V A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TK;TV;)TV;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_16;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_12;
Node_14 -> Node_15;
Node_14 -> Node_12;
Node_16 -> Node_17;
}

