digraph "CFG forandroid.support.v4.util.Preconditions.checkArrayElementsNotNull([Ljava\/lang\/Object;Ljava\/lang\/String;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == null) goto L_0x0029\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|r1 = 0\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:1:0x0002, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0004\-\>B:6:0x000b\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r1 \>= r4.length) goto L_0x0028\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r4[r1] == null) goto L_0x000e\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|LOOP_END\lLOOP:0: B:2:0x0004\-\>B:6:0x000b\l|int r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|java.util.Locale r2 = java.util.Locale.US\ljava.lang.Object[] r3 = new java.lang.Object[]\{r5, java.lang.Integer.valueOf(r1)\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|throw new java.lang.NullPointerException(java.lang.String.format(r2, \"%s[%d] must not be null\", r3))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|RETURN\l|return r4\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r5)\lr0.append(\" must not be null\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|throw new java.lang.NullPointerException(r0.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static T[] android.support.v4.util.Preconditions.checkArrayElementsNotNull((r4v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;, Ljava\/lang\/String;, )[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_10 -> Node_11;
Node_12 -> Node_9;
Node_13 -> Node_7;
}

