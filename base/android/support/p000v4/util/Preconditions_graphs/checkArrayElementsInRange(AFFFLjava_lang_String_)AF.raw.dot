digraph "CFG forandroid.support.v4.util.Preconditions.checkArrayElementsInRange([FFFLjava\/lang\/String;)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r0 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \" must not be null\" \l0x000a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.Object) android.support.v4.util.Preconditions.checkNotNull(java.lang.Object, java.lang.Object):java.lang.Object type: STATIC \l0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: ARRAY_LENGTH  (r2 I:int) = (r8 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:16:0x0097 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: AGET  (r2 I:?[int, float]) = (r8 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001b: INVOKE  (r3 I:boolean) = (r2 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0078 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0023: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0024: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0025: CMP_G  (r7 I:int) = (r2 I:float), (r9 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0054 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: CMP_L  (r2 I:int) = (r2 I:float), (r10 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:10:0x0030 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: SGET  (r2 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0034: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0036: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0038: INVOKE  (r11 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x003c: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x003e: INVOKE  (r9 I:java.lang.Float) = (r9 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0042: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0044: INVOKE  (r9 I:java.lang.Float) = (r10 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0048: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x004a: CONST_STR  (r9 I:java.lang.String) =  \"%s[%d] is out of range of [%f, %f] (too high)\" \l0x004c: INVOKE  (r9 I:java.lang.String) = \l  (r2 I:java.util.Locale)\l  (r9 I:java.lang.String)\l  (r5 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0050: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|0x0053: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|0x0054: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0056: SGET  (r2 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0058: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x005a: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x005c: INVOKE  (r11 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0060: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0062: INVOKE  (r9 I:java.lang.Float) = (r9 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0066: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0068: INVOKE  (r9 I:java.lang.Float) = (r10 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x006c: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x006e: CONST_STR  (r9 I:java.lang.String) =  \"%s[%d] is out of range of [%f, %f] (too low)\" \l0x0070: INVOKE  (r9 I:java.lang.String) = \l  (r2 I:java.util.Locale)\l  (r9 I:java.lang.String)\l  (r5 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0074: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|0x0077: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0078|0x0078: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007a: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007c: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007f: INVOKE  (r9 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0082: CONST_STR  (r10 I:java.lang.String) =  \"[\" \l0x0084: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: INVOKE  (r9 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x008a: CONST_STR  (r10 I:java.lang.String) =  \"] must not be NaN\" \l0x008c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008f: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0093: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0096|0x0096: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|0x0097: RETURN  (r8 I:float[]) \l}"];
MethodNode[shape=record,label="{public static float[] android.support.v4.util.Preconditions.checkArrayElementsInRange((r8 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

