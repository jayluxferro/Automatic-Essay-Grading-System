digraph "CFG forandroid.support.v4.util.Preconditions.checkArrayElementsInRange([FFFLjava\/lang\/String;)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r11)\lr0.append(\" must not be null\")\lcheckNotNull(r8, r0.toString())\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:9:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0016\-\>B:9:0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r1 \>= r8.length) goto L_0x0097\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|r2 = r8[r1]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (java.lang.Float.isNaN(r2) != false) goto L_0x0078\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021}"];
Node_6 [shape=record,label="{6\:\ 0x0027|if ((r2 \> r9 ? 1 : (r2 == r9 ? 0 : \-1)) \< 0) goto L_0x0054\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029}"];
Node_8 [shape=record,label="{8\:\ 0x002b|if ((r2 \> r10 ? 1 : (r2 == r10 ? 0 : \-1)) \> 0) goto L_0x0030\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|LOOP_END\lLOOP:0: B:1:0x0016\-\>B:9:0x002d\l|int r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|java.util.Locale r2 = java.util.Locale.US\ljava.lang.Object[] r5 = new java.lang.Object[]\{r11, java.lang.Integer.valueOf(r1), java.lang.Float.valueOf(r9), java.lang.Float.valueOf(r10)\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|throw new java.lang.IllegalArgumentException(java.lang.String.format(r2, \"%s[%d] is out of range of [%f, %f] (too high)\", r5))\l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|java.util.Locale r2 = java.util.Locale.US\ljava.lang.Object[] r5 = new java.lang.Object[]\{r11, java.lang.Integer.valueOf(r1), java.lang.Float.valueOf(r9), java.lang.Float.valueOf(r10)\}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|throw new java.lang.IllegalArgumentException(java.lang.String.format(r2, \"%s[%d] is out of range of [%f, %f] (too low)\", r5))\l}"];
Node_14 [shape=record,label="{14\:\ 0x0078|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(r11)\lr9.append(\"[\")\lr9.append(r1)\lr9.append(\"] must not be NaN\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0096|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|RETURN\l|return r8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0097|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0030|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0078|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static float[] android.support.v4.util.Preconditions.checkArrayElementsInRange((r8v0 float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_17 -> Node_12;
Node_18 -> Node_16;
Node_19 -> Node_10;
Node_20 -> Node_14;
}

