digraph "CFG forandroid.support.v4.util.Preconditions.checkArgumentInRange(JJJLjava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0004: CMP_L  (r4 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CMP_L  (r4 I:int) = (r5 I:long), (r9 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r5 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000f: SGET  (r6 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0011: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0013: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0015: INVOKE  (r7 I:java.lang.Long) = (r7 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0019: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x001b: INVOKE  (r7 I:java.lang.Long) = (r9 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x001f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0021: CONST_STR  (r7 I:java.lang.String) =  \"%s is out of range of [%d, %d] (too high)\" \l0x0023: INVOKE  (r6 I:java.lang.String) = \l  (r6 I:java.util.Locale)\l  (r7 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0027: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002d: SGET  (r6 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x002f: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0031: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0033: INVOKE  (r7 I:java.lang.Long) = (r7 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0037: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0039: INVOKE  (r7 I:java.lang.Long) = (r9 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x003d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x003f: CONST_STR  (r7 I:java.lang.String) =  \"%s is out of range of [%d, %d] (too low)\" \l0x0041: INVOKE  (r6 I:java.lang.String) = \l  (r6 I:java.util.Locale)\l  (r7 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0045: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0048|0x0048: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static long android.support.v4.util.Preconditions.checkArgumentInRange((r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

