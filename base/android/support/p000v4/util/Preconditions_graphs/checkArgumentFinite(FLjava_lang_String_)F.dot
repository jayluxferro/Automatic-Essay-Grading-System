digraph "CFG forandroid.support.v4.util.Preconditions.checkArgumentFinite(FLjava\/lang\/String;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (java.lang.Float.isNaN(r1) != false) goto L_0x0024\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (java.lang.Float.isInfinite(r1) != false) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r2)\lr0.append(\" must not be infinite\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r2)\lr0.append(\" must not be NaN\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public static float android.support.v4.util.Preconditions.checkArgumentFinite((r1v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

