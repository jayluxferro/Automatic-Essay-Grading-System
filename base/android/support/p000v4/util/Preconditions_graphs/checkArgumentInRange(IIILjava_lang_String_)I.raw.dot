digraph "CFG forandroid.support.v4.util.Preconditions.checkArgumentInRange(IIILjava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r5 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:6:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r5 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r5 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000b: SGET  (r4 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x000d: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0011: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0015: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0017: INVOKE  (r6 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001b: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x001d: CONST_STR  (r6 I:java.lang.String) =  \"%s is out of range of [%d, %d] (too high)\" \l0x001f: INVOKE  (r6 I:java.lang.String) = \l  (r4 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0023: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0029: SGET  (r4 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x002b: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x002f: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0033: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0035: INVOKE  (r6 I:java.lang.Integer) = (r7 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0039: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x003b: CONST_STR  (r6 I:java.lang.String) =  \"%s is out of range of [%d, %d] (too low)\" \l0x003d: INVOKE  (r6 I:java.lang.String) = \l  (r4 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0041: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.util.Preconditions.checkArgumentInRange((r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

