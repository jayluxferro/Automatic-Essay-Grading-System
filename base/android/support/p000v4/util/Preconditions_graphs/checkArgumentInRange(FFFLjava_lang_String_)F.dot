digraph "CFG forandroid.support.v4.util.Preconditions.checkArgumentInRange(FFFLjava\/lang\/String;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (java.lang.Float.isNaN(r5) != false) goto L_0x004f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r5 \> r6 ? 1 : (r5 == r6 ? 0 : \-1)) \< 0) goto L_0x0031\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if ((r5 \> r7 ? 1 : (r5 == r7 ? 0 : \-1)) \> 0) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|RETURN\l|return r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|java.util.Locale r4 = java.util.Locale.US\ljava.lang.Object[] r3 = new java.lang.Object[]\{r8, java.lang.Float.valueOf(r6), java.lang.Float.valueOf(r7)\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|throw new java.lang.IllegalArgumentException(java.lang.String.format(r4, \"%s is out of range of [%f, %f] (too high)\", r3))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|java.util.Locale r4 = java.util.Locale.US\ljava.lang.Object[] r3 = new java.lang.Object[]\{r8, java.lang.Float.valueOf(r6), java.lang.Float.valueOf(r7)\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|throw new java.lang.IllegalArgumentException(java.lang.String.format(r4, \"%s is out of range of [%f, %f] (too low)\", r3))\l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|java.lang.StringBuilder r6 = new java.lang.StringBuilder()\lr6.append(r8)\lr6.append(\" must not be NaN\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|throw new java.lang.IllegalArgumentException(r6.toString())\l}"];
MethodNode[shape=record,label="{public static float android.support.v4.util.Preconditions.checkArgumentInRange((r5v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

