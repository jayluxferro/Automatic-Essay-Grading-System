digraph "CFG forandroid.support.v4.util.Preconditions.checkArgumentInRange(FFFLjava\/lang\/String;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r5 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0007: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000a: CMP_G  (r4 I:int) = (r5 I:float), (r6 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CMP_L  (r4 I:int) = (r5 I:float), (r7 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: RETURN  (r5 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0015: SGET  (r4 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0017: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0019: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x001b: INVOKE  (r6 I:java.lang.Float) = (r6 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x001f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0021: INVOKE  (r6 I:java.lang.Float) = (r7 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0025: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0027: CONST_STR  (r6 I:java.lang.String) =  \"%s is out of range of [%f, %f] (too high)\" \l0x0029: INVOKE  (r6 I:java.lang.String) = \l  (r4 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x002d: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0033: SGET  (r4 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0035: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0037: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0039: INVOKE  (r6 I:java.lang.Float) = (r6 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x003d: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x003f: INVOKE  (r6 I:java.lang.Float) = (r7 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0043: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0045: CONST_STR  (r6 I:java.lang.String) =  \"%s is out of range of [%f, %f] (too low)\" \l0x0047: INVOKE  (r6 I:java.lang.String) = \l  (r4 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x004b: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0051: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0053: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0056: INVOKE  (r6 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: CONST_STR  (r7 I:java.lang.String) =  \" must not be NaN\" \l0x005b: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005e: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0062: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|0x0065: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static float android.support.v4.util.Preconditions.checkArgumentInRange((r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

