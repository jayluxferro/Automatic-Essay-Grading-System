digraph "CFG forandroid.support.v4.util.Preconditions.checkCollectionNotEmpty(Ljava\/util\/Collection;Ljava\/lang\/String;)Ljava\/util\/Collection;" {
subgraph cluster_Region_1841866050 {
label = "R(1:(2:6|7)(1:(1:3)(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1648811324 {
label = "IF [B:0:0x0000] THEN: R(2:6|7) ELSE: R(1:(1:3)(2:4|5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r1 == null) goto L_0x0020\l}"];
subgraph cluster_Region_1536943058 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0020}"];
Node_7 [shape=record,label="{7\:\ 0x0036|throw new java.lang.NullPointerException(r2 + \" must not be null\")\l}"];
}
subgraph cluster_Region_2111344412 {
label = "R(1:(1:3)(2:4|5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1427294032 {
label = "IF [B:2:0x0006] THEN: R(1:3) ELSE: R(2:4|5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r1.isEmpty() == false) goto L_0x0008\l}"];
subgraph cluster_Region_23678963 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return r1\l}"];
}
subgraph cluster_Region_90749311 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x001f|throw new java.lang.IllegalArgumentException(r2 + \" is empty\")\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
MethodNode[shape=record,label="{public static java.util.Collection\<T\> android.support.v4.util.Preconditions.checkCollectionNotEmpty((r1v0 java.util.Collection\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Collection\<, TT;\>;, Ljava\/lang\/String;, ), Ljava\/util\/Collection\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_6 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_1 -> Node_2;
}

