digraph "CFG forandroid.support.v4.util.Pools.SimplePool.release(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r2 I:android.support.v4.util.Pools$SimplePool)\l  (r3 I:java.lang.Object)\l android.support.v4.util.Pools.SimplePool.isInPool(java.lang.Object):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0008: IGET  (r1 I:java.lang.Object[]) = (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPool java.lang.Object[] \l0x000a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r0 I:java.lang.Object[]) = (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPool java.lang.Object[] \l0x000f: IGET  (r1 I:int) = (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0011: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0013: IGET  (r3 I:int) = (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0015: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) \l0x0017: IPUT  (r3 I:int), (r2 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r3 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001e: CONST_STR  (r0 I:java.lang.String) =  \"Already in the pool!\" \l0x0020: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.util.Pools.SimplePool.release((r2 'this' I:android.support.v4.util.Pools$SimplePool A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

