digraph "CFG forandroid.support.v4.util.Pools.SimplePool.release(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1315199650 {
label = "R(1:(1:8)(1:(1:6)(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1535950133 {
label = "IF [B:1:0x0004] THEN: R(1:8) ELSE: R(1:(1:6)(2:4|5))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isInPool(r3) != false) goto L_0x001c\l}"];
subgraph cluster_Region_1423497835 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0023|throw new java.lang.IllegalStateException(\"Already in the pool!\")\l}"];
}
subgraph cluster_Region_1558715734 {
label = "R(1:(1:6)(2:4|5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_817229091 {
label = "IF [B:3:0x000b] THEN: R(1:6) ELSE: R(2:4|5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r2.mPoolSize \>= r2.mPool.length) goto L_0x001a\l}"];
subgraph cluster_Region_242125589 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\l|return false\l}"];
}
subgraph cluster_Region_485950257 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|r2.mPool[r2.mPoolSize] = r3\lr2.mPoolSize++\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|RETURN\l|return true\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c}"];
MethodNode[shape=record,label="{public boolean android.support.v4.util.Pools.SimplePool.release((r2v0 'this' android.support.v4.util.Pools$SimplePool A[IMMUTABLE_TYPE, THIS]), (r3v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_8;
}

