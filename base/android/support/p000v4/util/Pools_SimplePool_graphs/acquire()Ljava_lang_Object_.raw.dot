digraph "CFG forandroid.support.v4.util.Pools.SimplePool.acquire()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0009: IGET  (r2 I:java.lang.Object[]) = (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPool java.lang.Object[] \l0x000b: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000d: IGET  (r3 I:java.lang.Object[]) = (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPool java.lang.Object[] \l0x000f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0011: IGET  (r0 I:int) = (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l0x0013: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0015: IPUT  (r0 I:int), (r4 I:android.support.v4.util.Pools$SimplePool) android.support.v4.util.Pools.SimplePool.mPoolSize int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: RETURN  (r2 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN  (r1 I:T) \l}"];
MethodNode[shape=record,label="{public T android.support.v4.util.Pools.SimplePool.acquire((r4 'this' I:android.support.v4.util.Pools$SimplePool A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

