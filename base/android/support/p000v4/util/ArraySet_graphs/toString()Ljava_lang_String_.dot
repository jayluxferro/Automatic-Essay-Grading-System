digraph "CFG forandroid.support.v4.util.ArraySet.toString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isEmpty() == false) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return \"\{\}\"\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|java.lang.StringBuilder r0 = new java.lang.StringBuilder(r3.mSize * 14)\lr0.append('\{')\lr1 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|LOOP_START\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v6 int) binds: [B:3:0x0009, B:12:0x0032] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0018\-\>B:12:0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r1 \>= r3.mSize) goto L_0x0035\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if (r1 \<= 0) goto L_0x0023\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|r0.append(\", \")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|java.lang.Object r2 = valueAt(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|if (r2 == r3) goto L_0x002d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|r0.append(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|r0.append(\"(this Set)\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|LOOP_END\lLOOP:0: B:4:0x0018\-\>B:12:0x0032\l|int r1 = r1 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|r0.append('\}')\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|return r0.toString()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String android.support.v4.util.ArraySet.toString((r3v0 'this' android.support.v4.util.ArraySet A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_17;
Node_11 -> Node_16;
Node_12 -> Node_4;
Node_13 -> Node_14;
Node_15 -> Node_13;
Node_16 -> Node_12;
Node_17 -> Node_12;
}

