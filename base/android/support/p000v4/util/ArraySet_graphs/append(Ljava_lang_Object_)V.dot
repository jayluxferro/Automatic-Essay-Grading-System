digraph "CFG forandroid.support.v4.util.ArraySet.append(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r4.mSize\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5 != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|int r1 = r5.hashCode()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r1 \l  PHI: (r1v0 int) = (r1v2 int), (r1v3 int) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r0 \>= r4.mHashes.length) goto L_0x002a\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r0 \<= 0) goto L_0x001d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x0017|if (r4.mHashes[r0 + \-1] \<= r1) goto L_0x001d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|add(r5)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|r4.mSize = r0 + 1\lr4.mHashes[r0] = r1\lr4.mArray[r0] = r5\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a}"];
Node_14 [shape=record,label="{14\:\ 0x0031|throw new java.lang.IllegalStateException(\"Array is full\")\l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.ArraySet.append((r4v0 'this' android.support.v4.util.ArraySet A[IMMUTABLE_TYPE, THIS]), (r5v0 E A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TE;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

