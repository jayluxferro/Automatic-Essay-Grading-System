digraph "CFG forandroid.support.v4.util.ContainerHelpers.binarySearch([JIJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: ARITH  (r1 I:int) = (r0 I:int) + (r5 I:int) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \>\>\> (1 int) \l0x0009: AGET  (r2 I:?[long, double]) = (r4 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x000b: CMP_L  (r2 I:int) = (r2 I:long), (r6 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0011: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0017: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r1 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: NOT  (r4 I:int) = (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{static int android.support.v4.util.ContainerHelpers.binarySearch((r4 I:long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_8 -> Node_9;
}

