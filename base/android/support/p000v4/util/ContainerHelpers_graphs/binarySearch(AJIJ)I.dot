digraph "CFG forandroid.support.v4.util.ContainerHelpers.binarySearch([JIJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r5 = r5 + \-1\lr0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r0 r5 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:10:0x0003] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:0:0x0000, B:10:0x0003] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:10:0x0003\l|if (r0 \> r5) goto L_0x001a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|int r1 = (r0 + r5) \>\>\> 1\lint r2 = (r4[r1] \> r6 ? 1 : (r4[r1] == r6 ? 0 : \-1))\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r2 \>= 0) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r0 = r1 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r2 \<= 0) goto L_0x0019\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|r5 = r1 + \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|RETURN\l|return r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a}"];
Node_9 [shape=record,label="{9\:\ 0x001b|RETURN\l|return ~r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|LOOP_END\lSYNTHETIC\lPHI: r0 r5 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:14:0x0003, B:13:0x0003] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 int) = (r5v4 int), (r5v2 int) binds: [B:14:0x0003, B:13:0x0003] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:10:0x0003\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0003|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int android.support.v4.util.ContainerHelpers.binarySearch((r4v0 long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_14;
Node_8 -> Node_9;
Node_10 -> Node_1;
Node_11 -> Node_8;
Node_12 -> Node_7;
Node_13 -> Node_10;
Node_14 -> Node_10;
}

