digraph "CFG forandroid.support.v4.util.MapCollections.getEntrySet()Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v4.util.MapCollections\<K, V\>$EntrySet) = (r1 I:android.support.v4.util.MapCollections) android.support.v4.util.MapCollections.mEntrySet android.support.v4.util.MapCollections$EntrySet \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:android.support.v4.util.MapCollections$EntrySet) =  android.support.v4.util.MapCollections$EntrySet \l0x0006: INVOKE  \l  (r0 I:android.support.v4.util.MapCollections$EntrySet)\l  (r1 I:android.support.v4.util.MapCollections)\l android.support.v4.util.MapCollections.EntrySet.\<init\>(android.support.v4.util.MapCollections):void type: DIRECT \l0x0009: IPUT  \l  (r0 I:android.support.v4.util.MapCollections\<K, V\>$EntrySet)\l  (r1 I:android.support.v4.util.MapCollections)\l android.support.v4.util.MapCollections.mEntrySet android.support.v4.util.MapCollections$EntrySet \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:android.support.v4.util.MapCollections\<K, V\>$EntrySet) = (r1 I:android.support.v4.util.MapCollections) android.support.v4.util.MapCollections.mEntrySet android.support.v4.util.MapCollections$EntrySet \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r0 I:java.util.Set\<java.util.Map$Entry\<K, V\>\>) \l}"];
MethodNode[shape=record,label="{public java.util.Set\<java.util.Map$Entry\<K, V\>\> android.support.v4.util.MapCollections.getEntrySet((r1 'this' I:android.support.v4.util.MapCollections A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Set\<, Ljava\/util\/Map$Entry\<, TK;TV;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

