digraph "CFG forandroid.support.v4.util.LogWriter.write([CII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: ARITH  (r1 I:int) = (r5 I:int) + (r0 I:int) \l0x0005: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r3 I:android.support.v4.util.LogWriter) android.support.v4.util.LogWriter.flushBuilder():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r2 I:java.lang.StringBuilder) = (r3 I:android.support.v4.util.LogWriter) android.support.v4.util.LogWriter.mBuilder java.lang.StringBuilder \l0x0011: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.LogWriter.write((r3 'this' I:android.support.v4.util.LogWriter A[IMMUTABLE_TYPE, THIS]), (r4 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

