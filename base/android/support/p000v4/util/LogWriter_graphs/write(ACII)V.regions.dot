digraph "CFG forandroid.support.v4.util.LogWriter.write([CII)V" {
subgraph cluster_Region_472368512 {
label = "R(2:0|(3:2|(1:4)(1:5)|6))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_941137661 {
label = "LOOP:0: (3:2|(1:4)(1:5)|6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:6:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:6:0x0014\l|if (r0 \< r6) goto L_0x0003\l}"];
subgraph cluster_Region_626117644 {
label = "R(3:2|(1:4)(1:5)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|char char r1 = r4[r5 + r0]\l}"];
subgraph cluster_IfRegion_969027304 {
label = "IF [B:3:0x0009] THEN: R(1:4) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r1 == 10) goto L_0x000b\l}"];
subgraph cluster_Region_132798728 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|flushBuilder()\l}"];
}
subgraph cluster_Region_468445077 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|r3.mBuilder.append(r1)\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0014|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:6:0x0014\l|r0++\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0014|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.LogWriter.write((r3v0 'this' android.support.v4.util.LogWriter A[IMMUTABLE_TYPE, THIS]), (r4v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

