digraph "CFG forandroid.support.v4.util.SparseArrayCompat.append(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mSize == 0) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r7 \> r6.mKeys[r6.mSize + \-1]) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|put(r7, r8)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r6.mGarbage == false) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001b|if (r6.mSize \< r6.mKeys.length) goto L_0x0020\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|m11gc()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|int r0 = r6.mSize\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|if (r0 \< r6.mKeys.length) goto L_0x0046\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|int r1 = android.support.p000v4.util.ContainerHelpers.idealIntArraySize(r0 + 1)\lint[] r2 = new int[r1]\ljava.lang.Object[] r1 = new java.lang.Object[r1]\ljava.lang.System.arraycopy(r6.mKeys, 0, r2, 0, r6.mKeys.length)\ljava.lang.System.arraycopy(r6.mValues, 0, r1, 0, r6.mValues.length)\lr6.mKeys = r2\lr6.mValues = r1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|r6.mKeys[r0] = r7\lr6.mValues[r0] = r8\lr6.mSize = r0 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.SparseArrayCompat.append((r6v0 'this' android.support.v4.util.SparseArrayCompat A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 E A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ITE;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

