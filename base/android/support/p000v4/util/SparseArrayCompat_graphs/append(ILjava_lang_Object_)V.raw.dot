digraph "CFG forandroid.support.v4.util.SparseArrayCompat.append(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0006: IGET  (r1 I:int) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mSize int \l0x0008: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x000a: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r7 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  \l  (r6 I:android.support.v4.util.SparseArrayCompat)\l  (r7 I:int)\l  (r8 I:java.lang.Object)\l android.support.v4.util.SparseArrayCompat.put(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r0 I:boolean) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mGarbage boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IGET  (r0 I:int) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mSize int \l0x0018: IGET  (r1 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x001a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: INVOKE  (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.gc():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IGET  (r0 I:int) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mSize int \l0x0022: IGET  (r1 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0024: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:14:0x0046 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: ARITH  (r1 I:int) = (r0 I:int) + (1 int) \l0x0029: INVOKE  (r1 I:int) = (r1 I:int) android.support.v4.util.ContainerHelpers.idealIntArraySize(int):int type: STATIC \l0x002d: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x002f: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0031: IGET  (r3 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0033: IGET  (r4 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0035: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0036: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: INVOKE  \l  (r3 I:java.lang.Object)\l  (r5 I:int)\l  (r2 I:java.lang.Object)\l  (r5 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x003a: IGET  (r3 I:java.lang.Object[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mValues java.lang.Object[] \l0x003c: IGET  (r4 I:java.lang.Object[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mValues java.lang.Object[] \l0x003e: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x003f: INVOKE  \l  (r3 I:java.lang.Object)\l  (r5 I:int)\l  (r1 I:java.lang.Object)\l  (r5 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0042: IPUT  \l  (r2 I:int[])\l  (r6 I:android.support.v4.util.SparseArrayCompat)\l android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0044: IPUT  \l  (r1 I:java.lang.Object[])\l  (r6 I:android.support.v4.util.SparseArrayCompat)\l android.support.v4.util.SparseArrayCompat.mValues java.lang.Object[] \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IGET  (r1 I:int[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mKeys int[] \l0x0048: APUT  \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x004a: IGET  (r7 I:java.lang.Object[]) = (r6 I:android.support.v4.util.SparseArrayCompat) android.support.v4.util.SparseArrayCompat.mValues java.lang.Object[] \l0x004c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x004e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0050: IPUT  \l  (r0 I:int)\l  (r6 I:android.support.v4.util.SparseArrayCompat)\l android.support.v4.util.SparseArrayCompat.mSize int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.SparseArrayCompat.append((r6 'this' I:android.support.v4.util.SparseArrayCompat A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:E A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ITE;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

