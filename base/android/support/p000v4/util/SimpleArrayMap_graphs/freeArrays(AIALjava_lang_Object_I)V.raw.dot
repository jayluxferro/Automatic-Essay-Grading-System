digraph "CFG forandroid.support.v4.util.SimpleArrayMap.freeArrays([I[Ljava\/lang\/Object;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0006: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST_CLASS  (r0 I:java.lang.Class\<android.support.v4.util.ArrayMap\>) =  android.support.v4.util.ArrayMap.class \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|SYNTHETIC\lSplitter:B:4:0x000e\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000e\l|0x000e: SGET  (r6 I:int) =  android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch:\{ all \-\> 0x002b \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r6 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:11:0x0029 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: SGET  (r4 I:java.lang.Object[]) =  android.support.v4.util.SimpleArrayMap.mTwiceBaseCache java.lang.Object[] A[Catch:\{ all \-\> 0x002b \}]\l0x0014: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002b \}]\l0x0016: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002b \}]\l0x0018: ARITH  (r7 I:int) = (r9 I:int) \<\< (1 int) A[Catch:\{ all \-\> 0x002b \}]\l0x001a: ARITH  (r7 I:int) = (r7 I:int) \- (r5 I:int) A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r7 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:10:0x0022 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002b \}]\l0x001f: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x002b \}]\l0x0021: GOTO  \-\> 0x001b A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: SPUT  (r8 I:java.lang.Object[]) android.support.v4.util.SimpleArrayMap.mTwiceBaseCache java.lang.Object[] A[Catch:\{ all \-\> 0x002b \}]\l0x0024: SGET  (r7 I:int) =  android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch:\{ all \-\> 0x002b \}]\l0x0026: ARITH  (r7 I:int) = (r7 I:int) + (r5 I:int) A[Catch:\{ all \-\> 0x002b \}]\l0x0027: SPUT  (r7 I:int) android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: GOTO  \-\> 0x0055 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|ExcHandler: all null\lSplitter:B:4:0x000e\l|0x002b: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002b \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l0x002f: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0055 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: CONST_CLASS  (r0 I:java.lang.Class\<android.support.v4.util.ArrayMap\>) =  android.support.v4.util.ArrayMap.class \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0035|SYNTHETIC\lSplitter:B:20:0x0035\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0035\l|0x0035: SGET  (r6 I:int) =  android.support.v4.util.SimpleArrayMap.mBaseCacheSize int A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0037|0x0037: IF  (r6 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:27:0x0050 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0039|0x0039: SGET  (r4 I:java.lang.Object[]) =  android.support.v4.util.SimpleArrayMap.mBaseCache java.lang.Object[] A[Catch:\{ all \-\> 0x0052 \}]\l0x003b: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x003d: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x003f: ARITH  (r7 I:int) = (r9 I:int) \<\< (1 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x0041: ARITH  (r7 I:int) = (r7 I:int) \- (r5 I:int) A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|0x0042: IF  (r7 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:26:0x0049 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0044|0x0044: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x0046: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x0048: GOTO  \-\> 0x0042 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0049|0x0049: SPUT  (r8 I:java.lang.Object[]) android.support.v4.util.SimpleArrayMap.mBaseCache java.lang.Object[] A[Catch:\{ all \-\> 0x0052 \}]\l0x004b: SGET  (r7 I:int) =  android.support.v4.util.SimpleArrayMap.mBaseCacheSize int A[Catch:\{ all \-\> 0x0052 \}]\l0x004d: ARITH  (r7 I:int) = (r7 I:int) + (r5 I:int) A[Catch:\{ all \-\> 0x0052 \}]\l0x004e: SPUT  (r7 I:int) android.support.v4.util.SimpleArrayMap.mBaseCacheSize int A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0051|0x0051: GOTO  \-\> 0x0055 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0052|ExcHandler: all null\lSplitter:B:20:0x0035\l|0x0052: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0053|0x0053: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0054|0x0054: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0055|0x0055: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.v4.util.SimpleArrayMap.freeArrays((r7 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_32;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_32;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_24;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31;
}

