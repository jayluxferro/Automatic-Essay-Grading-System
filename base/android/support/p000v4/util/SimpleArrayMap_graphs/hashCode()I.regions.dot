digraph "CFG forandroid.support.v4.util.SimpleArrayMap.hashCode()I" {
subgraph cluster_Region_1831023559 {
label = "R(3:0|(2:2|6)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int[] int[] r0 = r9.mHashes\ljava.lang.Object[] java.lang.Object[] r1 = r9.mArray\lint int r2 = r9.mSize\lint r3 = 0\lint r5 = 1\lint r6 = 0\l}"];
subgraph cluster_LoopRegion_2059173023 {
label = "LOOP:0: (2:2|6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r3 r5 r6 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:0:0x0000, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:0:0x0000, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:0:0x0000, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:6:0x0019\l|if (r3 \< r2) goto L_0x000d\l}"];
subgraph cluster_Region_1124747344 {
label = "R(2:2|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000d|java.lang.Object r7 = r1[r5]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|LOOP_END\lPHI: r7 \l  PHI: (r7v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:6:0x0019\l|r6 += (r7 == null ? 0 : r7.hashCode()) ^ r0[r3]\lr3++\lr5 += 2\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0020|RETURN\l|return r6\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0015}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0020|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int android.support.v4.util.SimpleArrayMap.hashCode((r9v0 'this' android.support.v4.util.SimpleArrayMap A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_6 -> Node_1;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

