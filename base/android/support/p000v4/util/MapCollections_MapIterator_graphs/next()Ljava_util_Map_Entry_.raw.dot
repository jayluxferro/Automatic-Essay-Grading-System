digraph "CFG forandroid.support.v4.util.MapCollections.MapIterator.next()Ljava\/util\/Map$Entry;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.mIndex int \l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000a: IPUT  \l  (r0 I:int)\l  (r2 I:android.support.v4.util.MapCollections$MapIterator)\l android.support.v4.util.MapCollections.MapIterator.mIndex int \l0x000c: IPUT  \l  (r1 I:boolean)\l  (r2 I:android.support.v4.util.MapCollections$MapIterator)\l android.support.v4.util.MapCollections.MapIterator.mEntryValid boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r2 I:java.util.Map$Entry\<K, V\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0011: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.Map$Entry\<K, V\> android.support.v4.util.MapCollections.MapIterator.next((r2 'this' I:android.support.v4.util.MapCollections$MapIterator A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Map$Entry\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

