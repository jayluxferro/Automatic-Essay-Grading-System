digraph "CFG forandroid.support.v4.util.MapCollections.MapIterator.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r5 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.mEntryValid boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.support.v4.util.MapCollections) = (r5 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.this$0 android.support.v4.util.MapCollections \l0x0006: IGET  (r1 I:int) = (r5 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.mIndex int \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.v4.util.MapCollections)\l  (r1 I:int)\l  (r2 I:int)\l android.support.v4.util.MapCollections.colGetEntry(int, int):java.lang.Object type: VIRTUAL \l0x000d: IGET  (r1 I:android.support.v4.util.MapCollections) = (r5 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.this$0 android.support.v4.util.MapCollections \l0x000f: IGET  (r3 I:int) = (r5 I:android.support.v4.util.MapCollections$MapIterator) android.support.v4.util.MapCollections.MapIterator.mIndex int \l0x0011: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0012: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:android.support.v4.util.MapCollections)\l  (r3 I:int)\l  (r4 I:int)\l android.support.v4.util.MapCollections.colGetEntry(int, int):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: INVOKE  (r2 I:int) = (r1 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: RETURN  (r0 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"This container does not support retaining Map.Entry objects\" \l0x002b: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int android.support.v4.util.MapCollections.MapIterator.hashCode((r5 'this' I:android.support.v4.util.MapCollections$MapIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

