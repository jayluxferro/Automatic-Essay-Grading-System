digraph "CFG forandroid.support.v4.util.AtomicFile.readFully()[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.io.FileInputStream) = (r6 I:android.support.v4.util.AtomicFile) android.support.v4.util.AtomicFile.openRead():java.io.FileInputStream type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0004\l|0x0004: INVOKE  (r1 I:int) = (r0 I:java.io.FileInputStream) java.io.FileInputStream.available():int type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0008: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x0029 \}]\l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: ARRAY_LENGTH  (r4 I:int) = (r1 I:?[]) A[Catch:\{ all \-\> 0x0029 \}]\l0x000d: ARITH  (r4 I:int) = (r4 I:int) \- (r3 I:int) A[Catch:\{ all \-\> 0x0029 \}]\l0x000e: INVOKE  (r4 I:int) = \l  (r0 I:java.io.FileInputStream)\l  (r1 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l java.io.FileInputStream.read(byte[], int, int):int type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0011: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: INVOKE  (r0 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r1 I:byte[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|SYNTHETIC\lSplitter:B:8:0x0019\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0019\l|0x0019: INVOKE  (r4 I:int) = (r0 I:java.io.FileInputStream) java.io.FileInputStream.available():int type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x001d: ARRAY_LENGTH  (r5 I:int) = (r1 I:?[]) A[Catch:\{ all \-\> 0x0029 \}]\l0x001e: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r4 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:3:0x000c A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) A[Catch:\{ all \-\> 0x0029 \}]\l0x0022: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x0029 \}]\l0x0024: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r4 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0004\l|0x0029: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: INVOKE  (r0 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public byte[] android.support.v4.util.AtomicFile.readFully((r6 'this' I:android.support.v4.util.AtomicFile A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_3;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_3;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

