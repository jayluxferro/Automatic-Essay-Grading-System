digraph "CFG forandroid.support.v4.util.AtomicFile.finishWrite(Ljava\/io\/FileOutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r3 I:java.io.FileOutputStream) android.support.v4.util.AtomicFile.sync(java.io.FileOutputStream):boolean type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: INVOKE  (r3 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x000e \}, TRY_ENTER]\l0x0008: IGET  (r3 I:java.io.File) = (r2 I:android.support.v4.util.AtomicFile) android.support.v4.util.AtomicFile.mBackupName java.io.File A[Catch:\{ IOException \-\> 0x000e \}]\l0x000a: INVOKE  (r3 I:java.io.File) java.io.File.delete():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|ExcHandler: IOException null\lSplitter:B:2:0x0005\l|0x000e: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST_STR  (r0 I:java.lang.String) =  \"AtomicFile\" \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"finishWrite: Got exception:\" \l0x0013: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.util.AtomicFile.finishWrite((r2 'this' I:android.support.v4.util.AtomicFile A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.FileOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_5;
Node_3 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

