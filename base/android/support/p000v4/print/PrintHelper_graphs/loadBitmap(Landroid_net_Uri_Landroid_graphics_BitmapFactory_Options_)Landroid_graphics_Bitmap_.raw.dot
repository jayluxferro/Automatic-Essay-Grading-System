digraph "CFG forandroid.support.v4.print.PrintHelper.loadBitmap(Landroid\/net\/Uri;Landroid\/graphics\/BitmapFactory$Options;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0037 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:android.content.Context) = (r2 I:android.support.v4.print.PrintHelper) android.support.v4.print.PrintHelper.mContext android.content.Context \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0037 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|SYNTHETIC\lSplitter:B:4:0x0007\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0007\l|0x0007: IGET  (r1 I:android.content.Context) = (r2 I:android.support.v4.print.PrintHelper) android.support.v4.print.PrintHelper.mContext android.content.Context A[Catch:\{ all \-\> 0x0027 \}, TRY_ENTER]\l0x0009: INVOKE  (r1 I:android.content.ContentResolver) = (r1 I:android.content.Context) android.content.Context.getContentResolver():android.content.ContentResolver type: VIRTUAL A[Catch:\{ all \-\> 0x0027 \}]\l0x000d: INVOKE  (r3 I:java.io.InputStream) = \l  (r1 I:android.content.ContentResolver)\l  (r3 I:android.net.Uri)\l android.content.ContentResolver.openInputStream(android.net.Uri):java.io.InputStream type: VIRTUAL A[Catch:\{ all \-\> 0x0027 \}]\l0x0010: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lSplitter:B:6:0x0011\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0011\l|0x0011: INVOKE  (r4 I:android.graphics.Bitmap) = \l  (r3 I:java.io.InputStream)\l  (r0 I:android.graphics.Rect)\l  (r4 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC A[Catch:\{ all \-\> 0x0024 \}, TRY_ENTER]\l0x0014: NOP   A[TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0023 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\lSplitter:B:9:0x0017\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0017\l|0x0017: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x001b \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|ExcHandler: IOException null\lSplitter:B:9:0x0017\l|0x001b: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: CONST_STR  (r0 I:java.lang.String) =  \"PrintHelper\" \l0x001e: CONST_STR  (r1 I:java.lang.String) =  \"close fail \" \l0x0020: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: RETURN  (r4 I:android.graphics.Bitmap) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|ExcHandler: all null\lSplitter:B:6:0x0011\l|0x0024: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|ExcHandler: all null\lSplitter:B:4:0x0007\l|0x0027: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0036 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|SYNTHETIC\lSplitter:B:19:0x002a\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x002a\l|0x002a: INVOKE  (r0 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x002e|ExcHandler: IOException null\lSplitter:B:19:0x002a\l|0x002e: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_23 [shape=record,label="{23\:\ 0x002f|0x002f: CONST_STR  (r0 I:java.lang.String) =  \"PrintHelper\" \l0x0031: CONST_STR  (r1 I:java.lang.String) =  \"close fail \" \l0x0033: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x0036|0x0036: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0037|0x0037: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0039: CONST_STR  (r4 I:java.lang.String) =  \"bad argument to loadBitmap\" \l0x003b: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x003e|0x003e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private android.graphics.Bitmap android.support.v4.print.PrintHelper.loadBitmap((r2 'this' I:android.support.v4.print.PrintHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.BitmapFactory$Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.FileNotFoundException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_25;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_10 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_20 -> Node_22;
Node_20 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

