digraph "CFG forandroid.support.v4.hardware.fingerprint.FingerprintManagerCompat.unwrapCryptoObject(Landroid\/hardware\/fingerprint\/FingerprintManager$CryptoObject;)Landroid\/support\/v4\/hardware\/fingerprint\/FingerprintManagerCompat$CryptoObject;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:javax.crypto.Cipher) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getCipher():javax.crypto.Cipher type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject \l0x000c: INVOKE  (r2 I:javax.crypto.Cipher) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getCipher():javax.crypto.Cipher type: VIRTUAL \l0x0010: INVOKE  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l  (r2 I:javax.crypto.Cipher)\l android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(javax.crypto.Cipher):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r1 I:java.security.Signature) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getSignature():java.security.Signature type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject \l0x001c: INVOKE  (r2 I:java.security.Signature) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getSignature():java.security.Signature type: VIRTUAL \l0x0020: INVOKE  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l  (r2 I:java.security.Signature)\l android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(java.security.Signature):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: RETURN  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: INVOKE  (r1 I:javax.crypto.Mac) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getMac():javax.crypto.Mac type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject \l0x002c: INVOKE  (r2 I:javax.crypto.Mac) = \l  (r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)\l android.hardware.fingerprint.FingerprintManager.CryptoObject.getMac():javax.crypto.Mac type: VIRTUAL \l0x0030: INVOKE  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l  (r2 I:javax.crypto.Mac)\l android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(javax.crypto.Mac):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: RETURN  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: RETURN  \l  (r0 I:android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)\l \l}"];
MethodNode[shape=record,label="{static android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject android.support.v4.hardware.fingerprint.FingerprintManagerCompat.unwrapCryptoObject((r2 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RequiresApi, \{value=23\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
}

