digraph "CFG forandroid.support.v4.text.PrecomputedTextCompat.getSpans(IILjava\/lang\/Class;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (28 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.text.PrecomputedText) = (r2 I:android.support.v4.text.PrecomputedTextCompat) android.support.v4.text.PrecomputedTextCompat.mWrapped android.text.PrecomputedText \l0x0008: INVOKE  (r3 I:java.lang.Object[]) = \l  (r0 I:android.text.PrecomputedText)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:java.lang.Class)\l android.text.PrecomputedText.getSpans(int, int, java.lang.Class):java.lang.Object[] type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r3 I:T[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r0 I:android.text.Spannable) = (r2 I:android.support.v4.text.PrecomputedTextCompat) android.support.v4.text.PrecomputedTextCompat.mText android.text.Spannable \l0x000f: INVOKE  (r3 I:java.lang.Object[]) = \l  (r0 I:android.text.Spannable)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:java.lang.Class)\l android.text.Spannable.getSpans(int, int, java.lang.Class):java.lang.Object[] type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r3 I:T[]) \l}"];
MethodNode[shape=record,label="{public T[] android.support.v4.text.PrecomputedTextCompat.getSpans((r2 'this' I:android.support.v4.text.PrecomputedTextCompat A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(II, Ljava\/lang\/Class\<, TT;\>;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

