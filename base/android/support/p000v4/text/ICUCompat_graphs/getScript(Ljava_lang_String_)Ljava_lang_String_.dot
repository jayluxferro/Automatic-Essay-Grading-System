digraph "CFG forandroid.support.v4.text.ICUCompat.getScript(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x0014 \}\lSplitter:B:1:0x0001\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x0014 \}\l|if (sGetScriptMethod == null) goto L_0x0021     \/\/ Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x0014 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|Catch:\{ IllegalAccessException \-\> 0x001b, InvocationTargetException \-\> 0x0014 \}\l|java.lang.Object[] r1 = new java.lang.Object[]\{r3\}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|RETURN\l|return (java.lang.String) sGetScriptMethod.invoke((java.lang.Object) null, r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|ExcHandler: InvocationTargetException (r3v2 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.lang.reflect.InvocationTargetException r3 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|android.util.Log.w(TAG, r3)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|ExcHandler: IllegalAccessException (r3v1 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.lang.IllegalAccessException r3 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|android.util.Log.w(TAG, r3)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static java.lang.String android.support.v4.text.ICUCompat.getScript((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

