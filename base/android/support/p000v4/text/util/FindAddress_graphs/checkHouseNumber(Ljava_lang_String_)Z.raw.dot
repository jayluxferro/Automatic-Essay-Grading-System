digraph "CFG forandroid.support.v4.text.util.FindAddress.checkHouseNumber(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: INVOKE  (r3 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r3 I:char) = (r4 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000d: INVOKE  (r3 I:boolean) = (r3 I:char) java.lang.Character.isDigit(char):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  (r0 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: SGET  (r1 I:java.util.regex.Pattern) =  android.support.v4.text.util.FindAddress.sSuffixedNumberRe java.util.regex.Pattern \l0x001e: INVOKE  (r4 I:java.util.regex.Matcher) = \l  (r1 I:java.util.regex.Pattern)\l  (r4 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0022: INVOKE  (r1 I:boolean) = (r4 I:java.util.regex.Matcher) java.util.regex.Matcher.find():boolean type: VIRTUAL \l0x0026: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x007d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: INVOKE  (r1 I:java.lang.String) = (r4 I:java.util.regex.Matcher), (r2 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x002d: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0035: INVOKE  (r4 I:java.lang.String) = (r4 I:java.util.regex.Matcher), (r0 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0039: INVOKE  (r0 I:java.util.Locale) =  java.util.Locale.getDefault():java.util.Locale type: STATIC \l0x003d: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL \l0x0041: ARITH  (r0 I:int) = (r1 I:int) % (10 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x006d, 0x005d, 0x004d] \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: CONST_STR  (r0 I:java.lang.String) =  \"th\" \l0x0048: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: RETURN  (r4 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: ARITH  (r1 I:int) = (r1 I:int) % (100 int) \l0x004f: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|0x0051: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0056 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: CONST_STR  (r0 I:java.lang.String) =  \"th\" \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: CONST_STR  (r0 I:java.lang.String) =  \"rd\" \l}"];
Node_23 [shape=record,label="{23\:\ 0x0058|0x0058: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|0x005c: RETURN  (r4 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005d|0x005d: ARITH  (r1 I:int) = (r1 I:int) % (100 int) \l0x005f: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0066 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|0x0063: CONST_STR  (r0 I:java.lang.String) =  \"th\" \l}"];
Node_28 [shape=record,label="{28\:\ 0x0066|0x0066: CONST_STR  (r0 I:java.lang.String) =  \"nd\" \l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|0x0068: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x006c|0x006c: RETURN  (r4 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006d|0x006d: ARITH  (r1 I:int) = (r1 I:int) % (100 int) \l0x006f: CONST  (r0 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0071|0x0071: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0076 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0073|0x0073: CONST_STR  (r0 I:java.lang.String) =  \"th\" \l}"];
Node_34 [shape=record,label="{34\:\ 0x0076|0x0076: CONST_STR  (r0 I:java.lang.String) =  \"st\" \l}"];
Node_35 [shape=record,label="{35\:\ 0x0078|0x0078: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x007c|0x007c: RETURN  (r4 I:boolean) \l}"];
Node_37 [shape=record,label="{37\:\ 0x007d|0x007d: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean android.support.v4.text.util.FindAddress.checkHouseNumber((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_37;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_16 -> Node_25;
Node_16 -> Node_31;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36;
}

