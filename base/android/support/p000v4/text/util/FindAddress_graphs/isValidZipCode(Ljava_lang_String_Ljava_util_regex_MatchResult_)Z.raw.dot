digraph "CFG forandroid.support.v4.text.util.FindAddress.isValidZipCode(Ljava\/lang\/String;Ljava\/util\/regex\/MatchResult;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:int) = (r4 I:java.util.regex.MatchResult) java.util.regex.MatchResult.groupCount():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: ARITH  (r2 I:int) = (r1 I:int) + (\-1 int) \l0x000c: INVOKE  (r1 I:java.lang.String) = (r4 I:java.util.regex.MatchResult), (r1 I:int) java.util.regex.MatchResult.group(int):java.lang.String type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: SGET  (r4 I:java.util.regex.Pattern) =  android.support.v4.text.util.FindAddress.sZipCodeRe java.util.regex.Pattern \l0x0018: INVOKE  (r4 I:java.util.regex.Matcher) = \l  (r4 I:java.util.regex.Pattern)\l  (r3 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x001c: INVOKE  (r4 I:boolean) = (r4 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: SGET  (r4 I:android.support.v4.text.util.FindAddress$ZipRange[]) =  android.support.v4.text.util.FindAddress.sStateZipCodeRanges android.support.v4.text.util.FindAddress$ZipRange[] \l0x0024: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r3 I:boolean) = \l  (r4 I:android.support.v4.text.util.FindAddress$ZipRange)\l  (r3 I:java.lang.String)\l android.support.v4.text.util.FindAddress.ZipRange.matches(java.lang.String):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean android.support.v4.text.util.FindAddress.isValidZipCode((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.regex.MatchResult A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

