digraph "CFG forandroid.support.v4.text.util.FindAddress.matchHouseNumber(Ljava\/lang\/String;I)Ljava\/util\/regex\/MatchResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST_STR  (r1 I:java.lang.String) =  \":,\"'	                　\l  \" \l0x0005: ARITH  (r2 I:int) = (r4 I:int) + (\-1 int) \l0x0007: INVOKE  (r2 I:char) = (r3 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000b: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN  (r0 I:java.util.regex.MatchResult) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: SGET  (r1 I:java.util.regex.Pattern) =  android.support.v4.text.util.FindAddress.sHouseNumberRe java.util.regex.Pattern \l0x0015: INVOKE  (r1 I:java.util.regex.Matcher) = \l  (r1 I:java.util.regex.Pattern)\l  (r3 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0019: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001d: INVOKE  (r3 I:java.util.regex.Matcher) = (r1 I:java.util.regex.Matcher), (r4 I:int), (r3 I:int) java.util.regex.Matcher.region(int, int):java.util.regex.Matcher type: VIRTUAL \l0x0021: INVOKE  (r4 I:boolean) = (r3 I:java.util.regex.Matcher) java.util.regex.Matcher.lookingAt():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: INVOKE  (r3 I:java.util.regex.MatchResult) = (r3 I:java.util.regex.Matcher) java.util.regex.Matcher.toMatchResult():java.util.regex.MatchResult type: VIRTUAL \l0x002b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: INVOKE  (r4 I:java.lang.String) = (r3 I:java.util.regex.MatchResult), (r4 I:int) java.util.regex.MatchResult.group(int):java.lang.String type: INTERFACE \l0x0030: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String) android.support.v4.text.util.FindAddress.checkHouseNumber(java.lang.String):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: RETURN  (r3 I:java.util.regex.MatchResult) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: RETURN  (r0 I:java.util.regex.MatchResult) \l}"];
MethodNode[shape=record,label="{public static java.util.regex.MatchResult android.support.v4.text.util.FindAddress.matchHouseNumber((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
}

