digraph "CFG forandroid.support.v4.text.util.LinkifyCompat.addLinks(Landroid\/text\/Spannable;Ljava\/util\/regex\/Pattern;Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)Z" {
subgraph cluster_Region_947468413 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1813540430 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1992142343 {
label = "IF [B:1:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (shouldAddLinksFallbackToFramework() == true) goto L_0x0006\l}"];
subgraph cluster_Region_1750555578 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return android.text.util.Linkify.addLinks(r6, r7, r8, r9, r10)\l}"];
}
}
subgraph cluster_Region_421280797 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|RETURN\l|return addLinks(r6, r7, r8, (java.lang.String[]) null, r9, r10)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.text.util.LinkifyCompat.addLinks((r6v0 android.text.Spannable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.regex.Pattern A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 android.text.util.Linkify$MatchFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 android.text.util.Linkify$TransformFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

