digraph "CFG forandroid.support.v4.text.util.LinkifyCompat.addLinkMovementMethod(Landroid\/widget\/TextView;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.text.method.MovementMethod) = (r1 I:android.widget.TextView) android.widget.TextView.getMovementMethod():android.text.method.MovementMethod type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INSTANCE_OF  (r0 I:boolean) = (r0 I:?[OBJECT, ARRAY]) android.text.method.LinkMovementMethod \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) = (r1 I:android.widget.TextView) android.widget.TextView.getLinksClickable():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r0 I:android.text.method.MovementMethod) =  android.text.method.LinkMovementMethod.getInstance():android.text.method.MovementMethod type: STATIC \l0x0014: INVOKE  \l  (r1 I:android.widget.TextView)\l  (r0 I:android.text.method.MovementMethod)\l android.widget.TextView.setMovementMethod(android.text.method.MovementMethod):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.v4.text.util.LinkifyCompat.addLinkMovementMethod((r1 I:android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

