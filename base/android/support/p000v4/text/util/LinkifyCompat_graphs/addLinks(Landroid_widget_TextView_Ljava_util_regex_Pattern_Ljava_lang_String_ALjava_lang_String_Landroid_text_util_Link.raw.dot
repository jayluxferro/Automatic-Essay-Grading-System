digraph "CFG forandroid.support.v4.text.util.LinkifyCompat.addLinks(Landroid\/widget\/TextView;Ljava\/util\/regex\/Pattern;Ljava\/lang\/String;[Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) =  android.support.v4.text.util.LinkifyCompat.shouldAddLinksFallbackToFramework():boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  \l  (r7 I:android.widget.TextView)\l  (r8 I:java.util.regex.Pattern)\l  (r9 I:java.lang.String)\l  (r10 I:java.lang.String[])\l  (r11 I:android.text.util.Linkify$MatchFilter)\l  (r12 I:android.text.util.Linkify$TransformFilter)\l android.text.util.Linkify.addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.CharSequence) = (r7 I:android.widget.TextView) android.widget.TextView.getText():java.lang.CharSequence type: VIRTUAL \l0x000e: INVOKE  (r0 I:android.text.SpannableString) = (r0 I:java.lang.CharSequence) android.text.SpannableString.valueOf(java.lang.CharSequence):android.text.SpannableString type: STATIC \l0x0012: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0013: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0014: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0015: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0016: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r8 I:boolean) = \l  (r1 I:android.text.Spannable)\l  (r2 I:java.util.regex.Pattern)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String[])\l  (r5 I:android.text.util.Linkify$MatchFilter)\l  (r6 I:android.text.util.Linkify$TransformFilter)\l android.support.v4.text.util.LinkifyCompat.addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  \l  (r7 I:android.widget.TextView)\l  (r0 I:java.lang.CharSequence)\l android.widget.TextView.setText(java.lang.CharSequence):void type: VIRTUAL \l0x0021: INVOKE  (r7 I:android.widget.TextView) android.support.v4.text.util.LinkifyCompat.addLinkMovementMethod(android.widget.TextView):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{public static void android.support.v4.text.util.LinkifyCompat.addLinks((r7 I:android.widget.TextView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.regex.Pattern A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.text.util.Linkify$MatchFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:android.text.util.Linkify$TransformFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[BUILD, android.annotation.SuppressLint, \{value=[NewApi]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

