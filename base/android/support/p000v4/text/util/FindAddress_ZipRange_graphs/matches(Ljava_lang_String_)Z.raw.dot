digraph "CFG forandroid.support.v4.text.util.FindAddress.ZipRange.matches(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:int), (r1 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0006: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l0x000a: IGET  (r1 I:int) = (r2 I:android.support.v4.text.util.FindAddress$ZipRange) android.support.v4.text.util.FindAddress.ZipRange.mLow int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IGET  (r1 I:int) = (r2 I:android.support.v4.text.util.FindAddress$ZipRange) android.support.v4.text.util.FindAddress.ZipRange.mHigh int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r3 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r1 I:int) = (r2 I:android.support.v4.text.util.FindAddress$ZipRange) android.support.v4.text.util.FindAddress.ZipRange.mException1 int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r1 I:int) = (r2 I:android.support.v4.text.util.FindAddress$ZipRange) android.support.v4.text.util.FindAddress.ZipRange.mException2 int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean android.support.v4.text.util.FindAddress.ZipRange.matches((r2 'this' I:android.support.v4.text.util.FindAddress$ZipRange A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

