digraph "CFG forandroid.support.v4.text.TextUtilsCompat.getLayoutDirectionFromLocale(Ljava\/util\/Locale;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:int) = (r2 I:java.util.Locale) android.text.TextUtils.getLayoutDirectionFromLocale(java.util.Locale):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: SGET  (r0 I:java.util.Locale) =  android.support.v4.text.TextUtilsCompat.ROOT java.util.Locale \l0x000f: INVOKE  (r0 I:boolean) = (r2 I:java.util.Locale), (r0 I:java.lang.Object) java.util.Locale.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.String) = (r2 I:java.util.Locale) android.support.v4.text.ICUCompat.maximizeAndGetScript(java.util.Locale):java.lang.String type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  (r2 I:int) = (r2 I:java.util.Locale) android.support.v4.text.TextUtilsCompat.getLayoutDirectionFromFirstChar(java.util.Locale):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: RETURN  (r2 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CONST_STR  (r2 I:java.lang.String) =  \"Arab\" \l0x0022: INVOKE  (r2 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: CONST_STR  (r2 I:java.lang.String) =  \"Hebr\" \l0x002a: INVOKE  (r2 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: RETURN  (r2 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.text.TextUtilsCompat.getLayoutDirectionFromLocale((r2 I:java.util.Locale A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

