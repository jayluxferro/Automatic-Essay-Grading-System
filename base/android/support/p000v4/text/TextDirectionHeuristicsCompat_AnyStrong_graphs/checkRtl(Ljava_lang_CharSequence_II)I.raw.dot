digraph "CFG forandroid.support.v4.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl(Ljava\/lang\/CharSequence;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r7 I:int) = (r7 I:int) + (r6 I:int) \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r6 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:13:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r2 I:char) = (r5 I:java.lang.CharSequence), (r6 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0009: INVOKE  (r2 I:byte) = (r2 I:char) java.lang.Character.getDirectionality(char):byte type: STATIC \l0x000d: INVOKE  (r2 I:int) = (r2 I:int) android.support.v4.text.TextDirectionHeuristicsCompat.isRtlText(int):int type: STATIC \l0x0011: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x001b, 0x0016] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r1 I:boolean) = \l  (r4 I:android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong)\l android.support.v4.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: RETURN  (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r1 I:boolean) = \l  (r4 I:android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong)\l android.support.v4.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: RETURN  (r0 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0029 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: IGET  (r5 I:boolean) = \l  (r4 I:android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong)\l android.support.v4.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: RETURN  (r5 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.v4.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl((r4 'this' I:android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_8;
Node_3 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

