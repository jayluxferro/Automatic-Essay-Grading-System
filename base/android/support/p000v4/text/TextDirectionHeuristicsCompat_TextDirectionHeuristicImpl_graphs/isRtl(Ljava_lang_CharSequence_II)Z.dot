digraph "CFG forandroid.support.v4.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl(Ljava\/lang\/CharSequence;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 == null) goto L_0x001b\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 \< 0) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r4 \< 0) goto L_0x001b\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if ((r2.length() \- r4) \< r3) goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r1.mAlgorithm != null) goto L_0x0016\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x0015|RETURN\l|return defaultIsRtl()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016}"];
Node_10 [shape=record,label="{10\:\ 0x001a|RETURN\l|return doCheck(r2, r3, r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b}"];
Node_12 [shape=record,label="{12\:\ 0x0020|throw new java.lang.IllegalArgumentException()\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl((r1v0 'this' android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

