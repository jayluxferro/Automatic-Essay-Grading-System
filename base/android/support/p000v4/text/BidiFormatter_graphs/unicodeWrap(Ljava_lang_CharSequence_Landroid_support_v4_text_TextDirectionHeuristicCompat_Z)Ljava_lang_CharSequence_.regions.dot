digraph "CFG forandroid.support.v4.text.BidiFormatter.unicodeWrap(Ljava\/lang\/CharSequence;Landroid\/support\/v4\/text\/TextDirectionHeuristicCompat;Z)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_24503953 {
label = "R(1:(2:(1:1)|(5:2|(1:8)|(1:14)(1:15)|(1:20)|21)))";
node [shape=record,color=blue];
subgraph cluster_Region_1466788321 {
label = "R(2:(1:1)|(5:2|(1:8)|(1:14)(1:15)|(1:20)|21))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1086980989 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 == null) goto L_0x0002\l}"];
subgraph cluster_Region_1976879068 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1685177561 {
label = "R(5:2|(1:8)|(1:14)(1:15)|(1:20)|21)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|boolean boolean r4 = r4.isRtl(r3, 0, r3.length())\landroid.text.SpannableStringBuilder android.text.SpannableStringBuilder r0 = new android.text.SpannableStringBuilder()\l}"];
subgraph cluster_IfRegion_1539045017 {
label = "IF [B:3:0x0016, B:4:0x0018] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0016|ADDED_TO_REGION\l|if (getStereoReset() == true) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|ADDED_TO_REGION\l|if (r5 == true) goto L_0x001a\l}"];
subgraph cluster_Region_2077017963 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0021|PHI: r1 \l  PHI: (r1v7 android.support.v4.text.TextDirectionHeuristicCompat) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(markBefore(r3, r4 ? android.support.p000v4.text.TextDirectionHeuristicsCompat.RTL : android.support.p000v4.text.TextDirectionHeuristicsCompat.LTR))\l}"];
}
}
subgraph cluster_IfRegion_1305350692 {
label = "IF [B:10:0x002a] THEN: R(1:14) ELSE: R(1:15)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002a|if (r4 != r2.mIsRtlContext) goto L_0x002c\l}"];
subgraph cluster_Region_597865603 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0033|PHI: r1 \l  PHI: (r1v3 char) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(r4 ? RLE : LRE)\lr0.append(r3)\lr0.append(PDF)\l}"];
}
subgraph cluster_Region_1416993525 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x003f|r0.append(r3)\l}"];
}
}
subgraph cluster_IfRegion_1730522734 {
label = "IF [B:16:0x0042] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0042|if (r5 == true) goto L_0x0044\l}"];
subgraph cluster_Region_1226828578 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x004b|PHI: r4 \l  PHI: (r4v2 android.support.v4.text.TextDirectionHeuristicCompat) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(markAfter(r3, r4 ? android.support.p000v4.text.TextDirectionHeuristicsCompat.RTL : android.support.p000v4.text.TextDirectionHeuristicsCompat.LTR))\l}"];
}
}
Node_21 [shape=record,label="{21\:\ 0x0052|RETURN\l|return r0\l}"];
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x001a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0028}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002c}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002e}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0031}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0044}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0046}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0049}"];
MethodNode[shape=record,label="{public java.lang.CharSequence android.support.v4.text.BidiFormatter.unicodeWrap((r2v0 'this' android.support.v4.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.support.v4.text.TextDirectionHeuristicCompat A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_21[style=dashed];
Node_20 -> Node_21;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_17 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
}

