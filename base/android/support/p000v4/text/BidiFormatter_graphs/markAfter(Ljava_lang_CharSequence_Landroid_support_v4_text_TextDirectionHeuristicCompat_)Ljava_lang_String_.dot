digraph "CFG forandroid.support.v4.text.BidiFormatter.markAfter(Ljava\/lang\/CharSequence;Landroid\/support\/v4\/text\/TextDirectionHeuristicCompat;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r4 = r4.isRtl(r3, 0, r3.length())\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r2.mIsRtlContext != false) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|if (r4 != false) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (getExitDir(r3) != 1) goto L_0x0019\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016}"];
Node_6 [shape=record,label="{6\:\ 0x0018|RETURN\l|return LRM_STRING\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019}"];
Node_8 [shape=record,label="{8\:\ 0x001b|if (r2.mIsRtlContext == false) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|if (r4 == false) goto L_0x0026\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f}"];
Node_11 [shape=record,label="{11\:\ 0x0024|if (getExitDir(r3) != \-1) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\l|return RLM_STRING\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"\"\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return \"\"\l}"];
MethodNode[shape=record,label="{private java.lang.String android.support.v4.text.BidiFormatter.markAfter((r2v0 'this' android.support.v4.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.support.v4.text.TextDirectionHeuristicCompat A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
}

