digraph "CFG forandroid.support.v4.text.BidiFormatter.markAfter(Ljava\/lang\/CharSequence;Landroid\/support\/v4\/text\/TextDirectionHeuristicCompat;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  (r4 I:boolean) = \l  (r4 I:android.support.v4.text.TextDirectionHeuristicCompat)\l  (r3 I:java.lang.CharSequence)\l  (r1 I:int)\l  (r0 I:int)\l android.support.v4.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean type: INTERFACE \l0x0009: IGET  (r0 I:boolean) = (r2 I:android.support.v4.text.BidiFormatter) android.support.v4.text.BidiFormatter.mIsRtlContext boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r0 I:int) = (r3 I:java.lang.CharSequence) android.support.v4.text.BidiFormatter.getExitDir(java.lang.CharSequence):int type: STATIC \l0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: SGET  (r3 I:java.lang.String) =  android.support.v4.text.BidiFormatter.LRM_STRING java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: RETURN  (r3 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IGET  (r0 I:boolean) = (r2 I:android.support.v4.text.BidiFormatter) android.support.v4.text.BidiFormatter.mIsRtlContext boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: INVOKE  (r3 I:int) = (r3 I:java.lang.CharSequence) android.support.v4.text.BidiFormatter.getExitDir(java.lang.CharSequence):int type: STATIC \l0x0023: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: SGET  (r3 I:java.lang.String) =  android.support.v4.text.BidiFormatter.RLM_STRING java.lang.String \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: RETURN  (r3 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String android.support.v4.text.BidiFormatter.markAfter((r2 'this' I:android.support.v4.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.support.v4.text.TextDirectionHeuristicCompat A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

