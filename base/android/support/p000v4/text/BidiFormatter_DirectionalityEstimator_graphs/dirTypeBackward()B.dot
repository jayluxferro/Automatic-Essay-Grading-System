digraph "CFG forandroid.support.v4.text.BidiFormatter.DirectionalityEstimator.dirTypeBackward()B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.lastChar = r3.text.charAt(r3.charIndex + \-1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if (java.lang.Character.isLowSurrogate(r3.lastChar) == false) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|int r0 = java.lang.Character.codePointBefore(r3.text, r3.charIndex)\lr3.charIndex = r3.charIndex \- java.lang.Character.charCount(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|RETURN\l|return java.lang.Character.getDirectionality(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|r3.charIndex = r3.charIndex + \-1\lbyte r0 = getCachedDirectionality(r3.lastChar)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0038|if (r3.isHtml == false) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x003a}"];
Node_7 [shape=record,label="{7\:\ 0x003e|if (r3.lastChar != '\>') goto L_0x0045\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040}"];
Node_9 [shape=record,label="{9\:\ 0x0045}"];
Node_10 [shape=record,label="{10\:\ 0x0049|if (r3.lastChar != ';') goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return skipEntityBackward()\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return skipTagBackward()\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{byte android.support.v4.text.BidiFormatter.DirectionalityEstimator.dirTypeBackward((r3v0 'this' android.support.v4.text.BidiFormatter$DirectionalityEstimator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
}

