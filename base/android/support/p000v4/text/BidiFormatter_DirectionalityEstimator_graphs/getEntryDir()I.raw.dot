digraph "CFG forandroid.support.v4.text.BidiFormatter.DirectionalityEstimator.getEntryDir()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  \l  (r0 I:int)\l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.charIndex int \l0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IGET  (r6 I:int) = \l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.charIndex int \l0x000a: IGET  (r7 I:int) = \l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.length int \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r6 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r6 I:byte) = \l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.dirTypeForward():byte type: VIRTUAL \l0x0014: CONST  (r7 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: SWITCH  \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2] t:[0x002e, 0x002b, 0x002b] \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: SWITCH  \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[14, 15, 16, 17, 18] t:[0x0027, 0x0027, 0x0023, 0x0023, 0x001f] \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x0021: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0025: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0029: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: RETURN  (r2 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: RETURN  (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: RETURN  (r0 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0039 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: RETURN  (r4 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0039|0x0039: IGET  (r4 I:int) = \l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.charIndex int \l}"];
Node_22 [shape=record,label="{22\:\ 0x003b|0x003b: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:33:0x0054 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003d|0x003d: INVOKE  (r4 I:byte) = \l  (r8 I:android.support.v4.text.BidiFormatter$DirectionalityEstimator)\l android.support.v4.text.BidiFormatter.DirectionalityEstimator.dirTypeBackward():byte type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|0x0041: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[14, 15, 16, 17, 18] t:[0x004e, 0x004e, 0x0048, 0x0048, 0x0045] \l}"];
Node_26 [shape=record,label="{26\:\ 0x0045|0x0045: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x004b \l}"];
Node_28 [shape=record,label="{28\:\ 0x004a|0x004a: RETURN  (r2 I:int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004b|0x004b: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x004e|0x004e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0051 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0050|0x0050: RETURN  (r1 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0051|0x0051: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0054|0x0054: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{int android.support.v4.text.BidiFormatter.DirectionalityEstimator.getEntryDir((r8 'this' I:android.support.v4.text.BidiFormatter$DirectionalityEstimator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_12;
Node_6 -> Node_14;
Node_7 -> Node_9;
Node_7 -> Node_10;
Node_7 -> Node_11;
Node_7 -> Node_16;
Node_9 -> Node_1;
Node_10 -> Node_1;
Node_11 -> Node_1;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27;
Node_24 -> Node_30;
Node_24 -> Node_21;
Node_26 -> Node_21;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_21;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_32 -> Node_21;
}

