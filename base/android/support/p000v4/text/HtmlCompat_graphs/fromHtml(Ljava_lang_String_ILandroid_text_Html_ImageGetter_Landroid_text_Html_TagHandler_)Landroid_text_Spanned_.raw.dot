digraph "CFG forandroid.support.v4.text.HtmlCompat.fromHtml(Ljava\/lang\/String;ILandroid\/text\/Html$ImageGetter;Landroid\/text\/Html$TagHandler;)Landroid\/text\/Spanned;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:android.text.Spanned) = \l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:android.text.Html$ImageGetter)\l  (r5 I:android.text.Html$TagHandler)\l android.text.Html.fromHtml(java.lang.String, int, android.text.Html$ImageGetter, android.text.Html$TagHandler):android.text.Spanned type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:android.text.Spanned) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r2 I:android.text.Spanned) = \l  (r2 I:java.lang.String)\l  (r4 I:android.text.Html$ImageGetter)\l  (r5 I:android.text.Html$TagHandler)\l android.text.Html.fromHtml(java.lang.String, android.text.Html$ImageGetter, android.text.Html$TagHandler):android.text.Spanned type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:android.text.Spanned) \l}"];
MethodNode[shape=record,label="{public static android.text.Spanned android.support.v4.text.HtmlCompat.fromHtml((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.text.Html$ImageGetter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.text.Html$TagHandler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], , Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

