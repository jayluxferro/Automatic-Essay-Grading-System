digraph "CFG forandroid.support.v4.os.HandlerCompat.postDelayed(Landroid\/os\/Handler;Ljava\/lang\/Runnable;Ljava\/lang\/Object;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (28 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:boolean) = \l  (r2 I:android.os.Handler)\l  (r3 I:java.lang.Runnable)\l  (r4 I:java.lang.Object)\l  (r5 I:long)\l android.os.Handler.postDelayed(java.lang.Runnable, java.lang.Object, long):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r2 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r3 I:android.os.Message) = (r2 I:android.os.Handler), (r3 I:java.lang.Runnable) android.os.Message.obtain(android.os.Handler, java.lang.Runnable):android.os.Message type: STATIC \l0x000f: IPUT  (r4 I:java.lang.Object), (r3 I:android.os.Message) android.os.Message.obj java.lang.Object \l0x0011: INVOKE  (r2 I:boolean) = \l  (r2 I:android.os.Handler)\l  (r3 I:android.os.Message)\l  (r5 I:long)\l android.os.Handler.sendMessageDelayed(android.os.Message, long):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.os.HandlerCompat.postDelayed((r2 I:android.os.Handler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Runnable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

