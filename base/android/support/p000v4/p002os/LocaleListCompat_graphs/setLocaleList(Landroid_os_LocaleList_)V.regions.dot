digraph "CFG forandroid.support.v4.os.LocaleListCompat.setLocaleList(Landroid\/os\/LocaleList;)V" {
subgraph cluster_Region_74682632 {
label = "R(2:0|(1:(3:2|(1:4)|5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r5.size()\l}"];
subgraph cluster_Region_649858590 {
label = "R(1:(3:2|(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_858282663 {
label = "IF [B:1:0x0004] THEN: R(3:2|(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 \> 0) goto L_0x0006\l}"];
subgraph cluster_Region_1706110163 {
label = "R(3:2|(1:4)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|java.util.Locale[] java.util.Locale[] r1 = new java.util.Locale[r0]\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_845762505 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:2:0x0006, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|if (r2 \< r0) goto L_0x000b\l}"];
subgraph cluster_Region_705323869 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_END\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|r1[r2] = r5.get(r2)\lr2++\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0014|IMPL.setLocaleList(r1)\l}"];
}
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0014|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void android.support.v4.os.LocaleListCompat.setLocaleList((r4v0 'this' android.support.v4.os.LocaleListCompat A[IMMUTABLE_TYPE, THIS]), (r5v0 android.os.LocaleList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RequiresApi, \{value=24\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_3;
Node_5 -> Node_7;
Node_6 -> Node_5;
}

