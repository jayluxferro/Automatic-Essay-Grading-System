digraph "CFG forandroid.support.v4.os.LocaleListHelper.findFirstMatchIndex(Ljava\/util\/Locale;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:java.util.Locale[]) = (r2 I:android.support.v4.os.LocaleListHelper) android.support.v4.os.LocaleListHelper.mList java.util.Locale[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r1 I:java.util.Locale[]) = (r2 I:android.support.v4.os.LocaleListHelper) android.support.v4.os.LocaleListHelper.mList java.util.Locale[] \l0x0008: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000a: INVOKE  (r1 I:int) = (r3 I:java.util.Locale), (r1 I:java.util.Locale) android.support.v4.os.LocaleListHelper.matchScore(java.util.Locale, java.util.Locale):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private int android.support.v4.os.LocaleListHelper.findFirstMatchIndex((r2 'this' I:android.support.v4.os.LocaleListHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.Locale A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

