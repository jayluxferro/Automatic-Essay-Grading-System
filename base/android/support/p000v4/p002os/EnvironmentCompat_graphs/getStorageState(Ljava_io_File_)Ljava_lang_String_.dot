digraph "CFG forandroid.support.v4.os.EnvironmentCompat.getStorageState(Ljava\/io\/File;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 19) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return android.os.Environment.getStorageState(r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|SYNTHETIC\lSplitter:B:4:0x000b\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x0022 \}\lSplitter:B:4:0x000b\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|Catch:\{ IOException \-\> 0x0022 \}\l|if (r3.getCanonicalPath().startsWith(android.os.Environment.getExternalStorageDirectory().getCanonicalPath()) == false) goto L_?     \/\/ Catch:\{ IOException \-\> 0x0022 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|Catch:\{ IOException \-\> 0x0022 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|RETURN\l|return android.os.Environment.getExternalStorageState()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x000b\l|java.io.IOException r3 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Failed to resolve canonical path: \")\lr1.append(r3)\landroid.util.Log.w(TAG, r1.toString())\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return MEDIA_UNKNOWN\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return MEDIA_UNKNOWN\l}"];
MethodNode[shape=record,label="{public static java.lang.String android.support.v4.os.EnvironmentCompat.getStorageState((r3v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

