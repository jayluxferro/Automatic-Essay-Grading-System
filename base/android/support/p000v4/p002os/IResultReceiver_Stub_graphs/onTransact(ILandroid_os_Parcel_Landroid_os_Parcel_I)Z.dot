digraph "CFG forandroid.support.v4.os.IResultReceiver.Stub.onTransact(ILandroid\/os\/Parcel;Landroid\/os\/Parcel;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r3 == 1) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r3 == 1598968902) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000c|RETURN\l|return super.onTransact(r3, r4, r5, r6)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|r5.writeString(DESCRIPTOR)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|return true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|r4.enforceInterface(DESCRIPTOR)\lint r3 = r4.readInt()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|if (r4.readInt() == 0) goto L_0x002b\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|android.os.Bundle r4 = (android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|r4 = null\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|PHI: r4 \l  PHI: (r4v1 android.os.Bundle) = (r4v2 android.os.Bundle), (r4v4 android.os.Bundle) binds: [B:11:0x002b, B:10:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|send(r3, r4)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.os.IResultReceiver.Stub.onTransact((r2v0 'this' android.support.v4.os.IResultReceiver$Stub A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.os.RemoteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

