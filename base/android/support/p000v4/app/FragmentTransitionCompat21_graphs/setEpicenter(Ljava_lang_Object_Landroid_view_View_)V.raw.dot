digraph "CFG forandroid.support.v4.app.FragmentTransitionCompat21.setEpicenter(Ljava\/lang\/Object;Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0014 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CHECK_CAST  (r2 I:android.transition.Transition) = (android.transition.Transition) (r2 I:?[OBJECT, ARRAY]) \l0x0004: NEW_INSTANCE  (r0 I:android.graphics.Rect) =  android.graphics.Rect \l0x0006: INVOKE  (r0 I:android.graphics.Rect) android.graphics.Rect.\<init\>():void type: DIRECT \l0x0009: INVOKE  \l  (r1 I:android.support.v4.app.FragmentTransitionCompat21)\l  (r3 I:android.view.View)\l  (r0 I:android.graphics.Rect)\l android.support.v4.app.FragmentTransitionCompat21.getBoundsOnScreen(android.view.View, android.graphics.Rect):void type: VIRTUAL \l0x000c: NEW_INSTANCE  (r3 I:android.support.v4.app.FragmentTransitionCompat21$1) =  android.support.v4.app.FragmentTransitionCompat21$1 \l0x000e: INVOKE  \l  (r3 I:android.support.v4.app.FragmentTransitionCompat21$1)\l  (r1 I:android.support.v4.app.FragmentTransitionCompat21)\l  (r0 I:android.graphics.Rect)\l android.support.v4.app.FragmentTransitionCompat21.1.\<init\>(android.support.v4.app.FragmentTransitionCompat21, android.graphics.Rect):void type: DIRECT \l0x0011: INVOKE  \l  (r2 I:android.transition.Transition)\l  (r3 I:android.transition.Transition$EpicenterCallback)\l android.transition.Transition.setEpicenterCallback(android.transition.Transition$EpicenterCallback):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.FragmentTransitionCompat21.setEpicenter((r1 'this' I:android.support.v4.app.FragmentTransitionCompat21 A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
}

