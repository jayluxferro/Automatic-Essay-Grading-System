digraph "CFG forandroid.support.v4.app.LoaderManagerImpl.LoaderViewModel.hasRunningLoaders()Z" {
subgraph cluster_Region_1470942416 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.mLoaders.size()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1074765620 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:5:0x001a\l|if (r2 \< r0) goto L_0x000a\l}"];
subgraph cluster_Region_624496930 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1787463457 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_490572271 {
label = "IF [B:3:0x0016] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0016|if (r4.mLoaders.valueAt(r2).isCallbackWaitingForData() == true) goto L_0x0018\l}"];
subgraph cluster_Region_1780991216 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_759718282 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:5:0x001a\l|r2++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x001d|RETURN\l|return false\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{boolean android.support.v4.app.LoaderManagerImpl.LoaderViewModel.hasRunningLoaders((r4v0 'this' android.support.v4.app.LoaderManagerImpl$LoaderViewModel A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

