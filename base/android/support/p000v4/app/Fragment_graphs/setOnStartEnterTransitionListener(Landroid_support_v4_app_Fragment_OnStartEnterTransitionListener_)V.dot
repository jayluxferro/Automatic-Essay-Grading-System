digraph "CFG forandroid.support.v4.app.Fragment.setOnStartEnterTransitionListener(Landroid\/support\/v4\/app\/Fragment$OnStartEnterTransitionListener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|ensureAnimationInfo()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3 != r2.mAnimationInfo.mStartEnterTransitionListener) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r3 == null) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r2.mAnimationInfo.mStartEnterTransitionListener != null) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Trying to set a replacement startPostponedEnterTransition on \")\lr0.append(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|throw new java.lang.IllegalStateException(r0.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a}"];
Node_9 [shape=record,label="{9\:\ 0x002e|if (r2.mAnimationInfo.mEnterTransitionPostponed == false) goto L_0x0034\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|r2.mAnimationInfo.mStartEnterTransitionListener = r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|if (r3 == null) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|r3.startListening()\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v4.app.Fragment.setOnStartEnterTransitionListener((r2v0 'this' android.support.v4.app.Fragment A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.v4.app.Fragment$OnStartEnterTransitionListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
}

