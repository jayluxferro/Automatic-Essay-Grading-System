digraph "CFG forandroid.support.v4.app.NotificationCompatJellybean.fromBundle(Landroid\/os\/Bundle;)Landroid\/support\/v4\/app\/RemoteInput;" {
subgraph cluster_Region_902152559 {
label = "R(3:0|(2:2|(1:5))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList java.util.ArrayList\<java.lang.String\> r0 = r8.getStringArrayList(KEY_ALLOWED_DATA_TYPES)\ljava.util.HashSet java.util.HashSet r7 = new java.util.HashSet()\l}"];
subgraph cluster_IfRegion_1421200840 {
label = "IF [B:1:0x000b] THEN: R(2:2|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r0 != null) goto L_0x000d\l}"];
subgraph cluster_Region_2019359147 {
label = "R(2:2|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000d|java.util.Iterator java.util.Iterator\<java.lang.String\> r0 = r0.iterator()\l}"];
subgraph cluster_LoopRegion_1749097118 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|if (r0.hasNext() != false) goto L_0x0017\l}"];
subgraph cluster_Region_1939108666 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|LOOP_END\lLOOP:0: B:3:0x0011\-\>B:5:0x0017\l|r7.add(r0.next())\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0045|RETURN\l|return new android.support.p000v4.app.RemoteInput(r8.getString(KEY_RESULT_KEY), r8.getCharSequence(KEY_LABEL), r8.getCharSequenceArray(KEY_CHOICES), r8.getBoolean(KEY_ALLOW_FREE_FORM_INPUT), r8.getBundle(KEY_EXTRAS), r7)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011|LOOP_START\lLOOP:0: B:3:0x0011\-\>B:5:0x0017\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static android.support.v4.app.RemoteInput android.support.v4.app.NotificationCompatJellybean.fromBundle((r8v0 android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_3;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_6;
}

