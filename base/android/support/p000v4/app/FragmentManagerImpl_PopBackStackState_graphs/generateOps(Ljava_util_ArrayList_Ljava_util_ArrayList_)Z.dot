digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.PopBackStackState.generateOps(Ljava\/util\/ArrayList;Ljava\/util\/ArrayList;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r6.this$0.mPrimaryNav == null) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r6.mId \>= 0) goto L_0x0020\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r6.mName != null) goto L_0x0020\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|android.support.v4.app.FragmentManager r0 = r6.this$0.mPrimaryNav.peekChildFragmentManager()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r0 == null) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018}"];
Node_9 [shape=record,label="{9\:\ 0x001c|if (r0.popBackStackImmediate() == false) goto L_0x0020\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|r1 = r7\lr2 = r8\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|RETURN\l|return r6.this$0.popBackStackState(r1, r2, r6.mName, r6.mId, r6.mFlags)\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.app.FragmentManagerImpl.PopBackStackState.generateOps((r6v0 'this' android.support.v4.app.FragmentManagerImpl$PopBackStackState A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.ArrayList\<android.support.v4.app.BackStackRecord\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.util.ArrayList\<java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Landroid\/support\/v4\/app\/BackStackRecord;, \>;, Ljava\/util\/ArrayList\<, Ljava\/lang\/Boolean;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
}

