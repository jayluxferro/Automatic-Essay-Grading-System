digraph "CFG forandroid.support.v4.app.NotificationCompat.Style.createColoredBitmap(III)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.graphics.drawable.Drawable r4 = r3.mBuilder.mContext.getResources().getDrawable(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r6 != 0) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|int r0 = r4.getIntrinsicWidth()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|r0 = r6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|PHI: r0 \l  PHI: (r0v3 int) = (r0v5 int), (r0v6 int) binds: [B:3:0x0013, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != 0) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|int r6 = r4.getIntrinsicHeight()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|PHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:4:0x0014, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.Bitmap r1 = android.graphics.Bitmap.createBitmap(r0, r6, android.graphics.Bitmap.Config.ARGB_8888)\lr4.setBounds(0, 0, r0, r6)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if (r5 == 0) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|r4.mutate().setColorFilter(new android.graphics.PorterDuffColorFilter(r5, android.graphics.PorterDuff.Mode.SRC_IN))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|r4.draw(new android.graphics.Canvas(r1))\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private android.graphics.Bitmap android.support.v4.app.NotificationCompat.Style.createColoredBitmap((r3v0 'this' android.support.v4.app.NotificationCompat$Style A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

