digraph "CFG forandroid.support.v4.app.BackStackRecord.addToBackStack(Ljava\/lang\/String;)Landroid\/support\/v4\/app\/FragmentTransaction;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mAllowAddToBackStack boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mAddToBackStack boolean \l0x0007: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mName java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r1 I:android.support.v4.app.FragmentTransaction) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000c: CONST_STR  (r0 I:java.lang.String) =  \"This FragmentTransaction is not allowed to be added to the back stack.\" \l0x000e: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.support.v4.app.FragmentTransaction android.support.v4.app.BackStackRecord.addToBackStack((r1 'this' I:android.support.v4.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

