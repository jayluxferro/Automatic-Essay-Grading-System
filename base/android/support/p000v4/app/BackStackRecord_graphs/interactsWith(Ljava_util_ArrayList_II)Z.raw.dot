digraph "CFG forandroid.support.v4.app.BackStackRecord.interactsWith(Ljava\/util\/ArrayList;II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r1 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord$Op\>) = (r10 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mOps java.util.ArrayList \l0x0006: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:26:0x0057 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r4 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord$Op\>) = (r10 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mOps java.util.ArrayList \l0x0011: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0015: CHECK_CAST  (r4 I:android.support.v4.app.BackStackRecord$Op) = (android.support.v4.app.BackStackRecord$Op) (r4 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r5 I:android.support.v4.app.Fragment) = (r4 I:android.support.v4.app.BackStackRecord$Op) android.support.v4.app.BackStackRecord.Op.fragment android.support.v4.app.Fragment \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r4 I:android.support.v4.app.Fragment) = (r4 I:android.support.v4.app.BackStackRecord$Op) android.support.v4.app.BackStackRecord.Op.fragment android.support.v4.app.Fragment \l0x001d: IGET  (r4 I:int) = (r4 I:android.support.v4.app.Fragment) android.support.v4.app.Fragment.mContainerId int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0054 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0054 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IF  (r3 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:24:0x0053 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: INVOKE  (r5 I:java.lang.Object) = (r11 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x002c: CHECK_CAST  (r5 I:android.support.v4.app.BackStackRecord) = (android.support.v4.app.BackStackRecord) (r5 I:?[OBJECT, ARRAY]) \l0x002e: IGET  (r6 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord$Op\>) = (r5 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mOps java.util.ArrayList \l0x0030: INVOKE  (r6 I:int) = (r6 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0034: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IF  (r7 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:23:0x0050 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IGET  (r8 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord$Op\>) = (r5 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mOps java.util.ArrayList \l0x0039: INVOKE  (r8 I:java.lang.Object) = (r8 I:java.util.ArrayList), (r7 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x003d: CHECK_CAST  (r8 I:android.support.v4.app.BackStackRecord$Op) = (android.support.v4.app.BackStackRecord$Op) (r8 I:?[OBJECT, ARRAY]) \l0x003f: IGET  (r9 I:android.support.v4.app.Fragment) = (r8 I:android.support.v4.app.BackStackRecord$Op) android.support.v4.app.BackStackRecord.Op.fragment android.support.v4.app.Fragment \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0048 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IGET  (r8 I:android.support.v4.app.Fragment) = (r8 I:android.support.v4.app.BackStackRecord$Op) android.support.v4.app.BackStackRecord.Op.fragment android.support.v4.app.Fragment \l0x0045: IGET  (r8 I:int) = (r8 I:android.support.v4.app.Fragment) android.support.v4.app.Fragment.mContainerId int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x004d \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: RETURN  (r11 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0053|0x0053: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|0x0054: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0057|0x0057: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean android.support.v4.app.BackStackRecord.interactsWith((r10 'this' I:android.support.v4.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r11 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Landroid\/support\/v4\/app\/BackStackRecord;, \>;II)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_25;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_25;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_14;
Node_23 -> Node_12;
Node_24 -> Node_25;
Node_25 -> Node_4;
}

