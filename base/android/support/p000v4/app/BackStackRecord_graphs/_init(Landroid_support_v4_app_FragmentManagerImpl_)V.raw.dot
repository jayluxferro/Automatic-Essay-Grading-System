digraph "CFG forandroid.support.v4.app.BackStackRecord.\<init\>(Landroid\/support\/v4\/app\/FragmentManagerImpl;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:android.support.v4.app.FragmentTransaction) android.support.v4.app.FragmentTransaction.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0005: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord$Op\>)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mOps java.util.ArrayList \l0x000a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mAllowAddToBackStack boolean \l0x000d: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000e: IPUT  (r0 I:int), (r1 I:android.support.v4.app.BackStackRecord) android.support.v4.app.BackStackRecord.mIndex int \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mReorderingAllowed boolean \l0x0013: IPUT  \l  (r2 I:android.support.v4.app.FragmentManagerImpl)\l  (r1 I:android.support.v4.app.BackStackRecord)\l android.support.v4.app.BackStackRecord.mManager android.support.v4.app.FragmentManagerImpl \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.BackStackRecord.\<init\>((r1 'this' I:android.support.v4.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r2 I:android.support.v4.app.FragmentManagerImpl A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

