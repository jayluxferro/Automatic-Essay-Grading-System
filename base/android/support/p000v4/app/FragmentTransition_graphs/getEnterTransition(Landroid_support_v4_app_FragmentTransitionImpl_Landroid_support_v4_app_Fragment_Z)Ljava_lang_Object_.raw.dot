digraph "CFG forandroid.support.v4.app.FragmentTransition.getEnterTransition(Landroid\/support\/v4\/app\/FragmentTransitionImpl;Landroid\/support\/v4\/app\/Fragment;Z)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:java.lang.Object) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.support.v4.app.Fragment) android.support.v4.app.Fragment.getReenterTransition():java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.support.v4.app.Fragment) android.support.v4.app.Fragment.getEnterTransition():java.lang.Object type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:android.support.v4.app.FragmentTransitionImpl)\l  (r1 I:java.lang.Object)\l android.support.v4.app.FragmentTransitionImpl.cloneTransition(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{private static java.lang.Object android.support.v4.app.FragmentTransition.getEnterTransition((r0 I:android.support.v4.app.FragmentTransitionImpl A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:android.support.v4.app.Fragment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

