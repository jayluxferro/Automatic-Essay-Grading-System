digraph "CFG forandroid.support.v4.app.FragmentTransition.ensureContainer(Landroid\/support\/v4\/app\/FragmentTransition$FragmentContainerTransition;Landroid\/util\/SparseArray;I)Landroid\/support\/v4\/app\/FragmentTransition$FragmentContainerTransition;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r0 I:android.support.v4.app.FragmentTransition$FragmentContainerTransition) =  android.support.v4.app.FragmentTransition$FragmentContainerTransition \l0x0004: INVOKE  \l  (r0 I:android.support.v4.app.FragmentTransition$FragmentContainerTransition)\l android.support.v4.app.FragmentTransition.FragmentContainerTransition.\<init\>():void type: DIRECT \l0x0007: INVOKE  \l  (r1 I:android.util.SparseArray)\l  (r2 I:int)\l  (r0 I:java.lang.Object)\l android.util.SparseArray.put(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  \l  (r0 I:android.support.v4.app.FragmentTransition$FragmentContainerTransition)\l \l}"];
MethodNode[shape=record,label="{private static android.support.v4.app.FragmentTransition$FragmentContainerTransition android.support.v4.app.FragmentTransition.ensureContainer((r0 I:android.support.v4.app.FragmentTransition$FragmentContainerTransition A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:android.util.SparseArray\<android.support.v4.app.FragmentTransition$FragmentContainerTransition\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/v4\/app\/FragmentTransition$FragmentContainerTransition;, Landroid\/util\/SparseArray\<, Landroid\/support\/v4\/app\/FragmentTransition$FragmentContainerTransition;, \>;I), Landroid\/support\/v4\/app\/FragmentTransition$FragmentContainerTransition;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
}

