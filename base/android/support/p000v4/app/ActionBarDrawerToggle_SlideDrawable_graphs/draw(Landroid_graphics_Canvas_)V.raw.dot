digraph "CFG forandroid.support.v4.app.ActionBarDrawerToggle.SlideDrawable.draw(Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.Rect) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.mTmpRect android.graphics.Rect \l0x0002: INVOKE  \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l  (r0 I:android.graphics.Rect)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.copyBounds(android.graphics.Rect):void type: VIRTUAL \l0x0005: INVOKE  (r6 I:android.graphics.Canvas) android.graphics.Canvas.save():int type: VIRTUAL \l0x0008: IGET  (r0 I:android.support.v4.app.ActionBarDrawerToggle) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.this$0 android.support.v4.app.ActionBarDrawerToggle \l0x000a: IGET  (r0 I:android.app.Activity) = (r0 I:android.support.v4.app.ActionBarDrawerToggle) android.support.v4.app.ActionBarDrawerToggle.mActivity android.app.Activity \l0x000c: INVOKE  (r0 I:android.view.Window) = (r0 I:android.app.Activity) android.app.Activity.getWindow():android.view.Window type: VIRTUAL \l0x0010: INVOKE  (r0 I:android.view.View) = (r0 I:android.view.Window) android.view.Window.getDecorView():android.view.View type: VIRTUAL \l0x0014: INVOKE  (r0 I:int) = (r0 I:android.view.View) android.support.v4.view.ViewCompat.getLayoutDirection(android.view.View):int type: STATIC \l0x0018: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IGET  (r2 I:android.graphics.Rect) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.mTmpRect android.graphics.Rect \l0x0023: INVOKE  (r2 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.width():int type: VIRTUAL \l0x0027: IGET  (r3 I:float) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.mOffset float \l0x0029: NEG  (r3 I:float) = (r3 I:float) \l0x002a: CAST  (r2 I:float) = (float) (r2 I:int) \l0x002b: ARITH  (r3 I:float) = (r3 I:float) * (r2 I:float) \l0x002d: IGET  (r4 I:float) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.mPosition float \l0x002f: ARITH  (r3 I:float) = (r3 I:float) * (r4 I:float) \l0x0031: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0032: ARITH  (r3 I:float) = (r3 I:float) * (r1 I:float) \l0x0034: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: INVOKE  (r6 I:android.graphics.Canvas), (r3 I:float), (r1 I:float) android.graphics.Canvas.translate(float, float):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0048 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IGET  (r0 I:boolean) = \l  (r5 I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable)\l android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.mHasMirroring boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0048 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: INVOKE  (r6 I:android.graphics.Canvas), (r2 I:float), (r1 I:float) android.graphics.Canvas.translate(float, float):void type: VIRTUAL \l0x0041: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l0x0043: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0045: INVOKE  (r6 I:android.graphics.Canvas), (r0 I:float), (r1 I:float) android.graphics.Canvas.scale(float, float):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: INVOKE  \l  (r5 I:android.graphics.drawable.InsetDrawable)\l  (r6 I:android.graphics.Canvas)\l android.graphics.drawable.InsetDrawable.draw(android.graphics.Canvas):void type: SUPER \l0x004b: INVOKE  (r6 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.ActionBarDrawerToggle.SlideDrawable.draw((r5 'this' I:android.support.v4.app.ActionBarDrawerToggle$SlideDrawable A[IMMUTABLE_TYPE, THIS]), (r6 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

