digraph "CFG forandroid.support.v4.app.AppOpsManagerCompat.noteOp(Landroid\/content\/Context;Ljava\/lang\/String;ILjava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"appops\" \l0x0008: INVOKE  (r2 I:java.lang.Object) = (r2 I:android.content.Context), (r0 I:java.lang.String) android.content.Context.getSystemService(java.lang.String):java.lang.Object type: VIRTUAL \l0x000c: CHECK_CAST  (r2 I:android.app.AppOpsManager) = (android.app.AppOpsManager) (r2 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r2 I:int) = \l  (r2 I:android.app.AppOpsManager)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:java.lang.String)\l android.app.AppOpsManager.noteOp(java.lang.String, int, java.lang.String):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.app.AppOpsManagerCompat.noteOp((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], , Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

