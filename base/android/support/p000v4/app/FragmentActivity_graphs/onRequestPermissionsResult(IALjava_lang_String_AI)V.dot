digraph "CFG forandroid.support.v4.app.FragmentActivity.onRequestPermissionsResult(I[Ljava\/lang\/String;[I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.mFragments.noteStateNotSaved()\lr0 = (r5 \>\> 16) & 65535\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r0 == 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|int r0 = r0 + \-1\ljava.lang.String r2 = r4.mPendingFragmentActivityResults.get(r0)\lr4.mPendingFragmentActivityResults.remove(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|if (r2 != null) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|android.util.Log.w(TAG, \"Activity result delivered for unknown Fragment.\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|android.support.v4.app.Fragment r0 = r4.mFragments.findFragmentByWho(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|if (r0 != null) goto L_0x0045\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|java.lang.StringBuilder r6 = new java.lang.StringBuilder()\lr6.append(\"Activity result no fragment exists for who: \")\lr6.append(r2)\landroid.util.Log.w(TAG, r6.toString())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|r0.onRequestPermissionsResult(r5 & 65535, r6, r7)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.FragmentActivity.onRequestPermissionsResult((r4v0 'this' android.support.v4.app.FragmentActivity A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
}

