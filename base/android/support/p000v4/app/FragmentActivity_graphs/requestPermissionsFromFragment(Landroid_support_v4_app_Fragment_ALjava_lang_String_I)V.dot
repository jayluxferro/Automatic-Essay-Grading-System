digraph "CFG forandroid.support.v4.app.FragmentActivity.requestPermissionsFromFragment(Landroid\/support\/v4\/app\/Fragment;[Ljava\/lang\/String;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 != \-1) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|android.support.p000v4.app.ActivityCompat.requestPermissions(r2, r4, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|checkForValidRequestCode(r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|SYNTHETIC\lSplitter:B:5:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ all \-\> 0x0020 \}\lSplitter:B:5:0x000c\l|r2.mRequestedPermissionsFromFragment = true     \/\/ Catch:\{ all \-\> 0x0020 \}\landroid.support.p000v4.app.ActivityCompat.requestPermissions(r2, r4, ((allocateRequestIndex(r3) + 1) \<\< 16) + (r5 & 65535))     \/\/ Catch:\{ all \-\> 0x0020 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r2.mRequestedPermissionsFromFragment = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|ExcHandler: all (r3v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:5:0x000c\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|r2.mRequestedPermissionsFromFragment = false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|throw r3\l}"];
MethodNode[shape=record,label="{void android.support.v4.app.FragmentActivity.requestPermissionsFromFragment((r2v0 'this' android.support.v4.app.FragmentActivity A[IMMUTABLE_TYPE, THIS]), (r3v0 android.support.v4.app.Fragment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | JADX INFO: finally extract failed\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

