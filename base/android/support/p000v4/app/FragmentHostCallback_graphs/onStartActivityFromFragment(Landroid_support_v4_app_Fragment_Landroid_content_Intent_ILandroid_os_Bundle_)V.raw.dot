digraph "CFG forandroid.support.v4.app.FragmentHostCallback.onStartActivityFromFragment(Landroid\/support\/v4\/app\/Fragment;Landroid\/content\/Intent;ILandroid\/os\/Bundle;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r1 I:android.content.Context) = (r0 I:android.support.v4.app.FragmentHostCallback) android.support.v4.app.FragmentHostCallback.mContext android.content.Context \l0x0005: INVOKE  \l  (r1 I:android.content.Context)\l  (r2 I:android.content.Intent)\l android.content.Context.startActivity(android.content.Intent):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"Starting activity with a requestCode requires a FragmentActivity host\" \l0x000d: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.FragmentHostCallback.onStartActivityFromFragment((r0 'this' I:android.support.v4.app.FragmentHostCallback A[IMMUTABLE_TYPE, THIS]), (r1 I:android.support.v4.app.Fragment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.content.Intent A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , , Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

