digraph "CFG forandroid.support.v4.app.FragmentController.retainNonConfig()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.support.v4.app.FragmentHostCallback\<?\>) = (r1 I:android.support.v4.app.FragmentController) android.support.v4.app.FragmentController.mHost android.support.v4.app.FragmentHostCallback \l0x0002: IGET  (r0 I:android.support.v4.app.FragmentManagerImpl) = (r0 I:android.support.v4.app.FragmentHostCallback) android.support.v4.app.FragmentHostCallback.mFragmentManager android.support.v4.app.FragmentManagerImpl \l0x0004: INVOKE  (r0 I:android.support.v4.app.FragmentManagerNonConfig) = (r0 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.retainNonConfig():android.support.v4.app.FragmentManagerNonConfig type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:java.util.List) = (r0 I:android.support.v4.app.FragmentManagerNonConfig) android.support.v4.app.FragmentManagerNonConfig.getFragments():java.util.List type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r0 I:java.util.List\<android.support.v4.app.Fragment\>) \l}"];
MethodNode[shape=record,label="{public java.util.List\<android.support.v4.app.Fragment\> android.support.v4.app.FragmentController.retainNonConfig((r1 'this' I:android.support.v4.app.FragmentController A[IMMUTABLE_TYPE, THIS]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Landroid\/support\/v4\/app\/Fragment;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

