digraph "CFG forandroid.support.v4.app.SharedElementCallback.createDrawableBitmap(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r9.getIntrinsicWidth()\lint r1 = r9.getIntrinsicHeight()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 \<= 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r1 \> 0) goto L_0x000d\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|float r2 = java.lang.Math.min(1.0f, 1048576.0f \/ ((float) (r0 * r1)))\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if ((r9 instanceof android.graphics.drawable.BitmapDrawable) == false) goto L_0x0028\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if ((r2 \> 1.0f ? 1 : (r2 == 1.0f ? 0 : \-1)) != 0) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021}"];
Node_8 [shape=record,label="{8\:\ 0x0027|RETURN\l|return ((android.graphics.drawable.BitmapDrawable) r9).getBitmap()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|int r0 = (int) (((float) r0) * r2)\lint r1 = (int) (((float) r1) * r2)\landroid.graphics.Bitmap r2 = android.graphics.Bitmap.createBitmap(r0, r1, android.graphics.Bitmap.Config.ARGB_8888)\landroid.graphics.Canvas r3 = new android.graphics.Canvas(r2)\landroid.graphics.Rect r4 = r9.getBounds()\lint r5 = r4.left\lint r6 = r4.top\lint r7 = r4.right\lint r4 = r4.bottom\lr9.setBounds(0, 0, r0, r1)\lr9.draw(r3)\lr9.setBounds(r5, r6, r7, r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|RETURN\l|return r2\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static android.graphics.Bitmap android.support.v4.app.SharedElementCallback.createDrawableBitmap((r9v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_2 -> Node_12[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

