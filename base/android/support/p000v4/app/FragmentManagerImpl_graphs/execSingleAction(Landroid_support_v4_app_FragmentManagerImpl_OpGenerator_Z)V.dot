digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.execSingleAction(Landroid\/support\/v4\/app\/FragmentManagerImpl$OpGenerator;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 == false) goto L_0x000b\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r1.mHost == null) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r1.mDestroyed == false) goto L_0x000b\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|ensureExecReady(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if (r2.generateOps(r1.mTmpRecords, r1.mTmpIsPop) == false) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r1.mExecutingActions = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|SYNTHETIC\lSplitter:B:8:0x001b\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ all \-\> 0x0026 \}\lSplitter:B:8:0x001b\l|removeRedundantOperationsAndExecute(r1.mTmpRecords, r1.mTmpIsPop)     \/\/ Catch:\{ all \-\> 0x0026 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|DONT_GENERATE\l|cleanupExec()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|ExcHandler:  FINALLY\lSplitter:B:8:0x001b\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|FINALLY_INSNS\l|cleanupExec()\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|throw r2\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|doPendingDeferredStart()\lburpActive()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.FragmentManagerImpl.execSingleAction((r1v0 'this' android.support.v4.app.FragmentManagerImpl A[IMMUTABLE_TYPE, THIS]), (r2v0 android.support.v4.app.FragmentManagerImpl$OpGenerator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_17[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

