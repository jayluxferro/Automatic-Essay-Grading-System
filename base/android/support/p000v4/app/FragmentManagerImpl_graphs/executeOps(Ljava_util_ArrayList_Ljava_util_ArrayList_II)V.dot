digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.executeOps(Ljava\/util\/ArrayList;Ljava\/util\/ArrayList;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:0:0x0000, B:8:0x0029] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:8:0x0029\l|if (r5 \>= r6) goto L_0x002c\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|android.support.v4.app.BackStackRecord r0 = r3.get(r5)\lr2 = true\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r4.get(r5).booleanValue() == false) goto L_0x0023\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|r0.bumpBackStackNesting(\-1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r5 != (r6 + \-1)) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|r2 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:4:0x001b, B:5:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|r0.executePopOps(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|r0.bumpBackStackNesting(1)\lr0.executeOps()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:8:0x0029\l|int r5 = r5 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void android.support.v4.app.FragmentManagerImpl.executeOps((r3v0 java.util.ArrayList\<android.support.v4.app.BackStackRecord\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.ArrayList\<java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Landroid\/support\/v4\/app\/BackStackRecord;, \>;, Ljava\/util\/ArrayList\<, Ljava\/lang\/Boolean;, \>;II)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_12;
Node_7 -> Node_11;
Node_8 -> Node_0;
Node_10 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_8;
}

