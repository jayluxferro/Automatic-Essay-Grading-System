digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.execPendingActions()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  \l  (r4 I:android.support.v4.app.FragmentManagerImpl)\l  (r0 I:boolean)\l android.support.v4.app.FragmentManagerImpl.ensureExecReady(boolean):void type: DIRECT \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IGET  (r2 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord\>) = (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mTmpRecords java.util.ArrayList \l0x0007: IGET  (r3 I:java.util.ArrayList\<java.lang.Boolean\>) = (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mTmpIsPop java.util.ArrayList \l0x0009: INVOKE  (r2 I:boolean) = \l  (r4 I:android.support.v4.app.FragmentManagerImpl)\l  (r2 I:java.util.ArrayList)\l  (r3 I:java.util.ArrayList)\l android.support.v4.app.FragmentManagerImpl.generateOpsForPendingActions(java.util.ArrayList, java.util.ArrayList):boolean type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IPUT  \l  (r0 I:boolean)\l  (r4 I:android.support.v4.app.FragmentManagerImpl)\l android.support.v4.app.FragmentManagerImpl.mExecutingActions boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|SYNTHETIC\lSplitter:B:4:0x0011\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0011\l|0x0011: IGET  (r1 I:java.util.ArrayList\<android.support.v4.app.BackStackRecord\>) = (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mTmpRecords java.util.ArrayList A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l0x0013: IGET  (r2 I:java.util.ArrayList\<java.lang.Boolean\>) = (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mTmpIsPop java.util.ArrayList A[Catch:\{ all \-\> 0x001d \}]\l0x0015: INVOKE  \l  (r4 I:android.support.v4.app.FragmentManagerImpl)\l  (r1 I:java.util.ArrayList)\l  (r2 I:java.util.ArrayList)\l android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(java.util.ArrayList, java.util.ArrayList):void type: DIRECT A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.cleanupExec():void type: DIRECT \l0x001b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|ExcHandler: all null\lSplitter:B:4:0x0011\l|0x001d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.cleanupExec():void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: INVOKE  (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.doPendingDeferredStart():void type: VIRTUAL \l0x0025: INVOKE  (r4 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.burpActive():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.app.FragmentManagerImpl.execPendingActions((r4 'this' I:android.support.v4.app.FragmentManagerImpl A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

