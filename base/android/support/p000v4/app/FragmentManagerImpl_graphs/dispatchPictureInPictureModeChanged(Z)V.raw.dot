digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.dispatchPictureInPictureModeChanged(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.ArrayList\<android.support.v4.app.Fragment\>) = (r2 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mAdded java.util.ArrayList \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r1 I:java.util.ArrayList\<android.support.v4.app.Fragment\>) = (r2 I:android.support.v4.app.FragmentManagerImpl) android.support.v4.app.FragmentManagerImpl.mAdded java.util.ArrayList \l0x000c: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0010: CHECK_CAST  (r1 I:android.support.v4.app.Fragment) = (android.support.v4.app.Fragment) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r1 I:android.support.v4.app.Fragment), (r3 I:boolean) android.support.v4.app.Fragment.performPictureInPictureModeChanged(boolean):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.FragmentManagerImpl.dispatchPictureInPictureModeChanged((r2 'this' I:android.support.v4.app.FragmentManagerImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
}

