digraph "CFG forandroid.support.v4.app.FragmentManagerImpl.reverseTransit(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (8194(0x2002, float:1.1482E\-41) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (4099(0x1003, float:5.744E\-42) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (4097(0x1001, float:5.741E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (4097(0x1001, float:5.741E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (4099(0x1003, float:5.744E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.app.FragmentManagerImpl.reverseTransit((r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

