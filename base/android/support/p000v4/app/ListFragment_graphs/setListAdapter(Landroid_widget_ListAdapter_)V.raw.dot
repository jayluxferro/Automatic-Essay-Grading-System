digraph "CFG forandroid.support.v4.app.ListFragment.setListAdapter(Landroid\/widget\/ListAdapter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.widget.ListAdapter) = (r4 I:android.support.v4.app.ListFragment) android.support.v4.app.ListFragment.mAdapter android.widget.ListAdapter \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IPUT  \l  (r5 I:android.widget.ListAdapter)\l  (r4 I:android.support.v4.app.ListFragment)\l android.support.v4.app.ListFragment.mAdapter android.widget.ListAdapter \l0x000b: IGET  (r3 I:android.widget.ListView) = (r4 I:android.support.v4.app.ListFragment) android.support.v4.app.ListFragment.mList android.widget.ListView \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r3 I:android.widget.ListView) = (r4 I:android.support.v4.app.ListFragment) android.support.v4.app.ListFragment.mList android.widget.ListView \l0x0011: INVOKE  \l  (r3 I:android.widget.ListView)\l  (r5 I:android.widget.ListAdapter)\l android.widget.ListView.setAdapter(android.widget.ListAdapter):void type: VIRTUAL \l0x0014: IGET  (r5 I:boolean) = (r4 I:android.support.v4.app.ListFragment) android.support.v4.app.ListFragment.mListShown boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r5 I:android.view.View) = (r4 I:android.support.v4.app.ListFragment) android.support.v4.app.ListFragment.getView():android.view.View type: VIRTUAL \l0x001e: INVOKE  (r5 I:android.os.IBinder) = (r5 I:android.view.View) android.view.View.getWindowToken():android.os.IBinder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: INVOKE  \l  (r4 I:android.support.v4.app.ListFragment)\l  (r2 I:boolean)\l  (r1 I:boolean)\l android.support.v4.app.ListFragment.setListShown(boolean, boolean):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.app.ListFragment.setListAdapter((r4 'this' I:android.support.v4.app.ListFragment A[IMMUTABLE_TYPE, THIS]), (r5 I:android.widget.ListAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

