digraph "CFG forandroid.support.v4.app.FragmentTransitionImpl.bfsAddViewChildren(Ljava\/util\/List;Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: INVOKE  (r1 I:boolean) = (r6 I:java.util.List), (r7 I:android.view.View), (r0 I:int) android.support.v4.app.FragmentTransitionImpl.containedBeforeIndex(java.util.List, android.view.View, int):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r6 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x000e: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r7 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x003b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.Object) = (r6 I:java.util.List), (r7 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r1 I:android.view.View) = (android.view.View) (r1 I:?[OBJECT, ARRAY]) \l0x001b: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) android.view.ViewGroup \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CHECK_CAST  (r1 I:android.view.ViewGroup) = (android.view.ViewGroup) (r1 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r2 I:int) = (r1 I:android.view.ViewGroup) android.view.ViewGroup.getChildCount():int type: VIRTUAL \l0x0025: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:14:0x0038 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: INVOKE  (r4 I:android.view.View) = (r1 I:android.view.ViewGroup), (r3 I:int) android.view.ViewGroup.getChildAt(int):android.view.View type: VIRTUAL \l0x002c: INVOKE  (r5 I:boolean) = (r6 I:java.util.List), (r4 I:android.view.View), (r0 I:int) android.support.v4.app.FragmentTransitionImpl.containedBeforeIndex(java.util.List, android.view.View, int):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: INVOKE  (r6 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{protected static void android.support.v4.app.FragmentTransitionImpl.bfsAddViewChildren((r6 I:java.util.List\<android.view.View\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Landroid\/view\/View;, \>;, Landroid\/view\/View;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_4;
}

