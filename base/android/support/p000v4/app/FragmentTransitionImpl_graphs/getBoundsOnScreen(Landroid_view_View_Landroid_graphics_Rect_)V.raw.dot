digraph "CFG forandroid.support.v4.app.FragmentTransitionImpl.getBoundsOnScreen(Landroid\/view\/View;Landroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0003: INVOKE  (r7 I:android.view.View), (r0 I:int[]) android.view.View.getLocationOnScreen(int[]):void type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0009: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: AGET  (r4 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x000c: AGET  (r1 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x000e: INVOKE  (r5 I:int) = (r7 I:android.view.View) android.view.View.getWidth():int type: VIRTUAL \l0x0012: ARITH  (r1 I:int) = (r1 I:int) + (r5 I:int) \l0x0013: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0015: INVOKE  (r7 I:int) = (r7 I:android.view.View) android.view.View.getHeight():int type: VIRTUAL \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l0x001a: INVOKE  \l  (r8 I:android.graphics.Rect)\l  (r2 I:int)\l  (r4 I:int)\l  (r1 I:int)\l  (r0 I:int)\l android.graphics.Rect.set(int, int, int, int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.support.v4.app.FragmentTransitionImpl.getBoundsOnScreen((r6 'this' I:android.support.v4.app.FragmentTransitionImpl A[IMMUTABLE_TYPE, THIS]), (r7 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

