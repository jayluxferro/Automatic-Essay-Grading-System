digraph "CFG forandroid.support.v4.provider.FontsContractCompat.getCertificates(Landroid\/support\/v4\/provider\/FontRequest;Landroid\/content\/res\/Resources;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r1 I:android.support.v4.provider.FontRequest) android.support.v4.provider.FontRequest.getCertificates():java.util.List type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:java.util.List) = (r1 I:android.support.v4.provider.FontRequest) android.support.v4.provider.FontRequest.getCertificates():java.util.List type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r1 I:java.util.List\<java.util.List\<byte[]\>\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r1 I:int) = (r1 I:android.support.v4.provider.FontRequest) android.support.v4.provider.FontRequest.getCertificatesArrayResId():int type: VIRTUAL \l0x000f: INVOKE  (r1 I:java.util.List) = (r2 I:android.content.res.Resources), (r1 I:int) android.support.v4.content.res.FontResourcesParserCompat.readCerts(android.content.res.Resources, int):java.util.List type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r1 I:java.util.List\<java.util.List\<byte[]\>\>) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<java.util.List\<byte[]\>\> android.support.v4.provider.FontsContractCompat.getCertificates((r1 I:android.support.v4.provider.FontRequest A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.content.res.Resources A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/support\/v4\/provider\/FontRequest;, Landroid\/content\/res\/Resources;, ), Ljava\/util\/List\<, Ljava\/util\/List\<, [B\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

