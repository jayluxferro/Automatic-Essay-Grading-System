digraph "CFG forandroid.support.v4.provider.RawDocumentFile.getTypeForName(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:int) = (r1 I:java.lang.String), (r0 I:int) java.lang.String.lastIndexOf(int):int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x000a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x000e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x0012: INVOKE  (r0 I:android.webkit.MimeTypeMap) =  android.webkit.MimeTypeMap.getSingleton():android.webkit.MimeTypeMap type: STATIC \l0x0016: INVOKE  (r1 I:java.lang.String) = (r0 I:android.webkit.MimeTypeMap), (r1 I:java.lang.String) android.webkit.MimeTypeMap.getMimeTypeFromExtension(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN  (r1 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: CONST_STR  (r1 I:java.lang.String) =  \"application\/octet\-stream\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String android.support.v4.provider.RawDocumentFile.getTypeForName((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

