digraph "CFG forandroid.support.v4.provider.RawDocumentFile.renameTo(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.File) =  java.io.File \l0x0002: IGET  (r1 I:java.io.File) = (r2 I:android.support.v4.provider.RawDocumentFile) android.support.v4.provider.RawDocumentFile.mFile java.io.File \l0x0004: INVOKE  (r1 I:java.io.File) = (r1 I:java.io.File) java.io.File.getParentFile():java.io.File type: VIRTUAL \l0x0008: INVOKE  \l  (r0 I:java.io.File)\l  (r1 I:java.io.File)\l  (r3 I:java.lang.String)\l java.io.File.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x000b: IGET  (r3 I:java.io.File) = (r2 I:android.support.v4.provider.RawDocumentFile) android.support.v4.provider.RawDocumentFile.mFile java.io.File \l0x000d: INVOKE  (r3 I:boolean) = (r3 I:java.io.File), (r0 I:java.io.File) java.io.File.renameTo(java.io.File):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IPUT  \l  (r0 I:java.io.File)\l  (r2 I:android.support.v4.provider.RawDocumentFile)\l android.support.v4.provider.RawDocumentFile.mFile java.io.File \l0x0015: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN  (r3 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.provider.RawDocumentFile.renameTo((r2 'this' I:android.support.v4.provider.RawDocumentFile A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

