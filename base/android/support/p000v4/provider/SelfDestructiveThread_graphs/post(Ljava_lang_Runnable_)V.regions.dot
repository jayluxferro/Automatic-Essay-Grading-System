digraph "CFG forandroid.support.v4.provider.SelfDestructiveThread.post(Ljava\/lang\/Runnable;)V" {
subgraph cluster_Region_28379264 {
label = "R(2:0|2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_265826949 {
label = "Synchronized:R(2:1|(2:(1:5)|6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_742345213 {
label = "R(2:(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1744315547 {
label = "IF [B:4:0x0006] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|if (r5.mThread == null) goto L_0x0008\l}"];
subgraph cluster_Region_1854199276 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0008|r5.mThread = new android.os.HandlerThread(r5.mThreadName, r5.mPriority)\lr5.mThread.start()\lr5.mHandler = new android.os.Handler(r5.mThread.getLooper(), r5.mCallback)\lr5.mGeneration++\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x002c|r5.mHandler.removeMessages(0)\lr5.mHandler.sendMessage(r5.mHandler.obtainMessage(1, r6))\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x003d|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x003d: MONITOR_EXIT  \l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x003e}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x003f|REMOVE\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0040|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0041|REMOVE\l|throw r6\l}"];
MethodNode[shape=record,label="{private void android.support.v4.provider.SelfDestructiveThread.post((r5v0 'this' android.support.v4.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Runnable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

