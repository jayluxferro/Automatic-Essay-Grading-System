digraph "CFG forandroid.support.v4.provider.SelfDestructiveThread.onDestruction()V" {
subgraph cluster_Region_1356490076 {
label = "R(2:0|2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_406450462 {
label = "Synchronized:R(2:1|(1:(1:(1:7))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_215881532 {
label = "R(1:(1:(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_2018855531 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2066096312 {
label = "IF [B:4:0x000a] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r3.mHandler.hasMessages(1) != true) goto L_0x000e\l}"];
subgraph cluster_Region_750821315 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000e|r3.mThread.quit()\lr3.mThread = null\lr3.mHandler = null\l}"];
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x000c: MONITOR_EXIT  \l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x0018: MONITOR_EXIT  \l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001a|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001b|REMOVE\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001c|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{void android.support.v4.provider.SelfDestructiveThread.onDestruction((r3v0 'this' android.support.v4.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

