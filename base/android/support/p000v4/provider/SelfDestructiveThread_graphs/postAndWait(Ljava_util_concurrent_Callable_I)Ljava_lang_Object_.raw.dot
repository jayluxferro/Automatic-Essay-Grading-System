digraph "CFG forandroid.support.v4.provider.SelfDestructiveThread.postAndWait(Ljava\/util\/concurrent\/Callable;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r7 I:java.util.concurrent.locks.ReentrantLock) =  java.util.concurrent.locks.ReentrantLock \l0x0002: INVOKE  (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r8 I:java.util.concurrent.locks.Condition) = (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.newCondition():java.util.concurrent.locks.Condition type: VIRTUAL \l0x0009: NEW_INSTANCE  (r9 I:java.util.concurrent.atomic.AtomicReference) =  java.util.concurrent.atomic.AtomicReference \l0x000b: INVOKE  (r9 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.\<init\>():void type: DIRECT \l0x000e: NEW_INSTANCE  (r10 I:java.util.concurrent.atomic.AtomicBoolean) =  java.util.concurrent.atomic.AtomicBoolean \l0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  \l  (r10 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r0 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.\<init\>(boolean):void type: DIRECT \l0x0014: NEW_INSTANCE  (r11 I:android.support.v4.provider.SelfDestructiveThread$3) =  android.support.v4.provider.SelfDestructiveThread$3 \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0019: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x001b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x001d: INVOKE  \l  (r0 I:android.support.v4.provider.SelfDestructiveThread$3)\l  (r1 I:android.support.v4.provider.SelfDestructiveThread)\l  (r2 I:java.util.concurrent.atomic.AtomicReference)\l  (r3 I:java.util.concurrent.Callable)\l  (r4 I:java.util.concurrent.locks.ReentrantLock)\l  (r5 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r6 I:java.util.concurrent.locks.Condition)\l android.support.v4.provider.SelfDestructiveThread.3.\<init\>(android.support.v4.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition):void type: DIRECT \l0x0020: INVOKE  \l  (r12 I:android.support.v4.provider.SelfDestructiveThread)\l  (r11 I:java.lang.Runnable)\l android.support.v4.provider.SelfDestructiveThread.post(java.lang.Runnable):void type: DIRECT \l0x0023: INVOKE  (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.lock():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|SYNTHETIC\lSplitter:B:1:0x0026\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0026\l|0x0026: INVOKE  (r13 I:boolean) = (r10 I:java.util.concurrent.atomic.AtomicBoolean) java.util.concurrent.atomic.AtomicBoolean.get():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: INVOKE  (r13 I:java.lang.Object) = (r9 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l0x002f: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: INVOKE  (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: RETURN  (r13 I:T) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|SYNTHETIC\lSplitter:B:7:0x0034\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0034\l|0x0034: SGET  (r13 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ all \-\> 0x005d \}, TRY_ENTER]\l0x0036: CAST  (r0 I:long) = (long) (r14 I:int) A[Catch:\{ all \-\> 0x005d \}]\l0x0037: INVOKE  (r13 I:long) = (r13 I:java.util.concurrent.TimeUnit), (r0 I:long) java.util.concurrent.TimeUnit.toNanos(long):long type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l0x003a: NOP   A[TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|SYNTHETIC\lSplitter:B:9:0x003b\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x003b\l|0x003b: INVOKE  (r0 I:long) = (r8 I:java.util.concurrent.locks.Condition), (r13 I:long) java.util.concurrent.locks.Condition.awaitNanos(long):long type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0040 \}, TRY_ENTER]\l0x003e: NOP   A[TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: MOVE  (r13 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|SYNTHETIC\lSplitter:B:12:0x0040\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0040\l|0x0040: INVOKE  (r0 I:boolean) = (r10 I:java.util.concurrent.atomic.AtomicBoolean) java.util.concurrent.atomic.AtomicBoolean.get():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}, ExcHandler: InterruptedException null, TRY_ENTER]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004e A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: INVOKE  (r13 I:java.lang.Object) = (r9 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x005d \}]\l0x0049: NOP   A[TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|0x004a: INVOKE  (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: RETURN  (r13 I:T) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0050: CMP_L  (r0 I:int) = (r13 I:long), (r0 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0055 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0055|SYNTHETIC\lSplitter:B:21:0x0055\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x0055\l|0x0055: NEW_INSTANCE  (r13 I:java.lang.InterruptedException) =  java.lang.InterruptedException A[Catch:\{ all \-\> 0x005d \}, TRY_ENTER]\l0x0057: CONST_STR  (r14 I:java.lang.String) =  \"timeout\" A[Catch:\{ all \-\> 0x005d \}]\l0x0059: INVOKE  \l  (r13 I:java.lang.InterruptedException)\l  (r14 I:java.lang.String)\l java.lang.InterruptedException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005d \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x005c|0x005c: THROW  (r13 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005d \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|ExcHandler: all null\lSplitter:B:1:0x0026\l|0x005d: MOVE_EXCEPTION  (r13 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x005e|0x005e: INVOKE  (r7 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: THROW  (r13 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T android.support.v4.provider.SelfDestructiveThread.postAndWait((r12 'this' I:android.support.v4.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS]), (r13 I:java.util.concurrent.Callable\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/concurrent\/Callable\<, TT;\>;I)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_24;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_9[style=dashed];
Node_21 -> Node_22;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
}

