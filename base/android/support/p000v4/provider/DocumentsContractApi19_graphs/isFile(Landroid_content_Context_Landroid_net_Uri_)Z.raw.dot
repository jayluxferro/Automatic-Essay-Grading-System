digraph "CFG forandroid.support.v4.provider.DocumentsContractApi19.isFile(Landroid\/content\/Context;Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r0 I:android.content.Context), (r1 I:android.net.Uri) android.support.v4.provider.DocumentsContractApi19.getRawType(android.content.Context, android.net.Uri):java.lang.String type: STATIC \l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"vnd.android.document\/directory\" \l0x0006: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r0 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.provider.DocumentsContractApi19.isFile((r0 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

