digraph "CFG forandroid.support.v4.provider.DocumentsContractApi19.isVirtual(Landroid\/content\/Context;Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r4 I:android.content.Context), (r5 I:android.net.Uri) android.provider.DocumentsContract.isDocumentUri(android.content.Context, android.net.Uri):boolean type: STATIC \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r4 I:long) = (r4 I:android.content.Context), (r5 I:android.net.Uri) android.support.v4.provider.DocumentsContractApi19.getFlags(android.content.Context, android.net.Uri):long type: STATIC \l0x000c: CONST  (r2 I:?[long, double]) = (512(0x200, double:2.53E\-321) ?[long, double]) \l0x000e: ARITH  (r4 I:long) = (r4 I:long) & (r2 I:long) \l0x000f: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0011: CMP_L  (r4 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.provider.DocumentsContractApi19.isVirtual((r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

