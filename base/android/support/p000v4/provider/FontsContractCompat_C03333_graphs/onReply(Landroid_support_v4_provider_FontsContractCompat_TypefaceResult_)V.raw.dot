digraph "CFG forandroid.support.v4.provider.FontsContractCompat.3.onReply(Landroid\/support\/v4\/provider\/FontsContractCompat$TypefaceResult;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r3 I:java.lang.Object) =  android.support.v4.provider.FontsContractCompat.sLock java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r2 I:android.support.v4.util.SimpleArrayMap\<java.lang.String, java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>\>) =  android.support.v4.provider.FontsContractCompat.sPendingReplies android.support.v4.util.SimpleArrayMap A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0005: IGET  (r4 I:java.lang.String) = (r5 I:android.support.v4.provider.FontsContractCompat$3) android.support.v4.provider.FontsContractCompat.3.val$id java.lang.String A[Catch:\{ all \-\> 0x002c \}]\l0x0007: INVOKE  (r1 I:java.lang.Object) = \l  (r2 I:android.support.v4.util.SimpleArrayMap)\l  (r4 I:java.lang.Object)\l android.support.v4.util.SimpleArrayMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l0x000b: CHECK_CAST  (r1 I:java.util.ArrayList) = (java.util.ArrayList) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('replies' java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN   A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: SGET  (r2 I:android.support.v4.util.SimpleArrayMap\<java.lang.String, java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>\>) =  android.support.v4.provider.FontsContractCompat.sPendingReplies android.support.v4.util.SimpleArrayMap A[Catch:\{ all \-\> 0x002c \}]\l0x0013: IGET  (r4 I:java.lang.String) = (r5 I:android.support.v4.provider.FontsContractCompat$3) android.support.v4.provider.FontsContractCompat.3.val$id java.lang.String A[Catch:\{ all \-\> 0x002c \}]\l0x0015: INVOKE  \l  (r2 I:android.support.v4.util.SimpleArrayMap)\l  (r4 I:java.lang.Object)\l android.support.v4.util.SimpleArrayMap.remove(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: INVOKE  (r2 I:int) = \l  (r1 I:java.util.ArrayList A[D('replies' java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>)])\l java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:java.util.ArrayList A[D('replies' java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>)])\l  (r0 I:int A[D('i' int)])\l java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0024: CHECK_CAST  (r2 I:android.support.v4.provider.SelfDestructiveThread$ReplyCallback) = (android.support.v4.provider.SelfDestructiveThread$ReplyCallback) (r2 I:?[OBJECT, ARRAY]) \l0x0026: INVOKE  \l  (r2 I:android.support.v4.provider.SelfDestructiveThread$ReplyCallback)\l  (r6 I:java.lang.Object A[D('typeface' android.support.v4.provider.FontsContractCompat$TypefaceResult)])\l android.support.v4.provider.SelfDestructiveThread.ReplyCallback.onReply(java.lang.Object):void type: INTERFACE \l0x0029: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x002c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|SYNTHETIC\lSplitter:B:14:0x002d\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x002d\l|0x002d: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v4.provider.FontsContractCompat.3.onReply((r5 'this' I:android.support.v4.provider.FontsContractCompat$3 A[IMMUTABLE_TYPE, THIS]), (r6 I:android.support.v4.provider.FontsContractCompat$TypefaceResult A[D('typeface' android.support.v4.provider.FontsContractCompat$TypefaceResult), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x002c: r0 'i' int\l  0x000d\-0x002c: r1 'replies' java.util.ArrayList\<android.support.v4.provider.SelfDestructiveThread$ReplyCallback\<android.support.v4.provider.FontsContractCompat$TypefaceResult\>\>\l  ?\-0x002e: r6 'typeface' android.support.v4.provider.FontsContractCompat$TypefaceResult\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_6;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16;
Node_15 -> Node_13;
}

