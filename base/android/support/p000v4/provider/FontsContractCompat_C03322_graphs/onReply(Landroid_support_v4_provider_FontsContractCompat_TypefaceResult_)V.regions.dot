digraph "CFG forandroid.support.v4.provider.FontsContractCompat.2.onReply(Landroid\/support\/v4\/provider\/FontsContractCompat$TypefaceResult;)V" {
subgraph cluster_Region_926664152 {
label = "R(1:(1:1)(1:(1:4)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_629084118 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: R(1:(1:4)(1:5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == null) goto L_0x0002\l}"];
subgraph cluster_Region_1876687622 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|r11.callbackFailAsync(1, r12)\l}"];
}
subgraph cluster_Region_1943035925 {
label = "R(1:(1:4)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_447508146 {
label = "IF [B:3:0x000d] THEN: R(1:4) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r4.mResult == 0) goto L_0x000f\l}"];
subgraph cluster_Region_1206961038 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|r11.callbackSuccessAsync(r4.mTypeface, r12)\l}"];
}
subgraph cluster_Region_2000884669 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0019|r11.callbackFailAsync(r4.mResult, r12)\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v4.provider.FontsContractCompat.2.onReply((r3v0 'this' android.support.v4.provider.FontsContractCompat$2 A[IMMUTABLE_TYPE, THIS]), (r4v0 'typeface' android.support.v4.provider.FontsContractCompat$TypefaceResult A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_8;
Node_2 -> Node_3;
}

