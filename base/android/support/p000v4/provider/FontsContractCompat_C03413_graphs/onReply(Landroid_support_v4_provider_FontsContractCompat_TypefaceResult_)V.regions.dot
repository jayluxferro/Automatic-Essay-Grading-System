digraph "CFG forandroid.support.v4.provider.FontsContractCompat.3.onReply(Landroid\/support\/v4\/provider\/FontsContractCompat$TypefaceResult;)V" {
subgraph cluster_Region_1983702858 {
label = "R(2:0|2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_982139481 {
label = "Synchronized:R(2:1|(2:3|(1:7)(0)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_666683456 {
label = "R(2:3|(1:7)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|java.util.ArrayList java.util.ArrayList r1 = android.support.p000v4.provider.FontsContractCompat.sPendingReplies.get(r0)\l}"];
subgraph cluster_IfRegion_42810814 {
label = "IF [B:4:0x000d] THEN: R(1:7) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r1 != null) goto L_0x0011\l}"];
subgraph cluster_Region_35963214 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0011|android.support.p000v4.provider.FontsContractCompat.sPendingReplies.remove(r0)\l}"];
}
subgraph cluster_Region_618773940 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000f|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x000f: MONITOR_EXIT  \l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x0018: MONITOR_EXIT  \l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019|r0 = 0\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001a|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:9:0x0019, B:12:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x001a\-\>B:12:0x0020\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001e|if (r0 \>= r1.size()) goto L_0x002c\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0020|LOOP_END\lLOOP:0: B:10:0x001a\-\>B:12:0x0020\l|((android.support.p000v4.provider.SelfDestructiveThread.ReplyCallback) r1.get(r0)).onReply(r5)\lr0++\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002c|RETURN\l|return\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002d|LOOP_START\lREMOVE\lLOOP:1: B:14:0x002d\-\>B:19:0x002d\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x002e|SYNTHETIC\lREMOVE\lSplitter:B:15:0x002e\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|REMOVE\lSplitter:B:15:0x002e\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x002f|REMOVE\l|throw r5\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x002c|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x002d|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:1: B:14:0x002d\-\>B:19:0x002d\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x002f|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x002d|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public void android.support.v4.provider.FontsContractCompat.3.onReply((r4v0 'this' android.support.v4.provider.FontsContractCompat$3 A[IMMUTABLE_TYPE, THIS]), (r5v0 android.support.v4.provider.FontsContractCompat$TypefaceResult A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lCode restructure failed: missing block: B:9:0x0019, code lost:\l    r0 = 0;\l\lCode restructure failed: missing block: B:11:0x001e, code lost:\l    if (r0 \>= r1.size()) goto L_0x002c;\l\lCode restructure failed: missing block: B:12:0x0020, code lost:\l    ((android.support.p000v4.provider.SelfDestructiveThread.ReplyCallback) r1.get(r0)).onReply(r5);\l    r0 = r0 + 1;\l\lCode restructure failed: missing block: B:13:0x002c, code lost:\l    return;\l\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_20;
Node_16 -> Node_21;
Node_18 -> Node_13;
Node_19 -> Node_14;
Node_20 -> Node_17;
Node_21 -> Node_19;
}

