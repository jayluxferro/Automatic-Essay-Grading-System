digraph "CFG forandroid.support.v4.media.AudioAttributesCompat.toVolumeStreamType(ZII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x000b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0014 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: CONST  (r2 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: RETURN  (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|0x0015: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] t:[0x002c, 0x002b, 0x002a, 0x0024, 0x0023, 0x0021, 0x001f, 0x0021, 0x0021, 0x0021, 0x0021, 0x001c, 0x002b, 0x001b, 0x002b, 0x0018, 0x002b] \l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0031 \l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|0x001a: RETURN  (r4 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001b|0x001b: RETURN  (r1 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x001e|0x001e: RETURN  (r3 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|0x0020: RETURN  (r3 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0021|0x0021: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0022|0x0022: RETURN  (r3 I:int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0023|0x0023: RETURN  (r0 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0027 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0027|0x0027: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0029|0x0029: RETURN  (r2 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x002a|0x002a: RETURN  (r2 I:int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|0x002b: RETURN  (r4 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0030 \l}"];
Node_31 [shape=record,label="{31\:\ 0x002e|0x002e: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0030|0x0030: RETURN  (r4 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0031|0x0031: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0033: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0035: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0038: CONST_STR  (r0 I:java.lang.String) =  \"Unknown usage value \" \l0x003a: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0040: CONST_STR  (r5 I:java.lang.String) =  \" in audio attributes\" \l0x0042: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0049: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x004c|0x004c: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static int android.support.v4.media.AudioAttributesCompat.toVolumeStreamType((r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_4;
Node_2 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_13 -> Node_17;
Node_13 -> Node_19;
Node_13 -> Node_21;
Node_13 -> Node_23;
Node_13 -> Node_24;
Node_13 -> Node_28;
Node_13 -> Node_29;
Node_13 -> Node_30;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_33;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_33 -> Node_34;
}

