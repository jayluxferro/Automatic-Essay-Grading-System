digraph "CFG forandroid.support.v4.media.session.MediaSessionCompat.Token.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r3 != r4) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r4 instanceof android.support.p000v4.media.session.MediaSessionCompat.Token) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|android.support.v4.media.session.MediaSessionCompat$Token r4 = (android.support.p000v4.media.session.MediaSessionCompat.Token) r4\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if (r3.mInner != null) goto L_0x0017\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010}"];
Node_9 [shape=record,label="{9\:\ 0x0012|if (r4.mInner != null) goto L_0x0015\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017}"];
Node_12 [shape=record,label="{12\:\ 0x0019|if (r4.mInner != null) goto L_0x001c\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c}"];
Node_15 [shape=record,label="{15\:\ 0x0024|RETURN\l|return r3.mInner.equals(r4.mInner)\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.media.session.MediaSessionCompat.Token.equals((r3v0 'this' android.support.v4.media.session.MediaSessionCompat$Token A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_16[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

