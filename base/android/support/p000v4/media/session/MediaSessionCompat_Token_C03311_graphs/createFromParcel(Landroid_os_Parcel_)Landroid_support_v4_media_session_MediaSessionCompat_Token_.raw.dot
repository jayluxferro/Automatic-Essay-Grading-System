digraph "CFG forandroid.support.v4.media.session.MediaSessionCompat.Token.1.createFromParcel(Landroid\/os\/Parcel;)Landroid\/support\/v4\/media\/session\/MediaSessionCompat$Token;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  (r3 I:android.os.Parcelable) = (r3 I:android.os.Parcel), (r0 I:java.lang.ClassLoader) android.os.Parcel.readParcelable(java.lang.ClassLoader):android.os.Parcelable type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r3 I:android.os.IBinder) = (r3 I:android.os.Parcel) android.os.Parcel.readStrongBinder():android.os.IBinder type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: NEW_INSTANCE  (r0 I:android.support.v4.media.session.MediaSessionCompat$Token) =  android.support.v4.media.session.MediaSessionCompat$Token \l0x0012: INVOKE  \l  (r0 I:android.support.v4.media.session.MediaSessionCompat$Token)\l  (r3 I:java.lang.Object)\l android.support.v4.media.session.MediaSessionCompat.Token.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN  \l  (r0 I:android.support.v4.media.session.MediaSessionCompat$Token)\l \l}"];
MethodNode[shape=record,label="{public android.support.v4.media.session.MediaSessionCompat$Token android.support.v4.media.session.MediaSessionCompat.Token.1.createFromParcel((r2 'this' I:android.support.v4.media.session.MediaSessionCompat$Token$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

