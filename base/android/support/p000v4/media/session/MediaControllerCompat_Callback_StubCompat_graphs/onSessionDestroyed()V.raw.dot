digraph "CFG forandroid.support.v4.media.session.MediaControllerCompat.Callback.StubCompat.onSessionDestroyed()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<android.support.v4.media.session.MediaControllerCompat$Callback\>) = \l  (r3 I:android.support.v4.media.session.MediaControllerCompat$Callback$StubCompat)\l android.support.v4.media.session.MediaControllerCompat.Callback.StubCompat.mCallback java.lang.ref.WeakReference \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) java.lang.ref.WeakReference.get():java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:android.support.v4.media.session.MediaControllerCompat$Callback) = (android.support.v4.media.session.MediaControllerCompat$Callback) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  \l  (r0 I:android.support.v4.media.session.MediaControllerCompat$Callback)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r2 I:android.os.Bundle)\l android.support.v4.media.session.MediaControllerCompat.Callback.postToHandler(int, java.lang.Object, android.os.Bundle):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.media.session.MediaControllerCompat.Callback.StubCompat.onSessionDestroyed((r3 'this' I:android.support.v4.media.session.MediaControllerCompat$Callback$StubCompat A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.os.RemoteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

