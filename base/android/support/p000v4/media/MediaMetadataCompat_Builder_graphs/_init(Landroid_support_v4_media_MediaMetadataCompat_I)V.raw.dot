digraph "CFG forandroid.support.v4.media.MediaMetadataCompat.Builder.\<init\>(Landroid\/support\/v4\/media\/MediaMetadataCompat;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:android.support.v4.media.MediaMetadataCompat$Builder)\l  (r4 I:android.support.v4.media.MediaMetadataCompat)\l android.support.v4.media.MediaMetadataCompat.Builder.\<init\>(android.support.v4.media.MediaMetadataCompat):void type: DIRECT \l0x0003: IGET  (r4 I:android.os.Bundle) = (r3 I:android.support.v4.media.MediaMetadataCompat$Builder) android.support.v4.media.MediaMetadataCompat.Builder.mBundle android.os.Bundle \l0x0005: INVOKE  (r4 I:java.util.Set) = (r4 I:android.os.Bundle) android.os.Bundle.keySet():java.util.Set type: VIRTUAL \l0x0009: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0039 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x0019: IGET  (r1 I:android.os.Bundle) = (r3 I:android.support.v4.media.MediaMetadataCompat$Builder) android.support.v4.media.MediaMetadataCompat.Builder.mBundle android.os.Bundle \l0x001b: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.os.Bundle), (r0 I:java.lang.String) android.os.Bundle.get(java.lang.String):java.lang.Object type: VIRTUAL \l0x001f: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) android.graphics.Bitmap \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: CHECK_CAST  (r1 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r1 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:int) = (r1 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r2 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: INVOKE  (r2 I:int) = (r1 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IF  (r2 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:1:0x000d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: INVOKE  (r1 I:android.graphics.Bitmap) = \l  (r3 I:android.support.v4.media.MediaMetadataCompat$Builder)\l  (r1 I:android.graphics.Bitmap)\l  (r5 I:int)\l android.support.v4.media.MediaMetadataCompat.Builder.scaleBitmap(android.graphics.Bitmap, int):android.graphics.Bitmap type: DIRECT \l0x0035: INVOKE  \l  (r3 I:android.support.v4.media.MediaMetadataCompat$Builder)\l  (r0 I:java.lang.String)\l  (r1 I:android.graphics.Bitmap)\l android.support.v4.media.MediaMetadataCompat.Builder.putBitmap(java.lang.String, android.graphics.Bitmap):android.support.v4.media.MediaMetadataCompat$Builder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.support.v4.media.MediaMetadataCompat.Builder.\<init\>((r3 'this' I:android.support.v4.media.MediaMetadataCompat$Builder A[IMMUTABLE_TYPE, THIS]), (r4 I:android.support.v4.media.MediaMetadataCompat A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_1;
}

