digraph "CFG forandroid.support.v4.media.MediaMetadataCompat.Builder.\<init\>(Landroid\/support\/v4\/media\/MediaMetadataCompat;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|this(r4)\ljava.util.Iterator r4 = r3.mBundle.keySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lLOOP:0: B:1:0x000d\-\>B:11:0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|if (r4.hasNext() == false) goto L_0x0039\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|java.lang.String r0 = (java.lang.String) r4.next()\ljava.lang.Object r1 = r3.mBundle.get(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|if ((r1 instanceof android.graphics.Bitmap) == false) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|android.graphics.Bitmap r1 = (android.graphics.Bitmap) r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|if (r1.getHeight() \> r5) goto L_0x0031\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b}"];
Node_8 [shape=record,label="{8\:\ 0x002f|if (r1.getWidth() \<= r5) goto L_0x000d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|putBitmap(r0, scaleBitmap(r1, r5))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000d\-\>B:11:0x000d\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void android.support.v4.media.MediaMetadataCompat.Builder.\<init\>((r3v0 'this' android.support.v4.media.MediaMetadataCompat$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 android.support.v4.media.MediaMetadataCompat A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_15;
Node_11 -> Node_1;
Node_12 -> Node_10;
Node_13 -> Node_11;
Node_14 -> Node_11;
Node_15 -> Node_11;
}

