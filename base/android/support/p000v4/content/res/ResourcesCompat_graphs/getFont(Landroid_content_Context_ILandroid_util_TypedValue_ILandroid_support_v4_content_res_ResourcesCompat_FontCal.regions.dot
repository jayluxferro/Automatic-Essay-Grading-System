digraph "CFG forandroid.support.v4.content.res.ResourcesCompat.getFont(Landroid\/content\/Context;ILandroid\/util\/TypedValue;ILandroid\/support\/v4\/content\/res\/ResourcesCompat$FontCallback;)Landroid\/graphics\/Typeface;" {
subgraph cluster_Region_2010857291 {
label = "R(1:(2:(1:2)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_748139250 {
label = "R(2:(1:2)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_551471024 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r7.isRestricted() == true) goto L_0x0006\l}"];
subgraph cluster_Region_824595929 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_522786257 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|RETURN\l|return loadFont(r7, r8, r9, r10, r11, (android.os.Handler) null, true)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
MethodNode[shape=record,label="{public static android.graphics.Typeface android.support.v4.content.res.ResourcesCompat.getFont((r7v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 android.util.TypedValue A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 android.support.v4.content.res.ResourcesCompat$FontCallback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.FontRes, \{\}], , , Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.content.res.Resources$NotFoundException]\}], Annotation[BUILD, android.support.annotation.RestrictTo, \{value=[android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP android.support.annotation.RestrictTo$Scope]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_0 -> Node_1;
Node_3 -> Node_4;
}

