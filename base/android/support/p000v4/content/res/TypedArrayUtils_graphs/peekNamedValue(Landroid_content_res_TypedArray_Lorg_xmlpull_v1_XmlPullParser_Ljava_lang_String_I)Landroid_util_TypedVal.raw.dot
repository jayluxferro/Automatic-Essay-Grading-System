digraph "CFG forandroid.support.v4.content.res.TypedArrayUtils.peekNamedValue(Landroid\/content\/res\/TypedArray;Lorg\/xmlpull\/v1\/XmlPullParser;Ljava\/lang\/String;I)Landroid\/util\/TypedValue;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:boolean) = \l  (r1 I:org.xmlpull.v1.XmlPullParser)\l  (r2 I:java.lang.String)\l android.support.v4.content.res.TypedArrayUtils.hasAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:android.util.TypedValue) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r0 I:android.util.TypedValue) = (r0 I:android.content.res.TypedArray), (r3 I:int) android.content.res.TypedArray.peekValue(int):android.util.TypedValue type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r0 I:android.util.TypedValue) \l}"];
MethodNode[shape=record,label="{public static android.util.TypedValue android.support.v4.content.res.TypedArrayUtils.peekNamedValue((r0 I:android.content.res.TypedArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

