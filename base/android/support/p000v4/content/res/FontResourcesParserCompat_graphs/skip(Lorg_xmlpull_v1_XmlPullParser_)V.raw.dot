digraph "CFG forandroid.support.v4.content.res.FontResourcesParserCompat.skip(Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r2 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3] t:[0x000e, 0x000b] \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.v4.content.res.FontResourcesParserCompat.skip((r2 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_1;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

