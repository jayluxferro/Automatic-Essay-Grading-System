digraph "CFG forandroid.support.v4.content.ContextCompat.getDrawable(Landroid\/content\/Context;I)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r4 I:android.graphics.drawable.Drawable) = (r4 I:android.content.Context), (r5 I:int) android.content.Context.getDrawable(int):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:android.graphics.drawable.Drawable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000d: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r4 I:android.content.res.Resources) = (r4 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL \l0x0015: INVOKE  (r4 I:android.graphics.drawable.Drawable) = (r4 I:android.content.res.Resources), (r5 I:int) android.content.res.Resources.getDrawable(int):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r4 I:android.graphics.drawable.Drawable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: SGET  (r0 I:java.lang.Object) =  android.support.v4.content.ContextCompat.sLock java.lang.Object \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\lSplitter:B:10:0x001d\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001d\l|0x001d: SGET  (r1 I:android.util.TypedValue) =  android.support.v4.content.ContextCompat.sTempValue android.util.TypedValue A[Catch:\{ all \-\> 0x0040 \}, TRY_ENTER]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 A[Catch:\{ all \-\> 0x0040 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: NEW_INSTANCE  (r1 I:android.util.TypedValue) =  android.util.TypedValue A[Catch:\{ all \-\> 0x0040 \}]\l0x0023: INVOKE  (r1 I:android.util.TypedValue) android.util.TypedValue.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0040 \}]\l0x0026: SPUT  (r1 I:android.util.TypedValue) android.support.v4.content.ContextCompat.sTempValue android.util.TypedValue A[Catch:\{ all \-\> 0x0040 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r1 I:android.content.res.Resources) = (r4 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL A[Catch:\{ all \-\> 0x0040 \}]\l0x002c: SGET  (r2 I:android.util.TypedValue) =  android.support.v4.content.ContextCompat.sTempValue android.util.TypedValue A[Catch:\{ all \-\> 0x0040 \}]\l0x002e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0040 \}]\l0x002f: INVOKE  \l  (r1 I:android.content.res.Resources)\l  (r5 I:int)\l  (r2 I:android.util.TypedValue)\l  (r3 I:boolean)\l android.content.res.Resources.getValue(int, android.util.TypedValue, boolean):void type: VIRTUAL A[Catch:\{ all \-\> 0x0040 \}]\l0x0032: SGET  (r5 I:android.util.TypedValue) =  android.support.v4.content.ContextCompat.sTempValue android.util.TypedValue A[Catch:\{ all \-\> 0x0040 \}]\l0x0034: IGET  (r5 I:int) = (r5 I:android.util.TypedValue) android.util.TypedValue.resourceId int A[Catch:\{ all \-\> 0x0040 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0040 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: INVOKE  (r4 I:android.content.res.Resources) = (r4 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL \l0x003b: INVOKE  (r4 I:android.graphics.drawable.Drawable) = (r4 I:android.content.res.Resources), (r5 I:int) android.content.res.Resources.getDrawable(int):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: RETURN  (r4 I:android.graphics.drawable.Drawable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|ExcHandler: all null\lSplitter:B:10:0x001d\l|0x0040: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|SYNTHETIC\lSplitter:B:19:0x0041\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0041\l|0x0041: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0040 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.drawable.Drawable android.support.v4.content.ContextCompat.getDrawable((r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.DrawableRes, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_18;
Node_20 -> Node_21;
Node_20 -> Node_18;
}

