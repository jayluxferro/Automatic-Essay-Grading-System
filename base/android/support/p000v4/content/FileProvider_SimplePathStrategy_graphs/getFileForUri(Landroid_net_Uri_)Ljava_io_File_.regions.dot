digraph "CFG forandroid.support.v4.content.FileProvider.SimplePathStrategy.getFileForUri(Landroid\/net\/Uri;)Ljava\/io\/File;" {
subgraph cluster_Region_918699429 {
label = "R(2:0|(2:2|(2:4|(2:(1:7)|(1:9))))(2:13|14))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = r5.getEncodedPath()\lint int r2 = r0.indexOf(47, 1)\ljava.lang.String java.lang.String r3 = android.net.Uri.decode(r0.substring(1, r2))\ljava.lang.String java.lang.String r0 = android.net.Uri.decode(r0.substring(r2 + 1))\ljava.io.File java.io.File r1 = r4.mRoots.get(r3)\l}"];
subgraph cluster_IfRegion_1170027202 {
label = "IF [B:1:0x0024] THEN: R(2:2|(2:4|(2:(1:7)|(1:9)))) ELSE: R(2:13|14)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0024|if (r1 != null) goto L_0x0026\l}"];
subgraph cluster_Region_1000249957 {
label = "R(2:2|(2:4|(2:(1:7)|(1:9))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0026|java.io.File java.io.File r5 = new java.io.File(r1, r0)\l}"];
subgraph cluster_TryCatchRegion_1054831673 {
label = "Try: R(2:4|(2:(1:7)|(1:9))) catches: R(2:10|12)";
node [shape=record,color=blue];
subgraph cluster_Region_2052818470 {
label = "R(2:4|(2:(1:7)|(1:9)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ IOException \-\> 0x0046 \}\lSplitter:B:3:0x002b\l|java.io.File java.io.File r0 = r5.getCanonicalFile()     \/\/ Catch:\{ IOException \-\> 0x0046 \}\l}"];
subgraph cluster_Region_810032881 {
label = "R(2:(1:7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1574151980 {
label = "IF [B:6:0x003b] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x003b|if (r0.getPath().startsWith(r1.getPath()) == true) goto L_0x003d\l}"];
subgraph cluster_Region_425617889 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x003d|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1917192565 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0045|throw new java.lang.SecurityException(\"Resolved path jumped beyond configured root\")\l}"];
}
}
}
subgraph cluster_Region_903444154 {
label = "R(2:10|12) | ExcHandler: IOException (unused java.io.IOException)\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0046}"];
Node_12 [shape=record,label="{12\:\ 0x005c|throw new java.lang.IllegalArgumentException(\"Failed to resolve canonical path for \" + r5)\l}"];
}
}
}
subgraph cluster_Region_309653422 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x005d}"];
Node_14 [shape=record,label="{14\:\ 0x0073|throw new java.lang.IllegalArgumentException(\"Unable to find configured root for \" + r5)\l}"];
}
}
}
subgraph cluster_Region_903444154 {
label = "R(2:10|12) | ExcHandler: IOException (unused java.io.IOException)\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0046}"];
Node_12 [shape=record,label="{12\:\ 0x005c|throw new java.lang.IllegalArgumentException(\"Failed to resolve canonical path for \" + r5)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x002b|SYNTHETIC\lSplitter:B:3:0x002b\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x002f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x003e}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:3:0x002b\l}"];
MethodNode[shape=record,label="{public java.io.File android.support.v4.content.FileProvider.SimplePathStrategy.getFileForUri((r4v0 'this' android.support.v4.content.FileProvider$SimplePathStrategy A[IMMUTABLE_TYPE, THIS]), (r5v0 android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_10 -> Node_12;
Node_13 -> Node_14;
Node_10 -> Node_12;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_11 -> Node_10;
}

