digraph "CFG forandroid.support.v4.content.PermissionChecker.checkPermission(Landroid\/content\/Context;Ljava\/lang\/String;IILjava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:int) = \l  (r1 I:android.content.Context)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l android.content.Context.checkPermission(java.lang.String, int, int):int type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String) android.support.v4.app.AppOpsManagerCompat.permissionToOp(java.lang.String):java.lang.String type: STATIC \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r3 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r5 I:android.content.pm.PackageManager) = (r1 I:android.content.Context) android.content.Context.getPackageManager():android.content.pm.PackageManager type: VIRTUAL \l0x0016: INVOKE  (r4 I:java.lang.String[]) = (r5 I:android.content.pm.PackageManager), (r4 I:int) android.content.pm.PackageManager.getPackagesForUid(int):java.lang.String[] type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0023 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r5 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: RETURN  (r0 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: INVOKE  (r1 I:int) = \l  (r1 I:android.content.Context)\l  (r2 I:java.lang.String)\l  (r5 I:java.lang.String)\l android.support.v4.app.AppOpsManagerCompat.noteProxyOpNoThrow(android.content.Context, java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002c \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|0x002b: RETURN  (r1 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|0x002c: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.content.PermissionChecker.checkPermission((r1 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], , , Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
}

