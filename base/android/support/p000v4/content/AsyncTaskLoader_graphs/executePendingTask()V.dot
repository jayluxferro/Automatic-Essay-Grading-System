digraph "CFG forandroid.support.v4.content.AsyncTaskLoader.executePendingTask()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mCancellingTask != null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r6.mTask == null) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r6.mTask.waiting == false) goto L_0x001a\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|r6.mTask.waiting = false\lr6.mHandler.removeCallbacks(r6.mTask)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if ((r6.mUpdateThrottle \> 0 ? 1 : (r6.mUpdateThrottle == 0 ? 0 : \-1)) \<= 0) goto L_0x0041\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x002d|if ((android.os.SystemClock.uptimeMillis() \> (r6.mLastLoadCompleteTime + r6.mUpdateThrottle) ? 1 : (android.os.SystemClock.uptimeMillis() == (r6.mLastLoadCompleteTime + r6.mUpdateThrottle) ? 0 : \-1)) \>= 0) goto L_0x0041\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|r6.mTask.waiting = true\lr6.mHandler.postAtTime(r6.mTask, r6.mLastLoadCompleteTime + r6.mUpdateThrottle)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|r6.mTask.executeOnExecutor(r6.mExecutor, (Params[]) null)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void android.support.v4.content.AsyncTaskLoader.executePendingTask((r6v0 'this' android.support.v4.content.AsyncTaskLoader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

