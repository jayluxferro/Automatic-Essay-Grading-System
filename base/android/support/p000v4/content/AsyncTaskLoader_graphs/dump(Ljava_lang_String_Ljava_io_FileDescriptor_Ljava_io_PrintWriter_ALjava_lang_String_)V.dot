digraph "CFG forandroid.support.v4.content.AsyncTaskLoader.dump(Ljava\/lang\/String;Ljava\/io\/FileDescriptor;Ljava\/io\/PrintWriter;[Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.dump(r5, r6, r7, r8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4.mTask == null) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|r7.print(r5)\lr7.print(\"mTask=\")\lr7.print(r4.mTask)\lr7.print(\" waiting=\")\lr7.println(r4.mTask.waiting)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0020}"];
Node_4 [shape=record,label="{4\:\ 0x0022|if (r4.mCancellingTask == null) goto L_0x003d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|r7.print(r5)\lr7.print(\"mCancellingTask=\")\lr7.print(r4.mCancellingTask)\lr7.print(\" waiting=\")\lr7.println(r4.mCancellingTask.waiting)\l}"];
Node_6 [shape=record,label="{6\:\ 0x003d}"];
Node_7 [shape=record,label="{7\:\ 0x0043|if ((r4.mUpdateThrottle \> 0 ? 1 : (r4.mUpdateThrottle == 0 ? 0 : \-1)) == 0) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|r7.print(r5)\lr7.print(\"mUpdateThrottle=\")\landroid.support.p000v4.util.TimeUtils.formatDuration(r4.mUpdateThrottle, r7)\lr7.print(\" mLastLoadCompleteTime=\")\landroid.support.p000v4.util.TimeUtils.formatDuration(r4.mLastLoadCompleteTime, android.os.SystemClock.uptimeMillis(), r7)\lr7.println()\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void android.support.v4.content.AsyncTaskLoader.dump((r4v0 'this' android.support.v4.content.AsyncTaskLoader A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.io.FileDescriptor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.io.PrintWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
}

