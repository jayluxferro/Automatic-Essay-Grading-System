digraph "CFG forandroid.support.v4.graphics.PathParser.copyOfRange([FII)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r3 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: ARITH  (r4 I:int) = (r4 I:int) \- (r3 I:int) \l0x0008: ARITH  (r0 I:int) = (r0 I:int) \- (r3 I:int) \l0x0009: INVOKE  (r0 I:int) = (r4 I:int), (r0 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000d: NEW_ARRAY  (r4 I:float[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  \l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:java.lang.Object)\l  (r1 I:int)\l  (r0 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r4 I:float[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException \l0x0016: INVOKE  (r2 I:java.lang.ArrayIndexOutOfBoundsException) java.lang.ArrayIndexOutOfBoundsException.\<init\>():void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001c: INVOKE  (r2 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static float[] android.support.v4.graphics.PathParser.copyOfRange((r2 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

