digraph "CFG forandroid.support.v4.graphics.PathParser.extract(Ljava\/lang\/String;ILandroid\/support\/v4\/graphics\/PathParser$ExtractFloatResult;)V" {
subgraph cluster_Region_1639383642 {
label = "R(3:0|(4:3|(1:(2:17|(2:(1:21)|(1:20)))(1:9))|18|(0)(0))|21)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r10.mEndWithNegOrDot = false\lint r1 = r9\lboolean r2 = false\lboolean r3 = false\lboolean r4 = false\l}"];
subgraph cluster_LoopRegion_73193984 {
label = "LOOP:0: (4:3|(1:(2:17|(2:(1:21)|(1:20)))(1:9))|18|(0)(0))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r1 \< r8.length()) goto L_0x000d\l}"];
subgraph cluster_Region_463475445 {
label = "R(4:3|(1:(2:17|(2:(1:21)|(1:20)))(1:9))|18|(0)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|char char r5 = r8.charAt(r1)\l}"];
subgraph cluster_IfRegion_420612356 {
label = "IF [B:4:0x0014] THEN: R(1:(2:17|(2:(1:21)|(1:20)))(1:9)) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r5 != ' ') goto L_0x0016\l}"];
subgraph cluster_Region_355231592 {
label = "R(1:(2:17|(2:(1:21)|(1:20)))(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_948601274 {
label = "IF [B:6:0x0018, B:8:0x001c] THEN: R(2:17|(2:(1:21)|(1:20))) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r5 == 'E') goto L_0x0033\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|ADDED_TO_REGION\l|if (r5 == 'e') goto L_0x0033\l}"];
subgraph cluster_Region_1573490211 {
label = "R(2:17|(2:(1:21)|(1:20)))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0033|r2 = true\l}"];
subgraph cluster_Region_816567055 {
label = "R(2:(1:21)|(1:20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1727440625 {
label = "IF [B:19:0x0037] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0037|PHI: r2 r3 r4 \l  PHI: (r2v2 boolean) = (r2v3 boolean), (r2v4 boolean), (r2v5 boolean), (r2v6 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v1 boolean), (r3v1 boolean), (r3v3 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 boolean) = (r4v3 boolean), (r4v1 boolean), (r4v1 boolean), (r4v1 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == false) goto L_0x003a\l}"];
subgraph cluster_Region_1121740297 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x003d|r10.mEndPosition = r1\l}"];
}
}
subgraph cluster_Region_306050936 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x003a|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:20:0x003a\l|r1++\l}"];
}
}
}
subgraph cluster_Region_1656317705 {
label = "R(1:9)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_1805154676 {
label = "Switch: 3, default: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001e|switch(r5) \{\l    case 44: goto L_0x0035;\l    case 45: goto L_0x002a;\l    case 46: goto L_0x0022;\l    default: goto L_0x0021;\l\}\l}"];
subgraph cluster_Region_170770300 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_InsnContainer_2085396086 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_303110491 {
label = "R(1:(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1059573533 {
label = "IF [B:13:0x002a, B:14:0x002c] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002a|ADDED_TO_REGION\l|if (r1 != r9) goto L_0x002c\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|ADDED_TO_REGION\l|if (r2 == false) goto L_0x002e\l}"];
subgraph cluster_Region_993633599 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002e|r10.mEndWithNegOrDot = true\l}"];
}
}
}
subgraph cluster_Region_1544039291 {
label = "R(1:(2:11|1)(1:12)) | FALL_THROUGH\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1730724398 {
label = "IF [B:10:0x0022] THEN: R(2:11|1) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0022|if (r3 == false) goto L_0x0024\l}"];
subgraph cluster_Region_1189419221 {
label = "R(2:11|1)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0024|r2 = false\lr3 = true\l}"];
Node_InsnContainer_1143972258 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_1592701885 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0027|r10.mEndWithNegOrDot = true\l}"];
}
}
}
}
}
}
}
}
Node_18 [shape=record,label="{18\:\ 0x0035|FALL_THROUGH\l|r2 = false\lr4 = true\l}"];
subgraph cluster_IfRegion_2011137178 {
label = "IF [B:19:0x0037] THEN: R(0) ELSE: R(0)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0037|PHI: r2 r3 r4 \l  PHI: (r2v2 boolean) = (r2v3 boolean), (r2v4 boolean), (r2v5 boolean), (r2v6 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v1 boolean), (r3v1 boolean), (r3v3 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 boolean) = (r4v3 boolean), (r4v1 boolean), (r4v1 boolean), (r4v1 boolean) binds: [B:18:0x0035, B:17:0x0033, B:16:0x0031, B:11:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == false) goto L_0x003a\l}"];
subgraph cluster_Region_671675650 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_902185099 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_21 [shape=record,label="{21\:\ 0x003d|r10.mEndPosition = r1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0007|LOOP_START\lPHI: r1 r2 r3 r4 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:20:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:0:0x0000, B:20:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:0:0x0000, B:20:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean) binds: [B:0:0x0000, B:20:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:20:0x003a\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0016}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0031|r2 = false\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x003f}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x003d|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x003d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void android.support.v4.graphics.PathParser.extract((r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 android.support.v4.graphics.PathParser$ExtractFloatResult A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lCan't fix incorrect switch cases order\lRemoved duplicated region for block: B:20:0x003a A[LOOP:0: B:1:0x0007\-\>B:20:0x003a, LOOP_END]\lRemoved duplicated region for block: B:24:0x003d A[SYNTHETIC]\lCode restructure failed: missing block: B:16:0x0031, code lost:\l    r2 = false;\l\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_23[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_18[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_24[style=dashed];
Node_21 -> Node_22;
Node_20 -> Node_1;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_9 -> Node_18;
Node_9 -> Node_16;
Node_13 -> Node_14;
Node_13 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_24[style=dashed];
Node_21 -> Node_22;
Node_1 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_16 -> Node_19;
Node_23 -> Node_21;
Node_24 -> Node_21;
}

