digraph "CFG forandroid.support.v4.graphics.TypefaceCompatUtil.getTempFile(Landroid\/content\/Context;)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(CACHE_FILE_PREFIX)\lr0.append(android.os.Process.myPid())\lr0.append(\"\-\")\lr0.append(android.os.Process.myTid())\lr0.append(\"\-\")\ljava.lang.String r0 = r0.toString()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0027|LOOP_START\lPHI: r1 \l  PHI: (r1v6 int) = (r1v5 int), (r1v7 int) binds: [B:0:0x0000, B:8:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0027\-\>B:8:0x004a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0029|if (r1 \>= 100) goto L_0x004d\l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|java.io.File r3 = r5.getCacheDir()\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(r0)\lr4.append(r1)\ljava.io.File r2 = new java.io.File(r3, r4.toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0043|SYNTHETIC\lSplitter:B:4:0x0043\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x004a \}\lSplitter:B:4:0x0043\l}"];
Node_6 [shape=record,label="{6\:\ 0x0047|if (r2.createNewFile() == false) goto L_0x004a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0049|RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x004a|LOOP_END\lLOOP:0: B:1:0x0027\-\>B:8:0x004a\l|int r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: IOException (unused java.io.IOException)\lSplitter:B:4:0x0043\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.io.File android.support.v4.graphics.TypefaceCompatUtil.getTempFile((r5v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_11[style=dashed];
Node_6 -> Node_13;
Node_8 -> Node_1;
Node_9 -> Node_8;
Node_11 -> Node_7;
Node_12 -> Node_10;
Node_13 -> Node_8;
}

