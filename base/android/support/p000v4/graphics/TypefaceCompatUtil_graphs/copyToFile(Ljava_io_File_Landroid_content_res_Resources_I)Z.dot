digraph "CFG forandroid.support.v4.graphics.TypefaceCompatUtil.copyToFile(Ljava\/io\/File;Landroid\/content\/res\/Resources;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x000e \}\lSplitter:B:0:0x0000\l|java.io.InputStream r1 = r1.openRawResource(r2)     \/\/ Catch:\{ all \-\> 0x000e \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ all \-\> 0x000c \}\lSplitter:B:2:0x0004\l|boolean r0 = copyToFile(r0, r1)     \/\/ Catch:\{ all \-\> 0x000c \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|closeQuietly(r1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|RETURN\l|return r0\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|ExcHandler: all (th java.lang.Throwable)\lSplitter:B:2:0x0004\l|java.lang.Throwable r0 = th\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|ExcHandler: all (th java.lang.Throwable)\lSplitter:B:0:0x0000\l|java.lang.Throwable r0 = th\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|r1 = null\l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|PHI: r0 r1 \l  PHI: (r0v1 'th' java.lang.Throwable) = (r0v2 'th' java.lang.Throwable), (r0v3 'th' java.lang.Throwable) binds: [B:8:0x000f, B:6:0x000c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 java.io.InputStream) = (r1v2 java.io.InputStream), (r1v3 java.io.InputStream) binds: [B:8:0x000f, B:6:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|closeQuietly(r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|throw r0\l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.graphics.TypefaceCompatUtil.copyToFile((r0v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 android.content.res.Resources A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

