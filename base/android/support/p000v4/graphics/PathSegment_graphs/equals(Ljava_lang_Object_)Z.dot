digraph "CFG forandroid.support.v4.graphics.PathSegment.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r4 != r5) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r5 instanceof android.support.p000v4.graphics.PathSegment) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|android.support.v4.graphics.PathSegment r5 = (android.support.p000v4.graphics.PathSegment) r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if (java.lang.Float.compare(r4.mStartFraction, r5.mStartFraction) != 0) goto L_0x0035\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001e|if (java.lang.Float.compare(r4.mEndFraction, r5.mEndFraction) != 0) goto L_0x0035\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0028|if (r4.mStart.equals(r5.mStart) == false) goto L_0x0035\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a}"];
Node_13 [shape=record,label="{13\:\ 0x0032|if (r4.mEnd.equals(r5.mEnd) == false) goto L_0x0035\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.graphics.PathSegment.equals((r4v0 'this' android.support.v4.graphics.PathSegment A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
}

