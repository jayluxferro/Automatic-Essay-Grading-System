digraph "CFG forandroid.support.v4.graphics.ColorUtils.compositeColors(Landroid\/graphics\/Color;Landroid\/graphics\/Color;)Landroid\/graphics\/Color;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.graphics.ColorSpace$Model) = (r7 I:android.graphics.Color) android.graphics.Color.getModel():android.graphics.ColorSpace$Model type: VIRTUAL \l0x0004: INVOKE  (r1 I:android.graphics.ColorSpace$Model) = (r8 I:android.graphics.Color) android.graphics.Color.getModel():android.graphics.ColorSpace$Model type: VIRTUAL \l0x0008: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.util.Objects.equals(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x006b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r0 I:android.graphics.ColorSpace) = (r8 I:android.graphics.Color) android.graphics.Color.getColorSpace():android.graphics.ColorSpace type: VIRTUAL \l0x0012: INVOKE  (r1 I:android.graphics.ColorSpace) = (r7 I:android.graphics.Color) android.graphics.Color.getColorSpace():android.graphics.ColorSpace type: VIRTUAL \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.util.Objects.equals(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r0 I:android.graphics.ColorSpace) = (r8 I:android.graphics.Color) android.graphics.Color.getColorSpace():android.graphics.ColorSpace type: VIRTUAL \l0x0021: INVOKE  (r7 I:android.graphics.Color) = \l  (r7 I:android.graphics.Color)\l  (r0 I:android.graphics.ColorSpace)\l android.graphics.Color.convert(android.graphics.ColorSpace):android.graphics.Color type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: INVOKE  (r0 I:float[]) = (r7 I:android.graphics.Color) android.graphics.Color.getComponents():float[] type: VIRTUAL \l0x0029: INVOKE  (r1 I:float[]) = (r8 I:android.graphics.Color) android.graphics.Color.getComponents():float[] type: VIRTUAL \l0x002d: INVOKE  (r7 I:float) = (r7 I:android.graphics.Color) android.graphics.Color.alpha():float type: VIRTUAL \l0x0031: INVOKE  (r2 I:float) = (r8 I:android.graphics.Color) android.graphics.Color.alpha():float type: VIRTUAL \l0x0035: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0037: ARITH  (r3 I:float) = (r3 I:float) \- (r7 I:float) \l0x0038: ARITH  (r2 I:float) = (r2 I:float) * (r3 I:float) \l0x003a: INVOKE  (r3 I:int) = (r8 I:android.graphics.Color) android.graphics.Color.getComponentCount():int type: VIRTUAL \l0x003e: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0040: ARITH  (r4 I:float) = (r7 I:float) + (r2 I:float) \l0x0042: APUT  \l  (r1 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x0044: AGET  (r4 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0046: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: CMP_L  (r4 I:int) = (r4 I:float), (r5 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0049|0x0049: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0051 \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: AGET  (r4 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x004d: ARITH  (r7 I:float) = (r7 I:float) \/ (r4 I:float) \l0x004e: AGET  (r4 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0050: ARITH  (r2 I:float) = (r2 I:float) \/ (r4 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|0x0052: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:12:0x0062 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|0x0054: AGET  (r5 I:?[int, float]) = (r0 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0056: ARITH  (r5 I:float) = (r5 I:float) * (r7 I:float) \l0x0058: AGET  (r6 I:?[int, float]) = (r1 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x005a: ARITH  (r6 I:float) = (r6 I:float) * (r2 I:float) \l0x005c: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x005d: APUT  \l  (r1 I:?[int, float][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l0x005f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0062|0x0062: INVOKE  (r7 I:android.graphics.ColorSpace) = (r8 I:android.graphics.Color) android.graphics.Color.getColorSpace():android.graphics.ColorSpace type: VIRTUAL \l0x0066: INVOKE  (r7 I:android.graphics.Color) = (r1 I:float[]), (r7 I:android.graphics.ColorSpace) android.graphics.Color.valueOf(float[], android.graphics.ColorSpace):android.graphics.Color type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x006a|0x006a: RETURN  (r7 I:android.graphics.Color) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0072: CONST_STR  (r2 I:java.lang.String) =  \"Color models must match (\" \l0x0074: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0077: INVOKE  (r7 I:android.graphics.ColorSpace$Model) = (r7 I:android.graphics.Color) android.graphics.Color.getModel():android.graphics.ColorSpace$Model type: VIRTUAL \l0x007b: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x007e: CONST_STR  (r7 I:java.lang.String) =  \" vs. \" \l0x0080: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0083: INVOKE  (r7 I:android.graphics.ColorSpace$Model) = (r8 I:android.graphics.Color) android.graphics.Color.getModel():android.graphics.ColorSpace$Model type: VIRTUAL \l0x0087: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x008a: CONST_STR  (r7 I:java.lang.String) =  \")\" \l0x008c: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008f: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0093: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0096|0x0096: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Color android.support.v4.graphics.ColorUtils.compositeColors((r7 I:android.graphics.Color A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.Color A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.RequiresApi, \{value=26\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

