digraph "CFG forandroid.support.v4.graphics.ColorUtils.circularInterpolate(FFF)F" {
subgraph cluster_Region_318708607 {
label = "R(2:(1:(1:4)(1:5))|7)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1143513042 {
label = "IF [B:1:0x000c] THEN: R(1:(1:4)(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (java.lang.Math.abs(r4 \- r3) \> 180.0f) goto L_0x000e\l}"];
subgraph cluster_Region_1585682352 {
label = "R(1:(1:4)(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_46056210 {
label = "IF [B:3:0x0010] THEN: R(1:4) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r4 \> r3) goto L_0x0012\l}"];
subgraph cluster_Region_1752171737 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|r3 += 360.0f\l}"];
}
subgraph cluster_Region_1755758602 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|r4 += 360.0f\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\l|return (r3 + ((r4 \- r3) * r5)) % 360.0f\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0015|PHI: r3 r4 \l  PHI: (r3v1 float) = (r3v0 float), (r3v0 float), (r3v4 float) binds: [B:1:0x000c, B:5:0x0014, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 float) = (r4v0 float), (r4v4 float), (r4v0 float) binds: [B:1:0x000c, B:5:0x0014, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{static float android.support.v4.graphics.ColorUtils.circularInterpolate((r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_7;
}

