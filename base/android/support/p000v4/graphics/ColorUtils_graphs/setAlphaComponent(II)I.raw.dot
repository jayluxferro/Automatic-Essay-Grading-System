digraph "CFG forandroid.support.v4.graphics.ColorUtils.setAlphaComponent(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (16777215(0xffffff, float:2.3509886E\-38) ?[int, float, short, byte, char])\l \l0x0009: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l0x000a: ARITH  (r2 I:int) = (r2 I:int) \<\< (24 int) \l0x000c: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"alpha must be between 0 and 255.\" \l0x0012: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.graphics.ColorUtils.setAlphaComponent((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.ColorInt, \{\}], Annotation[BUILD, android.support.annotation.IntRange, \{from=0, to=255\}]\lAnnotation[BUILD, android.support.annotation.ColorInt, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

