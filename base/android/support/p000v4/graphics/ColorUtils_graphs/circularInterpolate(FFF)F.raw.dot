digraph "CFG forandroid.support.v4.graphics.ColorUtils.circularInterpolate(FFF)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:float) = (r4 I:float) \- (r3 I:float) \l0x0002: INVOKE  (r0 I:float) = (r0 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1135869952(0x43b40000, float:360.0) ?[int, float, short, byte, char])\l \l0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1127481344(0x43340000, float:180.0) ?[int, float, short, byte, char])\l \l0x000a: CMP_L  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CMP_L  (r0 I:int) = (r4 I:float), (r3 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: ARITH  (r3 I:float) = (r3 I:float) + (r1 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: ARITH  (r4 I:float) = (r4 I:float) + (r1 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: ARITH  (r4 I:float) = (r4 I:float) \- (r3 I:float) \l0x0016: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x0018: ARITH  (r3 I:float) = (r3 I:float) + (r4 I:float) \l0x0019: ARITH  (r3 I:float) = (r3 I:float) % (r1 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: RETURN  (r3 I:float) \l}"];
MethodNode[shape=record,label="{static float android.support.v4.graphics.ColorUtils.circularInterpolate((r3 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

