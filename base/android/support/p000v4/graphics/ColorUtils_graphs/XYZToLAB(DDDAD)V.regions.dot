digraph "CFG forandroid.support.v4.graphics.ColorUtils.XYZToLAB(DDD[D)V" {
subgraph cluster_Region_42813872 {
label = "R(1:(2:(2:2|3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_251635522 {
label = "R(2:(2:2|3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1908684969 {
label = "IF [B:1:0x0002] THEN: R(2:2|3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r13.length == 3) goto L_0x0004\l}"];
subgraph cluster_Region_2039874202 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|double double r7 = pivotXyzComponent(r7 \/ XYZ_WHITE_REFERENCE_X)\ldouble double r9 = pivotXyzComponent(r9 \/ XYZ_WHITE_REFERENCE_Y)\ldouble double r11 = pivotXyzComponent(r11 \/ XYZ_WHITE_REFERENCE_Z)\lr13[0] = java.lang.Math.max(0.0d, (116.0d * r9) \- 16.0d)\lr13[1] = (r7 \- r9) * 500.0d\lr13[2] = (r9 \- r11) * 200.0d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0042|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1531421829 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x004a|throw new java.lang.IllegalArgumentException(\"outLab must have a length of 3.\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0043}"];
MethodNode[shape=record,label="{public static void android.support.v4.graphics.ColorUtils.XYZToLAB((r7v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0, to=95.047\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0, to=100.0\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0, to=108.883\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_0 -> Node_1;
Node_4 -> Node_5;
}

