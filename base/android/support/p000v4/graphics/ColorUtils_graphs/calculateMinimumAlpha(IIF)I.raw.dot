digraph "CFG forandroid.support.v4.graphics.ColorUtils.calculateMinimumAlpha(IIF)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r9 I:int) android.graphics.Color.alpha(int):int type: STATIC \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r8 I:int), (r1 I:int) android.support.v4.graphics.ColorUtils.setAlphaComponent(int, int):int type: STATIC \l0x000c: INVOKE  (r2 I:double) = (r0 I:int), (r9 I:int) android.support.v4.graphics.ColorUtils.calculateContrast(int, int):double type: STATIC \l0x0010: CAST  (r4 I:double) = (double) (r10 I:float) \l0x0011: CMP_G  (r10 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r8 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r10 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:16:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: ARITH  (r2 I:int) = (r1 I:int) \- (r0 I:int) \l0x001f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:16:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: ARITH  (r2 I:int) = (r0 I:int) + (r1 I:int) \l0x0024: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0026: INVOKE  (r3 I:int) = (r8 I:int), (r2 I:int) android.support.v4.graphics.ColorUtils.setAlphaComponent(int, int):int type: STATIC \l0x002a: INVOKE  (r6 I:double) = (r3 I:int), (r9 I:int) android.support.v4.graphics.ColorUtils.calculateContrast(int, int):double type: STATIC \l0x002e: CMP_G  (r3 I:int) = (r6 I:double), (r4 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0034 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: RETURN  (r1 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003b: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003d: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0040: CONST_STR  (r0 I:java.lang.String) =  \"background can not be translucent: #\" \l0x0042: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r9 I:java.lang.String) = (r9 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0049: INVOKE  (r10 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  (r9 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0050: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|0x0053: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.graphics.ColorUtils.calculateMinimumAlpha((r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.ColorInt, \{\}], Annotation[BUILD, android.support.annotation.ColorInt, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_7;
Node_17 -> Node_18;
}

