digraph "CFG forandroid.support.v4.graphics.ColorUtils.HSLToColor([F)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: AGET  (r1 I:?[int, float]) = (r6 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: AGET  (r2 I:?[int, float]) = (r6 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0007: AGET  (r6 I:?[int, float]) = (r6 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x000b: ARITH  (r4 I:float) = (r6 I:float) * (r3 I:float) \l0x000d: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x000f: ARITH  (r4 I:float) = (r4 I:float) \- (r5 I:float) \l0x0010: INVOKE  (r4 I:float) = (r4 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0014: ARITH  (r4 I:float) = (r5 I:float) \- (r4 I:float) \l0x0016: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x0018: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x001a: ARITH  (r2 I:float) = (r2 I:float) * (r4 I:float) \l0x001c: ARITH  (r6 I:float) = (r6 I:float) \- (r2 I:float) \l0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1114636288(0x42700000, float:60.0) ?[int, float, short, byte, char])\l \l0x001f: ARITH  (r2 I:float) = (r1 I:float) \/ (r2 I:float) \l0x0021: ARITH  (r2 I:float) = (r2 I:float) % (r3 I:float) \l0x0022: ARITH  (r2 I:float) = (r2 I:float) \- (r5 I:float) \l0x0023: INVOKE  (r2 I:float) = (r2 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0027: ARITH  (r5 I:float) = (r5 I:float) \- (r2 I:float) \l0x0028: ARITH  (r5 I:float) = (r5 I:float) * (r4 I:float) \l0x002a: CAST  (r1 I:int) = (int) (r1 I:float) \l0x002b: ARITH  (r1 I:int) = (r1 I:int) \/ (60 int) \l0x002d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1132396544(0x437f0000, float:255.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x002f|0x002f: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5, 6] t:[0x00a0, 0x008b, 0x0076, 0x0061, 0x004c, 0x0037, 0x0037] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0032|0x0032: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0034: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0037|0x0037: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x0038: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x003a: INVOKE  (r1 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l0x003e: ARITH  (r3 I:float) = (r6 I:float) * (r2 I:float) \l0x0040: INVOKE  (r3 I:int) = (r3 I:float) java.lang.Math.round(float):int type: STATIC \l0x0044: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x0045: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x0047: INVOKE  (r6 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x004c|0x004c: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x004d: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x004f: INVOKE  (r1 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x0053: ARITH  (r3 I:float) = (r6 I:float) * (r2 I:float) \l0x0055: INVOKE  (r3 I:int) = (r3 I:float) java.lang.Math.round(float):int type: STATIC \l0x0059: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x005a: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x005c: INVOKE  (r6 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0061|0x0061: ARITH  (r1 I:float) = (r6 I:float) * (r2 I:float) \l0x0063: INVOKE  (r1 I:int) = (r1 I:float) java.lang.Math.round(float):int type: STATIC \l0x0067: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x0068: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x006a: INVOKE  (r3 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x006e: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x006f: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x0071: INVOKE  (r6 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0076|0x0076: ARITH  (r1 I:float) = (r6 I:float) * (r2 I:float) \l0x0078: INVOKE  (r1 I:int) = (r1 I:float) java.lang.Math.round(float):int type: STATIC \l0x007c: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x007d: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x007f: INVOKE  (r3 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l0x0083: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x0084: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x0086: INVOKE  (r6 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x008b|0x008b: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x008c: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x008e: INVOKE  (r1 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x0092: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x0093: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x0095: INVOKE  (r3 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l0x0099: ARITH  (r6 I:float) = (r6 I:float) * (r2 I:float) \l0x009b: INVOKE  (r6 I:int) = (r6 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x00a0|0x00a0: ARITH  (r4 I:float) = (r4 I:float) + (r6 I:float) \l0x00a1: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float) \l0x00a3: INVOKE  (r1 I:int) = (r4 I:float) java.lang.Math.round(float):int type: STATIC \l0x00a7: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x00a8: ARITH  (r5 I:float) = (r5 I:float) * (r2 I:float) \l0x00aa: INVOKE  (r3 I:int) = (r5 I:float) java.lang.Math.round(float):int type: STATIC \l0x00ae: ARITH  (r6 I:float) = (r6 I:float) * (r2 I:float) \l0x00b0: INVOKE  (r6 I:int) = (r6 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x00b4|0x00b4: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x00b6: INVOKE  (r1 I:int) = (r1 I:int), (r0 I:int), (r2 I:int) android.support.v4.graphics.ColorUtils.constrain(int, int, int):int type: STATIC \l0x00ba: INVOKE  (r3 I:int) = (r3 I:int), (r0 I:int), (r2 I:int) android.support.v4.graphics.ColorUtils.constrain(int, int, int):int type: STATIC \l0x00be: INVOKE  (r6 I:int) = (r6 I:int), (r0 I:int), (r2 I:int) android.support.v4.graphics.ColorUtils.constrain(int, int, int):int type: STATIC \l0x00c2: INVOKE  (r6 I:int) = (r1 I:int), (r3 I:int), (r6 I:int) android.graphics.Color.rgb(int, int, int):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x00c6|0x00c6: RETURN  (r6 I:int) \l}"];
MethodNode[shape=record,label="{public static int android.support.v4.graphics.ColorUtils.HSLToColor((r6 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.ColorInt, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_7;
Node_1 -> Node_8;
Node_2 -> Node_9;
Node_3 -> Node_9;
Node_4 -> Node_9;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

