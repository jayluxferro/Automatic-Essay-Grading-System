digraph "CFG forandroid.support.v4.graphics.PathParser.PathDataNode.arcToBezier(Landroid\/graphics\/Path;DDDDDDDDD)V" {
subgraph cluster_Region_941131424 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = r60\lint int r8 = (int) java.lang.Math.ceil(java.lang.Math.abs((r72 * 4.0d) \/ 3.141592653589793d))\ldouble double r9 = java.lang.Math.cos(r68)\ldouble double r11 = java.lang.Math.sin(r68)\ldouble double r13 = java.lang.Math.cos(r70)\ldouble double r15 = java.lang.Math.sin(r70)\ldouble double r6 = \-r0\ldouble double r18 = r6 * r9\ldouble double r22 = r62 * r11\ldouble double r6 = r6 * r11\ldouble double r2 = r62 * r9\ldouble double r15 = (r15 * r6) + (r13 * r2)\ldouble double r4 = r72 \/ ((double) r8)\lint r13 = 0\ldouble r26 = r66\ldouble r28 = r15\ldouble r24 = (r18 * r15) \- (r22 * r13)\ldouble r20 = r64\ldouble r14 = r70\l}"];
subgraph cluster_LoopRegion_1019545299 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0047|LOOP_START\lPHI: r0 r2 r4 r6 r8 r9 r11 r13 r14 r20 r24 r26 r28 \l  PHI: (r0v1 double) = (r0v0 double), (r0v3 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 double) = (r2v0 double), (r2v4 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 double) = (r4v0 double), (r4v3 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 double) = (r6v2 double), (r6v6 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v5 int) = (r8v4 int), (r8v8 int) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 double) = (r9v0 double), (r9v3 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 double) = (r11v0 double), (r11v3 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v4 int) = (r13v3 int), (r13v5 int) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 double) = (r14v0 double), (r14v8 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v3 double) = (r20v2 double), (r20v5 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r24v2 double) = (r24v1 double), (r24v4 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r26v1 double) = (r26v0 double), (r26v2 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r28v1 double) = (r28v0 double), (r28v3 double) binds: [B:0:0x0000, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0047\-\>B:2:0x0049\l|if (r13 \< r8) goto L_0x0049\l}"];
subgraph cluster_Region_1303382886 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0049|LOOP_END\lLOOP:0: B:1:0x0047\-\>B:2:0x0049\l|double double r30 = r14 + r4\ldouble double r32 = java.lang.Math.sin(r30)\ldouble double r34 = java.lang.Math.cos(r30)\ldouble r40 = r4\ldouble double r4 = (r56 + ((r0 * r9) * r34)) \- (r22 * r32)\ldouble double r0 = r58 + (r0 * r11 * r34) + (r2 * r32)\ldouble double r36 = (r18 * r32) \- (r22 * r34)\ldouble double r32 = (r32 * r6) + (r34 * r2)\ldouble double r14 = r30 \- r14\ldouble double r34 = java.lang.Math.tan(r14 \/ 2.0d)\ldouble double r14 = (java.lang.Math.sin(r14) * (java.lang.Math.sqrt(((r34 * 3.0d) * r34) + 4.0d) \- 1.0d)) \/ 3.0d\ldouble r46 = r2\ldouble r48 = r6\lr55.rLineTo(0.0f, 0.0f)\lfloat float r3 = (float) (r26 + (r28 * r14))\lfloat float r6 = (float) (r4 \- (r14 * r36))\lr55.cubicTo((float) (r20 + (r24 * r14)), r3, r6, (float) (r0 \- (r14 * r32)), (float) r4, (float) r0)\lr13++\lr26 = r0\lr20 = r4\lr14 = r30\lr28 = r32\lr24 = r36\lr4 = r40\lr2 = r46\lr6 = r48\lr8 = r8\lr9 = r9\lr11 = r11\lr0 = r60\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x00ec}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x00ec|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void android.support.v4.graphics.PathParser.PathDataNode.arcToBezier((r55v0 android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r56v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r58v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r60v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r62v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r64v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r66v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r68v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r70v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r72v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_1;
Node_4 -> Node_3;
}

