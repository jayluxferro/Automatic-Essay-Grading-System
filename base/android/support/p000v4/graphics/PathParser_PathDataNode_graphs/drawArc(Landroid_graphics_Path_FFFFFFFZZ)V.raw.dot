digraph "CFG forandroid.support.v4.graphics.PathParser.PathDataNode.drawArc(Landroid\/graphics\/Path;FFFFFFFZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r44 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r47 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r48 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r50 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CAST  (r4 I:double) = (double) (r7 I:float) \l0x000d: INVOKE  (r19 I:double) = (r4 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0011: INVOKE  (r4 I:double) = (r19 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0015: INVOKE  (r10 I:double) = (r19 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0019: CAST  (r13 I:double) = (double) (r1 I:float) \l0x001a: ARITH  (r15 I:double) = (r13 I:double) * (r4 I:double) \l0x001c: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: MOVE  (r25 I:?[long, double]) = (r13 I:?[long, double]) \l0x0020: CAST  (r13 I:double) = (double) (r6 I:float) \l0x0021: ARITH  (r17 I:double) = (r13 I:double) * (r10 I:double) \l0x0023: ARITH  (r15 I:double) = (r15 I:double) + (r17 I:double) \l0x0025: CAST  (r6 I:double) = (double) (r0 I:float) \l0x0026: ARITH  (r15 I:double) = (r15 I:double) \/ (r6 I:double) \l0x0027: NEG  (r8 I:float) = (r1 I:float) \l0x0028: CAST  (r8 I:double) = (double) (r8 I:float) \l0x0029: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x002b: ARITH  (r17 I:double) = (r13 I:double) * (r4 I:double) \l0x002d: ARITH  (r8 I:double) = (r8 I:double) + (r17 I:double) \l0x002f: MOVE  (r27 I:?[long, double]) = (r13 I:?[long, double]) \l0x0031: CAST  (r13 I:double) = (double) (r2 I:float) \l0x0032: ARITH  (r8 I:double) = (r8 I:double) \/ (r13 I:double) \l0x0033: CAST  (r1 I:double) = (double) (r3 I:float) \l0x0034: ARITH  (r1 I:double) = (r1 I:double) * (r4 I:double) \l0x0036: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: MOVE  (r29 I:?[long, double]) = (r8 I:?[long, double]) \l0x003a: CAST  (r8 I:double) = (double) (r12 I:float) \l0x003b: ARITH  (r17 I:double) = (r8 I:double) * (r10 I:double) \l0x003d: ARITH  (r1 I:double) = (r1 I:double) + (r17 I:double) \l0x003f: ARITH  (r1 I:double) = (r1 I:double) \/ (r6 I:double) \l0x0040: NEG  (r12 I:float) = (r3 I:float) \l0x0041: MOVE  (r31 I:?[long, double]) = (r6 I:?[long, double]) \l0x0043: CAST  (r6 I:double) = (double) (r12 I:float) \l0x0044: ARITH  (r6 I:double) = (r6 I:double) * (r10 I:double) \l0x0046: ARITH  (r8 I:double) = (r8 I:double) * (r4 I:double) \l0x0048: ARITH  (r6 I:double) = (r6 I:double) + (r8 I:double) \l0x0049: ARITH  (r6 I:double) = (r6 I:double) \/ (r13 I:double) \l0x004a: ARITH  (r8 I:double) = (r15 I:double) \- (r1 I:double) \l0x004c: ARITH  (r17 I:double) = (r29 I:double) \- (r6 I:double) \l0x004e: ARITH  (r21 I:double) = (r15 I:double) + (r1 I:double) \l0x0050: CONST  (r23 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0052: ARITH  (r21 I:double) = (r21 I:double) \/ (r23 I:double) \l0x0054: ARITH  (r33 I:double) = (r29 I:double) + (r6 I:double) \l0x0056: ARITH  (r33 I:double) = (r33 I:double) \/ (r23 I:double) \l0x0058: ARITH  (r23 I:double) = (r8 I:double) * (r8 I:double) \l0x005a: ARITH  (r35 I:double) = (r17 I:double) * (r17 I:double) \l0x005c: MOVE  (r37 I:?[long, double]) = (r10 I:?[long, double]) \l0x005e: ARITH  (r10 I:double) = (r23 I:double) + (r35 I:double) \l0x0060: CONST  (r23 I:?[long, double]) = (0 ?[long, double]) \l0x0062: CMP_L  (r12 I:int) = (r10 I:double), (r23 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0064|0x0064: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x006e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0066|0x0066: CONST_STR  (r0 I:java.lang.String) =  \"PathParser\" \l0x0068: CONST_STR  (r1 I:java.lang.String) =  \" Points are coincident\" \l0x006a: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x006d|0x006d: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x006e|0x006e: CONST  (r35 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0070: ARITH  (r35 I:double) = (r35 I:double) \/ (r10 I:double) \l0x0072: CONST  (r39 I:?[long, double]) = \l  (4598175219545276416(0x3fd0000000000000, double:0.25) ?[long, double])\l \l0x0074: ARITH  (r35 I:double) = (r35 I:double) \- (r39 I:double) \l0x0076: CMP_G  (r12 I:int) = (r35 I:double), (r23 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0078|0x0078: IF  (r12 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x00b5 \l}"];
Node_6 [shape=record,label="{6\:\ 0x007a|0x007a: CONST_STR  (r1 I:java.lang.String) =  \"PathParser\" \l0x007c: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007e: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0081: CONST_STR  (r4 I:java.lang.String) =  \"Points are too far apart \" \l0x0083: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0086: INVOKE  (r2 I:java.lang.StringBuilder), (r10 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x0089: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008d: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0090: INVOKE  (r1 I:double) = (r10 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0094: CONST  (r4 I:?[long, double]) = \l  (4611685973391391630(0x3ffffff583a53b8e, double:1.99999) ?[long, double])\l \l0x0099: ARITH  (r1 I:double) = (r1 I:double) \/ (r4 I:double) \l0x009a: CAST  (r1 I:float) = (float) (r1 I:double) \l0x009b: ARITH  (r5 I:float) = (r0 I:float) * (r1 I:float) \l0x009d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r47 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009f: ARITH  (r6 I:float) = (r0 I:float) * (r1 I:float) \l0x00a1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r41 I:?[OBJECT, ARRAY]) \l0x00a3: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a5: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a7: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r44 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a9: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ab: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r48 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ad: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r49 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00af: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r50 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b1: INVOKE  \l  (r0 I:android.graphics.Path)\l  (r1 I:float)\l  (r2 I:float)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:boolean)\l  (r9 I:boolean)\l android.support.v4.graphics.PathParser.PathDataNode.drawArc(android.graphics.Path, float, float, float, float, float, float, float, boolean, boolean):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x00b4|0x00b4: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x00b5|0x00b5: INVOKE  (r10 I:double) = (r35 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x00b9: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x00bb: ARITH  (r10 I:double) = (r10 I:double) * (r17 I:double) \l0x00bd: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r49 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bf: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r50 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x00c1|0x00c1: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00c8 \l}"];
Node_10 [shape=record,label="{10\:\ 0x00c3|0x00c3: ARITH  (r21 I:double) = (r21 I:double) \- (r10 I:double) \l0x00c5: ARITH  (r33 I:double) = (r33 I:double) + (r8 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x00c8|0x00c8: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c9: ARITH  (r21 I:double) = (r21 I:double) + (r10 I:double) \l0x00cb: ARITH  (r33 I:double) = (r33 I:double) \- (r8 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x00cd|0x00cd: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ce: ARITH  (r8 I:double) = (r29 I:double) \- (r33 I:double) \l0x00d0: ARITH  (r10 I:double) = (r15 I:double) \- (r21 I:double) \l0x00d2: INVOKE  (r29 I:double) = (r8 I:double), (r10 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x00d6: ARITH  (r6 I:double) = (r6 I:double) \- (r33 I:double) \l0x00d8: ARITH  (r1 I:double) = (r1 I:double) \- (r21 I:double) \l0x00da: INVOKE  (r0 I:double) = (r6 I:double), (r1 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x00de: ARITH  (r0 I:double) = (r0 I:double) \- (r29 I:double) \l0x00e0: CMP_L  (r2 I:int) = (r0 I:double), (r23 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x00e2|0x00e2: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x00e6 \l}"];
Node_14 [shape=record,label="{14\:\ 0x00e4|0x00e4: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x00e6|0x00e6: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x00e7|0x00e7: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00f4 \l}"];
Node_17 [shape=record,label="{17\:\ 0x00e9|0x00e9: CONST  (r6 I:?[long, double]) = \l  (4618760256179416344(0x401921fb54442d18, double:6.283185307179586) ?[long, double])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x00ee|0x00ee: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:20:0x00f2 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00f0|0x00f0: ARITH  (r0 I:double) = (r0 I:double) \- (r6 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00f2|0x00f2: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f3: ARITH  (r0 I:double) = (r0 I:double) + (r6 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00f4|0x00f4: MOVE  (r23 I:?[long, double]) = (r0 I:?[long, double]) \l0x00f6: ARITH  (r21 I:double) = (r21 I:double) * (r31 I:double) \l0x00f8: ARITH  (r33 I:double) = (r33 I:double) * (r13 I:double) \l0x00fa: ARITH  (r0 I:double) = (r21 I:double) * (r4 I:double) \l0x00fc: ARITH  (r10 I:double) = (r33 I:double) * (r37 I:double) \l0x00fe: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ff: ARITH  (r7 I:double) = (r0 I:double) \- (r10 I:double) \l0x0101: MOVE  (r0 I:?[long, double]) = (r31 I:?[long, double]) \l0x0103: ARITH  (r21 I:double) = (r21 I:double) * (r37 I:double) \l0x0105: ARITH  (r33 I:double) = (r33 I:double) * (r4 I:double) \l0x0107: ARITH  (r9 I:double) = (r21 I:double) + (r33 I:double) \l0x0109: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r41 I:?[OBJECT, ARRAY]) \l0x010b: MOVE  (r11 I:?[long, double]) = (r0 I:?[long, double]) \l0x010c: MOVE  (r0 I:?[long, double]) = (r25 I:?[long, double]) \l0x010e: MOVE  (r2 I:?[long, double]) = (r27 I:?[long, double]) \l0x0110: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x0111: MOVE  (r17 I:?[long, double]) = (r2 I:?[long, double]) \l0x0113: MOVE  (r21 I:?[long, double]) = (r29 I:?[long, double]) \l0x0115: INVOKE  \l  (r6 I:android.graphics.Path)\l  (r7 I:double)\l  (r9 I:double)\l  (r11 I:double)\l  (r13 I:double)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:double)\l  (r21 I:double)\l  (r23 I:double)\l android.support.v4.graphics.PathParser.PathDataNode.arcToBezier(android.graphics.Path, double, double, double, double, double, double, double, double, double):void type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0118|0x0118: RETURN   \l}"];
MethodNode[shape=record,label="{private static void android.support.v4.graphics.PathParser.PathDataNode.drawArc((r41 I:android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r42 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r43 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r44 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r45 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r46 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r47 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r48 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r49 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r50 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

