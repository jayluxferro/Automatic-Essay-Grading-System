digraph "CFG forandroid.support.v4.graphics.TypefaceCompatApi24Impl.addFontWeightStyle(Ljava\/lang\/Object;Ljava\/nio\/ByteBuffer;IIZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  android.support.v4.graphics.TypefaceCompatApi24Impl.sAddFontWeightStyle java.lang.reflect.Method A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0003: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0006: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0008: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0009: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x000d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x000f: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0011: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0013: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0014: INVOKE  (r5 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0018: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x001a: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x001b: INVOKE  (r5 I:java.lang.Boolean) = (r7 I:boolean) java.lang.Boolean.valueOf(boolean):java.lang.Boolean type: STATIC A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x001f: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0021: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0025: CHECK_CAST  (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x0027: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL A[Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x002c \}]\l0x002a: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x002b|0x002b: RETURN  (r3 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|ExcHandler: IllegalAccessException \| InvocationTargetException null\lSplitter:B:0:0x0000\l|0x002c: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: NEW_INSTANCE  (r4 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x002f: INVOKE  \l  (r4 I:java.lang.RuntimeException)\l  (r3 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static boolean android.support.v4.graphics.TypefaceCompatApi24Impl.addFontWeightStyle((r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

