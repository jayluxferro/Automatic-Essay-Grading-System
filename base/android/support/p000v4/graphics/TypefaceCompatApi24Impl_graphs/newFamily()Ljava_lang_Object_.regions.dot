digraph "CFG forandroid.support.v4.graphics.TypefaceCompatApi24Impl.newFamily()Ljava\/lang\/Object;" {
subgraph cluster_Region_1554289355 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_2135939880 {
label = "Try: R(1:2) catches: R(2:3|5)";
node [shape=record,color=blue];
subgraph cluster_Region_207418789 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return sFontFamilyCtor.newInstance(new java.lang.Object[0])\l}"];
}
subgraph cluster_Region_64272795 {
label = "R(2:3|5) | ExcHandler: IllegalAccessException \| InstantiationException \| InvocationTargetException (r0v0 'e' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: IllegalAccessException \| InstantiationException \| InvocationTargetException (r0v0 'e' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|throw new java.lang.RuntimeException(r0)\l}"];
}
}
}
subgraph cluster_Region_64272795 {
label = "R(2:3|5) | ExcHandler: IllegalAccessException \| InstantiationException \| InvocationTargetException (r0v0 'e' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: IllegalAccessException \| InstantiationException \| InvocationTargetException (r0v0 'e' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|throw new java.lang.RuntimeException(r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ IllegalAccessException \| InstantiationException \| InvocationTargetException \-\> 0x000a \}\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
MethodNode[shape=record,label="{private static java.lang.Object android.support.v4.graphics.TypefaceCompatApi24Impl.newFamily() }"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_4 -> Node_5;
}

