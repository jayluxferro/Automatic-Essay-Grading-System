digraph "CFG forandroid.support.v4.graphics.TypefaceCompatBaseImpl.findBestFont([Ljava\/lang\/Object;ILandroid\/support\/v4\/graphics\/TypefaceCompatBaseImpl$StyleExtractor;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r11 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (400(0x190, float:5.6E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (700(0x2bc, float:9.81E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r11 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l0x0016: ARRAY_LENGTH  (r5 I:int) = (r10 I:?[]) \l0x0017: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0018: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:19:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: AGET  (r7 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l \l0x0020: INVOKE  (r8 I:int) = \l  (r12 I:android.support.v4.graphics.TypefaceCompatBaseImpl$StyleExtractor)\l  (r7 I:java.lang.Object)\l android.support.v4.graphics.TypefaceCompatBaseImpl.StyleExtractor.getWeight(java.lang.Object):int type: INTERFACE \l0x0024: ARITH  (r8 I:int) = (r8 I:int) \- (r0 I:int) \l0x0025: INVOKE  (r8 I:int) = (r8 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0029: ARITH  (r8 I:int) = (r8 I:int) * (2 int) \l0x002b: INVOKE  (r9 I:boolean) = \l  (r12 I:android.support.v4.graphics.TypefaceCompatBaseImpl$StyleExtractor)\l  (r7 I:java.lang.Object)\l android.support.v4.graphics.TypefaceCompatBaseImpl.StyleExtractor.isItalic(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IF  (r6 I:?[int, byte, short, char]) \<= (r8 I:?[int, byte, short, char])  \-\> B:18:0x003b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x003a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: RETURN  (r4 I:T) \l}"];
MethodNode[shape=record,label="{private static T android.support.v4.graphics.TypefaceCompatBaseImpl.findBestFont((r10 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:android.support.v4.graphics.TypefaceCompatBaseImpl$StyleExtractor\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;I, Landroid\/support\/v4\/graphics\/TypefaceCompatBaseImpl$StyleExtractor\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_9;
}

