digraph "CFG forandroid.support.v4.graphics.PaintCompat.hasGlyph(Landroid\/graphics\/Paint;Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 23) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r8.hasGlyph(r9)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|int r0 = r9.length()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r0 != 1) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013}"];
Node_7 [shape=record,label="{7\:\ 0x001b|if (java.lang.Character.isWhitespace(r9.charAt(0)) == false) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|RETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|float r3 = r8.measureText(TOFU_STRING)\lfloat r4 = r8.measureText(\"m\")\lfloat r5 = r8.measureText(r9)\lr6 = 0.0f\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|if ((r5 \> 0.0f ? 1 : (r5 == 0.0f ? 0 : \-1)) != 0) goto L_0x0034\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|RETURN\l|return false\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034}"];
Node_13 [shape=record,label="{13\:\ 0x003c|if (r9.codePointCount(0, r9.length()) \<= 1) goto L_0x005f\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e}"];
Node_15 [shape=record,label="{15\:\ 0x0044|if ((r5 \> (r4 * 2.0f) ? 1 : (r5 == (r4 * 2.0f) ? 0 : \-1)) \<= 0) goto L_0x0047\l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|r4 = 0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|LOOP_START\lPHI: r4 r6 \l  PHI: (r4v8 int) = (r4v7 int), (r4v11 int) binds: [B:17:0x0047, B:19:0x004a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 float) = (r6v0 float), (r6v4 float) binds: [B:17:0x0047, B:19:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:18:0x0048\-\>B:19:0x004a\l|if (r4 \>= r0) goto L_0x005a\l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|LOOP_END\lLOOP:0: B:18:0x0048\-\>B:19:0x004a\l|int r7 = java.lang.Character.charCount(r9.codePointAt(r4)) + r4\lfloat r6 = r6 + r8.measureText(r9, r4, r7)\lr4 = r7\l}"];
Node_20 [shape=record,label="{20\:\ 0x005a}"];
Node_21 [shape=record,label="{21\:\ 0x005c|if ((r5 \> r6 ? 1 : (r5 == r6 ? 0 : \-1)) \< 0) goto L_0x005f\l}"];
Node_22 [shape=record,label="{22\:\ 0x005e|RETURN\l|return false\l}"];
Node_23 [shape=record,label="{23\:\ 0x005f}"];
Node_24 [shape=record,label="{24\:\ 0x0061|if ((r5 \> r3 ? 1 : (r5 == r3 ? 0 : \-1)) == 0) goto L_0x0064\l}"];
Node_25 [shape=record,label="{25\:\ 0x0063|RETURN\l|return true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0064|android.support.v4.util.Pair r3 = obtainEmptyRects()\lr8.getTextBounds(TOFU_STRING, 0, TOFU_STRING.length(), (android.graphics.Rect) r3.first)\lr8.getTextBounds(r9, 0, r0, (android.graphics.Rect) r3.second)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0089|RETURN\l|return ((android.graphics.Rect) r3.first).equals(r3.second) ^ true\l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static boolean android.support.v4.graphics.PaintCompat.hasGlyph((r8v0 android.graphics.Paint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_28 -> Node_20;
}

