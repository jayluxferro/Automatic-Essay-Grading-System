digraph "CFG forandroid.support.v4.graphics.TypefaceCompatApi26Impl.freeze(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1309353268 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1589521858 {
label = "Try: R(1:2) catches: R(2:3|5)";
node [shape=record,color=blue];
subgraph cluster_Region_199377653 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|RETURN\l|return ((java.lang.Boolean) r2.mFreeze.invoke(r3, new java.lang.Object[0])).booleanValue()\l}"];
}
subgraph cluster_Region_1501869160 {
label = "R(2:3|5) | ExcHandler: IllegalAccessException \| InvocationTargetException (r3v1 'e' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|ExcHandler: IllegalAccessException \| InvocationTargetException (r3v1 'e' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|throw new java.lang.RuntimeException(r3)\l}"];
}
}
}
subgraph cluster_Region_1501869160 {
label = "R(2:3|5) | ExcHandler: IllegalAccessException \| InvocationTargetException (r3v1 'e' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|ExcHandler: IllegalAccessException \| InvocationTargetException (r3v1 'e' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|throw new java.lang.RuntimeException(r3)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ IllegalAccessException \| InvocationTargetException \-\> 0x0010 \}\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0011}"];
MethodNode[shape=record,label="{private boolean android.support.v4.graphics.TypefaceCompatApi26Impl.freeze((r2v0 'this' android.support.v4.graphics.TypefaceCompatApi26Impl A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_4 -> Node_5;
}

