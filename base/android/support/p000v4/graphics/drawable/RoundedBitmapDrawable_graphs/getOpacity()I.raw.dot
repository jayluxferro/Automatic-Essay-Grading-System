digraph "CFG forandroid.support.v4.graphics.drawable.RoundedBitmapDrawable.getOpacity()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r3 I:android.support.v4.graphics.drawable.RoundedBitmapDrawable)\l android.support.v4.graphics.drawable.RoundedBitmapDrawable.mGravity int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-3 ?[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (119(0x77, float:1.67E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:boolean) = \l  (r3 I:android.support.v4.graphics.drawable.RoundedBitmapDrawable)\l android.support.v4.graphics.drawable.RoundedBitmapDrawable.mIsCircular boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r0 I:android.graphics.Bitmap) = \l  (r3 I:android.support.v4.graphics.drawable.RoundedBitmapDrawable)\l android.support.v4.graphics.drawable.RoundedBitmapDrawable.mBitmap android.graphics.Bitmap \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: INVOKE  (r0 I:boolean) = (r0 I:android.graphics.Bitmap) android.graphics.Bitmap.hasAlpha():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IGET  (r0 I:android.graphics.Paint) = \l  (r3 I:android.support.v4.graphics.drawable.RoundedBitmapDrawable)\l android.support.v4.graphics.drawable.RoundedBitmapDrawable.mPaint android.graphics.Paint \l0x0018: INVOKE  (r0 I:int) = (r0 I:android.graphics.Paint) android.graphics.Paint.getAlpha():int type: VIRTUAL \l0x001c: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IGET  (r0 I:float) = \l  (r3 I:android.support.v4.graphics.drawable.RoundedBitmapDrawable)\l android.support.v4.graphics.drawable.RoundedBitmapDrawable.mCornerRadius float \l0x0022: INVOKE  (r0 I:boolean) = (r0 I:float) android.support.v4.graphics.drawable.RoundedBitmapDrawable.isGreaterThanZero(float):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0029 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: RETURN  (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int android.support.v4.graphics.drawable.RoundedBitmapDrawable.getOpacity((r3 'this' I:android.support.v4.graphics.drawable.RoundedBitmapDrawable A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_16[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
}

