digraph "CFG forandroid.support.v4.graphics.drawable.WrappedDrawableApi14.mutate()Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mMutated boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r2 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.mutate():android.graphics.drawable.Drawable type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mutateConstantState():android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState type: VIRTUAL \l0x000e: IPUT  \l  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState)\l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mState android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState \l0x0010: IGET  (r0 I:android.graphics.drawable.Drawable) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mDrawable android.graphics.drawable.Drawable \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r0 I:android.graphics.drawable.Drawable) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mDrawable android.graphics.drawable.Drawable \l0x0016: INVOKE  (r0 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.mutate():android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IGET  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mState android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IGET  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mState android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState \l0x001f: IGET  (r1 I:android.graphics.drawable.Drawable) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mDrawable android.graphics.drawable.Drawable \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r1 I:android.graphics.drawable.Drawable) = \l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mDrawable android.graphics.drawable.Drawable \l0x0025: INVOKE  (r1 I:android.graphics.drawable.Drawable$ConstantState) = (r1 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.getConstantState():android.graphics.drawable.Drawable$ConstantState type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IPUT  \l  (r1 I:android.graphics.drawable.Drawable$ConstantState)\l  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.DrawableWrapperState.mDrawableState android.graphics.drawable.Drawable$ConstantState \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002e: IPUT  \l  (r0 I:boolean)\l  (r2 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mMutated boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable android.support.v4.graphics.drawable.WrappedDrawableApi14.mutate((r2 'this' I:android.support.v4.graphics.drawable.WrappedDrawableApi14 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

