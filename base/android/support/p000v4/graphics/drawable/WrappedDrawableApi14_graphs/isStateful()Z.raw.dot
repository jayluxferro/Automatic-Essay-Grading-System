digraph "CFG forandroid.support.v4.graphics.drawable.WrappedDrawableApi14.isStateful()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r1 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.isCompatTintEnabled():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState) = \l  (r1 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mState android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState) = \l  (r1 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mState android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState \l0x000c: IGET  (r0 I:android.content.res.ColorStateList) = \l  (r0 I:android.support.v4.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.DrawableWrapperState.mTint android.content.res.ColorStateList \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r0 I:boolean) = (r0 I:android.content.res.ColorStateList) android.content.res.ColorStateList.isStateful():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IGET  (r0 I:android.graphics.drawable.Drawable) = \l  (r1 I:android.support.v4.graphics.drawable.WrappedDrawableApi14)\l android.support.v4.graphics.drawable.WrappedDrawableApi14.mDrawable android.graphics.drawable.Drawable \l0x001a: INVOKE  (r0 I:boolean) = (r0 I:android.graphics.drawable.Drawable) android.graphics.drawable.Drawable.isStateful():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.support.v4.graphics.drawable.WrappedDrawableApi14.isStateful((r1 'this' I:android.support.v4.graphics.drawable.WrappedDrawableApi14 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
}

