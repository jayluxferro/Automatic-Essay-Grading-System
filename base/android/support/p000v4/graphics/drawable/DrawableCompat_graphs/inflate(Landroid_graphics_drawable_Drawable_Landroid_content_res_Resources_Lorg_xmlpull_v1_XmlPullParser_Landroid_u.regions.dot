digraph "CFG forandroid.support.v4.graphics.drawable.DrawableCompat.inflate(Landroid\/graphics\/drawable\/Drawable;Landroid\/content\/res\/Resources;Lorg\/xmlpull\/v1\/XmlPullParser;Landroid\/util\/AttributeSet;Landroid\/content\/res\/Resources$Theme;)V" {
subgraph cluster_Region_1799687288 {
label = "R(1:(1:2)(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1961317803 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 21) goto L_0x0006\l}"];
subgraph cluster_Region_1994246687 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|r2.inflate(r3, r4, r5, r6)\l}"];
}
subgraph cluster_Region_1510181593 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|r2.inflate(r3, r4, r5)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void android.support.v4.graphics.drawable.DrawableCompat.inflate((r2v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.content.res.Resources A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 android.util.AttributeSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.content.res.Resources$Theme A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_0 -> Node_1;
}

