digraph "CFG forandroid.support.v4.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (sIsProjectedDrawableMethod != null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0009|SYNTHETIC\lSplitter:B:3:0x0009\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ Exception \-\> 0x0012 \}\lSplitter:B:3:0x0009\l|sIsProjectedDrawableMethod = android.graphics.drawable.Drawable.class.getDeclaredMethod(\"isProjected\", new java.lang.Class[0])     \/\/ Catch:\{ Exception \-\> 0x0012 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ExcHandler: Exception (r0v2 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:3:0x0009\l|java.lang.Exception r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|android.util.Log.w(TAG, \"Failed to retrieve Drawable#isProjected() method\", r0)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void android.support.v4.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod((r3v0 'this' android.support.v4.graphics.drawable.WrappedDrawableApi21 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

