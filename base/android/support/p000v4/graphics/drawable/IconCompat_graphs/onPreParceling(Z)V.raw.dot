digraph "CFG forandroid.support.v4.graphics.drawable.IconCompat.onPreParceling(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.PorterDuff$Mode) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mTintMode android.graphics.PorterDuff$Mode \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:android.graphics.PorterDuff$Mode) android.graphics.PorterDuff.Mode.name():java.lang.String type: VIRTUAL \l0x0006: IPUT  \l  (r0 I:java.lang.String)\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mTintModeStr java.lang.String \l0x0008: IGET  (r0 I:int) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mType int \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x005c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5] t:[0x003c, 0x002b, 0x0024, 0x0011, 0x003c] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x0013: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0017: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-16\" \l0x0019: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x001d: INVOKE  (r4 I:byte[]) = (r4 I:java.lang.String), (r0 I:java.nio.charset.Charset) java.lang.String.getBytes(java.nio.charset.Charset):byte[] type: VIRTUAL \l0x0021: IPUT  \l  (r4 I:byte[])\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x0026: CHECK_CAST  (r4 I:byte[]) = (byte[]) (r4 I:?[OBJECT, ARRAY]) \l0x0028: IPUT  \l  (r4 I:byte[])\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x002d: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x002f: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-16\" \l0x0031: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x0035: INVOKE  (r4 I:byte[]) = (r4 I:java.lang.String), (r0 I:java.nio.charset.Charset) java.lang.String.getBytes(java.nio.charset.Charset):byte[] type: VIRTUAL \l0x0039: IPUT  \l  (r4 I:byte[])\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0055 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x0040: CHECK_CAST  (r4 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r4 I:?[OBJECT, ARRAY]) \l0x0042: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0044: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x0047: SGET  (r1 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat \l0x0049: CONST  (r2 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l0x004b: INVOKE  \l  (r4 I:android.graphics.Bitmap)\l  (r1 I:android.graphics.Bitmap$CompressFormat)\l  (r2 I:int)\l  (r0 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL \l0x004e: INVOKE  (r4 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l0x0052: IPUT  \l  (r4 I:byte[])\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x0057: CHECK_CAST  (r4 I:android.os.Parcelable) = (android.os.Parcelable) (r4 I:?[OBJECT, ARRAY]) \l0x0059: IPUT  \l  (r4 I:android.os.Parcelable)\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mParcelable android.os.Parcelable \l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|0x005c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0065 \l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|0x005e: IGET  (r4 I:java.lang.Object) = (r3 I:android.support.v4.graphics.drawable.IconCompat) android.support.v4.graphics.drawable.IconCompat.mObj1 java.lang.Object \l0x0060: CHECK_CAST  (r4 I:android.os.Parcelable) = (android.os.Parcelable) (r4 I:?[OBJECT, ARRAY]) \l0x0062: IPUT  \l  (r4 I:android.os.Parcelable)\l  (r3 I:android.support.v4.graphics.drawable.IconCompat)\l android.support.v4.graphics.drawable.IconCompat.mParcelable android.os.Parcelable \l}"];
Node_12 [shape=record,label="{12\:\ 0x0064|0x0064: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0065|0x0065: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0067: CONST_STR  (r0 I:java.lang.String) =  \"Can't serialize Icon created with IconCompat#createFromIcon\" \l0x0069: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x006c|0x006c: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void android.support.v4.graphics.drawable.IconCompat.onPreParceling((r3 'this' I:android.support.v4.graphics.drawable.IconCompat A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_4;
Node_2 -> Node_5;
Node_2 -> Node_6;
Node_2 -> Node_7;
Node_2 -> Node_12;
Node_4 -> Node_12;
Node_5 -> Node_12;
Node_6 -> Node_12;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_12;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

