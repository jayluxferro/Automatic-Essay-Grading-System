digraph "CFG forandroid.arch.lifecycle.LifecycleDispatcher.init(Landroid\/content\/Context;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicBoolean) =  android.arch.lifecycle.LifecycleDispatcher.sInitialized java.util.concurrent.atomic.AtomicBoolean \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r1 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r2 I:android.content.Context) = (r2 I:android.content.Context) android.content.Context.getApplicationContext():android.content.Context type: VIRTUAL \l0x000e: CHECK_CAST  (r2 I:android.app.Application) = (android.app.Application) (r2 I:?[OBJECT, ARRAY]) \l0x0010: NEW_INSTANCE  (r0 I:android.arch.lifecycle.LifecycleDispatcher$DispatcherActivityCallback) =  android.arch.lifecycle.LifecycleDispatcher$DispatcherActivityCallback \l0x0012: INVOKE  \l  (r0 I:android.arch.lifecycle.LifecycleDispatcher$DispatcherActivityCallback)\l android.arch.lifecycle.LifecycleDispatcher.DispatcherActivityCallback.\<init\>():void type: DIRECT \l0x0015: INVOKE  \l  (r2 I:android.app.Application)\l  (r0 I:android.app.Application$ActivityLifecycleCallbacks)\l android.app.Application.registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{static void android.arch.lifecycle.LifecycleDispatcher.init((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

