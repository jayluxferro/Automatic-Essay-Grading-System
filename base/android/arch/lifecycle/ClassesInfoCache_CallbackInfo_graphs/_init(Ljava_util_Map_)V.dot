digraph "CFG forandroid.arch.lifecycle.ClassesInfoCache.CallbackInfo.\<init\>(Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.mHandlerToEvent = r5\lr4.mEventToHandlers = new java.util.HashMap()\ljava.util.Iterator r5 = r5.entrySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|LOOP_START\lLOOP:0: B:1:0x0014\-\>B:6:0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|if (r5.hasNext() == false) goto L_0x0042\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|java.util.Map$Entry r0 = r5.next()\landroid.arch.lifecycle.Lifecycle$Event r1 = (android.arch.lifecycle.Lifecycle.Event) r0.getValue()\ljava.util.List r2 = r4.mEventToHandlers.get(r1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|if (r2 != null) goto L_0x003a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|java.util.ArrayList r2 = new java.util.ArrayList()\lr4.mEventToHandlers.put(r1, r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|LOOP_END\lPHI: r2 \l  PHI: (r2v3 java.util.List) = (r2v2 java.util.List), (r2v4 java.util.List) binds: [B:10:0x003a, B:9:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:6:0x003a\l|r2.add(r0.getKey())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void android.arch.lifecycle.ClassesInfoCache.CallbackInfo.\<init\>((r4v0 'this' android.arch.lifecycle.ClassesInfoCache$CallbackInfo A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.Map\<android.arch.lifecycle.ClassesInfoCache$MethodReference, android.arch.lifecycle.Lifecycle$Event\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Landroid\/arch\/lifecycle\/ClassesInfoCache$MethodReference;, Landroid\/arch\/lifecycle\/Lifecycle$Event;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

