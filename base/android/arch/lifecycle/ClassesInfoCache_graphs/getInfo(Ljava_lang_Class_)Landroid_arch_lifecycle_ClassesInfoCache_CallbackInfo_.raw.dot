digraph "CFG forandroid.arch.lifecycle.ClassesInfoCache.getInfo(Ljava\/lang\/Class;)Landroid\/arch\/lifecycle\/ClassesInfoCache$CallbackInfo;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.Class, android.arch.lifecycle.ClassesInfoCache$CallbackInfo\>) = (r1 I:android.arch.lifecycle.ClassesInfoCache) android.arch.lifecycle.ClassesInfoCache.mCallbackMap java.util.Map \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0006: CHECK_CAST  (r0 I:android.arch.lifecycle.ClassesInfoCache$CallbackInfo) = (android.arch.lifecycle.ClassesInfoCache$CallbackInfo) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  (r0 I:android.arch.lifecycle.ClassesInfoCache$CallbackInfo) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: INVOKE  (r2 I:android.arch.lifecycle.ClassesInfoCache$CallbackInfo) = \l  (r1 I:android.arch.lifecycle.ClassesInfoCache)\l  (r2 I:java.lang.Class)\l  (r0 I:java.lang.reflect.Method[])\l android.arch.lifecycle.ClassesInfoCache.createInfo(java.lang.Class, java.lang.reflect.Method[]):android.arch.lifecycle.ClassesInfoCache$CallbackInfo type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r2 I:android.arch.lifecycle.ClassesInfoCache$CallbackInfo) \l}"];
MethodNode[shape=record,label="{android.arch.lifecycle.ClassesInfoCache$CallbackInfo android.arch.lifecycle.ClassesInfoCache.getInfo((r1 'this' I:android.arch.lifecycle.ClassesInfoCache A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Class A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

