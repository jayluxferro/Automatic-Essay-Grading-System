digraph "CFG forandroid.arch.lifecycle.ClassesInfoCache.hasLifecycleMethods(Ljava\/lang\/Class;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r6.mHasLifecycleMethods.containsKey(r7) == false) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x0014|RETURN\l|return r6.mHasLifecycleMethods.get(r7).booleanValue()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|java.lang.reflect.Method[] r0 = getDeclaredMethods(r7)\lint r1 = r0.length\lr3 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0015, B:10:0x002f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x001c\-\>B:10:0x002f\l|if (r3 \>= r1) goto L_0x0032\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e}"];
Node_7 [shape=record,label="{7\:\ 0x0028|if (((android.arch.lifecycle.OnLifecycleEvent) r0[r3].getAnnotation(android.arch.lifecycle.OnLifecycleEvent.class)) == null) goto L_0x002f\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|createInfo(r7, r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|RETURN\l|return true\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|LOOP_END\lLOOP:0: B:5:0x001c\-\>B:10:0x002f\l|int r3 = r3 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|r6.mHasLifecycleMethods.put(r7, false)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{boolean android.arch.lifecycle.ClassesInfoCache.hasLifecycleMethods((r6v0 'this' android.arch.lifecycle.ClassesInfoCache A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.Class A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_7 -> Node_13[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_13 -> Node_8;
Node_14 -> Node_11;
}

