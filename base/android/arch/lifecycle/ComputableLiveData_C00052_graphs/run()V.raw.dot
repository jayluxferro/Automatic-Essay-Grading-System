digraph "CFG forandroid.arch.lifecycle.ComputableLiveData.2.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicBoolean) = (r0 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$100(android.arch.lifecycle.ComputableLiveData):java.util.concurrent.atomic.AtomicBoolean type: STATIC \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r2 I:boolean)\l  (r1 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|SYNTHETIC\lSplitter:B:3:0x0011\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0011\l|0x0011: IGET  (r4 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x0013: INVOKE  (r4 I:java.util.concurrent.atomic.AtomicBoolean) = (r4 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$200(android.arch.lifecycle.ComputableLiveData):java.util.concurrent.atomic.AtomicBoolean type: STATIC A[Catch:\{ all \-\> 0x003a \}]\l0x0017: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r1 I:boolean)\l  (r2 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x003a \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0025 A[Catch:\{ all \-\> 0x003a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IGET  (r0 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData A[Catch:\{ all \-\> 0x003a \}]\l0x001f: INVOKE  (r3 I:java.lang.Object) = (r0 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.compute():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x003a \}]\l0x0023: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x003a \}]\l0x0024: GOTO  \-\> 0x0011 A[Catch:\{ all \-\> 0x003a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 A[Catch:\{ all \-\> 0x003a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IGET  (r1 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData A[Catch:\{ all \-\> 0x003a \}]\l0x0029: INVOKE  (r1 I:android.arch.lifecycle.LiveData) = (r1 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$300(android.arch.lifecycle.ComputableLiveData):android.arch.lifecycle.LiveData type: STATIC A[Catch:\{ all \-\> 0x003a \}]\l0x002d: INVOKE  \l  (r1 I:android.arch.lifecycle.LiveData)\l  (r3 I:java.lang.Object)\l android.arch.lifecycle.LiveData.postValue(java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x003a \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IGET  (r1 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData \l0x0032: INVOKE  (r1 I:java.util.concurrent.atomic.AtomicBoolean) = (r1 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$100(android.arch.lifecycle.ComputableLiveData):java.util.concurrent.atomic.AtomicBoolean type: STATIC \l0x0036: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r2 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.set(boolean):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|ExcHandler: all null\lSplitter:B:3:0x0011\l|0x003a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IGET  (r1 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData \l0x003d: INVOKE  (r1 I:java.util.concurrent.atomic.AtomicBoolean) = (r1 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$100(android.arch.lifecycle.ComputableLiveData):java.util.concurrent.atomic.AtomicBoolean type: STATIC \l0x0041: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r2 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.set(boolean):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0054 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: IGET  (r0 I:android.arch.lifecycle.ComputableLiveData) = (r5 I:android.arch.lifecycle.ComputableLiveData$2) android.arch.lifecycle.ComputableLiveData.2.this$0 android.arch.lifecycle.ComputableLiveData \l0x004a: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicBoolean) = (r0 I:android.arch.lifecycle.ComputableLiveData) android.arch.lifecycle.ComputableLiveData.access$200(android.arch.lifecycle.ComputableLiveData):java.util.concurrent.atomic.AtomicBoolean type: STATIC \l0x004e: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicBoolean) java.util.concurrent.atomic.AtomicBoolean.get():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: RETURN   \l}"];
MethodNode[shape=record,label="{public void android.arch.lifecycle.ComputableLiveData.2.run((r5 'this' I:android.arch.lifecycle.ComputableLiveData$2 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_0;
Node_16 -> Node_17[style=dashed];
}

