digraph "CFG forandroid.arch.lifecycle.ViewModelProvider.NewInstanceFactory.create(Ljava\/lang\/Class;)Landroid\/arch\/lifecycle\/ViewModel;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ InstantiationException \-\> 0x001f, IllegalAccessException \-\> 0x0007 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return (android.arch.lifecycle.ViewModel) r5.newInstance()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|ExcHandler: IllegalAccessException (r0v1 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.IllegalAccessException r0 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Cannot create an instance of \")\lr2.append(r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|throw new java.lang.RuntimeException(r2.toString(), r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|ExcHandler: InstantiationException (r0v0 'e' java.lang.InstantiationException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.InstantiationException r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Cannot create an instance of \")\lr2.append(r5)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|throw new java.lang.RuntimeException(r2.toString(), r0)\l}"];
MethodNode[shape=record,label="{public T android.arch.lifecycle.ViewModelProvider.NewInstanceFactory.create((r4v0 'this' android.arch.lifecycle.ViewModelProvider$NewInstanceFactory A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Landroid\/arch\/lifecycle\/ViewModel;, \>(, Ljava\/lang\/Class\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

