digraph "CFG forandroid.arch.lifecycle.ViewModelProvider.NewInstanceFactory.create(Ljava\/lang\/Class;)Landroid\/arch\/lifecycle\/ViewModel;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.lang.Class) java.lang.Class.newInstance():java.lang.Object type: VIRTUAL A[Catch:\{ InstantiationException \-\> 0x001f, IllegalAccessException \-\> 0x0007 \}, TRY_ENTER]\l0x0004: CHECK_CAST  (r0 I:android.arch.lifecycle.ViewModel) = (android.arch.lifecycle.ViewModel) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ InstantiationException \-\> 0x001f, IllegalAccessException \-\> 0x0007 \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r0 I:T) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|ExcHandler: IllegalAccessException null\lSplitter:B:0:0x0000\l|0x0007: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x000a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"Cannot create an instance of \" \l0x0011: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0014: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r5 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001b: INVOKE  \l  (r1 I:java.lang.RuntimeException)\l  (r5 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|ExcHandler: InstantiationException null\lSplitter:B:0:0x0000\l|0x001f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0022: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0024: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0027: CONST_STR  (r3 I:java.lang.String) =  \"Cannot create an instance of \" \l0x0029: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r5 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  \l  (r1 I:java.lang.RuntimeException)\l  (r5 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T android.arch.lifecycle.ViewModelProvider.NewInstanceFactory.create((r4 'this' I:android.arch.lifecycle.ViewModelProvider$NewInstanceFactory A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Landroid\/arch\/lifecycle\/ViewModel;, \>(, Ljava\/lang\/Class\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

