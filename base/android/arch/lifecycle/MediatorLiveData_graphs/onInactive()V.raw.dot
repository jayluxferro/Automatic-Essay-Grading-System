digraph "CFG forandroid.arch.lifecycle.MediatorLiveData.onInactive()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.arch.core.internal.SafeIterableMap\<android.arch.lifecycle.LiveData\<?\>, android.arch.lifecycle.MediatorLiveData$Source\<?\>\>) = (r2 I:android.arch.lifecycle.MediatorLiveData) android.arch.lifecycle.MediatorLiveData.mSources android.arch.core.internal.SafeIterableMap \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:android.arch.core.internal.SafeIterableMap) android.arch.core.internal.SafeIterableMap.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r1 I:android.arch.lifecycle.MediatorLiveData$Source) = (android.arch.lifecycle.MediatorLiveData$Source) (r1 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r1 I:android.arch.lifecycle.MediatorLiveData$Source) android.arch.lifecycle.MediatorLiveData.Source.unplug():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{protected void android.arch.lifecycle.MediatorLiveData.onInactive((r2 'this' I:android.arch.lifecycle.MediatorLiveData A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.CallSuper, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

