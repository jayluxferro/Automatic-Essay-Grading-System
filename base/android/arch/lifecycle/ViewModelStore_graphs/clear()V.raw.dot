digraph "CFG forandroid.arch.lifecycle.ViewModelStore.clear()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.String, android.arch.lifecycle.ViewModel\>) = (r2 I:android.arch.lifecycle.ViewModelStore) android.arch.lifecycle.ViewModelStore.mMap java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.HashMap) java.util.HashMap.values():java.util.Collection type: VIRTUAL \l0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r1 I:android.arch.lifecycle.ViewModel) = (android.arch.lifecycle.ViewModel) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r1 I:android.arch.lifecycle.ViewModel) android.arch.lifecycle.ViewModel.onCleared():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r0 I:java.util.HashMap\<java.lang.String, android.arch.lifecycle.ViewModel\>) = (r2 I:android.arch.lifecycle.ViewModelStore) android.arch.lifecycle.ViewModelStore.mMap java.util.HashMap \l0x001c: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.clear():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public final void android.arch.lifecycle.ViewModelStore.clear((r2 'this' I:android.arch.lifecycle.ViewModelStore A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

