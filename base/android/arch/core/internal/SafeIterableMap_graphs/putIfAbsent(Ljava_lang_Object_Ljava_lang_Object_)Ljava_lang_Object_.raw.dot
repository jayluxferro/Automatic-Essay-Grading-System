digraph "CFG forandroid.arch.core.internal.SafeIterableMap.putIfAbsent(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.arch.core.internal.SafeIterableMap$Entry) = \l  (r1 I:android.arch.core.internal.SafeIterableMap)\l  (r2 I:java.lang.Object)\l android.arch.core.internal.SafeIterableMap.get(java.lang.Object):android.arch.core.internal.SafeIterableMap$Entry type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r2 I:V) = (r0 I:android.arch.core.internal.SafeIterableMap$Entry) android.arch.core.internal.SafeIterableMap.Entry.mValue java.lang.Object \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r2 I:V) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  \l  (r1 I:android.arch.core.internal.SafeIterableMap)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l android.arch.core.internal.SafeIterableMap.put(java.lang.Object, java.lang.Object):android.arch.core.internal.SafeIterableMap$Entry type: VIRTUAL \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r2 I:V) \l}"];
MethodNode[shape=record,label="{public V android.arch.core.internal.SafeIterableMap.putIfAbsent((r1 'this' I:android.arch.core.internal.SafeIterableMap A[IMMUTABLE_TYPE, THIS]), (r2 I:K A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:V A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TK;TV;)TV;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

