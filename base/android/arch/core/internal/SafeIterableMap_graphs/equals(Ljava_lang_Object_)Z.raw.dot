digraph "CFG forandroid.arch.core.internal.SafeIterableMap.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:?[OBJECT, ARRAY]) android.arch.core.internal.SafeIterableMap \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r6 I:android.arch.core.internal.SafeIterableMap) = (android.arch.core.internal.SafeIterableMap) (r6 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:int) = (r5 I:android.arch.core.internal.SafeIterableMap) android.arch.core.internal.SafeIterableMap.size():int type: VIRTUAL \l0x0010: INVOKE  (r3 I:int) = (r6 I:android.arch.core.internal.SafeIterableMap) android.arch.core.internal.SafeIterableMap.size():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: INVOKE  (r1 I:java.util.Iterator) = (r5 I:android.arch.core.internal.SafeIterableMap) android.arch.core.internal.SafeIterableMap.iterator():java.util.Iterator type: VIRTUAL \l0x001b: INVOKE  (r6 I:java.util.Iterator) = (r6 I:android.arch.core.internal.SafeIterableMap) android.arch.core.internal.SafeIterableMap.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: INVOKE  (r3 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0042 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002f: CHECK_CAST  (r3 I:java.util.Map$Entry) = (java.util.Map$Entry) (r3 I:?[OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0041 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: INVOKE  (r3 I:boolean) = (r3 I:java.util.Map$Entry), (r4 I:java.lang.Object) java.util.Map.Entry.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: RETURN  (r2 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: INVOKE  (r1 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: INVOKE  (r6 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x004c|0x004c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004f \l}"];
Node_26 [shape=record,label="{26\:\ 0x004f|0x004f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean android.arch.core.internal.SafeIterableMap.equals((r5 'this' I:android.arch.core.internal.SafeIterableMap A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_10;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_10;
Node_19 -> Node_20[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
}

