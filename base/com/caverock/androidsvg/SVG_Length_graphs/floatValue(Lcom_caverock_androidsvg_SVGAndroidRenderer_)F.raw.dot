digraph "CFG forcom.caverock.androidsvg.SVG.Length.floatValue(Lcom\/caverock\/androidsvg\/SVGAndroidRenderer;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG$Unit) = (r6 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x0002: SGET  (r1 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.percent com.caverock.androidsvg.SVG$Unit \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r7 I:com.caverock.androidsvg.SVG$Box) = (r7 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.getCurrentViewPortInUserUnits():com.caverock.androidsvg.SVG$Box type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r7 I:float) = (r6 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.value float \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  (r7 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r0 I:float) = (r7 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.width float \l0x0011: IGET  (r7 I:float) = (r7 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.height float \l0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1120403456(0x42c80000, float:100.0) ?[int, float, short, byte, char])\l \l0x0015: CMP_L  (r2 I:int) = (r0 I:float), (r7 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r7 I:float) = (r6 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.value float \l0x001b: ARITH  (r7 I:float) = (r7 I:float) * (r0 I:float) \l0x001d: ARITH  (r7 I:float) = (r7 I:float) \/ (r1 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: RETURN  (r7 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: ARITH  (r0 I:float) = (r0 I:float) * (r0 I:float) \l0x0021: ARITH  (r7 I:float) = (r7 I:float) * (r7 I:float) \l0x0023: ARITH  (r0 I:float) = (r0 I:float) + (r7 I:float) \l0x0024: CAST  (r2 I:double) = (double) (r0 I:float) \l0x0025: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0029: CONST  (r4 I:?[long, double]) = \l  (4609047870845172684(0x3ff6a09e667f3bcc, double:1.414213562373095) ?[long, double])\l \l0x002e: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x002f: CAST  (r7 I:float) = (float) (r2 I:double) \l0x0030: IGET  (r0 I:float) = (r6 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.value float \l0x0032: ARITH  (r0 I:float) = (r0 I:float) * (r7 I:float) \l0x0034: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: RETURN  (r0 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: INVOKE  (r7 I:float) = \l  (r6 I:com.caverock.androidsvg.SVG$Length)\l  (r7 I:com.caverock.androidsvg.SVGAndroidRenderer)\l com.caverock.androidsvg.SVG.Length.floatValueX(com.caverock.androidsvg.SVGAndroidRenderer):float type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: RETURN  (r7 I:float) \l}"];
MethodNode[shape=record,label="{float com.caverock.androidsvg.SVG.Length.floatValue((r6 'this' I:com.caverock.androidsvg.SVG$Length A[IMMUTABLE_TYPE, THIS]), (r7 I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

