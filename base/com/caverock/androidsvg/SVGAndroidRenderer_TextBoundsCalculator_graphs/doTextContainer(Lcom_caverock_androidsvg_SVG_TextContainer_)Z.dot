digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.TextBoundsCalculator.doTextContainer(Lcom\/caverock\/androidsvg\/SVG$TextContainer;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r6 instanceof com.caverock.androidsvg.SVG.TextPath) == false) goto L_0x0045\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|com.caverock.androidsvg.SVG$TextPath r0 = (com.caverock.androidsvg.SVG.TextPath) r6\lcom.caverock.androidsvg.SVG$SvgObject r6 = r6.document.resolveIRI(r0.href)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if (r6 != null) goto L_0x001f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|java.lang.Object[] r1 = new java.lang.Object[]\{r0.href\}\lcom.caverock.androidsvg.SVGAndroidRenderer.access$600(\"TextPath path reference '%s' not found\", r1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|com.caverock.androidsvg.SVG$Path r6 = (com.caverock.androidsvg.SVG.Path) r6\landroid.graphics.Path r0 = new com.caverock.androidsvg.SVGAndroidRenderer.PathConverter(r5.this$0, r6.f103d).getPath()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|if (r6.transform == null) goto L_0x0037\l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|r0.transform(r6.transform)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|android.graphics.RectF r6 = new android.graphics.RectF()\lr0.computeBounds(r6, true)\lr5.bbox.union(r6)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean com.caverock.androidsvg.SVGAndroidRenderer.TextBoundsCalculator.doTextContainer((r5v0 'this' com.caverock.androidsvg.SVGAndroidRenderer$TextBoundsCalculator A[IMMUTABLE_TYPE, THIS]), (r6v0 com.caverock.androidsvg.SVG$TextContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

