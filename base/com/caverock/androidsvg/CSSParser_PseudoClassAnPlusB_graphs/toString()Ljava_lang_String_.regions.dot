digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_106517130 {
label = "R(2:1|(2:(1:9)|(1:8)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|java.lang.String r0 = r7.isFromStart ? \"\" : \"last\-\"\l}"];
subgraph cluster_Region_1512240236 {
label = "R(2:(1:9)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_45467664 {
label = "IF [B:5:0x000f] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r7.isOfType == true) goto L_0x0011\l}"];
subgraph cluster_Region_570341103 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.String.format(\"nth\-%schild(%dn%+d of type \<%s\>)\", new java.lang.Object[]\{r0, java.lang.Integer.valueOf(r7.f86a), java.lang.Integer.valueOf(r7.f87b), r7.nodeName\})\l}"];
}
}
subgraph cluster_Region_263620734 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.lang.String.format(\"nth\-%schild(%dn%+d)\", new java.lang.Object[]\{r0, java.lang.Integer.valueOf(r7.f86a), java.lang.Integer.valueOf(r7.f87b)\})\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0009|PHI: r0 \l  PHI: (r0v1 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0031}"];
MethodNode[shape=record,label="{public java.lang.String com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.toString((r7v0 'this' com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_9;
Node_7 -> Node_8;
}

