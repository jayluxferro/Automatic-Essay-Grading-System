digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.matches(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r7 I:boolean) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.isOfType boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r7 I:java.lang.String) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.nodeName java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r7 I:java.lang.String) = (r8 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.getNodeName():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r7 I:java.lang.String) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.nodeName java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r0 I:com.caverock.androidsvg.SVG$SvgContainer) = (r8 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IGET  (r0 I:com.caverock.androidsvg.SVG$SvgContainer) = (r8 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0017: INVOKE  (r0 I:java.util.List) = (r0 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x001b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x001f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  (r5 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0043 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002b: CHECK_CAST  (r5 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r5 I:?[OBJECT, ARRAY]) \l0x002d: CHECK_CAST  (r5 I:com.caverock.androidsvg.SVG$SvgElementBase) = (com.caverock.androidsvg.SVG$SvgElementBase) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: INVOKE  (r5 I:java.lang.String) = (r5 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.getNodeName():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r7 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0042: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: IGET  (r7 I:boolean) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.isFromStart boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0049 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: ARITH  (r3 I:int) = (r4 I:int) \- (r3 I:int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004b|0x004b: IGET  (r7 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.a int \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0055 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: IGET  (r7 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.b int \l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0054 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|0x0055: IGET  (r7 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.b int \l0x0057: ARITH  (r7 I:int) = (r3 I:int) \- (r7 I:int) \l0x0059: IGET  (r8 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.a int \l0x005b: ARITH  (r7 I:int) = (r7 I:int) % (r8 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005c|0x005c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0078 \l}"];
Node_31 [shape=record,label="{31\:\ 0x005e|0x005e: IGET  (r7 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.b int \l0x0060: ARITH  (r7 I:int) = (r3 I:int) \- (r7 I:int) \l0x0062: INVOKE  (r7 I:int) = (r7 I:int) java.lang.Integer.signum(int):int type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x0066|0x0066: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0077 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|0x0068: IGET  (r7 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.b int \l0x006a: ARITH  (r3 I:int) = (r3 I:int) \- (r7 I:int) \l0x006b: INVOKE  (r7 I:int) = (r3 I:int) java.lang.Integer.signum(int):int type: STATIC \l0x006f: IGET  (r8 I:int) = (r6 I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB) com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.a int \l0x0071: INVOKE  (r8 I:int) = (r8 I:int) java.lang.Integer.signum(int):int type: STATIC \l}"];
Node_34 [shape=record,label="{34\:\ 0x0075|0x0075: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0078 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0077|0x0077: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0078|0x0078: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.caverock.androidsvg.CSSParser.PseudoClassAnPlusB.matches((r6 'this' I:com.caverock.androidsvg.CSSParser$PseudoClassAnPlusB A[IMMUTABLE_TYPE, THIS]), (r7 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_9;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_9;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_36;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
}

