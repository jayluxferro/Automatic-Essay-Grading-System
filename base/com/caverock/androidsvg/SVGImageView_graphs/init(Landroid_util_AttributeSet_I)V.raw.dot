digraph "CFG forcom.caverock.androidsvg.SVGImageView.init(Landroid\/util\/AttributeSet;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:com.caverock.androidsvg.SVGImageView) com.caverock.androidsvg.SVGImageView.isInEditMode():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r0 I:android.content.Context) = (r3 I:com.caverock.androidsvg.SVGImageView) com.caverock.androidsvg.SVGImageView.getContext():android.content.Context type: VIRTUAL \l0x000b: INVOKE  (r0 I:android.content.res.Resources$Theme) = (r0 I:android.content.Context) android.content.Context.getTheme():android.content.res.Resources$Theme type: VIRTUAL \l0x000f: SGET  (r1 I:int[]) =  com.caverock.androidsvg.R.styleable.SVGImageView int[] \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: INVOKE  (r4 I:android.content.res.TypedArray) = \l  (r0 I:android.content.res.Resources$Theme)\l  (r4 I:android.util.AttributeSet)\l  (r1 I:int[])\l  (r5 I:int)\l  (r2 I:int)\l android.content.res.Resources.Theme.obtainStyledAttributes(android.util.AttributeSet, int[], int, int):android.content.res.TypedArray type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|SYNTHETIC\lSplitter:B:4:0x0016\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0016\l|0x0016: SGET  (r5 I:int) =  com.caverock.androidsvg.R.styleable.SVGImageView_css int A[Catch:\{ all \-\> 0x005a \}, TRY_ENTER]\l0x0018: INVOKE  (r5 I:java.lang.String) = (r4 I:android.content.res.TypedArray), (r5 I:int) android.content.res.TypedArray.getString(int):java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IGET  (r0 I:com.caverock.androidsvg.RenderOptions) = (r3 I:com.caverock.androidsvg.SVGImageView) com.caverock.androidsvg.SVGImageView.renderOptions com.caverock.androidsvg.RenderOptions A[Catch:\{ all \-\> 0x005a \}]\l0x0020: INVOKE  \l  (r0 I:com.caverock.androidsvg.RenderOptions)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.RenderOptions.css(java.lang.String):com.caverock.androidsvg.RenderOptions type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: SGET  (r5 I:int) =  com.caverock.androidsvg.R.styleable.SVGImageView_svg int A[Catch:\{ all \-\> 0x005a \}]\l0x0025: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x005a \}]\l0x0026: INVOKE  (r5 I:int) = \l  (r4 I:android.content.res.TypedArray)\l  (r5 I:int)\l  (r0 I:int)\l android.content.res.TypedArray.getResourceId(int, int):int type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r3 I:com.caverock.androidsvg.SVGImageView), (r5 I:int) com.caverock.androidsvg.SVGImageView.setImageResource(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: INVOKE  (r4 I:android.content.res.TypedArray) android.content.res.TypedArray.recycle():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|SYNTHETIC\lSplitter:B:13:0x0033\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0033\l|0x0033: SGET  (r5 I:int) =  com.caverock.androidsvg.R.styleable.SVGImageView_svg int A[Catch:\{ all \-\> 0x005a \}, TRY_ENTER]\l0x0035: INVOKE  (r5 I:java.lang.String) = (r4 I:android.content.res.TypedArray), (r5 I:int) android.content.res.TypedArray.getString(int):java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0056 A[Catch:\{ all \-\> 0x005a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: INVOKE  (r0 I:android.net.Uri) = (r5 I:java.lang.String) android.net.Uri.parse(java.lang.String):android.net.Uri type: STATIC A[Catch:\{ all \-\> 0x005a \}]\l0x003f: INVOKE  (r0 I:boolean) = \l  (r3 I:com.caverock.androidsvg.SVGImageView)\l  (r0 I:android.net.Uri)\l com.caverock.androidsvg.SVGImageView.internalSetImageURI(android.net.Uri):boolean type: DIRECT A[Catch:\{ all \-\> 0x005a \}]\l0x0042: NOP   A[TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0049 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: INVOKE  (r4 I:android.content.res.TypedArray) android.content.res.TypedArray.recycle():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|SYNTHETIC\lSplitter:B:20:0x0049\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0049\l|0x0049: INVOKE  (r0 I:boolean) = \l  (r3 I:com.caverock.androidsvg.SVGImageView)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGImageView.internalSetImageAsset(java.lang.String):boolean type: DIRECT A[Catch:\{ all \-\> 0x005a \}, TRY_ENTER]\l0x004c: NOP   A[TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0053 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: INVOKE  (r4 I:android.content.res.TypedArray) android.content.res.TypedArray.recycle():void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0052|0x0052: RETURN   \l}"];
Node_25 [shape=record,label="{25\:\ 0x0053|SYNTHETIC\lSplitter:B:25:0x0053\l}"];
Node_26 [shape=record,label="{26\:\ ?|Splitter:B:25:0x0053\l|0x0053: INVOKE  \l  (r3 I:com.caverock.androidsvg.SVGImageView)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGImageView.setFromString(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|0x0056: INVOKE  (r4 I:android.content.res.TypedArray) android.content.res.TypedArray.recycle():void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0059|0x0059: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x005a|ExcHandler: all null\lSplitter:B:4:0x0016\l|0x005a: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x005b|0x005b: INVOKE  (r4 I:android.content.res.TypedArray) android.content.res.TypedArray.recycle():void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x005e|0x005e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGImageView.init((r3 'this' I:com.caverock.androidsvg.SVGImageView A[IMMUTABLE_TYPE, THIS]), (r4 I:android.util.AttributeSet A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_29;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_29;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_27;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31;
}

