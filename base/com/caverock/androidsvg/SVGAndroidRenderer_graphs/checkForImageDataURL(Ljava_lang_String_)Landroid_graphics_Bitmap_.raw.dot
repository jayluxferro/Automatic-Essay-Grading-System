digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.checkForImageDataURL(Ljava\/lang\/String;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"data:\" \l0x0002: INVOKE  (r0 I:boolean) = (r5 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:android.graphics.Bitmap) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000e: CONST  (r2 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r1 I:android.graphics.Bitmap) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0015: INVOKE  (r0 I:int) = (r5 I:java.lang.String), (r0 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: CONST_STR  (r2 I:java.lang.String) =  \";base64\" \l0x0023: ARITH  (r3 I:int) = (r0 I:int) + (\-7 int) \l0x0025: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.String), (r3 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: RETURN  (r1 I:android.graphics.Bitmap) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0032: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0036: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: INVOKE  (r5 I:byte[]) = (r5 I:java.lang.String), (r0 I:int) android.util.Base64.decode(java.lang.String, int):byte[] type: STATIC \l0x003b: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l0x003c: INVOKE  (r5 I:android.graphics.Bitmap) = (r5 I:byte[]), (r0 I:int), (r1 I:int) android.graphics.BitmapFactory.decodeByteArray(byte[], int, int):android.graphics.Bitmap type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: RETURN  (r5 I:android.graphics.Bitmap) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: RETURN  (r1 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{private android.graphics.Bitmap com.caverock.androidsvg.SVGAndroidRenderer.checkForImageDataURL((r4 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_16[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

