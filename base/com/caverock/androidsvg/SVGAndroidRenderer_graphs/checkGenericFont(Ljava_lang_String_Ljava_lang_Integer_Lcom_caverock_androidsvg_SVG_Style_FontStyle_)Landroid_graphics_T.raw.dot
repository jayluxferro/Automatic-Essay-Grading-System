digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.checkGenericFont(Ljava\/lang\/String;Ljava\/lang\/Integer;Lcom\/caverock\/androidsvg\/SVG$Style$FontStyle;)Landroid\/graphics\/Typeface;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.caverock.androidsvg.SVG$Style$FontStyle) =  com.caverock.androidsvg.SVG.Style.FontStyle.Italic com.caverock.androidsvg.SVG$Style$FontStyle \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r7 I:int) = (r7 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x000d: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (500(0x1f4, float:7.0E\-43) ?[int, float, short, byte, char])\l \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0010: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r7 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001d \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x001f: INVOKE  (r0 I:int) = (r6 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-1536685117, \-1431958525, \-1081737434, 109326717, 1126973893] t:[0x004e, 0x0044, 0x003a, 0x0031, 0x0027] \l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: CONST_STR  (r0 I:java.lang.String) =  \"cursive\" \l0x0029: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0058 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|0x002f: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: CONST_STR  (r0 I:java.lang.String) =  \"serif\" \l0x0033: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0058 \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: CONST_STR  (r0 I:java.lang.String) =  \"fantasy\" \l0x003c: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0058 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|0x0044: CONST_STR  (r0 I:java.lang.String) =  \"monospace\" \l0x0046: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x004a|0x004a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0058 \l}"];
Node_26 [shape=record,label="{26\:\ 0x004c|0x004c: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: CONST_STR  (r0 I:java.lang.String) =  \"sans\-serif\" \l0x0050: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0058 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0056|0x0056: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0058|0x0058: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0059|0x0059: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4] t:[0x007a, 0x0073, 0x006c, 0x0065, 0x005e] \l}"];
Node_32 [shape=record,label="{32\:\ 0x005c|0x005c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x005e|0x005e: SGET  (r6 I:android.graphics.Typeface) =  android.graphics.Typeface.SANS_SERIF android.graphics.Typeface \l0x0060: INVOKE  (r6 I:android.graphics.Typeface) = (r6 I:android.graphics.Typeface), (r7 I:int) android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface type: STATIC \l}"];
Node_34 [shape=record,label="{34\:\ 0x0065|0x0065: SGET  (r6 I:android.graphics.Typeface) =  android.graphics.Typeface.SANS_SERIF android.graphics.Typeface \l0x0067: INVOKE  (r6 I:android.graphics.Typeface) = (r6 I:android.graphics.Typeface), (r7 I:int) android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface type: STATIC \l}"];
Node_35 [shape=record,label="{35\:\ 0x006c|0x006c: SGET  (r6 I:android.graphics.Typeface) =  android.graphics.Typeface.MONOSPACE android.graphics.Typeface \l0x006e: INVOKE  (r6 I:android.graphics.Typeface) = (r6 I:android.graphics.Typeface), (r7 I:int) android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface type: STATIC \l}"];
Node_36 [shape=record,label="{36\:\ 0x0073|0x0073: SGET  (r6 I:android.graphics.Typeface) =  android.graphics.Typeface.SANS_SERIF android.graphics.Typeface \l0x0075: INVOKE  (r6 I:android.graphics.Typeface) = (r6 I:android.graphics.Typeface), (r7 I:int) android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface type: STATIC \l}"];
Node_37 [shape=record,label="{37\:\ 0x007a|0x007a: SGET  (r6 I:android.graphics.Typeface) =  android.graphics.Typeface.SERIF android.graphics.Typeface \l0x007c: INVOKE  (r6 I:android.graphics.Typeface) = (r6 I:android.graphics.Typeface), (r7 I:int) android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface type: STATIC \l}"];
Node_38 [shape=record,label="{38\:\ 0x0080|0x0080: RETURN  (r6 I:android.graphics.Typeface) \l}"];
MethodNode[shape=record,label="{private android.graphics.Typeface com.caverock.androidsvg.SVGAndroidRenderer.checkGenericFont((r5 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Integer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.caverock.androidsvg.SVG$Style$FontStyle A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_18;
Node_13 -> Node_21;
Node_13 -> Node_24;
Node_13 -> Node_27;
Node_13 -> Node_30;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_30;
Node_17 -> Node_31;
Node_18 -> Node_19;
Node_19 -> Node_30;
Node_19 -> Node_31[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_33;
Node_31 -> Node_34;
Node_31 -> Node_35;
Node_31 -> Node_36;
Node_31 -> Node_37;
Node_32 -> Node_38;
Node_33 -> Node_38;
Node_34 -> Node_38;
Node_35 -> Node_38;
Node_36 -> Node_38;
Node_37 -> Node_38;
}

