digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.renderTextPath(Lcom\/caverock\/androidsvg\/SVG$TextPath;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|debug(\"TextPath render\", new java.lang.Object[0])\lupdateStyleForElement(r6.state, r7)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (display() != false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (visible() != false) goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|com.caverock.androidsvg.SVG$SvgObject r0 = r7.document.resolveIRI(r7.href)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|if (r0 != null) goto L_0x0032\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|java.lang.Object[] r2 = new java.lang.Object[]\{r7.href\}\lerror(\"TextPath reference '%s' not found\", r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|com.caverock.androidsvg.SVG$Path r0 = (com.caverock.androidsvg.SVG.Path) r0\landroid.graphics.Path r2 = new com.caverock.androidsvg.SVGAndroidRenderer.PathConverter(r6, r0.f103d).getPath()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|if (r0.transform == null) goto L_0x0048\l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|r2.transform(r0.transform)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|android.graphics.PathMeasure r0 = new android.graphics.PathMeasure(r2, false)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|if (r7.startOffset == null) goto L_0x005d\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|float r0 = r7.startOffset.floatValue(r6, r0.getLength())\l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|r0 = 0.0f\l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|PHI: r0 \l  PHI: (r0v8 float) = (r0v12 float), (r0v14 float) binds: [B:16:0x005d, B:15:0x0052] A[DONT_GENERATE, DONT_INLINE]\l|com.caverock.androidsvg.SVG$Style$TextAnchor r1 = getAnchorPosition()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|if (r1 == com.caverock.androidsvg.SVG.Style.TextAnchor.Start) goto L_0x0074\l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|float r4 = calculateTextWidth(r7)\l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|if (r1 != com.caverock.androidsvg.SVG.Style.TextAnchor.Middle) goto L_0x0073\l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|float r0 = r0 \- (r4 \/ 2.0f)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|float r0 = r0 \- r4\l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|PHI: r0 \l  PHI: (r0v9 float) = (r0v8 float), (r0v10 float), (r0v11 float) binds: [B:18:0x0064, B:22:0x0073, B:21:0x006e] A[DONT_GENERATE, DONT_INLINE]\l|checkForGradientsAndPatterns((com.caverock.androidsvg.SVG.SvgElement) r7.getTextRoot())\lboolean r1 = pushLayer()\lenumerateTextSpans(r7, new com.caverock.androidsvg.SVGAndroidRenderer.PathTextDrawer(r6, r2, r0, 0.0f))\l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|if (r1 == false) goto L_?\l}"];
Node_25 [shape=record,label="{25\:\ 0x008b|popLayer(r7)\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.renderTextPath((r6v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r7v0 com.caverock.androidsvg.SVG$TextPath A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
}

