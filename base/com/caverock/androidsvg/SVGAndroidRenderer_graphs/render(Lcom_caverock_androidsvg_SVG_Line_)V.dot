digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.render(Lcom\/caverock\/androidsvg\/SVG$Line;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|debug(\"Line render\", new java.lang.Object[0])\lupdateStyleForElement(r2.state, r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (display() != false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (visible() != false) goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if (r2.state.hasStroke != false) goto L_0x0022\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x0024|if (r3.transform == null) goto L_0x002d\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|r2.canvas.concat(r3.transform)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|android.graphics.Path r0 = makePathAndBoundingBox(r3)\lupdateParentBoundingBox(r3)\lcheckForGradientsAndPatterns(r3)\lcheckForClipPath(r3)\lboolean r1 = pushLayer()\ldoStroke(r0)\lrenderMarkers(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|if (r1 == false) goto L_?\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|popLayer(r3)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.render((r2v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r3v0 com.caverock.androidsvg.SVG$Line A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
}

