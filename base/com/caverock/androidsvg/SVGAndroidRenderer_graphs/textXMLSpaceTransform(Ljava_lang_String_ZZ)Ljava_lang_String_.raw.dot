digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.textXMLSpaceTransform(Ljava\/lang\/String;ZZ)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r2 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x0002: IGET  (r0 I:boolean) = \l  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l com.caverock.androidsvg.SVGAndroidRenderer.RendererState.spacePreserve boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r4 I:java.lang.String) =  \"[nt]\" \l0x0008: CONST_STR  (r5 I:java.lang.String) =  \" \" \l0x000a: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r3 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST_STR  (r0 I:java.lang.String) =  \"n\" \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0013: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l0x0017: CONST_STR  (r0 I:java.lang.String) =  \"t\" \l0x0019: CONST_STR  (r1 I:java.lang.String) =  \" \" \l0x001b: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: CONST_STR  (r4 I:java.lang.String) =  \"^s+\" \l0x0023: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0025: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r0 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0033 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: CONST_STR  (r4 I:java.lang.String) =  \"s+$\" \l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"\" \l0x002f: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: CONST_STR  (r4 I:java.lang.String) =  \"s\{2,\}\" \l0x0035: CONST_STR  (r5 I:java.lang.String) =  \" \" \l0x0037: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l java.lang.String.replaceAll(java.lang.String, java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String com.caverock.androidsvg.SVGAndroidRenderer.textXMLSpaceTransform((r2 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

