digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.findInheritFromAncestorState(Lcom\/caverock\/androidsvg\/SVG$SvgObject;Lcom\/caverock\/androidsvg\/SVGAndroidRenderer$RendererState;)Lcom\/caverock\/androidsvg\/SVGAndroidRenderer$RendererState;" {
subgraph cluster_Region_1752129111 {
label = "R(6:0|(2:(1:3)|(2:(1:13)|(1:12)))|6|(1:9)|10|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList java.util.ArrayList\<com.caverock.androidsvg.SVG.SvgElementBase\> r0 = new java.util.ArrayList\<\>()\l}"];
subgraph cluster_LoopRegion_1739788597 {
label = "LOOP:0: (2:(1:3)|(2:(1:13)|(1:12)))";
node [shape=record,color=blue];
subgraph cluster_Region_70179669 {
label = "R(2:(1:3)|(2:(1:13)|(1:12)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_682493853 {
label = "IF [B:2:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|if ((r4 instanceof com.caverock.androidsvg.SVG.SvgElementBase) == true) goto L_0x0009\l}"];
subgraph cluster_Region_440822743 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|r0.add(0, (com.caverock.androidsvg.SVG.SvgElementBase) r4)\l}"];
}
}
subgraph cluster_Region_1505914228 {
label = "R(2:(1:13)|(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_646440384 {
label = "IF [B:5:0x0012] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r4.parent == null) goto L_0x0014\l}"];
subgraph cluster_Region_1417766454 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0014|SYNTHETIC\lEDGE_INSN: B:13:0x0014\-\>B:6:0x0014 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_214630868 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0035|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:12:0x0035\l|com.caverock.androidsvg.SVG$SvgObject r4 = (com.caverock.androidsvg.SVG.SvgObject) r4.parent\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0014|EDGE_INSN: B:13:0x0014\-\>B:6:0x0014 ?: BREAK  \l|java.util.Iterator r4 = r0.iterator()\l}"];
subgraph cluster_LoopRegion_1177052404 {
label = "LOOP:1: (1:9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001c|if (r4.hasNext() != false) goto L_0x001e\l}"];
subgraph cluster_Region_1603805204 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001e|LOOP_END\lLOOP:1: B:7:0x0018\-\>B:9:0x001e\l|updateStyleForElement(r5, r0)\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0028|r5.viewBox = r3.state.viewBox\lr5.viewPort = r3.state.viewPort\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|RETURN\l|return r5\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005|LOOP_START\lPHI: r4 \l  PHI: (r4v1 com.caverock.androidsvg.SVG$SvgObject) = (r4v0 com.caverock.androidsvg.SVG$SvgObject), (r4v8 com.caverock.androidsvg.SVG$SvgObject) binds: [B:0:0x0000, B:12:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:12:0x0035\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018|LOOP_START\lLOOP:1: B:7:0x0018\-\>B:9:0x001e\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0028|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private com.caverock.androidsvg.SVGAndroidRenderer$RendererState com.caverock.androidsvg.SVGAndroidRenderer.findInheritFromAncestorState((r3v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r4v0 com.caverock.androidsvg.SVG$SvgObject A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 com.caverock.androidsvg.SVGAndroidRenderer$RendererState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_12[style=dashed];
Node_5 -> Node_13;
Node_13 -> Node_6;
Node_12 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_14[style=dashed];
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_14 -> Node_10;
}

