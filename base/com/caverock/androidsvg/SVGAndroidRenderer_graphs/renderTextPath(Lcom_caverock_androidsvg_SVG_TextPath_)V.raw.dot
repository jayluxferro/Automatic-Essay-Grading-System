digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.renderTextPath(Lcom\/caverock\/androidsvg\/SVG$TextPath;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"TextPath render\" \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0005: INVOKE  (r0 I:java.lang.String), (r2 I:java.lang.Object[]) com.caverock.androidsvg.SVGAndroidRenderer.debug(java.lang.String, java.lang.Object[]):void type: STATIC \l0x0008: IGET  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r6 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x000a: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l  (r7 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.SVGAndroidRenderer.updateStyleForElement(com.caverock.androidsvg.SVGAndroidRenderer$RendererState, com.caverock.androidsvg.SVG$SvgElementBase):void type: DIRECT \l0x000d: INVOKE  (r0 I:boolean) = (r6 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.display():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) = (r6 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.visible():boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IGET  (r0 I:com.caverock.androidsvg.SVG) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.document com.caverock.androidsvg.SVG \l0x001d: IGET  (r2 I:java.lang.String) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.href java.lang.String \l0x001f: INVOKE  (r0 I:com.caverock.androidsvg.SVG$SvgObject) = (r0 I:com.caverock.androidsvg.SVG), (r2 I:java.lang.String) com.caverock.androidsvg.SVG.resolveIRI(java.lang.String):com.caverock.androidsvg.SVG$SvgObject type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: CONST_STR  (r0 I:java.lang.String) =  \"TextPath reference '%s' not found\" \l0x0027: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0028: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002a: IGET  (r7 I:java.lang.String) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.href java.lang.String \l0x002c: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x002e: INVOKE  (r0 I:java.lang.String), (r2 I:java.lang.Object[]) com.caverock.androidsvg.SVGAndroidRenderer.error(java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$Path) = (com.caverock.androidsvg.SVG$Path) (r0 I:?[OBJECT, ARRAY]) \l0x0034: NEW_INSTANCE  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$PathConverter) =  com.caverock.androidsvg.SVGAndroidRenderer$PathConverter \l0x0036: IGET  (r3 I:com.caverock.androidsvg.SVG$PathDefinition) = (r0 I:com.caverock.androidsvg.SVG$Path) com.caverock.androidsvg.SVG.Path.d com.caverock.androidsvg.SVG$PathDefinition \l0x0038: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$PathConverter)\l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r3 I:com.caverock.androidsvg.SVG$PathDefinition)\l com.caverock.androidsvg.SVGAndroidRenderer.PathConverter.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, com.caverock.androidsvg.SVG$PathDefinition):void type: DIRECT \l0x003b: INVOKE  (r2 I:android.graphics.Path) = \l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$PathConverter)\l com.caverock.androidsvg.SVGAndroidRenderer.PathConverter.getPath():android.graphics.Path type: VIRTUAL \l0x003f: IGET  (r3 I:android.graphics.Matrix) = (r0 I:com.caverock.androidsvg.SVG$Path) com.caverock.androidsvg.SVG.Path.transform android.graphics.Matrix \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: IGET  (r0 I:android.graphics.Matrix) = (r0 I:com.caverock.androidsvg.SVG$Path) com.caverock.androidsvg.SVG.Path.transform android.graphics.Matrix \l0x0045: INVOKE  \l  (r2 I:android.graphics.Path)\l  (r0 I:android.graphics.Matrix)\l android.graphics.Path.transform(android.graphics.Matrix):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: NEW_INSTANCE  (r0 I:android.graphics.PathMeasure) =  android.graphics.PathMeasure \l0x004a: INVOKE  \l  (r0 I:android.graphics.PathMeasure)\l  (r2 I:android.graphics.Path)\l  (r1 I:boolean)\l android.graphics.PathMeasure.\<init\>(android.graphics.Path, boolean):void type: DIRECT \l0x004d: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.startOffset com.caverock.androidsvg.SVG$Length \l0x004f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x005d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.startOffset com.caverock.androidsvg.SVG$Length \l0x0054: INVOKE  (r0 I:float) = (r0 I:android.graphics.PathMeasure) android.graphics.PathMeasure.getLength():float type: VIRTUAL \l0x0058: INVOKE  (r0 I:float) = \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:float)\l com.caverock.androidsvg.SVG.Length.floatValue(com.caverock.androidsvg.SVGAndroidRenderer, float):float type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|0x005d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Style$TextAnchor) = (r6 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.getAnchorPosition():com.caverock.androidsvg.SVG$Style$TextAnchor type: DIRECT \l0x0062: SGET  (r4 I:com.caverock.androidsvg.SVG$Style$TextAnchor) =  com.caverock.androidsvg.SVG.Style.TextAnchor.Start com.caverock.androidsvg.SVG$Style$TextAnchor \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0074 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: INVOKE  (r4 I:float) = \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r7 I:com.caverock.androidsvg.SVG$TextContainer)\l com.caverock.androidsvg.SVGAndroidRenderer.calculateTextWidth(com.caverock.androidsvg.SVG$TextContainer):float type: DIRECT \l0x006a: SGET  (r5 I:com.caverock.androidsvg.SVG$Style$TextAnchor) =  com.caverock.androidsvg.SVG.Style.TextAnchor.Middle com.caverock.androidsvg.SVG$Style$TextAnchor \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0073 \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x0070: ARITH  (r4 I:float) = (r4 I:float) \/ (r1 I:float) \l0x0071: ARITH  (r0 I:float) = (r0 I:float) \- (r4 I:float) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|0x0073: ARITH  (r0 I:float) = (r0 I:float) \- (r4 I:float) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|0x0074: INVOKE  (r1 I:com.caverock.androidsvg.SVG$TextRoot) = (r7 I:com.caverock.androidsvg.SVG$TextPath) com.caverock.androidsvg.SVG.TextPath.getTextRoot():com.caverock.androidsvg.SVG$TextRoot type: VIRTUAL \l0x0078: CHECK_CAST  (r1 I:com.caverock.androidsvg.SVG$SvgElement) = (com.caverock.androidsvg.SVG$SvgElement) (r1 I:?[OBJECT, ARRAY]) \l0x007a: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r1 I:com.caverock.androidsvg.SVG$SvgElement)\l com.caverock.androidsvg.SVGAndroidRenderer.checkForGradientsAndPatterns(com.caverock.androidsvg.SVG$SvgElement):void type: DIRECT \l0x007d: INVOKE  (r1 I:boolean) = (r6 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.pushLayer():boolean type: DIRECT \l0x0081: NEW_INSTANCE  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer$PathTextDrawer) =  com.caverock.androidsvg.SVGAndroidRenderer$PathTextDrawer \l0x0083: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer$PathTextDrawer)\l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r2 I:android.graphics.Path)\l  (r0 I:float)\l  (r3 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.PathTextDrawer.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, android.graphics.Path, float, float):void type: DIRECT \l0x0086: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r7 I:com.caverock.androidsvg.SVG$TextContainer)\l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer$TextProcessor)\l com.caverock.androidsvg.SVGAndroidRenderer.enumerateTextSpans(com.caverock.androidsvg.SVG$TextContainer, com.caverock.androidsvg.SVGAndroidRenderer$TextProcessor):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|0x0089: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008e \l}"];
Node_25 [shape=record,label="{25\:\ 0x008b|0x008b: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r7 I:com.caverock.androidsvg.SVG$SvgElement)\l com.caverock.androidsvg.SVGAndroidRenderer.popLayer(com.caverock.androidsvg.SVG$SvgElement):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x008e|0x008e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.renderTextPath((r6 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r7 I:com.caverock.androidsvg.SVG$TextPath A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
}

