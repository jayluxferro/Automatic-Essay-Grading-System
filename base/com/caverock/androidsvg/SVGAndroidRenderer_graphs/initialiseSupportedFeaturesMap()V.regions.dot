digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.initialiseSupportedFeaturesMap()V" {
subgraph cluster_Region_1210498964 {
label = "R(2:0|2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_1943668216 {
label = "Synchronized:R(2:1|(1:3))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_1703878821 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|supportedFeatures = new java.util.HashSet\<\>()\lsupportedFeatures.add(\"Structure\")\lsupportedFeatures.add(\"BasicStructure\")\lsupportedFeatures.add(\"ConditionalProcessing\")\lsupportedFeatures.add(\"Image\")\lsupportedFeatures.add(\"Style\")\lsupportedFeatures.add(\"ViewportAttribute\")\lsupportedFeatures.add(\"Shape\")\lsupportedFeatures.add(\"BasicText\")\lsupportedFeatures.add(\"PaintAttribute\")\lsupportedFeatures.add(\"BasicPaintAttribute\")\lsupportedFeatures.add(\"OpacityAttribute\")\lsupportedFeatures.add(\"BasicGraphicsAttribute\")\lsupportedFeatures.add(\"Marker\")\lsupportedFeatures.add(\"Gradient\")\lsupportedFeatures.add(\"Pattern\")\lsupportedFeatures.add(\"Clip\")\lsupportedFeatures.add(\"BasicClip\")\lsupportedFeatures.add(\"Mask\")\lsupportedFeatures.add(\"View\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x008f|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x008f: MONITOR_EXIT  \l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0090}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0091|REMOVE\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0092|REMOVE\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0093|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{private static synchronized void com.caverock.androidsvg.SVGAndroidRenderer.initialiseSupportedFeaturesMap() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

