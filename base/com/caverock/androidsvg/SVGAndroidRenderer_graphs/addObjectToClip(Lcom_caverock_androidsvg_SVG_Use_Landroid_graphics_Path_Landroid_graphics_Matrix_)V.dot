digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.addObjectToClip(Lcom\/caverock\/androidsvg\/SVG$Use;Landroid\/graphics\/Path;Landroid\/graphics\/Matrix;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|updateStyleForElement(r2.state, r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (display() != false) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (visible() != false) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013}"];
Node_7 [shape=record,label="{7\:\ 0x0015|if (r3.transform == null) goto L_0x001c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|r5.preConcat(r3.transform)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|com.caverock.androidsvg.SVG$SvgObject r0 = r3.document.resolveIRI(r3.href)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|if (r0 != null) goto L_0x0034\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|java.lang.Object[] r5 = new java.lang.Object[]\{r3.href\}\lerror(\"Use reference '%s' not found\", r5)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|checkForClipPath(r3)\laddObjectToClip(r0, false, r4, r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.addObjectToClip((r2v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r3v0 com.caverock.androidsvg.SVG$Use A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

