digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.decodePaintReference(ZLcom\/caverock\/androidsvg\/SVG$Box;Lcom\/caverock\/androidsvg\/SVG$PaintReference;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG) = (r4 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.document com.caverock.androidsvg.SVG \l0x0002: IGET  (r1 I:java.lang.String) = (r7 I:com.caverock.androidsvg.SVG$PaintReference) com.caverock.androidsvg.SVG.PaintReference.href java.lang.String \l0x0004: INVOKE  (r0 I:com.caverock.androidsvg.SVG$SvgObject) = (r0 I:com.caverock.androidsvg.SVG), (r1 I:java.lang.String) com.caverock.androidsvg.SVG.resolveIRI(java.lang.String):com.caverock.androidsvg.SVG$SvgObject type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r6 I:java.lang.String) =  \"%s reference '%s' not found\" \l0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000d: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST_STR  (r1 I:java.lang.String) =  \"Fill\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST_STR  (r1 I:java.lang.String) =  \"Stroke\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0019: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001a: IGET  (r3 I:java.lang.String) = (r7 I:com.caverock.androidsvg.SVG$PaintReference) com.caverock.androidsvg.SVG.PaintReference.href java.lang.String \l0x001c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x001e: INVOKE  (r6 I:java.lang.String), (r0 I:java.lang.Object[]) com.caverock.androidsvg.SVGAndroidRenderer.error(java.lang.String, java.lang.Object[]):void type: STATIC \l0x0021: IGET  (r6 I:com.caverock.androidsvg.SVG$SvgPaint) = (r7 I:com.caverock.androidsvg.SVG$PaintReference) com.caverock.androidsvg.SVG.PaintReference.fallback com.caverock.androidsvg.SVG$SvgPaint \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IGET  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r4 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x0027: IGET  (r7 I:com.caverock.androidsvg.SVG$SvgPaint) = (r7 I:com.caverock.androidsvg.SVG$PaintReference) com.caverock.androidsvg.SVG.PaintReference.fallback com.caverock.androidsvg.SVG$SvgPaint \l0x0029: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l  (r5 I:boolean)\l  (r7 I:com.caverock.androidsvg.SVG$SvgPaint)\l com.caverock.androidsvg.SVGAndroidRenderer.setPaintColour(com.caverock.androidsvg.SVGAndroidRenderer$RendererState, boolean, com.caverock.androidsvg.SVG$SvgPaint):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IGET  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r4 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x0031: IPUT  \l  (r2 I:boolean)\l  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l com.caverock.androidsvg.SVGAndroidRenderer.RendererState.hasFill boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: IGET  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r4 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x0036: IPUT  \l  (r2 I:boolean)\l  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l com.caverock.androidsvg.SVGAndroidRenderer.RendererState.hasStroke boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: INSTANCE_OF  (r7 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$SvgLinearGradient \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0043 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$SvgLinearGradient) = (com.caverock.androidsvg.SVG$SvgLinearGradient) (r0 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r5 I:boolean)\l  (r6 I:com.caverock.androidsvg.SVG$Box)\l  (r0 I:com.caverock.androidsvg.SVG$SvgLinearGradient)\l com.caverock.androidsvg.SVGAndroidRenderer.makeLinearGradient(boolean, com.caverock.androidsvg.SVG$Box, com.caverock.androidsvg.SVG$SvgLinearGradient):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: INSTANCE_OF  (r7 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$SvgRadialGradient \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$SvgRadialGradient) = (com.caverock.androidsvg.SVG$SvgRadialGradient) (r0 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r5 I:boolean)\l  (r6 I:com.caverock.androidsvg.SVG$Box)\l  (r0 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVGAndroidRenderer.makeRadialGradient(boolean, com.caverock.androidsvg.SVG$Box, com.caverock.androidsvg.SVG$SvgRadialGradient):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: INSTANCE_OF  (r6 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$SolidColor \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0056 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$SolidColor) = (com.caverock.androidsvg.SVG$SolidColor) (r0 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r5 I:boolean)\l  (r0 I:com.caverock.androidsvg.SVG$SolidColor)\l com.caverock.androidsvg.SVGAndroidRenderer.setSolidColor(boolean, com.caverock.androidsvg.SVG$SolidColor):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.decodePaintReference((r4 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.caverock.androidsvg.SVG$Box A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.caverock.androidsvg.SVG$PaintReference A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
}

