digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.extractRawText(Lcom\/caverock\/androidsvg\/SVG$TextContainer;Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:java.util.List) = (r5 I:com.caverock.androidsvg.SVG$TextContainer) com.caverock.androidsvg.SVG.TextContainer.children java.util.List \l0x0002: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r2 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r2 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r2 I:?[OBJECT, ARRAY]) \l0x0014: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$TextContainer \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CHECK_CAST  (r2 I:com.caverock.androidsvg.SVG$TextContainer) = (com.caverock.androidsvg.SVG$TextContainer) (r2 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r2 I:com.caverock.androidsvg.SVG$TextContainer)\l  (r6 I:java.lang.StringBuilder)\l com.caverock.androidsvg.SVGAndroidRenderer.extractRawText(com.caverock.androidsvg.SVG$TextContainer, java.lang.StringBuilder):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$TextSequence \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0032 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: CHECK_CAST  (r2 I:com.caverock.androidsvg.SVG$TextSequence) = (com.caverock.androidsvg.SVG$TextSequence) (r2 I:?[OBJECT, ARRAY]) \l0x0024: IGET  (r2 I:java.lang.String) = (r2 I:com.caverock.androidsvg.SVG$TextSequence) com.caverock.androidsvg.SVG.TextSequence.text java.lang.String \l0x0026: INVOKE  (r3 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l0x002a: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) ^ (r0 I:?[int, boolean, short, byte, char]) \l0x002b: INVOKE  (r1 I:java.lang.String) = \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r2 I:java.lang.String)\l  (r1 I:boolean)\l  (r3 I:boolean)\l com.caverock.androidsvg.SVGAndroidRenderer.textXMLSpaceTransform(java.lang.String, boolean, boolean):java.lang.String type: DIRECT \l0x002f: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.extractRawText((r4 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r5 I:com.caverock.androidsvg.SVG$TextContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

