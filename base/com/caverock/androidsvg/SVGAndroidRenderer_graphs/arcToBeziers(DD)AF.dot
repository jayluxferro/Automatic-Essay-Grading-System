digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.arcToBeziers(DD)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (int) java.lang.Math.ceil(java.lang.Math.abs(r25) \/ 90.0d)\ldouble r1 = java.lang.Math.toRadians(r23)\lfloat r3 = (float) (java.lang.Math.toRadians(r25) \/ ((double) r0))\ldouble r4 = (double) r3\ldouble r6 = r4 \/ 2.0d\ldouble r8 = (java.lang.Math.sin(r6) * 1.3333333333333333d) \/ (java.lang.Math.cos(r6) + 1.0d)\lfloat[] r6 = new float[(r0 * 6)]\lr7 = 0\lr10 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|LOOP_START\lPHI: r0 r1 r7 r10 \l  PHI: (r0v4 int) = (r0v3 int), (r0v10 int) binds: [B:0:0x0000, B:2:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 double) = (r1v0 double), (r1v7 double) binds: [B:0:0x0000, B:2:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:0:0x0000, B:2:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v3 int) = (r10v2 int), (r10v5 int) binds: [B:0:0x0000, B:2:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0038\-\>B:2:0x003a\l|if (r7 \>= r0) goto L_0x0089\l}"];
Node_2 [shape=record,label="{2\:\ 0x003a|LOOP_END\lLOOP:0: B:1:0x0038\-\>B:2:0x003a\l|double r11 = ((double) (((float) r7) * r3)) + r1\ldouble r13 = java.lang.Math.cos(r11)\ldouble r15 = java.lang.Math.sin(r11)\lint r17 = r10 + 1\lr20 = r0\lr21 = r1\lr6[r10] = (float) (r13 \- (r8 * r15))\lint r0 = r17 + 1\lr6[r17] = (float) (r15 + (r13 * r8))\ldouble r11 = r11 + r4\ldouble r1 = java.lang.Math.cos(r11)\ldouble r10 = java.lang.Math.sin(r11)\lint r12 = r0 + 1\lr6[r0] = (float) ((r8 * r10) + r1)\lint r0 = r12 + 1\lr6[r12] = (float) (r10 \- (r8 * r1))\lint r12 = r0 + 1\lr6[r0] = (float) r1\lr6[r12] = (float) r10\lint r7 = r7 + 1\lr10 = r12 + 1\lr0 = r20\lr1 = r21\l}"];
Node_3 [shape=record,label="{3\:\ 0x0089|RETURN\l|return r6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0089|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static float[] com.caverock.androidsvg.SVGAndroidRenderer.arcToBeziers((r23v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_1;
Node_4 -> Node_3;
}

