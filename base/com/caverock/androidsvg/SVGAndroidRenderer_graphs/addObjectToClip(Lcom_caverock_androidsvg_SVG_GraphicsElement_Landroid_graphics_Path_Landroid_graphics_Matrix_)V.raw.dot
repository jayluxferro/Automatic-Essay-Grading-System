digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.addObjectToClip(Lcom\/caverock\/androidsvg\/SVG$GraphicsElement;Landroid\/graphics\/Path;Landroid\/graphics\/Matrix;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState) = (r1 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.state com.caverock.androidsvg.SVGAndroidRenderer$RendererState \l0x0002: INVOKE  \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$RendererState)\l  (r2 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.SVGAndroidRenderer.updateStyleForElement(com.caverock.androidsvg.SVGAndroidRenderer$RendererState, com.caverock.androidsvg.SVG$SvgElementBase):void type: DIRECT \l0x0005: INVOKE  (r0 I:boolean) = (r1 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.display():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r1 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.visible():boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r0 I:android.graphics.Matrix) = (r2 I:com.caverock.androidsvg.SVG$GraphicsElement) com.caverock.androidsvg.SVG.GraphicsElement.transform android.graphics.Matrix \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r0 I:android.graphics.Matrix) = (r2 I:com.caverock.androidsvg.SVG$GraphicsElement) com.caverock.androidsvg.SVG.GraphicsElement.transform android.graphics.Matrix \l0x0019: INVOKE  \l  (r4 I:android.graphics.Matrix)\l  (r0 I:android.graphics.Matrix)\l android.graphics.Matrix.preConcat(android.graphics.Matrix):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$Rect \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0021: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$Rect) = (com.caverock.androidsvg.SVG$Rect) (r0 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r0 I:android.graphics.Path) = \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVG$Rect)\l com.caverock.androidsvg.SVGAndroidRenderer.makePathAndBoundingBox(com.caverock.androidsvg.SVG$Rect):android.graphics.Path type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$Circle \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x002d: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$Circle) = (com.caverock.androidsvg.SVG$Circle) (r0 I:?[OBJECT, ARRAY]) \l0x002f: INVOKE  (r0 I:android.graphics.Path) = \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVG$Circle)\l com.caverock.androidsvg.SVGAndroidRenderer.makePathAndBoundingBox(com.caverock.androidsvg.SVG$Circle):android.graphics.Path type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$Ellipse \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0040 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0039: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$Ellipse) = (com.caverock.androidsvg.SVG$Ellipse) (r0 I:?[OBJECT, ARRAY]) \l0x003b: INVOKE  (r0 I:android.graphics.Path) = \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVG$Ellipse)\l com.caverock.androidsvg.SVGAndroidRenderer.makePathAndBoundingBox(com.caverock.androidsvg.SVG$Ellipse):android.graphics.Path type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$PolyLine \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0059 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0045: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$PolyLine) = (com.caverock.androidsvg.SVG$PolyLine) (r0 I:?[OBJECT, ARRAY]) \l0x0047: INVOKE  (r0 I:android.graphics.Path) = \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r0 I:com.caverock.androidsvg.SVG$PolyLine)\l com.caverock.androidsvg.SVGAndroidRenderer.makePathAndBoundingBox(com.caverock.androidsvg.SVG$PolyLine):android.graphics.Path type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: INVOKE  \l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r2 I:com.caverock.androidsvg.SVG$SvgElement)\l com.caverock.androidsvg.SVGAndroidRenderer.checkForClipPath(com.caverock.androidsvg.SVG$SvgElement):void type: DIRECT \l0x004e: INVOKE  (r2 I:android.graphics.Path$FillType) = (r1 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.getClipRuleFromState():android.graphics.Path$FillType type: DIRECT \l0x0052: INVOKE  \l  (r3 I:android.graphics.Path)\l  (r2 I:android.graphics.Path$FillType)\l android.graphics.Path.setFillType(android.graphics.Path$FillType):void type: VIRTUAL \l0x0055: INVOKE  \l  (r3 I:android.graphics.Path)\l  (r0 I:android.graphics.Path)\l  (r4 I:android.graphics.Matrix)\l android.graphics.Path.addPath(android.graphics.Path, android.graphics.Matrix):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0058|0x0058: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|0x0059: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.addObjectToClip((r1 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r2 I:com.caverock.androidsvg.SVG$GraphicsElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Matrix A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

