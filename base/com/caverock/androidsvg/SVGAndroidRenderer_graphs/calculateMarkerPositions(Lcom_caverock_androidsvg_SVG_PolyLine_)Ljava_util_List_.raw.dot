digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.calculateMarkerPositions(Lcom\/caverock\/androidsvg\/SVG$PolyLine;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  \l  (r0 I:java.util.List\<com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector\>)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r3 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000f: NEW_INSTANCE  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) =  com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector \l0x0011: IGET  (r4 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0013: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: AGET  (r6 I:?[int, float]) = (r4 I:?[int, float][]), (r11 I:?[int, short, byte, char]) \l0x0016: IGET  (r4 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0018: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: AGET  (r7 I:?[int, float]) = (r4 I:?[int, float][]), (r12 I:?[int, short, byte, char]) \l0x001b: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001e: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:float)\l  (r9 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, float, float, float, float):void type: DIRECT \l0x0023: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x004e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IGET  (r4 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0029: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x002b: IGET  (r5 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x002d: ARITH  (r6 I:int) = (r2 I:int) + (1 int) \l0x002f: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0031: INVOKE  \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r4 I:float)\l  (r5 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.add(float, float):void type: VIRTUAL \l0x0034: INVOKE  (r3 I:java.util.List), (r10 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0037: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) =  com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector \l0x0039: IGET  (r7 I:float) = \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.x float \l0x003b: ARITH  (r17 I:float) = (r4 I:float) \- (r7 I:float) \l0x003d: IGET  (r7 I:float) = \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.y float \l0x003f: ARITH  (r18 I:float) = (r5 I:float) \- (r7 I:float) \l0x0041: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0042: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0044: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: INVOKE  \l  (r13 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r14 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r15 I:float)\l  (r16 I:float)\l  (r17 I:float)\l  (r18 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, float, float, float, float):void type: DIRECT \l0x004a: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l0x004c: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|0x004e: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$Polygon \l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|0x0050: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0090 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0052|0x0052: IGET  (r1 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0054: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r11 I:?[int, short, byte, char]) \l0x0056: CMP_L  (r1 I:int) = (r4 I:float), (r1 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0058|0x0058: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0093 \l}"];
Node_11 [shape=record,label="{11\:\ 0x005a|0x005a: IGET  (r1 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x005c: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r12 I:?[int, short, byte, char]) \l0x005e: CMP_L  (r1 I:int) = (r5 I:float), (r1 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0060|0x0060: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0093 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: IGET  (r1 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0064: AGET  (r6 I:?[int, float]) = (r1 I:?[int, float][]), (r11 I:?[int, short, byte, char]) \l0x0066: IGET  (r0 I:float[]) = (r0 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0068: AGET  (r7 I:?[int, float]) = (r0 I:?[int, float][]), (r12 I:?[int, short, byte, char]) \l0x006a: INVOKE  \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r6 I:float)\l  (r7 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.add(float, float):void type: VIRTUAL \l0x006d: INVOKE  (r3 I:java.util.List), (r10 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0070: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) =  com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector \l0x0072: IGET  (r1 I:float) = \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.x float \l0x0074: ARITH  (r8 I:float) = (r6 I:float) \- (r1 I:float) \l0x0076: IGET  (r1 I:float) = \l  (r10 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.y float \l0x0078: ARITH  (r9 I:float) = (r7 I:float) \- (r1 I:float) \l0x007a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x007b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x007d: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r5 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:float)\l  (r9 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, float, float, float, float):void type: DIRECT \l0x0080: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.List), (r11 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0084: CHECK_CAST  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) = (com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) (r1 I:?[OBJECT, ARRAY]) \l0x0086: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r1 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.add(com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector):void type: VIRTUAL \l0x0089: INVOKE  (r3 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x008c: INVOKE  (r3 I:java.util.List), (r11 I:int), (r0 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0090|0x0090: INVOKE  (r3 I:java.util.List), (r10 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0093|0x0093: RETURN  \l  (r3 I:java.util.List\<com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.List\<com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector\> com.caverock.androidsvg.SVGAndroidRenderer.calculateMarkerPositions((r19 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r20 I:com.caverock.androidsvg.SVG$PolyLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/SVG$PolyLine;, ), Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVGAndroidRenderer$MarkerVector;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_15;
Node_14 -> Node_15;
}

