digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.extractRawText(Lcom\/caverock\/androidsvg\/SVG$TextContainer;Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r5 = r5.children.iterator()\lr1 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:0:0x0000, B:9:0x0032] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:9:0x0032\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r5.hasNext() == false) goto L_0x0034\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|com.caverock.androidsvg.SVG$SvgObject r2 = (com.caverock.androidsvg.SVG.SvgObject) r5.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if ((r2 instanceof com.caverock.androidsvg.SVG.TextContainer) == false) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|extractRawText((com.caverock.androidsvg.SVG.TextContainer) r2, r6)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if ((r2 instanceof com.caverock.androidsvg.SVG.TextSequence) == false) goto L_0x0032\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|r6.append(textXMLSpaceTransform(((com.caverock.androidsvg.SVG.TextSequence) r2).text, r1, r5.hasNext() ^ true))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:9:0x0032\l|r1 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.extractRawText((r4v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r5v0 com.caverock.androidsvg.SVG$TextContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_12;
Node_9 -> Node_1;
Node_11 -> Node_10;
Node_12 -> Node_9;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

