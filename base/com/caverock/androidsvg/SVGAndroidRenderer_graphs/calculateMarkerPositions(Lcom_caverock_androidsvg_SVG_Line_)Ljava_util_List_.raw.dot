digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.calculateMarkerPositions(Lcom\/caverock\/androidsvg\/SVG$Line;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.x1 com.caverock.androidsvg.SVG$Length \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.x1 com.caverock.androidsvg.SVG$Length \l0x0007: INVOKE  (r0 I:float) = \l  (r0 I:com.caverock.androidsvg.SVG$Length)\l  (r12 I:com.caverock.androidsvg.SVGAndroidRenderer)\l com.caverock.androidsvg.SVG.Length.floatValueX(com.caverock.androidsvg.SVGAndroidRenderer):float type: VIRTUAL \l0x000b: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.y1 com.caverock.androidsvg.SVG$Length \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.y1 com.caverock.androidsvg.SVG$Length \l0x0014: INVOKE  (r0 I:float) = \l  (r0 I:com.caverock.androidsvg.SVG$Length)\l  (r12 I:com.caverock.androidsvg.SVGAndroidRenderer)\l com.caverock.androidsvg.SVG.Length.floatValueY(com.caverock.androidsvg.SVGAndroidRenderer):float type: VIRTUAL \l0x0018: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.x2 com.caverock.androidsvg.SVG$Length \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.x2 com.caverock.androidsvg.SVG$Length \l0x0021: INVOKE  (r0 I:float) = \l  (r0 I:com.caverock.androidsvg.SVG$Length)\l  (r12 I:com.caverock.androidsvg.SVGAndroidRenderer)\l com.caverock.androidsvg.SVG.Length.floatValueX(com.caverock.androidsvg.SVGAndroidRenderer):float type: VIRTUAL \l0x0025: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.y2 com.caverock.androidsvg.SVG$Length \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IGET  (r13 I:com.caverock.androidsvg.SVG$Length) = (r13 I:com.caverock.androidsvg.SVG$Line) com.caverock.androidsvg.SVG.Line.y2 com.caverock.androidsvg.SVG$Length \l0x002e: INVOKE  (r1 I:float) = \l  (r13 I:com.caverock.androidsvg.SVG$Length)\l  (r12 I:com.caverock.androidsvg.SVGAndroidRenderer)\l com.caverock.androidsvg.SVG.Length.floatValueY(com.caverock.androidsvg.SVGAndroidRenderer):float type: VIRTUAL \l0x0032: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: NEW_INSTANCE  (r13 I:java.util.ArrayList) =  java.util.ArrayList \l0x0037: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0038: INVOKE  (r13 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x003b: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) =  com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector \l0x003d: ARITH  (r10 I:float) = (r8 I:float) \- (r4 I:float) \l0x003f: ARITH  (r11 I:float) = (r9 I:float) \- (r5 I:float) \l0x0041: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0042: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0043: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0044: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r3 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, float, float, float, float):void type: DIRECT \l0x0048: INVOKE  (r13 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x004b: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector) =  com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector \l0x004d: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004e: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l  (r7 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r8 I:float)\l  (r9 I:float)\l  (r10 I:float)\l  (r11 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(com.caverock.androidsvg.SVGAndroidRenderer, float, float, float, float):void type: DIRECT \l0x0052: INVOKE  (r13 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: RETURN  \l  (r13 I:java.util.List\<com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.List\<com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector\> com.caverock.androidsvg.SVGAndroidRenderer.calculateMarkerPositions((r12 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r13 I:com.caverock.androidsvg.SVG$Line A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/SVG$Line;, ), Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVGAndroidRenderer$MarkerVector;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

