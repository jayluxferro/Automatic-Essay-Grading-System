digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.arcToBeziers(DD)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r25 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0004: CONST  (r2 I:?[long, double]) = \l  (4636033603912859648(0x4056800000000000, double:90.0) ?[long, double])\l \l0x0009: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x000a: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x000e: CAST  (r0 I:int) = (int) (r0 I:double) \l0x000f: INVOKE  (r1 I:double) = (r23 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0013: INVOKE  (r3 I:double) = (r25 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0017: CAST  (r5 I:double) = (double) (r0 I:int) \l0x0018: ARITH  (r3 I:double) = (r3 I:double) \/ (r5 I:double) \l0x0019: CAST  (r3 I:float) = (float) (r3 I:double) \l0x001a: CAST  (r4 I:double) = (double) (r3 I:float) \l0x001b: CONST  (r6 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x001d: ARITH  (r6 I:double) = (r4 I:double) \/ (r6 I:double) \l0x001f: INVOKE  (r8 I:double) = (r6 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0023: CONST  (r10 I:?[long, double]) = \l  (4608683618675807573(0x3ff5555555555555, double:1.3333333333333333) ?[long, double])\l \l0x0028: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x002a: INVOKE  (r6 I:double) = (r6 I:double) java.lang.Math.cos(double):double type: STATIC \l0x002e: CONST  (r10 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0030: ARITH  (r6 I:double) = (r6 I:double) + (r10 I:double) \l0x0031: ARITH  (r8 I:double) = (r8 I:double) \/ (r6 I:double) \l0x0032: ARITH  (r6 I:int) = (r0 I:int) * (6 int) \l0x0034: NEW_ARRAY  (r6 I:float[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0036: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: IF  (r7 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0089 \l}"];
Node_2 [shape=record,label="{2\:\ 0x003a|0x003a: CAST  (r11 I:float) = (float) (r7 I:int) \l0x003b: ARITH  (r11 I:float) = (r11 I:float) * (r3 I:float) \l0x003d: CAST  (r11 I:double) = (double) (r11 I:float) \l0x003e: ARITH  (r11 I:double) = (r11 I:double) + (r1 I:double) \l0x003f: INVOKE  (r13 I:double) = (r11 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0043: INVOKE  (r15 I:double) = (r11 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0047: ARITH  (r17 I:int) = (r10 I:int) + (1 int) \l0x0049: ARITH  (r18 I:double) = (r8 I:double) * (r15 I:double) \l0x004b: MOVE  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: MOVE  (r21 I:?[long, double]) = (r1 I:?[long, double]) \l0x004f: ARITH  (r0 I:double) = (r13 I:double) \- (r18 I:double) \l0x0051: CAST  (r0 I:float) = (float) (r0 I:double) \l0x0052: APUT  \l  (r6 I:?[int, float][])\l  (r10 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0054: ARITH  (r0 I:int) = (r17 I:int) + (1 int) \l0x0056: ARITH  (r13 I:double) = (r13 I:double) * (r8 I:double) \l0x0058: ARITH  (r1 I:double) = (r15 I:double) + (r13 I:double) \l0x005a: CAST  (r1 I:float) = (float) (r1 I:double) \l0x005b: APUT  \l  (r6 I:?[int, float][])\l  (r17 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x005d: ARITH  (r11 I:double) = (r11 I:double) + (r4 I:double) \l0x005e: INVOKE  (r1 I:double) = (r11 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0062: INVOKE  (r10 I:double) = (r11 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0066: ARITH  (r12 I:int) = (r0 I:int) + (1 int) \l0x0068: ARITH  (r13 I:double) = (r8 I:double) * (r10 I:double) \l0x006a: ARITH  (r13 I:double) = (r13 I:double) + (r1 I:double) \l0x006b: CAST  (r13 I:float) = (float) (r13 I:double) \l0x006c: APUT  \l  (r6 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r13 I:?[int, float])\l \l0x006e: ARITH  (r0 I:int) = (r12 I:int) + (1 int) \l0x0070: ARITH  (r13 I:double) = (r8 I:double) * (r1 I:double) \l0x0072: ARITH  (r13 I:double) = (r10 I:double) \- (r13 I:double) \l0x0074: CAST  (r13 I:float) = (float) (r13 I:double) \l0x0075: APUT  \l  (r6 I:?[int, float][])\l  (r12 I:?[int, short, byte, char])\l  (r13 I:?[int, float])\l \l0x0077: ARITH  (r12 I:int) = (r0 I:int) + (1 int) \l0x0079: CAST  (r1 I:float) = (float) (r1 I:double) \l0x007a: APUT  \l  (r6 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x007c: ARITH  (r0 I:int) = (r12 I:int) + (1 int) \l0x007e: CAST  (r1 I:float) = (float) (r10 I:double) \l0x007f: APUT  \l  (r6 I:?[int, float][])\l  (r12 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x0081: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x0083: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0084: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0086: MOVE  (r1 I:?[long, double]) = (r21 I:?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0089|0x0089: RETURN  (r6 I:float[]) \l}"];
MethodNode[shape=record,label="{private static float[] com.caverock.androidsvg.SVGAndroidRenderer.arcToBeziers((r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

