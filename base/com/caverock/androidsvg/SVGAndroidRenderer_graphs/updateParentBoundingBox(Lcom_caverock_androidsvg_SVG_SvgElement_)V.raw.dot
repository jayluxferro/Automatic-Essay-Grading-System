digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.updateParentBoundingBox(Lcom\/caverock\/androidsvg\/SVG$SvgElement;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG$SvgContainer) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.parent com.caverock.androidsvg.SVG$SvgContainer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:android.graphics.Matrix) =  android.graphics.Matrix \l0x000c: INVOKE  (r0 I:android.graphics.Matrix) android.graphics.Matrix.\<init\>():void type: DIRECT \l0x000f: IGET  (r1 I:java.util.Stack\<android.graphics.Matrix\>) = (r7 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.matrixStack java.util.Stack \l0x0011: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x0015: CHECK_CAST  (r1 I:android.graphics.Matrix) = (android.graphics.Matrix) (r1 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r1 I:boolean) = \l  (r1 I:android.graphics.Matrix)\l  (r0 I:android.graphics.Matrix)\l android.graphics.Matrix.invert(android.graphics.Matrix):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00dd \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x001f: NEW_ARRAY  (r1 I:float[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0021: IGET  (r2 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x0023: IGET  (r2 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x0025: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: APUT  \l  (r1 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0028: IGET  (r2 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x002a: IGET  (r2 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x002c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002d: APUT  \l  (r1 I:?[int, float][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x002f: IGET  (r2 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x0031: INVOKE  (r2 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxX():float type: VIRTUAL \l0x0035: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0036: APUT  \l  (r1 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0038: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0039: IGET  (r6 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x003b: IGET  (r6 I:float) = (r6 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x003d: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x003f: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0040: IGET  (r6 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x0042: INVOKE  (r6 I:float) = (r6 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxX():float type: VIRTUAL \l0x0046: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x0048: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0049: IGET  (r6 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x004b: INVOKE  (r6 I:float) = (r6 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxY():float type: VIRTUAL \l0x004f: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x0051: IGET  (r2 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x0053: IGET  (r2 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x0055: CONST  (r6 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0056: APUT  \l  (r1 I:?[int, float][])\l  (r6 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0058: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0059: IGET  (r8 I:com.caverock.androidsvg.SVG$Box) = (r8 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x005b: INVOKE  (r8 I:float) = (r8 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxY():float type: VIRTUAL \l0x005f: APUT  \l  (r1 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[int, float])\l \l0x0061: IGET  (r8 I:android.graphics.Canvas) = (r7 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.canvas android.graphics.Canvas \l0x0063: INVOKE  (r8 I:android.graphics.Matrix) = (r8 I:android.graphics.Canvas) android.graphics.Canvas.getMatrix():android.graphics.Matrix type: VIRTUAL \l0x0067: INVOKE  \l  (r0 I:android.graphics.Matrix)\l  (r8 I:android.graphics.Matrix)\l android.graphics.Matrix.preConcat(android.graphics.Matrix):boolean type: VIRTUAL \l0x006a: INVOKE  (r0 I:android.graphics.Matrix), (r1 I:float[]) android.graphics.Matrix.mapPoints(float[]):void type: VIRTUAL \l0x006d: NEW_INSTANCE  (r8 I:android.graphics.RectF) =  android.graphics.RectF \l0x006f: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0071: AGET  (r2 I:?[int, float]) = (r1 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0073: AGET  (r3 I:?[int, float]) = (r1 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0075: AGET  (r4 I:?[int, float]) = (r1 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0077: INVOKE  \l  (r8 I:android.graphics.RectF)\l  (r0 I:float)\l  (r2 I:float)\l  (r3 I:float)\l  (r4 I:float)\l android.graphics.RectF.\<init\>(float, float, float, float):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x007a|0x007a: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:23:0x00b1 \l}"];
Node_10 [shape=record,label="{10\:\ 0x007c|0x007c: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x007e: IGET  (r2 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.left float \l0x0080: CMP_G  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0082|0x0082: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0088 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0084|0x0084: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0086: IPUT  (r0 I:float), (r8 I:android.graphics.RectF) android.graphics.RectF.left float \l}"];
Node_13 [shape=record,label="{13\:\ 0x0088|0x0088: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x008a: IGET  (r2 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.right float \l0x008c: CMP_L  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_14 [shape=record,label="{14\:\ 0x008e|0x008e: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0094 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0090|0x0090: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0092: IPUT  (r0 I:float), (r8 I:android.graphics.RectF) android.graphics.RectF.right float \l}"];
Node_16 [shape=record,label="{16\:\ 0x0094|0x0094: ARITH  (r0 I:int) = (r5 I:int) + (1 int) \l0x0096: AGET  (r2 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0098: IGET  (r3 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.top float \l0x009a: CMP_G  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ 0x009c|0x009c: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:19:0x00a2 \l}"];
Node_18 [shape=record,label="{18\:\ 0x009e|0x009e: AGET  (r2 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x00a0: IPUT  (r2 I:float), (r8 I:android.graphics.RectF) android.graphics.RectF.top float \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a2|0x00a2: AGET  (r2 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x00a4: IGET  (r3 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.bottom float \l0x00a6: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a8|0x00a8: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x00ae \l}"];
Node_21 [shape=record,label="{21\:\ 0x00aa|0x00aa: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x00ac: IPUT  (r0 I:float), (r8 I:android.graphics.RectF) android.graphics.RectF.bottom float \l}"];
Node_22 [shape=record,label="{22\:\ 0x00ae|0x00ae: ARITH  (r5 I:int) = (r5 I:int) + (2 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b1|0x00b1: IGET  (r0 I:java.util.Stack\<com.caverock.androidsvg.SVG$SvgContainer\>) = (r7 I:com.caverock.androidsvg.SVGAndroidRenderer) com.caverock.androidsvg.SVGAndroidRenderer.parentStack java.util.Stack \l0x00b3: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x00b7: CHECK_CAST  (r0 I:com.caverock.androidsvg.SVG$SvgElement) = (com.caverock.androidsvg.SVG$SvgElement) (r0 I:?[OBJECT, ARRAY]) \l0x00b9: IGET  (r1 I:com.caverock.androidsvg.SVG$Box) = (r0 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l}"];
Node_24 [shape=record,label="{24\:\ 0x00bb|0x00bb: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00cc \l}"];
Node_25 [shape=record,label="{25\:\ 0x00bd|0x00bd: IGET  (r1 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.left float \l0x00bf: IGET  (r2 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.top float \l0x00c1: IGET  (r3 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.right float \l0x00c3: IGET  (r8 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.bottom float \l0x00c5: INVOKE  (r8 I:com.caverock.androidsvg.SVG$Box) = (r1 I:float), (r2 I:float), (r3 I:float), (r8 I:float) com.caverock.androidsvg.SVG.Box.fromLimits(float, float, float, float):com.caverock.androidsvg.SVG$Box type: STATIC \l0x00c9: IPUT  \l  (r8 I:com.caverock.androidsvg.SVG$Box)\l  (r0 I:com.caverock.androidsvg.SVG$SvgElement)\l com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l}"];
Node_26 [shape=record,label="{26\:\ 0x00cc|0x00cc: IGET  (r0 I:com.caverock.androidsvg.SVG$Box) = (r0 I:com.caverock.androidsvg.SVG$SvgElement) com.caverock.androidsvg.SVG.SvgElement.boundingBox com.caverock.androidsvg.SVG$Box \l0x00ce: IGET  (r1 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.left float \l0x00d0: IGET  (r2 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.top float \l0x00d2: IGET  (r3 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.right float \l0x00d4: IGET  (r8 I:float) = (r8 I:android.graphics.RectF) android.graphics.RectF.bottom float \l0x00d6: INVOKE  (r8 I:com.caverock.androidsvg.SVG$Box) = (r1 I:float), (r2 I:float), (r3 I:float), (r8 I:float) com.caverock.androidsvg.SVG.Box.fromLimits(float, float, float, float):com.caverock.androidsvg.SVG$Box type: STATIC \l0x00da: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVG$Box)\l  (r8 I:com.caverock.androidsvg.SVG$Box)\l com.caverock.androidsvg.SVG.Box.union(com.caverock.androidsvg.SVG$Box):void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x00dd|0x00dd: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGAndroidRenderer.updateParentBoundingBox((r7 'this' I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS]), (r8 I:com.caverock.androidsvg.SVG$SvgElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_27;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_9;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
}

