digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.getAnchorPosition()Lcom\/caverock\/androidsvg\/SVG$Style$TextAnchor;" {
subgraph cluster_Region_16207111 {
label = "R(1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1415985516 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1366091984 {
label = "IF [B:1:0x0008, B:3:0x0012] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r2.state.style.direction == com.caverock.androidsvg.SVG.Style.TextDirection.LTR) goto L_0x0025\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|ADDED_TO_REGION\l|if (r2.state.style.textAnchor == com.caverock.androidsvg.SVG.Style.TextAnchor.Middle) goto L_0x0025\l}"];
subgraph cluster_Region_1332406889 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002b|RETURN\l|return r2.state.style.textAnchor\l}"];
}
}
subgraph cluster_Region_1976502774 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|RETURN\l|return r2.state.style.textAnchor == com.caverock.androidsvg.SVG.Style.TextAnchor.Start ? com.caverock.androidsvg.SVG.Style.TextAnchor.End : com.caverock.androidsvg.SVG.Style.TextAnchor.Start\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0015}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001f}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0022}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0025}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private com.caverock.androidsvg.SVG$Style$TextAnchor com.caverock.androidsvg.SVGAndroidRenderer.getAnchorPosition((r2v0 'this' com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_11;
Node_7 -> Node_10;
Node_8 -> Node_9;
}

