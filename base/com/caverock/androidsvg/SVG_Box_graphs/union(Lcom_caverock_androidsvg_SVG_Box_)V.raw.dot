digraph "CFG forcom.caverock.androidsvg.SVG.Box.union(Lcom\/caverock\/androidsvg\/SVG$Box;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x0002: IGET  (r1 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x0004: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x000a: IPUT  (r0 I:float), (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x000e: IGET  (r1 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x0010: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IGET  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x0016: IPUT  (r0 I:float), (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxX():float type: VIRTUAL \l0x001c: INVOKE  (r1 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxX():float type: VIRTUAL \l0x0020: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxX():float type: VIRTUAL \l0x0028: IGET  (r1 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minX float \l0x002a: ARITH  (r0 I:float) = (r0 I:float) \- (r1 I:float) \l0x002b: IPUT  (r0 I:float), (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.width float \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: INVOKE  (r0 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxY():float type: VIRTUAL \l0x0031: INVOKE  (r1 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxY():float type: VIRTUAL \l0x0035: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0042 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: INVOKE  (r3 I:float) = (r3 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.maxY():float type: VIRTUAL \l0x003d: IGET  (r0 I:float) = (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.minY float \l0x003f: ARITH  (r3 I:float) = (r3 I:float) \- (r0 I:float) \l0x0040: IPUT  (r3 I:float), (r2 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.height float \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: RETURN   \l}"];
MethodNode[shape=record,label="{void com.caverock.androidsvg.SVG.Box.union((r2 'this' I:com.caverock.androidsvg.SVG$Box A[IMMUTABLE_TYPE, THIS]), (r3 I:com.caverock.androidsvg.SVG$Box A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

