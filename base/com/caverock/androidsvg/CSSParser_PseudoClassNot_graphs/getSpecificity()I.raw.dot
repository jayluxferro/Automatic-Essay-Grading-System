digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassNot.getSpecificity()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.caverock.androidsvg.CSSParser$Selector\>) = (r4 I:com.caverock.androidsvg.CSSParser$PseudoClassNot) com.caverock.androidsvg.CSSParser.PseudoClassNot.selectorGroup java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r2 I:com.caverock.androidsvg.CSSParser$Selector) = (com.caverock.androidsvg.CSSParser$Selector) (r2 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r3 I:int) = (r2 I:com.caverock.androidsvg.CSSParser$Selector) com.caverock.androidsvg.CSSParser.Selector.specificity int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r3 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r1 I:int) = (r2 I:com.caverock.androidsvg.CSSParser$Selector) com.caverock.androidsvg.CSSParser.Selector.specificity int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{int com.caverock.androidsvg.CSSParser.PseudoClassNot.getSpecificity((r4 'this' I:com.caverock.androidsvg.CSSParser$PseudoClassNot A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_1;
}

