digraph "CFG forcom.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.position int \l0x0002: IGET  (r1 I:int) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.inputLength int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.lang.String) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.input java.lang.String \l0x0008: IGET  (r1 I:int) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.position int \l0x000a: INVOKE  (r0 I:char) = (r0 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000e: INVOKE  (r0 I:boolean) = \l  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r0 I:int)\l com.caverock.androidsvg.SVGParser.TextScanner.isWhitespace(int):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r0 I:int) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.position int \l0x0017: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0019: IPUT  \l  (r0 I:int)\l  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner)\l com.caverock.androidsvg.SVGParser.TextScanner.position int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{void com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace((r2 'this' I:com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_0;
}

