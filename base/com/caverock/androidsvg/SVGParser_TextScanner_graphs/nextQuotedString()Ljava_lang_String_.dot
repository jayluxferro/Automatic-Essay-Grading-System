digraph "CFG forcom.caverock.androidsvg.SVGParser.TextScanner.nextQuotedString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (empty() == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|int r0 = r5.position\lchar r2 = r5.input.charAt(r5.position)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r2 == ''') goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r2 == '\"') goto L_0x001b\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|int r3 = advanceChar()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|LOOP_START\lPHI: r3 \l  PHI: (r3v3 int) = (r3v2 int), (r3v4 int) binds: [B:8:0x001b, B:12:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x001f\-\>B:12:0x0024\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|if (r3 == \-1) goto L_0x0029\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if (r3 == r2) goto L_0x0029\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|LOOP_END\lLOOP:0: B:9:0x001f\-\>B:12:0x0024\l|int r3 = advanceChar()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|if (r3 != \-1) goto L_0x002e\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|r5.position = r0\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|r5.position = r5.position + 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|RETURN\l|return r5.input.substring(r0 + 1, r5.position + \-1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.lang.String com.caverock.androidsvg.SVGParser.TextScanner.nextQuotedString((r5v0 'this' com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_9;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_13;
Node_19 -> Node_13;
}

