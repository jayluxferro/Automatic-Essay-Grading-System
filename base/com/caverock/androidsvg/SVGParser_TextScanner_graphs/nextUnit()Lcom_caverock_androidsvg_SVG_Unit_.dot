digraph "CFG forcom.caverock.androidsvg.SVGParser.TextScanner.nextUnit()Lcom\/caverock\/androidsvg\/SVG$Unit;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (empty() == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r4.input.charAt(r4.position) != '%') goto L_0x001d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r4.position = r4.position + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return com.caverock.androidsvg.SVG.Unit.percent\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d}"];
Node_8 [shape=record,label="{8\:\ 0x0023|if (r4.position \<= (r4.inputLength + \-2)) goto L_0x0026\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|SYNTHETIC\lSplitter:B:10:0x0026\l}"];
Node_11 [shape=record,label="{11\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0043 \}\lSplitter:B:10:0x0026\l|com.caverock.androidsvg.SVG$Unit r0 = com.caverock.androidsvg.SVG.Unit.valueOf(r4.input.substring(r4.position, r4.position + 2).toLowerCase(java.util.Locale.US))     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0043 \}\lr4.position = r4.position + 2     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0043 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|RETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|RETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:10:0x0026\l}"];
MethodNode[shape=record,label="{com.caverock.androidsvg.SVG$Unit com.caverock.androidsvg.SVGParser.TextScanner.nextUnit((r4v0 'this' com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_14 -> Node_13;
}

