digraph "CFG forcom.caverock.androidsvg.SVGParser.TextScanner.nextUnit()Lcom\/caverock\/androidsvg\/SVG$Unit;" {
subgraph cluster_Region_1266129479 {
label = "R(1:(2:(1:2)|(1:(2:5|6)(1:(1:9)(1:(2:11|12))))))";
node [shape=record,color=blue];
subgraph cluster_Region_496503757 {
label = "R(2:(1:2)|(1:(2:5|6)(1:(1:9)(1:(2:11|12)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1042379189 {
label = "IF [B:1:0x0005] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (empty() == true) goto L_0x0007\l}"];
subgraph cluster_Region_925844796 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1090343996 {
label = "R(1:(2:5|6)(1:(1:9)(1:(2:11|12))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_493283725 {
label = "IF [B:4:0x0012] THEN: R(2:5|6) ELSE: R(1:(1:9)(1:(2:11|12)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r4.input.charAt(r4.position) == '%') goto L_0x0014\l}"];
subgraph cluster_Region_679448397 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|r4.position++\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return com.caverock.androidsvg.SVG.Unit.percent\l}"];
}
subgraph cluster_Region_1706306011 {
label = "R(1:(1:9)(1:(2:11|12))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1338170853 {
label = "IF [B:8:0x0023] THEN: R(1:9) ELSE: R(1:(2:11|12)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0023|if (r4.position \> (r4.inputLength \- 2)) goto L_0x0025\l}"];
subgraph cluster_Region_1698852625 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return null\l}"];
}
subgraph cluster_Region_831750419 {
label = "R(1:(2:11|12))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1965923339 {
label = "Try: R(2:11|12) catches: R(1:13)";
node [shape=record,color=blue];
subgraph cluster_Region_1677987232 {
label = "R(2:11|12)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0043 \}\lSplitter:B:10:0x0026\l|com.caverock.androidsvg.SVG$Unit com.caverock.androidsvg.SVG.Unit r0 = com.caverock.androidsvg.SVG.Unit.valueOf(r4.input.substring(r4.position, r4.position + 2).toLowerCase(java.util.Locale.US))     \/\/ Catch:\{ IllegalArgumentException \-\> 0x0043 \}\lr4.position += 2\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_752442046 {
label = "R(1:13) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0043|RETURN\l|return null\l}"];
}
}
}
}
}
}
}
}
}
subgraph cluster_Region_752442046 {
label = "R(1:13) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0043|RETURN\l|return null\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0026|SYNTHETIC\lSplitter:B:10:0x0026\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:10:0x0026\l}"];
MethodNode[shape=record,label="{com.caverock.androidsvg.SVG$Unit com.caverock.androidsvg.SVGParser.TextScanner.nextUnit((r4v0 'this' com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_14 -> Node_13;
}

