digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassEmpty.matches(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r2 I:boolean) = (r3 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$SvgContainer \l0x0002: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CHECK_CAST  (r3 I:com.caverock.androidsvg.SVG$SvgContainer) = (com.caverock.androidsvg.SVG$SvgContainer) (r3 I:?[OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:java.util.List) = (r3 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x000b: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.caverock.androidsvg.CSSParser.PseudoClassEmpty.matches((r1 'this' I:com.caverock.androidsvg.CSSParser$PseudoClassEmpty A[IMMUTABLE_TYPE, THIS]), (r2 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
}

