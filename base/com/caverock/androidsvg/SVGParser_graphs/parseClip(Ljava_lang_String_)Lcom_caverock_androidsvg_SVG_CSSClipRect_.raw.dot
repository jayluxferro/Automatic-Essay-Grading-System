digraph "CFG forcom.caverock.androidsvg.SVGParser.parseClip(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$CSSClipRect;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"auto\" \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r6 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:com.caverock.androidsvg.SVG$CSSClipRect) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST_STR  (r0 I:java.lang.String) =  \"rect(\" \l0x000c: INVOKE  (r0 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r1 I:com.caverock.androidsvg.SVG$CSSClipRect) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) =  com.caverock.androidsvg.SVGParser$TextScanner \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x001a: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r6 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.TextScanner.\<init\>(java.lang.String):void type: DIRECT \l0x001d: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x0020: INVOKE  (r6 I:com.caverock.androidsvg.SVG$Length) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.parseLengthOrAuto(com.caverock.androidsvg.SVGParser$TextScanner):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0024: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x0027: INVOKE  (r2 I:com.caverock.androidsvg.SVG$Length) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.parseLengthOrAuto(com.caverock.androidsvg.SVGParser$TextScanner):com.caverock.androidsvg.SVG$Length type: STATIC \l0x002b: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x002e: INVOKE  (r3 I:com.caverock.androidsvg.SVG$Length) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.parseLengthOrAuto(com.caverock.androidsvg.SVGParser$TextScanner):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0032: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x0035: INVOKE  (r4 I:com.caverock.androidsvg.SVG$Length) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.parseLengthOrAuto(com.caverock.androidsvg.SVGParser$TextScanner):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0039: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x003c: CONST  (r5 I:?[int, float, short, byte, char]) = (41 ?[int, float, short, byte, char]) \l0x003e: INVOKE  (r5 I:boolean) = \l  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r5 I:char)\l com.caverock.androidsvg.SVGParser.TextScanner.consume(char):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|0x0042: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: INVOKE  (r0 I:boolean) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.empty():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004b \l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|0x004a: RETURN  (r1 I:com.caverock.androidsvg.SVG$CSSClipRect) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVG$CSSClipRect) =  com.caverock.androidsvg.SVG$CSSClipRect \l0x004d: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVG$CSSClipRect)\l  (r6 I:com.caverock.androidsvg.SVG$Length)\l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r3 I:com.caverock.androidsvg.SVG$Length)\l  (r4 I:com.caverock.androidsvg.SVG$Length)\l com.caverock.androidsvg.SVG.CSSClipRect.\<init\>(com.caverock.androidsvg.SVG$Length, com.caverock.androidsvg.SVG$Length, com.caverock.androidsvg.SVG$Length, com.caverock.androidsvg.SVG$Length):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0050|0x0050: RETURN  (r0 I:com.caverock.androidsvg.SVG$CSSClipRect) \l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$CSSClipRect com.caverock.androidsvg.SVGParser.parseClip((r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
}

