digraph "CFG forcom.caverock.androidsvg.SVGParser.hslToRgb(FFF)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1135869952(0x43b40000, float:360.0) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CMP_L  (r2 I:int) = (r3 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: ARITH  (r3 I:float) = (r3 I:float) % (r0 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: ARITH  (r3 I:float) = (r3 I:float) % (r0 I:float) \l0x000a: ARITH  (r3 I:float) = (r3 I:float) + (r0 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1114636288(0x42700000, float:60.0) ?[int, float, short, byte, char])\l \l0x000d: ARITH  (r3 I:float) = (r3 I:float) \/ (r0 I:float) \l0x000e: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1120403456(0x42c80000, float:100.0) ?[int, float, short, byte, char])\l \l0x0010: ARITH  (r4 I:float) = (r4 I:float) \/ (r0 I:float) \l0x0011: ARITH  (r5 I:float) = (r5 I:float) \/ (r0 I:float) \l0x0012: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0014: CMP_G  (r2 I:int) = (r4 I:float), (r1 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CMP_L  (r2 I:int) = (r4 I:float), (r0 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: CMP_G  (r2 I:int) = (r5 I:float), (r1 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: CMP_L  (r1 I:int) = (r5 I:float), (r0 I:float) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x002c \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x002e: CMP_G  (r1 I:int) = (r5 I:float), (r1 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:19:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: ARITH  (r4 I:float) = (r4 I:float) + (r0 I:float) \l0x0033: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: ARITH  (r0 I:float) = (r5 I:float) + (r4 I:float) \l0x0038: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x003a: ARITH  (r4 I:float) = (r0 I:float) \- (r4 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x003e: ARITH  (r5 I:float) = (r5 I:float) * (r0 I:float) \l0x0040: ARITH  (r5 I:float) = (r5 I:float) \- (r4 I:float) \l0x0041: ARITH  (r1 I:float) = (r3 I:float) + (r0 I:float) \l0x0043: INVOKE  (r1 I:float) = (r5 I:float), (r4 I:float), (r1 I:float) com.caverock.androidsvg.SVGParser.hueToRgb(float, float, float):float type: STATIC \l0x0047: INVOKE  (r2 I:float) = (r5 I:float), (r4 I:float), (r3 I:float) com.caverock.androidsvg.SVGParser.hueToRgb(float, float, float):float type: STATIC \l0x004b: ARITH  (r3 I:float) = (r3 I:float) \- (r0 I:float) \l0x004c: INVOKE  (r3 I:float) = (r5 I:float), (r4 I:float), (r3 I:float) com.caverock.androidsvg.SVGParser.hueToRgb(float, float, float):float type: STATIC \l0x0050: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1132462080(0x43800000, float:256.0) ?[int, float, short, byte, char])\l \l0x0052: ARITH  (r1 I:float) = (r1 I:float) * (r4 I:float) \l0x0054: INVOKE  (r5 I:int) = (r1 I:float) com.caverock.androidsvg.SVGParser.clamp255(float):int type: STATIC \l0x0058: ARITH  (r5 I:int) = (r5 I:int) \<\< (16 int) \l0x005a: ARITH  (r2 I:float) = (r2 I:float) * (r4 I:float) \l0x005c: INVOKE  (r0 I:int) = (r2 I:float) com.caverock.androidsvg.SVGParser.clamp255(float):int type: STATIC \l0x0060: ARITH  (r0 I:int) = (r0 I:int) \<\< (8 int) \l0x0062: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r0 I:?[int, boolean, short, byte, char]) \l0x0063: ARITH  (r3 I:float) = (r3 I:float) * (r4 I:float) \l0x0065: INVOKE  (r3 I:int) = (r3 I:float) com.caverock.androidsvg.SVGParser.clamp255(float):int type: STATIC \l0x0069: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|0x006a: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.caverock.androidsvg.SVGParser.hslToRgb((r3 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

