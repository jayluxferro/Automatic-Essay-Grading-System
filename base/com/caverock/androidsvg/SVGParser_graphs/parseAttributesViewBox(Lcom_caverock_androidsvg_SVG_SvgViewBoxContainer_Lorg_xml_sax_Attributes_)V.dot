digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesViewBox(Lcom\/caverock\/androidsvg\/SVG$SvgViewBoxContainer;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:9:0x0031] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:9:0x0031\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r0 \>= r6.getLength()) goto L_0x0034\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.String r1 = r6.getValue(r0).trim()\lr2 = com.caverock.androidsvg.SVGParser.C05871.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr[com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r6.getLocalName(r0)).ordinal()]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|if (r2 == 7) goto L_0x002e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r2 == 87) goto L_0x0027\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|r5.viewBox = parseViewBox(r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|parsePreserveAspectRatio(r5, r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:9:0x0031\l|int r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesViewBox((r4v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r5v0 com.caverock.androidsvg.SVG$SvgViewBoxContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_14[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_12;
Node_9 -> Node_1;
Node_11 -> Node_10;
Node_12 -> Node_9;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

