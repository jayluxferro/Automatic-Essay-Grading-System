digraph "CFG forcom.caverock.androidsvg.SVGParser.parseViewBox(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Box;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) =  com.caverock.androidsvg.SVGParser$TextScanner \l0x0002: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.TextScanner.\<init\>(java.lang.String):void type: DIRECT \l0x0005: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x0008: INVOKE  (r5 I:float) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x000c: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x000f: INVOKE  (r1 I:float) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x0013: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x0016: INVOKE  (r2 I:float) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x001a: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x001d: INVOKE  (r0 I:float) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x0021: INVOKE  (r3 I:boolean) = (r5 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|0x0027: INVOKE  (r3 I:boolean) = (r1 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: INVOKE  (r3 I:boolean) = (r2 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: INVOKE  (r3 I:boolean) = (r0 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: CMP_G  (r4 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0050 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: CMP_G  (r3 I:int) = (r0 I:float), (r3 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: NEW_INSTANCE  (r3 I:com.caverock.androidsvg.SVG$Box) =  com.caverock.androidsvg.SVG$Box \l0x0044: INVOKE  \l  (r3 I:com.caverock.androidsvg.SVG$Box)\l  (r5 I:float)\l  (r1 I:float)\l  (r2 I:float)\l  (r0 I:float)\l com.caverock.androidsvg.SVG.Box.\<init\>(float, float, float, float):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: RETURN  (r3 I:com.caverock.androidsvg.SVG$Box) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x004a: CONST_STR  (r0 I:java.lang.String) =  \"Invalid viewBox. height cannot be negative\" \l0x004c: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0052: CONST_STR  (r0 I:java.lang.String) =  \"Invalid viewBox. width cannot be negative\" \l0x0054: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x005a: CONST_STR  (r0 I:java.lang.String) =  \"Invalid viewBox definition \- should have four numbers\" \l0x005c: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Box com.caverock.androidsvg.SVGParser.parseViewBox((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

