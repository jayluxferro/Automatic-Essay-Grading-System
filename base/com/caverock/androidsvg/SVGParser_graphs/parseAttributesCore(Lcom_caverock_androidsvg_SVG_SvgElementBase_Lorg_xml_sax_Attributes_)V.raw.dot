digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesCore(Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r5 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getQName(int):java.lang.String type: INTERFACE \l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"id\" \l0x000d: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0060 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST_STR  (r2 I:java.lang.String) =  \"xml:id\" \l0x0015: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: CONST_STR  (r2 I:java.lang.String) =  \"xml:space\" \l0x001e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: INVOKE  (r5 I:java.lang.String) = (r5 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x0028: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x002c: CONST_STR  (r0 I:java.lang.String) =  \"default\" \l0x002e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: SGET  (r5 I:java.lang.Boolean) =  java.lang.Boolean.FALSE java.lang.Boolean \l0x0036: IPUT  \l  (r5 I:java.lang.Boolean)\l  (r4 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.SVG.SvgElementBase.spacePreserve java.lang.Boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: CONST_STR  (r0 I:java.lang.String) =  \"preserve\" \l0x003b: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0046 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: SGET  (r5 I:java.lang.Boolean) =  java.lang.Boolean.TRUE java.lang.Boolean \l0x0043: IPUT  \l  (r5 I:java.lang.Boolean)\l  (r4 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.SVG.SvgElementBase.spacePreserve java.lang.Boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: NEW_INSTANCE  (r4 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0048: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004a: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004d: CONST_STR  (r1 I:java.lang.String) =  \"Invalid value for \"xml:space\" attribute: \" \l0x004f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0059: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGParseException)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x005c|0x005c: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0060|0x0060: INVOKE  (r5 I:java.lang.String) = (r5 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x0064: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0068: IPUT  \l  (r5 I:java.lang.String)\l  (r4 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.SVG.SvgElementBase.id java.lang.String \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|0x006a: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesCore((r3 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r4 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_19[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_18 -> Node_1;
Node_19 -> Node_20;
}

