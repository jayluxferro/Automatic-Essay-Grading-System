digraph "CFG forcom.caverock.androidsvg.SVGParser.parseFunctionalIRI(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r2 I:java.lang.String) =  \"none\" \l0x0002: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r0 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST_STR  (r2 I:java.lang.String) =  \"url(\" \l0x000c: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.String) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST_STR  (r2 I:java.lang.String) =  \")\" \l0x0015: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.endsWith(java.lang.String):boolean type: VIRTUAL \l0x0019: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  (r2 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0020: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0022: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:int), (r2 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0026: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: RETURN  (r1 I:java.lang.String) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x002f: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.caverock.androidsvg.SVGParser.parseFunctionalIRI((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

