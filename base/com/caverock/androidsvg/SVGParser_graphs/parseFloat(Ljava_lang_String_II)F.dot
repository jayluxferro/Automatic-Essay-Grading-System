digraph "CFG forcom.caverock.androidsvg.SVGParser.parseFloat(Ljava\/lang\/String;II)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|float r2 = new com.caverock.androidsvg.NumberParser().parseNumber(r1, r2, r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (java.lang.Float.isNaN(r2) != false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|RETURN\l|return r2\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Invalid float value: \")\lr3.append(r1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|throw new com.caverock.androidsvg.SVGParseException(r3.toString())\l}"];
MethodNode[shape=record,label="{private static float com.caverock.androidsvg.SVGParser.parseFloat((r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

