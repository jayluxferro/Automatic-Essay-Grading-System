digraph "CFG forcom.caverock.androidsvg.SVGParser.parseProcessingInstructionAttributes(Lcom\/caverock\/androidsvg\/SVGParser$TextScanner;)Ljava\/util\/Map;" {
subgraph cluster_Region_179919588 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.HashMap java.util.HashMap r0 = new java.util.HashMap()\lr5.skipWhitespace()\ljava.lang.String java.lang.String r2 = r5.nextToken(org.mapsforge.core.model.Tag.KEY_VALUE_SEPARATOR)\l}"];
subgraph cluster_LoopRegion_1011276558 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v0 java.lang.String), (r2v2 java.lang.String) binds: [B:0:0x0000, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|if (r2 != null) goto L_0x0010\l}"];
subgraph cluster_Region_588937932 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_END\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|r5.consume((char) org.mapsforge.core.model.Tag.KEY_VALUE_SEPARATOR)\lr0.put(r2, r5.nextQuotedString())\lr5.skipWhitespace()\ljava.lang.String r2 = r5.nextToken(org.mapsforge.core.model.Tag.KEY_VALUE_SEPARATOR)\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0022|RETURN\l|return r0\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.util.Map\<java.lang.String, java.lang.String\> com.caverock.androidsvg.SVGParser.parseProcessingInstructionAttributes((r4v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r5v0 com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | access modifiers changed from: private\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/SVGParser$TextScanner;, ), Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_1;
Node_4 -> Node_3;
}

