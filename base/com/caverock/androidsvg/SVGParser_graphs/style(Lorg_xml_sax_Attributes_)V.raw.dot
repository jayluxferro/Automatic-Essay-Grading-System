digraph "CFG forcom.caverock.androidsvg.SVGParser.style(Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<style\>\" \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0005: INVOKE  \l  (r7 I:com.caverock.androidsvg.SVGParser)\l  (r0 I:java.lang.String)\l  (r2 I:java.lang.Object[])\l com.caverock.androidsvg.SVGParser.debug(java.lang.String, java.lang.Object[]):void type: DIRECT \l0x0008: IGET  (r0 I:com.caverock.androidsvg.SVG$SvgContainer) = (r7 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.currentElement com.caverock.androidsvg.SVG$SvgContainer \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0050 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST_STR  (r0 I:java.lang.String) =  \"all\" \l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r4 I:int) = (r8 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:11:0x003e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r4 I:java.lang.String) = (r8 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x001b: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x001f: SGET  (r5 I:int[]) =  com.caverock.androidsvg.SVGParser.1.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr int[] \l0x0021: INVOKE  (r6 I:java.lang.String) = (r8 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x0025: INVOKE  (r6 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r6 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x0029: INVOKE  (r6 I:int) = (r6 I:com.caverock.androidsvg.SVGParser$SVGAttr) com.caverock.androidsvg.SVGParser.SVGAttr.ordinal():int type: VIRTUAL \l0x002d: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[88, 89] t:[0x0035, 0x0033] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: CONST_STR  (r0 I:java.lang.String) =  \"text\/css\" \l0x0037: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: SGET  (r8 I:com.caverock.androidsvg.CSSParser$MediaType) =  com.caverock.androidsvg.CSSParser.MediaType.screen com.caverock.androidsvg.CSSParser$MediaType \l0x0042: INVOKE  (r8 I:boolean) = \l  (r3 I:java.lang.String)\l  (r8 I:com.caverock.androidsvg.CSSParser$MediaType)\l com.caverock.androidsvg.CSSParser.mediaMatches(java.lang.String, com.caverock.androidsvg.CSSParser$MediaType):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: IPUT  (r2 I:boolean), (r7 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.inStyleElement boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IPUT  (r2 I:boolean), (r7 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.ignoring boolean \l0x004d: IPUT  (r2 I:int), (r7 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.ignoreDepth int \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x0050|0x0050: NEW_INSTANCE  (r8 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0052: CONST_STR  (r0 I:java.lang.String) =  \"Invalid document. Root element must be \<svg\>\" \l0x0054: INVOKE  \l  (r8 I:com.caverock.androidsvg.SVGParseException)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.style((r7 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r8 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9;
Node_6 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_3;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

