digraph "CFG forcom.caverock.androidsvg.SVGParser.parseTransformList(Ljava\/lang\/String;)Landroid\/graphics\/Matrix;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r19\landroid.graphics.Matrix r1 = new android.graphics.Matrix()\lcom.caverock.androidsvg.SVGParser$TextScanner r2 = new com.caverock.androidsvg.SVGParser.TextScanner(r0)\lr2.skipWhitespace()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lLOOP:0: B:1:0x000f\-\>B:84:0x024a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r2.empty() != false) goto L_0x027d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|java.lang.String r3 = r2.nextFunction()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r3 == null) goto L_0x0266\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|r4 = 65535\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|switch(r3.hashCode()) \{\l    case \-1081239615: goto L_0x005c;\l    case \-925180581: goto L_0x0052;\l    case 109250890: goto L_0x0048;\l    case 109493390: goto L_0x003e;\l    case 109493391: goto L_0x0034;\l    case 1052832078: goto L_0x002a;\l    default: goto L_0x0029;\l\}\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (r3.equals(\"translate\") == false) goto L_0x0065\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|r4 = 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034}"];
Node_11 [shape=record,label="{11\:\ 0x003a|if (r3.equals(\"skewY\") == false) goto L_0x0065\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|r4 = 5\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e}"];
Node_14 [shape=record,label="{14\:\ 0x0044|if (r3.equals(\"skewX\") == false) goto L_0x0065\l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|r4 = 4\l}"];
Node_16 [shape=record,label="{16\:\ 0x0048}"];
Node_17 [shape=record,label="{17\:\ 0x004e|if (r3.equals(\"scale\") == false) goto L_0x0065\l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|r4 = 2\l}"];
Node_19 [shape=record,label="{19\:\ 0x0052}"];
Node_20 [shape=record,label="{20\:\ 0x0058|if (r3.equals(\"rotate\") == false) goto L_0x0065\l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|r4 = 3\l}"];
Node_22 [shape=record,label="{22\:\ 0x005c}"];
Node_23 [shape=record,label="{23\:\ 0x0062|if (r3.equals(\"matrix\") == false) goto L_0x0065\l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|r4 = 0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0065|PHI: r4 \l  PHI: (r4v1 char) = (r4v0 char), (r4v0 char), (r4v12 char), (r4v0 char), (r4v13 char), (r4v0 char), (r4v14 char), (r4v0 char), (r4v15 char), (r4v0 char), (r4v16 char), (r4v0 char), (r4v17 char) binds: [B:6:0x0026, B:23:0x0062, B:24:0x0064, B:20:0x0058, B:21:0x005a, B:17:0x004e, B:18:0x0050, B:14:0x0044, B:15:0x0046, B:11:0x003a, B:12:0x003c, B:8:0x0030, B:9:0x0032] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|switch(r4) \{\l    case 0: goto L_0x01e2;\l    case 1: goto L_0x01a2;\l    case 2: goto L_0x0161;\l    case 3: goto L_0x00ff;\l    case 4: goto L_0x00c3;\l    case 5: goto L_0x0087;\l    default: goto L_0x006b;\l\}\l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Invalid transform list fn: \")\lr1.append(r3)\lr1.append(\")\")\l}"];
Node_28 [shape=record,label="{28\:\ 0x0086|throw new com.caverock.androidsvg.SVGParseException(r1.toString())\l}"];
Node_29 [shape=record,label="{29\:\ 0x0087|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lr2.skipWhitespace()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0095|if (java.lang.Float.isNaN(r3) != false) goto L_0x00ac\l}"];
Node_31 [shape=record,label="{31\:\ 0x0097}"];
Node_32 [shape=record,label="{32\:\ 0x009b|if (r2.consume(')') == false) goto L_0x00ac\l}"];
Node_33 [shape=record,label="{33\:\ 0x009d|r1.preSkew(0.0f, (float) java.lang.Math.tan(java.lang.Math.toRadians((double) r3)))\l}"];
Node_34 [shape=record,label="{34\:\ 0x00ac|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00c2|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_36 [shape=record,label="{36\:\ 0x00c3|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lr2.skipWhitespace()\l}"];
Node_37 [shape=record,label="{37\:\ 0x00d1|if (java.lang.Float.isNaN(r3) != false) goto L_0x00e8\l}"];
Node_38 [shape=record,label="{38\:\ 0x00d3}"];
Node_39 [shape=record,label="{39\:\ 0x00d7|if (r2.consume(')') == false) goto L_0x00e8\l}"];
Node_40 [shape=record,label="{40\:\ 0x00d9|r1.preSkew((float) java.lang.Math.tan(java.lang.Math.toRadians((double) r3)), 0.0f)\l}"];
Node_41 [shape=record,label="{41\:\ 0x00e8|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_42 [shape=record,label="{42\:\ 0x00fe|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ff|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lfloat r4 = r2.possibleNextFloat()\lfloat r5 = r2.possibleNextFloat()\lr2.skipWhitespace()\l}"];
Node_44 [shape=record,label="{44\:\ 0x0115|if (java.lang.Float.isNaN(r3) != false) goto L_0x014a\l}"];
Node_45 [shape=record,label="{45\:\ 0x0117}"];
Node_46 [shape=record,label="{46\:\ 0x011b|if (r2.consume(')') == false) goto L_0x014a\l}"];
Node_47 [shape=record,label="{47\:\ 0x011d}"];
Node_48 [shape=record,label="{48\:\ 0x0121|if (java.lang.Float.isNaN(r4) == false) goto L_0x0128\l}"];
Node_49 [shape=record,label="{49\:\ 0x0123|r1.preRotate(r3)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0128}"];
Node_51 [shape=record,label="{51\:\ 0x012c|if (java.lang.Float.isNaN(r5) != false) goto L_0x0133\l}"];
Node_52 [shape=record,label="{52\:\ 0x012e|r1.preRotate(r3, r4, r5)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0133|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0149|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_55 [shape=record,label="{55\:\ 0x014a|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0160|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_57 [shape=record,label="{57\:\ 0x0161|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lfloat r4 = r2.possibleNextFloat()\lr2.skipWhitespace()\l}"];
Node_58 [shape=record,label="{58\:\ 0x0173|if (java.lang.Float.isNaN(r3) != false) goto L_0x018b\l}"];
Node_59 [shape=record,label="{59\:\ 0x0175}"];
Node_60 [shape=record,label="{60\:\ 0x0179|if (r2.consume(')') == false) goto L_0x018b\l}"];
Node_61 [shape=record,label="{61\:\ 0x017b}"];
Node_62 [shape=record,label="{62\:\ 0x017f|if (java.lang.Float.isNaN(r4) == false) goto L_0x0186\l}"];
Node_63 [shape=record,label="{63\:\ 0x0181|r1.preScale(r3, r3)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0186|r1.preScale(r3, r4)\l}"];
Node_65 [shape=record,label="{65\:\ 0x018b|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_66 [shape=record,label="{66\:\ 0x01a1|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_67 [shape=record,label="{67\:\ 0x01a2|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lfloat r4 = r2.possibleNextFloat()\lr2.skipWhitespace()\l}"];
Node_68 [shape=record,label="{68\:\ 0x01b4|if (java.lang.Float.isNaN(r3) != false) goto L_0x01cb\l}"];
Node_69 [shape=record,label="{69\:\ 0x01b6}"];
Node_70 [shape=record,label="{70\:\ 0x01ba|if (r2.consume(')') == false) goto L_0x01cb\l}"];
Node_71 [shape=record,label="{71\:\ 0x01bc}"];
Node_72 [shape=record,label="{72\:\ 0x01c0|if (java.lang.Float.isNaN(r4) == false) goto L_0x01c7\l}"];
Node_73 [shape=record,label="{73\:\ 0x01c2|r1.preTranslate(r3, 0.0f)\l}"];
Node_74 [shape=record,label="{74\:\ 0x01c7|r1.preTranslate(r3, r4)\l}"];
Node_75 [shape=record,label="{75\:\ 0x01cb|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_76 [shape=record,label="{76\:\ 0x01e1|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_77 [shape=record,label="{77\:\ 0x01e2|r2.skipWhitespace()\lfloat r3 = r2.nextFloat()\lr2.skipCommaWhitespace()\lfloat r4 = r2.nextFloat()\lr2.skipCommaWhitespace()\lfloat r13 = r2.nextFloat()\lr2.skipCommaWhitespace()\lfloat r14 = r2.nextFloat()\lr2.skipCommaWhitespace()\lfloat r15 = r2.nextFloat()\lr2.skipCommaWhitespace()\lfloat r16 = r2.nextFloat()\lr2.skipWhitespace()\l}"];
Node_78 [shape=record,label="{78\:\ 0x0213|if (java.lang.Float.isNaN(r16) != false) goto L_0x024f\l}"];
Node_79 [shape=record,label="{79\:\ 0x0215}"];
Node_80 [shape=record,label="{80\:\ 0x0219|if (r2.consume(')') == false) goto L_0x024f\l}"];
Node_81 [shape=record,label="{81\:\ 0x021b|android.graphics.Matrix r12 = new android.graphics.Matrix()\lfloat[] r5 = new float[]\{r3, r13, r15, r4, r14, r16, 0.0f, 0.0f, 1.0f\}\lr12.setValues(r5)\lr1.preConcat(r12)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0243}"];
Node_83 [shape=record,label="{83\:\ 0x0247|if (r2.empty() == false) goto L_0x024a\l}"];
Node_84 [shape=record,label="{84\:\ 0x024a|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:84:0x024a\l|r2.skipCommaWhitespace()\l}"];
Node_85 [shape=record,label="{85\:\ 0x024f|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid transform list: \")\lr2.append(r0)\l}"];
Node_86 [shape=record,label="{86\:\ 0x0265|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_87 [shape=record,label="{87\:\ 0x0266|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Bad transform function encountered in transform list: \")\lr2.append(r0)\l}"];
Node_88 [shape=record,label="{88\:\ 0x027c|throw new com.caverock.androidsvg.SVGParseException(r2.toString())\l}"];
Node_89 [shape=record,label="{89\:\ 0x027d|RETURN\l|return r1\l}"];
Node_90 [shape=record,label="{90\:\ 0x024f|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x027d|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x00ac|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x014a|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x024f|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0266|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x00ac|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x014a|SYNTHETIC\l}"];
Node_98 [shape=record,label="{98\:\ 0x0133|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x01cb|SYNTHETIC\l}"];
Node_100 [shape=record,label="{100\:\ 0x01cb|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x027d|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x00e8|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00e8|SYNTHETIC\l}"];
Node_104 [shape=record,label="{104\:\ 0x006b|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x018b|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x018b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private android.graphics.Matrix com.caverock.androidsvg.SVGParser.parseTransformList((r18v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r19v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_91;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_95;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_6 -> Node_13;
Node_6 -> Node_16;
Node_6 -> Node_19;
Node_6 -> Node_22;
Node_6 -> Node_25;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_25;
Node_9 -> Node_25;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_25;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_25;
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_36;
Node_26 -> Node_43;
Node_26 -> Node_57;
Node_26 -> Node_67;
Node_26 -> Node_77;
Node_26 -> Node_104;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_92;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_96;
Node_33 -> Node_82;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_102;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_103;
Node_40 -> Node_82;
Node_41 -> Node_42;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_93;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_97;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_82;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_98;
Node_52 -> Node_82;
Node_53 -> Node_54;
Node_55 -> Node_56;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_105;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_106;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_82;
Node_64 -> Node_82;
Node_65 -> Node_66;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_99;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_100;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_73 -> Node_82;
Node_74 -> Node_82;
Node_75 -> Node_76;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_90;
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_94;
Node_81 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_84;
Node_83 -> Node_101[style=dashed];
Node_84 -> Node_1;
Node_85 -> Node_86;
Node_87 -> Node_88;
Node_90 -> Node_85;
Node_91 -> Node_89;
Node_92 -> Node_34;
Node_93 -> Node_55;
Node_94 -> Node_85;
Node_95 -> Node_87;
Node_96 -> Node_34;
Node_97 -> Node_55;
Node_98 -> Node_53;
Node_99 -> Node_75;
Node_100 -> Node_75;
Node_101 -> Node_89;
Node_102 -> Node_41;
Node_103 -> Node_41;
Node_104 -> Node_27;
Node_105 -> Node_65;
Node_106 -> Node_65;
}

