digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesPolyLine(Lcom\/caverock\/androidsvg\/SVG$PolyLine;Lorg\/xml\/sax\/Attributes;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:21:0x00b1] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:21:0x00b1\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r1 \>= r9.getLength()) goto L_0x00b5\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r9.getLocalName(r1)) != com.caverock.androidsvg.SVGParser.SVGAttr.points) goto L_0x00b1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|com.caverock.androidsvg.SVGParser$TextScanner r2 = new com.caverock.androidsvg.SVGParser.TextScanner(r9.getValue(r1))\ljava.util.ArrayList r3 = new java.util.ArrayList()\lr2.skipWhitespace()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|LOOP_START\lLOOP:1: B:6:0x0025\-\>B:12:0x0042\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|if (r2.empty() != false) goto L_0x008c\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|float r4 = r2.nextFloat()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|if (java.lang.Float.isNaN(r4) != false) goto L_0x0070\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|r2.skipCommaWhitespace()\lfloat r5 = r2.nextFloat()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|if (java.lang.Float.isNaN(r5) != false) goto L_0x0054\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|LOOP_END\lLOOP:1: B:6:0x0025\-\>B:12:0x0042\l|r2.skipCommaWhitespace()\lr3.add(java.lang.Float.valueOf(r4))\lr3.add(java.lang.Float.valueOf(r5))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Invalid \<\")\lr9.append(r10)\lr9.append(\"\> points attribute. There should be an even number of coordinates.\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x006f|throw new com.caverock.androidsvg.SVGParseException(r9.toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0070|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Invalid \<\")\lr9.append(r10)\lr9.append(\"\> points attribute. Non\-coordinate content found in list.\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x008b|throw new com.caverock.androidsvg.SVGParseException(r9.toString())\l}"];
Node_17 [shape=record,label="{17\:\ 0x008c|r8.points = new float[r3.size()]\ljava.util.Iterator r2 = r3.iterator()\lr3 = 0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0099|LOOP_START\lPHI: r3 \l  PHI: (r3v4 int) = (r3v3 int), (r3v5 int) binds: [B:17:0x008c, B:20:0x009f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:18:0x0099\-\>B:20:0x009f\l}"];
Node_19 [shape=record,label="{19\:\ 0x009d|if (r2.hasNext() == false) goto L_0x00b1\l}"];
Node_20 [shape=record,label="{20\:\ 0x009f|LOOP_END\lLOOP:2: B:18:0x0099\-\>B:20:0x009f\l|float r4 = ((java.lang.Float) r2.next()).floatValue()\lr8.points[r3] = r4\lr3 = r3 + 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b1|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:21:0x00b1\l|int r1 = r1 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b5|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b5|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0070|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x00b1|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x00b1|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x008c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesPolyLine((r7v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r8v0 com.caverock.androidsvg.SVG$PolyLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_28;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_25;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_6;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_18;
Node_21 -> Node_1;
Node_23 -> Node_13;
Node_24 -> Node_22;
Node_25 -> Node_15;
Node_26 -> Node_21;
Node_27 -> Node_21;
Node_28 -> Node_17;
}

