digraph "CFG forcom.caverock.androidsvg.SVGParser.handleProcessingInstruction(Ljava\/lang\/String;Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"xml\-stylesheet\" \l0x0002: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:com.caverock.androidsvg.SVGExternalFileResolver) =  com.caverock.androidsvg.SVG.getFileResolver():com.caverock.androidsvg.SVGExternalFileResolver type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST_STR  (r3 I:java.lang.String) =  \"type\" \l0x0010: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST_STR  (r3 I:java.lang.String) =  \"text\/css\" \l0x001a: CONST_STR  (r0 I:java.lang.String) =  \"type\" \l0x001c: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0020: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"alternate\" \l0x0029: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: CONST_STR  (r3 I:java.lang.String) =  \"no\" \l0x0033: CONST_STR  (r0 I:java.lang.String) =  \"alternate\" \l0x0035: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0039: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: CONST_STR  (r3 I:java.lang.String) =  \"href\" \l0x0042: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0046: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008c \l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|0x004a: INVOKE  (r0 I:com.caverock.androidsvg.SVGExternalFileResolver) =  com.caverock.androidsvg.SVG.getFileResolver():com.caverock.androidsvg.SVGExternalFileResolver type: STATIC \l0x004e: INVOKE  (r3 I:java.lang.String) = \l  (r0 I:com.caverock.androidsvg.SVGExternalFileResolver)\l  (r3 I:java.lang.String)\l com.caverock.androidsvg.SVGExternalFileResolver.resolveCSSStyleSheet(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0055 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|0x0054: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: CONST_STR  (r0 I:java.lang.String) =  \"media\" \l0x0057: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x005b: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x005d|0x005d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0089 \l}"];
Node_21 [shape=record,label="{21\:\ 0x005f|0x005f: CONST_STR  (r0 I:java.lang.String) =  \"all\" \l0x0061: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0065: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0069|0x0069: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0089 \l}"];
Node_23 [shape=record,label="{23\:\ 0x006b|0x006b: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006d: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0070: CONST_STR  (r1 I:java.lang.String) =  \"@media \" \l0x0072: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0075: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0078: CONST_STR  (r4 I:java.lang.String) =  \" \{ \" \l0x007a: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007d: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0080: CONST_STR  (r3 I:java.lang.String) =  \"\}\" \l0x0082: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0085: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|0x0089: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVGParser)\l  (r3 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.parseCSSStyleSheet(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x008c|0x008c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.handleProcessingInstruction((r2 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_25;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

