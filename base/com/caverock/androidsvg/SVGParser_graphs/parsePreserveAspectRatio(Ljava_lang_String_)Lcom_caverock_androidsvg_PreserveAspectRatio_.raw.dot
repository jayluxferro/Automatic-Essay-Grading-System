digraph "CFG forcom.caverock.androidsvg.SVGParser.parsePreserveAspectRatio(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/PreserveAspectRatio;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) =  com.caverock.androidsvg.SVGParser$TextScanner \l0x0002: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.TextScanner.\<init\>(java.lang.String):void type: DIRECT \l0x0005: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x0008: INVOKE  (r1 I:java.lang.String) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextToken():java.lang.String type: VIRTUAL \l0x000c: CONST_STR  (r2 I:java.lang.String) =  \"defer\" \l0x000e: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x0017: INVOKE  (r1 I:java.lang.String) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextToken():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r1 I:com.caverock.androidsvg.PreserveAspectRatio$Alignment) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.AspectRatioKeywords.get(java.lang.String):com.caverock.androidsvg.PreserveAspectRatio$Alignment type: STATIC \l0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: INVOKE  (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l0x0023: INVOKE  (r3 I:boolean) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.empty():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: INVOKE  (r0 I:java.lang.String) = (r0 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextToken():java.lang.String type: VIRTUAL \l0x002d: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x002e: INVOKE  (r3 I:int) = (r0 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0032: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (3347527(0x331447, float:4.690884E\-39) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (109526418(0x6873d92, float:5.0871825E\-35) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003d \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: CONST_STR  (r3 I:java.lang.String) =  \"slice\" \l0x003f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: CONST_STR  (r3 I:java.lang.String) =  \"meet\" \l0x0049: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0050 \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x006d, 0x006a] \l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|0x0053: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0055: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0057: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005a: CONST_STR  (r2 I:java.lang.String) =  \"Invalid preserveAspectRatio definition: \" \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0066: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGParseException)\l  (r5 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|0x0069: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: SGET  (r2 I:com.caverock.androidsvg.PreserveAspectRatio$Scale) =  com.caverock.androidsvg.PreserveAspectRatio.Scale.slice com.caverock.androidsvg.PreserveAspectRatio$Scale \l}"];
Node_20 [shape=record,label="{20\:\ 0x006d|0x006d: SGET  (r2 I:com.caverock.androidsvg.PreserveAspectRatio$Scale) =  com.caverock.androidsvg.PreserveAspectRatio.Scale.meet com.caverock.androidsvg.PreserveAspectRatio$Scale \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.PreserveAspectRatio) =  com.caverock.androidsvg.PreserveAspectRatio \l0x0071: INVOKE  \l  (r5 I:com.caverock.androidsvg.PreserveAspectRatio)\l  (r1 I:com.caverock.androidsvg.PreserveAspectRatio$Alignment)\l  (r2 I:com.caverock.androidsvg.PreserveAspectRatio$Scale)\l com.caverock.androidsvg.PreserveAspectRatio.\<init\>(com.caverock.androidsvg.PreserveAspectRatio$Alignment, com.caverock.androidsvg.PreserveAspectRatio$Scale):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0074|0x0074: RETURN  (r5 I:com.caverock.androidsvg.PreserveAspectRatio) \l}"];
MethodNode[shape=record,label="{static com.caverock.androidsvg.PreserveAspectRatio com.caverock.androidsvg.SVGParser.parsePreserveAspectRatio((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_16[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

