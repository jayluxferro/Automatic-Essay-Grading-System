digraph "CFG forcom.caverock.androidsvg.SVGParser.parseFillRule(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Style$FillRule;" {
subgraph cluster_Region_1967864762 {
label = "R(1:(2:(1:3)|(1:(2:(1:7)|(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_2008373361 {
label = "R(2:(1:3)|(1:(2:(1:7)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1006136824 {
label = "IF [B:1:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (\"nonzero\".equals(r1) == true) goto L_0x0008\l}"];
subgraph cluster_Region_726645297 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return com.caverock.androidsvg.SVG.Style.FillRule.NonZero\l}"];
}
}
subgraph cluster_Region_125161993 {
label = "R(1:(2:(1:7)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1516139590 {
label = "R(2:(1:7)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_573654360 {
label = "IF [B:5:0x0011] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|if (\"evenodd\".equals(r1) == true) goto L_0x0013\l}"];
subgraph cluster_Region_1954151709 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return com.caverock.androidsvg.SVG.Style.FillRule.EvenOdd\l}"];
}
}
subgraph cluster_Region_1563790337 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0016|RETURN\l|return null\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Style$FillRule com.caverock.androidsvg.SVGParser.parseFillRule((r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

