digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesMarker(Lcom\/caverock\/androidsvg\/SVG$Marker;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:int) = (r7 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:31:0x009f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = (r7 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x000c: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0010: SGET  (r3 I:int[]) =  com.caverock.androidsvg.SVGParser.1.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr int[] \l0x0012: INVOKE  (r4 I:java.lang.String) = (r7 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x0016: INVOKE  (r4 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r4 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x001a: INVOKE  (r4 I:int) = (r4 I:com.caverock.androidsvg.SVGParser$SVGAttr) com.caverock.androidsvg.SVGParser.SVGAttr.ordinal():int type: VIRTUAL \l0x001e: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[26, 27, 28, 29, 30, 31] t:[0x0095, 0x008e, 0x0077, 0x0060, 0x0041, 0x0025] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: CONST_STR  (r3 I:java.lang.String) =  \"auto\" \l0x0027: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0036 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (2143289344(0x7fc00000, float:NaN) ?[int, float, short, byte, char])\l \l0x002f: INVOKE  (r2 I:java.lang.Float) = (r2 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0033: IPUT  \l  (r2 I:java.lang.Float)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.orient java.lang.Float \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: INVOKE  (r2 I:float) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseFloat(java.lang.String):float type: STATIC \l0x003a: INVOKE  (r2 I:java.lang.Float) = (r2 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x003e: IPUT  \l  (r2 I:java.lang.Float)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.orient java.lang.Float \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: CONST_STR  (r3 I:java.lang.String) =  \"strokeWidth\" \l0x0043: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: IPUT  (r0 I:boolean), (r6 I:com.caverock.androidsvg.SVG$Marker) com.caverock.androidsvg.SVG.Marker.markerUnitsAreUser boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: CONST_STR  (r3 I:java.lang.String) =  \"userSpaceOnUse\" \l0x004e: INVOKE  (r2 I:boolean) = (r3 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0058 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|0x0054: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0055: IPUT  (r2 I:boolean), (r6 I:com.caverock.androidsvg.SVG$Marker) com.caverock.androidsvg.SVG.Marker.markerUnitsAreUser boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x005a: CONST_STR  (r7 I:java.lang.String) =  \"Invalid value for attribute markerUnits\" \l0x005c: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGParseException)\l  (r7 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|0x0060: INVOKE  (r2 I:com.caverock.androidsvg.SVG$Length) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0064: IPUT  \l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.markerHeight com.caverock.androidsvg.SVG$Length \l0x0066: IGET  (r2 I:com.caverock.androidsvg.SVG$Length) = (r6 I:com.caverock.androidsvg.SVG$Marker) com.caverock.androidsvg.SVG.Marker.markerHeight com.caverock.androidsvg.SVG$Length \l0x0068: INVOKE  (r2 I:boolean) = (r2 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isNegative():boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006c|0x006c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006f \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0071: CONST_STR  (r7 I:java.lang.String) =  \"Invalid \<marker\> element. markerHeight cannot be negative\" \l0x0073: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGParseException)\l  (r7 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0076|0x0076: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0077|0x0077: INVOKE  (r2 I:com.caverock.androidsvg.SVG$Length) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x007b: IPUT  \l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.markerWidth com.caverock.androidsvg.SVG$Length \l0x007d: IGET  (r2 I:com.caverock.androidsvg.SVG$Length) = (r6 I:com.caverock.androidsvg.SVG$Marker) com.caverock.androidsvg.SVG.Marker.markerWidth com.caverock.androidsvg.SVG$Length \l0x007f: INVOKE  (r2 I:boolean) = (r2 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isNegative():boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0083|0x0083: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0086 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|0x0086: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0088: CONST_STR  (r7 I:java.lang.String) =  \"Invalid \<marker\> element. markerWidth cannot be negative\" \l0x008a: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVGParseException)\l  (r7 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x008d|0x008d: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x008e|0x008e: INVOKE  (r2 I:com.caverock.androidsvg.SVG$Length) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0092: IPUT  \l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.refY com.caverock.androidsvg.SVG$Length \l}"];
Node_29 [shape=record,label="{29\:\ 0x0095|0x0095: INVOKE  (r2 I:com.caverock.androidsvg.SVG$Length) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0099: IPUT  \l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r6 I:com.caverock.androidsvg.SVG$Marker)\l com.caverock.androidsvg.SVG.Marker.refX com.caverock.androidsvg.SVG$Length \l}"];
Node_30 [shape=record,label="{30\:\ 0x009b|0x009b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x009f|0x009f: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesMarker((r5 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r6 I:com.caverock.androidsvg.SVG$Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_31;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_10;
Node_4 -> Node_18;
Node_4 -> Node_23;
Node_4 -> Node_28;
Node_4 -> Node_29;
Node_4 -> Node_30;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_30;
Node_9 -> Node_30;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_30;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_30;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_30[style=dashed];
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_30[style=dashed];
Node_26 -> Node_27;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_1;
}

