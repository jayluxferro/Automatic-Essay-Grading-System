digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesRadialGradient(Lcom\/caverock\/androidsvg\/SVG$SvgRadialGradient;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r6 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:17:0x005b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x000f: SGET  (r2 I:int[]) =  com.caverock.androidsvg.SVGParser.1.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr int[] \l0x0011: INVOKE  (r3 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x0015: INVOKE  (r3 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r3 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x0019: INVOKE  (r3 I:int) = (r3 I:com.caverock.androidsvg.SVGParser$SVGAttr) com.caverock.androidsvg.SVGParser.SVGAttr.ordinal():int type: VIRTUAL \l0x001d: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[12, 13, 14] t:[0x0052, 0x004b, 0x0034] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[35, 36] t:[0x002d, 0x0026] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x002a: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVG.SvgRadialGradient.fy com.caverock.androidsvg.SVG$Length \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0031: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVG.SvgRadialGradient.fx com.caverock.androidsvg.SVG$Length \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0038: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVG.SvgRadialGradient.r com.caverock.androidsvg.SVG$Length \l0x003a: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient) com.caverock.androidsvg.SVG.SvgRadialGradient.r com.caverock.androidsvg.SVG$Length \l0x003c: INVOKE  (r1 I:boolean) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isNegative():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0043 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0045: CONST_STR  (r6 I:java.lang.String) =  \"Invalid \<radialGradient\> element. r cannot be negative\" \l0x0047: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r6 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|0x004b: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x004f: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVG.SvgRadialGradient.cy com.caverock.androidsvg.SVG$Length \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0056: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient)\l com.caverock.androidsvg.SVG.SvgRadialGradient.cx com.caverock.androidsvg.SVG$Length \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesRadialGradient((r4 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r5 I:com.caverock.androidsvg.SVG$SvgRadialGradient A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_4 -> Node_14;
Node_4 -> Node_15;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_5 -> Node_16;
Node_7 -> Node_16;
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_16[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

