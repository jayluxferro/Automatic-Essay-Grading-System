digraph "CFG forcom.caverock.androidsvg.SVGParser.hueToRgb(FFF)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((r4 \> 0.0f ? 1 : (r4 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|float r4 = r4 + 6.0f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|PHI: r4 \l  PHI: (r4v1 float) = (r4v0 float), (r4v4 float) binds: [B:1:0x0005, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if ((r4 \> 6.0f ? 1 : (r4 == 6.0f ? 0 : \-1)) \< 0) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|float r4 = r4 \- 6.0f\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|PHI: r4 \l  PHI: (r4v2 float) = (r4v1 float), (r4v3 float) binds: [B:4:0x000a, B:5:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|if ((r4 \> 1.0f ? 1 : (r4 == 1.0f ? 0 : \-1)) \>= 0) goto L_0x0018\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013}"];
Node_9 [shape=record,label="{9\:\ 0x0017|RETURN\l|return ((r3 \- r2) * r4) + r2\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018}"];
Node_11 [shape=record,label="{11\:\ 0x001c|if ((r4 \> 3.0f ? 1 : (r4 == 3.0f ? 0 : \-1)) \>= 0) goto L_0x001f\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f}"];
Node_14 [shape=record,label="{14\:\ 0x0023|if ((r4 \> 4.0f ? 1 : (r4 == 4.0f ? 0 : \-1)) \>= 0) goto L_0x002b\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025}"];
Node_16 [shape=record,label="{16\:\ 0x002a|RETURN\l|return ((r3 \- r2) * (4.0f \- r4)) + r2\l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|RETURN\l|return r2\l}"];
MethodNode[shape=record,label="{private static float com.caverock.androidsvg.SVGParser.hueToRgb((r2v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
}

