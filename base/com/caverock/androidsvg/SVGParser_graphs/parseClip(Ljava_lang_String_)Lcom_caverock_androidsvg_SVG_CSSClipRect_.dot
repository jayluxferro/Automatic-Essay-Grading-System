digraph "CFG forcom.caverock.androidsvg.SVGParser.parseClip(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$CSSClipRect;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (\"auto\".equals(r6) == false) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r6.startsWith(\"rect(\") != false) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|RETURN\l|return null\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|com.caverock.androidsvg.SVGParser$TextScanner r0 = new com.caverock.androidsvg.SVGParser.TextScanner(r6.substring(5))\lr0.skipWhitespace()\lcom.caverock.androidsvg.SVG$Length r6 = parseLengthOrAuto(r0)\lr0.skipCommaWhitespace()\lcom.caverock.androidsvg.SVG$Length r2 = parseLengthOrAuto(r0)\lr0.skipCommaWhitespace()\lcom.caverock.androidsvg.SVG$Length r3 = parseLengthOrAuto(r0)\lr0.skipCommaWhitespace()\lcom.caverock.androidsvg.SVG$Length r4 = parseLengthOrAuto(r0)\lr0.skipWhitespace()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|if (r0.consume(')') != false) goto L_0x004b\l}"];
Node_8 [shape=record,label="{8\:\ 0x0044}"];
Node_9 [shape=record,label="{9\:\ 0x0048|if (r0.empty() != false) goto L_0x004b\l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b}"];
Node_12 [shape=record,label="{12\:\ 0x0050|RETURN\l|return new com.caverock.androidsvg.SVG.CSSClipRect(r6, r2, r3, r4)\l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$CSSClipRect com.caverock.androidsvg.SVGParser.parseClip((r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
}

