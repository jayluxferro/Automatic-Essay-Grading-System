digraph "CFG forcom.caverock.androidsvg.SVGParser.parseOverflow(Ljava\/lang\/String;)Ljava\/lang\/Boolean;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-1217487446(0xffffffffb76e9daa, float:\-1.42226145E\-5) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-907680051(0xffffffffc9e5e6cd, float:\-1883353.6) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (3005871(0x2dddaf, float:4.212122E\-39) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (466743410(0x1bd1f072, float:3.4731534E\-22) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST_STR  (r0 I:java.lang.String) =  \"visible\" \l0x001b: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0041 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: CONST_STR  (r0 I:java.lang.String) =  \"auto\" \l0x0025: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0041 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: CONST_STR  (r0 I:java.lang.String) =  \"scroll\" \l0x002f: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0041 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: CONST_STR  (r0 I:java.lang.String) =  \"hidden\" \l0x0039: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0041 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|0x0041: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x004a, 0x004a, 0x0047, 0x0047] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0046|0x0046: RETURN  (r2 I:java.lang.Boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0047|0x0047: SGET  (r2 I:java.lang.Boolean) =  java.lang.Boolean.FALSE java.lang.Boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x0049|0x0049: RETURN  (r2 I:java.lang.Boolean) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004a|0x004a: SGET  (r2 I:java.lang.Boolean) =  java.lang.Boolean.TRUE java.lang.Boolean \l}"];
Node_28 [shape=record,label="{28\:\ 0x004c|0x004c: RETURN  (r2 I:java.lang.Boolean) \l}"];
MethodNode[shape=record,label="{private static java.lang.Boolean com.caverock.androidsvg.SVGParser.parseOverflow((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_21[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
}

