digraph "CFG forcom.caverock.androidsvg.SVGParser.parse(Ljava\/io\/InputStream;Z)Lcom\/caverock\/androidsvg\/SVG;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:java.io.InputStream) java.io.InputStream.markSupported():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream \l0x0008: INVOKE  \l  (r0 I:java.io.BufferedInputStream)\l  (r3 I:java.io.InputStream)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream):void type: DIRECT \l0x000b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|SYNTHETIC\lSplitter:B:4:0x000d\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000d\l|0x000d: INVOKE  (r3 I:java.io.InputStream), (r0 I:int) java.io.InputStream.mark(int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}, TRY_ENTER]\l0x0010: INVOKE  (r0 I:int) = (r3 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}]\l0x0014: INVOKE  (r1 I:int) = (r3 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}]\l0x0018: ARITH  (r1 I:int) = (r1 I:int) \<\< (8 int) A[Catch:\{ IOException \-\> 0x002e \}]\l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) A[Catch:\{ IOException \-\> 0x002e \}]\l0x001b: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.reset():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}]\l0x001e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (35615(0x8b1f, float:4.9907E\-41) ?[int, float, short, byte, char])\l A[Catch:\{ IOException \-\> 0x002e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e A[Catch:\{ IOException \-\> 0x002e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream A[Catch:\{ IOException \-\> 0x002e \}]\l0x0025: NEW_INSTANCE  (r1 I:java.util.zip.GZIPInputStream) =  java.util.zip.GZIPInputStream A[Catch:\{ IOException \-\> 0x002e \}]\l0x0027: INVOKE  \l  (r1 I:java.util.zip.GZIPInputStream)\l  (r3 I:java.io.InputStream)\l java.util.zip.GZIPInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ IOException \-\> 0x002e \}]\l0x002a: INVOKE  \l  (r0 I:java.io.BufferedInputStream)\l  (r1 I:java.io.InputStream)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ IOException \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:4:0x000d\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|SYNTHETIC\lSplitter:B:11:0x0030\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0030\l|0x0030: INVOKE  (r3 I:java.io.InputStream), (r0 I:int) java.io.InputStream.mark(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER]\l0x0033: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVGParser)\l  (r3 I:java.io.InputStream)\l  (r4 I:boolean)\l com.caverock.androidsvg.SVGParser.parseUsingXmlPullParser(java.io.InputStream, boolean):void type: DIRECT A[Catch:\{ all \-\> 0x0044 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|SYNTHETIC\lSplitter:B:13:0x0036\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0036\l|0x0036: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: CONST_STR  (r3 I:java.lang.String) =  \"SVGParser\" \l0x003c: CONST_STR  (r4 I:java.lang.String) =  \"Exception thrown closing input stream\" \l0x003e: INVOKE  (r3 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:13:0x0036\l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: IGET  (r3 I:com.caverock.androidsvg.SVG) = (r2 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.svgDocument com.caverock.androidsvg.SVG \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: RETURN  (r3 I:com.caverock.androidsvg.SVG) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|ExcHandler: all null\lSplitter:B:11:0x0030\l|0x0044: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|SYNTHETIC\lSplitter:B:21:0x0045\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x0045\l|0x0045: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0049 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|0x0049: CONST_STR  (r3 I:java.lang.String) =  \"SVGParser\" \l0x004b: CONST_STR  (r0 I:java.lang.String) =  \"Exception thrown closing input stream\" \l0x004d: INVOKE  (r3 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:21:0x0045\l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|0x0050: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{com.caverock.androidsvg.SVG com.caverock.androidsvg.SVGParser.parse((r2 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_13 -> Node_17;
Node_14 -> Node_17;
Node_14 -> Node_18;
Node_16 -> Node_18;
Node_17 -> Node_16;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_25;
Node_22 -> Node_25;
Node_22 -> Node_26;
Node_24 -> Node_26;
Node_25 -> Node_24;
}

