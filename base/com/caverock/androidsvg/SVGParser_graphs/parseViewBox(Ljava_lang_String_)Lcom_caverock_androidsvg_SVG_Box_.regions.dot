digraph "CFG forcom.caverock.androidsvg.SVGParser.parseViewBox(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Box;" {
subgraph cluster_Region_668374985 {
label = "R(2:0|(1:19)(1:(1:17)(1:(1:13)(1:15))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.caverock.androidsvg.SVGParser$TextScanner com.caverock.androidsvg.SVGParser.TextScanner r0 = new com.caverock.androidsvg.SVGParser.TextScanner(r5)\lr0.skipWhitespace()\lfloat float r5 = r0.nextFloat()\lr0.skipCommaWhitespace()\lfloat float r1 = r0.nextFloat()\lr0.skipCommaWhitespace()\lfloat float r2 = r0.nextFloat()\lr0.skipCommaWhitespace()\lfloat float r0 = r0.nextFloat()\l}"];
subgraph cluster_IfRegion_2095755156 {
label = "IF [B:1:0x0025, B:3:0x002b, B:5:0x0031, B:7:0x0037] THEN: R(1:19) ELSE: R(1:(1:17)(1:(1:13)(1:15)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0025|if (java.lang.Float.isNaN(r5) == true) goto L_0x0058\l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|ADDED_TO_REGION\l|if (java.lang.Float.isNaN(r1) == true) goto L_0x0058\l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|ADDED_TO_REGION\l|if (java.lang.Float.isNaN(r2) == true) goto L_0x0058\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|ADDED_TO_REGION\l|if (java.lang.Float.isNaN(r0) == true) goto L_0x0058\l}"];
subgraph cluster_Region_1162575541 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x005f|throw new com.caverock.androidsvg.SVGParseException(\"Invalid viewBox definition \- should have four numbers\")\l}"];
}
subgraph cluster_Region_728957789 {
label = "R(1:(1:17)(1:(1:13)(1:15))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_598886147 {
label = "IF [B:9:0x003c] THEN: R(1:17) ELSE: R(1:(1:13)(1:15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003c|if (r2 \< 0.0f) goto L_0x0050\l}"];
subgraph cluster_Region_611018183 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0057|throw new com.caverock.androidsvg.SVGParseException(\"Invalid viewBox. width cannot be negative\")\l}"];
}
subgraph cluster_Region_945865160 {
label = "R(1:(1:13)(1:15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_818537571 {
label = "IF [B:11:0x0040] THEN: R(1:13) ELSE: R(1:15) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0040|if (r0 \>= 0.0f) goto L_0x0042\l}"];
subgraph cluster_Region_2038484192 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0047|RETURN\l|return new com.caverock.androidsvg.SVG.Box(r5, r1, r2, r0)\l}"];
}
subgraph cluster_Region_650161831 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x004f|throw new com.caverock.androidsvg.SVGParseException(\"Invalid viewBox. height cannot be negative\")\l}"];
}
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0027}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x002d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0033}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0039}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x003e}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0042}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0048}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0050}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0058}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Box com.caverock.androidsvg.SVGParser.parseViewBox((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

