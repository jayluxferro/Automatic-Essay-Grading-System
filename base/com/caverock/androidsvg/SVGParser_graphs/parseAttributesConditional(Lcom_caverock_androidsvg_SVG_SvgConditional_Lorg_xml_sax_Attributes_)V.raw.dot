digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesConditional(Lcom\/caverock\/androidsvg\/SVG$SvgConditional;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:int) = (r7 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = (r7 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x000c: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0010: SGET  (r3 I:int[]) =  com.caverock.androidsvg.SVGParser.1.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr int[] \l0x0012: INVOKE  (r4 I:java.lang.String) = (r7 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x0016: INVOKE  (r4 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r4 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x001a: INVOKE  (r4 I:int) = (r4 I:com.caverock.androidsvg.SVGParser$SVGAttr) com.caverock.androidsvg.SVGParser.SVGAttr.ordinal():int type: VIRTUAL \l0x001e: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[21, 22, 23, 24, 25] t:[0x004d, 0x0049, 0x0041, 0x0039, 0x0024] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseFontFamily(java.lang.String):java.util.List type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: NEW_INSTANCE  (r3 I:java.util.HashSet) =  java.util.HashSet \l0x002c: INVOKE  (r3 I:java.util.HashSet), (r2 I:java.util.Collection) java.util.HashSet.\<init\>(java.util.Collection):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: NEW_INSTANCE  (r3 I:java.util.HashSet) =  java.util.HashSet \l0x0032: INVOKE  (r3 I:java.util.HashSet), (r0 I:int) java.util.HashSet.\<init\>(int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$SvgConditional)\l  (r3 I:java.util.Set)\l com.caverock.androidsvg.SVG.SvgConditional.setRequiredFonts(java.util.Set):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: INVOKE  (r2 I:java.util.Set) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseRequiredFormats(java.lang.String):java.util.Set type: STATIC \l0x003d: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$SvgConditional)\l  (r2 I:java.util.Set)\l com.caverock.androidsvg.SVG.SvgConditional.setRequiredFormats(java.util.Set):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: INVOKE  (r2 I:java.util.Set) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseSystemLanguage(java.lang.String):java.util.Set type: STATIC \l0x0045: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$SvgConditional)\l  (r2 I:java.util.Set)\l com.caverock.androidsvg.SVG.SvgConditional.setSystemLanguage(java.util.Set):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$SvgConditional)\l  (r2 I:java.lang.String)\l com.caverock.androidsvg.SVG.SvgConditional.setRequiredExtensions(java.lang.String):void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: INVOKE  (r2 I:java.util.Set) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseRequiredFeatures(java.lang.String):java.util.Set type: STATIC \l0x0051: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$SvgConditional)\l  (r2 I:java.util.Set)\l com.caverock.androidsvg.SVG.SvgConditional.setRequiredFeatures(java.util.Set):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|0x0054: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesConditional((r5 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r6 I:com.caverock.androidsvg.SVG$SvgConditional A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_11;
Node_4 -> Node_12;
Node_4 -> Node_13;
Node_4 -> Node_14;
Node_4 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_15;
Node_11 -> Node_15;
Node_12 -> Node_15;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

