digraph "CFG forcom.caverock.androidsvg.SVGParser.handleProcessingInstruction(Ljava\/lang\/String;Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.equals(XML_STYLESHEET_PROCESSING_INSTRUCTION) == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (com.caverock.androidsvg.SVG.getFileResolver() == null) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r4.get(\"type\") == null) goto L_0x0027\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if (\"text\/css\".equals(r4.get(\"type\")) != false) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027}"];
Node_10 [shape=record,label="{10\:\ 0x002f|if (r4.get(XML_STYLESHEET_ATTR_ALTERNATE) == null) goto L_0x0040\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031}"];
Node_12 [shape=record,label="{12\:\ 0x003d|if (XML_STYLESHEET_ATTR_ALTERNATE_NO.equals(r4.get(XML_STYLESHEET_ATTR_ALTERNATE)) != false) goto L_0x0040\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|java.lang.String r3 = r4.get(XML_STYLESHEET_ATTR_HREF)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|if (r3 == null) goto L_?\l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|java.lang.String r3 = com.caverock.androidsvg.SVG.getFileResolver().resolveCSSStyleSheet(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|if (r3 != null) goto L_0x0055\l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|java.lang.String r4 = r4.get(XML_STYLESHEET_ATTR_MEDIA)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005d|if (r4 == null) goto L_0x0089\l}"];
Node_21 [shape=record,label="{21\:\ 0x005f}"];
Node_22 [shape=record,label="{22\:\ 0x0069|if (XML_STYLESHEET_ATTR_MEDIA_ALL.equals(r4.trim()) != false) goto L_0x0089\l}"];
Node_23 [shape=record,label="{23\:\ 0x006b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"@media \")\lr0.append(r4)\lr0.append(\" \{ \")\lr0.append(r3)\lr0.append(\"\}\")\ljava.lang.String r3 = r0.toString()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|PHI: r3 \l  PHI: (r3v13 java.lang.String) = (r3v12 java.lang.String), (r3v12 java.lang.String), (r3v15 java.lang.String) binds: [B:20:0x005d, B:22:0x0069, B:23:0x006b] A[DONT_GENERATE, DONT_INLINE]\l|parseCSSStyleSheet(r3)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.handleProcessingInstruction((r2v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_28;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

