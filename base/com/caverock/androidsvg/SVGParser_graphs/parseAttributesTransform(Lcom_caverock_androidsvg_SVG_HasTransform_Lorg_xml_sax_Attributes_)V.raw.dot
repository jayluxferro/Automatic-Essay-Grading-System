digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesTransform(Lcom\/caverock\/androidsvg\/SVG$HasTransform;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r5 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r1 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x000f: SGET  (r2 I:com.caverock.androidsvg.SVGParser$SVGAttr) =  com.caverock.androidsvg.SVGParser.SVGAttr.transform com.caverock.androidsvg.SVGParser$SVGAttr \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x0017: INVOKE  (r1 I:android.graphics.Matrix) = \l  (r3 I:com.caverock.androidsvg.SVGParser)\l  (r1 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.parseTransformList(java.lang.String):android.graphics.Matrix type: DIRECT \l0x001b: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVG$HasTransform)\l  (r1 I:android.graphics.Matrix)\l com.caverock.androidsvg.SVG.HasTransform.setTransform(android.graphics.Matrix):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesTransform((r3 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r4 I:com.caverock.androidsvg.SVG$HasTransform A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

