digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesUse(Lcom\/caverock\/androidsvg\/SVG$Use;Lorg\/xml\/sax\/Attributes;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r6 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:25:0x007f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x000f: SGET  (r2 I:int[]) =  com.caverock.androidsvg.SVGParser.1.$SwitchMap$com$caverock$androidsvg$SVGParser$SVGAttr int[] \l0x0011: INVOKE  (r3 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x0015: INVOKE  (r3 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r3 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x0019: INVOKE  (r3 I:int) = (r3 I:com.caverock.androidsvg.SVGParser$SVGAttr) com.caverock.androidsvg.SVGParser.SVGAttr.ordinal():int type: VIRTUAL \l0x001d: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0062 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x005b, 0x0054, 0x003d, 0x0026] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x002a: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$Use)\l com.caverock.androidsvg.SVG.Use.height com.caverock.androidsvg.SVG$Length \l0x002c: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r5 I:com.caverock.androidsvg.SVG$Use) com.caverock.androidsvg.SVG.Use.height com.caverock.androidsvg.SVG$Length \l0x002e: INVOKE  (r1 I:boolean) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isNegative():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0037: CONST_STR  (r6 I:java.lang.String) =  \"Invalid \<use\> element. height cannot be negative\" \l0x0039: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r6 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0041: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$Use)\l com.caverock.androidsvg.SVG.Use.width com.caverock.androidsvg.SVG$Length \l0x0043: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r5 I:com.caverock.androidsvg.SVG$Use) com.caverock.androidsvg.SVG.Use.width com.caverock.androidsvg.SVG$Length \l0x0045: INVOKE  (r1 I:boolean) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isNegative():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004c \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: NEW_INSTANCE  (r5 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x004e: CONST_STR  (r6 I:java.lang.String) =  \"Invalid \<use\> element. width cannot be negative\" \l0x0050: INVOKE  \l  (r5 I:com.caverock.androidsvg.SVGParseException)\l  (r6 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x0058: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$Use)\l com.caverock.androidsvg.SVG.Use.y com.caverock.androidsvg.SVG$Length \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC \l0x005f: IPUT  \l  (r1 I:com.caverock.androidsvg.SVG$Length)\l  (r5 I:com.caverock.androidsvg.SVG$Use)\l com.caverock.androidsvg.SVG.Use.x com.caverock.androidsvg.SVG$Length \l}"];
Node_19 [shape=record,label="{19\:\ 0x0062|0x0062: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x0064: INVOKE  (r3 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getURI(int):java.lang.String type: INTERFACE \l0x0068: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007a \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: CONST_STR  (r2 I:java.lang.String) =  \"http:\/\/www.w3.org\/1999\/xlink\" \l0x0070: INVOKE  (r3 I:java.lang.String) = (r6 I:org.xml.sax.Attributes), (r0 I:int) org.xml.sax.Attributes.getURI(int):java.lang.String type: INTERFACE \l0x0074: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0078|0x0078: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x007c \l}"];
Node_23 [shape=record,label="{23\:\ 0x007a|0x007a: IPUT  \l  (r1 I:java.lang.String)\l  (r5 I:com.caverock.androidsvg.SVG$Use)\l com.caverock.androidsvg.SVG.Use.href java.lang.String \l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|0x007c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x007f|0x007f: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesUse((r4 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r5 I:com.caverock.androidsvg.SVG$Use A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_7;
Node_5 -> Node_12;
Node_5 -> Node_17;
Node_5 -> Node_18;
Node_5 -> Node_24;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_24[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_24[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_24;
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_1;
}

