digraph "CFG forcom.caverock.androidsvg.SVGParser.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:com.caverock.androidsvg.SVG)\l  (r2 I:com.caverock.androidsvg.SVGParser)\l com.caverock.androidsvg.SVGParser.svgDocument com.caverock.androidsvg.SVG \l0x0006: IPUT  \l  (r0 I:com.caverock.androidsvg.SVG$SvgContainer)\l  (r2 I:com.caverock.androidsvg.SVGParser)\l com.caverock.androidsvg.SVGParser.currentElement com.caverock.androidsvg.SVG$SvgContainer \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: IPUT  (r1 I:boolean), (r2 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.ignoring boolean \l0x000b: IPUT  (r1 I:boolean), (r2 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.inMetadataElement boolean \l0x000d: IPUT  \l  (r0 I:com.caverock.androidsvg.SVGParser$SVGElem)\l  (r2 I:com.caverock.androidsvg.SVGParser)\l com.caverock.androidsvg.SVGParser.metadataTag com.caverock.androidsvg.SVGParser$SVGElem \l0x000f: IPUT  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:com.caverock.androidsvg.SVGParser)\l com.caverock.androidsvg.SVGParser.metadataElementContents java.lang.StringBuilder \l0x0011: IPUT  (r1 I:boolean), (r2 I:com.caverock.androidsvg.SVGParser) com.caverock.androidsvg.SVGParser.inStyleElement boolean \l0x0013: IPUT  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:com.caverock.androidsvg.SVGParser)\l com.caverock.androidsvg.SVGParser.styleElementContents java.lang.StringBuilder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{void com.caverock.androidsvg.SVGParser.\<init\>((r2 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

