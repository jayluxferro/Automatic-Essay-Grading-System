digraph "CFG forcom.caverock.androidsvg.SVGParser.parseTextDirection(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Style$TextDirection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r2.hashCode()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r0 == 107498) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r0 == 113258) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r2.equals(\"rtl\") == false) goto L_0x0023\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|r2 = 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019}"];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r2.equals(\"ltr\") == false) goto L_0x0023\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|r2 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|r2 = 65535\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|PHI: r2 \l  PHI: (r2v1 char) = (r2v5 char), (r2v7 char), (r2v9 char) binds: [B:10:0x0023, B:9:0x0021, B:6:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|switch(r2) \{\l    case 0: goto L_0x002c;\l    case 1: goto L_0x0029;\l    default: goto L_0x0027;\l\}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|RETURN\l|return null\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029}"];
Node_14 [shape=record,label="{14\:\ 0x002b|RETURN\l|return com.caverock.androidsvg.SVG.Style.TextDirection.RTL\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c}"];
Node_16 [shape=record,label="{16\:\ 0x002e|RETURN\l|return com.caverock.androidsvg.SVG.Style.TextDirection.LTR\l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Style$TextDirection com.caverock.androidsvg.SVGParser.parseTextDirection((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_11 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

