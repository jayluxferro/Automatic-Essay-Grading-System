digraph "CFG forcom.caverock.androidsvg.SVGParser.parseTextDecoration(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Style$TextDecoration;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r1 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-1171789332, \-1026963764, 3387192, 93826908, 529818312] t:[0x0030, 0x0026, 0x001c, 0x0012, 0x0008] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"overline\" \l0x000a: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST_STR  (r0 I:java.lang.String) =  \"blink\" \l0x0014: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST_STR  (r0 I:java.lang.String) =  \"none\" \l0x001e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: CONST_STR  (r0 I:java.lang.String) =  \"underline\" \l0x0028: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST_STR  (r0 I:java.lang.String) =  \"line\-through\" \l0x0032: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4] t:[0x004c, 0x0049, 0x0046, 0x0043, 0x0040] \l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|0x003e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|0x003f: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: SGET  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) =  com.caverock.androidsvg.SVG.Style.TextDecoration.Blink com.caverock.androidsvg.SVG$Style$TextDecoration \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0043|0x0043: SGET  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) =  com.caverock.androidsvg.SVG.Style.TextDecoration.LineThrough com.caverock.androidsvg.SVG$Style$TextDecoration \l}"];
Node_25 [shape=record,label="{25\:\ 0x0045|0x0045: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0046|0x0046: SGET  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) =  com.caverock.androidsvg.SVG.Style.TextDecoration.Overline com.caverock.androidsvg.SVG$Style$TextDecoration \l}"];
Node_27 [shape=record,label="{27\:\ 0x0048|0x0048: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0049|0x0049: SGET  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) =  com.caverock.androidsvg.SVG.Style.TextDecoration.Underline com.caverock.androidsvg.SVG$Style$TextDecoration \l}"];
Node_29 [shape=record,label="{29\:\ 0x004b|0x004b: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
Node_30 [shape=record,label="{30\:\ 0x004c|0x004c: SGET  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) =  com.caverock.androidsvg.SVG.Style.TextDecoration.None com.caverock.androidsvg.SVG$Style$TextDecoration \l}"];
Node_31 [shape=record,label="{31\:\ 0x004e|0x004e: RETURN  (r1 I:com.caverock.androidsvg.SVG$Style$TextDecoration) \l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Style$TextDecoration com.caverock.androidsvg.SVGParser.parseTextDecoration((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_6;
Node_1 -> Node_9;
Node_1 -> Node_12;
Node_1 -> Node_15;
Node_1 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_19 -> Node_24;
Node_19 -> Node_26;
Node_19 -> Node_28;
Node_19 -> Node_30;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

