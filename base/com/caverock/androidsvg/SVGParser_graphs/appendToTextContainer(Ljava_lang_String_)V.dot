digraph "CFG forcom.caverock.androidsvg.SVGParser.appendToTextContainer(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.caverock.androidsvg.SVG$SvgConditionalContainer r0 = (com.caverock.androidsvg.SVG.SvgConditionalContainer) r3.currentElement\lint r1 = r0.children.size()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r1 != 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|r0 = null\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|com.caverock.androidsvg.SVG$SvgObject r0 = r0.children.get(r1 + \-1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|PHI: r0 \l  PHI: (r0v2 com.caverock.androidsvg.SVG$SvgObject) = (r0v7 com.caverock.androidsvg.SVG$SvgObject), (r0v8 com.caverock.androidsvg.SVG$SvgObject) binds: [B:3:0x000e, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if ((r0 instanceof com.caverock.androidsvg.SVG.TextSequence) == false) goto L_0x0032\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lcom.caverock.androidsvg.SVG$TextSequence r0 = (com.caverock.androidsvg.SVG.TextSequence) r0\lr1.append(r0.text)\lr1.append(r4)\lr0.text = r1.toString()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|r3.currentElement.addChild(new com.caverock.androidsvg.SVG.TextSequence(r4))\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.appendToTextContainer((r3v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
}

