digraph "CFG forcom.caverock.androidsvg.SVGParser.parseGradientOffset(Ljava\/lang\/String;)Ljava\/lang\/Float;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r6.length() == 0) goto L_0x0050\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|int r0 = r6.length()\lr2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r6.charAt(r6.length() \- 1) != '%') goto L_0x001c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|int r0 = r0 + \-1\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|r2 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|SYNTHETIC\lPHI: r0 r2 \l  PHI: (r0v3 int) = (r0v2 int), (r0v12 int) binds: [B:5:0x001c, B:4:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 boolean) = (r2v5 boolean), (r2v0 boolean) binds: [B:5:0x001c, B:4:0x0019] A[DONT_GENERATE, DONT_INLINE]\lSplitter:B:6:0x001d\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ NumberFormatException \-\> 0x0038 \}\lSplitter:B:6:0x001d\l|float r0 = parseFloat(r6, 0, r0)     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|if (r2 == false) goto L_0x0026     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|float r0 = r0 \/ 100.0f     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|Catch:\{ NumberFormatException \-\> 0x0038 \}\lPHI: r0 \l  PHI: (r0v6 float) = (r0v5 float), (r0v11 float) binds: [B:8:0x0023, B:9:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|if ((r0 \> 0.0f ? 1 : (r0 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x002d     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|r0 = 0.0f     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|if ((r0 \> 100.0f ? 1 : (r0 == 100.0f ? 0 : \-1)) \<= 0) goto L_0x0033     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|Catch:\{ NumberFormatException \-\> 0x0038 \}\l|r0 = 100.0f     \/\/ Catch:\{ NumberFormatException \-\> 0x0038 \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|Catch:\{ NumberFormatException \-\> 0x0038 \}\lPHI: r0 \l  PHI: (r0v7 float) = (r0v6 float), (r0v9 float), (r0v10 float) binds: [B:14:0x002f, B:15:0x0031, B:12:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|RETURN\l|return java.lang.Float.valueOf(r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|ExcHandler: NumberFormatException (r0v4 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\lSplitter:B:6:0x001d\l|java.lang.NumberFormatException r0 = move\-exception\l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid offset value in \<stop\>: \")\lr2.append(r6)\l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|throw new com.caverock.androidsvg.SVGParseException(r2.toString(), r0)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0050}"];
Node_22 [shape=record,label="{22\:\ 0x0057|throw new com.caverock.androidsvg.SVGParseException(\"Invalid offset value in \<stop\> (empty string)\")\l}"];
MethodNode[shape=record,label="{private java.lang.Float com.caverock.androidsvg.SVGParser.parseGradientOffset((r5v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

