digraph "CFG forcom.caverock.androidsvg.SVGParser.parseLengthOrAuto(Lcom\/caverock\/androidsvg\/SVGParser$TextScanner;)Lcom\/caverock\/androidsvg\/SVG$Length;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"auto\" \l0x0002: INVOKE  (r0 I:boolean) = \l  (r1 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.TextScanner.consume(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r1 I:com.caverock.androidsvg.SVG$Length) =  com.caverock.androidsvg.SVG$Length \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length), (r0 I:float) com.caverock.androidsvg.SVG.Length.\<init\>(float):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r1 I:com.caverock.androidsvg.SVG$Length) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextLength():com.caverock.androidsvg.SVG$Length type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r1 I:com.caverock.androidsvg.SVG$Length) \l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Length com.caverock.androidsvg.SVGParser.parseLengthOrAuto((r1 I:com.caverock.androidsvg.SVGParser$TextScanner A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

