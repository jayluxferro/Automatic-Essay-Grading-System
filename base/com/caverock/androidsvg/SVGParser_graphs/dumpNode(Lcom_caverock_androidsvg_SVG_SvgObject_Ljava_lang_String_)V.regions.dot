digraph "CFG forcom.caverock.androidsvg.SVGParser.dumpNode(Lcom\/caverock\/androidsvg\/SVG$SvgObject;Ljava\/lang\/String;)V" {
subgraph cluster_Region_277768917 {
label = "R(2:0|(1:(2:2|(1:5))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.util.Log.d(TAG, r4 + r3)\l}"];
subgraph cluster_Region_1792602076 {
label = "R(1:(2:2|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_426555633 {
label = "IF [B:1:0x0016] THEN: R(2:2|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0016|if ((r3 instanceof com.caverock.androidsvg.SVG.SvgConditionalContainer) == true) goto L_0x0018\l}"];
subgraph cluster_Region_620999343 {
label = "R(2:2|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0018|java.lang.String java.lang.String r4 = r4 + \"  \"\ljava.util.Iterator r3 = ((com.caverock.androidsvg.SVG.SvgConditionalContainer) r3).children.iterator()\l}"];
subgraph cluster_LoopRegion_1933781071 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0035|if (r3.hasNext() != false) goto L_0x0037\l}"];
subgraph cluster_Region_483952628 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0037|LOOP_END\lLOOP:0: B:3:0x0031\-\>B:5:0x0037\l|dumpNode(r0, r4)\l}"];
}
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0031|LOOP_START\lLOOP:0: B:3:0x0031\-\>B:5:0x0037\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0041|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.dumpNode((r2v0 'this' com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r3v0 com.caverock.androidsvg.SVG$SvgObject A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_3;
Node_3 -> Node_4;
Node_6 -> Node_8;
}

