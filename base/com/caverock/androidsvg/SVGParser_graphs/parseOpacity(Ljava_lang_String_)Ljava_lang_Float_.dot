digraph "CFG forcom.caverock.androidsvg.SVGParser.parseOpacity(Ljava\/lang\/String;)Ljava\/lang\/Float;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ SVGParseException \-\> 0x0018 \}\lSplitter:B:0:0x0000\l|float r3 = parseFloat(r3)     \/\/ Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|Catch:\{ SVGParseException \-\> 0x0018 \}\l|if ((r3 \> 0.0f ? 1 : (r3 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x000d     \/\/ Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|Catch:\{ SVGParseException \-\> 0x0018 \}\l|r3 = 0.0f     \/\/ Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|Catch:\{ SVGParseException \-\> 0x0018 \}\l|if ((r3 \> 1.0f ? 1 : (r3 == 1.0f ? 0 : \-1)) \<= 0) goto L_0x0013     \/\/ Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|Catch:\{ SVGParseException \-\> 0x0018 \}\l|r3 = 1.0f     \/\/ Catch:\{ SVGParseException \-\> 0x0018 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|Catch:\{ SVGParseException \-\> 0x0018 \}\lPHI: r3 \l  PHI: (r3v3 float) = (r3v2 float), (r3v5 float), (r3v6 float) binds: [B:5:0x000f, B:6:0x0011, B:3:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|RETURN\l|return java.lang.Float.valueOf(r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: SVGParseException (unused com.caverock.androidsvg.SVGParseException)\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{private static java.lang.Float com.caverock.androidsvg.SVGParser.parseOpacity((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_10 -> Node_9;
}

