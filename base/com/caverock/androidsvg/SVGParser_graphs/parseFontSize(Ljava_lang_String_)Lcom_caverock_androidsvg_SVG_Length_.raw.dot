digraph "CFG forcom.caverock.androidsvg.SVGParser.parseFontSize(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Length;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.FontSizeKeywords.get(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC A[Catch:\{ SVGParseException \-\> 0x000b \}, TRY_ENTER]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a A[Catch:\{ SVGParseException \-\> 0x000b \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:com.caverock.androidsvg.SVG$Length) = (r1 I:java.lang.String) com.caverock.androidsvg.SVGParser.parseLength(java.lang.String):com.caverock.androidsvg.SVG$Length type: STATIC A[Catch:\{ SVGParseException \-\> 0x000b \}]\l0x0009: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN  (r0 I:com.caverock.androidsvg.SVG$Length) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: SVGParseException null\lSplitter:B:0:0x0000\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: RETURN  (r1 I:com.caverock.androidsvg.SVG$Length) \l}"];
MethodNode[shape=record,label="{private static com.caverock.androidsvg.SVG$Length com.caverock.androidsvg.SVGParser.parseFontSize((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_7;
Node_6 -> Node_5;
}

