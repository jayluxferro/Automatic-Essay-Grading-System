digraph "CFG forcom.caverock.androidsvg.SVGParser.parseLength(Ljava\/lang\/String;)Lcom\/caverock\/androidsvg\/SVG$Length;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x007b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000a: SGET  (r1 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.px com.caverock.androidsvg.SVG$Unit \l0x000c: ARITH  (r2 I:int) = (r0 I:int) + (\-1 int) \l0x000e: INVOKE  (r2 I:char) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0012: CONST  (r3 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0018: SGET  (r1 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.percent com.caverock.androidsvg.SVG$Unit \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: INVOKE  (r2 I:boolean) = (r2 I:char) java.lang.Character.isLetter(char):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: ARITH  (r2 I:int) = (r0 I:int) + (\-2 int) \l0x0026: INVOKE  (r2 I:char) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x002a: INVOKE  (r2 I:boolean) = (r2 I:char) java.lang.Character.isLetter(char):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l0x0032: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|SYNTHETIC\lSplitter:B:12:0x0036\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0036\l|0x0036: SGET  (r2 I:java.util.Locale) =  java.util.Locale.US java.util.Locale A[Catch:\{ IllegalArgumentException \-\> 0x0041 \}, TRY_ENTER]\l0x0038: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0041 \}]\l0x003c: INVOKE  (r1 I:com.caverock.androidsvg.SVG$Unit) = (r1 I:java.lang.String) com.caverock.androidsvg.SVG.Unit.valueOf(java.lang.String):com.caverock.androidsvg.SVG$Unit type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x0041 \}]\l0x003f: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: NEW_INSTANCE  (r0 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0043: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0045: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0048: CONST_STR  (r2 I:java.lang.String) =  \"Invalid length unit specifier: \" \l0x004a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0054: INVOKE  \l  (r0 I:com.caverock.androidsvg.SVGParseException)\l  (r4 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:12:0x0036\l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|SYNTHETIC\lSplitter:B:19:0x0059\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0059\l|0x0059: INVOKE  (r0 I:float) = (r4 I:java.lang.String), (r2 I:int), (r0 I:int) com.caverock.androidsvg.SVGParser.parseFloat(java.lang.String, int, int):float type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0063 \}, TRY_ENTER]\l0x005d: NEW_INSTANCE  (r2 I:com.caverock.androidsvg.SVG$Length) =  com.caverock.androidsvg.SVG$Length A[Catch:\{ NumberFormatException \-\> 0x0063 \}]\l0x005f: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVG$Length)\l  (r0 I:float)\l  (r1 I:com.caverock.androidsvg.SVG$Unit)\l com.caverock.androidsvg.SVG.Length.\<init\>(float, com.caverock.androidsvg.SVG$Unit):void type: DIRECT A[Catch:\{ NumberFormatException \-\> 0x0063 \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: RETURN  (r2 I:com.caverock.androidsvg.SVG$Length) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0063|ExcHandler: NumberFormatException null\lSplitter:B:19:0x0059\l|0x0063: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: NEW_INSTANCE  (r1 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0066: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0068: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006b: CONST_STR  (r3 I:java.lang.String) =  \"Invalid length value: \" \l0x006d: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0070: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r4 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0077: INVOKE  \l  (r1 I:com.caverock.androidsvg.SVGParseException)\l  (r4 I:java.lang.String)\l  (r0 I:java.lang.Exception)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String, java.lang.Exception):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x007a|0x007a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x007b|0x007b: NEW_INSTANCE  (r4 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x007d: CONST_STR  (r0 I:java.lang.String) =  \"Invalid length value (empty string)\" \l0x007f: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGParseException)\l  (r0 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0082|0x0082: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static com.caverock.androidsvg.SVG$Length com.caverock.androidsvg.SVGParser.parseLength((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_18;
Node_15 -> Node_17;
Node_16 -> Node_15;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
}

