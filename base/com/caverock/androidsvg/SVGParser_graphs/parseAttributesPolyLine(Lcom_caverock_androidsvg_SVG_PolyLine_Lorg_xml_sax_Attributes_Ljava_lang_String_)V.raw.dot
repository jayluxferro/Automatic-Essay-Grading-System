digraph "CFG forcom.caverock.androidsvg.SVGParser.parseAttributesPolyLine(Lcom\/caverock\/androidsvg\/SVG$PolyLine;Lorg\/xml\/sax\/Attributes;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:int) = (r9 I:org.xml.sax.Attributes) org.xml.sax.Attributes.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:22:0x00b5 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = (r9 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getLocalName(int):java.lang.String type: INTERFACE \l0x000c: INVOKE  (r2 I:com.caverock.androidsvg.SVGParser$SVGAttr) = (r2 I:java.lang.String) com.caverock.androidsvg.SVGParser.SVGAttr.fromString(java.lang.String):com.caverock.androidsvg.SVGParser$SVGAttr type: STATIC \l0x0010: SGET  (r3 I:com.caverock.androidsvg.SVGParser$SVGAttr) =  com.caverock.androidsvg.SVGParser.SVGAttr.points com.caverock.androidsvg.SVGParser$SVGAttr \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00b1 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) =  com.caverock.androidsvg.SVGParser$TextScanner \l0x0016: INVOKE  (r3 I:java.lang.String) = (r9 I:org.xml.sax.Attributes), (r1 I:int) org.xml.sax.Attributes.getValue(int):java.lang.String type: INTERFACE \l0x001a: INVOKE  \l  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner)\l  (r3 I:java.lang.String)\l com.caverock.androidsvg.SVGParser.TextScanner.\<init\>(java.lang.String):void type: DIRECT \l0x001d: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x001f: INVOKE  (r3 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0022: INVOKE  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipWhitespace():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: INVOKE  (r4 I:boolean) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.empty():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x008c \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  (r4 I:float) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x002f: INVOKE  (r5 I:boolean) = (r4 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0070 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: INVOKE  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x0038: INVOKE  (r5 I:float) = (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.nextFloat():float type: VIRTUAL \l0x003c: INVOKE  (r6 I:boolean) = (r5 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0054 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: INVOKE  (r2 I:com.caverock.androidsvg.SVGParser$TextScanner) com.caverock.androidsvg.SVGParser.TextScanner.skipCommaWhitespace():boolean type: VIRTUAL \l0x0045: INVOKE  (r4 I:java.lang.Float) = (r4 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0049: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x004c: INVOKE  (r4 I:java.lang.Float) = (r5 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0050: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: NEW_INSTANCE  (r8 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0056: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005b: CONST_STR  (r0 I:java.lang.String) =  \"Invalid \<\" \l0x005d: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0063: CONST_STR  (r10 I:java.lang.String) =  \"\> points attribute. There should be an even number of coordinates.\" \l0x0065: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0068: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006c: INVOKE  \l  (r8 I:com.caverock.androidsvg.SVGParseException)\l  (r9 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x006f|0x006f: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0070|0x0070: NEW_INSTANCE  (r8 I:com.caverock.androidsvg.SVGParseException) =  com.caverock.androidsvg.SVGParseException \l0x0072: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0074: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0077: CONST_STR  (r0 I:java.lang.String) =  \"Invalid \<\" \l0x0079: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007f: CONST_STR  (r10 I:java.lang.String) =  \"\> points attribute. Non\-coordinate content found in list.\" \l0x0081: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0084: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0088: INVOKE  \l  (r8 I:com.caverock.androidsvg.SVGParseException)\l  (r9 I:java.lang.String)\l com.caverock.androidsvg.SVGParseException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x008b|0x008b: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x008c|0x008c: INVOKE  (r2 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0090: NEW_ARRAY  (r2 I:float[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0092: IPUT  (r2 I:float[]), (r8 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x0094: INVOKE  (r2 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0098: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0099|0x0099: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x009d|0x009d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00b1 \l}"];
Node_20 [shape=record,label="{20\:\ 0x009f|0x009f: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00a3: CHECK_CAST  (r4 I:java.lang.Float) = (java.lang.Float) (r4 I:?[OBJECT, ARRAY]) \l0x00a5: INVOKE  (r4 I:float) = (r4 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x00a9: IGET  (r5 I:float[]) = (r8 I:com.caverock.androidsvg.SVG$PolyLine) com.caverock.androidsvg.SVG.PolyLine.points float[] \l0x00ab: ARITH  (r6 I:int) = (r3 I:int) + (1 int) \l0x00ad: APUT  \l  (r5 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x00af: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x00b1|0x00b1: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b5|0x00b5: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.caverock.androidsvg.SVGParser.parseAttributesPolyLine((r7 'this' I:com.caverock.androidsvg.SVGParser A[IMMUTABLE_TYPE, THIS]), (r8 I:com.caverock.androidsvg.SVG$PolyLine A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.xml.sax.Attributes A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.caverock.androidsvg.SVGParseException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_6;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_18;
Node_21 -> Node_1;
}

