digraph "CFG forcom.caverock.androidsvg.IntegerParser.parseHex(Ljava\/lang\/String;II)Lcom\/caverock\/androidsvg\/IntegerParser;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r11 I:?[int, byte, short, char]) \< (r12 I:?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0006: MOVE  (r2 I:?[long, double]) = (r1 I:?[long, double]) \l0x0007: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:24:0x004d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: INVOKE  (r4 I:char) = (r10 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000e: CONST  (r5 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x0010: CONST  (r6 I:?[long, double]) = (16 ?[long, double]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r5 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r4 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x001a: ARITH  (r4 I:int) = (r4 I:int) + (\-48 int) \l0x001c: CAST  (r4 I:long) = (long) (r4 I:int) \l0x001d: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r8 I:?[long, double]) = (10 ?[long, double]) \l0x0021: CONST  (r5 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: CONST  (r5 I:?[int, float, short, byte, char]) = (70 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r4 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x002b: ARITH  (r4 I:int) = (r4 I:int) + (\-65 int) \l0x002d: CAST  (r4 I:long) = (long) (r4 I:int) \l0x002e: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x002f: ARITH  (r2 I:long) = (r2 I:long) + (r8 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: CONST  (r5 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:24:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IF  (r4 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:24:0x004d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x003b: ARITH  (r4 I:int) = (r4 I:int) + (\-97 int) \l0x003d: CAST  (r4 I:long) = (long) (r4 I:int) \l0x003e: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x003f: ARITH  (r2 I:long) = (r2 I:long) + (r8 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: CONST  (r4 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x0045: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:23:0x004a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0050 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|0x0050: NEW_INSTANCE  (r10 I:com.caverock.androidsvg.IntegerParser) =  com.caverock.androidsvg.IntegerParser \l0x0052: INVOKE  \l  (r10 I:com.caverock.androidsvg.IntegerParser)\l  (r2 I:long)\l  (r1 I:int)\l com.caverock.androidsvg.IntegerParser.\<init\>(long, int):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0055|0x0055: RETURN  (r10 I:com.caverock.androidsvg.IntegerParser) \l}"];
MethodNode[shape=record,label="{static com.caverock.androidsvg.IntegerParser com.caverock.androidsvg.IntegerParser.parseHex((r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_24;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_4;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
}

