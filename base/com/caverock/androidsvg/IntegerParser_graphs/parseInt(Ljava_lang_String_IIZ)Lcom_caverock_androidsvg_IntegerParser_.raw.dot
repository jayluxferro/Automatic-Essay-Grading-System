digraph "CFG forcom.caverock.androidsvg.IntegerParser.parseInt(Ljava\/lang\/String;IIZ)Lcom\/caverock\/androidsvg\/IntegerParser;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r10 I:char) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0014 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x001a: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: IF  (r10 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:27:0x004c \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: INVOKE  (r4 I:char) = (r7 I:java.lang.String), (r10 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0021: CONST  (r5 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:27:0x004c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: CONST  (r5 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: IF  (r4 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:27:0x004c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: CONST  (r5 I:?[long, double]) = (10 ?[long, double]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_20 [shape=record,label="{20\:\ 0x002d|0x002d: ARITH  (r2 I:long) = (r2 I:long) * (r5 I:long) \l0x002f: ARITH  (r4 I:int) = (r4 I:int) + (\-48 int) \l0x0031: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0032: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x0033: CONST  (r4 I:?[long, double]) = \l  (\-2147483648(0xffffffff80000000, double:NaN) ?[long, double])\l \l0x0036: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:26:0x0049 \l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|0x003a: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|0x003b: ARITH  (r2 I:long) = (r2 I:long) * (r5 I:long) \l0x003d: ARITH  (r4 I:int) = (r4 I:int) + (\-48 int) \l0x003f: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0040: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0041: CONST  (r4 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x0044: CMP_L  (r4 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0046|0x0046: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:26:0x0049 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0049|0x0049: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x004f \l}"];
Node_28 [shape=record,label="{28\:\ 0x004e|0x004e: RETURN  (r0 I:com.caverock.androidsvg.IntegerParser) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|0x004f: NEW_INSTANCE  (r7 I:com.caverock.androidsvg.IntegerParser) =  com.caverock.androidsvg.IntegerParser \l0x0051: INVOKE  \l  (r7 I:com.caverock.androidsvg.IntegerParser)\l  (r2 I:long)\l  (r10 I:int)\l com.caverock.androidsvg.IntegerParser.\<init\>(long, int):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0054|0x0054: RETURN  (r7 I:com.caverock.androidsvg.IntegerParser) \l}"];
MethodNode[shape=record,label="{static com.caverock.androidsvg.IntegerParser com.caverock.androidsvg.IntegerParser.parseInt((r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_27;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_27;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_13;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_30;
}

