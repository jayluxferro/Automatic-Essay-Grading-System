digraph "CFG forcom.caverock.androidsvg.CSSParser.selectorMatch(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/CSSParser$SimpleSelector;Ljava\/util\/List;ILcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r8 I:java.lang.String) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.tag java.lang.String \l0x0002: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r8 I:java.lang.String) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.tag java.lang.String \l0x0007: INVOKE  (r0 I:java.lang.String) = (r10 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.getNodeName():java.lang.String type: VIRTUAL \l0x000b: SGET  (r1 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x000d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN  (r9 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r8 I:java.util.List\<com.caverock.androidsvg.CSSParser$Attrib\>) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.attribs java.util.List \l0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0072 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r8 I:java.util.List\<com.caverock.androidsvg.CSSParser$Attrib\>) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.attribs java.util.List \l0x001f: INVOKE  (r8 I:java.util.Iterator) = (r8 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: INVOKE  (r1 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0072 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: INVOKE  (r1 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r1 I:com.caverock.androidsvg.CSSParser$Attrib) = (com.caverock.androidsvg.CSSParser$Attrib) (r1 I:?[OBJECT, ARRAY]) \l0x002f: IGET  (r2 I:java.lang.String) = (r1 I:com.caverock.androidsvg.CSSParser$Attrib) com.caverock.androidsvg.CSSParser.Attrib.name java.lang.String \l0x0031: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0032: INVOKE  (r4 I:int) = (r2 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0036: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (3355(0xd1b, float:4.701E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (94742904(0x5a5a978, float:1.5578778E\-35) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: CONST_STR  (r4 I:java.lang.String) =  \"class\" \l0x0042: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0053 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: CONST_STR  (r4 I:java.lang.String) =  \"id\" \l0x004c: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0053 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x0067, 0x0057] \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: RETURN  (r9 I:boolean) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0057|0x0057: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r10 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.classNames java.util.List \l}"];
Node_24 [shape=record,label="{24\:\ 0x0059|0x0059: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005c \l}"];
Node_25 [shape=record,label="{25\:\ 0x005b|0x005b: RETURN  (r9 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x005c|0x005c: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r10 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.classNames java.util.List \l0x005e: IGET  (r1 I:java.lang.String) = (r1 I:com.caverock.androidsvg.CSSParser$Attrib) com.caverock.androidsvg.CSSParser.Attrib.value java.lang.String \l0x0060: INVOKE  (r1 I:boolean) = (r2 I:java.util.List), (r1 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x0064|0x0064: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0066|0x0066: RETURN  (r9 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0067|0x0067: IGET  (r1 I:java.lang.String) = (r1 I:com.caverock.androidsvg.CSSParser$Attrib) com.caverock.androidsvg.CSSParser.Attrib.value java.lang.String \l0x0069: IGET  (r2 I:java.lang.String) = (r10 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.id java.lang.String \l0x006b: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x006f|0x006f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0071|0x0071: RETURN  (r9 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0072|0x0072: IGET  (r8 I:java.util.List\<com.caverock.androidsvg.CSSParser$PseudoClass\>) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.pseudos java.util.List \l}"];
Node_33 [shape=record,label="{33\:\ 0x0074|0x0074: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x008f \l}"];
Node_34 [shape=record,label="{34\:\ 0x0076|0x0076: IGET  (r7 I:java.util.List\<com.caverock.androidsvg.CSSParser$PseudoClass\>) = (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.pseudos java.util.List \l0x0078: INVOKE  (r7 I:java.util.Iterator) = (r7 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_35 [shape=record,label="{35\:\ 0x007c|0x007c: INVOKE  (r8 I:boolean) = (r7 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_36 [shape=record,label="{36\:\ 0x0080|0x0080: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x008f \l}"];
Node_37 [shape=record,label="{37\:\ 0x0082|0x0082: INVOKE  (r8 I:java.lang.Object) = (r7 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0086: CHECK_CAST  (r8 I:com.caverock.androidsvg.CSSParser$PseudoClass) = (com.caverock.androidsvg.CSSParser$PseudoClass) (r8 I:?[OBJECT, ARRAY]) \l0x0088: INVOKE  (r8 I:boolean) = \l  (r8 I:com.caverock.androidsvg.CSSParser$PseudoClass)\l  (r6 I:com.caverock.androidsvg.CSSParser$RuleMatchContext)\l  (r10 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.CSSParser.PseudoClass.matches(com.caverock.androidsvg.CSSParser$RuleMatchContext, com.caverock.androidsvg.SVG$SvgElementBase):boolean type: INTERFACE \l}"];
Node_38 [shape=record,label="{38\:\ 0x008c|0x008c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x007c \l}"];
Node_39 [shape=record,label="{39\:\ 0x008e|0x008e: RETURN  (r9 I:boolean) \l}"];
Node_40 [shape=record,label="{40\:\ 0x008f|0x008f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.caverock.androidsvg.CSSParser.selectorMatch((r6 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.caverock.androidsvg.CSSParser$SimpleSelector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<com.caverock.androidsvg.SVG$SvgContainer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;, Lcom\/caverock\/androidsvg\/CSSParser$SimpleSelector;, Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVG$SvgContainer;, \>;I, Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_32;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_32;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_21[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_21 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_8;
Node_27 -> Node_28[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_8;
Node_30 -> Node_31[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_35;
Node_38 -> Node_39[style=dashed];
}

