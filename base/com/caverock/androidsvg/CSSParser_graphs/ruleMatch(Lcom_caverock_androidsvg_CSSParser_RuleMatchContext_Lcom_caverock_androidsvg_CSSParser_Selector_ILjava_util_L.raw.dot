digraph "CFG forcom.caverock.androidsvg.CSSParser.ruleMatch(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/CSSParser$Selector;ILjava\/util\/List;ILcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r6 I:com.caverock.androidsvg.CSSParser$SimpleSelector) = \l  (r12 I:com.caverock.androidsvg.CSSParser$Selector)\l  (r13 I:int)\l com.caverock.androidsvg.CSSParser.Selector.get(int):com.caverock.androidsvg.CSSParser$SimpleSelector type: VIRTUAL \l0x000a: INVOKE  (r7 I:boolean) = \l  (r11 I:com.caverock.androidsvg.CSSParser$RuleMatchContext)\l  (r6 I:com.caverock.androidsvg.CSSParser$SimpleSelector)\l  (r14 I:java.util.List)\l  (r15 I:int)\l  (r5 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.CSSParser.selectorMatch(com.caverock.androidsvg.CSSParser$RuleMatchContext, com.caverock.androidsvg.CSSParser$SimpleSelector, java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase):boolean type: STATIC \l0x000e: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: RETURN  (r8 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IGET  (r7 I:com.caverock.androidsvg.CSSParser$Combinator) = (r6 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.combinator com.caverock.androidsvg.CSSParser$Combinator \l0x0014: SGET  (r9 I:com.caverock.androidsvg.CSSParser$Combinator) =  com.caverock.androidsvg.CSSParser.Combinator.DESCENDANT com.caverock.androidsvg.CSSParser$Combinator \l0x0016: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN  (r10 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: ARITH  (r5 I:int) = (r13 I:int) + (\-1 int) \l0x0020: INVOKE  (r5 I:boolean) = \l  (r11 I:com.caverock.androidsvg.CSSParser$RuleMatchContext)\l  (r12 I:com.caverock.androidsvg.CSSParser$Selector)\l  (r5 I:int)\l  (r14 I:java.util.List)\l  (r4 I:int)\l com.caverock.androidsvg.CSSParser.ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$RuleMatchContext, com.caverock.androidsvg.CSSParser$Selector, int, java.util.List, int):boolean type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: RETURN  (r10 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: RETURN  (r8 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IGET  (r6 I:com.caverock.androidsvg.CSSParser$Combinator) = (r6 I:com.caverock.androidsvg.CSSParser$SimpleSelector) com.caverock.androidsvg.CSSParser.SimpleSelector.combinator com.caverock.androidsvg.CSSParser$Combinator \l0x002d: SGET  (r7 I:com.caverock.androidsvg.CSSParser$Combinator) =  com.caverock.androidsvg.CSSParser.Combinator.CHILD com.caverock.androidsvg.CSSParser$Combinator \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0038 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: ARITH  (r2 I:int) = (r13 I:int) + (\-1 int) \l0x0033: INVOKE  (r0 I:boolean) = \l  (r11 I:com.caverock.androidsvg.CSSParser$RuleMatchContext)\l  (r12 I:com.caverock.androidsvg.CSSParser$Selector)\l  (r2 I:int)\l  (r14 I:java.util.List)\l  (r15 I:int)\l com.caverock.androidsvg.CSSParser.ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$RuleMatchContext, com.caverock.androidsvg.CSSParser$Selector, int, java.util.List, int):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: INVOKE  (r6 I:int) = \l  (r14 I:java.util.List)\l  (r15 I:int)\l  (r16 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.CSSParser.getChildPosition(java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase):int type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: IF  (r6 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:20:0x003f \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: RETURN  (r8 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: IGET  (r5 I:com.caverock.androidsvg.SVG$SvgContainer) = (r5 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0041: INVOKE  (r5 I:java.util.List) = (r5 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x0045: ARITH  (r6 I:int) = (r6 I:int) \- (r10 I:int) \l0x0046: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.List), (r6 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004a: CHECK_CAST  (r5 I:com.caverock.androidsvg.SVG$SvgElementBase) = (com.caverock.androidsvg.SVG$SvgElementBase) (r5 I:?[OBJECT, ARRAY]) \l0x004c: ARITH  (r2 I:int) = (r13 I:int) + (\-1 int) \l0x004e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x004f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0050: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0051: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0052: INVOKE  (r0 I:boolean) = \l  (r0 I:com.caverock.androidsvg.CSSParser$RuleMatchContext)\l  (r1 I:com.caverock.androidsvg.CSSParser$Selector)\l  (r2 I:int)\l  (r3 I:java.util.List)\l  (r4 I:int)\l  (r5 I:com.caverock.androidsvg.SVG$SvgElementBase)\l com.caverock.androidsvg.CSSParser.ruleMatch(com.caverock.androidsvg.CSSParser$RuleMatchContext, com.caverock.androidsvg.CSSParser$Selector, int, java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase):boolean type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.caverock.androidsvg.CSSParser.ruleMatch((r11 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.caverock.androidsvg.CSSParser$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.util.List\<com.caverock.androidsvg.SVG$SvgContainer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;, Lcom\/caverock\/androidsvg\/CSSParser$Selector;, I, Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVG$SvgContainer;, \>;I, Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_7;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
}

