digraph "CFG forcom.caverock.androidsvg.CSSParser.getChildPosition(Ljava\/util\/List;ILcom\/caverock\/androidsvg\/SVG$SvgElementBase;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0008: IGET  (r3 I:com.caverock.androidsvg.SVG$SvgContainer) = (r4 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r2 I:com.caverock.androidsvg.SVG$SvgContainer) = (r4 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0010: INVOKE  (r2 I:java.util.List) = (r2 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x0014: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r3 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: RETURN  (r0 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.caverock.androidsvg.CSSParser.getChildPosition((r2 I:java.util.List\<com.caverock.androidsvg.SVG$SvgContainer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVG$SvgContainer;, \>;I, Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;, )I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_7;
}

