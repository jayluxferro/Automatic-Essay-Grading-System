digraph "CFG forcom.caverock.androidsvg.CSSParser.ruleMatch(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/CSSParser$Selector;Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r3 = new java.util.ArrayList()\lcom.caverock.androidsvg.SVG$SvgContainer r0 = r8.parent\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r0 \l  PHI: (r0v1 com.caverock.androidsvg.SVG$SvgContainer) = (r0v0 com.caverock.androidsvg.SVG$SvgContainer), (r0v7 com.caverock.androidsvg.SVG$SvgContainer) binds: [B:0:0x0000, B:3:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:3:0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r0 == null) goto L_0x0012\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:3:0x000a\l|r3.add(0, r0)\lcom.caverock.androidsvg.SVG$SvgContainer r0 = ((com.caverock.androidsvg.SVG.SvgObject) r0).parent\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|int r4 = r3.size() + \-1\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|if (r7.size() != 1) goto L_0x0028\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f}"];
Node_7 [shape=record,label="{7\:\ 0x0027|RETURN\l|return selectorMatch(r6, r7.get(0), r3, r4, r8)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|int r2 = r7.size() + \-1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|RETURN\l|return ruleMatch(r6, r7, r2, r3, r4, r8)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static boolean com.caverock.androidsvg.CSSParser.ruleMatch((r6v0 com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 com.caverock.androidsvg.CSSParser$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_4;
}

