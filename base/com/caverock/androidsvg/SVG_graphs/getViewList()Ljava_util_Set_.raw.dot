digraph "CFG forcom.caverock.androidsvg.SVG.getViewList()Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG$Svg) = (r4 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST_CLASS  (r0 I:java.lang.Class\<com.caverock.androidsvg.SVG$View\>) =  com.caverock.androidsvg.SVG$View.class \l0x0006: INVOKE  (r0 I:java.util.List) = (r4 I:com.caverock.androidsvg.SVG), (r0 I:java.lang.Class) com.caverock.androidsvg.SVG.getElementsByTagName(java.lang.Class):java.util.List type: DIRECT \l0x000a: NEW_INSTANCE  (r1 I:java.util.HashSet) =  java.util.HashSet \l0x000c: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0010: INVOKE  (r1 I:java.util.HashSet), (r2 I:int) java.util.HashSet.\<init\>(int):void type: DIRECT \l0x0013: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r2 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r2 I:?[OBJECT, ARRAY]) \l0x0023: CHECK_CAST  (r2 I:com.caverock.androidsvg.SVG$View) = (com.caverock.androidsvg.SVG$View) (r2 I:?[OBJECT, ARRAY]) \l0x0025: IGET  (r3 I:java.lang.String) = (r2 I:com.caverock.androidsvg.SVG$View) com.caverock.androidsvg.SVG.View.id java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IGET  (r2 I:java.lang.String) = (r2 I:com.caverock.androidsvg.SVG$View) com.caverock.androidsvg.SVG.View.id java.lang.String \l0x002b: INVOKE  (r1 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: CONST_STR  (r2 I:java.lang.String) =  \"AndroidSVG\" \l0x0031: CONST_STR  (r3 I:java.lang.String) =  \"getViewList(): found a \<view\> without an id attribute\" \l0x0033: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN  (r1 I:java.util.Set\<java.lang.String\>) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003a: CONST_STR  (r1 I:java.lang.String) =  \"SVG document is empty\" \l0x003c: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.Set\<java.lang.String\> com.caverock.androidsvg.SVG.getViewList((r4 'this' I:com.caverock.androidsvg.SVG A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Set\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_8 -> Node_3;
Node_10 -> Node_11;
}

