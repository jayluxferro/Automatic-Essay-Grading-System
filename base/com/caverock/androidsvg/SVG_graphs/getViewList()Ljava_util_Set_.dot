digraph "CFG forcom.caverock.androidsvg.SVG.getViewList()Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.rootElement == null) goto L_0x0038\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.util.List r0 = getElementsByTagName(com.caverock.androidsvg.SVG.View.class)\ljava.util.HashSet r1 = new java.util.HashSet(r0.size())\ljava.util.Iterator r0 = r0.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|LOOP_START\lLOOP:0: B:3:0x0017\-\>B:12:0x0017\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r0.hasNext() == false) goto L_0x0037\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|com.caverock.androidsvg.SVG$View r2 = (com.caverock.androidsvg.SVG.View) r0.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|if (r2.f112id == null) goto L_0x002f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|r1.add(r2.f112id)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|android.util.Log.w(TAG, \"getViewList(): found a \<view\> without an id attribute\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038}"];
Node_11 [shape=record,label="{11\:\ 0x003f|throw new java.lang.IllegalArgumentException(\"SVG document is empty\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0017\-\>B:12:0x0017\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0017|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.util.Set\<java.lang.String\> com.caverock.androidsvg.SVG.getViewList((r4v0 'this' com.caverock.androidsvg.SVG A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Set\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_14;
Node_8 -> Node_15;
Node_10 -> Node_11;
Node_12 -> Node_3;
Node_13 -> Node_9;
Node_14 -> Node_12;
Node_15 -> Node_12;
}

