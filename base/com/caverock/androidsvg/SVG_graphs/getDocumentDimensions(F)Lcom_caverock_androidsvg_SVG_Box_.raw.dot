digraph "CFG forcom.caverock.androidsvg.SVG.getDocumentDimensions(F)Lcom\/caverock\/androidsvg\/SVG$Box;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.caverock.androidsvg.SVG$Svg) = (r5 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l0x0002: IGET  (r0 I:com.caverock.androidsvg.SVG$Length) = (r0 I:com.caverock.androidsvg.SVG$Svg) com.caverock.androidsvg.SVG.Svg.width com.caverock.androidsvg.SVG$Length \l0x0004: IGET  (r1 I:com.caverock.androidsvg.SVG$Svg) = (r5 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l0x0006: IGET  (r1 I:com.caverock.androidsvg.SVG$Length) = (r1 I:com.caverock.androidsvg.SVG$Svg) com.caverock.androidsvg.SVG.Svg.height com.caverock.androidsvg.SVG$Length \l0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x006d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r3 I:boolean) = (r0 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isZero():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x006d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r0 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x0014: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.percent com.caverock.androidsvg.SVG$Unit \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x006d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r0 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x001a: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.em com.caverock.androidsvg.SVG$Unit \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x006d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r0 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x0020: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.ex com.caverock.androidsvg.SVG$Unit \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: INVOKE  (r0 I:float) = (r0 I:com.caverock.androidsvg.SVG$Length), (r6 I:float) com.caverock.androidsvg.SVG.Length.floatValue(float):float type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: INVOKE  (r3 I:boolean) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.isZero():boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0049 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x0033: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.percent com.caverock.androidsvg.SVG$Unit \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0049 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x0039: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.em com.caverock.androidsvg.SVG$Unit \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0049 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: IGET  (r3 I:com.caverock.androidsvg.SVG$Unit) = (r1 I:com.caverock.androidsvg.SVG$Length) com.caverock.androidsvg.SVG.Length.unit com.caverock.androidsvg.SVG$Unit \l0x003f: SGET  (r4 I:com.caverock.androidsvg.SVG$Unit) =  com.caverock.androidsvg.SVG.Unit.ex com.caverock.androidsvg.SVG$Unit \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0044 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|0x0044: INVOKE  (r6 I:float) = (r1 I:com.caverock.androidsvg.SVG$Length), (r6 I:float) com.caverock.androidsvg.SVG.Length.floatValue(float):float type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVG$Box) =  com.caverock.androidsvg.SVG$Box \l0x004b: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$Box)\l  (r2 I:float)\l  (r2 I:float)\l  (r2 I:float)\l  (r2 I:float)\l com.caverock.androidsvg.SVG.Box.\<init\>(float, float, float, float):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: RETURN  (r6 I:com.caverock.androidsvg.SVG$Box) \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: IGET  (r6 I:com.caverock.androidsvg.SVG$Svg) = (r5 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l0x0051: IGET  (r6 I:com.caverock.androidsvg.SVG$Box) = (r6 I:com.caverock.androidsvg.SVG$Svg) com.caverock.androidsvg.SVG.Svg.viewBox com.caverock.androidsvg.SVG$Box \l}"];
Node_26 [shape=record,label="{26\:\ 0x0053|0x0053: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0065 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0055|0x0055: IGET  (r6 I:com.caverock.androidsvg.SVG$Svg) = (r5 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l0x0057: IGET  (r6 I:com.caverock.androidsvg.SVG$Box) = (r6 I:com.caverock.androidsvg.SVG$Svg) com.caverock.androidsvg.SVG.Svg.viewBox com.caverock.androidsvg.SVG$Box \l0x0059: IGET  (r6 I:float) = (r6 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.height float \l0x005b: ARITH  (r6 I:float) = (r6 I:float) * (r0 I:float) \l0x005d: IGET  (r1 I:com.caverock.androidsvg.SVG$Svg) = (r5 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.rootElement com.caverock.androidsvg.SVG$Svg \l0x005f: IGET  (r1 I:com.caverock.androidsvg.SVG$Box) = (r1 I:com.caverock.androidsvg.SVG$Svg) com.caverock.androidsvg.SVG.Svg.viewBox com.caverock.androidsvg.SVG$Box \l0x0061: IGET  (r1 I:float) = (r1 I:com.caverock.androidsvg.SVG$Box) com.caverock.androidsvg.SVG.Box.width float \l0x0063: ARITH  (r6 I:float) = (r6 I:float) \/ (r1 I:float) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0065|0x0065: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0066|0x0066: NEW_INSTANCE  (r1 I:com.caverock.androidsvg.SVG$Box) =  com.caverock.androidsvg.SVG$Box \l0x0068: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0069: INVOKE  \l  (r1 I:com.caverock.androidsvg.SVG$Box)\l  (r2 I:float)\l  (r2 I:float)\l  (r0 I:float)\l  (r6 I:float)\l com.caverock.androidsvg.SVG.Box.\<init\>(float, float, float, float):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x006c|0x006c: RETURN  (r1 I:com.caverock.androidsvg.SVG$Box) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006d|0x006d: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.SVG$Box) =  com.caverock.androidsvg.SVG$Box \l0x006f: INVOKE  \l  (r6 I:com.caverock.androidsvg.SVG$Box)\l  (r2 I:float)\l  (r2 I:float)\l  (r2 I:float)\l  (r2 I:float)\l com.caverock.androidsvg.SVG.Box.\<init\>(float, float, float, float):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x0072|0x0072: RETURN  (r6 I:com.caverock.androidsvg.SVG$Box) \l}"];
MethodNode[shape=record,label="{private com.caverock.androidsvg.SVG$Box com.caverock.androidsvg.SVG.getDocumentDimensions((r5 'this' I:com.caverock.androidsvg.SVG A[IMMUTABLE_TYPE, THIS]), (r6 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_31;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_31;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_31;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_31[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

