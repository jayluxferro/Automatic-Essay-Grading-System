digraph "CFG forcom.caverock.androidsvg.SVG.getElementsByTagName(Lcom\/caverock\/androidsvg\/SVG$SvgContainer;Ljava\/lang\/Class;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r1 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r1 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r4 I:java.util.List) = (r4 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x0015: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0023: CHECK_CAST  (r1 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r1 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:java.lang.Class) = (r1 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.caverock.androidsvg.SVG$SvgContainer \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CHECK_CAST  (r1 I:com.caverock.androidsvg.SVG$SvgContainer) = (com.caverock.androidsvg.SVG$SvgContainer) (r1 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  \l  (r3 I:com.caverock.androidsvg.SVG)\l  (r1 I:com.caverock.androidsvg.SVG$SvgContainer)\l  (r5 I:java.lang.Class)\l com.caverock.androidsvg.SVG.getElementsByTagName(com.caverock.androidsvg.SVG$SvgContainer, java.lang.Class):java.util.List type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: RETURN  \l  (r0 I:java.util.List\<com.caverock.androidsvg.SVG$SvgObject\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.List\<com.caverock.androidsvg.SVG$SvgObject\> com.caverock.androidsvg.SVG.getElementsByTagName((r3 'this' I:com.caverock.androidsvg.SVG A[IMMUTABLE_TYPE, THIS]), (r4 I:com.caverock.androidsvg.SVG$SvgContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Class A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/caverock\/androidsvg\/SVG$SvgContainer;, Ljava\/lang\/Class;, ), Ljava\/util\/List\<, Lcom\/caverock\/androidsvg\/SVG$SvgObject;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_4;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_4;
}

