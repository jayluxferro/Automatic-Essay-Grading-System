digraph "CFG forcom.caverock.androidsvg.SVG.renderToPicture(IILcom\/caverock\/androidsvg\/RenderOptions;)Landroid\/graphics\/Picture;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:android.graphics.Picture) =  android.graphics.Picture \l0x0002: INVOKE  (r0 I:android.graphics.Picture) android.graphics.Picture.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:android.graphics.Canvas) = (r0 I:android.graphics.Picture), (r4 I:int), (r5 I:int) android.graphics.Picture.beginRecording(int, int):android.graphics.Canvas type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r2 I:com.caverock.androidsvg.SVG$Box) = (r6 I:com.caverock.androidsvg.RenderOptions) com.caverock.androidsvg.RenderOptions.viewPort com.caverock.androidsvg.SVG$Box \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: NEW_INSTANCE  (r6 I:com.caverock.androidsvg.RenderOptions) =  com.caverock.androidsvg.RenderOptions \l0x0013: INVOKE  (r6 I:com.caverock.androidsvg.RenderOptions) com.caverock.androidsvg.RenderOptions.\<init\>():void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: NEW_INSTANCE  (r2 I:com.caverock.androidsvg.RenderOptions) =  com.caverock.androidsvg.RenderOptions \l0x0019: INVOKE  \l  (r2 I:com.caverock.androidsvg.RenderOptions)\l  (r6 I:com.caverock.androidsvg.RenderOptions)\l com.caverock.androidsvg.RenderOptions.\<init\>(com.caverock.androidsvg.RenderOptions):void type: DIRECT \l0x001c: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CAST  (r4 I:float) = (float) (r4 I:int) \l0x001e: CAST  (r5 I:float) = (float) (r5 I:int) \l0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: INVOKE  \l  (r6 I:com.caverock.androidsvg.RenderOptions)\l  (r2 I:float)\l  (r2 I:float)\l  (r4 I:float)\l  (r5 I:float)\l com.caverock.androidsvg.RenderOptions.viewPort(float, float, float, float):com.caverock.androidsvg.RenderOptions type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: NEW_INSTANCE  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer) =  com.caverock.androidsvg.SVGAndroidRenderer \l0x0025: IGET  (r5 I:float) = (r3 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.renderDPI float \l0x0027: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r1 I:android.graphics.Canvas)\l  (r5 I:float)\l com.caverock.androidsvg.SVGAndroidRenderer.\<init\>(android.graphics.Canvas, float):void type: DIRECT \l0x002a: INVOKE  \l  (r4 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r3 I:com.caverock.androidsvg.SVG)\l  (r6 I:com.caverock.androidsvg.RenderOptions)\l com.caverock.androidsvg.SVGAndroidRenderer.renderDocument(com.caverock.androidsvg.SVG, com.caverock.androidsvg.RenderOptions):void type: VIRTUAL \l0x002d: INVOKE  (r0 I:android.graphics.Picture) android.graphics.Picture.endRecording():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: RETURN  (r0 I:android.graphics.Picture) \l}"];
MethodNode[shape=record,label="{public android.graphics.Picture com.caverock.androidsvg.SVG.renderToPicture((r3 'this' I:com.caverock.androidsvg.SVG A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.caverock.androidsvg.RenderOptions A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

