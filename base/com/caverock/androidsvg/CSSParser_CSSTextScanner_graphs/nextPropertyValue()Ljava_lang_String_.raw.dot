digraph "CFG forcom.caverock.androidsvg.CSSParser.CSSTextScanner.nextPropertyValue()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.empty():boolean type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x000a: IGET  (r2 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x000c: IGET  (r3 I:java.lang.String) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.input java.lang.String \l0x000e: IGET  (r4 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x0010: INVOKE  (r3 I:char) = (r3 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r4 I:?[int, float, short, byte, char]) = (59 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (125(0x7d, float:1.75E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r4 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: INVOKE  (r4 I:boolean) = \l  (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner)\l  (r3 I:int)\l com.caverock.androidsvg.CSSParser.CSSTextScanner.isEOL(int):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: INVOKE  (r3 I:boolean) = \l  (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner)\l  (r3 I:int)\l com.caverock.androidsvg.CSSParser.CSSTextScanner.isWhitespace(int):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IGET  (r2 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x0031: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: INVOKE  (r3 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.advanceChar():int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IGET  (r3 I:int) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: IF  (r3 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:22:0x0043 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: IGET  (r1 I:java.lang.String) = (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.input java.lang.String \l0x003e: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:int), (r2 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: RETURN  (r0 I:java.lang.String) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: IPUT  \l  (r0 I:int)\l  (r5 I:com.caverock.androidsvg.CSSParser$CSSTextScanner)\l com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{java.lang.String com.caverock.androidsvg.CSSParser.CSSTextScanner.nextPropertyValue((r5 'this' I:com.caverock.androidsvg.CSSParser$CSSTextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_4;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

