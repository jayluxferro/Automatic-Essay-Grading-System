digraph "CFG forcom.caverock.androidsvg.CSSParser.CSSTextScanner.scanForIdentifier()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.empty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x000b: IGET  (r1 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x000d: IGET  (r2 I:java.lang.String) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.input java.lang.String \l0x000f: IGET  (r3 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x0011: INVOKE  (r2 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r2 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.advanceChar():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r4 I:?[int, float, short, byte, char]) = (95 ?[int, float, short, byte, char]) \l0x001f: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l0x0021: CONST  (r6 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l0x0023: CONST  (r7 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l0x0025: CONST  (r8 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r2 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r2 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r2 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r2 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0052 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: INVOKE  (r1 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.advanceChar():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IF  (r1 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r1 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:26:0x004d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IF  (r1 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:18:0x003d \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IF  (r1 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:26:0x004d \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: CONST  (r2 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:22:0x0045 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: CONST  (r2 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:26:0x004d \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004a \l}"];
Node_25 [shape=record,label="{25\:\ 0x004a|0x004a: IGET  (r1 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_26 [shape=record,label="{26\:\ 0x004d|0x004d: INVOKE  (r1 I:int) = (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.advanceChar():int type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0052|0x0052: IPUT  \l  (r0 I:int)\l  (r9 I:com.caverock.androidsvg.CSSParser$CSSTextScanner)\l com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private int com.caverock.androidsvg.CSSParser.CSSTextScanner.scanForIdentifier((r9 'this' I:com.caverock.androidsvg.CSSParser$CSSTextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_27;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_26;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_25;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_14;
Node_27 -> Node_28;
}

