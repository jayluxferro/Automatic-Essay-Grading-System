digraph "CFG forcom.caverock.androidsvg.CSSParser.CSSTextScanner.nextIdentifier()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.scanForIdentifier():int type: DIRECT \l0x0004: IGET  (r1 I:int) = (r3 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:java.lang.String) = (r3 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.input java.lang.String \l0x000c: IGET  (r2 I:int) = (r3 I:com.caverock.androidsvg.CSSParser$CSSTextScanner) com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l0x000e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0012: IPUT  \l  (r0 I:int)\l  (r3 I:com.caverock.androidsvg.CSSParser$CSSTextScanner)\l com.caverock.androidsvg.CSSParser.CSSTextScanner.position int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{java.lang.String com.caverock.androidsvg.CSSParser.CSSTextScanner.nextIdentifier((r3 'this' I:com.caverock.androidsvg.CSSParser$CSSTextScanner A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

