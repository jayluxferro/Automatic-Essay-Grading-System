digraph "CFG forcom.caverock.androidsvg.CSSParser.CSSTextScanner.hexChar(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 \< 48) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r3 \> 57) goto L_0x000a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return r3 \- 48\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a}"];
Node_7 [shape=record,label="{7\:\ 0x000c|if (r3 \< 65) goto L_0x0016\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e}"];
Node_9 [shape=record,label="{9\:\ 0x0010|if (r3 \> 70) goto L_0x0016\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012}"];
Node_11 [shape=record,label="{11\:\ 0x0015|RETURN\l|return (r3 \- 65) + 10\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016}"];
Node_13 [shape=record,label="{13\:\ 0x0018|if (r3 \< 97) goto L_?\l}"];
Node_14 [shape=record,label="{14\:\ 0x001a}"];
Node_15 [shape=record,label="{15\:\ 0x001c|if (r3 \> 102) goto L_?\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e}"];
Node_17 [shape=record,label="{17\:\ 0x0021|RETURN\l|return (r3 \- 97) + 10\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{private int com.caverock.androidsvg.CSSParser.CSSTextScanner.hexChar((r2v0 'this' com.caverock.androidsvg.CSSParser$CSSTextScanner A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
}

