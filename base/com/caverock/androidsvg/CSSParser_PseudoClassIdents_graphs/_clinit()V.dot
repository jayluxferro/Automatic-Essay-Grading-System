digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassIdents.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = 0\ltarget = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"target\", 0)\lroot = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"root\", 1)\lnth_child = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"nth_child\", 2)\lnth_last_child = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"nth_last_child\", 3)\lnth_of_type = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"nth_of_type\", 4)\lnth_last_of_type = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"nth_last_of_type\", 5)\lfirst_child = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"first_child\", 6)\llast_child = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"last_child\", 7)\lfirst_of_type = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"first_of_type\", 8)\llast_of_type = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"last_of_type\", 9)\lonly_child = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"only_child\", 10)\lonly_of_type = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"only_of_type\", 11)\lempty = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"empty\", 12)\lnot = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"not\", 13)\llang = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"lang\", 14)\llink = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"link\", 15)\lvisited = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"visited\", 16)\lhover = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"hover\", 17)\lactive = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(com.google.android.gms.measurement.api.AppMeasurementSdk.ConditionalUserProperty.ACTIVE, 18)\lfocus = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"focus\", 19)\lenabled = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"enabled\", 20)\ldisabled = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"disabled\", 21)\lchecked = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"checked\", 22)\lindeterminate = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"indeterminate\", 23)\lUNSUPPORTED = new com.caverock.androidsvg.CSSParser.PseudoClassIdents(\"UNSUPPORTED\", 24)\lcom.caverock.androidsvg.CSSParser$PseudoClassIdents[] r0 = new com.caverock.androidsvg.CSSParser.PseudoClassIdents[]\{target, root, nth_child, nth_last_child, nth_of_type, nth_last_of_type, first_child, last_child, first_of_type, last_of_type, only_child, only_of_type, empty, not, lang, link, visited, hover, active, focus, enabled, disabled, checked, indeterminate, UNSUPPORTED\}\l$VALUES = r0\lcache = new java.util.HashMap()\lcom.caverock.androidsvg.CSSParser$PseudoClassIdents[] r0 = values()\lint r1 = r0.length\l}"];
Node_1 [shape=record,label="{1\:\ 0x0199|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x01b2] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0199\-\>B:5:0x01b2\l|if (r2 \>= r1) goto L_0x01b5\l}"];
Node_2 [shape=record,label="{2\:\ 0x019b|r3 = r0[r2]\l}"];
Node_3 [shape=record,label="{3\:\ 0x019f|if (r3 == UNSUPPORTED) goto L_0x01b2\l}"];
Node_4 [shape=record,label="{4\:\ 0x01a1|java.lang.String r4 = r3.name().replace('_', '\-')\lcache.put(r4, r3)\l}"];
Node_5 [shape=record,label="{5\:\ 0x01b2|LOOP_END\lLOOP:0: B:1:0x0199\-\>B:5:0x01b2\l|int r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x01b5|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x01b5|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x01b2|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x01b2|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static void com.caverock.androidsvg.CSSParser.PseudoClassIdents.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

