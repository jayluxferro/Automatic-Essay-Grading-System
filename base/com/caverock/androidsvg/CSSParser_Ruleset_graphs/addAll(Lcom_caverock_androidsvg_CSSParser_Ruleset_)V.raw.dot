digraph "CFG forcom.caverock.androidsvg.CSSParser.Ruleset.addAll(Lcom\/caverock\/androidsvg\/CSSParser$Ruleset;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.caverock.androidsvg.CSSParser$Rule\>) = (r3 I:com.caverock.androidsvg.CSSParser$Ruleset) com.caverock.androidsvg.CSSParser.Ruleset.rules java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:java.util.List\<com.caverock.androidsvg.CSSParser$Rule\>) = (r2 I:com.caverock.androidsvg.CSSParser$Ruleset) com.caverock.androidsvg.CSSParser.Ruleset.rules java.util.List \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x000b: IGET  (r1 I:java.util.List\<com.caverock.androidsvg.CSSParser$Rule\>) = (r3 I:com.caverock.androidsvg.CSSParser$Ruleset) com.caverock.androidsvg.CSSParser.Ruleset.rules java.util.List \l0x000d: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0011: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0014: IPUT  \l  (r0 I:java.util.List\<com.caverock.androidsvg.CSSParser$Rule\>)\l  (r2 I:com.caverock.androidsvg.CSSParser$Ruleset)\l com.caverock.androidsvg.CSSParser.Ruleset.rules java.util.List \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r3 I:java.util.List\<com.caverock.androidsvg.CSSParser$Rule\>) = (r3 I:com.caverock.androidsvg.CSSParser$Ruleset) com.caverock.androidsvg.CSSParser.Ruleset.rules java.util.List \l0x0018: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r0 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0026: CHECK_CAST  (r0 I:com.caverock.androidsvg.CSSParser$Rule) = (com.caverock.androidsvg.CSSParser$Rule) (r0 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  \l  (r2 I:com.caverock.androidsvg.CSSParser$Ruleset)\l  (r0 I:com.caverock.androidsvg.CSSParser$Rule)\l com.caverock.androidsvg.CSSParser.Ruleset.add(com.caverock.androidsvg.CSSParser$Rule):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{void com.caverock.androidsvg.CSSParser.Ruleset.addAll((r2 'this' I:com.caverock.androidsvg.CSSParser$Ruleset A[IMMUTABLE_TYPE, THIS]), (r3 I:com.caverock.androidsvg.CSSParser$Ruleset A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
}

