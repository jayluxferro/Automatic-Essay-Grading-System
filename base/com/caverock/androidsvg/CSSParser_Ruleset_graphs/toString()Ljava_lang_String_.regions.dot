digraph "CFG forcom.caverock.androidsvg.CSSParser.Ruleset.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_1575436595 {
label = "R(1:(2:(1:2)|(3:3|(1:6)|8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1346553829 {
label = "R(2:(1:2)|(3:3|(1:6)|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1915375525 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.rules == null) goto L_0x0004\l}"];
subgraph cluster_Region_1357361667 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return \"\"\l}"];
}
}
subgraph cluster_Region_340446343 {
label = "R(3:3|(1:6)|8)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder()\ljava.util.Iterator r1 = r3.rules.iterator()\l}"];
subgraph cluster_LoopRegion_938385397 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r1.hasNext() != false) goto L_0x0018\l}"];
subgraph cluster_Region_119495187 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|LOOP_END\lLOOP:0: B:4:0x0012\-\>B:6:0x0018\l|r0.append(r2.toString())\lr0.append(10)\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x002f|RETURN\l|return r0.toString()\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0012|LOOP_START\lLOOP:0: B:4:0x0012\-\>B:6:0x0018\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002b}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String com.caverock.androidsvg.CSSParser.Ruleset.toString((r3v0 'this' com.caverock.androidsvg.CSSParser$Ruleset A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_4;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

