digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassOnlyChild.matches(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:boolean) = \l  (r4 I:com.caverock.androidsvg.CSSParser$PseudoClassOnlyChild)\l com.caverock.androidsvg.CSSParser.PseudoClassOnlyChild.isOfType boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r5 I:java.lang.String) = \l  (r4 I:com.caverock.androidsvg.CSSParser$PseudoClassOnlyChild)\l com.caverock.androidsvg.CSSParser.PseudoClassOnlyChild.nodeName java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r5 I:java.lang.String) = (r6 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.getNodeName():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r5 I:java.lang.String) = \l  (r4 I:com.caverock.androidsvg.CSSParser$PseudoClassOnlyChild)\l com.caverock.androidsvg.CSSParser.PseudoClassOnlyChild.nodeName java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r0 I:com.caverock.androidsvg.SVG$SvgContainer) = (r6 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IGET  (r6 I:com.caverock.androidsvg.SVG$SvgContainer) = (r6 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.parent com.caverock.androidsvg.SVG$SvgContainer \l0x0017: INVOKE  (r6 I:java.util.List) = (r6 I:com.caverock.androidsvg.SVG$SvgContainer) com.caverock.androidsvg.SVG.SvgContainer.getChildren():java.util.List type: INTERFACE \l0x001b: INVOKE  (r6 I:java.util.Iterator) = (r6 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x001f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: INVOKE  (r3 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  (r3 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r3 I:com.caverock.androidsvg.SVG$SvgObject) = (com.caverock.androidsvg.SVG$SvgObject) (r3 I:?[OBJECT, ARRAY]) \l0x002c: CHECK_CAST  (r3 I:com.caverock.androidsvg.SVG$SvgElementBase) = (com.caverock.androidsvg.SVG$SvgElementBase) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: INVOKE  (r3 I:java.lang.String) = (r3 I:com.caverock.androidsvg.SVG$SvgElementBase) com.caverock.androidsvg.SVG.SvgElementBase.getNodeName():java.lang.String type: VIRTUAL \l0x0034: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0041 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.caverock.androidsvg.CSSParser.PseudoClassOnlyChild.matches((r4 'this' I:com.caverock.androidsvg.CSSParser$PseudoClassOnlyChild A[IMMUTABLE_TYPE, THIS]), (r5 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_9;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_9;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

