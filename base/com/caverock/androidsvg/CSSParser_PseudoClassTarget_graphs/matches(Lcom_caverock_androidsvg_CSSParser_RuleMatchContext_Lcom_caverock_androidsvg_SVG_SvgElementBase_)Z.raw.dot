digraph "CFG forcom.caverock.androidsvg.CSSParser.PseudoClassTarget.matches(Lcom\/caverock\/androidsvg\/CSSParser$RuleMatchContext;Lcom\/caverock\/androidsvg\/SVG$SvgElementBase;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r2 I:com.caverock.androidsvg.SVG$SvgElementBase) = (r2 I:com.caverock.androidsvg.CSSParser$RuleMatchContext) com.caverock.androidsvg.CSSParser.RuleMatchContext.targetElement com.caverock.androidsvg.SVG$SvgElementBase \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.caverock.androidsvg.CSSParser.PseudoClassTarget.matches((r1 'this' I:com.caverock.androidsvg.CSSParser$PseudoClassTarget A[IMMUTABLE_TYPE, THIS]), (r2 I:com.caverock.androidsvg.CSSParser$RuleMatchContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.caverock.androidsvg.SVG$SvgElementBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

