digraph "CFG forcom.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>(Lcom\/caverock\/androidsvg\/SVGAndroidRenderer;FFFF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r3 I:com.caverock.androidsvg.SVGAndroidRenderer)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.this$0 com.caverock.androidsvg.SVGAndroidRenderer \l0x0002: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: IPUT  \l  (r3 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.dx float \l0x0008: IPUT  \l  (r3 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.dy float \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IPUT  \l  (r3 I:boolean)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.isAmbiguous boolean \l0x000d: IPUT  \l  (r4 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.x float \l0x000f: IPUT  \l  (r5 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.y float \l0x0011: ARITH  (r3 I:float) = (r6 I:float) * (r6 I:float) \l0x0013: ARITH  (r4 I:float) = (r7 I:float) * (r7 I:float) \l0x0015: ARITH  (r3 I:float) = (r3 I:float) + (r4 I:float) \l0x0016: CAST  (r3 I:double) = (double) (r3 I:float) \l0x0017: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x001b: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x001d: CMP_L  (r5 I:int) = (r3 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|0x001f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|0x0021: CAST  (r5 I:double) = (double) (r6 I:float) \l0x0022: ARITH  (r5 I:double) = (r5 I:double) \/ (r3 I:double) \l0x0023: CAST  (r5 I:float) = (float) (r5 I:double) \l0x0024: IPUT  \l  (r5 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.dx float \l0x0026: CAST  (r5 I:double) = (double) (r7 I:float) \l0x0027: ARITH  (r5 I:double) = (r5 I:double) \/ (r3 I:double) \l0x0028: CAST  (r3 I:float) = (float) (r5 I:double) \l0x0029: IPUT  \l  (r3 I:float)\l  (r2 I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector)\l com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.dy float \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: RETURN   \l}"];
MethodNode[shape=record,label="{void com.caverock.androidsvg.SVGAndroidRenderer.MarkerVector.\<init\>((r2 'this' I:com.caverock.androidsvg.SVGAndroidRenderer$MarkerVector A[IMMUTABLE_TYPE, THIS]), (r3 I:com.caverock.androidsvg.SVGAndroidRenderer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

