digraph "CFG forcom.android.volley.NetworkResponse.toAllHeaderList(Ljava\/util\/Map;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r4 I:java.util.List\<com.android.volley.Header\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r4 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: INVOKE  (r4 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: RETURN  (r4 I:java.util.List\<com.android.volley.Header\>) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0011: INVOKE  (r1 I:int) = (r4 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l0x0015: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0018: INVOKE  (r4 I:java.util.Set) = (r4 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x001c: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x002c: NEW_INSTANCE  (r2 I:com.android.volley.Header) =  com.android.volley.Header \l0x002e: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0038: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x003a: INVOKE  \l  (r2 I:com.android.volley.Header)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.String)\l com.android.volley.Header.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x003d: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: RETURN  (r0 I:java.util.List\<com.android.volley.Header\>) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<com.android.volley.Header\> com.android.volley.NetworkResponse.toAllHeaderList((r4 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Ljava\/util\/List\<, Lcom\/android\/volley\/Header;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
}

