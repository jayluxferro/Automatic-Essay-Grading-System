digraph "CFG forcom.android.volley.toolbox.HurlStack.convertHeaders(Ljava\/util\/Map;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r1 I:int) = (r6 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l0x0006: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0009: INVOKE  (r6 I:java.util.Set) = (r6 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x000d: INVOKE  (r6 I:java.util.Iterator) = (r6 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r1 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0048 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r1 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001b: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x001d: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r2 I:java.util.List) = (java.util.List) (r2 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0011 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0037: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0039: NEW_INSTANCE  (r4 I:com.android.volley.Header) =  com.android.volley.Header \l0x003b: INVOKE  (r5 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x003f: CHECK_CAST  (r5 I:java.lang.String) = (java.lang.String) (r5 I:?[OBJECT, ARRAY]) \l0x0041: INVOKE  \l  (r4 I:com.android.volley.Header)\l  (r5 I:java.lang.String)\l  (r3 I:java.lang.String)\l com.android.volley.Header.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0044: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: RETURN  (r0 I:java.util.List\<com.android.volley.Header\>) \l}"];
MethodNode[shape=record,label="{static java.util.List\<com.android.volley.Header\> com.android.volley.toolbox.HurlStack.convertHeaders((r6 I:java.util.Map\<java.lang.String, java.util.List\<java.lang.String\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;\>;), Ljava\/util\/List\<, Lcom\/android\/volley\/Header;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_6;
}

