digraph "CFG forcom.android.volley.toolbox.DiskBasedCache.CacheHeader.readHeader(Ljava\/io\/InputStream;)Lcom\/android\/volley\/toolbox\/DiskBasedCache$CacheHeader;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader) =  com.android.volley.toolbox.DiskBasedCache$CacheHeader \l0x0002: INVOKE  \l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader)\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readInt(java.io.InputStream):int type: STATIC \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (538051844(0x20120504, float:1.236834E\-19) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('magic' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: NEW_INSTANCE  (r2 I:java.io.IOException) =  java.io.IOException \l0x0010: INVOKE  (r2 I:java.io.IOException) java.io.IOException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r2 I:java.lang.String) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readString(java.io.InputStream):java.lang.String type: STATIC \l0x0018: IPUT  \l  (r2 I:java.lang.String)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.key java.lang.String \l0x001a: INVOKE  (r2 I:java.lang.String) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readString(java.io.InputStream):java.lang.String type: STATIC \l0x001e: IPUT  \l  (r2 I:java.lang.String)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.etag java.lang.String \l0x0020: IGET  (r2 I:java.lang.String) = \l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.etag java.lang.String \l0x0022: CONST_STR  (r3 I:java.lang.String) =  \"\" \l0x0024: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: IPUT  \l  (r2 I:java.lang.String)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.etag java.lang.String \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: INVOKE  (r2 I:long) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readLong(java.io.InputStream):long type: STATIC \l0x0031: IPUT  \l  (r2 I:long)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.serverDate long \l0x0033: INVOKE  (r2 I:long) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readLong(java.io.InputStream):long type: STATIC \l0x0037: IPUT  \l  (r2 I:long)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.ttl long \l0x0039: INVOKE  (r2 I:long) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readLong(java.io.InputStream):long type: STATIC \l0x003d: IPUT  \l  (r2 I:long)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.softTtl long \l0x003f: INVOKE  (r2 I:java.util.Map) = (r4 I:java.io.InputStream A[D('is' java.io.InputStream)]) com.android.volley.toolbox.DiskBasedCache.readStringStringMap(java.io.InputStream):java.util.Map type: STATIC \l0x0043: IPUT  \l  (r2 I:java.util.Map\<java.lang.String, java.lang.String\>)\l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l com.android.volley.toolbox.DiskBasedCache.CacheHeader.responseHeaders java.util.Map \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: RETURN  \l  (r0 I:com.android.volley.toolbox.DiskBasedCache$CacheHeader A[D('entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader)])\l \l}"];
MethodNode[shape=record,label="{public static com.android.volley.toolbox.DiskBasedCache$CacheHeader com.android.volley.toolbox.DiskBasedCache.CacheHeader.readHeader((r4 I:java.io.InputStream A[D('is' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x0045: r0 'entry' com.android.volley.toolbox.DiskBasedCache$CacheHeader\l  0x0009\-0x0045: r1 'magic' int\l  ?\-0x0045: r4 'is' java.io.InputStream\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

