digraph "CFG forcom.android.volley.toolbox.ImageRequest.findBestSampleSize(IIII)I" {
subgraph cluster_Region_2129160878 {
label = "R(2:0|(2:1|(2:(1:5)|(1:3))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double double r4 = java.lang.Math.min(((double) r4) \/ ((double) r6), ((double) r5) \/ ((double) r7))\lfloat r6 = 1.0f\l}"];
subgraph cluster_LoopRegion_405063594 {
label = "LOOP:0: (2:1|(2:(1:5)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_24264625 {
label = "R(2:1|(2:(1:5)|(1:3)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r6 \l  PHI: (r6v3 float) = (r6v2 float), (r6v4 float) binds: [B:0:0x0000, B:3:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:3:0x0015\l|float float r7 = 2.0f * r6\l}"];
subgraph cluster_Region_768927131 {
label = "R(2:(1:5)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_722680670 {
label = "IF [B:2:0x0013] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0013|if (((double) r7) \> r4) goto L_0x0017\l}"];
subgraph cluster_Region_1014143019 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|RETURN\l|return (int) r6\l}"];
}
}
subgraph cluster_Region_1958298175 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:3:0x0015\l|r6 = r7\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0017}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int com.android.volley.toolbox.ImageRequest.findBestSampleSize((r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_6 -> Node_4;
}

