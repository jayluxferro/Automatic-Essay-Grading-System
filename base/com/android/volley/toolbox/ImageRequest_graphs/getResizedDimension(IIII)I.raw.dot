digraph "CFG forcom.android.volley.toolbox.ImageRequest.getResizedDimension(IIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxPrimary' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxSecondary' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r10 I:int A[D('actualPrimary' int)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxPrimary' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CAST  (r4 I:double) = (double) (r9 I:int A[D('maxSecondary' int)]) \l0x0008: CAST  (r6 I:double) = (double) (r11 I:int A[D('actualSecondary' int)]) \l0x0009: ARITH  (r0 I:double) = (r4 I:double) \/ (r6 I:double) \l0x000b: CAST  (r4 I:double) = (double) (r10 I:int A[D('actualPrimary' int)]) \l0x000c: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double A[D('ratio' double)]) \l0x000d: CAST  (r10 I:int A[D('actualPrimary' int)]) = (int) (r4 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxSecondary' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('actualPrimary' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxPrimary' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CAST  (r4 I:double) = (double) (r11 I:int A[D('actualSecondary' int)]) \l0x0014: CAST  (r6 I:double) = (double) (r10 I:int A[D('actualPrimary' int)]) \l0x0015: ARITH  (r0 I:double) = (r4 I:double) \/ (r6 I:double) \l0x0017: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxPrimary' int)])\l \l0x0018: CAST  (r4 I:double) = (double) (r2 I:int A[D('resized' int)]) \l0x0019: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double A[D('ratio' double)]) \l0x001a: CAST  (r6 I:double) = (double) (r9 I:int A[D('maxSecondary' int)]) \l0x001b: CMP_L  (r3 I:int) = (r4 I:double), (r6 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CAST  (r4 I:double) = (double) (r9 I:int A[D('maxSecondary' int)]) \l0x0020: ARITH  (r4 I:double) = (r4 I:double) \/ (r0 I:double A[D('ratio' double)]) \l0x0021: CAST  (r2 I:int A[D('resized' int)]) = (int) (r4 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('actualPrimary' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resized' int)])\l \l}"];
MethodNode[shape=record,label="{private static int com.android.volley.toolbox.ImageRequest.getResizedDimension((r8 I:int A[D('maxPrimary' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('maxSecondary' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('actualPrimary' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('actualSecondary' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0004: r10 'actualPrimary' int\l  0x000b\-0x000f: r0 'ratio' double\l  0x0017\-0x0023: r0 'ratio' double\l  0x0018\-0x0023: r2 'resized' int\l  ?\-0x0023: r8 'maxPrimary' int\l  ?\-0x0023: r9 'maxSecondary' int\l  0x0005\-0x0023: r10 'actualPrimary' int\l  ?\-0x0023: r11 'actualSecondary' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_2;
}

