digraph "CFG forcom.android.volley.toolbox.ImageRequest.findBestSampleSize(IIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CAST  (r0 I:double) = (double) (r4 I:int) \l0x0001: CAST  (r2 I:double) = (double) (r6 I:int) \l0x0002: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0003: CAST  (r4 I:double) = (double) (r5 I:int) \l0x0004: CAST  (r6 I:double) = (double) (r7 I:int) \l0x0005: ARITH  (r4 I:double) = (r4 I:double) \/ (r6 I:double) \l0x0006: INVOKE  (r4 I:double) = (r0 I:double), (r4 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x000a: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x000e: ARITH  (r7 I:float) = (r7 I:float) * (r6 I:float) \l0x0010: CAST  (r0 I:double) = (double) (r7 I:float) \l0x0011: CMP_G  (r0 I:int) = (r0 I:double), (r4 I:double) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: CAST  (r4 I:int) = (int) (r6 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{static int com.android.volley.toolbox.ImageRequest.findBestSampleSize((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

