digraph "CFG forcom.android.volley.toolbox.DiskBasedCache.writeStringStringMap(Ljava\/util\/Map;Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('map' java.util.Map\<java.lang.String, java.lang.String\>)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0030 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:int) = \l  (r3 I:java.util.Map A[D('map' java.util.Map\<java.lang.String, java.lang.String\>)])\l java.util.Map.size():int type: INTERFACE \l0x0006: INVOKE  \l  (r4 I:java.io.OutputStream A[D('os' java.io.OutputStream)])\l  (r2 I:int)\l com.android.volley.toolbox.DiskBasedCache.writeInt(java.io.OutputStream, int):void type: STATIC \l0x0009: INVOKE  (r2 I:java.util.Set) = \l  (r3 I:java.util.Map A[D('map' java.util.Map\<java.lang.String, java.lang.String\>)])\l java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x000d: INVOKE  (r1 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator A[D('i$' java.util.Iterator)]) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('i$' java.util.Iterator)]) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001b: CHECK_CAST  (r0 I:java.util.Map$Entry) = (java.util.Map$Entry) (r0 I:?[OBJECT, ARRAY]) \l0x001d: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<java.lang.String, java.lang.String\>)])\l java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  \l  (r4 I:java.io.OutputStream A[D('os' java.io.OutputStream)])\l  (r2 I:java.lang.String)\l com.android.volley.toolbox.DiskBasedCache.writeString(java.io.OutputStream, java.lang.String):void type: STATIC \l0x0026: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<java.lang.String, java.lang.String\>)])\l java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  \l  (r4 I:java.io.OutputStream A[D('os' java.io.OutputStream)])\l  (r2 I:java.lang.String)\l com.android.volley.toolbox.DiskBasedCache.writeString(java.io.OutputStream, java.lang.String):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0031: INVOKE  \l  (r4 I:java.io.OutputStream A[D('os' java.io.OutputStream)])\l  (r2 I:int)\l com.android.volley.toolbox.DiskBasedCache.writeInt(java.io.OutputStream, int):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: RETURN   \l}"];
MethodNode[shape=record,label="{static void com.android.volley.toolbox.DiskBasedCache.writeStringStringMap((r3 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.io.OutputStream A[D('os' java.io.OutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001d\-0x0030: r0 'entry' java.util.Map$Entry\<java.lang.String, java.lang.String\>\l  0x0011\-0x0030: r1 'i$' java.util.Iterator\l  0x0000\-0x0034: r3 'map' java.util.Map\<java.lang.String, java.lang.String\>\l  ?\-0x0034: r4 'os' java.io.OutputStream\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;, Ljava\/io\/OutputStream;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_2;
Node_5 -> Node_6;
}

