digraph "CFG forcom.android.volley.toolbox.DiskBasedCache.streamToBytes(Lcom\/android\/volley\/toolbox\/DiskBasedCache$CountingInputStream;J)[B" {
subgraph cluster_Region_1919221443 {
label = "R(4:0|(2:4|(2:6|7))|8|9)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r0 = r5.bytesRemaining()\l}"];
subgraph cluster_IfRegion_1653252290 {
label = "IF [B:1:0x0008, B:3:0x000c] THEN: R(2:4|(2:6|7)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|ADDED_TO_REGION\l|if (r6 \>= 0) goto L_0x000a\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|ADDED_TO_REGION\l|if (r6 \<= r0) goto L_0x000e\l}"];
subgraph cluster_Region_1238706067 {
label = "R(2:4|(2:6|7))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|int int r2 = (int) r6\l}"];
subgraph cluster_IfRegion_2081030766 {
label = "IF [B:5:0x0012] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|if (((long) r2) == r6) goto L_0x0014\l}"];
subgraph cluster_Region_701331914 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0014|byte[] byte[] r6 = new byte[r2]\lnew java.io.DataInputStream(r5).readFully(r6)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|return r6\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x001f}"];
Node_9 [shape=record,label="{9\:\ 0x003d|throw new java.io.IOException(\"streamToBytes length=\" + r6 + \", maxLength=\" + r0)\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
MethodNode[shape=record,label="{static byte[] com.android.volley.toolbox.DiskBasedCache.streamToBytes((r5v0 com.android.volley.toolbox.DiskBasedCache$CountingInputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_2 -> Node_3;
}

