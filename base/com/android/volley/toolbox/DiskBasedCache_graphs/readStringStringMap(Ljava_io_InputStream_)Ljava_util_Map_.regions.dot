digraph "CFG forcom.android.volley.toolbox.DiskBasedCache.readStringStringMap(Ljava\/io\/InputStream;)Ljava\/util\/Map;" {
subgraph cluster_Region_192907195 {
label = "R(5:0|1|3|(1:5)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r3 = readInt(r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|java.util.Map\<java.lang.String, java.lang.String\> r2 = r3 == 0 ? java.util.Collections.emptyMap() : new java.util.HashMap\<\>(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|PHI: r2 \l  PHI: (r2v1 'result' java.util.Map\<java.lang.String, java.lang.String\>) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_241948518 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:3:0x000a, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000b\-\>B:5:0x000d\l|if (r0 \< r3) goto L_0x000d\l}"];
subgraph cluster_Region_520708329 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:4:0x000b\-\>B:5:0x000d\l|r2.put(readString(r6).intern(), readString(r6).intern())\lr0++\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0029|RETURN\l|return r2\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0023}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.util.Map\<java.lang.String, java.lang.String\> com.android.volley.toolbox.DiskBasedCache.readStringStringMap((r6v0 'is' java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/InputStream;, ), Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_4;
Node_2 -> Node_3;
Node_6 -> Node_3;
Node_8 -> Node_7;
}

