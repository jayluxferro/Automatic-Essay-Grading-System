digraph "CFG forcom.android.volley.toolbox.DiskBasedCache.pruneIfNeeded(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r17\llong r3 = (long) r18\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (((r0.mTotalSize + r3) \> ((long) r0.mMaxCacheSizeInBytes) ? 1 : ((r0.mTotalSize + r3) == ((long) r0.mMaxCacheSizeInBytes) ? 0 : \-1)) \>= 0) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (com.android.volley.VolleyLog.DEBUG == false) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|com.android.volley.VolleyLog.m19v(\"Pruning old cache entries.\", new java.lang.Object[0])\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|long r5 = r0.mTotalSize\llong r7 = android.os.SystemClock.elapsedRealtime()\ljava.util.Iterator r1 = r0.mEntries.entrySet().iterator()\lr9 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|LOOP_START\lPHI: r3 r9 \l  PHI: (r3v2 long) = (r3v1 long), (r3v13 long) binds: [B:6:0x001c, B:15:0x0081] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v3 int) binds: [B:6:0x001c, B:15:0x0081] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x002d\-\>B:15:0x0081\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|if (r1.hasNext() == false) goto L_0x0084\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|com.android.volley.toolbox.DiskBasedCache$CacheHeader r10 = (com.android.volley.toolbox.DiskBasedCache.CacheHeader) r1.next().getValue()\l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|if (getFileForKey(r10.key).delete() == false) goto L_0x0056\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|r15 = r3\lr0.mTotalSize = r0.mTotalSize \- r10.size\l}"];
Node_12 [shape=record,label="{12\:\ 0x0056|r15 = r3\ljava.lang.Object[] r3 = new java.lang.Object[]\{r10.key, getFilenameForKey(r10.key)\}\lcom.android.volley.VolleyLog.m16d(\"Could not delete cache entry for key=%s, filename=%s\", r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x006b|PHI: r15 \l  PHI: (r15v0 long) = (r15v1 long), (r15v2 long) binds: [B:12:0x0056, B:11:0x004d] A[DONT_GENERATE, DONT_INLINE]\l|r1.remove()\lint r9 = r9 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x007e|if ((((float) (r0.mTotalSize + r15)) \> (((float) r0.mMaxCacheSizeInBytes) * HYSTERESIS_FACTOR) ? 1 : (((float) (r0.mTotalSize + r15)) == (((float) r0.mMaxCacheSizeInBytes) * HYSTERESIS_FACTOR) ? 0 : \-1)) \>= 0) goto L_0x0081\l}"];
Node_15 [shape=record,label="{15\:\ 0x0081|LOOP_END\lLOOP:0: B:7:0x002d\-\>B:15:0x0081\l|r3 = r15\l}"];
Node_16 [shape=record,label="{16\:\ 0x0084|PHI: r9 \l  PHI: (r9v2 int) = (r9v1 int), (r9v3 int) binds: [B:19:0x0084, B:20:0x0084] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0086|if (com.android.volley.VolleyLog.DEBUG == false) goto L_?\l}"];
Node_18 [shape=record,label="{18\:\ 0x0088|java.lang.Object[] r2 = new java.lang.Object[]\{java.lang.Integer.valueOf(r9), java.lang.Long.valueOf(r0.mTotalSize \- r5), java.lang.Long.valueOf(android.os.SystemClock.elapsedRealtime() \- r7)\}\lcom.android.volley.VolleyLog.m19v(\"pruned %d files, %d bytes, %d ms\", r2)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0084|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0084|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.android.volley.toolbox.DiskBasedCache.pruneIfNeeded((r17v0 'this' com.android.volley.toolbox.DiskBasedCache A[IMMUTABLE_TYPE, THIS]), (r18v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_20[style=dashed];
Node_15 -> Node_7;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_21;
Node_19 -> Node_16;
Node_20 -> Node_16;
}

