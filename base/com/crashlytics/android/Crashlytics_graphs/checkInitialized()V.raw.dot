digraph "CFG forcom.crashlytics.android.Crashlytics.checkInitialized()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.crashlytics.android.Crashlytics) =  com.crashlytics.android.Crashlytics.getInstance():com.crashlytics.android.Crashlytics type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"Crashlytics must be initialized by calling Fabric.with(Context) prior to calling Crashlytics.getInstance()\" \l0x000b: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.Crashlytics.checkInitialized() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

