digraph "CFG forcom.crashlytics.android.answers.SamplingEventFilter.skipEvent(Lcom\/crashlytics\/android\/answers\/SessionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (EVENTS_TYPE_TO_SAMPLE.contains(r5.type) == false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r5.sessionEventMetadata.betaDeviceToken != null) goto L_0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|r0 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r0 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v3 boolean), (r0v6 boolean) binds: [B:5:0x0014, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if (java.lang.Math.abs(r5.sessionEventMetadata.installationId.hashCode() % r4.samplingRate) == 0) goto L_0x0028\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|r5 = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|r5 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|PHI: r5 \l  PHI: (r5v6 boolean) = (r5v7 boolean), (r5v8 boolean) binds: [B:9:0x0028, B:8:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x002e\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|if (r5 == false) goto L_0x002e\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean com.crashlytics.android.answers.SamplingEventFilter.skipEvent((r4v0 'this' com.crashlytics.android.answers.SamplingEventFilter A[IMMUTABLE_TYPE, THIS]), (r5v0 com.crashlytics.android.answers.SessionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
}

