digraph "CFG forcom.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.\<init\>(Lio\/fabric\/sdk\/android\/Kit;Landroid\/content\/Context;Ljava\/util\/concurrent\/ScheduledExecutorService;Lcom\/crashlytics\/android\/answers\/SessionAnalyticsFilesManager;Lio\/fabric\/sdk\/android\/services\/network\/HttpRequestFactory;Lcom\/crashlytics\/android\/answers\/SessionEventMetadata;Lcom\/crashlytics\/android\/answers\/FirebaseAnalyticsApiAdapter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.rolloverFutureRef = new java.util.concurrent.atomic.AtomicReference\<\>()\lr1.apiKey = new p018io.fabric.sdk.android.services.common.ApiKey()\lr1.eventFilter = new com.crashlytics.android.answers.KeepAllEventFilter()\lr1.customEventsEnabled = true\lr1.predefinedEventsEnabled = true\lr1.rolloverIntervalSeconds = \-1\lr1.forwardToFirebaseAnalyticsEnabled = false\lr1.includePurchaseEventsInForwardedEvents = false\lr1.kit = r2\lr1.context = r3\lr1.executorService = r4\lr1.filesManager = r5\lr1.httpRequestFactory = r6\lr1.metadata = r7\lr1.firebaseAnalyticsApiAdapter = r8\l}"];
Node_1 [shape=record,label="{1\:\ 0x0033|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.\<init\>((r1v0 'this' com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy A[IMMUTABLE_TYPE, THIS]), (r2v0 io.fabric.sdk.android.Kit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.concurrent.ScheduledExecutorService A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 com.crashlytics.android.answers.SessionAnalyticsFilesManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 io.fabric.sdk.android.services.network.HttpRequestFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 com.crashlytics.android.answers.SessionEventMetadata A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.crashlytics.android.answers.FirebaseAnalyticsApiAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

