digraph "CFG forcom.crashlytics.android.answers.FirebaseAnalyticsEventMapper.mapPriceValue(Ljava\/lang\/Object;)Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CHECK_CAST  (r4 I:java.lang.Long) = (java.lang.Long) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r4 I:java.lang.Double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:java.math.BigDecimal) =  java.math.BigDecimal \l0x0008: INVOKE  (r1 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x000c: INVOKE  (r0 I:java.math.BigDecimal), (r1 I:long) java.math.BigDecimal.\<init\>(long):void type: DIRECT \l0x000f: SGET  (r4 I:java.math.BigDecimal) =  com.crashlytics.android.answers.AddToCartEvent.MICRO_CONSTANT java.math.BigDecimal \l0x0011: INVOKE  (r4 I:java.math.BigDecimal) = (r0 I:java.math.BigDecimal), (r4 I:java.math.BigDecimal) java.math.BigDecimal.divide(java.math.BigDecimal):java.math.BigDecimal type: VIRTUAL \l0x0015: INVOKE  (r0 I:double) = (r4 I:java.math.BigDecimal) java.math.BigDecimal.doubleValue():double type: VIRTUAL \l0x0019: INVOKE  (r4 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: RETURN  (r4 I:java.lang.Double) \l}"];
MethodNode[shape=record,label="{private java.lang.Double com.crashlytics.android.answers.FirebaseAnalyticsEventMapper.mapPriceValue((r3 'this' I:com.crashlytics.android.answers.FirebaseAnalyticsEventMapper A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

