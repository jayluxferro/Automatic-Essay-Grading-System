digraph "CFG forcom.crashlytics.android.answers.RandomBackoff.\<init\>(Lio\/fabric\/sdk\/android\/services\/concurrency\/internal\/Backoff;DLjava\/util\/Random;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_G  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x000b: CMP_L  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IPUT  \l  (r3 I:io.fabric.sdk.android.services.concurrency.internal.Backoff)\l  (r2 I:com.crashlytics.android.answers.RandomBackoff)\l com.crashlytics.android.answers.RandomBackoff.backoff io.fabric.sdk.android.services.concurrency.internal.Backoff \l0x0015: IPUT  \l  (r4 I:double)\l  (r2 I:com.crashlytics.android.answers.RandomBackoff)\l com.crashlytics.android.answers.RandomBackoff.jitterPercent double \l0x0017: IPUT  \l  (r6 I:java.util.Random)\l  (r2 I:com.crashlytics.android.answers.RandomBackoff)\l com.crashlytics.android.answers.RandomBackoff.random java.util.Random \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: NEW_INSTANCE  (r3 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x001c: CONST_STR  (r4 I:java.lang.String) =  \"random must not be null\" \l0x001e: INVOKE  \l  (r3 I:java.lang.NullPointerException)\l  (r4 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: NEW_INSTANCE  (r3 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0024: CONST_STR  (r4 I:java.lang.String) =  \"backoff must not be null\" \l0x0026: INVOKE  \l  (r3 I:java.lang.NullPointerException)\l  (r4 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002c: CONST_STR  (r4 I:java.lang.String) =  \"jitterPercent must be between 0.0 and 1.0\" \l0x002e: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.crashlytics.android.answers.RandomBackoff.\<init\>((r2 'this' I:com.crashlytics.android.answers.RandomBackoff A[IMMUTABLE_TYPE, THIS]), (r3 I:io.fabric.sdk.android.services.concurrency.internal.Backoff A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

