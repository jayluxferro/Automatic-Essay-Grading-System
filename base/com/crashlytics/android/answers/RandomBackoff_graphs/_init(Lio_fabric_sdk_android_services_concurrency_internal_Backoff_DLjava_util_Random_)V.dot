digraph "CFG forcom.crashlytics.android.answers.RandomBackoff.\<init\>(Lio\/fabric\/sdk\/android\/services\/concurrency\/internal\/Backoff;DLjava\/util\/Random;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r4 \> 0.0d ? 1 : (r4 == 0.0d ? 0 : \-1)) \< 0) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if ((r4 \> 1.0d ? 1 : (r4 == 1.0d ? 0 : \-1)) \> 0) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r3 == null) goto L_0x0022\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r6 == null) goto L_0x001a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|r2.backoff = r3\lr2.jitterPercent = r4\lr2.random = r6\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a}"];
Node_9 [shape=record,label="{9\:\ 0x0021|throw new java.lang.NullPointerException(\"random must not be null\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022}"];
Node_11 [shape=record,label="{11\:\ 0x0029|throw new java.lang.NullPointerException(\"backoff must not be null\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a}"];
Node_13 [shape=record,label="{13\:\ 0x0031|throw new java.lang.IllegalArgumentException(\"jitterPercent must be between 0.0 and 1.0\")\l}"];
MethodNode[shape=record,label="{public void com.crashlytics.android.answers.RandomBackoff.\<init\>((r2v0 'this' com.crashlytics.android.answers.RandomBackoff A[IMMUTABLE_TYPE, THIS]), (r3v0 io.fabric.sdk.android.services.concurrency.internal.Backoff A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

