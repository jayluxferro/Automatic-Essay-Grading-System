digraph "CFG forcom.crashlytics.android.answers.AnswersEventValidator.isFullMap(Ljava\/util\/Map;Ljava\/lang\/String;)Z" {
subgraph cluster_Region_467295995 {
label = "R(1:(2:(1:6)|(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_458918424 {
label = "R(2:(1:6)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_33220995 {
label = "IF [B:1:0x0007, B:3:0x000d] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r5.size() \< r4.maxNumAttributes) goto L_0x002b\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ADDED_TO_REGION\l|if (r5.containsKey(r6) == true) goto L_0x002b\l}"];
subgraph cluster_Region_154410670 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002b|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1079031029 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|logOrThrowException(new java.lang.IllegalArgumentException(java.lang.String.format(java.util.Locale.US, \"Limit of %d attributes reached, skipping attribute\", new java.lang.Object[]\{java.lang.Integer.valueOf(r4.maxNumAttributes)\})))\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
MethodNode[shape=record,label="{public boolean com.crashlytics.android.answers.AnswersEventValidator.isFullMap((r4v0 'this' com.crashlytics.android.answers.AnswersEventValidator A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.Map\<java.lang.String, java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/Object;, \>;, Ljava\/lang\/String;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

