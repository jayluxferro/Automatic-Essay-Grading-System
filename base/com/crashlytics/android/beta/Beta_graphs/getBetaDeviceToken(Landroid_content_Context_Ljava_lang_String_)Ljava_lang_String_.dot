digraph "CFG forcom.crashlytics.android.beta.Beta.getBetaDeviceToken(Landroid\/content\/Context;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r5 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ Exception \-\> 0x0016 \}\lSplitter:B:1:0x0001\l|java.lang.String r4 = r3.deviceTokenCache.get(r4, r3.deviceTokenLoader)     \/\/ Catch:\{ Exception \-\> 0x0016 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if (\"\".equals(r4) == false) goto L_0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|r5 = r4\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|ExcHandler: Exception (r4v2 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.lang.Exception r4 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|p018io.fabric.sdk.android.Fabric.getLogger().mo22224e(TAG, \"Failed to load the Beta device token\", r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|PHI: r5 \l  PHI: (r5v2 java.lang.String) = (r5v1 java.lang.String), (r5v1 java.lang.String), (r5v3 java.lang.String) binds: [B:6:0x0017, B:3:0x0011, B:4:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|io.fabric.sdk.android.Logger r4 = p018io.fabric.sdk.android.Fabric.getLogger()\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Beta device token present: \")\lr1.append(android.text.TextUtils.isEmpty(r5) ^ true)\lr4.mo22221d(TAG, r1.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{private java.lang.String com.crashlytics.android.beta.Beta.getBetaDeviceToken((r3v0 'this' com.crashlytics.android.beta.Beta A[IMMUTABLE_TYPE, THIS]), (r4v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

