digraph "CFG forcom.crashlytics.android.core.SessionProtobufHelper.writeThread(Lcom\/crashlytics\/android\/core\/CodedOutputStream;Ljava\/lang\/Thread;[Ljava\/lang\/StackTraceElement;IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r1 I:int)\l  (r0 I:int)\l com.crashlytics.android.core.CodedOutputStream.writeTag(int, int):void type: VIRTUAL \l0x0005: INVOKE  (r2 I:int) = \l  (r4 I:java.lang.Thread)\l  (r5 I:java.lang.StackTraceElement[])\l  (r6 I:int)\l  (r7 I:boolean)\l com.crashlytics.android.core.SessionProtobufHelper.getThreadSize(java.lang.Thread, java.lang.StackTraceElement[], int, boolean):int type: STATIC \l0x0009: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r2 I:int)\l com.crashlytics.android.core.CodedOutputStream.writeRawVarint32(int):void type: VIRTUAL \l0x000c: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Thread) java.lang.Thread.getName():java.lang.String type: VIRTUAL \l0x0010: INVOKE  (r4 I:com.crashlytics.android.core.ByteString) = (r4 I:java.lang.String) com.crashlytics.android.core.ByteString.copyFromUtf8(java.lang.String):com.crashlytics.android.core.ByteString type: STATIC \l0x0014: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r1 I:int)\l  (r4 I:com.crashlytics.android.core.ByteString)\l com.crashlytics.android.core.CodedOutputStream.writeBytes(int, com.crashlytics.android.core.ByteString):void type: VIRTUAL \l0x0017: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r0 I:int)\l  (r6 I:int)\l com.crashlytics.android.core.CodedOutputStream.writeUInt32(int, int):void type: VIRTUAL \l0x001a: ARRAY_LENGTH  (r4 I:int) = (r5 I:?[]) \l0x001b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r6 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:3:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r6 I:?[int, short, byte, char]) \l0x0020: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0021: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r1 I:int)\l  (r0 I:java.lang.StackTraceElement)\l  (r7 I:boolean)\l com.crashlytics.android.core.SessionProtobufHelper.writeFrame(com.crashlytics.android.core.CodedOutputStream, int, java.lang.StackTraceElement, boolean):void type: STATIC \l0x0024: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.core.SessionProtobufHelper.writeThread((r3 I:com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Thread A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.StackTraceElement[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

