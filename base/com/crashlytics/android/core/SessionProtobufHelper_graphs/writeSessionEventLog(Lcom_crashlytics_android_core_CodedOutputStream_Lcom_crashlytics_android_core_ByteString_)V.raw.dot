digraph "CFG forcom.crashlytics.android.core.SessionProtobufHelper.writeSessionEventLog(Lcom\/crashlytics\/android\/core\/CodedOutputStream;Lcom\/crashlytics\/android\/core\/ByteString;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0012 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0004: INVOKE  \l  (r2 I:com.crashlytics.android.core.CodedOutputStream)\l  (r0 I:int)\l  (r1 I:int)\l com.crashlytics.android.core.CodedOutputStream.writeTag(int, int):void type: VIRTUAL \l0x0007: INVOKE  (r0 I:int) = (r3 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.SessionProtobufHelper.getEventLogSize(com.crashlytics.android.core.ByteString):int type: STATIC \l0x000b: INVOKE  \l  (r2 I:com.crashlytics.android.core.CodedOutputStream)\l  (r0 I:int)\l com.crashlytics.android.core.CodedOutputStream.writeRawVarint32(int):void type: VIRTUAL \l0x000e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  \l  (r2 I:com.crashlytics.android.core.CodedOutputStream)\l  (r0 I:int)\l  (r3 I:com.crashlytics.android.core.ByteString)\l com.crashlytics.android.core.CodedOutputStream.writeBytes(int, com.crashlytics.android.core.ByteString):void type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.core.SessionProtobufHelper.writeSessionEventLog((r2 I:com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.crashlytics.android.core.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
}

