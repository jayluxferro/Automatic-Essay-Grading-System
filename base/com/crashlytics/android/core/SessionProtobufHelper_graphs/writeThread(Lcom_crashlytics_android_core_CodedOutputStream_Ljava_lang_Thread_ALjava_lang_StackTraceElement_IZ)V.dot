digraph "CFG forcom.crashlytics.android.core.SessionProtobufHelper.writeThread(Lcom\/crashlytics\/android\/core\/CodedOutputStream;Ljava\/lang\/Thread;[Ljava\/lang\/StackTraceElement;IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.writeTag(1, 2)\lr3.writeRawVarint32(getThreadSize(r4, r5, r6, r7))\lr3.writeBytes(1, com.crashlytics.android.core.ByteString.copyFromUtf8(r4.getName()))\lr3.writeUInt32(2, r6)\lint r4 = r5.length\lr6 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|LOOP_START\lPHI: r6 \l  PHI: (r6v2 int) = (r6v1 int), (r6v3 int) binds: [B:0:0x0000, B:2:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001c\-\>B:2:0x001e\l|if (r6 \>= r4) goto L_0x0027\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|LOOP_END\lLOOP:0: B:1:0x001c\-\>B:2:0x001e\l|writeFrame(r3, 3, r5[r6], r7)\lint r6 = r6 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.core.SessionProtobufHelper.writeThread((r3v0 com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Thread A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.StackTraceElement[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_1;
Node_4 -> Node_3;
}

