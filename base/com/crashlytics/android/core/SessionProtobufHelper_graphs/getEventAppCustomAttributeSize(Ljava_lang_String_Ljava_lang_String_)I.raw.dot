digraph "CFG forcom.crashlytics.android.core.SessionProtobufHelper.getEventAppCustomAttributeSize(Ljava\/lang\/String;Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:com.crashlytics.android.core.ByteString) = (r1 I:java.lang.String) com.crashlytics.android.core.ByteString.copyFromUtf8(java.lang.String):com.crashlytics.android.core.ByteString type: STATIC \l0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: INVOKE  (r1 I:int) = (r0 I:int), (r1 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.CodedOutputStream.computeBytesSize(int, com.crashlytics.android.core.ByteString):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST_STR  (r2 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:com.crashlytics.android.core.ByteString) = (r2 I:java.lang.String) com.crashlytics.android.core.ByteString.copyFromUtf8(java.lang.String):com.crashlytics.android.core.ByteString type: STATIC \l0x0011: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0012: INVOKE  (r2 I:int) = (r0 I:int), (r2 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.CodedOutputStream.computeBytesSize(int, com.crashlytics.android.core.ByteString):int type: STATIC \l0x0016: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.crashlytics.android.core.SessionProtobufHelper.getEventAppCustomAttributeSize((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

