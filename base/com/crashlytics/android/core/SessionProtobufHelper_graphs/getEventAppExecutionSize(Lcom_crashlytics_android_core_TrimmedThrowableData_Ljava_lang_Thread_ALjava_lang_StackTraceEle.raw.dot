digraph "CFG forcom.crashlytics.android.core.SessionProtobufHelper.getEventAppExecutionSize(Lcom\/crashlytics\/android\/core\/TrimmedThrowableData;Ljava\/lang\/Thread;[Ljava\/lang\/StackTraceElement;[Ljava\/lang\/Thread;Ljava\/util\/List;ILcom\/crashlytics\/android\/core\/ByteString;Lcom\/crashlytics\/android\/core\/ByteString;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r7 I:int) = \l  (r7 I:java.lang.Thread)\l  (r8 I:java.lang.StackTraceElement[])\l  (r1 I:int)\l  (r0 I:boolean)\l com.crashlytics.android.core.SessionProtobufHelper.getThreadSize(java.lang.Thread, java.lang.StackTraceElement[], int, boolean):int type: STATIC \l0x0006: INVOKE  (r8 I:int) = (r0 I:int) com.crashlytics.android.core.CodedOutputStream.computeTagSize(int):int type: STATIC \l0x000a: INVOKE  (r1 I:int) = (r7 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC \l0x000e: ARITH  (r8 I:int) = (r8 I:int) + (r1 I:int) \l0x000f: ARITH  (r8 I:int) = (r8 I:int) + (r7 I:int) \l0x0010: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: ARITH  (r8 I:int) = (r8 I:int) + (r7 I:int) \l0x0012: ARRAY_LENGTH  (r1 I:int) = (r9 I:?[]) \l0x0013: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r8 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: AGET  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0019: INVOKE  (r4 I:java.lang.Object) = (r10 I:java.util.List), (r8 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r4 I:java.lang.StackTraceElement[]) = (java.lang.StackTraceElement[]) (r4 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r3 I:int) = \l  (r3 I:java.lang.Thread)\l  (r4 I:java.lang.StackTraceElement[])\l  (r7 I:int)\l  (r7 I:boolean)\l com.crashlytics.android.core.SessionProtobufHelper.getThreadSize(java.lang.Thread, java.lang.StackTraceElement[], int, boolean):int type: STATIC \l0x0023: INVOKE  (r4 I:int) = (r0 I:int) com.crashlytics.android.core.CodedOutputStream.computeTagSize(int):int type: STATIC \l0x0027: INVOKE  (r5 I:int) = (r3 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC \l0x002b: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x002c: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l0x002d: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x002e: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|0x0031: INVOKE  (r6 I:int) = \l  (r6 I:com.crashlytics.android.core.TrimmedThrowableData)\l  (r0 I:int)\l  (r11 I:int)\l com.crashlytics.android.core.SessionProtobufHelper.getEventAppExecutionExceptionSize(com.crashlytics.android.core.TrimmedThrowableData, int, int):int type: STATIC \l0x0035: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r7 I:int) = (r7 I:int) com.crashlytics.android.core.CodedOutputStream.computeTagSize(int):int type: STATIC \l0x003a: INVOKE  (r8 I:int) = (r6 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC \l0x003e: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x003f: ARITH  (r7 I:int) = (r7 I:int) + (r6 I:int) \l0x0040: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x0041: INVOKE  (r6 I:int) =  com.crashlytics.android.core.SessionProtobufHelper.getEventAppExecutionSignalSize():int type: STATIC \l0x0045: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0046: INVOKE  (r8 I:int) = (r7 I:int) com.crashlytics.android.core.CodedOutputStream.computeTagSize(int):int type: STATIC \l0x004a: INVOKE  (r9 I:int) = (r6 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC \l0x004e: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l0x004f: ARITH  (r8 I:int) = (r8 I:int) + (r6 I:int) \l0x0050: ARITH  (r2 I:int) = (r2 I:int) + (r8 I:int) \l0x0051: INVOKE  (r6 I:int) = \l  (r12 I:com.crashlytics.android.core.ByteString)\l  (r13 I:com.crashlytics.android.core.ByteString)\l com.crashlytics.android.core.SessionProtobufHelper.getBinaryImageSize(com.crashlytics.android.core.ByteString, com.crashlytics.android.core.ByteString):int type: STATIC \l0x0055: INVOKE  (r7 I:int) = (r7 I:int) com.crashlytics.android.core.CodedOutputStream.computeTagSize(int):int type: STATIC \l0x0059: INVOKE  (r8 I:int) = (r6 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC \l0x005d: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x005e: ARITH  (r7 I:int) = (r7 I:int) + (r6 I:int) \l0x005f: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0060|0x0060: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.crashlytics.android.core.SessionProtobufHelper.getEventAppExecutionSize((r6 I:com.crashlytics.android.core.TrimmedThrowableData A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Thread A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.StackTraceElement[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Thread[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.List\<java.lang.StackTraceElement[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.crashlytics.android.core.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:com.crashlytics.android.core.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/crashlytics\/android\/core\/TrimmedThrowableData;, Ljava\/lang\/Thread;, [, Ljava\/lang\/StackTraceElement;, [, Ljava\/lang\/Thread;, Ljava\/util\/List\<, [, Ljava\/lang\/StackTraceElement;, \>;I, Lcom\/crashlytics\/android\/core\/ByteString;, Lcom\/crashlytics\/android\/core\/ByteString;, )I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

