digraph "CFG forcom.crashlytics.android.core.ProcMapEntryParser.parse(Ljava\/lang\/String;)Lcom\/crashlytics\/android\/core\/ProcMapEntry;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.regex.Pattern) =  com.crashlytics.android.core.ProcMapEntryParser.MAP_REGEX java.util.regex.Pattern \l0x0002: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r11 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: RETURN  (r2 I:com.crashlytics.android.core.ProcMapEntry) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|SYNTHETIC\lSplitter:B:4:0x000f\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000f\l|0x000f: INVOKE  (r1 I:java.lang.String) = (r0 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}, TRY_ENTER]\l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x003e \}]\l0x0015: INVOKE  (r1 I:java.lang.Long) = (r1 I:java.lang.String), (r3 I:int) java.lang.Long.valueOf(java.lang.String, int):java.lang.Long type: STATIC A[Catch:\{ Exception \-\> 0x003e \}]\l0x0019: INVOKE  (r5 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}]\l0x001d: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x003e \}]\l0x001e: INVOKE  (r1 I:java.lang.String) = (r0 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}]\l0x0022: INVOKE  (r1 I:java.lang.Long) = (r1 I:java.lang.String), (r3 I:int) java.lang.Long.valueOf(java.lang.String, int):java.lang.Long type: STATIC A[Catch:\{ Exception \-\> 0x003e \}]\l0x0026: INVOKE  (r3 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}]\l0x002a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x003e \}]\l0x002b: ARITH  (r7 I:long) = (r3 I:long) \- (r5 I:long) A[Catch:\{ Exception \-\> 0x003e \}]\l0x002d: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x003e \}]\l0x002e: INVOKE  (r9 I:java.lang.String) = (r0 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}]\l0x0032: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x003e \}]\l0x0033: INVOKE  (r10 I:java.lang.String) = (r0 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x003e \}]\l0x0037: NEW_INSTANCE  (r0 I:com.crashlytics.android.core.ProcMapEntry) =  com.crashlytics.android.core.ProcMapEntry A[Catch:\{ Exception \-\> 0x003e \}]\l0x0039: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x003e \}]\l0x003a: INVOKE  \l  (r4 I:com.crashlytics.android.core.ProcMapEntry)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:java.lang.String)\l  (r10 I:java.lang.String)\l com.crashlytics.android.core.ProcMapEntry.\<init\>(long, long, java.lang.String, java.lang.String):void type: DIRECT A[Catch:\{ Exception \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x003d|0x003d: RETURN  (r0 I:com.crashlytics.android.core.ProcMapEntry) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: INVOKE  (r0 I:io.fabric.sdk.android.Logger) =  io.fabric.sdk.android.Fabric.getLogger():io.fabric.sdk.android.Logger type: STATIC \l0x0042: CONST_STR  (r1 I:java.lang.String) =  \"CrashlyticsCore\" \l0x0044: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0046: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0049: CONST_STR  (r4 I:java.lang.String) =  \"Could not parse map entry: \" \l0x004b: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r3 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r11 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0055: INVOKE  \l  (r0 I:io.fabric.sdk.android.Logger)\l  (r1 I:java.lang.String)\l  (r11 I:java.lang.String)\l io.fabric.sdk.android.Logger.d(java.lang.String, java.lang.String):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:4:0x000f\l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: RETURN  (r2 I:com.crashlytics.android.core.ProcMapEntry) \l}"];
MethodNode[shape=record,label="{public static com.crashlytics.android.core.ProcMapEntry com.crashlytics.android.core.ProcMapEntryParser.parse((r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

