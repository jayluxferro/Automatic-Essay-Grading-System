digraph "CFG forcom.crashlytics.android.core.CrashlyticsController.trimInvalidSessionFiles()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.io.File) = (r6 I:com.crashlytics.android.core.CrashlyticsController) com.crashlytics.android.core.CrashlyticsController.getInvalidFilesDir():java.io.File type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = (r0 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:com.crashlytics.android.core.CrashlyticsController$InvalidPartFileFilter) =  com.crashlytics.android.core.CrashlyticsController$InvalidPartFileFilter \l0x000d: INVOKE  \l  (r1 I:com.crashlytics.android.core.CrashlyticsController$InvalidPartFileFilter)\l com.crashlytics.android.core.CrashlyticsController.InvalidPartFileFilter.\<init\>():void type: DIRECT \l0x0010: INVOKE  (r1 I:java.io.File[]) = \l  (r6 I:com.crashlytics.android.core.CrashlyticsController)\l  (r0 I:java.io.File)\l  (r1 I:java.io.FilenameFilter)\l com.crashlytics.android.core.CrashlyticsController.listFilesMatching(java.io.File, java.io.FilenameFilter):java.io.File[] type: DIRECT \l0x0014: INVOKE  (r2 I:java.util.Comparator) =  java.util.Collections.reverseOrder():java.util.Comparator type: STATIC \l0x0018: INVOKE  (r1 I:java.lang.Object[]), (r2 I:java.util.Comparator) java.util.Arrays.sort(java.lang.Object[], java.util.Comparator):void type: STATIC \l0x001b: NEW_INSTANCE  (r2 I:java.util.HashSet) =  java.util.HashSet \l0x001d: INVOKE  (r2 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0020: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: ARRAY_LENGTH  (r4 I:int) = (r1 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r4 I:int) = (r2 I:java.util.Set) java.util.Set.size():int type: INTERFACE \l0x0028: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: AGET  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x002d: INVOKE  (r4 I:java.lang.String) = (r4 I:java.io.File) com.crashlytics.android.core.CrashlyticsController.getSessionIdFromSessionFile(java.io.File):java.lang.String type: STATIC \l0x0031: INVOKE  (r2 I:java.util.Set), (r4 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l0x0034: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: INVOKE  (r0 I:java.io.File[]) = \l  (r6 I:com.crashlytics.android.core.CrashlyticsController)\l  (r0 I:java.io.File)\l com.crashlytics.android.core.CrashlyticsController.listFiles(java.io.File):java.io.File[] type: DIRECT \l0x003b: INVOKE  \l  (r6 I:com.crashlytics.android.core.CrashlyticsController)\l  (r0 I:java.io.File[])\l  (r2 I:java.util.Set)\l com.crashlytics.android.core.CrashlyticsController.retainSessions(java.io.File[], java.util.Set):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.crashlytics.android.core.CrashlyticsController.trimInvalidSessionFiles((r6 'this' I:com.crashlytics.android.core.CrashlyticsController A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_10;
}

