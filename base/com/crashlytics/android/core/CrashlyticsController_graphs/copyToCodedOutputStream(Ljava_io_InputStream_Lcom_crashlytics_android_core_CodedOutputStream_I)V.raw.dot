digraph "CFG forcom.crashlytics.android.core.CrashlyticsController.copyToCodedOutputStream(Ljava\/io\/InputStream;Lcom\/crashlytics\/android\/core\/CodedOutputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[]) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x0008: INVOKE  (r1 I:int) = \l  (r2 I:java.io.InputStream)\l  (r4 I:byte[])\l  (r0 I:int)\l  (r1 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  \l  (r3 I:com.crashlytics.android.core.CodedOutputStream)\l  (r4 I:byte[])\l com.crashlytics.android.core.CodedOutputStream.writeRawBytes(byte[]):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.core.CrashlyticsController.copyToCodedOutputStream((r2 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

