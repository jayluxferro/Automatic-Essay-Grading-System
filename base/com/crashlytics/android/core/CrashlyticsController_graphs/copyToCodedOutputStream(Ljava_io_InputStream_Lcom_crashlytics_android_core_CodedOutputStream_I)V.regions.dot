digraph "CFG forcom.crashlytics.android.core.CrashlyticsController.copyToCodedOutputStream(Ljava\/io\/InputStream;Lcom\/crashlytics\/android\/core\/CodedOutputStream;I)V" {
subgraph cluster_Region_630210058 {
label = "R(3:0|(1:5)|6) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] byte[] r4 = new byte[r4]\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_408862229 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r0 \< r4.length) goto L_0x0006\l}"];
subgraph cluster_Region_392172689 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:5:0x000e\l|r0 += r1\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0010|r3.writeRawBytes(r4)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0003|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:5:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:5:0x000e\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c|ADDED_TO_REGION\l|if ((r1 = r2.read(r4, r0, r4.length \- r0)) \>= 0) goto L_0x000e\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0010|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0010|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.crashlytics.android.core.CrashlyticsController.copyToCodedOutputStream((r2v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_8 -> Node_6;
Node_9 -> Node_6;
}

