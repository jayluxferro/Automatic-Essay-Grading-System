digraph "CFG forcom.crashlytics.android.core.NativeFileUtils.filter(Ljava\/io\/File;Ljava\/lang\/String;)Ljava\/io\/File;" {
subgraph cluster_Region_515162059 {
label = "R(3:0|(2:2|(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.listFiles().length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_171300771 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:5:0x0015\l|if (r1 \< r0) goto L_0x0008\l}"];
subgraph cluster_Region_1043612655 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|r2 = r4[r1]\l}"];
subgraph cluster_Region_126601450 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1511563182 {
label = "IF [B:3:0x0012] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r2.getName().endsWith(r5) == true) goto L_0x0014\l}"];
subgraph cluster_Region_1226664489 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_280322586 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:5:0x0015\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0018|RETURN\l|return null\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x0014|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.io.File com.crashlytics.android.core.NativeFileUtils.filter((r4v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

