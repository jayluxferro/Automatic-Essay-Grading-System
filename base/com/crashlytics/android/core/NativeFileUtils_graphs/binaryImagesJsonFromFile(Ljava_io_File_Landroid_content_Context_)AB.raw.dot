digraph "CFG forcom.crashlytics.android.core.NativeFileUtils.binaryImagesJsonFromFile(Ljava\/io\/File;Landroid\/content\/Context;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:byte[]) = (r1 I:java.io.File) com.crashlytics.android.core.NativeFileUtils.readFile(java.io.File):byte[] type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r0 I:int) = (r1 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x000c: INVOKE  (r0 I:java.lang.String), (r1 I:byte[]) java.lang.String.\<init\>(byte[]):void type: DIRECT \l0x000f: INVOKE  (r1 I:byte[]) = (r2 I:android.content.Context), (r0 I:java.lang.String) com.crashlytics.android.core.NativeFileUtils.processBinaryImages(android.content.Context, java.lang.String):byte[] type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r1 I:byte[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: RETURN  (r1 I:byte[]) \l}"];
MethodNode[shape=record,label="{private static byte[] com.crashlytics.android.core.NativeFileUtils.binaryImagesJsonFromFile((r1 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

