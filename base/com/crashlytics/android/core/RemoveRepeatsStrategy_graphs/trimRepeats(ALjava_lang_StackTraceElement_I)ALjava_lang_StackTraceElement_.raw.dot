digraph "CFG forcom.crashlytics.android.core.RemoveRepeatsStrategy.trimRepeats([Ljava\/lang\/StackTraceElement;I)[Ljava\/lang\/StackTraceElement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0005: ARRAY_LENGTH  (r1 I:int) = (r10 I:?[]) \l0x0006: NEW_ARRAY  (r1 I:java.lang.StackTraceElement[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[] \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: ARRAY_LENGTH  (r7 I:int) = (r10 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r4 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:14:0x0049 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: AGET  (r7 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l \l0x0012: INVOKE  (r8 I:java.lang.Object) = (r0 I:java.util.Map), (r7 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r8 I:java.lang.Integer) = (java.lang.Integer) (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r9 I:int) = (r8 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x001e: INVOKE  (r9 I:boolean) = \l  (r10 I:java.lang.StackTraceElement[])\l  (r9 I:int)\l  (r4 I:int)\l com.crashlytics.android.core.RemoveRepeatsStrategy.isRepeatingSequence(java.lang.StackTraceElement[], int, int):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: INVOKE  (r8 I:int) = (r8 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0029: ARITH  (r8 I:int) = (r4 I:int) \- (r8 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r6 I:?[int, byte, short, char]) \>= (r11 I:?[int, byte, short, char])  \-\> B:11:0x0033 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: INVOKE  \l  (r10 I:java.lang.Object)\l  (r4 I:int)\l  (r1 I:java.lang.Object)\l  (r5 I:int)\l  (r8 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0030: ARITH  (r5 I:int) = (r5 I:int) + (r8 I:int) \l0x0031: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: ARITH  (r8 I:int) = (r8 I:int) + (\-1 int) \l0x0035: ARITH  (r8 I:int) = (r8 I:int) + (r4 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: AGET  (r6 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l \l0x0039: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x003b: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x003d: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003e: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0043: INVOKE  \l  (r0 I:java.util.Map)\l  (r7 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0046: ARITH  (r4 I:int) = (r8 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: NEW_ARRAY  (r10 I:java.lang.StackTraceElement[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[] \l0x004b: ARRAY_LENGTH  (r11 I:int) = (r10 I:?[]) \l0x004c: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r10 I:java.lang.Object)\l  (r2 I:int)\l  (r11 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: RETURN  (r10 I:java.lang.StackTraceElement[]) \l}"];
MethodNode[shape=record,label="{private static java.lang.StackTraceElement[] com.crashlytics.android.core.RemoveRepeatsStrategy.trimRepeats((r10 I:java.lang.StackTraceElement[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_12[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
}

