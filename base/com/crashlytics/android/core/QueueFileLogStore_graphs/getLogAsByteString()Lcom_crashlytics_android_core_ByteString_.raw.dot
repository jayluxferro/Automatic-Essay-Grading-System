digraph "CFG forcom.crashlytics.android.core.QueueFileLogStore.getLogAsByteString()Lcom\/crashlytics\/android\/core\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.crashlytics.android.core.QueueFileLogStore$LogBytes) = (r3 I:com.crashlytics.android.core.QueueFileLogStore) com.crashlytics.android.core.QueueFileLogStore.getLogBytes():com.crashlytics.android.core.QueueFileLogStore$LogBytes type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r1 I:byte[]) = \l  (r0 I:com.crashlytics.android.core.QueueFileLogStore$LogBytes)\l com.crashlytics.android.core.QueueFileLogStore.LogBytes.bytes byte[] \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IGET  (r0 I:int) = \l  (r0 I:com.crashlytics.android.core.QueueFileLogStore$LogBytes)\l com.crashlytics.android.core.QueueFileLogStore.LogBytes.offset int \l0x000d: INVOKE  (r0 I:com.crashlytics.android.core.ByteString) = (r1 I:byte[]), (r2 I:int), (r0 I:int) com.crashlytics.android.core.ByteString.copyFrom(byte[], int, int):com.crashlytics.android.core.ByteString type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r0 I:com.crashlytics.android.core.ByteString) \l}"];
MethodNode[shape=record,label="{public com.crashlytics.android.core.ByteString com.crashlytics.android.core.QueueFileLogStore.getLogAsByteString((r3 'this' I:com.crashlytics.android.core.QueueFileLogStore A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

