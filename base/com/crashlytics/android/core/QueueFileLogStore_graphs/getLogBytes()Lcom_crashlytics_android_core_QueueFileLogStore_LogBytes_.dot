digraph "CFG forcom.crashlytics.android.core.QueueFileLogStore.getLogBytes()Lcom\/crashlytics\/android\/core\/QueueFileLogStore$LogBytes;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r7.workingFile.exists() != false) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|openLogFile()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r7.logFile != null) goto L_0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\l|return null\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|int[] r0 = new int[]\{0\}\lbyte[] r2 = new byte[r7.logFile.usedBytes()]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|SYNTHETIC\lSplitter:B:7:0x0020\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ IOException \-\> 0x002b \}\lSplitter:B:7:0x0020\l|r7.logFile.forEach(new com.crashlytics.android.core.QueueFileLogStore.C06501(r7))     \/\/ Catch:\{ IOException \-\> 0x002b \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|ExcHandler: IOException (r3v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:7:0x0020\l|java.io.IOException r3 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|p018io.fabric.sdk.android.Fabric.getLogger().mo22224e(com.crashlytics.android.core.CrashlyticsCore.TAG, \"A problem occurred while reading the Crashlytics log file.\", r3)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037}"];
Node_12 [shape=record,label="{12\:\ 0x003e|RETURN\l|return new com.crashlytics.android.core.QueueFileLogStore.LogBytes(r7, r2, r0[0])\l}"];
MethodNode[shape=record,label="{private com.crashlytics.android.core.QueueFileLogStore$LogBytes com.crashlytics.android.core.QueueFileLogStore.getLogBytes((r7v0 'this' com.crashlytics.android.core.QueueFileLogStore A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

