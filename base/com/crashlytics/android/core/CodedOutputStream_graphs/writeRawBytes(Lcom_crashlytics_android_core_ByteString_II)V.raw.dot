digraph "CFG forcom.crashlytics.android.core.CodedOutputStream.writeRawBytes(Lcom\/crashlytics\/android\/core\/ByteString;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.limit int \l0x0002: IGET  (r1 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.position int \l0x0004: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:byte[]) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x0009: IGET  (r1 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.position int \l0x000b: INVOKE  \l  (r7 I:com.crashlytics.android.core.ByteString)\l  (r0 I:byte[])\l  (r8 I:int)\l  (r1 I:int)\l  (r9 I:int)\l com.crashlytics.android.core.ByteString.copyTo(byte[], int, int, int):void type: VIRTUAL \l0x000e: IGET  (r7 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.position int \l0x0010: ARITH  (r7 I:int) = (r7 I:int) + (r9 I:int) \l0x0011: IPUT  \l  (r7 I:int)\l  (r6 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.position int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r0 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.limit int \l0x0016: IGET  (r1 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.position int \l0x0018: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0019: IGET  (r1 I:byte[]) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x001b: IGET  (r2 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.position int \l0x001d: INVOKE  \l  (r7 I:com.crashlytics.android.core.ByteString)\l  (r1 I:byte[])\l  (r8 I:int)\l  (r2 I:int)\l  (r0 I:int)\l com.crashlytics.android.core.ByteString.copyTo(byte[], int, int, int):void type: VIRTUAL \l0x0020: ARITH  (r8 I:int) = (r8 I:int) + (r0 I:int) \l0x0021: ARITH  (r9 I:int) = (r9 I:int) \- (r0 I:int) \l0x0022: IGET  (r0 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.limit int \l0x0024: IPUT  \l  (r0 I:int)\l  (r6 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.position int \l0x0026: INVOKE  (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.refreshBuffer():void type: DIRECT \l0x0029: IGET  (r0 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.limit int \l0x002b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: IF  (r9 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x0036 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r0 I:byte[]) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x0030: INVOKE  \l  (r7 I:com.crashlytics.android.core.ByteString)\l  (r0 I:byte[])\l  (r8 I:int)\l  (r1 I:int)\l  (r9 I:int)\l com.crashlytics.android.core.ByteString.copyTo(byte[], int, int, int):void type: VIRTUAL \l0x0033: IPUT  \l  (r9 I:int)\l  (r6 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.position int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: INVOKE  (r7 I:java.io.InputStream) = (r7 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.ByteString.newInput():java.io.InputStream type: VIRTUAL \l0x003a: CAST  (r2 I:long) = (long) (r8 I:int) \l0x003b: INVOKE  (r4 I:long) = (r7 I:java.io.InputStream), (r2 I:long) java.io.InputStream.skip(long):long type: VIRTUAL \l0x003f: CMP_L  (r8 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0065 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|0x0043: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0064 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: IGET  (r8 I:int) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.limit int \l0x0047: INVOKE  (r8 I:int) = (r9 I:int), (r8 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x004b: IGET  (r0 I:byte[]) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x004d: INVOKE  (r0 I:int) = \l  (r7 I:java.io.InputStream)\l  (r0 I:byte[])\l  (r1 I:int)\l  (r8 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|0x0051: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x005c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|0x0053: IGET  (r8 I:java.io.OutputStream) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.output java.io.OutputStream \l0x0055: IGET  (r2 I:byte[]) = (r6 I:com.crashlytics.android.core.CodedOutputStream) com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x0057: INVOKE  \l  (r8 I:java.io.OutputStream)\l  (r2 I:byte[])\l  (r1 I:int)\l  (r0 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL \l0x005a: ARITH  (r9 I:int) = (r9 I:int) \- (r0 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|0x005c: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x005e: CONST_STR  (r8 I:java.lang.String) =  \"Read failed.\" \l0x0060: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r8 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0063|0x0063: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0065|0x0065: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0067: CONST_STR  (r8 I:java.lang.String) =  \"Skip failed.\" \l0x0069: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r8 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x006c|0x006c: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.crashlytics.android.core.CodedOutputStream.writeRawBytes((r6 'this' I:com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, THIS]), (r7 I:com.crashlytics.android.core.ByteString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_15 -> Node_16;
}

