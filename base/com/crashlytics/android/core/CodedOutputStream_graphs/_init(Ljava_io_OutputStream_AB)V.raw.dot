digraph "CFG forcom.crashlytics.android.core.CodedOutputStream.\<init\>(Ljava\/io\/OutputStream;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r1 I:java.io.OutputStream)\l  (r0 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.output java.io.OutputStream \l0x0005: IPUT  \l  (r2 I:byte[])\l  (r0 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.buffer byte[] \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: IPUT  \l  (r1 I:int)\l  (r0 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.position int \l0x000a: ARRAY_LENGTH  (r1 I:int) = (r2 I:?[]) \l0x000b: IPUT  \l  (r1 I:int)\l  (r0 I:com.crashlytics.android.core.CodedOutputStream)\l com.crashlytics.android.core.CodedOutputStream.limit int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.crashlytics.android.core.CodedOutputStream.\<init\>((r0 'this' I:com.crashlytics.android.core.CodedOutputStream A[IMMUTABLE_TYPE, THIS]), (r1 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

