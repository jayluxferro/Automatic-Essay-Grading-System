digraph "CFG forcom.crashlytics.android.core.CodedOutputStream.computeStringSizeNoTag(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-8\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r2 I:byte[]) = (r2 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.getBytes(java.lang.String):byte[] type: VIRTUAL A[Catch:\{ UnsupportedEncodingException \-\> 0x000e \}, TRY_ENTER]\l0x0006: ARRAY_LENGTH  (r0 I:int) = (r2 I:?[]) A[Catch:\{ UnsupportedEncodingException \-\> 0x000e \}]\l0x0007: INVOKE  (r0 I:int) = (r0 I:int) com.crashlytics.android.core.CodedOutputStream.computeRawVarint32Size(int):int type: STATIC A[Catch:\{ UnsupportedEncodingException \-\> 0x000e \}]\l0x000b: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) A[Catch:\{ UnsupportedEncodingException \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|ExcHandler: UnsupportedEncodingException null\lSplitter:B:1:0x0002\l|0x000e: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"UTF\-8 not supported.\" \l0x0013: INVOKE  \l  (r0 I:java.lang.RuntimeException)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int com.crashlytics.android.core.CodedOutputStream.computeStringSizeNoTag((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

