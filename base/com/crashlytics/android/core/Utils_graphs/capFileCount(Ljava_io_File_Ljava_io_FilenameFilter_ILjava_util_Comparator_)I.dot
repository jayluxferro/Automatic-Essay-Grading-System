digraph "CFG forcom.crashlytics.android.core.Utils.capFileCount(Ljava\/io\/File;Ljava\/io\/FilenameFilter;ILjava\/util\/Comparator;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.File[] r2 = r2.listFiles(r3)\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r2 != null) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|int r0 = r2.length\ljava.util.Arrays.sort(r2, r5)\lint r5 = r2.length\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|LOOP_START\lPHI: r0 r3 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:3:0x0008, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:3:0x0008, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000d\-\>B:8:0x0014\l|if (r3 \>= r5) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r1 = r2[r3]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r0 \> r4) goto L_0x0014\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:0: B:4:0x000d\-\>B:8:0x0014\l|r1.delete()\lint r0 = r0 + \-1\lint r3 = r3 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|RETURN\l|return r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int com.crashlytics.android.core.Utils.capFileCount((r2v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.io.FilenameFilter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.Comparator\<java.io.File\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/File;, Ljava\/io\/FilenameFilter;, I, Ljava\/util\/Comparator\<, Ljava\/io\/File;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10[style=dashed];
Node_8 -> Node_4;
Node_10 -> Node_7;
Node_11 -> Node_9;
}

