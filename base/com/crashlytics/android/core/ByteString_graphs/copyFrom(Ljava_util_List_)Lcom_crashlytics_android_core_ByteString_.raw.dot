digraph "CFG forcom.crashlytics.android.core.ByteString.copyFrom(Ljava\/util\/List;)Lcom\/crashlytics\/android\/core\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r6 I:com.crashlytics.android.core.ByteString) =  com.crashlytics.android.core.ByteString.EMPTY com.crashlytics.android.core.ByteString \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r6 I:com.crashlytics.android.core.ByteString) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r6 I:com.crashlytics.android.core.ByteString) = (com.crashlytics.android.core.ByteString) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN  (r6 I:com.crashlytics.android.core.ByteString) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE  (r0 I:java.util.Iterator) = (r6 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x001c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r3 I:com.crashlytics.android.core.ByteString) = (com.crashlytics.android.core.ByteString) (r3 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r3 I:int) = (r3 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.ByteString.size():int type: VIRTUAL \l0x002d: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: NEW_ARRAY  (r0 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0031: INVOKE  (r6 I:java.util.Iterator) = (r6 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0035: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: INVOKE  (r3 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0051 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: INVOKE  (r3 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0040: CHECK_CAST  (r3 I:com.crashlytics.android.core.ByteString) = (com.crashlytics.android.core.ByteString) (r3 I:?[OBJECT, ARRAY]) \l0x0042: IGET  (r4 I:byte[]) = (r3 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.ByteString.bytes byte[] \l0x0044: INVOKE  (r5 I:int) = (r3 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.ByteString.size():int type: VIRTUAL \l0x0048: INVOKE  \l  (r4 I:java.lang.Object)\l  (r2 I:int)\l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x004b: INVOKE  (r3 I:int) = (r3 I:com.crashlytics.android.core.ByteString) com.crashlytics.android.core.ByteString.size():int type: VIRTUAL \l0x004f: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: NEW_INSTANCE  (r6 I:com.crashlytics.android.core.ByteString) =  com.crashlytics.android.core.ByteString \l0x0053: INVOKE  \l  (r6 I:com.crashlytics.android.core.ByteString)\l  (r0 I:byte[])\l com.crashlytics.android.core.ByteString.\<init\>(byte[]):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0056|0x0056: RETURN  (r6 I:com.crashlytics.android.core.ByteString) \l}"];
MethodNode[shape=record,label="{public static com.crashlytics.android.core.ByteString com.crashlytics.android.core.ByteString.copyFrom((r6 I:java.util.List\<com.crashlytics.android.core.ByteString\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/crashlytics\/android\/core\/ByteString;, \>;), Lcom\/crashlytics\/android\/core\/ByteString;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_13;
Node_16 -> Node_17;
}

