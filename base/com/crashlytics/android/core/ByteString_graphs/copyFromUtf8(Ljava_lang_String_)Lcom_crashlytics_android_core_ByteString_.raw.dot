digraph "CFG forcom.crashlytics.android.core.ByteString.copyFromUtf8(Ljava\/lang\/String;)Lcom\/crashlytics\/android\/core\/ByteString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:com.crashlytics.android.core.ByteString) =  com.crashlytics.android.core.ByteString A[Catch:\{ UnsupportedEncodingException \-\> 0x000c \}, TRY_ENTER]\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"UTF\-8\" A[Catch:\{ UnsupportedEncodingException \-\> 0x000c \}]\l0x0004: INVOKE  (r2 I:byte[]) = (r2 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.getBytes(java.lang.String):byte[] type: VIRTUAL A[Catch:\{ UnsupportedEncodingException \-\> 0x000c \}]\l0x0008: INVOKE  \l  (r0 I:com.crashlytics.android.core.ByteString)\l  (r2 I:byte[])\l com.crashlytics.android.core.ByteString.\<init\>(byte[]):void type: DIRECT A[Catch:\{ UnsupportedEncodingException \-\> 0x000c \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r0 I:com.crashlytics.android.core.ByteString) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|ExcHandler: UnsupportedEncodingException null\lSplitter:B:0:0x0000\l|0x000c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"UTF\-8 not supported.\" \l0x0011: INVOKE  \l  (r0 I:java.lang.RuntimeException)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.crashlytics.android.core.ByteString com.crashlytics.android.core.ByteString.copyFromUtf8((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

