digraph "CFG forcom.crashlytics.android.core.CrashlyticsController.InvalidPartFileFilter.accept(Ljava\/io\/File;Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.io.FilenameFilter) =  com.crashlytics.android.core.ClsFileOutputStream.TEMP_FILENAME_FILTER java.io.FilenameFilter \l0x0002: INVOKE  (r2 I:boolean) = \l  (r0 I:java.io.FilenameFilter)\l  (r2 I:java.io.File)\l  (r3 I:java.lang.String)\l java.io.FilenameFilter.accept(java.io.File, java.lang.String):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST_STR  (r2 I:java.lang.String) =  \"SessionMissingBinaryImages\" \l0x000a: INVOKE  (r2 I:boolean) = (r3 I:java.lang.String), (r2 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.crashlytics.android.core.CrashlyticsController.InvalidPartFileFilter.accept((r1 'this' I:com.crashlytics.android.core.CrashlyticsController$InvalidPartFileFilter A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

