digraph "CFG forcom.crashlytics.android.core.CrashlyticsController.13.call()Ljava\/lang\/Boolean;" {
subgraph cluster_Region_28975133 {
label = "R(1:(2:(2:2|3)|(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1300323283 {
label = "R(2:(2:2|3)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1749555072 {
label = "IF [B:1:0x0006] THEN: R(2:2|3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (com.crashlytics.android.core.CrashlyticsController.this.isHandlingException() == true) goto L_0x0008\l}"];
subgraph cluster_Region_1073954783 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|p018io.fabric.sdk.android.Fabric.getLogger().mo22221d(com.crashlytics.android.core.CrashlyticsCore.TAG, \"Skipping session finalization because a crash has already occurred.\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return java.lang.Boolean.FALSE\l}"];
}
}
subgraph cluster_Region_283723018 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0016|p018io.fabric.sdk.android.Fabric.getLogger().mo22221d(com.crashlytics.android.core.CrashlyticsCore.TAG, \"Finalizing previously open sessions.\")\lcom.crashlytics.android.core.CrashlyticsController.this.doCloseSessions(r3, true)\lp018io.fabric.sdk.android.Fabric.getLogger().mo22221d(com.crashlytics.android.core.CrashlyticsCore.TAG, \"Closed all previously open sessions\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|RETURN\l|return java.lang.Boolean.TRUE\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Boolean com.crashlytics.android.core.CrashlyticsController.13.call((r3v0 'this' com.crashlytics.android.core.CrashlyticsController$13 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_0 -> Node_1;
}

