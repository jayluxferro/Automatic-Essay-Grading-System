digraph "CFG forcom.crashlytics.android.core.DefaultAppMeasurementEventListenerRegistrar.getInstance(Ljava\/lang\/Class;)Ljava\/lang\/Object;" {
subgraph cluster_Region_284818943 {
label = "R(1:(2:2|3))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_557525578 {
label = "Try: R(2:2|3) catches: R(1:4)";
node [shape=record,color=blue];
subgraph cluster_Region_1662754065 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ Exception \-\> 0x001d \}\lSplitter:B:1:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|RETURN\l|return r6.getDeclaredMethod(GET_INSTANCE_METHOD, new java.lang.Class[]\{android.content.Context.class\}).invoke(r6, new java.lang.Object[]\{r5.crashlyticsCore.getContext()\})\l}"];
}
subgraph cluster_Region_1808303777 {
label = "R(1:4) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|RETURN\l|return null\l}"];
}
}
}
subgraph cluster_Region_1808303777 {
label = "R(1:4) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|RETURN\l|return null\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lExcHandler: Exception (unused java.lang.Exception)\lSplitter:B:1:0x0003\l}"];
MethodNode[shape=record,label="{private java.lang.Object com.crashlytics.android.core.DefaultAppMeasurementEventListenerRegistrar.getInstance((r5v0 'this' com.crashlytics.android.core.DefaultAppMeasurementEventListenerRegistrar A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_5 -> Node_4;
}

