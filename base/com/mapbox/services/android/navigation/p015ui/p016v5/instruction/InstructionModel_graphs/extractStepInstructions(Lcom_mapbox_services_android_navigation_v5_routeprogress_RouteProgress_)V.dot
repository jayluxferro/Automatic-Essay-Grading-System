digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.InstructionModel.extractStepInstructions(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress r0 = r7.currentLegProgress()\lcom.mapbox.api.directions.v5.models.LegStep r7 = r7.currentLegProgress().currentStep()\lcom.mapbox.api.directions.v5.models.LegStep r1 = r0.upComingStep()\lint r0 = (int) r0.currentStepProgress().distanceRemaining()\ldouble r3 = (double) r0\lr6.primaryBannerText = r6.routeUtils.findCurrentBannerText(r7, r3, true)\lr6.secondaryBannerText = r6.routeUtils.findCurrentBannerText(r7, r3, false)\l}"];
Node_1 [shape=record,label="{1\:\ 0x002c|if (r1 == null) goto L_0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x002e|r6.thenBannerText = r6.routeUtils.findCurrentBannerText(r1, r1.distance(), true)\l}"];
Node_3 [shape=record,label="{3\:\ 0x003a}"];
Node_4 [shape=record,label="{4\:\ 0x003c|if (r6.primaryBannerText == null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x003e}"];
Node_6 [shape=record,label="{6\:\ 0x0044|if (r6.primaryBannerText.degrees() == null) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|r6.roundaboutAngle = java.lang.Float.valueOf(r6.primaryBannerText.degrees().floatValue())\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.ui.v5.instruction.InstructionModel.extractStepInstructions((r6v0 'this' com.mapbox.services.android.navigation.ui.v5.instruction.InstructionModel A[IMMUTABLE_TYPE, THIS]), (r7v0 com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
}

