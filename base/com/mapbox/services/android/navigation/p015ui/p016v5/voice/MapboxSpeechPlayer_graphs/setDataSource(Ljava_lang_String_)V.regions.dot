digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.voice.MapboxSpeechPlayer.setDataSource(Ljava\/lang\/String;)V" {
subgraph cluster_Region_1551068243 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1664159992 {
label = "Try: R(1:1) catches: R(2:2|3)";
node [shape=record,color=blue];
subgraph cluster_Region_1087638378 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x0006 \}\lSplitter:B:0:0x0000\l|r3.mediaPlayer.setDataSource(r4)     \/\/ Catch:\{ IOException \-\> 0x0006 \}\l}"];
}
subgraph cluster_Region_1244803411 {
label = "R(2:2|3) | ExcHandler: IOException (r4v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|ExcHandler: IOException (r4v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|timber.log.Timber.m192e(ERROR_TEXT, r4.getMessage())\l}"];
}
}
}
subgraph cluster_Region_1244803411 {
label = "R(2:2|3) | ExcHandler: IOException (r4v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|ExcHandler: IOException (r4v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|timber.log.Timber.m192e(ERROR_TEXT, r4.getMessage())\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.ui.v5.voice.MapboxSpeechPlayer.setDataSource((r3v0 'this' com.mapbox.services.android.navigation.ui.v5.voice.MapboxSpeechPlayer A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_2;
}

