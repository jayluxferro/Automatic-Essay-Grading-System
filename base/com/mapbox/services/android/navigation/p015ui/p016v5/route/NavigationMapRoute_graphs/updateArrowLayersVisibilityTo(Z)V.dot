digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute.updateArrowLayersVisibilityTo(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r5.arrowLayers.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:11:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() == false) goto L_0x0035\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|com.mapbox.mapboxsdk.style.layers.Layer r1 = r0.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r6 == false) goto L_0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|java.lang.String r2 = com.mapbox.mapboxsdk.style.layers.Property.VISIBLE\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|java.lang.String r2 = \"none\"\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|PHI: r2 \l  PHI: (r2v0 java.lang.String) = (r2v2 java.lang.String), (r2v3 java.lang.String) binds: [B:6:0x0017, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|if (r2.equals(r1.getVisibility().getValue()) != false) goto L_0x0006\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|com.mapbox.mapboxsdk.style.layers.PropertyValue[] r3 = new com.mapbox.mapboxsdk.style.layers.PropertyValue[]\{com.mapbox.mapboxsdk.style.layers.PropertyFactory.visibility(r2)\}\lr1.setProperties(r3)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0006\-\>B:11:0x0006\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute.updateArrowLayersVisibilityTo((r5v0 'this' com.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute A[IMMUTABLE_TYPE, THIS]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_14;
Node_11 -> Node_1;
Node_12 -> Node_10;
Node_13 -> Node_11;
Node_14 -> Node_11;
}

