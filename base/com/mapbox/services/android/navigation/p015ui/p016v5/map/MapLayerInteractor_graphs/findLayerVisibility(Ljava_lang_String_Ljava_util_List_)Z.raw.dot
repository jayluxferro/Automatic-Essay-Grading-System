digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor.findLayerVisibility(Ljava\/lang\/String;Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r0 I:com.mapbox.mapboxsdk.style.layers.Layer) = (com.mapbox.mapboxsdk.style.layers.Layer) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:boolean) = \l  (r2 I:com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor)\l  (r0 I:com.mapbox.mapboxsdk.style.layers.Layer)\l com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor.isValid(com.mapbox.mapboxsdk.style.layers.Layer):boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.String) = \l  (r2 I:com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor)\l  (r0 I:com.mapbox.mapboxsdk.style.layers.Layer)\l com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor.retrieveSourceLayerId(com.mapbox.mapboxsdk.style.layers.Layer):java.lang.String type: DIRECT \l0x001a: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: INVOKE  (r3 I:com.mapbox.mapboxsdk.style.layers.PropertyValue) = (r0 I:com.mapbox.mapboxsdk.style.layers.Layer) com.mapbox.mapboxsdk.style.layers.Layer.getVisibility():com.mapbox.mapboxsdk.style.layers.PropertyValue type: VIRTUAL \l0x0024: IGET  (r3 I:T) = (r3 I:com.mapbox.mapboxsdk.style.layers.PropertyValue) com.mapbox.mapboxsdk.style.layers.PropertyValue.value java.lang.Object \l0x0026: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0028: CONST_STR  (r4 I:java.lang.String) =  \"visible\" \l0x002a: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: RETURN  (r3 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor.findLayerVisibility((r2 'this' I:com.mapbox.services.android.navigation.ui.v5.map.MapLayerInteractor A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<com.mapbox.mapboxsdk.style.layers.Layer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/List\<, Lcom\/mapbox\/mapboxsdk\/style\/layers\/Layer;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

