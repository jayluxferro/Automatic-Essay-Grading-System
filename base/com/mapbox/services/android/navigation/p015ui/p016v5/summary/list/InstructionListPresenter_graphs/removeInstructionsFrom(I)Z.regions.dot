digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.summary.list.InstructionListPresenter.removeInstructionsFrom(I)Z" {
subgraph cluster_Region_2090771763 {
label = "R(1:(2:2|3)(1:(1:8)(2:6|7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1873492771 {
label = "IF [B:1:0x0002] THEN: R(2:2|3) ELSE: R(1:(1:8)(2:6|7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 == 0) goto L_0x0004\l}"];
subgraph cluster_Region_481118827 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r3.instructions.remove(0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|RETURN\l|return true\l}"];
}
subgraph cluster_Region_55939381 {
label = "R(1:(1:8)(2:6|7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_183180113 {
label = "IF [B:5:0x0010] THEN: R(1:8) ELSE: R(2:6|7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r4 \> r3.instructions.size()) goto L_0x001c\l}"];
subgraph cluster_Region_1018120972 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001c|RETURN\l|return false\l}"];
}
subgraph cluster_Region_1252499680 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|r3.instructions.subList(0, r4).clear()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|RETURN\l|return true\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.summary.list.InstructionListPresenter.removeInstructionsFrom((r3v0 'this' com.mapbox.services.android.navigation.ui.v5.summary.list.InstructionListPresenter A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_4 -> Node_5;
}

