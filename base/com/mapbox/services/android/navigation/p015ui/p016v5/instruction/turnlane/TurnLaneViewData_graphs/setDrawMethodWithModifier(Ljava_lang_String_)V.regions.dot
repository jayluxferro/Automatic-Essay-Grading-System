digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.turnlane.TurnLaneViewData.setDrawMethodWithModifier(Ljava\/lang\/String;)V" {
subgraph cluster_Region_2001642777 {
label = "R(1:(1:2)(1:(1:5)(1:6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1584684175 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: R(1:(1:5)(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2.contains(\"right\") == true) goto L_0x0008\l}"];
subgraph cluster_Region_1744509832 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|r1.drawMethod = DRAW_LANE_RIGHT_ONLY\l}"];
}
subgraph cluster_Region_796762569 {
label = "R(1:(1:5)(1:6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_765050706 {
label = "IF [B:4:0x0013] THEN: R(1:5) ELSE: R(1:6) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r2.contains(\"straight\") == true) goto L_0x0015\l}"];
subgraph cluster_Region_1375014474 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|r1.drawMethod = DRAW_LANE_STRAIGHT_ONLY\l}"];
}
subgraph cluster_Region_1861052583 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|r1.drawMethod = DRAW_LANE_STRAIGHT_RIGHT\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000d}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.ui.v5.instruction.turnlane.TurnLaneViewData.setDrawMethodWithModifier((r1v0 'this' com.mapbox.services.android.navigation.ui.v5.instruction.turnlane.TurnLaneViewData A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

