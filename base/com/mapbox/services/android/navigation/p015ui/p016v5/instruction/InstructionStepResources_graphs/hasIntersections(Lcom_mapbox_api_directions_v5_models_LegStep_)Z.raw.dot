digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.hasIntersections(Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r3 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.intersections():java.util.List type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r3 I:java.util.List) = (r3 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.intersections():java.util.List type: VIRTUAL \l0x000b: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.hasIntersections((r2 'this' I:com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources A[IMMUTABLE_TYPE, THIS]), (r3 I:com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

