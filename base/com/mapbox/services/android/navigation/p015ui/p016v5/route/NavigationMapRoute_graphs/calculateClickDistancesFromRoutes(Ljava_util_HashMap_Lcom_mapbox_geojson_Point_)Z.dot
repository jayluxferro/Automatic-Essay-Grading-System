digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute.calculateClickDistancesFromRoutes(Ljava\/util\/HashMap;Lcom\/mapbox\/geojson\/Point;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r4.routeLineStrings.keySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lLOOP:0: B:1:0x000a\-\>B:6:0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|if (r0.hasNext() == false) goto L_0x0032\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|com.mapbox.geojson.LineString r1 = r0.next()\lcom.mapbox.geojson.Point r2 = findPointOnLine(r6, r1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|if (r2 != null) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|RETURN\l|return true\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:6:0x001e\l|r5.put(java.lang.Double.valueOf(com.mapbox.turf.TurfMeasurement.distance(r6, r2, com.mapbox.turf.TurfConstants.UNIT_METERS)), r4.routeLineStrings.get(r1))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute.calculateClickDistancesFromRoutes((r4v0 'this' com.mapbox.services.android.navigation.ui.v5.route.NavigationMapRoute A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.HashMap\<java.lang.Double, com.mapbox.api.directions.v5.models.DirectionsRoute\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/HashMap\<, Ljava\/lang\/Double;, Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;, \>;, Lcom\/mapbox\/geojson\/Point;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_1;
Node_8 -> Node_5;
Node_9 -> Node_7;
}

