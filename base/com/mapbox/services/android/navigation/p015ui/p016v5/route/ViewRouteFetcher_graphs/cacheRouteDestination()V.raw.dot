digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.cacheRouteDestination()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) = \l  (r3 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher)\l com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.routeOptions com.mapbox.api.directions.v5.models.RouteOptions \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) = \l  (r3 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher)\l com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.routeOptions com.mapbox.api.directions.v5.models.RouteOptions \l0x0007: INVOKE  (r0 I:java.util.List) = (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) com.mapbox.api.directions.v5.models.RouteOptions.coordinates():java.util.List type: VIRTUAL \l0x000b: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) = \l  (r3 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher)\l com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.routeOptions com.mapbox.api.directions.v5.models.RouteOptions \l0x0018: INVOKE  (r0 I:java.util.List) = (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) com.mapbox.api.directions.v5.models.RouteOptions.coordinates():java.util.List type: VIRTUAL \l0x001c: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0020: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l0x0021: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0025: CHECK_CAST  (r0 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r0 I:?[OBJECT, ARRAY]) \l0x0027: IGET  (r1 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteListener) = \l  (r3 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher)\l com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.listener com.mapbox.services.android.navigation.ui.v5.route.ViewRouteListener \l0x0029: INVOKE  \l  (r1 I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteListener)\l  (r0 I:com.mapbox.geojson.Point)\l com.mapbox.services.android.navigation.ui.v5.route.ViewRouteListener.onDestinationSet(com.mapbox.geojson.Point):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher.cacheRouteDestination((r3 'this' I:com.mapbox.services.android.navigation.ui.v5.route.ViewRouteFetcher A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

