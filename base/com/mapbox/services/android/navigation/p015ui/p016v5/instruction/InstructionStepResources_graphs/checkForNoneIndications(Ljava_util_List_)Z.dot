digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.checkForNoneIndications(Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 != null) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|java.util.Iterator r5 = r5.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|LOOP_START\lLOOP:0: B:4:0x0008\-\>B:15:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r5.hasNext() == false) goto L_0x0031\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|java.util.Iterator r1 = r5.next().indications().iterator()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|LOOP_START\lLOOP:1: B:7:0x001c\-\>B:10:0x002e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if (r1.hasNext() == false) goto L_0x0008\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x002e|LOOP_END\lLOOP:1: B:7:0x001c\-\>B:10:0x002e\l|if (r1.next().contains(\"none\") == false) goto L_0x001c\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|LOOP_END\lSYNTHETIC\lLOOP:0: B:4:0x0008\-\>B:15:0x0008\l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.checkForNoneIndications((r4v0 'this' com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.List\<com.mapbox.api.directions.v5.models.IntersectionLanes\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/IntersectionLanes;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_10 -> Node_14[style=dashed];
Node_13 -> Node_12;
Node_14 -> Node_11;
Node_15 -> Node_4;
}

