digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.map.MapWayname.isWaynameVisible(Lcom\/mapbox\/mapboxsdk\/style\/layers\/Layer;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:com.mapbox.mapboxsdk.style.layers.PropertyValue) = (r2 I:com.mapbox.mapboxsdk.style.layers.Layer) com.mapbox.mapboxsdk.style.layers.Layer.getVisibility():com.mapbox.mapboxsdk.style.layers.PropertyValue type: VIRTUAL \l0x0006: INVOKE  (r2 I:java.lang.Object) = (r2 I:com.mapbox.mapboxsdk.style.layers.PropertyValue) com.mapbox.mapboxsdk.style.layers.PropertyValue.getValue():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x000c: CONST_STR  (r0 I:java.lang.String) =  \"visible\" \l0x000e: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.CharSequence) java.lang.String.contentEquals(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.map.MapWayname.isWaynameVisible((r1 'this' I:com.mapbox.services.android.navigation.ui.v5.map.MapWayname A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.mapboxsdk.style.layers.Layer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
}

