digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.isValidStepDuration(Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;D)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r5 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.duration():double type: VIRTUAL \l0x0004: CONST  (r2 I:?[long, double]) = \l  (4629137466983448576(0x403e000000000000, double:30.0) ?[long, double])\l \l0x0006: CMP_G  (r5 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r5 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[long, double]) = \l  (4634626229029306368(0x4051800000000000, double:70.0) ?[long, double])\l \l0x000f: CMP_G  (r5 I:int) = (r6 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r5 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources.isValidStepDuration((r4 'this' I:com.mapbox.services.android.navigation.ui.v5.instruction.InstructionStepResources A[IMMUTABLE_TYPE, THIS]), (r5 I:com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

