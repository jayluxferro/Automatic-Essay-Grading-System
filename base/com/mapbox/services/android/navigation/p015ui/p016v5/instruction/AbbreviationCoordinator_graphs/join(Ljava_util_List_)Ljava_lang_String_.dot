digraph "CFG forcom.mapbox.services.android.navigation.ui.v5.instruction.AbbreviationCoordinator.join(Ljava\/util\/List;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\ljava.util.Iterator r4 = r4.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r4.hasNext() == false) goto L_0x003b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|com.mapbox.services.android.navigation.ui.v5.instruction.InstructionLoader$BannerComponentNode r1 = r4.next()\lr1.setStartIndex(r0.length())\lr0.append(r1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|LOOP_START\lLOOP:0: B:3:0x001f\-\>B:5:0x0025\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r4.hasNext() == false) goto L_0x003b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|LOOP_END\lLOOP:0: B:3:0x001f\-\>B:5:0x0025\l|r0.append(SINGLE_SPACE)\lcom.mapbox.services.android.navigation.ui.v5.instruction.InstructionLoader$BannerComponentNode r1 = r4.next()\lr1.setStartIndex(r0.length())\lr0.append(r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x003b}"];
Node_7 [shape=record,label="{7\:\ 0x003f|RETURN\l|return r0.toString()\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.lang.String com.mapbox.services.android.navigation.ui.v5.instruction.AbbreviationCoordinator.join((r3v0 'this' com.mapbox.services.android.navigation.ui.v5.instruction.AbbreviationCoordinator A[IMMUTABLE_TYPE, THIS]), (r4v0 java.util.List\<com.mapbox.services.android.navigation.ui.v5.instruction.InstructionLoader$BannerComponentNode\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/services\/android\/navigation\/ui\/v5\/instruction\/InstructionLoader$BannerComponentNode;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_6;
}

