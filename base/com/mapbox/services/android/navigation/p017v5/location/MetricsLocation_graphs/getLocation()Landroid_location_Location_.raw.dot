digraph "CFG forcom.mapbox.services.android.navigation.v5.location.MetricsLocation.getLocation()Landroid\/location\/Location;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.location.Location) = \l  (r3 I:com.mapbox.services.android.navigation.v5.location.MetricsLocation)\l com.mapbox.services.android.navigation.v5.location.MetricsLocation.location android.location.Location \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.location.Location) = \l  (r3 I:com.mapbox.services.android.navigation.v5.location.MetricsLocation)\l com.mapbox.services.android.navigation.v5.location.MetricsLocation.location android.location.Location \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r0 I:android.location.Location) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:android.location.Location) =  android.location.Location \l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"MetricsLocation\" \l0x000b: INVOKE  (r0 I:android.location.Location), (r1 I:java.lang.String) android.location.Location.\<init\>(java.lang.String):void type: DIRECT \l0x000e: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0010: INVOKE  (r0 I:android.location.Location), (r1 I:double) android.location.Location.setLatitude(double):void type: VIRTUAL \l0x0013: INVOKE  (r0 I:android.location.Location), (r1 I:double) android.location.Location.setLongitude(double):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r0 I:android.location.Location) \l}"];
MethodNode[shape=record,label="{public android.location.Location com.mapbox.services.android.navigation.v5.location.MetricsLocation.getLocation((r3 'this' I:com.mapbox.services.android.navigation.v5.location.MetricsLocation A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

