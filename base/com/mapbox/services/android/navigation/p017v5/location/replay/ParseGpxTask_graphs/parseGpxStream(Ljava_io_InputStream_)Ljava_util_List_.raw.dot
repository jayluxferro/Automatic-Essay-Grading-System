digraph "CFG forcom.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask.parseGpxStream(Ljava\/io\/InputStream;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:com.mapbox.services.android.navigation.v5.location.replay.GpxParser) = \l  (r2 I:com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask)\l com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask.parser com.mapbox.services.android.navigation.v5.location.replay.GpxParser A[Catch:\{ IOException \| ParseException \| ParserConfigurationException \| SAXException \-\> 0x000c \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.List) = \l  (r0 I:com.mapbox.services.android.navigation.v5.location.replay.GpxParser)\l  (r3 I:java.io.InputStream)\l com.mapbox.services.android.navigation.v5.location.replay.GpxParser.parseGpx(java.io.InputStream):java.util.List type: VIRTUAL A[Catch:\{ IOException \| ParseException \| ParserConfigurationException \| SAXException \-\> 0x000c \}]\l0x0005: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:java.util.List\<android.location.Location\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|ExcHandler: all null\lSplitter:B:7:0x000d\l|0x000a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|ExcHandler: IOException \| ParseException \| ParserConfigurationException \| SAXException null\lSplitter:B:0:0x0000\l|0x000c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|SYNTHETIC\lSplitter:B:7:0x000d\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000d\l|0x000d: INVOKE  (r0 I:java.lang.Exception) java.lang.Exception.printStackTrace():void type: VIRTUAL A[Catch:\{ all \-\> 0x000a \}, TRY_ENTER]\l0x0010: IGET  (r1 I:com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask$Listener) = \l  (r2 I:com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask)\l com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask.listener com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask$Listener A[Catch:\{ all \-\> 0x000a \}]\l0x0012: INVOKE  \l  (r1 I:com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask$Listener)\l  (r0 I:java.lang.Exception)\l com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask.Listener.onParseError(java.lang.Exception):void type: INTERFACE A[Catch:\{ all \-\> 0x000a \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: RETURN  (r0 I:java.util.List\<android.location.Location\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: INVOKE  (r3 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.util.List\<android.location.Location\> com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask.parseGpxStream((r2 'this' I:com.mapbox.services.android.navigation.v5.location.replay.ParseGpxTask A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/InputStream;, ), Ljava\/util\/List\<, Landroid\/location\/Location;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_4;
Node_8 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

