digraph "CFG forcom.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter.sliceRoute(Lcom\/mapbox\/geojson\/LineString;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = com.mapbox.turf.TurfMeasurement.length(r8, com.mapbox.turf.TurfConstants.UNIT_METERS)\lr2 = 0.0d\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if ((r0 \> 0.0d ? 1 : (r0 == 0.0d ? 0 : \-1)) \> 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x0010|RETURN\l|return java.util.Collections.emptyList()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|java.util.ArrayList r4 = new java.util.ArrayList()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_START\lPHI: r2 \l  PHI: (r2v1 double) = (r2v0 double), (r2v2 double) binds: [B:4:0x0011, B:7:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0016\-\>B:7:0x001a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if ((r2 \> r0 ? 1 : (r2 == r0 ? 0 : \-1)) \>= 0) goto L_0x0027\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|LOOP_END\lLOOP:0: B:5:0x0016\-\>B:7:0x001a\l|r4.add(com.mapbox.turf.TurfMeasurement.along(r8, r2, com.mapbox.turf.TurfConstants.UNIT_METERS))\ldouble r2 = r2 + r7.distance\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|RETURN\l|return r4\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.util.List\<com.mapbox.geojson.Point\> com.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter.sliceRoute((r7v0 'this' com.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter A[IMMUTABLE_TYPE, THIS]), (r8v0 com.mapbox.geojson.LineString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/geojson\/LineString;, ), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_5;
Node_9 -> Node_8;
}

