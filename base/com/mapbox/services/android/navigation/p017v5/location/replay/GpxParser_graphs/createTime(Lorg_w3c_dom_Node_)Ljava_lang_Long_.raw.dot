digraph "CFG forcom.mapbox.services.android.navigation.v5.location.replay.GpxParser.createTime(Lorg\/w3c\/dom\/Node;)Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.text.SimpleDateFormat) = \l  (r4 I:com.mapbox.services.android.navigation.v5.location.replay.GpxParser)\l com.mapbox.services.android.navigation.v5.location.replay.GpxParser.dateFormat java.text.SimpleDateFormat \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"UTC\" \l0x0004: INVOKE  (r1 I:java.util.TimeZone) = (r1 I:java.lang.String) java.util.TimeZone.getTimeZone(java.lang.String):java.util.TimeZone type: STATIC \l0x0008: INVOKE  \l  (r0 I:java.text.SimpleDateFormat)\l  (r1 I:java.util.TimeZone)\l java.text.SimpleDateFormat.setTimeZone(java.util.TimeZone):void type: VIRTUAL \l0x000b: INVOKE  (r5 I:org.w3c.dom.NodeList) = (r5 I:org.w3c.dom.Node) org.w3c.dom.Node.getChildNodes():org.w3c.dom.NodeList type: INTERFACE \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: INVOKE  (r1 I:int) = (r5 I:org.w3c.dom.NodeList) org.w3c.dom.NodeList.getLength():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x003c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r1 I:org.w3c.dom.Node) = (r5 I:org.w3c.dom.NodeList), (r0 I:int) org.w3c.dom.NodeList.item(int):org.w3c.dom.Node type: INTERFACE \l0x001a: INVOKE  (r2 I:java.lang.String) = (r1 I:org.w3c.dom.Node) org.w3c.dom.Node.getNodeName():java.lang.String type: INTERFACE \l0x001e: CONST_STR  (r3 I:java.lang.String) =  \"time\" \l0x0020: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0039 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IGET  (r5 I:java.text.SimpleDateFormat) = \l  (r4 I:com.mapbox.services.android.navigation.v5.location.replay.GpxParser)\l com.mapbox.services.android.navigation.v5.location.replay.GpxParser.dateFormat java.text.SimpleDateFormat \l0x0028: INVOKE  (r0 I:java.lang.String) = (r1 I:org.w3c.dom.Node) org.w3c.dom.Node.getTextContent():java.lang.String type: INTERFACE \l0x002c: INVOKE  (r5 I:java.util.Date) = (r5 I:java.text.SimpleDateFormat), (r0 I:java.lang.String) java.text.SimpleDateFormat.parse(java.lang.String):java.util.Date type: VIRTUAL \l0x0030: INVOKE  (r0 I:long) = (r5 I:java.util.Date) java.util.Date.getTime():long type: VIRTUAL \l0x0034: INVOKE  (r5 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: RETURN  (r5 I:java.lang.Long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x003e: INVOKE  (r5 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|0x0042: RETURN  (r5 I:java.lang.Long) \l}"];
MethodNode[shape=record,label="{private java.lang.Long com.mapbox.services.android.navigation.v5.location.replay.GpxParser.createTime((r4 'this' I:com.mapbox.services.android.navigation.v5.location.replay.GpxParser A[IMMUTABLE_TYPE, THIS]), (r5 I:org.w3c.dom.Node A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.text.ParseException]\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_1;
Node_8 -> Node_9;
}

