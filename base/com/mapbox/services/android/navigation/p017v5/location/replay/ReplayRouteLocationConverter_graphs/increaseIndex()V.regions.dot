digraph "CFG forcom.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter.increaseIndex()V" {
subgraph cluster_Region_1728017659 {
label = "R(1:(1:2)(1:(1:5)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_526794068 {
label = "IF [B:1:0x001a] THEN: R(1:2) ELSE: R(1:(1:5)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001a|if (r3.currentStep \< (r3.route.legs().get(r3.currentLeg).steps().size() \- 1)) goto L_0x001c\l}"];
subgraph cluster_Region_1545501001 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001c|r3.currentStep++\l}"];
}
subgraph cluster_Region_1751927436 {
label = "R(1:(1:5)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1965663190 {
label = "IF [B:4:0x0031] THEN: R(1:5) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0031|if (r3.currentLeg \< (r3.route.legs().size() \- 1)) goto L_0x0033\l}"];
subgraph cluster_Region_1527491770 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0033|r3.currentLeg++\lr3.currentStep = 0\l}"];
}
subgraph cluster_Region_1961902755 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0023}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter.increaseIndex((r3v0 'this' com.mapbox.services.android.navigation.v5.location.replay.ReplayRouteLocationConverter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

