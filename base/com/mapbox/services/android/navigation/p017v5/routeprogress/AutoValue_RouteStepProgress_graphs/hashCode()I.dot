digraph "CFG forcom.mapbox.services.android.navigation.v5.routeprogress.AutoValue_RouteStepProgress.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (((((((((((((int) ((java.lang.Double.doubleToLongBits(r7.distanceRemaining) \>\>\> 32) ^ java.lang.Double.doubleToLongBits(r7.distanceRemaining))) ^ 1000003) * 1000003) ^ ((int) ((java.lang.Double.doubleToLongBits(r7.distanceTraveled) \>\>\> 32) ^ java.lang.Double.doubleToLongBits(r7.distanceTraveled)))) * 1000003) ^ java.lang.Float.floatToIntBits(r7.fractionTraveled)) * 1000003) ^ ((int) ((java.lang.Double.doubleToLongBits(r7.durationRemaining) \>\>\> 32) ^ java.lang.Double.doubleToLongBits(r7.durationRemaining)))) * 1000003) ^ r7.intersections.hashCode()) * 1000003) ^ r7.currentIntersection.hashCode()) * 1000003\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x005a|if (r7.upcomingIntersection != null) goto L_0x005e\l}"];
Node_2 [shape=record,label="{2\:\ 0x005c|r2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x005e|int r2 = r7.upcomingIntersection.hashCode()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0064|PHI: r2 \l  PHI: (r2v9 int) = (r2v15 int), (r2v16 int) binds: [B:3:0x005e, B:2:0x005c] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (((((r0 ^ r2) * 1000003) ^ r7.intersectionDistancesAlongStep.hashCode()) * 1000003) ^ r7.step.hashCode()) * 1000003\l}"];
Node_5 [shape=record,label="{5\:\ 0x007b|if (r7.nextStep != null) goto L_0x007e\l}"];
Node_6 [shape=record,label="{6\:\ 0x007e|int r3 = r7.nextStep.hashCode()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0084|PHI: r3 \l  PHI: (r3v12 int) = (r3v11 int), (r3v13 int) binds: [B:5:0x007b, B:6:0x007e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0085|RETURN\l|return r0 ^ r3\l}"];
MethodNode[shape=record,label="{public int com.mapbox.services.android.navigation.v5.routeprogress.AutoValue_RouteStepProgress.hashCode((r7v0 'this' com.mapbox.services.android.navigation.v5.routeprogress.AutoValue_RouteStepProgress A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
}

