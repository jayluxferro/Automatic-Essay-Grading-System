digraph "CFG forcom.mapbox.services.android.navigation.v5.routeprogress.MetricsRouteProgress.obtainRouteData(Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r3.distance() == null) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|int r0 = r3.distance().intValue()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|r0 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|PHI: r0 \l  PHI: (r0v1 int) = (r0v9 int), (r0v11 int) binds: [B:3:0x0010, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|r2.directionsRouteDistance = r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r3.duration() == null) goto L_0x0021\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|int r1 = r3.duration().intValue()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:5:0x0017, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|r2.directionsRouteDuration = r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|if (hasRouteProfile(r3) == false) goto L_0x0032\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|java.lang.String r0 = r3.routeOptions().profile()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|java.lang.String r0 = \"\"\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|PHI: r0 \l  PHI: (r0v4 java.lang.String) = (r0v5 java.lang.String), (r0v7 java.lang.String) binds: [B:10:0x0032, B:9:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|r2.directionsRouteProfile = r0\lr2.directionsRouteDestination = retrieveRouteDestination(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.v5.routeprogress.MetricsRouteProgress.obtainRouteData((r2v0 'this' com.mapbox.services.android.navigation.v5.routeprogress.MetricsRouteProgress A[IMMUTABLE_TYPE, THIS]), (r3v0 com.mapbox.api.directions.v5.models.DirectionsRoute A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

