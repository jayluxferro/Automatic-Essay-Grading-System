digraph "CFG forcom.mapbox.services.android.navigation.v5.snap.SnapToRoute.snapLocationBearing(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress r7 = r7.currentLegProgress()\lcom.mapbox.services.android.navigation.v5.routeprogress.RouteStepProgress r0 = r7.currentStepProgress()\ldouble r1 = r0.distanceTraveled()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if ((r0.distanceRemaining() \> 0.0d ? 1 : (r0.distanceRemaining() == 0.0d ? 0 : \-1)) != 0) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v6 boolean), (r0v7 boolean) binds: [B:3:0x0018, B:2:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|r3 = 1.0d\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|if (r0 == false) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|double r3 = 1.0d + r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|PHI: r3 \l  PHI: (r3v2 double) = (r3v1 double), (r3v5 double) binds: [B:5:0x001b, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|com.mapbox.geojson.LineString r0 = createUpcomingLineString(r7, r0)\lcom.mapbox.geojson.LineString r7 = createCurrentLineString(r7)\lcom.mapbox.geojson.Point r0 = createFuturePoint(r3, r0, r7)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|RETURN\l|return (float) com.mapbox.services.android.navigation.p017v5.utils.MathUtils.wrap(com.mapbox.turf.TurfMeasurement.bearing(com.mapbox.turf.TurfMeasurement.along(r7, r1, com.mapbox.turf.TurfConstants.UNIT_METERS), r0), 0.0d, 360.0d)\l}"];
MethodNode[shape=record,label="{private static float com.mapbox.services.android.navigation.v5.snap.SnapToRoute.snapLocationBearing((r7v0 com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
}

