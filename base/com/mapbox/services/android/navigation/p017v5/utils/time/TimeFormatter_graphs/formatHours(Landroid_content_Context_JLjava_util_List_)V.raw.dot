digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.time.TimeFormatter.formatHours(Landroid\/content\/Context;JLjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r0 I:int) = (r6 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \" %s \" \l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: SGET  (r4 I:int) =  com.mapbox.services.android.navigation.R.string.hr int \l0x000e: INVOKE  (r5 I:java.lang.String) = (r5 I:android.content.Context), (r4 I:int) android.content.Context.getString(int):java.lang.String type: VIRTUAL \l0x0012: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0014: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.String), (r2 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0018: NEW_INSTANCE  (r0 I:com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem) =  com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem \l0x001a: NEW_INSTANCE  (r2 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x001c: INVOKE  (r2 I:android.text.style.StyleSpan), (r1 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x001f: INVOKE  (r6 I:java.lang.String) = (r6 I:long) java.lang.String.valueOf(long):java.lang.String type: STATIC \l0x0023: INVOKE  \l  (r0 I:com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem)\l  (r2 I:java.lang.Object)\l  (r6 I:java.lang.String)\l com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem.\<init\>(java.lang.Object, java.lang.String):void type: DIRECT \l0x0026: INVOKE  (r8 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0029: NEW_INSTANCE  (r6 I:com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem) =  com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem \l0x002b: NEW_INSTANCE  (r7 I:android.text.style.RelativeSizeSpan) =  android.text.style.RelativeSizeSpan \l0x002d: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x002f: INVOKE  (r7 I:android.text.style.RelativeSizeSpan), (r0 I:float) android.text.style.RelativeSizeSpan.\<init\>(float):void type: DIRECT \l0x0032: INVOKE  \l  (r6 I:com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem)\l  (r7 I:java.lang.Object)\l  (r5 I:java.lang.String)\l com.mapbox.services.android.navigation.v5.utils.span.TextSpanItem.\<init\>(java.lang.Object, java.lang.String):void type: DIRECT \l0x0035: INVOKE  (r8 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0038|0x0038: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.mapbox.services.android.navigation.v5.utils.time.TimeFormatter.formatHours((r5 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<com.mapbox.services.android.navigation.v5.utils.span.SpanItem\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/content\/Context;, J, Ljava\/util\/List\<, Lcom\/mapbox\/services\/android\/navigation\/v5\/utils\/span\/SpanItem;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

