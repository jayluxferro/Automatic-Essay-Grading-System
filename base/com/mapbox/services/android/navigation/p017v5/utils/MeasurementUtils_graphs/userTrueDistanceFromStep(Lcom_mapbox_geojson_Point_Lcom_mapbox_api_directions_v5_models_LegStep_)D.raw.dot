digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.MeasurementUtils.userTrueDistanceFromStep(Lcom\/mapbox\/geojson\/Point;Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r7 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.geometry():java.lang.String type: VIRTUAL \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.CharSequence) com.mapbox.core.utils.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l0x0008: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r1 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r7 I:java.lang.String) = (r7 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.geometry():java.lang.String type: VIRTUAL \l0x0011: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0012: INVOKE  (r7 I:com.mapbox.geojson.LineString) = (r7 I:java.lang.String), (r0 I:int) com.mapbox.geojson.LineString.fromPolyline(java.lang.String, int):com.mapbox.geojson.LineString type: STATIC \l0x0016: INVOKE  (r0 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x001a: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0091 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  (r0 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0024: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0029: INVOKE  (r0 I:boolean) = (r6 I:java.lang.Object), (r0 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: INVOKE  (r0 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0034: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0038: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004c \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: INVOKE  (r7 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x003f: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0043: CHECK_CAST  (r7 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r7 I:?[OBJECT, ARRAY]) \l0x0045: CONST_STR  (r0 I:java.lang.String) =  \"meters\" \l0x0047: INVOKE  (r6 I:double) = \l  (r6 I:com.mapbox.geojson.Point)\l  (r7 I:com.mapbox.geojson.Point)\l  (r0 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.distance(com.mapbox.geojson.Point, com.mapbox.geojson.Point, java.lang.String):double type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: RETURN  (r6 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: INVOKE  (r0 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0050: INVOKE  (r0 I:com.mapbox.geojson.Feature) = (r6 I:com.mapbox.geojson.Point), (r0 I:java.util.List) com.mapbox.turf.TurfMisc.nearestPointOnLine(com.mapbox.geojson.Point, java.util.List):com.mapbox.geojson.Feature type: STATIC \l0x0054: INVOKE  (r0 I:com.mapbox.geojson.Geometry) = (r0 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x0058: CHECK_CAST  (r0 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005d \l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|0x005c: RETURN  (r1 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005d|0x005d: INVOKE  (r4 I:double) = (r0 I:com.mapbox.geojson.Point) com.mapbox.geojson.Point.latitude():double type: VIRTUAL \l0x0061: INVOKE  (r4 I:boolean) = (r4 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0080 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: INVOKE  (r4 I:double) = (r0 I:com.mapbox.geojson.Point) com.mapbox.geojson.Point.longitude():double type: VIRTUAL \l0x006b: INVOKE  (r4 I:boolean) = (r4 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x006f|0x006f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0072 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0072|0x0072: CONST_STR  (r7 I:java.lang.String) =  \"meters\" \l0x0074: INVOKE  (r6 I:double) = \l  (r6 I:com.mapbox.geojson.Point)\l  (r0 I:com.mapbox.geojson.Point)\l  (r7 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.distance(com.mapbox.geojson.Point, com.mapbox.geojson.Point, java.lang.String):double type: STATIC \l0x0078: INVOKE  (r0 I:boolean) = (r6 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x007c|0x007c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007f \l}"];
Node_22 [shape=record,label="{22\:\ 0x007e|0x007e: MOVE  (r6 I:?[long, double]) = (r1 I:?[long, double]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007f|0x007f: RETURN  (r6 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0080|0x0080: INVOKE  (r7 I:java.util.List) = (r7 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0084: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0088: CHECK_CAST  (r7 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r7 I:?[OBJECT, ARRAY]) \l0x008a: CONST_STR  (r0 I:java.lang.String) =  \"meters\" \l0x008c: INVOKE  (r6 I:double) = \l  (r6 I:com.mapbox.geojson.Point)\l  (r7 I:com.mapbox.geojson.Point)\l  (r0 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.distance(com.mapbox.geojson.Point, com.mapbox.geojson.Point, java.lang.String):double type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0090|0x0090: RETURN  (r6 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0091|0x0091: RETURN  (r1 I:double) \l}"];
MethodNode[shape=record,label="{public static double com.mapbox.services.android.navigation.v5.utils.MeasurementUtils.userTrueDistanceFromStep((r6 I:com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_26[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_24[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

