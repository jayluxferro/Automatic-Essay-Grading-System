digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.RouteUtils.hasValidInstructions(Ljava\/util\/List;Lcom\/mapbox\/api\/directions\/v5\/models\/BannerInstructions;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r1 I:boolean) = (r1 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.v5.utils.RouteUtils.hasValidInstructions((r0 'this' I:com.mapbox.services.android.navigation.v5.utils.RouteUtils A[IMMUTABLE_TYPE, THIS]), (r1 I:java.util.List\<com.mapbox.api.directions.v5.models.BannerInstructions\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:com.mapbox.api.directions.v5.models.BannerInstructions A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/BannerInstructions;, \>;, Lcom\/mapbox\/api\/directions\/v5\/models\/BannerInstructions;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

