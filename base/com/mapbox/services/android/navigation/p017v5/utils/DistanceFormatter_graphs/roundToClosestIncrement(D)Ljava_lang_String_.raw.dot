digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundToClosestIncrement(D)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:long) = (r1 I:double) java.lang.Math.round(double):long type: STATIC \l0x0004: CAST  (r1 I:int) = (int) (r1 I:long) \l0x0005: IGET  (r2 I:int) = \l  (r0 I:com.mapbox.services.android.navigation.v5.utils.DistanceFormatter)\l com.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundingIncrement int \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \/ (r2 I:int) \l0x0008: IGET  (r2 I:int) = \l  (r0 I:com.mapbox.services.android.navigation.v5.utils.DistanceFormatter)\l com.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundingIncrement int \l0x000a: ARITH  (r1 I:int) = (r1 I:int) * (r2 I:int) \l0x000c: IGET  (r2 I:int) = \l  (r0 I:com.mapbox.services.android.navigation.v5.utils.DistanceFormatter)\l com.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundingIncrement int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r1 I:int) = \l  (r0 I:com.mapbox.services.android.navigation.v5.utils.DistanceFormatter)\l com.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundingIncrement int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r1 I:java.lang.String) = (r1 I:int) java.lang.String.valueOf(int):java.lang.String type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String com.mapbox.services.android.navigation.v5.utils.DistanceFormatter.roundToClosestIncrement((r0 'this' I:com.mapbox.services.android.navigation.v5.utils.DistanceFormatter A[IMMUTABLE_TYPE, THIS]), (r1 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

