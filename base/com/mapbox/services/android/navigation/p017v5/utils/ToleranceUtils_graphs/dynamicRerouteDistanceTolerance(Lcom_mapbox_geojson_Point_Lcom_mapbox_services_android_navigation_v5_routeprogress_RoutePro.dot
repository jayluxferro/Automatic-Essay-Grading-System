digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.ToleranceUtils.dynamicRerouteDistanceTolerance(Lcom\/mapbox\/geojson\/Point;Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r6 = r6.currentLegProgress().currentStepProgress().intersections()\ljava.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.Iterator r6 = r6.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|LOOP_START\lLOOP:0: B:1:0x0015\-\>B:3:0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|if (r6.hasNext() == false) goto L_0x0029\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|LOOP_END\lLOOP:0: B:1:0x0015\-\>B:3:0x001b\l|r0.add(r6.next().location())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|com.mapbox.geojson.Point r6 = com.mapbox.turf.TurfClassification.nearestPoint(r5, r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|if (r6.equals(r5) == false) goto L_0x0036\l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|RETURN\l|return 50.0d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036}"];
Node_8 [shape=record,label="{8\:\ 0x0040|if ((com.mapbox.turf.TurfMeasurement.distance(r5, r6, com.mapbox.turf.TurfConstants.UNIT_METERS) \> 40.0d ? 1 : (com.mapbox.turf.TurfMeasurement.distance(r5, r6, com.mapbox.turf.TurfConstants.UNIT_METERS) == 40.0d ? 0 : \-1)) \> 0) goto L_0x0045\l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|RETURN\l|return 25.0d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|RETURN\l|return 50.0d\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static double com.mapbox.services.android.navigation.v5.utils.ToleranceUtils.dynamicRerouteDistanceTolerance((r5v0 com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_11 -> Node_4;
}

