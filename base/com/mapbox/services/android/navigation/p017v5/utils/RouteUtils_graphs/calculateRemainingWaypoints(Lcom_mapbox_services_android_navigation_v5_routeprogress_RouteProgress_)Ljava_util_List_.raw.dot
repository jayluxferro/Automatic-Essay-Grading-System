digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.RouteUtils.calculateRemainingWaypoints(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.mapbox.api.directions.v5.models.DirectionsRoute) = \l  (r4 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress.directionsRoute():com.mapbox.api.directions.v5.models.DirectionsRoute type: VIRTUAL \l0x0004: INVOKE  (r0 I:com.mapbox.api.directions.v5.models.RouteOptions) = (r0 I:com.mapbox.api.directions.v5.models.DirectionsRoute) com.mapbox.api.directions.v5.models.DirectionsRoute.routeOptions():com.mapbox.api.directions.v5.models.RouteOptions type: VIRTUAL \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r1 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x000e: INVOKE  (r2 I:com.mapbox.api.directions.v5.models.DirectionsRoute) = \l  (r4 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress.directionsRoute():com.mapbox.api.directions.v5.models.DirectionsRoute type: VIRTUAL \l0x0012: INVOKE  (r2 I:com.mapbox.api.directions.v5.models.RouteOptions) = (r2 I:com.mapbox.api.directions.v5.models.DirectionsRoute) com.mapbox.api.directions.v5.models.DirectionsRoute.routeOptions():com.mapbox.api.directions.v5.models.RouteOptions type: VIRTUAL \l0x0016: INVOKE  (r2 I:java.util.List) = (r2 I:com.mapbox.api.directions.v5.models.RouteOptions) com.mapbox.api.directions.v5.models.RouteOptions.coordinates():java.util.List type: VIRTUAL \l0x001a: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x001d: INVOKE  (r2 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0021: INVOKE  (r4 I:int) = \l  (r4 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress.remainingWaypoints():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:6:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: RETURN  (r1 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: ARITH  (r4 I:int) = (r2 I:int) \- (r4 I:int) \l0x002a: INVOKE  (r4 I:java.util.List) = (r0 I:java.util.List), (r4 I:int), (r2 I:int) java.util.List.subList(int, int):java.util.List type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: RETURN  (r4 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
MethodNode[shape=record,label="{public java.util.List\<com.mapbox.geojson.Point\> com.mapbox.services.android.navigation.v5.utils.RouteUtils.calculateRemainingWaypoints((r3 'this' I:com.mapbox.services.android.navigation.v5.utils.RouteUtils A[IMMUTABLE_TYPE, THIS]), (r4 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;, ), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
}

