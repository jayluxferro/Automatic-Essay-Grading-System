digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.MathUtils.convertNativeBearing(D)D" {
subgraph cluster_Region_1302075144 {
label = "R(4:0|(1:3)|(1:6)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double double r4 = \-r4\l}"];
subgraph cluster_LoopRegion_385137962 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r4 \> 360.0d) goto L_0x000a\l}"];
subgraph cluster_Region_800808788 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:3:0x000a\l|r4 \-= 360.0d\l}"];
}
}
subgraph cluster_LoopRegion_1006492843 {
label = "LOOP:1: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r4 \< 0.0d) goto L_0x0012\l}"];
subgraph cluster_Region_204886819 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|LOOP_END\lLOOP:1: B:4:0x000c\-\>B:6:0x0012\l|r4 += 360.0d\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|return r4\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r4 \l  PHI: (r4v2 double) = (r4v1 double), (r4v5 double) binds: [B:0:0x0000, B:3:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:3:0x000a\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c|LOOP_START\lPHI: r4 \l  PHI: (r4v3 double) = (r4v2 double), (r4v4 double) binds: [B:8:0x000c, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x000c\-\>B:6:0x0012\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000c|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static double com.mapbox.services.android.navigation.v5.utils.MathUtils.convertNativeBearing((r4v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_1;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_4;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_8 -> Node_4;
Node_9 -> Node_7;
}

