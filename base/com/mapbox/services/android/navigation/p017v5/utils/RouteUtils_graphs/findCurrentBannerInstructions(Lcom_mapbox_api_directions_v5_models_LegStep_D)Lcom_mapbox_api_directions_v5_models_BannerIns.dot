digraph "CFG forcom.mapbox.services.android.navigation.v5.utils.RouteUtils.findCurrentBannerInstructions(Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;D)Lcom\/mapbox\/api\/directions\/v5\/models\/BannerInstructions;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isValidBannerInstructions(r5) == false) goto L_0x002f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.util.List r5 = sortBannerInstructions(r5.bannerInstructions())\ljava.util.Iterator r0 = r5.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|LOOP_START\lLOOP:0: B:3:0x0012\-\>B:6:0x0024\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (r0.hasNext() == false) goto L_0x0027\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|com.mapbox.api.directions.v5.models.BannerInstructions r1 = r0.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|LOOP_END\lLOOP:0: B:3:0x0012\-\>B:6:0x0024\l|if ((r1.distanceAlongGeometry() \> r6 ? 1 : (r1.distanceAlongGeometry() == r6 ? 0 : \-1)) \< 0) goto L_0x0012\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|RETURN\l|return r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027}"];
Node_9 [shape=record,label="{9\:\ 0x002e|RETURN\l|return r5.get(0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public com.mapbox.api.directions.v5.models.BannerInstructions com.mapbox.services.android.navigation.v5.utils.RouteUtils.findCurrentBannerInstructions((r4v0 'this' com.mapbox.services.android.navigation.v5.utils.RouteUtils A[IMMUTABLE_TYPE, THIS]), (r5v0 com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_11 -> Node_7;
Node_12 -> Node_8;
}

