digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.NavigationHelper.buildSnappedLocation(Lcom\/mapbox\/services\/android\/navigation\/v5\/navigation\/MapboxNavigation;ZLandroid\/location\/Location;Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;Z)Landroid\/location\/Location;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:android.location.Location) = \l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation)\l  (r2 I:android.location.Location)\l  (r3 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.navigation.NavigationHelper.getSnappedLocation(com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation, android.location.Location, com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress):android.location.Location type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r2 I:android.location.Location) \l}"];
MethodNode[shape=record,label="{static android.location.Location com.mapbox.services.android.navigation.v5.navigation.NavigationHelper.buildSnappedLocation((r0 I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.location.Location A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

