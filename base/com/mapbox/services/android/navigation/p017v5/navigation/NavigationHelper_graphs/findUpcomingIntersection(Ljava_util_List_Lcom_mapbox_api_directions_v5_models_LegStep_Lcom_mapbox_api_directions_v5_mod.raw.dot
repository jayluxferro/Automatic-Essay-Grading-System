digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.NavigationHelper.findUpcomingIntersection(Ljava\/util\/List;Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;)Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:int) = (r3 I:java.util.List), (r5 I:java.lang.Object) java.util.List.indexOf(java.lang.Object):int type: INTERFACE \l0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: ARITH  (r5 I:int) = (r5 I:int) + (r0 I:int) \l0x0006: INVOKE  (r1 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r5 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r3 I:com.mapbox.api.directions.v5.models.StepIntersection) = (com.mapbox.api.directions.v5.models.StepIntersection) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r3 I:com.mapbox.api.directions.v5.models.StepIntersection) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r3 I:java.util.List) = (r4 I:com.mapbox.api.directions.v5.models.LegStep) com.mapbox.api.directions.v5.models.LegStep.intersections():java.util.List type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INVOKE  (r4 I:boolean) = (r3 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r3 I:com.mapbox.api.directions.v5.models.StepIntersection) = (com.mapbox.api.directions.v5.models.StepIntersection) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: RETURN  (r3 I:com.mapbox.api.directions.v5.models.StepIntersection) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: RETURN  (r3 I:com.mapbox.api.directions.v5.models.StepIntersection) \l}"];
MethodNode[shape=record,label="{public static com.mapbox.api.directions.v5.models.StepIntersection com.mapbox.services.android.navigation.v5.navigation.NavigationHelper.findUpcomingIntersection((r3 I:java.util.List\<com.mapbox.api.directions.v5.models.StepIntersection\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.mapbox.api.directions.v5.models.StepIntersection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;, \>;, Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;, Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;, ), Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

