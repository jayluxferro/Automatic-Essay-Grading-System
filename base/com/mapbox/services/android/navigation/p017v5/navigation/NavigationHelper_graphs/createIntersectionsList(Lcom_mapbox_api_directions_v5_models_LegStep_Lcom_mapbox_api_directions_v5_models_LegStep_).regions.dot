digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.NavigationHelper.createIntersectionsList(Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;)Ljava\/util\/List;" {
subgraph cluster_Region_1119355884 {
label = "R(3:0|(1:4)|5)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\lr0.addAll(r1.intersections())\l}"];
subgraph cluster_IfRegion_930837742 {
label = "IF [B:1:0x000c, B:3:0x0016] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|ADDED_TO_REGION\l|if (r2 != null) goto L_0x000e\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|ADDED_TO_REGION\l|if (r2.intersections().isEmpty() == false) goto L_0x0018\l}"];
subgraph cluster_Region_733511105 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0018|r0.add(r2.intersections().get(0))\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0024|RETURN\l|return r0\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
MethodNode[shape=record,label="{public static java.util.List\<com.mapbox.api.directions.v5.models.StepIntersection\> com.mapbox.services.android.navigation.v5.navigation.NavigationHelper.createIntersectionsList((r1v0 com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 com.mapbox.api.directions.v5.models.LegStep A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;, Lcom\/mapbox\/api\/directions\/v5\/models\/LegStep;, ), Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/StepIntersection;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_2 -> Node_3;
}

