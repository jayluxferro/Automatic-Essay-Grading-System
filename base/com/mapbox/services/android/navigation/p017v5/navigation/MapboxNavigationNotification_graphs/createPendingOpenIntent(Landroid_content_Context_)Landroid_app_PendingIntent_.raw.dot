digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.MapboxNavigationNotification.createPendingOpenIntent(Landroid\/content\/Context;)Landroid\/app\/PendingIntent;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.content.pm.PackageManager) = (r3 I:android.content.Context) android.content.Context.getPackageManager():android.content.pm.PackageManager type: VIRTUAL \l0x0004: INVOKE  (r1 I:java.lang.String) = (r3 I:android.content.Context) android.content.Context.getPackageName():java.lang.String type: VIRTUAL \l0x0008: INVOKE  (r0 I:android.content.Intent) = \l  (r0 I:android.content.pm.PackageManager)\l  (r1 I:java.lang.String)\l android.content.pm.PackageManager.getLaunchIntentForPackage(java.lang.String):android.content.Intent type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r0 I:android.content.Intent), (r1 I:java.lang.String) android.content.Intent.setPackage(java.lang.String):android.content.Intent type: VIRTUAL \l0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INVOKE  (r3 I:android.app.PendingIntent) = \l  (r3 I:android.content.Context)\l  (r1 I:int)\l  (r0 I:android.content.Intent)\l  (r1 I:int)\l android.app.PendingIntent.getActivity(android.content.Context, int, android.content.Intent, int):android.app.PendingIntent type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN  (r3 I:android.app.PendingIntent) \l}"];
MethodNode[shape=record,label="{private android.app.PendingIntent com.mapbox.services.android.navigation.v5.navigation.MapboxNavigationNotification.createPendingOpenIntent((r2 'this' I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigationNotification A[IMMUTABLE_TYPE, THIS]), (r3 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

