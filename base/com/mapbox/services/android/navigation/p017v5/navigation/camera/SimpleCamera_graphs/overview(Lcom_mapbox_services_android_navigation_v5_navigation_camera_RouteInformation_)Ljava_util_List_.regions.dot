digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera.overview(Lcom\/mapbox\/services\/android\/navigation\/v5\/navigation\/camera\/RouteInformation;)Ljava\/util\/List;" {
subgraph cluster_Region_601283888 {
label = "R(2:(1:7)|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_377566490 {
label = "IF [B:6:0x0010] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|PHI: r0 \l  PHI: (r0v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r1.routeCoordinates == null \|\| r1.routeCoordinates.isEmpty()) == true) goto L_0x0012\l}"];
subgraph cluster_Region_233664640 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0012|buildRouteCoordinatesFromRouteData(r2)\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x0017|RETURN\l|return r1.routeCoordinates\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015}"];
MethodNode[shape=record,label="{public java.util.List\<com.mapbox.geojson.Point\> com.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera.overview((r1v0 'this' com.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera A[IMMUTABLE_TYPE, THIS]), (r2v0 com.mapbox.services.android.navigation.v5.navigation.camera.RouteInformation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/services\/android\/navigation\/v5\/navigation\/camera\/RouteInformation;, ), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_8 -> Node_9;
}

