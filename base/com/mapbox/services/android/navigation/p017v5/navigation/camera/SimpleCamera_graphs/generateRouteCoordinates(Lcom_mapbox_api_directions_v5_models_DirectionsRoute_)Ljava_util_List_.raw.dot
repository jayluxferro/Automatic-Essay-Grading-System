digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera.generateRouteCoordinates(Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r2 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.String) = (r2 I:com.mapbox.api.directions.v5.models.DirectionsRoute) com.mapbox.api.directions.v5.models.DirectionsRoute.geometry():java.lang.String type: VIRTUAL \l0x000b: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x000c: INVOKE  (r2 I:com.mapbox.geojson.LineString) = (r2 I:java.lang.String), (r0 I:int) com.mapbox.geojson.LineString.fromPolyline(java.lang.String, int):com.mapbox.geojson.LineString type: STATIC \l0x0010: INVOKE  (r2 I:java.util.List) = (r2 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN  (r2 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
MethodNode[shape=record,label="{private java.util.List\<com.mapbox.geojson.Point\> com.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera.generateRouteCoordinates((r1 'this' I:com.mapbox.services.android.navigation.v5.navigation.camera.SimpleCamera A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.api.directions.v5.models.DirectionsRoute A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;, ), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

