digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.NavigationTelemetry.createLocationListBeforeEvent(Ljava\/util\/Date;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r0 = java.util.Arrays.asList((android.location.Location[]) r6.locationBuffer.toArray(new android.location.Location[r6.locationBuffer.size()]))\ljava.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r0 = r0.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|LOOP_START\lLOOP:0: B:1:0x001d\-\>B:7:0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|if (r0.hasNext() == false) goto L_0x003c\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|android.location.Location r2 = (android.location.Location) r0.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|if (new java.util.Date(r2.getTime()).before(r7) == false) goto L_0x001d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0038|r1.add(r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x003c|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x001d\-\>B:7:0x001d\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<android.location.Location\> com.mapbox.services.android.navigation.v5.navigation.NavigationTelemetry.createLocationListBeforeEvent((r6v0 'this' com.mapbox.services.android.navigation.v5.navigation.NavigationTelemetry A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.Date A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Date;, ), Ljava\/util\/List\<, Landroid\/location\/Location;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_10;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

