digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader.cacheInstructions(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.util.List) = \l  (r1 I:com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader)\l  (r2 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader.getNextInstructions(com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress):java.util.List type: DIRECT \l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  \l  (r1 I:com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader)\l  (r2 I:java.util.List)\l  (r0 I:int)\l com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader.cacheUpToNthInstruction(java.util.List, int):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  \l  (r1 I:com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader)\l  (r2 I:java.util.List)\l  (r0 I:int)\l com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader.cacheNthInstruction(java.util.List, int):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader.cacheInstructions((r1 'this' I:com.mapbox.services.android.navigation.v5.navigation.VoiceInstructionLoader A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

