digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.checkManeuverCompletion(Lcom\/mapbox\/services\/android\/navigation\/v5\/navigation\/MapboxNavigation;Landroid\/location\/Location;Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;DD)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0001: IGET  (r1 I:double) = \l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.stepDistanceRemaining double \l0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CMP_G  (r1 I:int) = (r1 I:double), (r17 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress) = \l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.routeProgress com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress \l0x000e: IGET  (r7 I:double) = \l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.stepDistanceRemaining double \l0x0010: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0011: MOVE  (r9 I:?[long, double]) = (r15 I:?[long, double]) \l0x0012: INVOKE  (r2 I:boolean) = \l  (r5 I:android.location.Location)\l  (r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l  (r7 I:double)\l  (r9 I:double)\l com.mapbox.services.android.navigation.v5.navigation.NavigationHelper.checkBearingForStepCompletion(android.location.Location, com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress, double, double):boolean type: STATIC \l0x0016: IGET  (r5 I:double) = \l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.stepDistanceRemaining double \l0x0018: CONST  (r7 I:?[long, double]) = (0 ?[long, double]) \l0x001a: CMP_L  (r5 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0032 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: INVOKE  \l  (r11 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l  (r12 I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.advanceIndices(com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation):void type: DIRECT \l0x002a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x002b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  (r1 I:double) = \l  (r11 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l  (r13 I:android.location.Location)\l  (r14 I:com.mapbox.api.directions.v5.models.DirectionsRoute)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.calculateStepDistanceRemaining(android.location.Location, com.mapbox.api.directions.v5.models.DirectionsRoute):double type: DIRECT \l0x0030: IPUT  \l  (r1 I:double)\l  (r0 I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor)\l com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.stepDistanceRemaining double \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor.checkManeuverCompletion((r11 'this' I:com.mapbox.services.android.navigation.v5.navigation.NavigationRouteProcessor A[IMMUTABLE_TYPE, THIS]), (r12 I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:android.location.Location A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.mapbox.api.directions.v5.models.DirectionsRoute A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

