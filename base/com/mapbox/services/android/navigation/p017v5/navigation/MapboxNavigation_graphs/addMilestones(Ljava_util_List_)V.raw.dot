digraph "CFG forcom.mapbox.services.android.navigation.v5.navigation.MapboxNavigation.addMilestones(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Set\<com.mapbox.services.android.navigation.v5.milestone.Milestone\>) = \l  (r1 I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation)\l com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation.milestones java.util.Set \l0x0002: INVOKE  (r2 I:boolean) = (r0 I:java.util.Set), (r2 I:java.util.Collection) java.util.Set.addAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST_STR  (r2 I:java.lang.String) =  \"These milestones have already been added to the stack.\" \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000d: INVOKE  (r2 I:java.lang.String), (r0 I:java.lang.Object[]) timber.log.Timber.w(java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation.addMilestones((r1 'this' I:com.mapbox.services.android.navigation.v5.navigation.MapboxNavigation A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.List\<com.mapbox.services.android.navigation.v5.milestone.Milestone\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/services\/android\/navigation\/v5\/milestone\/Milestone;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

