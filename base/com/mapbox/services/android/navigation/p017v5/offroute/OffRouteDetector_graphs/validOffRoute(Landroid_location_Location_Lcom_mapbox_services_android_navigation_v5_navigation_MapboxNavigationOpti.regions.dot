digraph "CFG forcom.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.validOffRoute(Landroid\/location\/Location;Lcom\/mapbox\/services\/android\/navigation\/v5\/navigation\/MapboxNavigationOptions;)Z" {
subgraph cluster_Region_2104658538 {
label = "R(3:0|(1:2)(1:3)|5) | DECL_VAR: double null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.geojson.Point com.mapbox.geojson.Point r0 = com.mapbox.geojson.Point.fromLngLat(r5.getLongitude(), r5.getLatitude())\l}"];
subgraph cluster_IfRegion_1650497661 {
label = "IF [B:1:0x000e] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r4.lastReroutePoint != null) goto L_0x0010\l}"];
subgraph cluster_Region_818303798 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|double r0 = com.mapbox.turf.TurfMeasurement.distance(r4.lastReroutePoint, r0, com.mapbox.turf.TurfConstants.UNIT_METERS)\l}"];
}
subgraph cluster_Region_1999685790 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0019|updateLastReroutePoint(r5)\lr0 = 0.0d\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0024|RETURN\l|return r0 \> r6.minimumDistanceBeforeRerouting()\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x001e|PHI: r0 \l  PHI: (r0v2 double) = (r0v3 double), (r0v4 double) binds: [B:3:0x0019, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0026|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0028|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.validOffRoute((r4v0 'this' com.mapbox.services.android.navigation.v5.offroute.OffRouteDetector A[IMMUTABLE_TYPE, THIS]), (r5v0 android.location.Location A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.mapbox.services.android.navigation.v5.navigation.MapboxNavigationOptions A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_4 -> Node_5;
}

