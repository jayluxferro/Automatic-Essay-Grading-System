digraph "CFG forcom.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.movingAwayFromManeuver(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;Lcom\/mapbox\/services\/android\/navigation\/v5\/utils\/RingBuffer;Ljava\/util\/List;Lcom\/mapbox\/geojson\/Point;)Z" {
subgraph cluster_Region_757509296 {
label = "R(3:1|5|(2:(1:36)|(2:10|(2:(1:35)|(2:14|(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34)))))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|boolean r6 = r6.currentLegProgress().upComingStep() == null\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|boolean r2 = r8.size() \< 2\l}"];
subgraph cluster_Region_1052346379 {
label = "R(2:(1:36)|(2:10|(2:(1:35)|(2:14|(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_146329667 {
label = "IF [B:8:0x0019, B:9:0x001b] THEN: R(1:36) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|PHI: r2 \l  PHI: (r2v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == true) goto L_0x00ac\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|ADDED_TO_REGION\l|if (r2 == true) goto L_0x00ac\l}"];
subgraph cluster_Region_1549231931 {
label = "R(1:36)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x00ac|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_644495432 {
label = "R(2:10|(2:(1:35)|(2:14|(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34)))))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001f|com.mapbox.geojson.LineString com.mapbox.geojson.LineString r6 = com.mapbox.geojson.LineString.fromLngLats(r8)\lcom.mapbox.geojson.Point com.mapbox.geojson.Point r2 = r8.get(r8.size() \- 1)\lcom.mapbox.geojson.Point com.mapbox.geojson.Point r8 = (com.mapbox.geojson.Point) com.mapbox.turf.TurfMisc.nearestPointOnLine(r9, r8).geometry()\l}"];
subgraph cluster_Region_2028003658 {
label = "R(2:(1:35)|(2:14|(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_537734130 {
label = "IF [B:11:0x0038, B:13:0x003e] THEN: R(1:35) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0038|if (r8 == null) goto L_0x00ab\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|ADDED_TO_REGION\l|if (r2.equals(r8) == true) goto L_0x00ab\l}"];
subgraph cluster_Region_2125904896 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x00ab|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_945181540 {
label = "R(2:14|(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0041|double double r8 = com.mapbox.turf.TurfMeasurement.length(com.mapbox.turf.TurfMisc.lineSlice(r8, r2, r6), com.mapbox.turf.TurfConstants.UNIT_METERS)\l}"];
subgraph cluster_Region_213748237 {
label = "R(2:(1:26)|(2:(1:29)(1:(1:32)(1:33))|34))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1806981662 {
label = "IF [B:25:0x007d] THEN: R(1:26) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x007d|PHI: r6 \l  PHI: (r6v9 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((((r7.isEmpty() ^ true) && (((double) (((java.lang.Integer) r7.peekLast()).intValue() \- ((java.lang.Integer) r7.peekFirst()).intValue())) \> 50.0d ? 1 : (((double) (((java.lang.Integer) r7.peekLast()).intValue() \- ((java.lang.Integer) r7.peekFirst()).intValue())) == 50.0d ? 0 : \-1)) \< 0) && r7.size() \>= 3) == true) goto L_0x007f\l}"];
subgraph cluster_Region_337710227 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x007f|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1597826219 {
label = "R(2:(1:29)(1:(1:32)(1:33))|34)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1060233379 {
label = "IF [B:28:0x0084] THEN: R(1:29) ELSE: R(1:(1:32)(1:33))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0084|if (r7.isEmpty() == true) goto L_0x0086\l}"];
subgraph cluster_Region_1853476216 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0086|r7.push(java.lang.Integer.valueOf((int) r8))\l}"];
}
subgraph cluster_Region_1989949937 {
label = "R(1:(1:32)(1:33)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_430309511 {
label = "IF [B:31:0x009c] THEN: R(1:32) ELSE: R(1:33) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x009c|if (r8 \> ((double) ((java.lang.Integer) r7.peek()).intValue())) goto L_0x009e\l}"];
subgraph cluster_Region_325168548 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x009e|r7.push(java.lang.Integer.valueOf((int) r8))\l}"];
}
subgraph cluster_Region_1791354405 {
label = "R(1:33)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x00a7|r7.clear()\l}"];
}
}
}
}
Node_34 [shape=record,label="{34\:\ 0x00aa|RETURN\l|return false\l}"];
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f|PHI: r6 \l  PHI: (r6v3 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0016}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x003a}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0050}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0052}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x006c|REMOVE\lADDED_TO_REGION\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x006e}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0070}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0071|PHI: r6 \l  PHI: (r6v8 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0073}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0078|REMOVE\lADDED_TO_REGION\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x007a}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x007c}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0080}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x008f}"];
MethodNode[shape=record,label="{private static boolean com.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.movingAwayFromManeuver((r6v0 com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 com.mapbox.services.android.navigation.v5.utils.RingBuffer\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.util.List\<com.mapbox.geojson.Point\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;, Lcom\/mapbox\/services\/android\/navigation\/v5\/utils\/RingBuffer\<, Ljava\/lang\/Integer;, \>;, Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;, Lcom\/mapbox\/geojson\/Point;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_36;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_36;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_35;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_35;
Node_14 -> Node_15;
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_28 -> Node_29;
Node_28 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_31 -> Node_32;
Node_31 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_30 -> Node_31;
}

