digraph "CFG forcom.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.movingAwayFromManeuver(Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;Lcom\/mapbox\/services\/android\/navigation\/v5\/utils\/RingBuffer;Ljava\/util\/List;Lcom\/mapbox\/geojson\/Point;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress) = \l  (r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress)\l com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress.currentLegProgress():com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress type: VIRTUAL \l0x0004: INVOKE  (r6 I:com.mapbox.api.directions.v5.models.LegStep) = \l  (r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress)\l com.mapbox.services.android.navigation.v5.routeprogress.RouteLegProgress.upComingStep():com.mapbox.api.directions.v5.models.LegStep type: VIRTUAL \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r2 I:int) = (r8 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00ac \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  (r6 I:com.mapbox.geojson.LineString) = (r8 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l0x0023: INVOKE  (r2 I:int) = (r8 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0027: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l0x0028: INVOKE  (r2 I:java.lang.Object) = (r8 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002c: CHECK_CAST  (r2 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r2 I:?[OBJECT, ARRAY]) \l0x002e: INVOKE  (r8 I:com.mapbox.geojson.Feature) = (r9 I:com.mapbox.geojson.Point), (r8 I:java.util.List) com.mapbox.turf.TurfMisc.nearestPointOnLine(com.mapbox.geojson.Point, java.util.List):com.mapbox.geojson.Feature type: STATIC \l0x0032: INVOKE  (r8 I:com.mapbox.geojson.Geometry) = (r8 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x0036: CHECK_CAST  (r8 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00ab \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: INVOKE  (r9 I:boolean) = (r2 I:java.lang.Object), (r8 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0041 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: INVOKE  (r6 I:com.mapbox.geojson.LineString) = \l  (r8 I:com.mapbox.geojson.Point)\l  (r2 I:com.mapbox.geojson.Point)\l  (r6 I:com.mapbox.geojson.LineString)\l com.mapbox.turf.TurfMisc.lineSlice(com.mapbox.geojson.Point, com.mapbox.geojson.Point, com.mapbox.geojson.LineString):com.mapbox.geojson.LineString type: STATIC \l0x0045: CONST_STR  (r8 I:java.lang.String) =  \"meters\" \l0x0047: INVOKE  (r8 I:double) = \l  (r6 I:com.mapbox.geojson.LineString)\l  (r8 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.length(com.mapbox.geojson.LineString, java.lang.String):double type: STATIC \l0x004b: INVOKE  (r6 I:boolean) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.isEmpty():boolean type: VIRTUAL \l0x004f: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) ^ (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0050|0x0050: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0070 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|0x0052: INVOKE  (r6 I:java.lang.Object) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.peekLast():java.lang.Object type: VIRTUAL \l0x0056: CHECK_CAST  (r6 I:java.lang.Integer) = (java.lang.Integer) (r6 I:?[OBJECT, ARRAY]) \l0x0058: INVOKE  (r6 I:int) = (r6 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x005c: INVOKE  (r2 I:java.lang.Object) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.peekFirst():java.lang.Object type: VIRTUAL \l0x0060: CHECK_CAST  (r2 I:java.lang.Integer) = (java.lang.Integer) (r2 I:?[OBJECT, ARRAY]) \l0x0062: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0066: ARITH  (r6 I:int) = (r6 I:int) \- (r2 I:int) \l0x0067: CAST  (r2 I:double) = (double) (r6 I:int) \l0x0068: CONST  (r4 I:?[long, double]) = \l  (4632233691727265792(0x4049000000000000, double:50.0) ?[long, double])\l \l0x006a: CMP_G  (r6 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006c|0x006c: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x0070 \l}"];
Node_20 [shape=record,label="{20\:\ 0x006e|0x006e: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0070|0x0070: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|0x0071: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007c \l}"];
Node_23 [shape=record,label="{23\:\ 0x0073|0x0073: INVOKE  (r6 I:int) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.size():int type: VIRTUAL \l0x0077: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: IF  (r6 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:26:0x007c \l}"];
Node_25 [shape=record,label="{25\:\ 0x007a|0x007a: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x007c|0x007c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x007d|0x007d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0080 \l}"];
Node_28 [shape=record,label="{28\:\ 0x007f|0x007f: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0080|0x0080: INVOKE  (r6 I:boolean) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.isEmpty():boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0084|0x0084: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x008f \l}"];
Node_31 [shape=record,label="{31\:\ 0x0086|0x0086: CAST  (r6 I:int) = (int) (r8 I:double) \l0x0087: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x008b: INVOKE  \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l  (r6 I:java.lang.Object)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.push(java.lang.Object):void type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x008f|0x008f: INVOKE  (r6 I:java.lang.Object) = \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.peek():java.lang.Object type: VIRTUAL \l0x0093: CHECK_CAST  (r6 I:java.lang.Integer) = (java.lang.Integer) (r6 I:?[OBJECT, ARRAY]) \l0x0095: INVOKE  (r6 I:int) = (r6 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0099: CAST  (r1 I:double) = (double) (r6 I:int) \l0x009a: CMP_L  (r6 I:int) = (r8 I:double), (r1 I:double) \l}"];
Node_33 [shape=record,label="{33\:\ 0x009c|0x009c: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:35:0x00a7 \l}"];
Node_34 [shape=record,label="{34\:\ 0x009e|0x009e: CAST  (r6 I:int) = (int) (r8 I:double) \l0x009f: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x00a3: INVOKE  \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l  (r6 I:java.lang.Object)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.push(java.lang.Object):void type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a7|0x00a7: INVOKE  \l  (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer)\l com.mapbox.services.android.navigation.v5.utils.RingBuffer.clear():void type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00aa|0x00aa: RETURN  (r0 I:boolean) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ab|0x00ab: RETURN  (r0 I:boolean) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00ac|0x00ac: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.mapbox.services.android.navigation.v5.offroute.OffRouteDetector.movingAwayFromManeuver((r6 I:com.mapbox.services.android.navigation.v5.routeprogress.RouteProgress A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.mapbox.services.android.navigation.v5.utils.RingBuffer\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<com.mapbox.geojson.Point\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/services\/android\/navigation\/v5\/routeprogress\/RouteProgress;, Lcom\/mapbox\/services\/android\/navigation\/v5\/utils\/RingBuffer\<, Ljava\/lang\/Integer;, \>;, Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;, Lcom\/mapbox\/geojson\/Point;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_38;
Node_9 -> Node_11;
Node_9 -> Node_38[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_37;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_37[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_36;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_35 -> Node_36;
}

