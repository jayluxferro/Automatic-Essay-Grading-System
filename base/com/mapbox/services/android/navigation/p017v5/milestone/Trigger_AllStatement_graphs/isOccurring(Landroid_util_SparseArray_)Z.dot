digraph "CFG forcom.mapbox.services.android.navigation.v5.milestone.Trigger.AllStatement.isOccurring(Landroid\/util\/SparseArray;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.services.android.navigation.v5.milestone.Trigger$Statement[] r0 = r6.statements\lint r1 = r0.length\lr3 = 0\lr4 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:0:0x0000, B:5:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean) binds: [B:0:0x0000, B:5:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:5:0x0012\l|if (r3 \>= r1) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r0[r3].isOccurring(r7) != false) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|r4 = false\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_END\lPHI: r4 \l  PHI: (r4v2 boolean) = (r4v1 boolean), (r4v3 boolean) binds: [B:9:0x0012, B:8:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:5:0x0012\l|int r3 = r3 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|RETURN\l|return r4\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.services.android.navigation.v5.milestone.Trigger.AllStatement.isOccurring((r6v0 'this' com.mapbox.services.android.navigation.v5.milestone.Trigger$AllStatement A[IMMUTABLE_TYPE, THIS]), (r7v0 android.util.SparseArray\<java.lang.Number[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/util\/SparseArray\<, [, Ljava\/lang\/Number;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

