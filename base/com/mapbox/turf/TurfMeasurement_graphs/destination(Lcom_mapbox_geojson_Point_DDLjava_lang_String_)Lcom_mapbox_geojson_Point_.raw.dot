digraph "CFG forcom.mapbox.turf.TurfMeasurement.destination(Lcom\/mapbox\/geojson\/Point;DDLjava\/lang\/String;)Lcom\/mapbox\/geojson\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r10 I:com.mapbox.geojson.Point) com.mapbox.geojson.Point.longitude():double type: VIRTUAL \l0x0004: INVOKE  (r0 I:double) = (r0 I:double) com.mapbox.turf.TurfConversion.degreesToRadians(double):double type: STATIC \l0x0008: INVOKE  (r2 I:double) = (r10 I:com.mapbox.geojson.Point) com.mapbox.geojson.Point.latitude():double type: VIRTUAL \l0x000c: INVOKE  (r2 I:double) = (r2 I:double) com.mapbox.turf.TurfConversion.degreesToRadians(double):double type: STATIC \l0x0010: INVOKE  (r13 I:double) = (r13 I:double) com.mapbox.turf.TurfConversion.degreesToRadians(double):double type: STATIC \l0x0014: INVOKE  (r10 I:double) = (r11 I:double), (r15 I:java.lang.String) com.mapbox.turf.TurfConversion.lengthToRadians(double, java.lang.String):double type: STATIC \l0x0018: INVOKE  (r4 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x001c: INVOKE  (r6 I:double) = (r10 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0020: ARITH  (r4 I:double) = (r4 I:double) * (r6 I:double) \l0x0022: INVOKE  (r6 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0026: INVOKE  (r8 I:double) = (r10 I:double) java.lang.Math.sin(double):double type: STATIC \l0x002a: ARITH  (r6 I:double) = (r6 I:double) * (r8 I:double) \l0x002c: INVOKE  (r8 I:double) = (r13 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0030: ARITH  (r6 I:double) = (r6 I:double) * (r8 I:double) \l0x0032: ARITH  (r4 I:double) = (r4 I:double) + (r6 I:double) \l0x0033: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.asin(double):double type: STATIC \l0x0037: INVOKE  (r12 I:double) = (r13 I:double) java.lang.Math.sin(double):double type: STATIC \l0x003b: INVOKE  (r14 I:double) = (r10 I:double) java.lang.Math.sin(double):double type: STATIC \l0x003f: ARITH  (r12 I:double) = (r12 I:double) * (r14 I:double) \l0x0041: INVOKE  (r14 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0045: ARITH  (r12 I:double) = (r12 I:double) * (r14 I:double) \l0x0047: INVOKE  (r10 I:double) = (r10 I:double) java.lang.Math.cos(double):double type: STATIC \l0x004b: INVOKE  (r14 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x004f: INVOKE  (r2 I:double) = (r4 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0053: ARITH  (r14 I:double) = (r14 I:double) * (r2 I:double) \l0x0055: ARITH  (r10 I:double) = (r10 I:double) \- (r14 I:double) \l0x0056: INVOKE  (r10 I:double) = (r12 I:double), (r10 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x005a: ARITH  (r0 I:double) = (r0 I:double) + (r10 I:double) \l0x005b: INVOKE  (r10 I:double) = (r0 I:double) com.mapbox.turf.TurfConversion.radiansToDegrees(double):double type: STATIC \l0x005f: INVOKE  (r12 I:double) = (r4 I:double) com.mapbox.turf.TurfConversion.radiansToDegrees(double):double type: STATIC \l0x0063: INVOKE  (r10 I:com.mapbox.geojson.Point) = (r10 I:double), (r12 I:double) com.mapbox.geojson.Point.fromLngLat(double, double):com.mapbox.geojson.Point type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0067|0x0067: RETURN  (r10 I:com.mapbox.geojson.Point) \l}"];
MethodNode[shape=record,label="{public static com.mapbox.geojson.Point com.mapbox.turf.TurfMeasurement.destination((r10 I:com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=\-180.0, to=180.0\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

