digraph "CFG forcom.mapbox.turf.models.AutoValue_LineIntersectsResult.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5.horizontalIntersection != null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|int r0 = r5.horizontalIntersection.hashCode()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 int) = (r0v10 int), (r0v11 int) binds: [B:3:0x0007, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ 1000003) * 1000003\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r5.verticalIntersection != null) goto L_0x0018\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|int r1 = r5.verticalIntersection.hashCode()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v8 int) binds: [B:5:0x0015, B:6:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ r1) * 1000003\lr3 = 1237\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|if (r5.onLine1 == false) goto L_0x002c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|r1 = 1231\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|r1 = 1237\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|PHI: r1 \l  PHI: (r1v3 int) = (r1v5 int), (r1v6 int) binds: [B:10:0x002c, B:9:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ r1) * 1000003\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|if (r5.onLine2 == false) goto L_0x0037\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|r3 = 1231\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|PHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:12:0x0033, B:13:0x0035] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|RETURN\l|return r0 ^ r3\l}"];
MethodNode[shape=record,label="{public int com.mapbox.turf.models.AutoValue_LineIntersectsResult.hashCode((r5v0 'this' com.mapbox.turf.models.AutoValue_LineIntersectsResult A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

