digraph "CFG forcom.mapbox.turf.TurfAssertions.geojsonType(Lcom\/mapbox\/geojson\/GeoJson;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (com.mapbox.core.utils.TextUtils.isEmpty(r4) != false) goto L_0x004a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (com.mapbox.core.utils.TextUtils.isEmpty(r5) != false) goto L_0x004a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r3 == null) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if (r3.type().equals(r4) != false) goto L_0x0019\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Invalid input to \")\lr1.append(r5)\lr1.append(\": must be a \")\lr1.append(r4)\lr1.append(\", given \")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|if (r3 == null) goto L_0x003d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|java.lang.String r3 = r3.type()\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|java.lang.String r3 = \" null\"\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|PHI: r3 \l  PHI: (r3v2 java.lang.String) = (r3v4 java.lang.String), (r3v5 java.lang.String) binds: [B:11:0x003d, B:10:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|throw new com.mapbox.turf.TurfException(r1.toString())\l}"];
Node_14 [shape=record,label="{14\:\ 0x004a}"];
Node_15 [shape=record,label="{15\:\ 0x0051|throw new com.mapbox.turf.TurfException(\"Type and name required\")\l}"];
MethodNode[shape=record,label="{public static void com.mapbox.turf.TurfAssertions.geojsonType((r3v0 com.mapbox.geojson.GeoJson A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

