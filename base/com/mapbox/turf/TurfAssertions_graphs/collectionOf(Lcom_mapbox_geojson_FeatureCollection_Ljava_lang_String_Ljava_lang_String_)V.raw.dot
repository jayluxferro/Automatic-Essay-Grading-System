digraph "CFG forcom.mapbox.turf.TurfAssertions.collectionOf(Lcom\/mapbox\/geojson\/FeatureCollection;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r7 I:java.lang.CharSequence) com.mapbox.core.utils.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0098 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0088 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r2 I:java.lang.String) = (r5 I:com.mapbox.geojson.FeatureCollection) com.mapbox.geojson.FeatureCollection.type():java.lang.String type: VIRTUAL \l0x000e: CONST_STR  (r3 I:java.lang.String) =  \"FeatureCollection\" \l0x0010: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0088 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  (r2 I:java.util.List) = (r5 I:com.mapbox.geojson.FeatureCollection) com.mapbox.geojson.FeatureCollection.features():java.util.List type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0088 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  (r5 I:java.util.List) = (r5 I:com.mapbox.geojson.FeatureCollection) com.mapbox.geojson.FeatureCollection.features():java.util.List type: VIRTUAL \l0x0020: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: INVOKE  (r2 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0087 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002e: CHECK_CAST  (r2 I:com.mapbox.geojson.Feature) = (com.mapbox.geojson.Feature) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0077 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: INVOKE  (r3 I:java.lang.String) = (r2 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.type():java.lang.String type: VIRTUAL \l0x0036: CONST_STR  (r4 I:java.lang.String) =  \"Feature\" \l0x0038: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0077 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: INVOKE  (r3 I:com.mapbox.geojson.Geometry) = (r2 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0077 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0044|0x0044: INVOKE  (r3 I:com.mapbox.geojson.Geometry) = (r2 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: INVOKE  (r3 I:com.mapbox.geojson.Geometry) = (r2 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x004e: INVOKE  (r3 I:java.lang.String) = (r3 I:com.mapbox.geojson.Geometry) com.mapbox.geojson.Geometry.type():java.lang.String type: INTERFACE \l0x0052: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r6 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: NEW_INSTANCE  (r5 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x005b: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x005c: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x005e: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0060: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0062: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0063: INVOKE  (r7 I:com.mapbox.geojson.Geometry) = (r2 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x0067: INVOKE  (r7 I:java.lang.String) = (r7 I:com.mapbox.geojson.Geometry) com.mapbox.geojson.Geometry.type():java.lang.String type: INTERFACE \l0x006b: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x006d: CONST_STR  (r6 I:java.lang.String) =  \"Invalid input to %s: must be a %s, given %s\" \l0x006f: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String), (r3 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0073: INVOKE  \l  (r5 I:com.mapbox.turf.TurfException)\l  (r6 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0076|0x0076: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|0x0077: NEW_INSTANCE  (r5 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x0079: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x007b: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x007d: CONST_STR  (r7 I:java.lang.String) =  \"Invalid input to %s, Feature with geometry required\" \l0x007f: INVOKE  (r6 I:java.lang.String) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0083: INVOKE  \l  (r5 I:com.mapbox.turf.TurfException)\l  (r6 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0086|0x0086: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0087|0x0087: RETURN   \l}"];
Node_27 [shape=record,label="{27\:\ 0x0088|0x0088: NEW_INSTANCE  (r5 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x008a: NEW_ARRAY  (r6 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x008c: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x008e: CONST_STR  (r7 I:java.lang.String) =  \"Invalid input to %s, FeatureCollection required\" \l0x0090: INVOKE  (r6 I:java.lang.String) = (r7 I:java.lang.String), (r6 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0094: INVOKE  \l  (r5 I:com.mapbox.turf.TurfException)\l  (r6 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x0097|0x0097: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0098|0x0098: NEW_INSTANCE  (r5 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x009a: CONST_STR  (r6 I:java.lang.String) =  \"collectionOf() requires a name\" \l0x009c: INVOKE  \l  (r5 I:com.mapbox.turf.TurfException)\l  (r6 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x009f|0x009f: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void com.mapbox.turf.TurfAssertions.collectionOf((r5 I:com.mapbox.geojson.FeatureCollection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_27;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_27;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_26;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_24;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_9[style=dashed];
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_29 -> Node_30;
}

