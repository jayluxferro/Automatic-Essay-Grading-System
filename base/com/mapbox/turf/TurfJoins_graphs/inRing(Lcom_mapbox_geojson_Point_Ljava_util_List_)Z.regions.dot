digraph "CFG forcom.mapbox.turf.TurfJoins.inRing(Lcom\/mapbox\/geojson\/Point;Ljava\/util\/List;)Z" {
subgraph cluster_Region_1783854944 {
label = "R(3:0|(3:3|(1:17)(0)|18)|19)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List\<com.mapbox.geojson.Point\> r0 = r20\lint r4 = r20.size() \- 1\lint r1 = 0\lboolean r5 = false\l}"];
subgraph cluster_LoopRegion_496423194 {
label = "LOOP:0: (3:3|(1:17)(0)|18)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|if (r1 \< r20.size()) goto L_0x0012\l}"];
subgraph cluster_Region_212407250 {
label = "R(3:3|(1:17)(0)|18)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|double double r6 = r0.get(r1).longitude()\ldouble double r8 = r0.get(r1).latitude()\ldouble double r10 = r0.get(r4).longitude()\ldouble double r12 = r0.get(r4).latitude()\l}"];
subgraph cluster_IfRegion_735580363 {
label = "IF [B:16:0x0069] THEN: R(1:17) ELSE: R(0)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0069|PHI: r4 \l  PHI: (r4v6 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((((r8 \> r19.latitude() ? 1 : (r8 == r19.latitude() ? 0 : \-1)) \> 0) != ((r12 \> r19.latitude() ? 1 : (r12 == r19.latitude() ? 0 : \-1)) \> 0) && r19.longitude() \< (((r10 \- r6) * (r19.latitude() \- r8)) \/ (r12 \- r8)) + r6) == true) goto L_0x006b\l}"];
subgraph cluster_Region_1522635908 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x006b|r5 = !r5\l}"];
}
subgraph cluster_Region_1203632157 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_18 [shape=record,label="{18\:\ 0x006e|LOOP_END\lPHI: r5 \l  PHI: (r5v2 boolean) = (r5v1 boolean), (r5v3 boolean) binds: [B:22:0x006e, B:21:0x006e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:18:0x006e\l|r4 = r1\lr1++\l}"];
}
}
Node_19 [shape=record,label="{19\:\ 0x0076|RETURN\l|return r5\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000c|LOOP_START\lPHI: r1 r4 r5 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:0:0x0000, B:18:0x006e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v8 int) binds: [B:0:0x0000, B:18:0x006e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 boolean) = (r5v0 boolean), (r5v2 boolean) binds: [B:0:0x0000, B:18:0x006e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:18:0x006e\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0040}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0042}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0044}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0045|PHI: r4 \l  PHI: (r4v5 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x004b}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x004d}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x004f}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0050|PHI: r14 \l  PHI: (r14v3 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0052}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0064|REMOVE\lADDED_TO_REGION\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0066}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0068}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0076|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x006e|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x006e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean com.mapbox.turf.TurfJoins.inRing((r19v0 com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 java.util.List\<com.mapbox.geojson.Point\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/geojson\/Point;, Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_20[style=dashed];
Node_3 -> Node_4;
Node_16 -> Node_17;
Node_16 -> Node_22[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_20 -> Node_19;
Node_21 -> Node_18;
Node_22 -> Node_18;
}

