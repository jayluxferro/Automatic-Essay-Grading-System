digraph "CFG forcom.mapbox.turf.TurfMeta.coordAll(Lcom\/mapbox\/geojson\/Polygon;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:7:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:7:0x0037\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r2 \>= r5.coordinates().size()) goto L_0x003a\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|r3 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|LOOP_START\lPHI: r3 \l  PHI: (r3v3 int) = (r3v2 int), (r3v4 int) binds: [B:3:0x0011, B:6:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0012\-\>B:6:0x0023\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|if (r3 \>= (((java.util.List) r5.coordinates().get(r2)).size() \- (r6 ? 1 : 0))) goto L_0x0037\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|LOOP_END\lLOOP:1: B:4:0x0012\-\>B:6:0x0023\l|r0.add(((java.util.List) r5.coordinates().get(r2)).get(r3))\lint r3 = r3 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:7:0x0037\l|int r2 = r2 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.List\<com.mapbox.geojson.Point\> com.mapbox.turf.TurfMeta.coordAll((r5v0 com.mapbox.geojson.Polygon A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], \lAnnotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/mapbox\/geojson\/Polygon;, Z), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_4;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
}

