digraph "CFG forcom.mapbox.turf.TurfMisc.lineSlice(Lcom\/mapbox\/geojson\/Point;Lcom\/mapbox\/geojson\/Point;Lcom\/mapbox\/geojson\/LineString;)Lcom\/mapbox\/geojson\/LineString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:java.util.List) = (r6 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0004: INVOKE  (r0 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:16:0x00a9 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r0 I:boolean) = (r4 I:java.lang.Object), (r5 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x00a1 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r4 I:com.mapbox.geojson.Feature) = (r4 I:com.mapbox.geojson.Point), (r6 I:java.util.List) com.mapbox.turf.TurfMisc.nearestPointOnLine(com.mapbox.geojson.Point, java.util.List):com.mapbox.geojson.Feature type: STATIC \l0x0015: INVOKE  (r5 I:com.mapbox.geojson.Feature) = (r5 I:com.mapbox.geojson.Point), (r6 I:java.util.List) com.mapbox.turf.TurfMisc.nearestPointOnLine(com.mapbox.geojson.Point, java.util.List):com.mapbox.geojson.Feature type: STATIC \l0x0019: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x001b: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x001e: CONST_STR  (r1 I:java.lang.String) =  \"index\" \l0x0020: INVOKE  (r1 I:java.lang.Number) = (r4 I:com.mapbox.geojson.Feature), (r1 I:java.lang.String) com.mapbox.geojson.Feature.getNumberProperty(java.lang.String):java.lang.Number type: VIRTUAL \l0x0024: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l0x0026: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x002a: CONST_STR  (r2 I:java.lang.String) =  \"index\" \l0x002c: INVOKE  (r2 I:java.lang.Number) = (r5 I:com.mapbox.geojson.Feature), (r2 I:java.lang.String) com.mapbox.geojson.Feature.getNumberProperty(java.lang.String):java.lang.Number type: VIRTUAL \l0x0030: CHECK_CAST  (r2 I:java.lang.Integer) = (java.lang.Integer) (r2 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|0x0036: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:7:0x003f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x003b: INVOKE  (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: INVOKE  (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0042: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x0047: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x004a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004f: CHECK_CAST  (r1 I:com.mapbox.geojson.Feature) = (com.mapbox.geojson.Feature) (r1 I:?[OBJECT, ARRAY]) \l0x0051: INVOKE  (r1 I:com.mapbox.geojson.Geometry) = (r1 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x0055: CHECK_CAST  (r1 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r1 I:?[OBJECT, ARRAY]) \l0x0057: INVOKE  (r4 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x005a: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x005e: CHECK_CAST  (r5 I:com.mapbox.geojson.Feature) = (com.mapbox.geojson.Feature) (r5 I:?[OBJECT, ARRAY]) \l0x0060: CONST_STR  (r1 I:java.lang.String) =  \"index\" \l0x0062: INVOKE  (r5 I:java.lang.Number) = (r5 I:com.mapbox.geojson.Feature), (r1 I:java.lang.String) com.mapbox.geojson.Feature.getNumberProperty(java.lang.String):java.lang.Number type: VIRTUAL \l0x0066: CHECK_CAST  (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:?[OBJECT, ARRAY]) \l0x0068: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x006c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x006d: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x006e|0x006e: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0072: CHECK_CAST  (r2 I:com.mapbox.geojson.Feature) = (com.mapbox.geojson.Feature) (r2 I:?[OBJECT, ARRAY]) \l0x0074: CONST_STR  (r3 I:java.lang.String) =  \"index\" \l0x0076: INVOKE  (r2 I:java.lang.Number) = (r2 I:com.mapbox.geojson.Feature), (r3 I:java.lang.String) com.mapbox.geojson.Feature.getNumberProperty(java.lang.String):java.lang.Number type: VIRTUAL \l0x007a: CHECK_CAST  (r2 I:java.lang.Integer) = (java.lang.Integer) (r2 I:?[OBJECT, ARRAY]) \l0x007c: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0080: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0081|0x0081: IF  (r5 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:12:0x008d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0083|0x0083: INVOKE  (r2 I:java.lang.Object) = (r6 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0087: INVOKE  (r4 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x008a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x008d|0x008d: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0091: CHECK_CAST  (r5 I:com.mapbox.geojson.Feature) = (com.mapbox.geojson.Feature) (r5 I:?[OBJECT, ARRAY]) \l0x0093: INVOKE  (r5 I:com.mapbox.geojson.Geometry) = (r5 I:com.mapbox.geojson.Feature) com.mapbox.geojson.Feature.geometry():com.mapbox.geojson.Geometry type: VIRTUAL \l0x0097: CHECK_CAST  (r5 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r5 I:?[OBJECT, ARRAY]) \l0x0099: INVOKE  (r4 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x009c: INVOKE  (r4 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x00a0|0x00a0: RETURN  (r4 I:com.mapbox.geojson.LineString) \l}"];
Node_14 [shape=record,label="{14\:\ 0x00a1|0x00a1: NEW_INSTANCE  (r4 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x00a3: CONST_STR  (r5 I:java.lang.String) =  \"Start and stop points in Turf lineSlice cannot equal each other.\" \l0x00a5: INVOKE  \l  (r4 I:com.mapbox.turf.TurfException)\l  (r5 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a8|0x00a8: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a9|0x00a9: NEW_INSTANCE  (r4 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x00ab: CONST_STR  (r5 I:java.lang.String) =  \"Turf lineSlice requires a LineString made up of at least 2 coordinates.\" \l0x00ad: INVOKE  \l  (r4 I:com.mapbox.turf.TurfException)\l  (r5 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x00b0|0x00b0: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.mapbox.geojson.LineString com.mapbox.turf.TurfMisc.lineSlice((r4 I:com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.mapbox.geojson.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.mapbox.geojson.LineString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

