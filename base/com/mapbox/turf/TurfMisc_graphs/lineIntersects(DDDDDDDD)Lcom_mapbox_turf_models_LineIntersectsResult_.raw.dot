digraph "CFG forcom.mapbox.turf.TurfMisc.lineIntersects(DDDDDDDD)Lcom\/mapbox\/turf\/models\/LineIntersectsResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder) =  com.mapbox.turf.models.LineIntersectsResult.builder():com.mapbox.turf.models.LineIntersectsResult$Builder type: STATIC \l0x0004: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r9 I:boolean)\l com.mapbox.turf.models.LineIntersectsResult.Builder.onLine1(boolean):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x0009: INVOKE  (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r9 I:boolean)\l com.mapbox.turf.models.LineIntersectsResult.Builder.onLine2(boolean):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x000d: INVOKE  (r8 I:com.mapbox.turf.models.LineIntersectsResult) = (r8 I:com.mapbox.turf.models.LineIntersectsResult$Builder) com.mapbox.turf.models.LineIntersectsResult.Builder.build():com.mapbox.turf.models.LineIntersectsResult type: VIRTUAL \l0x0011: ARITH  (r9 I:double) = (r37 I:double) \- (r33 I:double) \l0x0013: ARITH  (r11 I:double) = (r27 I:double) \- (r23 I:double) \l0x0015: ARITH  (r13 I:double) = (r9 I:double) * (r11 I:double) \l0x0017: ARITH  (r15 I:double) = (r35 I:double) \- (r31 I:double) \l0x0019: ARITH  (r17 I:double) = (r29 I:double) \- (r25 I:double) \l0x001b: ARITH  (r19 I:double) = (r15 I:double) * (r17 I:double) \l0x001d: ARITH  (r13 I:double) = (r13 I:double) \- (r19 I:double) \l0x001f: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CONST  (r20 I:?[long, double]) = (0 ?[long, double]) \l0x0023: CMP_L  (r22 I:int) = (r13 I:double), (r20 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: IF  (r22 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|0x0027: INVOKE  (r0 I:java.lang.Double) = (r8 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.horizontalIntersection():java.lang.Double type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: INVOKE  (r0 I:java.lang.Double) = (r8 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.verticalIntersection():java.lang.Double type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: RETURN  (r8 I:com.mapbox.turf.models.LineIntersectsResult) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: RETURN  (r19 I:com.mapbox.turf.models.LineIntersectsResult) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: CONST  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: ARITH  (r6 I:double) = (r25 I:double) \- (r33 I:double) \l0x0039: ARITH  (r4 I:double) = (r23 I:double) \- (r31 I:double) \l0x003b: ARITH  (r15 I:double) = (r15 I:double) * (r6 I:double) \l0x003d: ARITH  (r9 I:double) = (r9 I:double) * (r4 I:double) \l0x003f: ARITH  (r15 I:double) = (r15 I:double) \- (r9 I:double) \l0x0040: ARITH  (r6 I:double) = (r6 I:double) * (r11 I:double) \l0x0042: ARITH  (r4 I:double) = (r4 I:double) * (r17 I:double) \l0x0044: ARITH  (r6 I:double) = (r6 I:double) \- (r4 I:double) \l0x0045: ARITH  (r15 I:double) = (r15 I:double) \/ (r13 I:double) \l0x0046: ARITH  (r6 I:double) = (r6 I:double) \/ (r13 I:double) \l0x0047: INVOKE  (r4 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = (r8 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.toBuilder():com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x004b: ARITH  (r11 I:double) = (r11 I:double) * (r15 I:double) \l0x004d: ARITH  (r0 I:double) = (r23 I:double) + (r11 I:double) \l0x004f: INVOKE  (r0 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x0053: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r4 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r0 I:java.lang.Double)\l com.mapbox.turf.models.LineIntersectsResult.Builder.horizontalIntersection(java.lang.Double):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x0057: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult) = (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) com.mapbox.turf.models.LineIntersectsResult.Builder.build():com.mapbox.turf.models.LineIntersectsResult type: VIRTUAL \l0x005b: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = (r0 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.toBuilder():com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x005f: ARITH  (r17 I:double) = (r17 I:double) * (r15 I:double) \l0x0061: ARITH  (r1 I:double) = (r25 I:double) + (r17 I:double) \l0x0063: INVOKE  (r1 I:java.lang.Double) = (r1 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x0067: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r1 I:java.lang.Double)\l com.mapbox.turf.models.LineIntersectsResult.Builder.verticalIntersection(java.lang.Double):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x006b: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult) = (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) com.mapbox.turf.models.LineIntersectsResult.Builder.build():com.mapbox.turf.models.LineIntersectsResult type: VIRTUAL \l0x006f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0070: CONST  (r2 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0072: CMP_L  (r4 I:int) = (r15 I:double), (r20 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0074|0x0074: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0086 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0076|0x0076: CMP_G  (r4 I:int) = (r15 I:double), (r2 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0078|0x0078: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0086 \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = (r0 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.toBuilder():com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x007e: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r1 I:boolean)\l com.mapbox.turf.models.LineIntersectsResult.Builder.onLine1(boolean):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x0082: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult) = (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) com.mapbox.turf.models.LineIntersectsResult.Builder.build():com.mapbox.turf.models.LineIntersectsResult type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0086|0x0086: CMP_L  (r4 I:int) = (r6 I:double), (r20 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|0x0088: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x009a \l}"];
Node_15 [shape=record,label="{15\:\ 0x008a|0x008a: CMP_G  (r2 I:int) = (r6 I:double), (r2 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x008c|0x008c: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:18:0x009a \l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|0x008e: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = (r0 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.toBuilder():com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x0092: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) = \l  (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder)\l  (r1 I:boolean)\l com.mapbox.turf.models.LineIntersectsResult.Builder.onLine2(boolean):com.mapbox.turf.models.LineIntersectsResult$Builder type: VIRTUAL \l0x0096: INVOKE  (r0 I:com.mapbox.turf.models.LineIntersectsResult) = (r0 I:com.mapbox.turf.models.LineIntersectsResult$Builder) com.mapbox.turf.models.LineIntersectsResult.Builder.build():com.mapbox.turf.models.LineIntersectsResult type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x009a|0x009a: INVOKE  (r1 I:boolean) = (r0 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.onLine1():boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x009e|0x009e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00a7 \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a0|0x00a0: INVOKE  (r1 I:boolean) = (r0 I:com.mapbox.turf.models.LineIntersectsResult) com.mapbox.turf.models.LineIntersectsResult.onLine2():boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a4|0x00a4: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00a7 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a6|0x00a6: RETURN  (r0 I:com.mapbox.turf.models.LineIntersectsResult) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a7|0x00a7: RETURN  (r19 I:com.mapbox.turf.models.LineIntersectsResult) \l}"];
MethodNode[shape=record,label="{private static com.mapbox.turf.models.LineIntersectsResult com.mapbox.turf.TurfMisc.lineIntersects((r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
}

