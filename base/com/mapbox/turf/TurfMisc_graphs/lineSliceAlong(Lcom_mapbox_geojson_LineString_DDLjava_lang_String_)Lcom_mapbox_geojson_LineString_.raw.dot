digraph "CFG forcom.mapbox.turf.TurfMisc.lineSliceAlong(Lcom\/mapbox\/geojson\/LineString;DDLjava\/lang\/String;)Lcom\/mapbox\/geojson\/LineString;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.util.List) = (r20 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0004: INVOKE  (r4 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:44:0x00f6 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CMP_L  (r4 I:int) = (r21 I:double), (r23 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00ee \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x0011: INVOKE  (r4 I:java.util.ArrayList), (r5 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0014: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0017: MOVE  (r8 I:?[long, double]) = (r6 I:?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: INVOKE  (r10 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r5 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:36:0x00dd \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CMP_L  (r10 I:int) = (r21 I:double), (r8 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r10 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r10 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0026: ARITH  (r10 I:int) = (r10 I:int) + (\-1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: CONST  (r10 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x0031: CMP_L  (r12 I:int) = (r8 I:double), (r21 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r12 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0071 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: INVOKE  (r13 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0071 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: ARITH  (r15 I:double) = (r21 I:double) \- (r8 I:double) \l0x003d: CMP_L  (r13 I:int) = (r15 I:double), (r6 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x004d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0045: INVOKE  (r4 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0048: INVOKE  (r0 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|0x004c: RETURN  (r0 I:com.mapbox.geojson.LineString) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: INVOKE  (r13 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0051: CHECK_CAST  (r13 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r13 I:?[OBJECT, ARRAY]) \l0x0053: ARITH  (r14 I:int) = (r5 I:int) + (\-1 int) \l0x0055: INVOKE  (r14 I:java.lang.Object) = (r3 I:java.util.List), (r14 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0059: CHECK_CAST  (r14 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r14 I:?[OBJECT, ARRAY]) \l0x005b: INVOKE  (r13 I:double) = \l  (r13 I:com.mapbox.geojson.Point)\l  (r14 I:com.mapbox.geojson.Point)\l com.mapbox.turf.TurfMeasurement.bearing(com.mapbox.geojson.Point, com.mapbox.geojson.Point):double type: STATIC \l0x005f: ARITH  (r17 I:double) = (r13 I:double) \- (r10 I:double) \l0x0061: INVOKE  (r13 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0065: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0066: CHECK_CAST  (r14 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r14 I:?[OBJECT, ARRAY]) \l0x0068: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x006a: INVOKE  (r13 I:com.mapbox.geojson.Point) = \l  (r14 I:com.mapbox.geojson.Point)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.destination(com.mapbox.geojson.Point, double, double, java.lang.String):com.mapbox.geojson.Point type: STATIC \l0x006e: INVOKE  (r4 I:java.util.List), (r13 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: CMP_L  (r13 I:int) = (r8 I:double), (r23 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|0x0073: IF  (r13 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:29:0x00b0 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|0x0075: ARITH  (r15 I:double) = (r23 I:double) \- (r8 I:double) \l0x0077: CMP_L  (r0 I:int) = (r15 I:double), (r6 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0079|0x0079: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0087 \l}"];
Node_25 [shape=record,label="{25\:\ 0x007b|0x007b: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x007f: INVOKE  (r4 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0082: INVOKE  (r0 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|0x0086: RETURN  (r0 I:com.mapbox.geojson.LineString) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0087|0x0087: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x008b: CHECK_CAST  (r0 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r0 I:?[OBJECT, ARRAY]) \l0x008d: ARITH  (r1 I:int) = (r5 I:int) + (\-1 int) \l0x008f: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0093: CHECK_CAST  (r1 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r1 I:?[OBJECT, ARRAY]) \l0x0095: INVOKE  (r0 I:double) = \l  (r0 I:com.mapbox.geojson.Point)\l  (r1 I:com.mapbox.geojson.Point)\l com.mapbox.turf.TurfMeasurement.bearing(com.mapbox.geojson.Point, com.mapbox.geojson.Point):double type: STATIC \l0x0099: ARITH  (r17 I:double) = (r0 I:double) \- (r10 I:double) \l0x009b: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x009f: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00a0: CHECK_CAST  (r14 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r14 I:?[OBJECT, ARRAY]) \l0x00a2: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x00a4: INVOKE  (r0 I:com.mapbox.geojson.Point) = \l  (r14 I:com.mapbox.geojson.Point)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.destination(com.mapbox.geojson.Point, double, double, java.lang.String):com.mapbox.geojson.Point type: STATIC \l0x00a8: INVOKE  (r4 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00ab: INVOKE  (r0 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x00af|0x00af: RETURN  (r0 I:com.mapbox.geojson.LineString) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|0x00b0: IF  (r12 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:31:0x00b9 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|0x00b2: INVOKE  (r10 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00b6: INVOKE  (r4 I:java.util.List), (r10 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b9|0x00b9: INVOKE  (r10 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x00bd: ARITH  (r10 I:int) = (r10 I:int) + (\-1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00bf|0x00bf: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00c6 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00c1|0x00c1: INVOKE  (r0 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_34 [shape=record,label="{34\:\ 0x00c5|0x00c5: RETURN  (r0 I:com.mapbox.geojson.LineString) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00c6|0x00c6: INVOKE  (r10 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00ca: CHECK_CAST  (r10 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r10 I:?[OBJECT, ARRAY]) \l0x00cc: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x00ce: INVOKE  (r11 I:java.lang.Object) = (r3 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00d2: CHECK_CAST  (r11 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r11 I:?[OBJECT, ARRAY]) \l0x00d4: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x00d6: INVOKE  (r10 I:double) = \l  (r10 I:com.mapbox.geojson.Point)\l  (r11 I:com.mapbox.geojson.Point)\l  (r12 I:java.lang.String)\l com.mapbox.turf.TurfMeasurement.distance(com.mapbox.geojson.Point, com.mapbox.geojson.Point, java.lang.String):double type: STATIC \l0x00da: ARITH  (r8 I:double) = (r8 I:double) + (r10 I:double) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00dd|0x00dd: CMP_G  (r0 I:int) = (r8 I:double), (r21 I:double) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00df|0x00df: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:40:0x00e6 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00e1|0x00e1: INVOKE  (r0 I:com.mapbox.geojson.LineString) = (r4 I:java.util.List) com.mapbox.geojson.LineString.fromLngLats(java.util.List):com.mapbox.geojson.LineString type: STATIC \l}"];
Node_39 [shape=record,label="{39\:\ 0x00e5|0x00e5: RETURN  (r0 I:com.mapbox.geojson.LineString) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00e6|0x00e6: NEW_INSTANCE  (r0 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x00e8: CONST_STR  (r1 I:java.lang.String) =  \"Start position is beyond line\" \l0x00ea: INVOKE  \l  (r0 I:com.mapbox.turf.TurfException)\l  (r1 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x00ed|0x00ed: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00ee|0x00ee: NEW_INSTANCE  (r0 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x00f0: CONST_STR  (r1 I:java.lang.String) =  \"Start and stop distance in Turf lineSliceAlong cannot equal each other.\" \l0x00f2: INVOKE  \l  (r0 I:com.mapbox.turf.TurfException)\l  (r1 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x00f5|0x00f5: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x00f6|0x00f6: NEW_INSTANCE  (r0 I:com.mapbox.turf.TurfException) =  com.mapbox.turf.TurfException \l0x00f8: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00fa: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00fd: CONST_STR  (r2 I:java.lang.String) =  \"Turf lineSlice requires a LineString Geometry made up of at least 2 coordinates. The LineString passed in only contains \" \l0x00ff: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0102: INVOKE  (r2 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0106: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0109: CONST_STR  (r2 I:java.lang.String) =  \".\" \l0x010b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x010e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0112: INVOKE  \l  (r0 I:com.mapbox.turf.TurfException)\l  (r1 I:java.lang.String)\l com.mapbox.turf.TurfException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x0115|0x0115: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.mapbox.geojson.LineString com.mapbox.turf.TurfMisc.lineSliceAlong((r20 I:com.mapbox.geojson.LineString A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_44;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_42;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_36;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_36[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_35 -> Node_5;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_44 -> Node_45;
}

