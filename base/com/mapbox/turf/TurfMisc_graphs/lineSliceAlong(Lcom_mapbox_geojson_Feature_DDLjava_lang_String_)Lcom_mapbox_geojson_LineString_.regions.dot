digraph "CFG forcom.mapbox.turf.TurfMisc.lineSliceAlong(Lcom\/mapbox\/geojson\/Feature;DDLjava\/lang\/String;)Lcom\/mapbox\/geojson\/LineString;" {
subgraph cluster_Region_966752474 {
label = "R(2:0|(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.core.internal.Preconditions.checkNotNull(r6.geometry(), \"Feature.geometry() == null\")\l}"];
subgraph cluster_Region_1535408195 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_696293404 {
label = "IF [B:1:0x0017] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0017|if (r6.geometry().type().equals(\"LineString\") == true) goto L_0x0019\l}"];
subgraph cluster_Region_538264564 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|return lineSliceAlong((com.mapbox.geojson.LineString) r6.geometry(), r7, r9, r11)\l}"];
}
}
subgraph cluster_Region_1645127300 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002f|throw new com.mapbox.turf.TurfException(\"input must be a LineString Feature or Geometry\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0019}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0028}"];
MethodNode[shape=record,label="{public static com.mapbox.geojson.LineString com.mapbox.turf.TurfMisc.lineSliceAlong((r6v0 com.mapbox.geojson.Feature A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0\}], Annotation[BUILD, android.support.annotation.FloatRange, \{from=0.0\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
}

