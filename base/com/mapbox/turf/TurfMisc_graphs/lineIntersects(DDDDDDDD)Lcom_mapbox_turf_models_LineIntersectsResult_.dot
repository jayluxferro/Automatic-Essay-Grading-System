digraph "CFG forcom.mapbox.turf.TurfMisc.lineIntersects(DDDDDDDD)Lcom\/mapbox\/turf\/models\/LineIntersectsResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.turf.models.LineIntersectsResult r8 = com.mapbox.turf.models.LineIntersectsResult.builder().onLine1(false).onLine2(false).build()\ldouble r9 = r37 \- r33\ldouble r11 = r27 \- r23\ldouble r15 = r35 \- r31\ldouble r17 = r29 \- r25\ldouble r13 = (r9 * r11) \- (r15 * r17)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|if ((r13 \> 0.0d ? 1 : (r13 == 0.0d ? 0 : \-1)) != 0) goto L_0x0035\l}"];
Node_2 [shape=record,label="{2\:\ 0x0027}"];
Node_3 [shape=record,label="{3\:\ 0x002b|if (r8.horizontalIntersection() == null) goto L_0x0034\l}"];
Node_4 [shape=record,label="{4\:\ 0x002d}"];
Node_5 [shape=record,label="{5\:\ 0x0031|if (r8.verticalIntersection() == null) goto L_0x0034\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|RETURN\l|return r8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|double r6 = r25 \- r33\ldouble r4 = r23 \- r31\ldouble r15 = ((r15 * r6) \- (r9 * r4)) \/ r13\ldouble r6 = ((r6 * r11) \- (r4 * r17)) \/ r13\lcom.mapbox.turf.models.LineIntersectsResult r0 = r8.toBuilder().horizontalIntersection(java.lang.Double.valueOf(r23 + (r11 * r15))).build().toBuilder().verticalIntersection(java.lang.Double.valueOf(r25 + (r17 * r15))).build()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0074|if ((r15 \> 0.0d ? 1 : (r15 == 0.0d ? 0 : \-1)) \<= 0) goto L_0x0086\l}"];
Node_10 [shape=record,label="{10\:\ 0x0076}"];
Node_11 [shape=record,label="{11\:\ 0x0078|if ((r15 \> 1.0d ? 1 : (r15 == 1.0d ? 0 : \-1)) \>= 0) goto L_0x0086\l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|com.mapbox.turf.models.LineIntersectsResult r0 = r0.toBuilder().onLine1(true).build()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0086|PHI: r0 \l  PHI: (r0v7 com.mapbox.turf.models.LineIntersectsResult) = (r0v6 com.mapbox.turf.models.LineIntersectsResult), (r0v6 com.mapbox.turf.models.LineIntersectsResult), (r0v14 com.mapbox.turf.models.LineIntersectsResult) binds: [B:9:0x0074, B:11:0x0078, B:12:0x007a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|if ((r6 \> 0.0d ? 1 : (r6 == 0.0d ? 0 : \-1)) \<= 0) goto L_0x009a\l}"];
Node_15 [shape=record,label="{15\:\ 0x008a}"];
Node_16 [shape=record,label="{16\:\ 0x008c|if ((r6 \> 1.0d ? 1 : (r6 == 1.0d ? 0 : \-1)) \>= 0) goto L_0x009a\l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|com.mapbox.turf.models.LineIntersectsResult r0 = r0.toBuilder().onLine2(true).build()\l}"];
Node_18 [shape=record,label="{18\:\ 0x009a|PHI: r0 \l  PHI: (r0v8 com.mapbox.turf.models.LineIntersectsResult) = (r0v7 com.mapbox.turf.models.LineIntersectsResult), (r0v7 com.mapbox.turf.models.LineIntersectsResult), (r0v11 com.mapbox.turf.models.LineIntersectsResult) binds: [B:14:0x0088, B:16:0x008c, B:17:0x008e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x009e|if (r0.onLine1() == false) goto L_0x00a7\l}"];
Node_20 [shape=record,label="{20\:\ 0x00a0}"];
Node_21 [shape=record,label="{21\:\ 0x00a4|if (r0.onLine2() == false) goto L_0x00a7\l}"];
Node_22 [shape=record,label="{22\:\ 0x00a6|RETURN\l|return r0\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a7|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static com.mapbox.turf.models.LineIntersectsResult com.mapbox.turf.TurfMisc.lineIntersects((r23v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
}

