digraph "CFG forcom.mapbox.api.staticmap.v1.MapboxStaticMap.Builder.build()Lcom\/mapbox\/api\/staticmap\/v1\/MapboxStaticMap;" {
subgraph cluster_Region_790623464 {
label = "R(2:0|(1:8)(1:(1:4)(1:6)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.api.staticmap.v1.MapboxStaticMap com.mapbox.api.staticmap.p014v1.MapboxStaticMap r0 = autoBuild()\l}"];
subgraph cluster_IfRegion_1495120055 {
label = "IF [B:1:0x000c] THEN: R(1:8) ELSE: R(1:(1:4)(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (com.mapbox.core.utils.MapboxUtils.isAccessTokenValid(r0.accessToken()) != true) goto L_0x0021\l}"];
subgraph cluster_Region_1856243931 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|throw new com.mapbox.core.exceptions.ServicesException(\"Using Mapbox Services requires setting a valid access token.\")\l}"];
}
subgraph cluster_Region_49578593 {
label = "R(1:(1:4)(1:6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_949087455 {
label = "IF [B:3:0x0016] THEN: R(1:4) ELSE: R(1:6) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0016|if (r0.styleId().isEmpty() == false) goto L_0x0018\l}"];
subgraph cluster_Region_283361832 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_468956858 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0020|throw new com.mapbox.core.exceptions.ServicesException(\"You need to set a map style.\")\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0021}"];
MethodNode[shape=record,label="{public com.mapbox.api.staticmap.v1.MapboxStaticMap com.mapbox.api.staticmap.v1.MapboxStaticMap.Builder.build((r2v0 'this' com.mapbox.api.staticmap.v1.MapboxStaticMap$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

