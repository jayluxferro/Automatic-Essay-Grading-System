digraph "CFG forcom.mapbox.api.matching.v5.models.$AutoValue_MapMatchingResponse.hashCode()I" {
subgraph cluster_Region_409443596 {
label = "R(4:0|8|(1:10)|12)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r3 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|PHI: r2 \l  PHI: (r2v3 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = (((((r4.code.hashCode() ^ 1000003) * 1000003) ^ (r4.message == null ? 0 : r4.message.hashCode())) * 1000003) ^ (r4.matchings == null ? 0 : r4.matchings.hashCode())) * 1000003\l}"];
subgraph cluster_IfRegion_522972060 {
label = "IF [B:9:0x002d] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002d|if (r4.tracepoints != null) goto L_0x0030\l}"];
subgraph cluster_Region_1362527316 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0030|int r3 = r4.tracepoints.hashCode()\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0037|RETURN\l|return r0 ^ r3\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000f}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0011}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0013}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0019|PHI: r2 \l  PHI: (r2v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0020}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0022}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0036|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x002d, B:10:0x0030] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public int com.mapbox.api.matching.v5.models.$AutoValue_MapMatchingResponse.hashCode((r4v0 'this' com.mapbox.api.matching.v5.models.$AutoValue_MapMatchingResponse A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_11 -> Node_12;
}

