digraph "CFG forcom.mapbox.api.matching.v5.MapboxMapMatching.Builder.build()Lcom\/mapbox\/api\/matching\/v5\/MapboxMapMatching;" {
subgraph cluster_Region_1343309022 {
label = "R(1:(1:72)(1:(1:70)(1:(1:11)(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_883837697 {
label = "IF [B:1:0x0002, B:3:0x000b] THEN: R(1:72) ELSE: R(1:(1:70)(1:(1:11)(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.coordinates == null) goto L_0x0161\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|ADDED_TO_REGION\l|if (r4.coordinates.size() \< 2) goto L_0x0161\l}"];
subgraph cluster_Region_1385476071 {
label = "R(1:72)";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0168|throw new com.mapbox.core.exceptions.ServicesException(\"At least two coordinates must be provided with your API request.\")\l}"];
}
subgraph cluster_Region_1927870419 {
label = "R(1:(1:70)(1:(1:11)(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_679836388 {
label = "IF [B:5:0x0015] THEN: R(1:70) ELSE: R(1:(1:11)(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r4.coordinates.size() \> 100) goto L_0x0159\l}"];
subgraph cluster_Region_1849019062 {
label = "R(1:70)";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x0160|throw new com.mapbox.core.exceptions.ServicesException(\"Maximum of 100 coordinates are allowed for this API.\")\l}"];
}
subgraph cluster_Region_430553856 {
label = "R(1:(1:11)(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_751468937 {
label = "IF [B:7:0x0019, B:9:0x0024] THEN: R(1:11) ELSE: R(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0019|if (r4.radiuses != null) goto L_0x001b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|ADDED_TO_REGION\l|if (r4.radiuses.length != r4.coordinates.size()) goto L_0x0027\l}"];
subgraph cluster_Region_798723246 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002e|throw new com.mapbox.core.exceptions.ServicesException(\"There must be as many radiuses as there are coordinates.\")\l}"];
}
subgraph cluster_Region_1866175377 {
label = "R(1:(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))(1:17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_991839437 {
label = "IF [B:13:0x0031, B:15:0x003c] THEN: R(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68))) ELSE: R(1:17) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0031|if (r4.timestamps == null) goto L_0x0047\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|ADDED_TO_REGION\l|if (r4.timestamps.length == r4.coordinates.size()) goto L_0x0047\l}"];
subgraph cluster_Region_1726447424 {
label = "R(5:(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))|(1:(2:44|(1:50)(1:49))(1:52))|(1:(2:57|(1:59)(1:61))(1:63))|64|(2:(1:66)|(1:68)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1134583022 {
label = "IF [B:19:0x0049] THEN: R(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37))) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0049|if (r4.waypoints != null) goto L_0x004b\l}"];
subgraph cluster_Region_816662216 {
label = "R(1:(1:39)(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_54131799 {
label = "IF [B:21:0x004e] THEN: R(1:39) ELSE: R(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x004e|if (r4.waypoints.length \< 2) goto L_0x00a5\l}"];
subgraph cluster_Region_1246292177 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x00ac|throw new com.mapbox.core.exceptions.ServicesException(\"Waypoints must be a list of at least two indexes separated by ';'\")\l}"];
}
subgraph cluster_Region_198085210 {
label = "R(1:(2:26|(1:(2:(1:35)|(1:33))))(1:37)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1359939309 {
label = "IF [B:23:0x0059, B:25:0x006f] THEN: R(2:26|(1:(2:(1:35)|(1:33)))) ELSE: R(1:37) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0059|if (r4.waypoints[0].intValue() == 0) goto L_0x005b\l}"];
Node_25 [shape=record,label="{25\:\ 0x006f|ADDED_TO_REGION\l|if (r4.waypoints[r4.waypoints.length \- 1].intValue() == (r4.coordinates.size() \- 1)) goto L_0x0071\l}"];
subgraph cluster_Region_85231775 {
label = "R(2:26|(1:(2:(1:35)|(1:33))))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0071|int r0 = 1\l}"];
subgraph cluster_LoopRegion_1143715790 {
label = "LOOP:0: (1:(2:(1:35)|(1:33)))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0076|if (r0 \< (r4.waypoints.length \- 1)) goto L_0x0078\l}"];
subgraph cluster_Region_488145887 {
label = "R(1:(2:(1:35)|(1:33)))";
node [shape=record,color=blue];
subgraph cluster_Region_270266061 {
label = "R(2:(1:35)|(1:33))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1050736367 {
label = "IF [B:30:0x0080, B:32:0x0090] THEN: R(1:35) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0080|if (r4.waypoints[r0].intValue() \< 0) goto L_0x0095\l}"];
Node_32 [shape=record,label="{32\:\ 0x0090|ADDED_TO_REGION\l|if (r4.waypoints[r0].intValue() \>= r4.coordinates.size()) goto L_0x0095\l}"];
subgraph cluster_Region_1870146254 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x009c|throw new com.mapbox.core.exceptions.ServicesException(\"Waypoints index too large (no corresponding coordinate)\")\l}"];
}
}
subgraph cluster_Region_110458485 {
label = "R(1:33)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0092|LOOP_END\lLOOP:0: B:27:0x0072\-\>B:33:0x0092\l|r0++\l}"];
}
}
}
}
}
subgraph cluster_Region_1189700002 {
label = "R(1:37)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x00a4|throw new com.mapbox.core.exceptions.ServicesException(\"Waypoints must contain indices of the first and last coordinates\")\l}"];
}
}
}
}
}
}
subgraph cluster_IfRegion_523637979 {
label = "IF [B:41:0x00af] THEN: R(1:(2:44|(1:50)(1:49))(1:52)) ELSE: null";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x00af|if (r4.waypointNames != null) goto L_0x00b1\l}"];
subgraph cluster_Region_1351937142 {
label = "R(1:(2:44|(1:50)(1:49))(1:52))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2123666160 {
label = "IF [B:43:0x00b7] THEN: R(2:44|(1:50)(1:49)) ELSE: R(1:52)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x00b7|if (r4.waypointNames.length == r4.waypoints.length) goto L_0x00b9\l}"];
subgraph cluster_Region_2071417138 {
label = "R(2:44|(1:50)(1:49))";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x00b9|java.lang.String java.lang.String r0 = com.mapbox.core.utils.TextUtils.formatWaypointNames(r4.waypointNames)\l}"];
subgraph cluster_IfRegion_1099988379 {
label = "IF [B:45:0x00c3, B:47:0x00cb] THEN: R(1:50) ELSE: R(1:49)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x00c3|if (r0.isEmpty() == true) goto L_0x00d6\l}"];
Node_47 [shape=record,label="{47\:\ 0x00cb|ADDED_TO_REGION\l|if (r0.length() \<= 500) goto L_0x00d6\l}"];
subgraph cluster_Region_623093189 {
label = "R(1:50)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x00d6|waypointNames(r0)\l}"];
}
subgraph cluster_Region_1937574129 {
label = "R(1:49)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x00d5|throw new com.mapbox.core.exceptions.ServicesException(\"Waypoint names exceed 500 character limit.\")\l}"];
}
}
}
subgraph cluster_Region_1556241033 {
label = "R(1:52)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x00e1|throw new com.mapbox.core.exceptions.ServicesException(\"Number of waypoint names  must match  the number of waypoints provided.\")\l}"];
}
}
}
}
subgraph cluster_IfRegion_734198331 {
label = "IF [B:54:0x00e4] THEN: R(1:(2:57|(1:59)(1:61))(1:63)) ELSE: null";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x00e4|if (r4.approaches != null) goto L_0x00e6\l}"];
subgraph cluster_Region_1897660065 {
label = "R(1:(2:57|(1:59)(1:61))(1:63))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1790593779 {
label = "IF [B:56:0x00ef] THEN: R(2:57|(1:59)(1:61)) ELSE: R(1:63)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x00ef|if (r4.approaches.length == r4.coordinates.size()) goto L_0x00f1\l}"];
subgraph cluster_Region_1533818425 {
label = "R(2:57|(1:59)(1:61))";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x00f1|java.lang.String java.lang.String r0 = com.mapbox.core.utils.TextUtils.formatApproaches(r4.approaches)\l}"];
subgraph cluster_IfRegion_103571307 {
label = "IF [B:58:0x00f7] THEN: R(1:59) ELSE: R(1:61)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x00f7|if (r0 != null) goto L_0x00f9\l}"];
subgraph cluster_Region_702627520 {
label = "R(1:59)";
node [shape=record,color=blue];
Node_59 [shape=record,label="{59\:\ 0x00f9|approaches(r0)\l}"];
}
subgraph cluster_Region_618812223 {
label = "R(1:61)";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x0104|throw new com.mapbox.core.exceptions.ServicesException(\"All approaches values must be one of curb, unrestricted\")\l}"];
}
}
}
subgraph cluster_Region_407729850 {
label = "R(1:63)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x010c|throw new com.mapbox.core.exceptions.ServicesException(\"Number of approach elements must match number of coordinates provided.\")\l}"];
}
}
}
}
Node_64 [shape=record,label="{64\:\ 0x010d|coordinates(formatCoordinates(r4.coordinates))\ltimestamps(com.mapbox.core.utils.TextUtils.join(\";\", r4.timestamps))\lannotations(com.mapbox.core.utils.TextUtils.join(\",\", r4.annotations))\lradiuses(com.mapbox.core.utils.TextUtils.join(\";\", r4.radiuses))\lwaypoints(com.mapbox.core.utils.TextUtils.join(\";\", r4.waypoints))\lcom.mapbox.api.matching.v5.MapboxMapMatching com.mapbox.api.matching.p010v5.MapboxMapMatching r0 = autoBuild()\l}"];
subgraph cluster_Region_906849764 {
label = "R(2:(1:66)|(1:68))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1086188525 {
label = "IF [B:65:0x014e] THEN: R(1:66) ELSE: null";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x014e|if (com.mapbox.core.utils.MapboxUtils.isAccessTokenValid(r0.accessToken()) == true) goto L_0x0150\l}"];
subgraph cluster_Region_1874308704 {
label = "R(1:66)";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0150|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_249054212 {
label = "R(1:68)";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x0158|throw new com.mapbox.core.exceptions.ServicesException(\"Using Mapbox Services requires setting a valid access token.\")\l}"];
}
}
}
subgraph cluster_Region_940934475 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0046|throw new com.mapbox.core.exceptions.ServicesException(\"There must be as many timestamps as there are coordinates.\")\l}"];
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001b}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0027}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002f}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0033}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x003f}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0047}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x004b}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0050}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x005b}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0072|LOOP_START\lPHI: r0 \l  PHI: (r0v47 int) = (r0v46 int), (r0v49 int) binds: [B:26:0x0071, B:33:0x0092] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:27:0x0072\-\>B:33:0x0092\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0078}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0082}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0095}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x009d}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x00a5}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x00ad}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x00b1}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x00c5}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x00ce}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x00da}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x00e2}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x00e6}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x00fd}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x0105}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0151}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x0159}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x0161}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x0095|SYNTHETIC\l}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0095|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_75 [shape=record,color=red,label="{75\:\ 0x00ad|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public com.mapbox.api.matching.v5.MapboxMapMatching com.mapbox.api.matching.v5.MapboxMapMatching.Builder.build((r4v0 'this' com.mapbox.api.matching.v5.MapboxMapMatching$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_71;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_71;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_69;
Node_7 -> Node_8;
Node_7 -> Node_12[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_40[style=dashed];
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_38;
Node_23 -> Node_24;
Node_23 -> Node_36[style=dashed];
Node_25 -> Node_26;
Node_25 -> Node_36[style=dashed];
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_28 -> Node_75[style=dashed];
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_74;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_73;
Node_33 -> Node_27;
Node_41 -> Node_42;
Node_41 -> Node_53[style=dashed];
Node_43 -> Node_44;
Node_43 -> Node_51[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_50 -> Node_53;
Node_54 -> Node_55;
Node_54 -> Node_64[style=dashed];
Node_56 -> Node_57;
Node_56 -> Node_62[style=dashed];
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_58 -> Node_60[style=dashed];
Node_59 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_65 -> Node_67[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_46 -> Node_47;
Node_48 -> Node_49;
Node_51 -> Node_52;
Node_53 -> Node_54;
Node_55 -> Node_56;
Node_60 -> Node_61;
Node_62 -> Node_63;
Node_67 -> Node_68;
Node_69 -> Node_70;
Node_71 -> Node_72;
Node_73 -> Node_34;
Node_74 -> Node_34;
Node_75 -> Node_40;
}

