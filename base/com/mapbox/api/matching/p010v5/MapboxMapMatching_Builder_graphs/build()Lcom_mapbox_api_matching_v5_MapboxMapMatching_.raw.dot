digraph "CFG forcom.mapbox.api.matching.v5.MapboxMapMatching.Builder.build()Lcom\/mapbox\/api\/matching\/v5\/MapboxMapMatching;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0161 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x0006: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:74:0x0161 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r0 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x000f: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:72:0x0159 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r0 I:java.lang.Double[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.radiuses java.lang.Double[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r0 I:java.lang.Double[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.radiuses java.lang.Double[] \l0x001d: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x001e: IGET  (r2 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x0020: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"There must be as many radiuses as there are coordinates.\" \l0x002b: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.timestamps java.lang.String[] \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0047 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.timestamps java.lang.String[] \l0x0035: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0036: IGET  (r2 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x0038: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0041: CONST_STR  (r1 I:java.lang.String) =  \"There must be as many timestamps as there are coordinates.\" \l0x0043: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: IGET  (r0 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00ad \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: IGET  (r0 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x004d: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|0x004e: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:40:0x00a5 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|0x0050: IGET  (r0 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x0052: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0053: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0055: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x009d \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: IGET  (r0 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x005d: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x005f: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0060: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0061: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0062: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0064: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0068: IGET  (r1 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x006a: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x006e: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x006f|0x006f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x009d \l}"];
Node_28 [shape=record,label="{28\:\ 0x0071|0x0071: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0072|0x0072: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x0074: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0075: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0076|0x0076: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:42:0x00ad \l}"];
Node_31 [shape=record,label="{31\:\ 0x0078|0x0078: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x007a: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x007c: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x0080|0x0080: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:36:0x0095 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0082|0x0082: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x0084: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0086: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x008a: IGET  (r3 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x008c: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_34 [shape=record,label="{34\:\ 0x0090|0x0090: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:36:0x0095 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0092|0x0092: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0095|0x0095: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0097: CONST_STR  (r1 I:java.lang.String) =  \"Waypoints index too large (no corresponding coordinate)\" \l0x0099: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_37 [shape=record,label="{37\:\ 0x009c|0x009c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_38 [shape=record,label="{38\:\ 0x009d|0x009d: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x009f: CONST_STR  (r1 I:java.lang.String) =  \"Waypoints must contain indices of the first and last coordinates\" \l0x00a1: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_39 [shape=record,label="{39\:\ 0x00a4|0x00a4: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00a5|0x00a5: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x00a7: CONST_STR  (r1 I:java.lang.String) =  \"Waypoints must be a list of at least two indexes separated by ';'\" \l0x00a9: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x00ac|0x00ac: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00ad|0x00ad: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypointNames java.lang.String[] \l}"];
Node_43 [shape=record,label="{43\:\ 0x00af|0x00af: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x00e2 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00b1|0x00b1: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypointNames java.lang.String[] \l0x00b3: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x00b4: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x00b6: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00b7|0x00b7: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00da \l}"];
Node_46 [shape=record,label="{46\:\ 0x00b9|0x00b9: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypointNames java.lang.String[] \l0x00bb: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String[]) com.mapbox.core.utils.TextUtils.formatWaypointNames(java.lang.String[]):java.lang.String type: STATIC \l0x00bf: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_47 [shape=record,label="{47\:\ 0x00c3|0x00c3: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x00d6 \l}"];
Node_48 [shape=record,label="{48\:\ 0x00c5|0x00c5: INVOKE  (r1 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x00c9: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (500(0x1f4, float:7.0E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_49 [shape=record,label="{49\:\ 0x00cb|0x00cb: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:51:0x00ce \l}"];
Node_51 [shape=record,label="{51\:\ 0x00ce|0x00ce: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x00d0: CONST_STR  (r1 I:java.lang.String) =  \"Waypoint names exceed 500 character limit.\" \l0x00d2: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_52 [shape=record,label="{52\:\ 0x00d5|0x00d5: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_53 [shape=record,label="{53\:\ 0x00d6|0x00d6: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypointNames(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l}"];
Node_54 [shape=record,label="{54\:\ 0x00da|0x00da: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x00dc: CONST_STR  (r1 I:java.lang.String) =  \"Number of waypoint names  must match  the number of waypoints provided.\" \l0x00de: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_55 [shape=record,label="{55\:\ 0x00e1|0x00e1: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00e2|0x00e2: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.approaches java.lang.String[] \l}"];
Node_57 [shape=record,label="{57\:\ 0x00e4|0x00e4: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x010d \l}"];
Node_58 [shape=record,label="{58\:\ 0x00e6|0x00e6: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.approaches java.lang.String[] \l0x00e8: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x00e9: IGET  (r1 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x00eb: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_59 [shape=record,label="{59\:\ 0x00ef|0x00ef: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0105 \l}"];
Node_60 [shape=record,label="{60\:\ 0x00f1|0x00f1: IGET  (r0 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.approaches java.lang.String[] \l0x00f3: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String[]) com.mapbox.core.utils.TextUtils.formatApproaches(java.lang.String[]):java.lang.String type: STATIC \l}"];
Node_61 [shape=record,label="{61\:\ 0x00f7|0x00f7: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x00fd \l}"];
Node_62 [shape=record,label="{62\:\ 0x00f9|0x00f9: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.approaches(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l}"];
Node_63 [shape=record,label="{63\:\ 0x00fd|0x00fd: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x00ff: CONST_STR  (r1 I:java.lang.String) =  \"All approaches values must be one of curb, unrestricted\" \l0x0101: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_64 [shape=record,label="{64\:\ 0x0104|0x0104: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0105|0x0105: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0107: CONST_STR  (r1 I:java.lang.String) =  \"Number of approach elements must match number of coordinates provided.\" \l0x0109: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_66 [shape=record,label="{66\:\ 0x010c|0x010c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_67 [shape=record,label="{67\:\ 0x010d|0x010d: IGET  (r0 I:java.util.List\<com.mapbox.geojson.Point\>) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates java.util.List \l0x010f: INVOKE  (r0 I:java.lang.String) = (r0 I:java.util.List) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.formatCoordinates(java.util.List):java.lang.String type: STATIC \l0x0113: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.coordinates(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l0x0116: CONST_STR  (r0 I:java.lang.String) =  \";\" \l0x0118: IGET  (r1 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.timestamps java.lang.String[] \l0x011a: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l0x011e: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.timestamps(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l0x0121: CONST_STR  (r0 I:java.lang.String) =  \",\" \l0x0123: IGET  (r1 I:java.lang.String[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.annotations java.lang.String[] \l0x0125: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l0x0129: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.annotations(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l0x012c: CONST_STR  (r0 I:java.lang.String) =  \";\" \l0x012e: IGET  (r1 I:java.lang.Double[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.radiuses java.lang.Double[] \l0x0130: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l0x0134: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.radiuses(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l0x0137: CONST_STR  (r0 I:java.lang.String) =  \";\" \l0x0139: IGET  (r1 I:java.lang.Integer[]) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints java.lang.Integer[] \l0x013b: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l0x013f: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder)\l  (r0 I:java.lang.String)\l com.mapbox.api.matching.v5.MapboxMapMatching.Builder.waypoints(java.lang.String):com.mapbox.api.matching.v5.MapboxMapMatching$Builder type: VIRTUAL \l0x0142: INVOKE  (r0 I:com.mapbox.api.matching.v5.MapboxMapMatching) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder) com.mapbox.api.matching.v5.MapboxMapMatching.Builder.autoBuild():com.mapbox.api.matching.v5.MapboxMapMatching type: VIRTUAL \l0x0146: INVOKE  (r1 I:java.lang.String) = (r0 I:com.mapbox.api.matching.v5.MapboxMapMatching) com.mapbox.api.matching.v5.MapboxMapMatching.accessToken():java.lang.String type: VIRTUAL \l0x014a: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String) com.mapbox.core.utils.MapboxUtils.isAccessTokenValid(java.lang.String):boolean type: STATIC \l}"];
Node_68 [shape=record,label="{68\:\ 0x014e|0x014e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0151 \l}"];
Node_69 [shape=record,label="{69\:\ 0x0150|0x0150: RETURN  (r0 I:com.mapbox.api.matching.v5.MapboxMapMatching) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0151|0x0151: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0153: CONST_STR  (r1 I:java.lang.String) =  \"Using Mapbox Services requires setting a valid access token.\" \l0x0155: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_71 [shape=record,label="{71\:\ 0x0158|0x0158: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_72 [shape=record,label="{72\:\ 0x0159|0x0159: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x015b: CONST_STR  (r1 I:java.lang.String) =  \"Maximum of 100 coordinates are allowed for this API.\" \l0x015d: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_73 [shape=record,label="{73\:\ 0x0160|0x0160: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_74 [shape=record,label="{74\:\ 0x0161|0x0161: NEW_INSTANCE  (r0 I:com.mapbox.core.exceptions.ServicesException) =  com.mapbox.core.exceptions.ServicesException \l0x0163: CONST_STR  (r1 I:java.lang.String) =  \"At least two coordinates must be provided with your API request.\" \l0x0165: INVOKE  \l  (r0 I:com.mapbox.core.exceptions.ServicesException)\l  (r1 I:java.lang.String)\l com.mapbox.core.exceptions.ServicesException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_75 [shape=record,label="{75\:\ 0x0168|0x0168: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.mapbox.api.matching.v5.MapboxMapMatching com.mapbox.api.matching.v5.MapboxMapMatching.Builder.build((r4 'this' I:com.mapbox.api.matching.v5.MapboxMapMatching$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_74;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_74;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_72;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_42;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_40;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_38;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_42;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_29;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_56;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_54;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_53;
Node_48 -> Node_49;
Node_49 -> Node_51;
Node_49 -> Node_53[style=dashed];
Node_51 -> Node_52;
Node_53 -> Node_56;
Node_54 -> Node_55;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_67;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_65;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_67;
Node_63 -> Node_64;
Node_65 -> Node_66;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_70 -> Node_71;
Node_72 -> Node_73;
Node_74 -> Node_75;
}

