digraph "CFG forcom.mapbox.api.matching.v5.MapboxMapMatching.executeCall()Lretrofit2\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:retrofit2.Call) = (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching) com.mapbox.api.matching.v5.MapboxMapMatching.getCall():retrofit2.Call type: VIRTUAL \l0x0004: INVOKE  (r0 I:retrofit2.Response) = (r0 I:retrofit2.Call) retrofit2.Call.execute():retrofit2.Response type: INTERFACE \l0x0008: INVOKE  (r1 I:boolean) = (r0 I:retrofit2.Response) retrofit2.Response.isSuccessful():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0074 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.Object) = (r0 I:retrofit2.Response) retrofit2.Response.body():java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0078 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:retrofit2.Response) retrofit2.Response.body():java.lang.Object type: VIRTUAL \l0x0018: CHECK_CAST  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse) = (com.mapbox.api.matching.v5.models.MapMatchingResponse) (r1 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:java.util.List) = \l  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse)\l com.mapbox.api.matching.v5.models.MapMatchingResponse.matchings():java.util.List type: VIRTUAL \l0x001e: INVOKE  (r1 I:boolean) = (r1 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0078 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r1 I:java.lang.Object) = (r0 I:retrofit2.Response) retrofit2.Response.body():java.lang.Object type: VIRTUAL \l0x0028: CHECK_CAST  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse) = (com.mapbox.api.matching.v5.models.MapMatchingResponse) (r1 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder) = \l  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse)\l com.mapbox.api.matching.v5.models.MapMatchingResponse.toBuilder():com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder type: VIRTUAL \l0x002e: INVOKE  (r2 I:java.util.List) = \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching)\l  (r0 I:retrofit2.Response)\l com.mapbox.api.matching.v5.MapboxMapMatching.generateRouteOptions(retrofit2.Response):java.util.List type: DIRECT \l0x0032: INVOKE  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder) = \l  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder)\l  (r2 I:java.util.List)\l com.mapbox.api.matching.v5.models.MapMatchingResponse.Builder.matchings(java.util.List):com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder type: VIRTUAL \l0x0036: INVOKE  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse) = \l  (r1 I:com.mapbox.api.matching.v5.models.MapMatchingResponse$Builder)\l com.mapbox.api.matching.v5.models.MapMatchingResponse.Builder.build():com.mapbox.api.matching.v5.models.MapMatchingResponse type: VIRTUAL \l0x003a: NEW_INSTANCE  (r2 I:okhttp3.Response$Builder) =  okhttp3.Response$Builder \l0x003c: INVOKE  (r2 I:okhttp3.Response$Builder) okhttp3.Response.Builder.\<init\>():void type: DIRECT \l0x003f: CONST  (r3 I:?[int, float, short, byte, char]) = (200(0xc8, float:2.8E\-43) ?[int, float, short, byte, char]) \l0x0041: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:int) okhttp3.Response.Builder.code(int):okhttp3.Response$Builder type: VIRTUAL \l0x0045: CONST_STR  (r3 I:java.lang.String) =  \"OK\" \l0x0047: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:java.lang.String) okhttp3.Response.Builder.message(java.lang.String):okhttp3.Response$Builder type: VIRTUAL \l0x004b: INVOKE  (r3 I:okhttp3.Response) = (r0 I:retrofit2.Response) retrofit2.Response.raw():okhttp3.Response type: VIRTUAL \l0x004f: INVOKE  (r3 I:okhttp3.Protocol) = (r3 I:okhttp3.Response) okhttp3.Response.protocol():okhttp3.Protocol type: VIRTUAL \l0x0053: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Protocol) okhttp3.Response.Builder.protocol(okhttp3.Protocol):okhttp3.Response$Builder type: VIRTUAL \l0x0057: INVOKE  (r3 I:okhttp3.Headers) = (r0 I:retrofit2.Response) retrofit2.Response.headers():okhttp3.Headers type: VIRTUAL \l0x005b: INVOKE  (r2 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r3 I:okhttp3.Headers) okhttp3.Response.Builder.headers(okhttp3.Headers):okhttp3.Response$Builder type: VIRTUAL \l0x005f: INVOKE  (r0 I:okhttp3.Response) = (r0 I:retrofit2.Response) retrofit2.Response.raw():okhttp3.Response type: VIRTUAL \l0x0063: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Response) okhttp3.Response.request():okhttp3.Request type: VIRTUAL \l0x0067: INVOKE  (r0 I:okhttp3.Response$Builder) = (r2 I:okhttp3.Response$Builder), (r0 I:okhttp3.Request) okhttp3.Response.Builder.request(okhttp3.Request):okhttp3.Response$Builder type: VIRTUAL \l0x006b: INVOKE  (r0 I:okhttp3.Response) = (r0 I:okhttp3.Response$Builder) okhttp3.Response.Builder.build():okhttp3.Response type: VIRTUAL \l0x006f: INVOKE  (r0 I:retrofit2.Response) = (r1 I:java.lang.Object), (r0 I:okhttp3.Response) retrofit2.Response.success(java.lang.Object, okhttp3.Response):retrofit2.Response type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0073|0x0073: RETURN  \l  (r0 I:retrofit2.Response\<com.mapbox.api.matching.v5.models.MapMatchingResponse\>)\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0074|0x0074: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: INVOKE  \l  (r4 I:com.mapbox.api.matching.v5.MapboxMapMatching)\l  (r1 I:retrofit2.Callback)\l  (r0 I:retrofit2.Response)\l com.mapbox.api.matching.v5.MapboxMapMatching.errorDidOccur(retrofit2.Callback, retrofit2.Response):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0078|0x0078: RETURN  \l  (r0 I:retrofit2.Response\<com.mapbox.api.matching.v5.models.MapMatchingResponse\>)\l \l}"];
MethodNode[shape=record,label="{public retrofit2.Response\<com.mapbox.api.matching.v5.models.MapMatchingResponse\> com.mapbox.api.matching.v5.MapboxMapMatching.executeCall((r4 'this' I:com.mapbox.api.matching.v5.MapboxMapMatching A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lretrofit2\/Response\<, Lcom\/mapbox\/api\/matching\/v5\/models\/MapMatchingResponse;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

