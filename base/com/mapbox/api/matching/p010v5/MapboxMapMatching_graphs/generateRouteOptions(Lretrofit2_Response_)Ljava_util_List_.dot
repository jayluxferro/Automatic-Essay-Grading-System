digraph "CFG forcom.mapbox.api.matching.v5.MapboxMapMatching.generateRouteOptions(Lretrofit2\/Response;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r5 = r5.body().matchings()\ljava.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.Iterator r5 = r5.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r5.hasNext() == false) goto L_0x00d2\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l|r0.add(r5.next().toBuilder().routeOptions(com.mapbox.api.directions.p008v5.models.RouteOptions.builder().profile(profile()).coordinates(formatCoordinates(coordinates())).annotations(annotations()).approaches(approaches()).language(language()).radiuses(radiuses()).user(user()).voiceInstructions(voiceInstructions()).bannerInstructions(bannerInstructions()).roundaboutExits(roundaboutExits()).geometries(geometries()).overview(overview()).steps(steps()).voiceUnits(voiceUnits()).requestUuid(PLACEHOLDER_UUID).accessToken(accessToken()).approaches(approaches()).waypointNames(waypointNames()).baseUrl(baseUrl()).build()).build())\l}"];
Node_4 [shape=record,label="{4\:\ 0x00d2|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x00d2|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<com.mapbox.api.matching.v5.models.MapMatchingMatching\> com.mapbox.api.matching.v5.MapboxMapMatching.generateRouteOptions((r4v0 'this' com.mapbox.api.matching.v5.MapboxMapMatching A[IMMUTABLE_TYPE, THIS]), (r5v0 retrofit2.Response\<com.mapbox.api.matching.v5.models.MapMatchingResponse\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/Response\<, Lcom\/mapbox\/api\/matching\/v5\/models\/MapMatchingResponse;, \>;), Ljava\/util\/List\<, Lcom\/mapbox\/api\/matching\/v5\/models\/MapMatchingMatching;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

