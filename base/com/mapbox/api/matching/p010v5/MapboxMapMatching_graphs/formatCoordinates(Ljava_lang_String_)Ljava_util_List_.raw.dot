digraph "CFG forcom.mapbox.api.matching.v5.MapboxMapMatching.formatCoordinates(Ljava\/lang\/String;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \";\" \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: INVOKE  (r10 I:java.lang.String[]) = \l  (r10 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r1 I:int)\l java.lang.String.split(java.lang.String, int):java.lang.String[] type: VIRTUAL \l0x0007: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0009: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000c: ARRAY_LENGTH  (r2 I:int) = (r10 I:?[]) \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l \l0x0013: CONST_STR  (r6 I:java.lang.String) =  \",\" \l0x0015: INVOKE  (r5 I:java.lang.String[]) = \l  (r5 I:java.lang.String)\l  (r6 I:java.lang.String)\l  (r1 I:int)\l java.lang.String.split(java.lang.String, int):java.lang.String[] type: VIRTUAL \l0x0019: AGET  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x001b: INVOKE  (r6 I:java.lang.Double) = (r6 I:java.lang.String) java.lang.Double.valueOf(java.lang.String):java.lang.Double type: STATIC \l0x001f: INVOKE  (r6 I:double) = (r6 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0023: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0024: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r5 I:java.lang.Double) = (r5 I:java.lang.String) java.lang.Double.valueOf(java.lang.String):java.lang.Double type: STATIC \l0x002a: INVOKE  (r8 I:double) = (r5 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x002e: INVOKE  (r5 I:com.mapbox.geojson.Point) = (r6 I:double), (r8 I:double) com.mapbox.geojson.Point.fromLngLat(double, double):com.mapbox.geojson.Point type: STATIC \l0x0032: INVOKE  (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0035: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0038|0x0038: RETURN  (r0 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<com.mapbox.geojson.Point\> com.mapbox.api.matching.v5.MapboxMapMatching.formatCoordinates((r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

