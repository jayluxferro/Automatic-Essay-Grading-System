digraph "CFG forcom.mapbox.api.matching.v5.AutoValue_MapboxMapMatching.hashCode()I" {
subgraph cluster_Region_1643577931 {
label = "R(4:0|60|(1:62)|64)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
Node_60 [shape=record,label="{60\:\ 0x0106|PHI: r3 \l  PHI: (r3v35 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = ((((((((((((((((((((((((((((((((((((((r4.clientAppName == null ? 0 : r4.clientAppName.hashCode()) ^ 1000003) * 1000003) ^ r4.accessToken.hashCode()) * 1000003) ^ (r4.tidy == null ? 0 : r4.tidy.hashCode())) * 1000003) ^ r4.user.hashCode()) * 1000003) ^ r4.profile.hashCode()) * 1000003) ^ r4.coordinates.hashCode()) * 1000003) ^ (r4.geometries == null ? 0 : r4.geometries.hashCode())) * 1000003) ^ (r4.radiuses == null ? 0 : r4.radiuses.hashCode())) * 1000003) ^ (r4.steps == null ? 0 : r4.steps.hashCode())) * 1000003) ^ (r4.overview == null ? 0 : r4.overview.hashCode())) * 1000003) ^ (r4.timestamps == null ? 0 : r4.timestamps.hashCode())) * 1000003) ^ (r4.annotations == null ? 0 : r4.annotations.hashCode())) * 1000003) ^ (r4.language == null ? 0 : r4.language.hashCode())) * 1000003) ^ (r4.roundaboutExits == null ? 0 : r4.roundaboutExits.hashCode())) * 1000003) ^ (r4.bannerInstructions == null ? 0 : r4.bannerInstructions.hashCode())) * 1000003) ^ (r4.voiceInstructions == null ? 0 : r4.voiceInstructions.hashCode())) * 1000003) ^ (r4.voiceUnits == null ? 0 : r4.voiceUnits.hashCode())) * 1000003) ^ (r4.waypoints == null ? 0 : r4.waypoints.hashCode())) * 1000003) ^ (r4.waypointNames == null ? 0 : r4.waypointNames.hashCode())) * 1000003\l}"];
subgraph cluster_IfRegion_1711179601 {
label = "IF [B:61:0x010b] THEN: R(1:62) ELSE: null";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x010b|if (r4.approaches != null) goto L_0x010e\l}"];
subgraph cluster_Region_731559382 {
label = "R(1:62)";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x010e|int r1 = r4.approaches.hashCode()\l}"];
}
}
Node_64 [shape=record,label="{64\:\ 0x011e|RETURN\l|return ((r0 ^ r1) * 1000003) ^ r4.baseUrl.hashCode()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0003}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0020}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0022}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0028|PHI: r3 \l  PHI: (r3v3 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0048}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x004a}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x004c}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0052|PHI: r3 \l  PHI: (r3v11 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0057}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0059}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x005b}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0061|PHI: r3 \l  PHI: (r3v13 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0066}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0068}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x006a}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0070|PHI: r3 \l  PHI: (r3v15 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0075}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0077}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0079}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x007f|PHI: r3 \l  PHI: (r3v17 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0084}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0086}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0088}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x008e|PHI: r3 \l  PHI: (r3v19 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0093}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0095}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0097}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x009d|PHI: r3 \l  PHI: (r3v21 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x00a2}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x00a4}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x00a6}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x00ac|PHI: r3 \l  PHI: (r3v23 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x00b1}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x00b3}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x00b5}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x00bb|PHI: r3 \l  PHI: (r3v25 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x00c0}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x00c2}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x00c4}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x00ca|PHI: r3 \l  PHI: (r3v27 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x00cf}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x00d1}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x00d3}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x00d9|PHI: r3 \l  PHI: (r3v29 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x00de}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x00e0}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x00e2}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x00e8|PHI: r3 \l  PHI: (r3v31 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x00ed}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x00ef}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x00f1}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x00f7|PHI: r3 \l  PHI: (r3v33 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x00fc}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x00fe}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0100}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x0114|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v5 int) binds: [B:61:0x010b, B:62:0x010e] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public int com.mapbox.api.matching.v5.AutoValue_MapboxMapMatching.hashCode((r4v0 'this' com.mapbox.api.matching.v5.AutoValue_MapboxMapMatching A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_61 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_43;
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_53 -> Node_55;
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_57 -> Node_59;
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_63 -> Node_64;
}

