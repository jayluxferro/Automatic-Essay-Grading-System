digraph "CFG forcom.mapbox.api.matrix.v1.MapboxMatrix.Builder.build()Lcom\/mapbox\/api\/matrix\/v1\/MapboxMatrix;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.coordinates == null) goto L_0x0055\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r2.coordinates.size() \< 2) goto L_0x0055\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r2.coordinates.size() \> 25) goto L_0x004d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|coordinates(formatCoordinates(r2.coordinates))\lsources(com.mapbox.core.utils.TextUtils.join(\";\", r2.sources))\ldestinations(com.mapbox.core.utils.TextUtils.join(\";\", r2.destinations))\lcom.mapbox.api.matrix.v1.MapboxMatrix r0 = autoBuild()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|if (com.mapbox.core.utils.MapboxUtils.isAccessTokenValid(r0.accessToken()) == false) goto L_0x0045\l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0045}"];
Node_10 [shape=record,label="{10\:\ 0x004c|throw new com.mapbox.core.exceptions.ServicesException(\"Using Mapbox Services requires setting a valid access token.\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d}"];
Node_12 [shape=record,label="{12\:\ 0x0054|throw new com.mapbox.core.exceptions.ServicesException(\"Maximum of 25 coordinates are allowed for this API.\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055}"];
Node_14 [shape=record,label="{14\:\ 0x005c|throw new com.mapbox.core.exceptions.ServicesException(\"At least two coordinates must be provided with your API request.\")\l}"];
MethodNode[shape=record,label="{public com.mapbox.api.matrix.v1.MapboxMatrix com.mapbox.api.matrix.v1.MapboxMatrix.Builder.build((r2v0 'this' com.mapbox.api.matrix.v1.MapboxMatrix$Builder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

