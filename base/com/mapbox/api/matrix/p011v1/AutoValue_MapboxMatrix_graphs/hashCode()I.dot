digraph "CFG forcom.mapbox.api.matrix.v1.AutoValue_MapboxMatrix.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.clientAppName != null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|int r0 = r4.clientAppName.hashCode()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 int) = (r0v18 int), (r0v19 int) binds: [B:3:0x0007, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (((((((((r0 ^ 1000003) * 1000003) ^ r4.user.hashCode()) * 1000003) ^ r4.coordinates.hashCode()) * 1000003) ^ r4.accessToken.hashCode()) * 1000003) ^ r4.profile.hashCode()) * 1000003\l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|if (r4.sources != null) goto L_0x003d\l}"];
Node_6 [shape=record,label="{6\:\ 0x003b|r3 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|int r3 = r4.sources.hashCode()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|PHI: r3 \l  PHI: (r3v9 int) = (r3v12 int), (r3v13 int) binds: [B:7:0x003d, B:6:0x003b] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ r3) * 1000003\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|if (r4.destinations != null) goto L_0x004b\l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|int r1 = r4.destinations.hashCode()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v5 int) binds: [B:9:0x0048, B:10:0x004b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x005b|RETURN\l|return ((r0 ^ r1) * 1000003) ^ r4.baseUrl.hashCode()\l}"];
MethodNode[shape=record,label="{public int com.mapbox.api.matrix.v1.AutoValue_MapboxMatrix.hashCode((r4v0 'this' com.mapbox.api.matrix.v1.AutoValue_MapboxMatrix A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
}

