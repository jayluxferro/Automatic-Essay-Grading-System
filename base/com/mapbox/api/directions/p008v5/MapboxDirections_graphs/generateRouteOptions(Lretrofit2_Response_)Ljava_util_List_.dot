digraph "CFG forcom.mapbox.api.directions.v5.MapboxDirections.generateRouteOptions(Lretrofit2\/Response;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r0 = r6.body().routes()\ljava.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r0 = r0.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r0.hasNext() == false) goto L_0x00ee\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l|r1.add(r0.next().toBuilder().routeOptions(com.mapbox.api.directions.p008v5.models.RouteOptions.builder().profile(profile()).coordinates(coordinates()).waypointNames(waypointNames()).continueStraight(continueStraight()).annotations(annotation()).approaches(approaches()).bearings(bearing()).alternatives(alternatives()).language(language()).radiuses(radius()).user(user()).voiceInstructions(voiceInstructions()).bannerInstructions(bannerInstructions()).roundaboutExits(roundaboutExits()).geometries(geometries()).overview(overview()).steps(steps()).exclude(exclude()).voiceUnits(voiceUnits()).accessToken(accessToken()).requestUuid(r6.body().uuid()).baseUrl(baseUrl()).build()).build())\l}"];
Node_4 [shape=record,label="{4\:\ 0x00ee|RETURN\l|return r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x00ee|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<com.mapbox.api.directions.v5.models.DirectionsRoute\> com.mapbox.api.directions.v5.MapboxDirections.generateRouteOptions((r5v0 'this' com.mapbox.api.directions.v5.MapboxDirections A[IMMUTABLE_TYPE, THIS]), (r6v0 retrofit2.Response\<com.mapbox.api.directions.v5.models.DirectionsResponse\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lretrofit2\/Response\<, Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsResponse;, \>;), Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/DirectionsRoute;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

