digraph "CFG forcom.mapbox.api.directions.v5.models.AutoValue_BannerText.\<init\>(Ljava\/lang\/String;Ljava\/util\/List;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/Double;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l  (r1 I:java.lang.String)\l  (r2 I:java.util.List)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Double)\l  (r6 I:java.lang.String)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.\<init\>(java.lang.String, java.util.List, java.lang.String, java.lang.String, java.lang.Double, java.lang.String):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.api.directions.v5.models.AutoValue_BannerText.\<init\>((r0 'this' I:com.mapbox.api.directions.v5.models.AutoValue_BannerText A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.util.List\<com.mapbox.api.directions.v5.models.BannerComponents\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/List\<, Lcom\/mapbox\/api\/directions\/v5\/models\/BannerComponents;, \>;, Ljava\/lang\/String;, Ljava\/lang\/String;, Ljava\/lang\/Double;, Ljava\/lang\/String;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

