digraph "CFG forcom.mapbox.api.directions.v5.models.$AutoValue_BannerText.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.text java.lang.String \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.text java.lang.String \l0x0009: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1000003(0xf4243, float:1.401303E\-39) ?[int, float, short, byte, char])\l \l0x0010: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l0x0011: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x0013: IGET  (r3 I:java.util.List\<com.mapbox.api.directions.v5.models.BannerComponents\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.components java.util.List \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IGET  (r3 I:java.util.List\<com.mapbox.api.directions.v5.models.BannerComponents\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.components java.util.List \l0x001b: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.hashCode():int type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r3 I:?[int, boolean, short, byte, char]) \l0x0020: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x0022: IGET  (r3 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.type java.lang.String \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IGET  (r3 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.type java.lang.String \l0x002a: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r3 I:?[int, boolean, short, byte, char]) \l0x002f: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x0031: IGET  (r3 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.modifier java.lang.String \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IGET  (r3 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.modifier java.lang.String \l0x0039: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r3 I:?[int, boolean, short, byte, char]) \l0x003e: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x0040: IGET  (r3 I:java.lang.Double) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.degrees java.lang.Double \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0046 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: IGET  (r3 I:java.lang.Double) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.degrees java.lang.Double \l0x0048: INVOKE  (r3 I:int) = (r3 I:java.lang.Double) java.lang.Double.hashCode():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|0x004c: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r3 I:?[int, boolean, short, byte, char]) \l0x004d: ARITH  (r0 I:int) = (r0 I:int) * (r2 I:int) \l0x004f: IGET  (r2 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.drivingSide java.lang.String \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0054 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|0x0054: IGET  (r1 I:java.lang.String) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText)\l com.mapbox.api.directions.v5.models.$AutoValue_BannerText.drivingSide java.lang.String \l0x0056: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|0x005a: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005b|0x005b: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int com.mapbox.api.directions.v5.models.$AutoValue_BannerText.hashCode((r4 'this' I:com.mapbox.api.directions.v5.models.$AutoValue_BannerText A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
}

