digraph "CFG forcom.mapbox.api.directions.v5.models.$AutoValue_BannerInstructions.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (((int) ((java.lang.Double.doubleToLongBits(r4.distanceAlongGeometry) \>\>\> 32) ^ java.lang.Double.doubleToLongBits(r4.distanceAlongGeometry))) ^ 1000003) * 1000003\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|if (r4.primary != null) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|r2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|int r2 = r4.primary.hashCode()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|PHI: r2 \l  PHI: (r2v4 int) = (r2v11 int), (r2v12 int) binds: [B:3:0x001e, B:2:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ r2) * 1000003\l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|if (r4.secondary != null) goto L_0x002d\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|r2 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|int r2 = r4.secondary.hashCode()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|PHI: r2 \l  PHI: (r2v6 int) = (r2v8 int), (r2v9 int) binds: [B:7:0x002d, B:6:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = (r0 ^ r2) * 1000003\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|if (r4.sub != null) goto L_0x003b\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|int r3 = r4.sub.hashCode()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x0038, B:10:0x003b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|RETURN\l|return r0 ^ r3\l}"];
MethodNode[shape=record,label="{public int com.mapbox.api.directions.v5.models.$AutoValue_BannerInstructions.hashCode((r4v0 'this' com.mapbox.api.directions.v5.models.$AutoValue_BannerInstructions A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
}

