digraph "CFG forcom.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.mapbox.api.directions.v5.models.StepIntersection \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x00ae \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CHECK_CAST  (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) = (com.mapbox.api.directions.v5.models.StepIntersection) (r5 I:?[OBJECT, ARRAY]) \l0x000b: IGET  (r1 I:double[]) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.rawLocation double[] \l0x000d: INSTANCE_OF  (r3 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0012: CHECK_CAST  (r3 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection) = (com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection) (r3 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r3 I:double[]) = \l  (r3 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.rawLocation double[] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: INVOKE  (r3 I:double[]) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.rawLocation():double[] type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  (r1 I:boolean) = (r1 I:double[]), (r3 I:double[]) java.util.Arrays.equals(double[], double[]):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IGET  (r1 I:java.util.List\<java.lang.Integer\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.bearings java.util.List \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: INVOKE  (r1 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.bearings():java.util.List type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: IGET  (r1 I:java.util.List\<java.lang.Integer\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.bearings java.util.List \l0x002e: INVOKE  (r3 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.bearings():java.util.List type: VIRTUAL \l0x0032: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IGET  (r1 I:java.util.List\<java.lang.String\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.classes java.util.List \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0043 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: INVOKE  (r1 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.classes():java.util.List type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_23 [shape=record,label="{23\:\ 0x0043|0x0043: IGET  (r1 I:java.util.List\<java.lang.String\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.classes java.util.List \l0x0045: INVOKE  (r3 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.classes():java.util.List type: VIRTUAL \l0x0049: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: IGET  (r1 I:java.util.List\<java.lang.Boolean\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.entry java.util.List \l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x005a \l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: INVOKE  (r1 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.entry():java.util.List type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0057|0x0057: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_30 [shape=record,label="{30\:\ 0x005a|0x005a: IGET  (r1 I:java.util.List\<java.lang.Boolean\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.entry java.util.List \l0x005c: INVOKE  (r3 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.entry():java.util.List type: VIRTUAL \l0x0060: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_31 [shape=record,label="{31\:\ 0x0064|0x0064: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_32 [shape=record,label="{32\:\ 0x0066|0x0066: IGET  (r1 I:java.lang.Integer) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.in java.lang.Integer \l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|0x0068: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0071 \l}"];
Node_34 [shape=record,label="{34\:\ 0x006a|0x006a: INVOKE  (r1 I:java.lang.Integer) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.in():java.lang.Integer type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x006e|0x006e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_37 [shape=record,label="{37\:\ 0x0071|0x0071: IGET  (r1 I:java.lang.Integer) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.in java.lang.Integer \l0x0073: INVOKE  (r3 I:java.lang.Integer) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.in():java.lang.Integer type: VIRTUAL \l0x0077: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Integer), (r3 I:java.lang.Object) java.lang.Integer.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x007b|0x007b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_39 [shape=record,label="{39\:\ 0x007d|0x007d: IGET  (r1 I:java.lang.Integer) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.out java.lang.Integer \l}"];
Node_40 [shape=record,label="{40\:\ 0x007f|0x007f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0088 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0081|0x0081: INVOKE  (r1 I:java.lang.Integer) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.out():java.lang.Integer type: VIRTUAL \l}"];
Node_42 [shape=record,label="{42\:\ 0x0085|0x0085: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_44 [shape=record,label="{44\:\ 0x0088|0x0088: IGET  (r1 I:java.lang.Integer) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.out java.lang.Integer \l0x008a: INVOKE  (r3 I:java.lang.Integer) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.out():java.lang.Integer type: VIRTUAL \l0x008e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Integer), (r3 I:java.lang.Object) java.lang.Integer.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_45 [shape=record,label="{45\:\ 0x0092|0x0092: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_46 [shape=record,label="{46\:\ 0x0094|0x0094: IGET  (r1 I:java.util.List\<com.mapbox.api.directions.v5.models.IntersectionLanes\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.lanes java.util.List \l}"];
Node_47 [shape=record,label="{47\:\ 0x0096|0x0096: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x009f \l}"];
Node_48 [shape=record,label="{48\:\ 0x0098|0x0098: INVOKE  (r5 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.lanes():java.util.List type: VIRTUAL \l}"];
Node_49 [shape=record,label="{49\:\ 0x009c|0x009c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_51 [shape=record,label="{51\:\ 0x009f|0x009f: IGET  (r1 I:java.util.List\<com.mapbox.api.directions.v5.models.IntersectionLanes\>) = \l  (r4 I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection)\l com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.lanes java.util.List \l0x00a1: INVOKE  (r5 I:java.util.List) = (r5 I:com.mapbox.api.directions.v5.models.StepIntersection) com.mapbox.api.directions.v5.models.StepIntersection.lanes():java.util.List type: VIRTUAL \l0x00a5: INVOKE  (r5 I:boolean) = (r1 I:java.util.List), (r5 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_52 [shape=record,label="{52\:\ 0x00a9|0x00a9: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ac \l}"];
Node_54 [shape=record,label="{54\:\ 0x00ac|0x00ac: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_55 [shape=record,label="{55\:\ 0x00ad|0x00ad: RETURN  (r0 I:boolean) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00ae|0x00ae: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection.equals((r4 'this' I:com.mapbox.api.directions.v5.models.$AutoValue_StepIntersection A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_56;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_54;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_54;
Node_14 -> Node_18[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_54;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_54;
Node_21 -> Node_25[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_54;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_54;
Node_28 -> Node_32[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_54;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_37;
Node_34 -> Node_35;
Node_35 -> Node_54;
Node_35 -> Node_39[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_54;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_44;
Node_41 -> Node_42;
Node_42 -> Node_54;
Node_42 -> Node_46[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_54;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_51;
Node_48 -> Node_49;
Node_49 -> Node_54;
Node_49 -> Node_55[style=dashed];
Node_51 -> Node_52;
Node_52 -> Node_54;
Node_52 -> Node_55[style=dashed];
Node_54 -> Node_55;
}

