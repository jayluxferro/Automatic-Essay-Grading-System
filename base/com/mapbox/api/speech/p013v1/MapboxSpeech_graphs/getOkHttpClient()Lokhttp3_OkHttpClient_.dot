digraph "CFG forcom.mapbox.api.speech.v1.MapboxSpeech.getOkHttpClient()Lokhttp3\/OkHttpClient;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r3.okHttpClient != null) goto L_0x0030\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|okhttp3.OkHttpClient$Builder r0 = new okhttp3.OkHttpClient.Builder()     \/\/ Catch:\{  \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (isEnableDebug() == false) goto L_0x001d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|okhttp3.logging.HttpLoggingInterceptor r1 = new okhttp3.logging.HttpLoggingInterceptor()     \/\/ Catch:\{  \}\lr1.setLevel(okhttp3.logging.HttpLoggingInterceptor.Level.BASIC)\lr0.addInterceptor(r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (cache() == null) goto L_0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|r0.cache(cache())\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|r3.okHttpClient = r0.build()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|okhttp3.OkHttpClient r0 = r3.okHttpClient\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|monitor\-exit(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|RETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|REMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized okhttp3.OkHttpClient com.mapbox.api.speech.v1.MapboxSpeech.getOkHttpClient((r3v0 'this' com.mapbox.api.speech.v1.MapboxSpeech A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

