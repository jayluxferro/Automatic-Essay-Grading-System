digraph "CFG forcom.mapbox.api.speech.v1.MapboxSpeech.getOkHttpClient()Lokhttp3\/OkHttpClient;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:okhttp3.OkHttpClient) = (r3 I:com.mapbox.api.speech.v1.MapboxSpeech) com.mapbox.api.speech.v1.MapboxSpeech.okHttpClient okhttp3.OkHttpClient A[Catch:\{ all \-\> 0x0034 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0030 A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:okhttp3.OkHttpClient$Builder) =  okhttp3.OkHttpClient$Builder A[Catch:\{ all \-\> 0x0034 \}]\l0x0007: INVOKE  (r0 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x000a: INVOKE  (r1 I:boolean) = (r3 I:com.mapbox.api.speech.v1.MapboxSpeech) com.mapbox.api.speech.v1.MapboxSpeech.isEnableDebug():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:okhttp3.logging.HttpLoggingInterceptor) =  okhttp3.logging.HttpLoggingInterceptor A[Catch:\{ all \-\> 0x0034 \}]\l0x0012: INVOKE  (r1 I:okhttp3.logging.HttpLoggingInterceptor) okhttp3.logging.HttpLoggingInterceptor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x0015: SGET  (r2 I:okhttp3.logging.HttpLoggingInterceptor$Level) =  okhttp3.logging.HttpLoggingInterceptor.Level.BASIC okhttp3.logging.HttpLoggingInterceptor$Level A[Catch:\{ all \-\> 0x0034 \}]\l0x0017: INVOKE  \l  (r1 I:okhttp3.logging.HttpLoggingInterceptor)\l  (r2 I:okhttp3.logging.HttpLoggingInterceptor$Level)\l okhttp3.logging.HttpLoggingInterceptor.setLevel(okhttp3.logging.HttpLoggingInterceptor$Level):okhttp3.logging.HttpLoggingInterceptor type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l0x001a: INVOKE  \l  (r0 I:okhttp3.OkHttpClient$Builder)\l  (r1 I:okhttp3.Interceptor)\l okhttp3.OkHttpClient.Builder.addInterceptor(okhttp3.Interceptor):okhttp3.OkHttpClient$Builder type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: INVOKE  (r1 I:okhttp3.Cache) = (r3 I:com.mapbox.api.speech.v1.MapboxSpeech) com.mapbox.api.speech.v1.MapboxSpeech.cache():okhttp3.Cache type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r1 I:okhttp3.Cache) = (r3 I:com.mapbox.api.speech.v1.MapboxSpeech) com.mapbox.api.speech.v1.MapboxSpeech.cache():okhttp3.Cache type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l0x0027: INVOKE  (r0 I:okhttp3.OkHttpClient$Builder), (r1 I:okhttp3.Cache) okhttp3.OkHttpClient.Builder.cache(okhttp3.Cache):okhttp3.OkHttpClient$Builder type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r0 I:okhttp3.OkHttpClient) = (r0 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.build():okhttp3.OkHttpClient type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l0x002e: IPUT  \l  (r0 I:okhttp3.OkHttpClient)\l  (r3 I:com.mapbox.api.speech.v1.MapboxSpeech)\l com.mapbox.api.speech.v1.MapboxSpeech.okHttpClient okhttp3.OkHttpClient A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IGET  (r0 I:okhttp3.OkHttpClient) = (r3 I:com.mapbox.api.speech.v1.MapboxSpeech) com.mapbox.api.speech.v1.MapboxSpeech.okHttpClient okhttp3.OkHttpClient A[Catch:\{ all \-\> 0x0034 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: RETURN  (r0 I:okhttp3.OkHttpClient) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0034: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized okhttp3.OkHttpClient com.mapbox.api.speech.v1.MapboxSpeech.getOkHttpClient((r3 'this' I:com.mapbox.api.speech.v1.MapboxSpeech A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

