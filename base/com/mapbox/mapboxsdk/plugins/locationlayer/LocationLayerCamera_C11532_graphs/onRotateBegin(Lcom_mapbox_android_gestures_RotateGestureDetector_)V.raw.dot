digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.2.onRotateBegin(Lcom\/mapbox\/android\/gestures\/RotateGestureDetector;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera) = \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera$2)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.2.this$0 com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera \l0x0002: INVOKE  (r2 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.access$300(com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera) = \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera$2)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.2.this$0 com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera \l0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000c: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l  (r0 I:int)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.setCameraMode(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.2.onRotateBegin((r1 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera$2 A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.android.gestures.RotateGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

