digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer.hide()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IPUT  \l  (r0 I:boolean)\l  (r3 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer.isHidden boolean \l0x0003: IGET  (r0 I:java.util.List\<java.lang.String\>) = \l  (r3 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer.layerMap java.util.List \l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0013: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  \l  (r3 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer)\l  (r1 I:java.lang.String)\l  (r2 I:boolean)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer.setLayerVisibility(java.lang.String, boolean):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer.hide((r3 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

