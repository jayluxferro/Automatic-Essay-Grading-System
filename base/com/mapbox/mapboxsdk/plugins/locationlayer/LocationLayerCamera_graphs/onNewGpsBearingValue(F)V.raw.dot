digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.onNewGpsBearingValue(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r4 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.cameraMode int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (36 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapboxMap) = \l  (r4 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.mapboxMap com.mapbox.mapboxsdk.maps.MapboxMap \l0x0008: INVOKE  (r0 I:com.mapbox.mapboxsdk.camera.CameraPosition) = (r0 I:com.mapbox.mapboxsdk.maps.MapboxMap) com.mapbox.mapboxsdk.maps.MapboxMap.getCameraPosition():com.mapbox.mapboxsdk.camera.CameraPosition type: VIRTUAL \l0x000c: IGET  (r0 I:double) = (r0 I:com.mapbox.mapboxsdk.camera.CameraPosition) com.mapbox.mapboxsdk.camera.CameraPosition.bearing double \l0x000e: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0010: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r1 I:int) = \l  (r4 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.cameraMode int \l0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r1 I:int) = \l  (r4 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.cameraMode int \l0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = (22 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: INVOKE  \l  (r4 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera)\l  (r5 I:float)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.setBearing(float):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera.onNewGpsBearingValue((r4 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCamera A[IMMUTABLE_TYPE, THIS]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

