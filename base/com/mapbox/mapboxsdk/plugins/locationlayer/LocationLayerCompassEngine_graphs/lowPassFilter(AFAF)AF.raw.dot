digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.lowPassFilter([F[F)[F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN  (r6 I:float[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: AGET  (r1 I:?[int, float]) = (r7 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1055286886(0x3ee66666, float:0.45) ?[int, float, short, byte, char])\l \l0x000c: AGET  (r3 I:?[int, float]) = (r6 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x000e: AGET  (r4 I:?[int, float]) = (r7 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0010: ARITH  (r3 I:float) = (r3 I:float) \- (r4 I:float) \l0x0011: ARITH  (r3 I:float) = (r3 I:float) * (r2 I:float) \l0x0013: ARITH  (r1 I:float) = (r1 I:float) + (r3 I:float) \l0x0014: APUT  \l  (r7 I:?[int, float][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[int, float])\l \l0x0016: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN  (r7 I:float[]) \l}"];
MethodNode[shape=record,label="{private float[] com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.lowPassFilter((r5 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine A[IMMUTABLE_TYPE, THIS]), (r6 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
}

