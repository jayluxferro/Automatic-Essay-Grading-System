digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.updateOrientation()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.rotationVectorValue float[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.rotationMatrix float[] \l0x0006: IGET  (r1 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.rotationVectorValue float[] \l0x0008: INVOKE  (r0 I:float[]), (r1 I:float[]) android.hardware.SensorManager.getRotationMatrixFromVector(float[], float[]):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r0 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.rotationMatrix float[] \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: IGET  (r2 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.gravityValues float[] \l0x0011: IGET  (r3 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.magneticValues float[] \l0x0013: INVOKE  \l  (r0 I:float[])\l  (r1 I:float[])\l  (r2 I:float[])\l  (r3 I:float[])\l android.hardware.SensorManager.getRotationMatrix(float[], float[], float[], float[]):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r0 I:android.view.WindowManager) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.windowManager android.view.WindowManager \l0x0018: INVOKE  (r0 I:android.view.Display) = (r0 I:android.view.WindowManager) android.view.WindowManager.getDefaultDisplay():android.view.Display type: INTERFACE \l0x001c: INVOKE  (r0 I:int) = (r0 I:android.view.Display) android.view.Display.getRotation():int type: VIRTUAL \l0x0020: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (131(0x83, float:1.84E\-43) ?[int, float, short, byte, char])\l \l0x0022: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (129(0x81, float:1.81E\-43) ?[int, float, short, byte, char])\l \l0x0024: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0025: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0033, 0x002e, 0x002c] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002a: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (129(0x81, float:1.81E\-43) ?[int, float, short, byte, char])\l \l0x0030: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (131(0x83, float:1.84E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0036: NEW_ARRAY  (r0 I:float[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0038: IGET  (r3 I:float[]) = \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.rotationMatrix float[] \l0x003a: INVOKE  (r3 I:float[]), (r1 I:int), (r2 I:int), (r0 I:float[]) android.hardware.SensorManager.remapCoordinateSystem(float[], int, int, float[]):boolean type: STATIC \l0x003d: NEW_ARRAY  (r1 I:float[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x003f: INVOKE  (r0 I:float[]), (r1 I:float[]) android.hardware.SensorManager.getOrientation(float[], float[]):float[] type: STATIC \l0x0042: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x0045: CAST  (r0 I:double) = (double) (r0 I:float) \l0x0046: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.toDegrees(double):double type: STATIC \l0x004a: CAST  (r0 I:float) = (float) (r0 I:double) \l0x004b: INVOKE  \l  (r5 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l  (r0 I:float)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.notifyCompassChangeListeners(float):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004e|0x004e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.updateOrientation((r5 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_5 -> Node_9;
Node_6 -> Node_10;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

