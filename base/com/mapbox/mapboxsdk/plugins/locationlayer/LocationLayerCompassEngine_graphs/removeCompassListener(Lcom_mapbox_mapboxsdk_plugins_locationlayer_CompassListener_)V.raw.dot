digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.removeCompassListener(Lcom\/mapbox\/mapboxsdk\/plugins\/locationlayer\/CompassListener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.mapbox.mapboxsdk.plugins.locationlayer.CompassListener\>) = \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.compassListeners java.util.List \l0x0002: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.remove(java.lang.Object):boolean type: INTERFACE \l0x0005: IGET  (r2 I:java.util.List\<com.mapbox.mapboxsdk.plugins.locationlayer.CompassListener\>) = \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.compassListeners java.util.List \l0x0007: INVOKE  (r2 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine)\l com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.onStop():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine.removeCompassListener((r1 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerCompassEngine A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.CompassListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

