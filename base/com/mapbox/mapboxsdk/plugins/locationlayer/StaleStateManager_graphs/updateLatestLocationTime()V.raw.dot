digraph "CFG forcom.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.updateLatestLocationTime()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager)\l com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.isStale boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IPUT  \l  (r0 I:boolean)\l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager)\l com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.isStale boolean \l0x0007: IGET  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.OnLocationStaleListener) = \l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager)\l com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.innerOnLocationStaleListeners com.mapbox.mapboxsdk.plugins.locationlayer.OnLocationStaleListener \l0x0009: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.plugins.locationlayer.OnLocationStaleListener)\l  (r0 I:boolean)\l com.mapbox.mapboxsdk.plugins.locationlayer.OnLocationStaleListener.onStaleStateChange(boolean):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager)\l com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.postTheCallback():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager.updateLatestLocationTime((r2 'this' I:com.mapbox.mapboxsdk.plugins.locationlayer.StaleStateManager A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

