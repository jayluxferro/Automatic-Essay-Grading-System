digraph "CFG forcom.mapbox.mapboxsdk.Mapbox.initializeTelemetry()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: SGET  (r0 I:com.mapbox.mapboxsdk.Mapbox) =  com.mapbox.mapboxsdk.Mapbox.INSTANCE com.mapbox.mapboxsdk.Mapbox A[Catch:\{ Exception \-\> 0x000d \}, TRY_ENTER]\l0x0002: INVOKE  (r1 I:com.mapbox.mapboxsdk.ModuleProvider) =  com.mapbox.mapboxsdk.Mapbox.getModuleProvider():com.mapbox.mapboxsdk.ModuleProvider type: STATIC A[Catch:\{ Exception \-\> 0x000d \}]\l0x0006: INVOKE  (r1 I:com.mapbox.mapboxsdk.maps.TelemetryDefinition) = (r1 I:com.mapbox.mapboxsdk.ModuleProvider) com.mapbox.mapboxsdk.ModuleProvider.obtainTelemetry():com.mapbox.mapboxsdk.maps.TelemetryDefinition type: INTERFACE A[Catch:\{ Exception \-\> 0x000d \}]\l0x000a: IPUT  \l  (r1 I:com.mapbox.mapboxsdk.maps.TelemetryDefinition)\l  (r0 I:com.mapbox.mapboxsdk.Mapbox)\l com.mapbox.mapboxsdk.Mapbox.telemetry com.mapbox.mapboxsdk.maps.TelemetryDefinition A[Catch:\{ Exception \-\> 0x000d \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x000d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST_STR  (r1 I:java.lang.String) =  \"Error occurred while initializing telemetry\" \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Mbgl\-Mapbox\" \l0x0012: INVOKE  \l  (r2 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l com.mapbox.mapboxsdk.log.Logger.e(java.lang.String, java.lang.String, java.lang.Throwable):void type: STATIC \l0x0015: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.Exception) com.mapbox.mapboxsdk.MapStrictMode.strictModeViolation(java.lang.String, java.lang.Exception):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.mapbox.mapboxsdk.Mapbox.initializeTelemetry() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_3;
Node_1 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

