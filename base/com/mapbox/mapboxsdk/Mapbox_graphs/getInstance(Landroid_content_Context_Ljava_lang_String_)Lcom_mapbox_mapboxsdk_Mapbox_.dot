digraph "CFG forcom.mapbox.mapboxsdk.Mapbox.getInstance(Landroid\/content\/Context;Ljava\/lang\/String;)Lcom\/mapbox\/mapboxsdk\/Mapbox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Class\<com.mapbox.mapboxsdk.Mapbox\> r0 = com.mapbox.mapboxsdk.Mapbox.class\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?|com.mapbox.mapboxsdk.utils.ThreadUtils.checkThread(\"Mapbox\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (INSTANCE != null) goto L_0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|android.content.Context r2 = r2.getApplicationContext()\lcom.mapbox.mapboxsdk.storage.FileSource.initializeFileDirsPaths(r2)\lINSTANCE = new com.mapbox.mapboxsdk.Mapbox(r2, r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (isAccessTokenValid(r3) == false) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|initializeTelemetry()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|com.mapbox.mapboxsdk.net.ConnectivityReceiver.instance(r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|com.mapbox.mapboxsdk.Mapbox r2 = INSTANCE\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|monitor\-exit(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|RETURN\l|return r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|REMOVE\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|REMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public static synchronized com.mapbox.mapboxsdk.Mapbox com.mapbox.mapboxsdk.Mapbox.getInstance((r2v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[BUILD, android.support.annotation.UiThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

