digraph "CFG forcom.mapbox.mapboxsdk.module.telemetry.TelemetryImpl.updateSessionIdRotationInterval(Lcom\/mapbox\/android\/telemetry\/SessionInterval;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x0023 \}\lSplitter:B:0:0x0000\l|java.lang.reflect.Field r0 = r2.getClass().getDeclaredField(\"interval\")     \/\/ Catch:\{ Exception \-\> 0x0023 \}\lr0.setAccessible(true)     \/\/ Catch:\{ Exception \-\> 0x0023 \}\ljava.lang.Integer r2 = (java.lang.Integer) r0.get(r2)     \/\/ Catch:\{ Exception \-\> 0x0023 \}\lcom.mapbox.mapboxsdk.maps.TelemetryDefinition r0 = com.mapbox.mapboxsdk.Mapbox.getTelemetry()     \/\/ Catch:\{ Exception \-\> 0x0023 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|Catch:\{ Exception \-\> 0x0023 \}\l|if (r0 == null) goto L_?     \/\/ Catch:\{ Exception \-\> 0x0023 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|Catch:\{ Exception \-\> 0x0023 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|RETURN\l|return r0.setSessionIdRotationInterval(r2.intValue())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|ExcHandler: Exception (r2v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r2 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|com.mapbox.mapboxsdk.log.Logger.m81e(TAG, \"Exception occurred when updating session id rotation interval\", r2)\lcom.mapbox.mapboxsdk.MapStrictMode.strictModeViolation(r2)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static boolean com.mapbox.mapboxsdk.module.telemetry.TelemetryImpl.updateSessionIdRotationInterval((r2v0 com.mapbox.android.telemetry.SessionInterval A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_5;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

