digraph "CFG forcom.mapbox.mapboxsdk.offline.OfflineRegion.1.3.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1) = (r3 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1$3) com.mapbox.mapboxsdk.offline.OfflineRegion.1.3.this$1 com.mapbox.mapboxsdk.offline.OfflineRegion$1 \l0x0002: IGET  (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver) = (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1) com.mapbox.mapboxsdk.offline.OfflineRegion.1.val$observer com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1) = (r3 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1$3) com.mapbox.mapboxsdk.offline.OfflineRegion.1.3.this$1 com.mapbox.mapboxsdk.offline.OfflineRegion$1 \l0x0008: IGET  (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver) = (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1) com.mapbox.mapboxsdk.offline.OfflineRegion.1.val$observer com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver \l0x000a: IGET  (r1 I:long) = (r3 I:com.mapbox.mapboxsdk.offline.OfflineRegion$1$3) com.mapbox.mapboxsdk.offline.OfflineRegion.1.3.val$limit long \l0x000c: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver)\l  (r1 I:long)\l com.mapbox.mapboxsdk.offline.OfflineRegion.OfflineRegionObserver.mapboxTileCountLimitExceeded(long):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.offline.OfflineRegion.1.3.run((r3 'this' I:com.mapbox.mapboxsdk.offline.OfflineRegion$1$3 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

