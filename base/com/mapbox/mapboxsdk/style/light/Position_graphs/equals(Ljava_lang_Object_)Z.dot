digraph "CFG forcom.mapbox.mapboxsdk.style.light.Position.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r4 != r5) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r5 == null) goto L_0x0037\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (getClass() == r5.getClass()) goto L_0x0012\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|com.mapbox.mapboxsdk.style.light.Position r5 = (com.mapbox.mapboxsdk.style.light.Position) r5\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|if (java.lang.Float.compare(r5.radialCoordinate, r4.radialCoordinate) == 0) goto L_0x001f\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f}"];
Node_11 [shape=record,label="{11\:\ 0x0027|if (java.lang.Float.compare(r5.azimuthalAngle, r4.azimuthalAngle) == 0) goto L_0x002a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a}"];
Node_14 [shape=record,label="{14\:\ 0x0032|if (java.lang.Float.compare(r5.polarAngle, r4.polarAngle) != 0) goto L_0x0035\l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.style.light.Position.equals((r4v0 'this' com.mapbox.mapboxsdk.style.light.Position A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_16[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
}

