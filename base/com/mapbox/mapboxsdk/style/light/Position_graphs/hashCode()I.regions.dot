digraph "CFG forcom.mapbox.mapboxsdk.style.light.Position.hashCode()I" {
subgraph cluster_Region_2070599649 {
label = "R(4:0|8|(1:10)|12)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|PHI: r3 \l  PHI: (r3v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = (((r4.radialCoordinate != 0.0f ? java.lang.Float.floatToIntBits(r4.radialCoordinate) : 0) * 31) + (r4.azimuthalAngle != 0.0f ? java.lang.Float.floatToIntBits(r4.azimuthalAngle) : 0)) * 31\l}"];
subgraph cluster_IfRegion_1090241190 {
label = "IF [B:9:0x0027] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0027|if (r4.polarAngle != 0.0f) goto L_0x0029\l}"];
subgraph cluster_Region_1878818026 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0029|int r1 = java.lang.Float.floatToIntBits(r4.polarAngle)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\l|return r0 + r1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000f}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010|PHI: r0 \l  PHI: (r0v2 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0016}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002f|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:9:0x0027, B:10:0x0029] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public int com.mapbox.mapboxsdk.style.light.Position.hashCode((r4v0 'this' com.mapbox.mapboxsdk.style.light.Position A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_11 -> Node_12;
}

