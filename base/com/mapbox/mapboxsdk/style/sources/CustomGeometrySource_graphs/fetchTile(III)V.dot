digraph "CFG forcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource.fetchTile(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.concurrent.atomic.AtomicBoolean r6 = new java.util.concurrent.atomic.AtomicBoolean(false)\lcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID r7 = new com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.TileID(r9, r10, r11)\lr1 = r7\lcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest r0 = new com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.GeometryTileRequest(r1, r8.provider, r8.awaitingTasksMap, r8.inProgressTasksMap, r8, r6)\ljava.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest\> r10 = r8.awaitingTasksMap\l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|monitor\-enter(r10)\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, java.util.concurrent.atomic.AtomicBoolean\> r11 = r8.inProgressTasksMap\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|monitor\-enter(r11)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ ?}"];
Node_7 [shape=record,label="{7\:\ 0x0029|if (r8.executor.getQueue().contains(r0) == false) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|r8.executor.remove(r0)\lexecuteRequest(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034}"];
Node_10 [shape=record,label="{10\:\ 0x003a|if (r8.inProgressTasksMap.containsKey(r7) == false) goto L_0x0042\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|r8.awaitingTasksMap.put(r7, r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|executeRequest(r0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|monitor\-exit(r11)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|SYNTHETIC\lSplitter:B:14:0x0046\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0046\l|monitor\-exit(r10)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|LOOP_START\lREMOVE\lLOOP:0: B:17:0x0048\-\>B:25:0x0048\l|java.lang.Throwable r9 = move\-exception\l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|SYNTHETIC\lREMOVE\lSplitter:B:18:0x0049\l}"];
Node_19 [shape=record,label="{19\:\ ?|REMOVE\lSplitter:B:18:0x0049\l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|SYNTHETIC\lREMOVE\lSplitter:B:20:0x004a\l}"];
Node_21 [shape=record,label="{21\:\ ?|REMOVE\lSplitter:B:20:0x004a\l|throw r9\l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|REMOVE\l|java.lang.Throwable r9 = move\-exception\l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|REMOVE\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|REMOVE\l|throw r9\l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:17:0x0048\-\>B:25:0x0048\l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.fetchTile((r8v0 'this' com.mapbox.mapboxsdk.style.sources.CustomGeometrySource A[IMMUTABLE_TYPE, THIS]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Keep, \{\}], Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_15 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_17;
Node_26 -> Node_25;
}

