digraph "CFG forcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource.releaseThreads()V" {
subgraph cluster_Region_25485403 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.executorLock.lock()\l}"];
subgraph cluster_TryCatchRegion_1431162562 {
label = "Try: R(1:2) finally: R(3:5|6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_1691039195 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0010 \}\lSplitter:B:1:0x0005\l|r2.executor.shutdownNow()     \/\/ Catch:\{ all \-\> 0x0010 \}\l}"];
}
subgraph cluster_Region_486751041 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|FINALLY_INSNS\l|r2.executorLock.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|throw r0\l}"];
}
}
}
subgraph cluster_Region_486751041 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|FINALLY_INSNS\l|r2.executorLock.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|throw r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a|DONT_GENERATE\l|java.util.concurrent.locks.Lock r0 = r2.executorLock\lr0.unlock()\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.releaseThreads((r2v0 'this' com.mapbox.mapboxsdk.style.sources.CustomGeometrySource A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Keep, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_3 -> Node_4;
}

