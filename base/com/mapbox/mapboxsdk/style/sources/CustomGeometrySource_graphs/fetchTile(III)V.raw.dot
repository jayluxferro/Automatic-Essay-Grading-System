digraph "CFG forcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource.fetchTile(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r6 I:java.util.concurrent.atomic.AtomicBoolean) =  java.util.concurrent.atomic.AtomicBoolean \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  \l  (r6 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r0 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.\<init\>(boolean):void type: DIRECT \l0x0006: NEW_INSTANCE  (r7 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID) =  com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID \l0x0008: INVOKE  \l  (r7 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:int)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.TileID.\<init\>(int, int, int):void type: DIRECT \l0x000b: NEW_INSTANCE  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest) =  com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest \l0x000d: IGET  (r2 I:com.mapbox.mapboxsdk.style.sources.GeometryTileProvider) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.provider com.mapbox.mapboxsdk.style.sources.GeometryTileProvider \l0x000f: IGET  (r3 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.awaitingTasksMap java.util.Map \l0x0011: IGET  (r4 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, java.util.concurrent.atomic.AtomicBoolean\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.inProgressTasksMap java.util.Map \l0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0014: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0015: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest)\l  (r1 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID)\l  (r2 I:com.mapbox.mapboxsdk.style.sources.GeometryTileProvider)\l  (r3 I:java.util.Map)\l  (r4 I:java.util.Map)\l  (r5 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l  (r6 I:java.util.concurrent.atomic.AtomicBoolean)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.GeometryTileRequest.\<init\>(com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, com.mapbox.mapboxsdk.style.sources.GeometryTileProvider, java.util.Map, java.util.Map, com.mapbox.mapboxsdk.style.sources.CustomGeometrySource, java.util.concurrent.atomic.AtomicBoolean):void type: DIRECT \l0x0019: IGET  (r10 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.awaitingTasksMap java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: MONITOR_ENTER  (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|SYNTHETIC\lSplitter:B:2:0x001c\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x001c\l|0x001c: IGET  (r11 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, java.util.concurrent.atomic.AtomicBoolean\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.inProgressTasksMap java.util.Map A[Catch:\{ all \-\> 0x004b \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: MONITOR_ENTER  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|SYNTHETIC\lSplitter:B:5:0x001f\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x001f\l|0x001f: IGET  (r0 I:java.util.concurrent.ThreadPoolExecutor) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0048 \}, TRY_ENTER]\l0x0021: INVOKE  (r0 I:java.util.concurrent.BlockingQueue) = (r0 I:java.util.concurrent.ThreadPoolExecutor) java.util.concurrent.ThreadPoolExecutor.getQueue():java.util.concurrent.BlockingQueue type: VIRTUAL A[Catch:\{ all \-\> 0x0048 \}]\l0x0025: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.BlockingQueue)\l  (r9 I:java.lang.Object)\l java.util.concurrent.BlockingQueue.contains(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0034 A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IGET  (r0 I:java.util.concurrent.ThreadPoolExecutor) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0048 \}]\l0x002d: INVOKE  \l  (r0 I:java.util.concurrent.ThreadPoolExecutor)\l  (r9 I:java.lang.Runnable)\l java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0048 \}]\l0x0030: INVOKE  \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executeRequest(com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest):void type: DIRECT A[Catch:\{ all \-\> 0x0048 \}]\l0x0033: GOTO  \-\> 0x0045 A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: IGET  (r0 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, java.util.concurrent.atomic.AtomicBoolean\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.inProgressTasksMap java.util.Map A[Catch:\{ all \-\> 0x0048 \}]\l0x0036: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r7 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0042 A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: IGET  (r0 I:java.util.Map\<com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$TileID, com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest\>) = \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.awaitingTasksMap java.util.Map A[Catch:\{ all \-\> 0x0048 \}]\l0x003e: INVOKE  \l  (r0 I:java.util.Map)\l  (r7 I:java.lang.Object)\l  (r9 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0048 \}]\l0x0041: GOTO  \-\> 0x0045 A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: INVOKE  \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executeRequest(com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$GeometryTileRequest):void type: DIRECT A[Catch:\{ all \-\> 0x0048 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0048 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|SYNTHETIC\lSplitter:B:14:0x0046\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0046\l|0x0046: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|ExcHandler: all null\lSplitter:B:5:0x001f\l|0x0048: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|SYNTHETIC\lSplitter:B:18:0x0049\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x0049\l|0x0049: MONITOR_EXIT  (r11 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0048 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|SYNTHETIC\lSplitter:B:20:0x004a\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x004a\l|0x004a: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x004b \}, TRY_ENTER]\l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|ExcHandler: all null\lSplitter:B:2:0x001c\l|0x004b: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x004b \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|0x004c: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004b \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.fetchTile((r8 'this' I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Keep, \{\}], Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_15 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_17;
Node_19 -> Node_20;
Node_19 -> Node_17;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
}

