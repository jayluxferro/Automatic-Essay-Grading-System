digraph "CFG forcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource.startThreads()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r9.executorLock.lock()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0034 \}\lSplitter:B:1:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|Catch:\{ all \-\> 0x0034 \}\l|if (r9.executor == null) goto L_0x0016     \/\/ Catch:\{ all \-\> 0x0034 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|Catch:\{ all \-\> 0x0034 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|Catch:\{ all \-\> 0x0034 \}\l|if (r9.executor.isShutdown() != false) goto L_0x0016     \/\/ Catch:\{ all \-\> 0x0034 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|Catch:\{ all \-\> 0x0034 \}\l|r9.executor.shutdownNow()     \/\/ Catch:\{ all \-\> 0x0034 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|Catch:\{ all \-\> 0x0034 \}\l|r9.executor = new java.util.concurrent.ThreadPoolExecutor(4, 4, 0, java.util.concurrent.TimeUnit.MILLISECONDS, new java.util.concurrent.LinkedBlockingQueue(), new com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.C11741(r9))     \/\/ Catch:\{ all \-\> 0x0034 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|DONT_GENERATE\l|java.util.concurrent.locks.Lock r0 = r9.executorLock\lr0.unlock()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|FINALLY_INSNS\l|r9.executorLock.unlock()\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|throw r0\l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.startThreads((r9v0 'this' com.mapbox.mapboxsdk.style.sources.CustomGeometrySource A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Keep, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

