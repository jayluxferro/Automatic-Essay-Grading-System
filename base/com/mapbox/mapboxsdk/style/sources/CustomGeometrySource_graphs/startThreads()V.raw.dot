digraph "CFG forcom.mapbox.mapboxsdk.style.sources.CustomGeometrySource.startThreads()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.Lock) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executorLock java.util.concurrent.locks.Lock \l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.lock():void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: IGET  (r0 I:java.util.concurrent.ThreadPoolExecutor) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0034 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:java.util.concurrent.ThreadPoolExecutor) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0034 \}]\l0x000b: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.ThreadPoolExecutor) java.util.concurrent.ThreadPoolExecutor.isShutdown():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r0 I:java.util.concurrent.ThreadPoolExecutor) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0034 \}]\l0x0013: INVOKE  (r0 I:java.util.concurrent.ThreadPoolExecutor) java.util.concurrent.ThreadPoolExecutor.shutdownNow():java.util.List type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.util.concurrent.ThreadPoolExecutor) =  java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0034 \}]\l0x0018: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0034 \}]\l0x0019: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0034 \}]\l0x001a: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0034 \}]\l0x001c: SGET  (r6 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ all \-\> 0x0034 \}]\l0x001e: NEW_INSTANCE  (r7 I:java.util.concurrent.LinkedBlockingQueue) =  java.util.concurrent.LinkedBlockingQueue A[Catch:\{ all \-\> 0x0034 \}]\l0x0020: INVOKE  (r7 I:java.util.concurrent.LinkedBlockingQueue) java.util.concurrent.LinkedBlockingQueue.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x0023: NEW_INSTANCE  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$1) =  com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$1 A[Catch:\{ all \-\> 0x0034 \}]\l0x0025: INVOKE  \l  (r8 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$1)\l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.1.\<init\>(com.mapbox.mapboxsdk.style.sources.CustomGeometrySource):void type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x0028: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0034 \}]\l0x0029: INVOKE  \l  (r1 I:java.util.concurrent.ThreadPoolExecutor)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:long)\l  (r6 I:java.util.concurrent.TimeUnit)\l  (r7 I:java.util.concurrent.BlockingQueue)\l  (r8 I:java.util.concurrent.ThreadFactory)\l java.util.concurrent.ThreadPoolExecutor.\<init\>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory):void type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x002c: IPUT  \l  (r0 I:java.util.concurrent.ThreadPoolExecutor)\l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executor java.util.concurrent.ThreadPoolExecutor A[Catch:\{ all \-\> 0x0034 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IGET  (r0 I:java.util.concurrent.locks.Lock) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executorLock java.util.concurrent.locks.Lock \l0x0030: INVOKE  (r0 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|ExcHandler: all null\lSplitter:B:1:0x0005\l|0x0034: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IGET  (r1 I:java.util.concurrent.locks.Lock) = \l  (r9 I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource)\l com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.executorLock java.util.concurrent.locks.Lock \l0x0037: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.style.sources.CustomGeometrySource.startThreads((r9 'this' I:com.mapbox.mapboxsdk.style.sources.CustomGeometrySource A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.Keep, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

