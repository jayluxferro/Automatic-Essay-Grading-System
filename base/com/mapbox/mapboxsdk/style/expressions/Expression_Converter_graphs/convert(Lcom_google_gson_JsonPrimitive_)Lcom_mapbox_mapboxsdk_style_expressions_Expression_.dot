digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.Converter.convert(Lcom\/google\/gson\/JsonPrimitive;)Lcom\/mapbox\/mapboxsdk\/style\/expressions\/Expression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r3.isBoolean() == false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0013|RETURN\l|return new com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral(java.lang.Boolean.valueOf(r3.getAsBoolean()))\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if (r3.isNumber() == false) goto L_0x0028\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a}"];
Node_7 [shape=record,label="{7\:\ 0x0027|RETURN\l|return new com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral(java.lang.Float.valueOf(r3.getAsFloat()))\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028}"];
Node_9 [shape=record,label="{9\:\ 0x002c|if (r3.isString() == false) goto L_0x0038\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e}"];
Node_11 [shape=record,label="{11\:\ 0x0037|RETURN\l|return new com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral(r3.getAsString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unsupported literal expression conversion for \")\lr1.append(r3.getClass())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|throw new java.lang.RuntimeException(r1.toString())\l}"];
MethodNode[shape=record,label="{private static com.mapbox.mapboxsdk.style.expressions.Expression com.mapbox.mapboxsdk.style.expressions.Expression.Converter.convert((r3v0 com.google.gson.JsonPrimitive A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

