digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.Stop.toExpressionArray([Lcom\/mapbox\/mapboxsdk\/style\/expressions\/Expression$Stop;)[Lcom\/mapbox\/mapboxsdk\/style\/expressions\/Expression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0001: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0003: NEW_ARRAY  (r0 I:com.mapbox.mapboxsdk.style.expressions.Expression[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.mapbox.mapboxsdk.style.expressions.Expression[] \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x002e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: AGET  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x000b: IGET  (r3 I:java.lang.Object) = \l  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression$Stop)\l com.mapbox.mapboxsdk.style.expressions.Expression.Stop.value java.lang.Object \l0x000d: IGET  (r2 I:java.lang.Object) = \l  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression$Stop)\l com.mapbox.mapboxsdk.style.expressions.Expression.Stop.output java.lang.Object \l0x000f: INSTANCE_OF  (r4 I:boolean) = (r3 I:?[OBJECT, ARRAY]) com.mapbox.mapboxsdk.style.expressions.Expression \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (r3 I:java.lang.Object) com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.Object):com.mapbox.mapboxsdk.style.expressions.Expression type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: INSTANCE_OF  (r4 I:boolean) = (r2 I:?[OBJECT, ARRAY]) com.mapbox.mapboxsdk.style.expressions.Expression \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: INVOKE  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (r2 I:java.lang.Object) com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.Object):com.mapbox.mapboxsdk.style.expressions.Expression type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: ARITH  (r4 I:int) = (r1 I:int) * (2 int) \l0x0021: CHECK_CAST  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (com.mapbox.mapboxsdk.style.expressions.Expression) (r3 I:?[OBJECT, ARRAY]) \l0x0023: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0025: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0027: CHECK_CAST  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (com.mapbox.mapboxsdk.style.expressions.Expression) (r2 I:?[OBJECT, ARRAY]) \l0x0029: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x002b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: RETURN  (r0 I:com.mapbox.mapboxsdk.style.expressions.Expression[]) \l}"];
MethodNode[shape=record,label="{static com.mapbox.mapboxsdk.style.expressions.Expression[] com.mapbox.mapboxsdk.style.expressions.Expression.Stop.toExpressionArray((r5 I:com.mapbox.mapboxsdk.style.expressions.Expression$Stop[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

