digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.equals(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3 != r4) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r4 == null) goto L_0x002e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a}"];
Node_6 [shape=record,label="{6\:\ 0x000c|if ((r4 instanceof com.mapbox.mapboxsdk.style.expressions.Expression) != false) goto L_0x000f\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|com.mapbox.mapboxsdk.style.expressions.Expression r4 = (com.mapbox.mapboxsdk.style.expressions.Expression) r4\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|if (r3.operator == null) goto L_0x0020\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015}"];
Node_10 [shape=record,label="{10\:\ 0x001d|if (r3.operator.equals(r4.operator) != false) goto L_0x0025\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020}"];
Node_12 [shape=record,label="{12\:\ 0x0022|if (r4.operator == null) goto L_0x0025\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025}"];
Node_15 [shape=record,label="{15\:\ 0x002d|RETURN\l|return java.util.Arrays.deepEquals(r3.arguments, r4.arguments)\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.style.expressions.Expression.equals((r3v0 'this' com.mapbox.mapboxsdk.style.expressions.Expression A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_16[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_14;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

