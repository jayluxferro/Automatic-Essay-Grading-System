digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.collator(ZZLjava\/util\/Locale;)Lcom\/mapbox\/mapboxsdk\/style\/expressions\/Expression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"case\-sensitive\" \l0x0007: INVOKE  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (r3 I:boolean) com.mapbox.mapboxsdk.style.expressions.Expression.literal(boolean):com.mapbox.mapboxsdk.style.expressions.Expression type: STATIC \l0x000b: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x000e: CONST_STR  (r3 I:java.lang.String) =  \"diacritic\-sensitive\" \l0x0010: INVOKE  (r4 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (r4 I:boolean) com.mapbox.mapboxsdk.style.expressions.Expression.literal(boolean):com.mapbox.mapboxsdk.style.expressions.Expression type: STATIC \l0x0014: INVOKE  \l  (r0 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0017: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001c: INVOKE  (r4 I:java.lang.String) = (r5 I:java.util.Locale) java.util.Locale.getLanguage():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: INVOKE  (r1 I:boolean) = (r4 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: INVOKE  (r4 I:java.lang.String) = (r5 I:java.util.Locale) java.util.Locale.getCountry():java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: INVOKE  (r5 I:boolean) = (r4 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: CONST_STR  (r5 I:java.lang.String) =  \"\-\" \l0x0039: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: CONST_STR  (r4 I:java.lang.String) =  \"locale\" \l0x0041: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0045: INVOKE  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) = (r3 I:java.lang.String) com.mapbox.mapboxsdk.style.expressions.Expression.literal(java.lang.String):com.mapbox.mapboxsdk.style.expressions.Expression type: STATIC \l0x0049: INVOKE  \l  (r0 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x004c: NEW_INSTANCE  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) =  com.mapbox.mapboxsdk.style.expressions.Expression \l0x004e: CONST_STR  (r4 I:java.lang.String) =  \"collator\" \l0x0050: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0051: NEW_ARRAY  (r5 I:com.mapbox.mapboxsdk.style.expressions.Expression[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: com.mapbox.mapboxsdk.style.expressions.Expression[] \l0x0053: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0054: NEW_INSTANCE  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression$ExpressionMap) =  com.mapbox.mapboxsdk.style.expressions.Expression$ExpressionMap \l0x0056: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.style.expressions.Expression$ExpressionMap)\l  (r0 I:java.util.Map)\l com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionMap.\<init\>(java.util.Map):void type: DIRECT \l0x0059: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x005b: INVOKE  \l  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression)\l  (r4 I:java.lang.String)\l  (r5 I:com.mapbox.mapboxsdk.style.expressions.Expression[])\l com.mapbox.mapboxsdk.style.expressions.Expression.\<init\>(java.lang.String, com.mapbox.mapboxsdk.style.expressions.Expression[]):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|0x005e: RETURN  (r3 I:com.mapbox.mapboxsdk.style.expressions.Expression) \l}"];
MethodNode[shape=record,label="{public static com.mapbox.mapboxsdk.style.expressions.Expression com.mapbox.mapboxsdk.style.expressions.Expression.collator((r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Locale A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

