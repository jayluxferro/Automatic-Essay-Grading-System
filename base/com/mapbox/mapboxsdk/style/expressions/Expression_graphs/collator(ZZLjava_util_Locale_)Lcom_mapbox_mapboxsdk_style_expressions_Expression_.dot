digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.collator(ZZLjava\/util\/Locale;)Lcom\/mapbox\/mapboxsdk\/style\/expressions\/Expression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.HashMap r0 = new java.util.HashMap()\lr0.put(\"case\-sensitive\", literal(r3))\lr0.put(\"diacritic\-sensitive\", literal(r4))\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\ljava.lang.String r4 = r5.getLanguage()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|if (r4 == null) goto L_0x002b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0022}"];
Node_3 [shape=record,label="{3\:\ 0x0026|if (r4.isEmpty() != false) goto L_0x002b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|r3.append(r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|java.lang.String r4 = r5.getCountry()\l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|if (r4 == null) goto L_0x003f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031}"];
Node_8 [shape=record,label="{8\:\ 0x0035|if (r4.isEmpty() != false) goto L_0x003f\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|r3.append(\"\-\")\lr3.append(r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|r0.put(\"locale\", literal(r3.toString()))\lcom.mapbox.mapboxsdk.style.expressions.Expression[] r5 = new com.mapbox.mapboxsdk.style.expressions.Expression[]\{new com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionMap(r0)\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|RETURN\l|return new com.mapbox.mapboxsdk.style.expressions.Expression(\"collator\", r5)\l}"];
MethodNode[shape=record,label="{public static com.mapbox.mapboxsdk.style.expressions.Expression com.mapbox.mapboxsdk.style.expressions.Expression.collator((r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.Locale A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

