digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral.unwrapStringLiteral(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: INVOKE  (r0 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0015: INVOKE  (r0 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001f: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0020: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r1 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: RETURN  (r3 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral.unwrapStringLiteral((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
}

