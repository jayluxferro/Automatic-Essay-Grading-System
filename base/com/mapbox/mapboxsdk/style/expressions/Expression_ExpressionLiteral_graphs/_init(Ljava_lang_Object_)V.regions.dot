digraph "CFG forcom.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral.\<init\>(Ljava\/lang\/Object;)V" {
subgraph cluster_Region_120877551 {
label = "R(2:(1:2)(1:(1:5))|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_196273862 {
label = "IF [B:1:0x0005] THEN: R(1:2) ELSE: R(1:(1:5))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((r2 instanceof java.lang.String) == true) goto L_0x0007\l}"];
subgraph cluster_Region_828865718 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|java.lang.String r2 = unwrapStringLiteral((java.lang.String) r2)\l}"];
}
subgraph cluster_Region_1804276797 {
label = "R(1:(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1326754730 {
label = "IF [B:4:0x0010] THEN: R(1:5) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|if ((r2 instanceof java.lang.Number) == true) goto L_0x0012\l}"];
subgraph cluster_Region_1393356888 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|java.lang.Float r2 = java.lang.Float.valueOf(((java.lang.Number) r2).floatValue())\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x001c|PHI: r2 \l  PHI: (r2v1 java.lang.Object) = (r2v0 java.lang.Object), (r2v4 java.lang.Object), (r2v6 java.lang.Object) binds: [B:4:0x0010, B:5:0x0012, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|r1.literal = r2\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.style.expressions.Expression.ExpressionLiteral.\<init\>((r1v0 'this' com.mapbox.mapboxsdk.style.expressions.Expression$ExpressionLiteral A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

