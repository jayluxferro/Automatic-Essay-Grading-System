digraph "CFG forcom.mapbox.mapboxsdk.style.layers.PropertyValue.getColorInt()Ljava\/lang\/Integer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (isValue() == false) goto L_0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if ((r8.value instanceof java.lang.String) != false) goto L_0x0010\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|SYNTHETIC\lSplitter:B:4:0x0010\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ ConversionException \-\> 0x001d \}\lSplitter:B:4:0x0010\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return java.lang.Integer.valueOf(com.mapbox.mapboxsdk.utils.ColorUtils.rgbaToColor((java.lang.String) r8.value))\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|ExcHandler: ConversionException (r0v4 'e' com.mapbox.mapboxsdk.exceptions.ConversionException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0010\l|com.mapbox.mapboxsdk.exceptions.ConversionException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|java.lang.Object[] r6 = new java.lang.Object[]\{r8.name, r0.getMessage()\}\lcom.mapbox.mapboxsdk.log.Logger.m80e(TAG, java.lang.String.format(\"%s could not be converted to a Color int: %s\", r6))\lcom.mapbox.mapboxsdk.MapStrictMode.strictModeViolation((java.lang.Exception) r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|java.lang.Object[] r3 = new java.lang.Object[]\{r8.name\}\lcom.mapbox.mapboxsdk.log.Logger.m80e(TAG, java.lang.String.format(\"%s is not a String value and can not be converted to a color it\", r3))\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public java.lang.Integer com.mapbox.mapboxsdk.style.layers.PropertyValue.getColorInt((r8v0 'this' com.mapbox.mapboxsdk.style.layers.PropertyValue A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.ColorInt, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

