digraph "CFG forcom.mapbox.mapboxsdk.http.HttpLogger.logFailure(ILjava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CONST_STR  (r3 I:java.lang.String) =  \"Request failed due to a %s error: %s %s\" \l0x000d: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CONST_STR  (r5 I:java.lang.String) =  \"temporary\" \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: CONST_STR  (r5 I:java.lang.String) =  \"connection\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: CONST_STR  (r5 I:java.lang.String) =  \"permanent\" \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x001e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0021: SGET  (r6 I:boolean) =  com.mapbox.mapboxsdk.http.HttpLogger.logRequestUrl boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: CONST_STR  (r7 I:java.lang.String) =  \"\" \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x002a: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x002e: INVOKE  (r2 I:int), (r5 I:java.lang.String) com.mapbox.mapboxsdk.http.HttpLogger.log(int, java.lang.String):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.mapbox.mapboxsdk.http.HttpLogger.logFailure((r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17;
}

