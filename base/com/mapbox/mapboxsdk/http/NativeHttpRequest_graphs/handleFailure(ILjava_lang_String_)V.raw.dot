digraph "CFG forcom.mapbox.mapboxsdk.http.NativeHttpRequest.handleFailure(ILjava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = (r4 I:com.mapbox.mapboxsdk.http.NativeHttpRequest) com.mapbox.mapboxsdk.http.NativeHttpRequest.lock java.util.concurrent.locks.ReentrantLock \l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.lock():void type: VIRTUAL \l0x0005: IGET  (r0 I:long) = (r4 I:com.mapbox.mapboxsdk.http.NativeHttpRequest) com.mapbox.mapboxsdk.http.NativeHttpRequest.nativePtr long \l0x0007: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0009: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  \l  (r4 I:com.mapbox.mapboxsdk.http.NativeHttpRequest)\l  (r5 I:int)\l  (r6 I:java.lang.String)\l com.mapbox.mapboxsdk.http.NativeHttpRequest.nativeOnFailure(int, java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r5 I:java.util.concurrent.locks.ReentrantLock) = (r4 I:com.mapbox.mapboxsdk.http.NativeHttpRequest) com.mapbox.mapboxsdk.http.NativeHttpRequest.lock java.util.concurrent.locks.ReentrantLock \l0x0012: INVOKE  (r5 I:java.util.concurrent.locks.ReentrantLock) java.util.concurrent.locks.ReentrantLock.unlock():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.http.NativeHttpRequest.handleFailure((r4 'this' I:com.mapbox.mapboxsdk.http.NativeHttpRequest A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

