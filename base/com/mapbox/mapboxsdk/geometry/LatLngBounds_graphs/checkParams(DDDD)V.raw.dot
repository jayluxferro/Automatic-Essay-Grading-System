digraph "CFG forcom.mapbox.mapboxsdk.geometry.LatLngBounds.checkParams(DDDD)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r1 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0063 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r5 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0063 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r3 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r0 I:boolean) = (r7 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE  (r3 I:boolean) = (r3 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0053 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: INVOKE  (r3 I:boolean) = (r7 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0053 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: CONST  (r3 I:?[long, double]) = \l  (4636033603912859648(0x4056800000000000, double:90.0) ?[long, double])\l \l0x0029: CMP_L  (r7 I:int) = (r1 I:double), (r3 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: CONST  (r7 I:?[long, double]) = \l  (\-4587338432941916160(0xc056800000000000, double:\-90.0) ?[long, double])\l \l0x0032: CMP_G  (r0 I:int) = (r1 I:double), (r7 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: CMP_L  (r3 I:int) = (r5 I:double), (r3 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: CMP_G  (r3 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|0x003c: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|0x003e: CMP_G  (r1 I:int) = (r1 I:double), (r5 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:23:0x0043 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x0043|0x0043: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0045: CONST_STR  (r2 I:java.lang.String) =  \"LatSouth cannot be less than latNorth\" \l0x0047: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x004a|0x004a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004d: CONST_STR  (r2 I:java.lang.String) =  \"latitude must be between \-90 and 90\" \l0x004f: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0052|0x0052: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0055: CONST_STR  (r2 I:java.lang.String) =  \"longitude must not be infinite\" \l0x0057: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|0x005a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x005b|0x005b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005d: CONST_STR  (r2 I:java.lang.String) =  \"longitude must not be NaN\" \l0x005f: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0062|0x0062: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0063|0x0063: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0065: CONST_STR  (r2 I:java.lang.String) =  \"latitude must not be NaN\" \l0x0067: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x006a|0x006a: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static void com.mapbox.mapboxsdk.geometry.LatLngBounds.checkParams((r1 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.FloatRange, \{from=\-90.0, to=90.0\}], , Annotation[BUILD, android.support.annotation.FloatRange, \{from=\-90.0, to=90.0\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_31;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_29;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_29;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_27;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_25;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

