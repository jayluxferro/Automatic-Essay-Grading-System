digraph "CFG forcom.mapbox.mapboxsdk.geometry.LatLngBounds.checkParams(DDDD)V" {
subgraph cluster_Region_62205958 {
label = "R(1:(1:32)(1:(1:30)(1:(1:28)(1:(1:26)(1:(1:24)(0))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1024188634 {
label = "IF [B:1:0x0004, B:3:0x000a] THEN: R(1:32) ELSE: R(1:(1:30)(1:(1:28)(1:(1:26)(1:(1:24)(0)))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (java.lang.Double.isNaN(r1) == true) goto L_0x0063\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ADDED_TO_REGION\l|if (java.lang.Double.isNaN(r5) == true) goto L_0x0063\l}"];
subgraph cluster_Region_1980748437 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x006a|throw new java.lang.IllegalArgumentException(\"latitude must not be NaN\")\l}"];
}
subgraph cluster_Region_575881845 {
label = "R(1:(1:30)(1:(1:28)(1:(1:26)(1:(1:24)(0))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_139223865 {
label = "IF [B:5:0x0010, B:7:0x0016] THEN: R(1:30) ELSE: R(1:(1:28)(1:(1:26)(1:(1:24)(0)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|if (java.lang.Double.isNaN(r3) == true) goto L_0x005b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|ADDED_TO_REGION\l|if (java.lang.Double.isNaN(r7) == true) goto L_0x005b\l}"];
subgraph cluster_Region_1780699098 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0062|throw new java.lang.IllegalArgumentException(\"longitude must not be NaN\")\l}"];
}
subgraph cluster_Region_1647358833 {
label = "R(1:(1:28)(1:(1:26)(1:(1:24)(0)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1514673576 {
label = "IF [B:9:0x001c, B:11:0x0022] THEN: R(1:28) ELSE: R(1:(1:26)(1:(1:24)(0))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001c|if (java.lang.Double.isInfinite(r3) == true) goto L_0x0053\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|ADDED_TO_REGION\l|if (java.lang.Double.isInfinite(r7) == true) goto L_0x0053\l}"];
subgraph cluster_Region_838262899 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x005a|throw new java.lang.IllegalArgumentException(\"longitude must not be infinite\")\l}"];
}
subgraph cluster_Region_1096496136 {
label = "R(1:(1:26)(1:(1:24)(0))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_639085673 {
label = "IF [B:13:0x002b, B:15:0x0034, B:17:0x0038, B:19:0x003c] THEN: R(1:26) ELSE: R(1:(1:24)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002b|if (r1 \> 90.0d) goto L_0x004b\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|ADDED_TO_REGION\l|if (r1 \< \-90.0d) goto L_0x004b\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|ADDED_TO_REGION\l|if (r5 \> 90.0d) goto L_0x004b\l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|ADDED_TO_REGION\l|if (r5 \< \-90.0d) goto L_0x004b\l}"];
subgraph cluster_Region_1021839446 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0052|throw new java.lang.IllegalArgumentException(\"latitude must be between \-90 and 90\")\l}"];
}
subgraph cluster_Region_974885568 {
label = "R(1:(1:24)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_578292479 {
label = "IF [B:21:0x0040] THEN: R(1:24) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0040|if (r1 \< r5) goto L_0x0043\l}"];
subgraph cluster_Region_957849149 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x004a|throw new java.lang.IllegalArgumentException(\"LatSouth cannot be less than latNorth\")\l}"];
}
subgraph cluster_Region_1161923569 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001e}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0024}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002d}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0036}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x003a}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x003e}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0042}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0043}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x004b}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0053}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x005b}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0063}"];
MethodNode[shape=record,label="{private static void com.mapbox.mapboxsdk.geometry.LatLngBounds.checkParams((r1v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.FloatRange, \{from=\-90.0, to=90.0\}], , Annotation[BUILD, android.support.annotation.FloatRange, \{from=\-90.0, to=90.0\}], \l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_31;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_31;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_29;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_29;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_27;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_25;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

