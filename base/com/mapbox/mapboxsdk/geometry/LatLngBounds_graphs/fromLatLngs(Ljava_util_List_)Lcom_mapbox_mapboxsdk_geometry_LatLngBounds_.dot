digraph "CFG forcom.mapbox.mapboxsdk.geometry.LatLngBounds.fromLatLngs(Ljava\/util\/List;)Lcom\/mapbox\/mapboxsdk\/geometry\/LatLngBounds;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r22\ldouble r1 = ((com.mapbox.mapboxsdk.geometry.ILatLng) r0.get(0)).getLongitude()\ldouble r3 = ((com.mapbox.mapboxsdk.geometry.ILatLng) r0.get(1)).getLongitude()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|if ((java.lang.Math.abs(r1 \- r3) \> 180.0d ? 1 : (java.lang.Math.abs(r1 \- r3) == 180.0d ? 0 : \-1)) \>= 0) goto L_0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0027}"];
Node_3 [shape=record,label="{3\:\ 0x0029|if ((r1 \> r3 ? 1 : (r1 == r3 ? 0 : \-1)) \>= 0) goto L_0x0031\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c}"];
Node_5 [shape=record,label="{5\:\ 0x002e|if ((r3 \> r1 ? 1 : (r3 == r1 ? 0 : \-1)) \>= 0) goto L_0x0031\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|r20 = r1\lr1 = r3\lr3 = r20\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|PHI: r1 r3 \l  PHI: (r1v4 double) = (r1v12 double), (r1v3 double), (r1v3 double) binds: [B:6:0x0031, B:5:0x002e, B:3:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 double) = (r3v8 double), (r3v3 double), (r3v3 double) binds: [B:6:0x0031, B:5:0x002e, B:3:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|java.util.Iterator r0 = r22.iterator()\lr12 = r1\lr14 = 90.0d\lr10 = \-90.0d\lr7 = r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x0048|LOOP_START\lPHI: r7 r10 r12 r14 \l  PHI: (r7v3 double) = (r7v2 double), (r7v4 double) binds: [B:7:0x0036, B:18:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 double) = (r10v0 double), (r10v2 double) binds: [B:7:0x0036, B:18:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 double) = (r12v0 double), (r12v3 double) binds: [B:7:0x0036, B:18:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 double) = (r14v0 double), (r14v2 double) binds: [B:7:0x0036, B:18:0x0048] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0048\-\>B:18:0x0048\l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|if (r0.hasNext() == false) goto L_0x0080\l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|com.mapbox.mapboxsdk.geometry.ILatLng r1 = (com.mapbox.mapboxsdk.geometry.ILatLng) r0.next()\ldouble r2 = r1.getLatitude()\ldouble r14 = java.lang.Math.min(r14, r2)\ldouble r10 = java.lang.Math.max(r10, r2)\ldouble r5 = r1.getLongitude()\lr18 = r5\l}"];
Node_11 [shape=record,label="{11\:\ 0x006c|if (containsLongitude(r7, r12, r5) != false) goto L_0x0048\l}"];
Node_12 [shape=record,label="{12\:\ 0x006e|r1 = r18\l}"];
Node_13 [shape=record,label="{13\:\ 0x007a|if ((getLongitudeSpan(r1, r12) \> getLongitudeSpan(r7, r1) ? 1 : (getLongitudeSpan(r1, r12) == getLongitudeSpan(r7, r1) ? 0 : \-1)) \> 0) goto L_0x007e\l}"];
Node_14 [shape=record,label="{14\:\ 0x007c|r7 = r1\l}"];
Node_15 [shape=record,label="{15\:\ 0x007e|r12 = r1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0080|r1 = r12\l}"];
Node_17 [shape=record,label="{17\:\ 0x008a|RETURN\l|return new com.mapbox.mapboxsdk.geometry.LatLngBounds(r10, r7, r14, r1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|LOOP_END\lSYNTHETIC\lPHI: r7 r12 \l  PHI: (r7v4 double) = (r7v3 double), (r7v3 double), (r7v5 double) binds: [B:20:0x0048, B:22:0x0048, B:21:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v3 double) = (r12v1 double), (r12v4 double), (r12v1 double) binds: [B:20:0x0048, B:22:0x0048, B:21:0x0048] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0048\-\>B:18:0x0048\l}"];
Node_19 [shape=record,label="{19\:\ 0x0080|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static com.mapbox.mapboxsdk.geometry.LatLngBounds com.mapbox.mapboxsdk.geometry.LatLngBounds.fromLatLngs((r22v0 java.util.List\<? extends com.mapbox.mapboxsdk.geometry.ILatLng\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, +, Lcom\/mapbox\/mapboxsdk\/geometry\/ILatLng;, \>;), Lcom\/mapbox\/mapboxsdk\/geometry\/LatLngBounds;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_6;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_18 -> Node_8;
Node_19 -> Node_16;
Node_20 -> Node_18;
Node_21 -> Node_18;
Node_22 -> Node_18;
}

