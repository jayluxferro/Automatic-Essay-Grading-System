digraph "CFG forcom.mapbox.mapboxsdk.log.LoggerDefinition.\-CC.log(ILjava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3, 4, 5, 6] t:[0x0019, 0x0015, 0x0011, 0x000d, 0x0009] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException \l0x0005: INVOKE  (r0 I:java.lang.UnsupportedOperationException) java.lang.UnsupportedOperationException.\<init\>():void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.e(java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.w(java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.i(java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.d(java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.v(java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.mapbox.mapboxsdk.log.LoggerDefinition.\-CC.log((r0 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_0 -> Node_4;
Node_0 -> Node_5;
Node_0 -> Node_6;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

