digraph "CFG forcom.mapbox.mapboxsdk.annotations.MarkerViewManager.addMarkerViewAdapter(Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap$MarkerViewAdapter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Class) = \l  (r3 I:com.mapbox.mapboxsdk.maps.MapboxMap$MarkerViewAdapter)\l com.mapbox.mapboxsdk.maps.MapboxMap.MarkerViewAdapter.getMarkerClass():java.lang.Class type: VIRTUAL \l0x0004: CONST_CLASS  (r1 I:java.lang.Class\<com.mapbox.mapboxsdk.annotations.MarkerView\>) =  com.mapbox.mapboxsdk.annotations.MarkerView.class \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r0 I:java.util.List\<com.mapbox.mapboxsdk.maps.MapboxMap$MarkerViewAdapter\>) = (r2 I:com.mapbox.mapboxsdk.annotations.MarkerViewManager) com.mapbox.mapboxsdk.annotations.MarkerViewManager.markerViewAdapters java.util.List \l0x000e: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r3 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:java.util.List\<com.mapbox.mapboxsdk.maps.MapboxMap$MarkerViewAdapter\>) = (r2 I:com.mapbox.mapboxsdk.annotations.MarkerViewManager) com.mapbox.mapboxsdk.annotations.MarkerViewManager.markerViewAdapters java.util.List \l0x0016: INVOKE  (r0 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0019: INVOKE  (r2 I:com.mapbox.mapboxsdk.annotations.MarkerViewManager) com.mapbox.mapboxsdk.annotations.MarkerViewManager.invalidateViewMarkersInVisibleRegion():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: NEW_INSTANCE  (r3 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x001f: CONST_STR  (r0 I:java.lang.String) =  \"Providing a custom MarkerViewAdapter requires subclassing MarkerView\" \l0x0021: INVOKE  (r3 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.annotations.MarkerViewManager.addMarkerViewAdapter((r2 'this' I:com.mapbox.mapboxsdk.annotations.MarkerViewManager A[IMMUTABLE_TYPE, THIS]), (r3 I:com.mapbox.mapboxsdk.maps.MapboxMap$MarkerViewAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

