digraph "CFG forcom.mapbox.mapboxsdk.annotations.Icon.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.Bitmap) = (r2 I:com.mapbox.mapboxsdk.annotations.Icon) com.mapbox.mapboxsdk.annotations.Icon.mBitmap android.graphics.Bitmap \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.Bitmap) = (r2 I:com.mapbox.mapboxsdk.annotations.Icon) com.mapbox.mapboxsdk.annotations.Icon.mBitmap android.graphics.Bitmap \l0x0006: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r1 I:java.lang.String) = (r2 I:com.mapbox.mapboxsdk.annotations.Icon) com.mapbox.mapboxsdk.annotations.Icon.mId java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0012: IGET  (r1 I:java.lang.String) = (r2 I:com.mapbox.mapboxsdk.annotations.Icon) com.mapbox.mapboxsdk.annotations.Icon.mId java.lang.String \l0x0014: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0018: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int com.mapbox.mapboxsdk.annotations.Icon.hashCode((r2 'this' I:com.mapbox.mapboxsdk.annotations.Icon A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

