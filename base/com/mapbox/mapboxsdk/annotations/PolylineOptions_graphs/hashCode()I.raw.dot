digraph "CFG forcom.mapbox.mapboxsdk.annotations.PolylineOptions.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getAlpha():float type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getAlpha():float type: VIRTUAL \l0x000e: INVOKE  (r0 I:int) = (r0 I:float) java.lang.Float.floatToIntBits(float):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, short, byte, char]) = (31 ?[int, float, short, byte, char]) \l0x0016: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x0017: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0019: INVOKE  (r4 I:int) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getColor():int type: VIRTUAL \l0x001d: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) \l0x001e: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0020: INVOKE  (r4 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getWidth():float type: VIRTUAL \l0x0024: CMP_L  (r1 I:int) = (r4 I:float), (r1 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0031 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: INVOKE  (r1 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getWidth():float type: VIRTUAL \l0x002c: INVOKE  (r1 I:int) = (r1 I:float) java.lang.Float.floatToIntBits(float):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0033: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0035: INVOKE  (r1 I:java.util.List) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0043 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: INVOKE  (r1 I:java.util.List) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l0x003f: INVOKE  (r2 I:int) = (r1 I:java.util.List) java.util.List.hashCode():int type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int com.mapbox.mapboxsdk.annotations.PolylineOptions.hashCode((r5 'this' I:com.mapbox.mapboxsdk.annotations.PolylineOptions A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

