digraph "CFG forcom.mapbox.mapboxsdk.annotations.PolylineOptions.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x005b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Class) = (r4 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x000b: INVOKE  (r3 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CHECK_CAST  (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) = (com.mapbox.mapboxsdk.annotations.PolylineOptions) (r5 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  (r2 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getAlpha():float type: VIRTUAL \l0x0018: INVOKE  (r3 I:float) = (r4 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getAlpha():float type: VIRTUAL \l0x001c: INVOKE  (r2 I:int) = (r2 I:float), (r3 I:float) java.lang.Float.compare(float, float):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0023 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: INVOKE  (r2 I:int) = (r4 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getColor():int type: VIRTUAL \l0x0027: INVOKE  (r3 I:int) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getColor():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: INVOKE  (r2 I:float) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getWidth():float type: VIRTUAL \l0x0032: INVOKE  (r3 I:float) = (r4 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getWidth():float type: VIRTUAL \l0x0036: INVOKE  (r2 I:int) = (r2 I:float), (r3 I:float) java.lang.Float.compare(float, float):int type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003d \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: RETURN  (r1 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: INVOKE  (r2 I:java.util.List) = (r4 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0052 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: INVOKE  (r2 I:java.util.List) = (r4 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l0x0047: INVOKE  (r5 I:java.util.List) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l0x004b: INVOKE  (r5 I:boolean) = (r2 I:java.util.List), (r5 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0052|0x0052: INVOKE  (r5 I:java.util.List) = (r5 I:com.mapbox.mapboxsdk.annotations.PolylineOptions) com.mapbox.mapboxsdk.annotations.PolylineOptions.getPoints():java.util.List type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0059 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|0x0059: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x005a|0x005a: RETURN  (r0 I:boolean) \l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|0x005b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.annotations.PolylineOptions.equals((r4 'this' I:com.mapbox.mapboxsdk.annotations.PolylineOptions A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_27;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_27[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_26;
Node_20 -> Node_25[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_26;
}

