digraph "CFG forcom.mapbox.mapboxsdk.annotations.MarkerView.getIcon()Lcom\/mapbox\/mapboxsdk\/annotations\/Icon;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) = (r1 I:com.mapbox.mapboxsdk.annotations.MarkerView) com.mapbox.mapboxsdk.annotations.MarkerView.markerViewIcon com.mapbox.mapboxsdk.annotations.Icon \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:android.content.Context) =  com.mapbox.mapboxsdk.Mapbox.getApplicationContext():android.content.Context type: STATIC \l0x0008: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.IconFactory) = (r0 I:android.content.Context) com.mapbox.mapboxsdk.annotations.IconFactory.getInstance(android.content.Context):com.mapbox.mapboxsdk.annotations.IconFactory type: STATIC \l0x000c: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) = (r0 I:com.mapbox.mapboxsdk.annotations.IconFactory) com.mapbox.mapboxsdk.annotations.IconFactory.defaultMarkerView():com.mapbox.mapboxsdk.annotations.Icon type: VIRTUAL \l0x0010: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.annotations.MarkerView)\l  (r0 I:com.mapbox.mapboxsdk.annotations.Icon)\l com.mapbox.mapboxsdk.annotations.MarkerView.setIcon(com.mapbox.mapboxsdk.annotations.Icon):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IGET  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) = (r1 I:com.mapbox.mapboxsdk.annotations.MarkerView) com.mapbox.mapboxsdk.annotations.MarkerView.markerViewIcon com.mapbox.mapboxsdk.annotations.Icon \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) \l}"];
MethodNode[shape=record,label="{public com.mapbox.mapboxsdk.annotations.Icon com.mapbox.mapboxsdk.annotations.MarkerView.getIcon((r1 'this' I:com.mapbox.mapboxsdk.annotations.MarkerView A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

