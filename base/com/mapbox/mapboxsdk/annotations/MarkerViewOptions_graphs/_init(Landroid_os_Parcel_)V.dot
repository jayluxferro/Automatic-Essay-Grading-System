digraph "CFG forcom.mapbox.mapboxsdk.annotations.MarkerViewOptions.\<init\>(Landroid\/os\/Parcel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.marker = new com.mapbox.mapboxsdk.annotations.MarkerView()\lposition((com.mapbox.mapboxsdk.geometry.LatLng) r5.readParcelable(com.mapbox.mapboxsdk.geometry.LatLng.class.getClassLoader()))\lsnippet(r5.readString())\ltitle(r5.readString())\lr1 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x002d|if (r5.readByte() == 0) goto L_0x0031\l}"];
Node_2 [shape=record,label="{2\:\ 0x002f|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|PHI: r0 \l  PHI: (r0v8 boolean) = (r0v16 boolean), (r0v17 boolean) binds: [B:3:0x0031, B:2:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|flat(r0)\lanchor(r5.readFloat(), r5.readFloat())\linfoWindowAnchor(r5.readFloat(), r5.readFloat())\lrotation(r5.readFloat())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0056|if (r5.readByte() == 0) goto L_0x0059\l}"];
Node_6 [shape=record,label="{6\:\ 0x0058|r1 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0059|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v5 boolean) binds: [B:5:0x0056, B:6:0x0058] A[DONT_GENERATE, DONT_INLINE]\l|visible(r1)\lalpha(r5.readFloat())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0067|if (r5.readByte() == 0) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0069|icon(new com.mapbox.mapboxsdk.annotations.Icon(r5.readString(), (android.graphics.Bitmap) r5.readParcelable(android.graphics.Bitmap.class.getClassLoader())))\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void com.mapbox.mapboxsdk.annotations.MarkerViewOptions.\<init\>((r4v0 'this' com.mapbox.mapboxsdk.annotations.MarkerViewOptions A[IMMUTABLE_TYPE, THIS]), (r5v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
}

