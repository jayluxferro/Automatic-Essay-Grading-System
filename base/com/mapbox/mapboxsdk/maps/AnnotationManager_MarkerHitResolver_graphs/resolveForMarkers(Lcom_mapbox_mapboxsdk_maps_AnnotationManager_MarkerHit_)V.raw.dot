digraph "CFG forcom.mapbox.mapboxsdk.maps.AnnotationManager.MarkerHitResolver.resolveForMarkers(Lcom\/mapbox\/mapboxsdk\/maps\/AnnotationManager$MarkerHit;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = \l  (r4 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit)\l com.mapbox.mapboxsdk.maps.AnnotationManager.MarkerHit.access$100(com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit):java.util.List type: STATIC \l0x0004: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r1 I:com.mapbox.mapboxsdk.annotations.Marker) = (com.mapbox.mapboxsdk.annotations.Marker) (r1 I:?[OBJECT, ARRAY]) \l0x0014: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.mapboxsdk.annotations.MarkerView \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CHECK_CAST  (r1 I:com.mapbox.mapboxsdk.annotations.MarkerView) = (com.mapbox.mapboxsdk.annotations.MarkerView) (r1 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  \l  (r3 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHitResolver)\l  (r4 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit)\l  (r1 I:com.mapbox.mapboxsdk.annotations.MarkerView)\l com.mapbox.mapboxsdk.maps.AnnotationManager.MarkerHitResolver.resolveForMarkerView(com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit, com.mapbox.mapboxsdk.annotations.MarkerView):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  \l  (r3 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHitResolver)\l  (r4 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit)\l  (r1 I:com.mapbox.mapboxsdk.annotations.Marker)\l com.mapbox.mapboxsdk.maps.AnnotationManager.MarkerHitResolver.resolveForMarker(com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit, com.mapbox.mapboxsdk.annotations.Marker):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.maps.AnnotationManager.MarkerHitResolver.resolveForMarkers((r3 'this' I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHitResolver A[IMMUTABLE_TYPE, THIS]), (r4 I:com.mapbox.mapboxsdk.maps.AnnotationManager$MarkerHit A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

