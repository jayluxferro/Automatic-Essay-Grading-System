digraph "CFG forcom.mapbox.mapboxsdk.maps.AnnotationContainer.removeBy(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r7.size()\llong[] r1 = new long[r0]\lr2 = 0\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:0:0x0000, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|if (r3 \>= r0) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|r1[r3] = ((com.mapbox.mapboxsdk.annotations.Annotation) r7.get(r3)).getId()\lint r3 = r3 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|removeNativeAnnotations(r1)\lint r7 = r1.length\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:3:0x0019, B:5:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x001d\-\>B:5:0x001f\l|if (r2 \>= r7) goto L_0x0029\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|LOOP_END\lLOOP:1: B:4:0x001d\-\>B:5:0x001f\l|r3 = r1[r2]\lr6.annotations.remove(r3)\lint r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.maps.AnnotationContainer.removeBy((r6v0 'this' com.mapbox.mapboxsdk.maps.AnnotationContainer A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.List\<? extends com.mapbox.mapboxsdk.annotations.Annotation\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, +, Lcom\/mapbox\/mapboxsdk\/annotations\/Annotation;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_4;
Node_7 -> Node_3;
Node_8 -> Node_6;
}

