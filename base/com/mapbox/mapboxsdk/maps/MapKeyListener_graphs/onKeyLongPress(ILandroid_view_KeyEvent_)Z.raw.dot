digraph "CFG forcom.mapbox.mapboxsdk.maps.MapKeyListener.onKeyLongPress(ILandroid\/view\/KeyEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r4 I:?[int, float, short, byte, char]) = (66 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r3 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r2 I:com.mapbox.mapboxsdk.maps.MapKeyListener) com.mapbox.mapboxsdk.maps.MapKeyListener.uiSettings com.mapbox.mapboxsdk.maps.UiSettings \l0x000c: INVOKE  (r3 I:boolean) = (r3 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.isZoomGesturesEnabled():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN  (r0 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: NEW_INSTANCE  (r3 I:android.graphics.PointF) =  android.graphics.PointF \l0x0015: IGET  (r4 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r2 I:com.mapbox.mapboxsdk.maps.MapKeyListener) com.mapbox.mapboxsdk.maps.MapKeyListener.uiSettings com.mapbox.mapboxsdk.maps.UiSettings \l0x0017: INVOKE  (r4 I:float) = (r4 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.getWidth():float type: VIRTUAL \l0x001b: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x001d: ARITH  (r4 I:float) = (r4 I:float) \/ (r0 I:float) \l0x001e: IGET  (r1 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r2 I:com.mapbox.mapboxsdk.maps.MapKeyListener) com.mapbox.mapboxsdk.maps.MapKeyListener.uiSettings com.mapbox.mapboxsdk.maps.UiSettings \l0x0020: INVOKE  (r1 I:float) = (r1 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.getHeight():float type: VIRTUAL \l0x0024: ARITH  (r1 I:float) = (r1 I:float) \/ (r0 I:float) \l0x0025: INVOKE  (r3 I:android.graphics.PointF), (r4 I:float), (r1 I:float) android.graphics.PointF.\<init\>(float, float):void type: DIRECT \l0x0028: IGET  (r4 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = (r2 I:com.mapbox.mapboxsdk.maps.MapKeyListener) com.mapbox.mapboxsdk.maps.MapKeyListener.mapGestureDetector com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x002a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002b: INVOKE  \l  (r4 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r3 I:android.graphics.PointF)\l  (r0 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.zoomOutAnimated(android.graphics.PointF, boolean):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean com.mapbox.mapboxsdk.maps.MapKeyListener.onKeyLongPress((r2 'this' I:com.mapbox.mapboxsdk.maps.MapKeyListener A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.KeyEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
}

