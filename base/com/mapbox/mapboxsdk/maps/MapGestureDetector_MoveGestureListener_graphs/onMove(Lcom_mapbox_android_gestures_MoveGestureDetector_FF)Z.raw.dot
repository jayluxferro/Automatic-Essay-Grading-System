digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.onMove(Lcom\/mapbox\/android\/gestures\/MoveGestureDetector;FF)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CMP_L  (r2 I:int) = (r11 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CMP_L  (r1 I:int) = (r12 I:float), (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x000c: INVOKE  (r1 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher) = (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$900(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.CameraChangeDispatcher type: STATIC \l0x0010: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher)\l  (r0 I:int)\l com.mapbox.mapboxsdk.maps.CameraChangeDispatcher.onCameraMoveStarted(int):void type: VIRTUAL \l0x0013: IGET  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0015: INVOKE  (r2 I:com.mapbox.mapboxsdk.maps.Transform) = (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$400(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.Transform type: STATIC \l0x0019: NEG  (r11 I:float) = (r11 I:float) \l0x001a: CAST  (r3 I:double) = (double) (r11 I:float) \l0x001b: NEG  (r11 I:float) = (r12 I:float) \l0x001c: CAST  (r5 I:double) = (double) (r11 I:float) \l0x001d: CONST  (r7 I:?[long, double]) = (0 ?[long, double]) \l0x001f: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.maps.Transform)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:long)\l com.mapbox.mapboxsdk.maps.Transform.moveBy(double, double, long):void type: VIRTUAL \l0x0022: IGET  (r11 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0024: INVOKE  (r11 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.notifyOnScrollListeners():void type: VIRTUAL \l0x0027: IGET  (r11 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0029: INVOKE  \l  (r11 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r10 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.notifyOnMoveListeners(com.mapbox.android.gestures.MoveGestureDetector):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener.onMove((r9 'this' I:com.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener A[IMMUTABLE_TYPE, THIS]), (r10 I:com.mapbox.android.gestures.MoveGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

