digraph "CFG forcom.mapbox.mapboxsdk.maps.MarkerContainer.addBy(Ljava\/util\/List;Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0009: IGET  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView) = (r6 I:com.mapbox.mapboxsdk.maps.MarkerContainer) com.mapbox.mapboxsdk.maps.MarkerContainer.nativeMapView com.mapbox.mapboxsdk.maps.NativeMapView \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x004a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r4 I:java.lang.Object) = (r7 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r4 I:com.mapbox.mapboxsdk.annotations.BaseMarkerOptions) = (com.mapbox.mapboxsdk.annotations.BaseMarkerOptions) (r4 I:?[OBJECT, ARRAY]) \l0x0019: INVOKE  (r4 I:com.mapbox.mapboxsdk.annotations.Marker) = \l  (r6 I:com.mapbox.mapboxsdk.maps.MarkerContainer)\l  (r4 I:com.mapbox.mapboxsdk.annotations.BaseMarkerOptions)\l com.mapbox.mapboxsdk.maps.MarkerContainer.prepareMarker(com.mapbox.mapboxsdk.annotations.BaseMarkerOptions):com.mapbox.mapboxsdk.annotations.Marker type: DIRECT \l0x001d: INVOKE  (r1 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0020: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  (r7 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x004a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r7 I:com.mapbox.mapboxsdk.maps.NativeMapView) = (r6 I:com.mapbox.mapboxsdk.maps.MarkerContainer) com.mapbox.mapboxsdk.maps.MarkerContainer.nativeMapView com.mapbox.mapboxsdk.maps.NativeMapView \l0x002b: INVOKE  (r7 I:long[]) = \l  (r7 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r1 I:java.util.List)\l com.mapbox.mapboxsdk.maps.NativeMapView.addMarkers(java.util.List):long[] type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x004a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0036: CHECK_CAST  (r0 I:com.mapbox.mapboxsdk.annotations.Marker) = (com.mapbox.mapboxsdk.annotations.Marker) (r0 I:?[OBJECT, ARRAY]) \l0x0038: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.annotations.Marker)\l  (r8 I:com.mapbox.mapboxsdk.maps.MapboxMap)\l com.mapbox.mapboxsdk.annotations.Marker.setMapboxMap(com.mapbox.mapboxsdk.maps.MapboxMap):void type: VIRTUAL \l0x003b: AGET  (r3 I:?[long, double]) = (r7 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x003d: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.Marker), (r3 I:long) com.mapbox.mapboxsdk.annotations.Marker.setId(long):void type: VIRTUAL \l0x0040: IGET  (r3 I:android.support.v4.util.LongSparseArray\<com.mapbox.mapboxsdk.annotations.Annotation\>) = (r6 I:com.mapbox.mapboxsdk.maps.MarkerContainer) com.mapbox.mapboxsdk.maps.MarkerContainer.annotations android.support.v4.util.LongSparseArray \l0x0042: AGET  (r4 I:?[long, double]) = (r7 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0044: INVOKE  \l  (r3 I:android.support.v4.util.LongSparseArray)\l  (r4 I:long)\l  (r0 I:java.lang.Object)\l android.support.v4.util.LongSparseArray.put(long, java.lang.Object):void type: VIRTUAL \l0x0047: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|0x004a: RETURN  \l  (r1 I:java.util.List\<com.mapbox.mapboxsdk.annotations.Marker\>)\l \l}"];
MethodNode[shape=record,label="{public java.util.List\<com.mapbox.mapboxsdk.annotations.Marker\> com.mapbox.mapboxsdk.maps.MarkerContainer.addBy((r6 'this' I:com.mapbox.mapboxsdk.maps.MarkerContainer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.List\<? extends com.mapbox.mapboxsdk.annotations.BaseMarkerOptions\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.mapbox.mapboxsdk.maps.MapboxMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, +, Lcom\/mapbox\/mapboxsdk\/annotations\/BaseMarkerOptions;, \>;, Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;, ), Ljava\/util\/List\<, Lcom\/mapbox\/mapboxsdk\/annotations\/Marker;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
}

