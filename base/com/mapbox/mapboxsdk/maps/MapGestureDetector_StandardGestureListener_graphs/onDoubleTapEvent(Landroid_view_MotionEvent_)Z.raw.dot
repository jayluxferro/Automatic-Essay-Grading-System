digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.onDoubleTapEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getActionMasked():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0009: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r1 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.access$802(com.mapbox.mapboxsdk.maps.MapGestureDetector, boolean):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r0 I:int) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getActionMasked():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x007d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0014: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$600(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.UiSettings type: STATIC \l0x0018: INVOKE  (r0 I:boolean) = (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.isZoomGesturesEnabled():boolean type: VIRTUAL \l0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x007c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0021: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$600(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.UiSettings type: STATIC \l0x0025: INVOKE  (r0 I:boolean) = (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.isDoubleTapGesturesEnabled():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x007c \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x002d: INVOKE  (r0 I:boolean) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$800(com.mapbox.mapboxsdk.maps.MapGestureDetector):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0036: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.Transform) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$400(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.Transform type: STATIC \l0x003a: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.Transform) com.mapbox.mapboxsdk.maps.Transform.cancelTransitions():void type: VIRTUAL \l0x003d: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x003f: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$900(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.CameraChangeDispatcher type: STATIC \l0x0043: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher)\l  (r1 I:int)\l com.mapbox.mapboxsdk.maps.CameraChangeDispatcher.onCameraMoveStarted(int):void type: VIRTUAL \l0x0046: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0048: INVOKE  (r0 I:android.graphics.PointF) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1000(com.mapbox.mapboxsdk.maps.MapGestureDetector):android.graphics.PointF type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0050: INVOKE  (r0 I:android.graphics.PointF) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1000(com.mapbox.mapboxsdk.maps.MapGestureDetector):android.graphics.PointF type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: NEW_INSTANCE  (r0 I:android.graphics.PointF) =  android.graphics.PointF \l0x0057: INVOKE  (r3 I:float) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getX():float type: VIRTUAL \l0x005b: INVOKE  (r4 I:float) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getY():float type: VIRTUAL \l0x005f: INVOKE  (r0 I:android.graphics.PointF), (r3 I:float), (r4 I:float) android.graphics.PointF.\<init\>(float, float):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0062|0x0062: IGET  (r3 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0064: INVOKE  \l  (r3 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r0 I:android.graphics.PointF)\l  (r2 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.zoomInAnimated(android.graphics.PointF, boolean):void type: VIRTUAL \l0x0067: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r5 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0069: CONST_STR  (r2 I:java.lang.String) =  \"DoubleTap\" \l0x006b: NEW_INSTANCE  (r3 I:android.graphics.PointF) =  android.graphics.PointF \l0x006d: INVOKE  (r4 I:float) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getX():float type: VIRTUAL \l0x0071: INVOKE  (r6 I:float) = (r6 I:android.view.MotionEvent) android.view.MotionEvent.getY():float type: VIRTUAL \l0x0075: INVOKE  (r3 I:android.graphics.PointF), (r4 I:float), (r6 I:float) android.graphics.PointF.\<init\>(float, float):void type: DIRECT \l0x0078: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r2 I:java.lang.String)\l  (r3 I:android.graphics.PointF)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.access$700(com.mapbox.mapboxsdk.maps.MapGestureDetector, java.lang.String, android.graphics.PointF):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x007b|0x007b: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x007c|0x007c: RETURN  (r2 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x007d|0x007d: INVOKE  (r6 I:boolean) = \l  (r5 I:com.mapbox.android.gestures.StandardGestureDetector$SimpleStandardOnGestureListener)\l  (r6 I:android.view.MotionEvent)\l com.mapbox.android.gestures.StandardGestureDetector.SimpleStandardOnGestureListener.onDoubleTapEvent(android.view.MotionEvent):boolean type: SUPER \l}"];
Node_20 [shape=record,label="{20\:\ 0x0081|0x0081: RETURN  (r6 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener.onDoubleTapEvent((r5 'this' I:com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener A[IMMUTABLE_TYPE, THIS]), (r6 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_18[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_19 -> Node_20;
}

