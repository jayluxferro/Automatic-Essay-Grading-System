digraph "CFG forcom.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.onDestroy()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.Object) = \l  (r2 I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread)\l com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.lock java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: IPUT  \l  (r1 I:boolean)\l  (r2 I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread)\l com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.shouldExit boolean A[Catch:\{ all \-\> 0x001f \}, TRY_ENTER]\l0x0006: IGET  (r1 I:java.lang.Object) = \l  (r2 I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread)\l com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.lock java.lang.Object A[Catch:\{ all \-\> 0x001f \}]\l0x0008: INVOKE  (r1 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x001f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r1 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread)\l com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.exited boolean A[Catch:\{ all \-\> 0x001f \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|SYNTHETIC\lSplitter:B:7:0x000f\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000f\l|0x000f: IGET  (r1 I:java.lang.Object) = \l  (r2 I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread)\l com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.lock java.lang.Object A[Catch:\{ InterruptedException \-\> 0x0015 \}, TRY_ENTER]\l0x0011: INVOKE  (r1 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0015 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\lSplitter:B:10:0x0015\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0015\l|0x0015: INVOKE  (r1 I:java.lang.Thread) =  java.lang.Thread.currentThread():java.lang.Thread type: STATIC A[Catch:\{ all \-\> 0x001f \}, ExcHandler: InterruptedException null, TRY_ENTER]\l0x0019: INVOKE  (r1 I:java.lang.Thread) java.lang.Thread.interrupt():void type: VIRTUAL A[Catch:\{ all \-\> 0x001f \}]\l0x001c: GOTO  \-\> 0x000b A[Catch:\{ all \-\> 0x001f \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001f \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: RETURN   A[Catch:\{ all \-\> 0x001f \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x001f: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001f \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001f \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread.onDestroy((r2 'this' I:com.mapbox.mapboxsdk.maps.renderer.textureview.TextureViewRenderThread A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.UiThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_5;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

