digraph "CFG forcom.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser.1Config.compareTo(Lcom\/mapbox\/mapboxsdk\/maps\/renderer\/egl\/EGLConfigChooser$1Config;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = com.mapbox.mapboxsdk.utils.Compare.compare(r2.bufferFormat.value, r3.bufferFormat.value)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r0 == 0) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|RETURN\l|return r0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|int r0 = com.mapbox.mapboxsdk.utils.Compare.compare(r2.depthStencilFormat.value, r3.depthStencilFormat.value)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r0 == 0) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|RETURN\l|return r0\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|int r0 = com.mapbox.mapboxsdk.utils.Compare.compare(r2.isNotConformant, r3.isNotConformant)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|if (r0 == 0) goto L_0x0029\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|int r0 = com.mapbox.mapboxsdk.utils.Compare.compare(r2.isCaveat, r3.isCaveat)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|if (r0 == 0) goto L_0x0034\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|int r3 = com.mapbox.mapboxsdk.utils.Compare.compare(r2.index, r3.index)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|if (r3 == 0) goto L_0x003f\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|return r3\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public int com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser.1Config.compareTo((r2v0 'this' com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$1Config A[IMMUTABLE_TYPE, THIS]), (r3v0 com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$1Config A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
}

