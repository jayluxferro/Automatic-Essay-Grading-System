digraph "CFG forcom.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser.getNumberOfConfigurations(Ljavax\/microedition\/khronos\/egl\/EGL10;Ljavax\/microedition\/khronos\/egl\/EGLDisplay;[I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r7 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0003: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0008: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0009: INVOKE  (r10 I:boolean) = \l  (r1 I:javax.microedition.khronos.egl.EGL10)\l  (r2 I:javax.microedition.khronos.egl.EGLDisplay)\l  (r3 I:int[])\l  (r4 I:javax.microedition.khronos.egl.EGLConfig[])\l  (r5 I:int)\l  (r6 I:int[])\l javax.microedition.khronos.egl.EGL10.eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay, int[], javax.microedition.khronos.egl.EGLConfig[], int, int[]):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r7 I:int[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: SGET  (r10 I:java.util.Locale) =  com.mapbox.mapboxsdk.constants.MapboxConstants.MAPBOX_LOCALE java.util.Locale \l0x0012: NEW_ARRAY  (r11 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  (r9 I:int) = (r9 I:javax.microedition.khronos.egl.EGL10) javax.microedition.khronos.egl.EGL10.eglGetError():int type: INTERFACE \l0x0019: INVOKE  (r9 I:java.lang.Integer) = (r9 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001d: APUT  \l  (r11 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x001f: CONST_STR  (r9 I:java.lang.String) =  \"eglChooseConfig(NULL) returned error %d\" \l0x0021: INVOKE  (r9 I:java.lang.String) = \l  (r10 I:java.util.Locale)\l  (r9 I:java.lang.String)\l  (r11 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0025: CONST_STR  (r10 I:java.lang.String) =  \"Mbgl\-EGLConfigChooser\" \l0x0027: INVOKE  (r10 I:java.lang.String), (r9 I:java.lang.String) com.mapbox.mapboxsdk.log.Logger.e(java.lang.String, java.lang.String):void type: STATIC \l0x002a: NEW_INSTANCE  (r9 I:com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigException) =  com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigException \l0x002c: CONST_STR  (r10 I:java.lang.String) =  \"eglChooseConfig() failed\" \l0x002e: INVOKE  \l  (r9 I:com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigException)\l  (r10 I:java.lang.String)\l com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private int[] com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser.getNumberOfConfigurations((r8 'this' I:com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser A[IMMUTABLE_TYPE, THIS]), (r9 I:javax.microedition.khronos.egl.EGL10 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:javax.microedition.khronos.egl.EGLDisplay A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

