digraph "CFG forcom.mapbox.mapboxsdk.maps.IconManager.ensureIconLoaded(Lcom\/mapbox\/mapboxsdk\/annotations\/Marker;Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) = (r2 I:com.mapbox.mapboxsdk.annotations.Marker) com.mapbox.mapboxsdk.annotations.Marker.getIcon():com.mapbox.mapboxsdk.annotations.Icon type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.Icon) = \l  (r1 I:com.mapbox.mapboxsdk.maps.IconManager)\l  (r2 I:com.mapbox.mapboxsdk.annotations.Marker)\l com.mapbox.mapboxsdk.maps.IconManager.loadDefaultIconForMarker(com.mapbox.mapboxsdk.annotations.Marker):com.mapbox.mapboxsdk.annotations.Icon type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.IconManager)\l  (r0 I:com.mapbox.mapboxsdk.annotations.Icon)\l com.mapbox.mapboxsdk.maps.IconManager.addIcon(com.mapbox.mapboxsdk.annotations.Icon):void type: DIRECT \l0x000d: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.IconManager)\l  (r2 I:com.mapbox.mapboxsdk.annotations.Marker)\l  (r3 I:com.mapbox.mapboxsdk.maps.MapboxMap)\l  (r0 I:com.mapbox.mapboxsdk.annotations.Icon)\l com.mapbox.mapboxsdk.maps.IconManager.setTopOffsetPixels(com.mapbox.mapboxsdk.annotations.Marker, com.mapbox.mapboxsdk.maps.MapboxMap, com.mapbox.mapboxsdk.annotations.Icon):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.maps.IconManager.ensureIconLoaded((r1 'this' I:com.mapbox.mapboxsdk.maps.IconManager A[IMMUTABLE_TYPE, THIS]), (r2 I:com.mapbox.mapboxsdk.annotations.Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.mapbox.mapboxsdk.maps.MapboxMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

