digraph "CFG forcom.mapbox.mapboxsdk.maps.IconManager.setTopOffsetPixels(Lcom\/mapbox\/mapboxsdk\/annotations\/Marker;Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;Lcom\/mapbox\/mapboxsdk\/annotations\/Icon;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if ((r5.getId() \> \-1 ? 1 : (r5.getId() == \-1 ? 0 : \-1)) == 0) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|com.mapbox.mapboxsdk.annotations.Marker r6 = (com.mapbox.mapboxsdk.annotations.Marker) r6.getAnnotation(r5.getId())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|r6 = null\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|PHI: r6 \l  PHI: (r6v1 com.mapbox.mapboxsdk.annotations.Marker) = (r6v4 com.mapbox.mapboxsdk.annotations.Marker), (r6v6 com.mapbox.mapboxsdk.annotations.Marker) binds: [B:3:0x0015, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 == null) goto L_0x0028\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if (r6.getIcon() == null) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e}"];
Node_8 [shape=record,label="{8\:\ 0x0026|if (r6.getIcon() == r5.getIcon()) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|r5.setTopOffsetPixels(getTopOffsetPixelsForIcon(r7))\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.maps.IconManager.setTopOffsetPixels((r4v0 'this' com.mapbox.mapboxsdk.maps.IconManager A[IMMUTABLE_TYPE, THIS]), (r5v0 com.mapbox.mapboxsdk.annotations.Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.mapbox.mapboxsdk.maps.MapboxMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 com.mapbox.mapboxsdk.annotations.Icon A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
}

