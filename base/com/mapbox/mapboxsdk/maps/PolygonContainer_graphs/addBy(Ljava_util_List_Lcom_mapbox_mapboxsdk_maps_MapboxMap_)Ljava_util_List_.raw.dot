digraph "CFG forcom.mapbox.mapboxsdk.maps.PolygonContainer.addBy(Ljava\/util\/List;Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0009: IGET  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView) = (r6 I:com.mapbox.mapboxsdk.maps.PolygonContainer) com.mapbox.mapboxsdk.maps.PolygonContainer.nativeMapView com.mapbox.mapboxsdk.maps.NativeMapView \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0053 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0053 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r7 I:java.util.Iterator) = (r7 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r0 I:boolean) = (r7 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r0 I:java.lang.Object) = (r7 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r0 I:com.mapbox.mapboxsdk.annotations.PolygonOptions) = (com.mapbox.mapboxsdk.annotations.PolygonOptions) (r0 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:com.mapbox.mapboxsdk.annotations.Polygon) = (r0 I:com.mapbox.mapboxsdk.annotations.PolygonOptions) com.mapbox.mapboxsdk.annotations.PolygonOptions.getPolygon():com.mapbox.mapboxsdk.annotations.Polygon type: VIRTUAL \l0x0023: INVOKE  (r2 I:java.util.List) = (r0 I:com.mapbox.mapboxsdk.annotations.Polygon) com.mapbox.mapboxsdk.annotations.Polygon.getPoints():java.util.List type: VIRTUAL \l0x0027: INVOKE  (r2 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: INVOKE  (r1 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IGET  (r7 I:com.mapbox.mapboxsdk.maps.NativeMapView) = (r6 I:com.mapbox.mapboxsdk.maps.PolygonContainer) com.mapbox.mapboxsdk.maps.PolygonContainer.nativeMapView com.mapbox.mapboxsdk.maps.NativeMapView \l0x0033: INVOKE  (r7 I:long[]) = \l  (r7 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r1 I:java.util.List)\l com.mapbox.mapboxsdk.maps.NativeMapView.addPolygons(java.util.List):long[] type: VIRTUAL \l0x0037: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: ARRAY_LENGTH  (r2 I:int) = (r7 I:?[]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:13:0x0053 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003f: CHECK_CAST  (r2 I:com.mapbox.mapboxsdk.annotations.Polygon) = (com.mapbox.mapboxsdk.annotations.Polygon) (r2 I:?[OBJECT, ARRAY]) \l0x0041: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.annotations.Polygon)\l  (r8 I:com.mapbox.mapboxsdk.maps.MapboxMap)\l com.mapbox.mapboxsdk.annotations.Polygon.setMapboxMap(com.mapbox.mapboxsdk.maps.MapboxMap):void type: VIRTUAL \l0x0044: AGET  (r3 I:?[long, double]) = (r7 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0046: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.annotations.Polygon)\l  (r3 I:long)\l com.mapbox.mapboxsdk.annotations.Polygon.setId(long):void type: VIRTUAL \l0x0049: IGET  (r3 I:android.support.v4.util.LongSparseArray\<com.mapbox.mapboxsdk.annotations.Annotation\>) = (r6 I:com.mapbox.mapboxsdk.maps.PolygonContainer) com.mapbox.mapboxsdk.maps.PolygonContainer.annotations android.support.v4.util.LongSparseArray \l0x004b: AGET  (r4 I:?[long, double]) = (r7 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x004d: INVOKE  \l  (r3 I:android.support.v4.util.LongSparseArray)\l  (r4 I:long)\l  (r2 I:java.lang.Object)\l android.support.v4.util.LongSparseArray.put(long, java.lang.Object):void type: VIRTUAL \l0x0050: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: RETURN  \l  (r1 I:java.util.List\<com.mapbox.mapboxsdk.annotations.Polygon\>)\l \l}"];
MethodNode[shape=record,label="{public java.util.List\<com.mapbox.mapboxsdk.annotations.Polygon\> com.mapbox.mapboxsdk.maps.PolygonContainer.addBy((r6 'this' I:com.mapbox.mapboxsdk.maps.PolygonContainer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.List\<com.mapbox.mapboxsdk.annotations.PolygonOptions\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.mapbox.mapboxsdk.maps.MapboxMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/mapboxsdk\/annotations\/PolygonOptions;, \>;, Lcom\/mapbox\/mapboxsdk\/maps\/MapboxMap;, ), Ljava\/util\/List\<, Lcom\/mapbox\/mapboxsdk\/annotations\/Polygon;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
}

