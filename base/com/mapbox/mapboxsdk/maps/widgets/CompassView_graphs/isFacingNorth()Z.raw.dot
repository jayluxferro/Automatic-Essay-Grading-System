digraph "CFG forcom.mapbox.mapboxsdk.maps.widgets.CompassView.isFacingNorth()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = (r4 I:com.mapbox.mapboxsdk.maps.widgets.CompassView) com.mapbox.mapboxsdk.maps.widgets.CompassView.rotation float \l0x0002: INVOKE  (r0 I:float) = (r0 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0006: CAST  (r0 I:double) = (double) (r0 I:float) \l0x0007: CONST  (r2 I:?[long, double]) = \l  (4645023210981556224(0x4076700000000000, double:359.0) ?[long, double])\l \l0x000c: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r0 I:float) = (r4 I:com.mapbox.mapboxsdk.maps.widgets.CompassView) com.mapbox.mapboxsdk.maps.widgets.CompassView.rotation float \l0x0012: INVOKE  (r0 I:float) = (r0 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0016: CAST  (r0 I:double) = (double) (r0 I:float) \l0x0017: CONST  (r2 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0019: CMP_G  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.mapboxsdk.maps.widgets.CompassView.isFacingNorth((r4 'this' I:com.mapbox.mapboxsdk.maps.widgets.CompassView A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

