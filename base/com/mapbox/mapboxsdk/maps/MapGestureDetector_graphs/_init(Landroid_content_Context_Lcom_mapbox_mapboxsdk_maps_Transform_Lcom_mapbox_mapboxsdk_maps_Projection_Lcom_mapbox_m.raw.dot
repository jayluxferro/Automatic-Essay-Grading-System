digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.\<init\>(Landroid\/content\/Context;Lcom\/mapbox\/mapboxsdk\/maps\/Transform;Lcom\/mapbox\/mapboxsdk\/maps\/Projection;Lcom\/mapbox\/mapboxsdk\/maps\/UiSettings;Lcom\/mapbox\/mapboxsdk\/maps\/AnnotationManager;Lcom\/mapbox\/mapboxsdk\/maps\/CameraChangeDispatcher;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x0005: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnMapClickListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onMapClickListenerList java.util.concurrent.CopyOnWriteArrayList \l0x000a: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x000c: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x000f: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnMapLongClickListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onMapLongClickListenerList java.util.concurrent.CopyOnWriteArrayList \l0x0011: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x0013: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x0016: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnFlingListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onFlingListenerList java.util.concurrent.CopyOnWriteArrayList \l0x0018: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x001a: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x001d: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnScrollListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onScrollListenerList java.util.concurrent.CopyOnWriteArrayList \l0x001f: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x0021: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x0024: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnMoveListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onMoveListenerList java.util.concurrent.CopyOnWriteArrayList \l0x0026: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x0028: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x002b: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnRotateListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onRotateListenerList java.util.concurrent.CopyOnWriteArrayList \l0x002d: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x002f: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x0032: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnScaleListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onScaleListenerList java.util.concurrent.CopyOnWriteArrayList \l0x0034: NEW_INSTANCE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) =  java.util.concurrent.CopyOnWriteArrayList \l0x0036: INVOKE  (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.\<init\>():void type: DIRECT \l0x0039: IPUT  \l  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnShoveListener\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.onShoveListenerList java.util.concurrent.CopyOnWriteArrayList \l0x003b: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x003d: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0040: IPUT  \l  (r0 I:java.util.List\<android.animation.Animator\>)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.scheduledAnimators java.util.List \l0x0042: NEW_INSTANCE  (r0 I:android.os.Handler) =  android.os.Handler \l0x0044: INVOKE  (r0 I:android.os.Handler) android.os.Handler.\<init\>():void type: DIRECT \l0x0047: IPUT  \l  (r0 I:android.os.Handler)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.animationsTimeoutHandler android.os.Handler \l0x0049: NEW_INSTANCE  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$1) =  com.mapbox.mapboxsdk.maps.MapGestureDetector$1 \l0x004b: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$1)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.1.\<init\>(com.mapbox.mapboxsdk.maps.MapGestureDetector):void type: DIRECT \l0x004e: IPUT  \l  (r0 I:java.lang.Runnable)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.cancelAnimatorsRunnable java.lang.Runnable \l0x0050: IPUT  \l  (r6 I:com.mapbox.mapboxsdk.maps.AnnotationManager)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.annotationManager com.mapbox.mapboxsdk.maps.AnnotationManager \l0x0052: IPUT  \l  (r3 I:com.mapbox.mapboxsdk.maps.Transform)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.transform com.mapbox.mapboxsdk.maps.Transform \l0x0054: IPUT  \l  (r4 I:com.mapbox.mapboxsdk.maps.Projection)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.projection com.mapbox.mapboxsdk.maps.Projection \l0x0056: IPUT  \l  (r5 I:com.mapbox.mapboxsdk.maps.UiSettings)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.uiSettings com.mapbox.mapboxsdk.maps.UiSettings \l0x0058: IPUT  \l  (r7 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher)\l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.cameraChangeDispatcher com.mapbox.mapboxsdk.maps.CameraChangeDispatcher \l}"];
Node_1 [shape=record,label="{1\:\ 0x005a|0x005a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0068 \l}"];
Node_2 [shape=record,label="{2\:\ 0x005c|0x005c: NEW_INSTANCE  (r3 I:com.mapbox.android.gestures.AndroidGesturesManager) =  com.mapbox.android.gestures.AndroidGesturesManager \l0x005e: INVOKE  \l  (r3 I:com.mapbox.android.gestures.AndroidGesturesManager)\l  (r2 I:android.content.Context)\l com.mapbox.android.gestures.AndroidGesturesManager.\<init\>(android.content.Context):void type: DIRECT \l0x0061: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0062: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r3 I:com.mapbox.android.gestures.AndroidGesturesManager)\l  (r4 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.initializeGesturesManager(com.mapbox.android.gestures.AndroidGesturesManager, boolean):void type: DIRECT \l0x0065: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r2 I:android.content.Context)\l  (r4 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.initializeGestureListeners(android.content.Context, boolean):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0068|0x0068: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.maps.MapGestureDetector.\<init\>((r1 'this' I:com.mapbox.mapboxsdk.maps.MapGestureDetector A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.mapbox.mapboxsdk.maps.Transform A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.mapbox.mapboxsdk.maps.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.mapbox.mapboxsdk.maps.UiSettings A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.mapbox.mapboxsdk.maps.AnnotationManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

