digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.initializeGestureListeners(Landroid\/content\/Context;Z)V" {
subgraph cluster_Region_1200204525 {
label = "R(1:(1:(1:1)))";
node [shape=record,color=blue];
subgraph cluster_Region_1868852413 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_770119317 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 == true) goto L_0x0002\l}"];
subgraph cluster_Region_935594914 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|com.mapbox.mapboxsdk.maps.MapGestureDetector$StandardGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener r9 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.StandardGestureListener()\lcom.mapbox.mapboxsdk.maps.MapGestureDetector$MoveGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener r1 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.MoveGestureListener()\lcom.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener r2 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener(r8.getResources().getDimension(com.mapbox.mapboxsdk.C1080R.dimen.mapbox_minimum_scale_velocity))\lcom.mapbox.mapboxsdk.maps.MapGestureDetector$RotateGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.RotateGestureListener r3 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.RotateGestureListener(r8.getResources().getDimension(com.mapbox.mapboxsdk.C1080R.dimen.mapbox_minimum_scale_span_when_rotating), r8.getResources().getDimension(com.mapbox.mapboxsdk.C1080R.dimen.mapbox_minimum_angular_velocity), r8.getResources().getDimension(com.mapbox.mapboxsdk.C1080R.dimen.mapbox_defaultScaleSpanSinceStartThreshold))\lcom.mapbox.mapboxsdk.maps.MapGestureDetector$ShoveGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.ShoveGestureListener r8 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.ShoveGestureListener()\lcom.mapbox.mapboxsdk.maps.MapGestureDetector$TapGestureListener com.mapbox.mapboxsdk.maps.MapGestureDetector.TapGestureListener r4 = new com.mapbox.mapboxsdk.maps.MapGestureDetector.TapGestureListener()\lr7.gesturesManager.setStandardGestureListener(r9)\lr7.gesturesManager.setMoveGestureListener(r1)\lr7.gesturesManager.setStandardScaleGestureListener(r2)\lr7.gesturesManager.setRotateGestureListener(r3)\lr7.gesturesManager.setShoveGestureListener(r8)\lr7.gesturesManager.setMultiFingerTapGestureListener(r4)\l}"];
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.maps.MapGestureDetector.initializeGestureListeners((r7v0 'this' com.mapbox.mapboxsdk.maps.MapGestureDetector A[IMMUTABLE_TYPE, THIS]), (r8v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3[style=dashed];
Node_1 -> Node_2;
}

