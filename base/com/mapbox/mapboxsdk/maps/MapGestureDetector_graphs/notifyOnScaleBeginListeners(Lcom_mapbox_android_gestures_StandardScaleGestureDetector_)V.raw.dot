digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.notifyOnScaleBeginListeners(Lcom\/mapbox\/android\/gestures\/StandardScaleGestureDetector;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.CopyOnWriteArrayList\<com.mapbox.mapboxsdk.maps.MapboxMap$OnScaleListener\>) = (r2 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.onScaleListenerList java.util.concurrent.CopyOnWriteArrayList \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.concurrent.CopyOnWriteArrayList) java.util.concurrent.CopyOnWriteArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:com.mapbox.mapboxsdk.maps.MapboxMap$OnScaleListener) = (com.mapbox.mapboxsdk.maps.MapboxMap$OnScaleListener) (r1 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r1 I:com.mapbox.mapboxsdk.maps.MapboxMap$OnScaleListener)\l  (r3 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.mapboxsdk.maps.MapboxMap.OnScaleListener.onScaleBegin(com.mapbox.android.gestures.StandardScaleGestureDetector):void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.mapboxsdk.maps.MapGestureDetector.notifyOnScaleBeginListeners((r2 'this' I:com.mapbox.mapboxsdk.maps.MapGestureDetector A[IMMUTABLE_TYPE, THIS]), (r3 I:com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

