digraph "CFG forcom.mapbox.mapboxsdk.maps.NativeMapView.addMarker(Lcom\/mapbox\/mapboxsdk\/annotations\/Marker;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"addMarker\" \l0x0002: INVOKE  (r0 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r0 I:java.lang.String)\l com.mapbox.mapboxsdk.maps.NativeMapView.checkState(java.lang.String):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: NEW_ARRAY  (r0 I:com.mapbox.mapboxsdk.annotations.Marker[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.mapbox.mapboxsdk.annotations.Marker[] \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0011: INVOKE  (r3 I:long[]) = \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r0 I:com.mapbox.mapboxsdk.annotations.Marker[])\l com.mapbox.mapboxsdk.maps.NativeMapView.nativeAddMarkers(com.mapbox.mapboxsdk.annotations.Marker[]):long[] type: DIRECT \l0x0015: AGET  (r0 I:?[long, double]) = (r3 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long com.mapbox.mapboxsdk.maps.NativeMapView.addMarker((r2 'this' I:com.mapbox.mapboxsdk.maps.NativeMapView A[IMMUTABLE_TYPE, THIS]), (r3 I:com.mapbox.mapboxsdk.annotations.Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

