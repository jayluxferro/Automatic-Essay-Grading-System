digraph "CFG forcom.mapbox.mapboxsdk.maps.NativeMapView.removeSource(Lcom\/mapbox\/mapboxsdk\/style\/sources\/Source;)Lcom\/mapbox\/mapboxsdk\/style\/sources\/Source;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"removeSource\" \l0x0002: INVOKE  (r0 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r0 I:java.lang.String)\l com.mapbox.mapboxsdk.maps.NativeMapView.checkState(java.lang.String):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r3 I:com.mapbox.mapboxsdk.style.sources.Source) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:long) = (r3 I:com.mapbox.mapboxsdk.style.sources.Source) com.mapbox.mapboxsdk.style.sources.Source.getNativePtr():long type: VIRTUAL \l0x000e: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r3 I:com.mapbox.mapboxsdk.style.sources.Source)\l  (r0 I:long)\l com.mapbox.mapboxsdk.maps.NativeMapView.nativeRemoveSource(com.mapbox.mapboxsdk.style.sources.Source, long):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN  (r3 I:com.mapbox.mapboxsdk.style.sources.Source) \l}"];
MethodNode[shape=record,label="{public com.mapbox.mapboxsdk.style.sources.Source com.mapbox.mapboxsdk.maps.NativeMapView.removeSource((r2 'this' I:com.mapbox.mapboxsdk.maps.NativeMapView A[IMMUTABLE_TYPE, THIS]), (r3 I:com.mapbox.mapboxsdk.style.sources.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

