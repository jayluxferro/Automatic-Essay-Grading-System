digraph "CFG forcom.mapbox.mapboxsdk.maps.NativeMapView.addImage(Ljava\/lang\/String;Landroid\/graphics\/Bitmap;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"addImage\" \l0x0002: INVOKE  (r0 I:boolean) = \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r0 I:java.lang.String)\l com.mapbox.mapboxsdk.maps.NativeMapView.checkState(java.lang.String):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r0 I:int) = (r4 I:android.graphics.Bitmap) android.graphics.Bitmap.getDensity():int type: VIRTUAL \l0x000d: CAST  (r0 I:float) = (float) (r0 I:int) \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1126170624(0x43200000, float:160.0) ?[int, float, short, byte, char])\l \l0x0010: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x0011: INVOKE  \l  (r2 I:com.mapbox.mapboxsdk.maps.NativeMapView)\l  (r3 I:java.lang.String)\l  (r4 I:android.graphics.Bitmap)\l  (r0 I:float)\l  (r5 I:boolean)\l com.mapbox.mapboxsdk.maps.NativeMapView.nativeAddImage(java.lang.String, android.graphics.Bitmap, float, boolean):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.maps.NativeMapView.addImage((r2 'this' I:com.mapbox.mapboxsdk.maps.NativeMapView A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

