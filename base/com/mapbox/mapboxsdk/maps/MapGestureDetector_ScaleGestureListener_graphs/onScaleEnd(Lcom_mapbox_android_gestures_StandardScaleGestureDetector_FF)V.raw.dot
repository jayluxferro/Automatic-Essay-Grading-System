digraph "CFG forcom.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.onScaleEnd(Lcom\/mapbox\/android\/gestures\/StandardScaleGestureDetector;FF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0002: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$900(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.CameraChangeDispatcher type: STATIC \l0x0006: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.CameraChangeDispatcher) com.mapbox.mapboxsdk.maps.CameraChangeDispatcher.onCameraIdle():void type: VIRTUAL \l0x0009: IGET  (r0 I:boolean) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.quickZoom boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x000f: INVOKE  (r0 I:com.mapbox.android.gestures.AndroidGesturesManager) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1100(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.android.gestures.AndroidGesturesManager type: STATIC \l0x0013: INVOKE  (r0 I:com.mapbox.android.gestures.MoveGestureDetector) = (r0 I:com.mapbox.android.gestures.AndroidGesturesManager) com.mapbox.android.gestures.AndroidGesturesManager.getMoveGestureDetector():com.mapbox.android.gestures.MoveGestureDetector type: VIRTUAL \l0x0017: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0018: INVOKE  \l  (r0 I:com.mapbox.android.gestures.MoveGestureDetector)\l  (r1 I:boolean)\l com.mapbox.android.gestures.MoveGestureDetector.setEnabled(boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x001d: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$600(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.UiSettings type: STATIC \l0x0021: INVOKE  (r0 I:boolean) = (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.isIncreaseRotateThresholdWhenScaling():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0029: INVOKE  (r0 I:com.mapbox.android.gestures.AndroidGesturesManager) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1100(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.android.gestures.AndroidGesturesManager type: STATIC \l0x002d: INVOKE  (r0 I:com.mapbox.android.gestures.RotateGestureDetector) = (r0 I:com.mapbox.android.gestures.AndroidGesturesManager) com.mapbox.android.gestures.AndroidGesturesManager.getRotateGestureDetector():com.mapbox.android.gestures.RotateGestureDetector type: VIRTUAL \l0x0031: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1098173645(0x4174cccd, float:15.3) ?[int, float, short, byte, char])\l \l0x0034: INVOKE  \l  (r0 I:com.mapbox.android.gestures.RotateGestureDetector)\l  (r1 I:float)\l com.mapbox.android.gestures.RotateGestureDetector.setAngleThreshold(float):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0039: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r9 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.notifyOnScaleEndListeners(com.mapbox.android.gestures.StandardScaleGestureDetector):void type: VIRTUAL \l0x003c: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x003e: INVOKE  (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) = (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$600(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.UiSettings type: STATIC \l0x0042: INVOKE  (r0 I:boolean) = (r0 I:com.mapbox.mapboxsdk.maps.UiSettings) com.mapbox.mapboxsdk.maps.UiSettings.isScaleVelocityAnimationEnabled():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0049 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0048|0x0048: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: INVOKE  (r10 I:float) = (r10 I:float) java.lang.Math.abs(float):float type: STATIC \l0x004d: INVOKE  (r11 I:float) = (r11 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0051: ARITH  (r10 I:float) = (r10 I:float) + (r11 I:float) \l0x0052: IGET  (r11 I:float) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.minimumVelocity float \l0x0054: CMP_L  (r11 I:int) = (r10 I:float), (r11 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0092 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: CAST  (r10 I:double) = (double) (r10 I:float) \l0x0059: INVOKE  (r9 I:boolean) = \l  (r9 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.isScalingOut():boolean type: VIRTUAL \l0x005d: INVOKE  (r3 I:double) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l  (r10 I:double)\l  (r9 I:boolean)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.calculateScale(double, boolean):double type: DIRECT \l0x0061: IGET  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0063: INVOKE  (r9 I:com.mapbox.mapboxsdk.maps.Transform) = (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$400(com.mapbox.mapboxsdk.maps.MapGestureDetector):com.mapbox.mapboxsdk.maps.Transform type: STATIC \l0x0067: INVOKE  (r1 I:double) = (r9 I:com.mapbox.mapboxsdk.maps.Transform) com.mapbox.mapboxsdk.maps.Transform.getRawZoom():double type: VIRTUAL \l0x006b: INVOKE  (r9 I:double) = (r3 I:double) java.lang.Math.abs(double):double type: STATIC \l0x006f: CONST  (r5 I:?[long, double]) = \l  (4652007308841189376(0x408f400000000000, double:1000.0) ?[long, double])\l \l0x0074: ARITH  (r9 I:double) = (r9 I:double) * (r5 I:double) \l0x0076: CONST  (r5 I:?[long, double]) = \l  (4616189618054758400(0x4010000000000000, double:4.0) ?[long, double])\l \l0x0078: ARITH  (r9 I:double) = (r9 I:double) \/ (r5 I:double) \l0x0079: CAST  (r6 I:long) = (long) (r9 I:double) \l0x007a: IGET  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x007c: IGET  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x007e: IGET  (r5 I:android.graphics.PointF) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.scaleFocalPoint android.graphics.PointF \l0x0080: INVOKE  (r10 I:android.animation.Animator) = \l  (r0 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:android.graphics.PointF)\l  (r6 I:long)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1300(com.mapbox.mapboxsdk.maps.MapGestureDetector, double, double, android.graphics.PointF, long):android.animation.Animator type: STATIC \l0x0084: INVOKE  \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r10 I:android.animation.Animator)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1202(com.mapbox.mapboxsdk.maps.MapGestureDetector, android.animation.Animator):android.animation.Animator type: STATIC \l0x0087: IGET  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x0089: IGET  (r10 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) = \l  (r8 I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.this$0 com.mapbox.mapboxsdk.maps.MapGestureDetector \l0x008b: INVOKE  (r10 I:android.animation.Animator) = (r10 I:com.mapbox.mapboxsdk.maps.MapGestureDetector) com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1200(com.mapbox.mapboxsdk.maps.MapGestureDetector):android.animation.Animator type: STATIC \l0x008f: INVOKE  \l  (r9 I:com.mapbox.mapboxsdk.maps.MapGestureDetector)\l  (r10 I:android.animation.Animator)\l com.mapbox.mapboxsdk.maps.MapGestureDetector.access$1400(com.mapbox.mapboxsdk.maps.MapGestureDetector, android.animation.Animator):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0092|0x0092: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.mapboxsdk.maps.MapGestureDetector.ScaleGestureListener.onScaleEnd((r8 'this' I:com.mapbox.mapboxsdk.maps.MapGestureDetector$ScaleGestureListener A[IMMUTABLE_TYPE, THIS]), (r9 I:com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

