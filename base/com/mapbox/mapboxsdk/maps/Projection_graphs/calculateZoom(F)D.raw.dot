digraph "CFG forcom.mapbox.mapboxsdk.maps.Projection.calculateZoom(F)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.mapbox.mapboxsdk.maps.NativeMapView) = (r6 I:com.mapbox.mapboxsdk.maps.Projection) com.mapbox.mapboxsdk.maps.Projection.nativeMapView com.mapbox.mapboxsdk.maps.NativeMapView \l0x0002: INVOKE  (r0 I:double) = (r0 I:com.mapbox.mapboxsdk.maps.NativeMapView) com.mapbox.mapboxsdk.maps.NativeMapView.getZoom():double type: VIRTUAL \l0x0006: CAST  (r2 I:double) = (double) (r7 I:float) \l0x0007: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.log(double):double type: STATIC \l0x000b: CONST  (r4 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x000d: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.log(double):double type: STATIC \l0x0011: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x0012: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public double com.mapbox.mapboxsdk.maps.Projection.calculateZoom((r6 'this' I:com.mapbox.mapboxsdk.maps.Projection A[IMMUTABLE_TYPE, THIS]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

