digraph "CFG forcom.mapbox.mapboxsdk.snapshotter.MapSnapshotter.drawLogo(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Canvas;ILcom\/mapbox\/mapboxsdk\/attribution\/AttributionLayout;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:android.graphics.Bitmap) = (r6 I:com.mapbox.mapboxsdk.attribution.AttributionLayout) com.mapbox.mapboxsdk.attribution.AttributionLayout.getLogo():android.graphics.Bitmap type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CAST  (r0 I:float) = (float) (r5 I:int) \l0x0007: INVOKE  (r3 I:int) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x000b: INVOKE  (r1 I:int) = (r6 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x000f: ARITH  (r3 I:int) = (r3 I:int) \- (r1 I:int) \l0x0010: ARITH  (r3 I:int) = (r3 I:int) \- (r5 I:int) \l0x0011: CAST  (r3 I:float) = (float) (r3 I:int) \l0x0012: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  \l  (r4 I:android.graphics.Canvas)\l  (r6 I:android.graphics.Bitmap)\l  (r0 I:float)\l  (r3 I:float)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.mapboxsdk.snapshotter.MapSnapshotter.drawLogo((r2 'this' I:com.mapbox.mapboxsdk.snapshotter.MapSnapshotter A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.mapbox.mapboxsdk.attribution.AttributionLayout A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

