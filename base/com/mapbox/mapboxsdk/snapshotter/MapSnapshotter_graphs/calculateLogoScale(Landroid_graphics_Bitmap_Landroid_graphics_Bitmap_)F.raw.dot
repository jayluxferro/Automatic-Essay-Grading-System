digraph "CFG forcom.mapbox.mapboxsdk.snapshotter.MapSnapshotter.calculateLogoScale(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Bitmap;)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.content.Context) = (r3 I:com.mapbox.mapboxsdk.snapshotter.MapSnapshotter) com.mapbox.mapboxsdk.snapshotter.MapSnapshotter.context android.content.Context \l0x0002: INVOKE  (r0 I:android.content.res.Resources) = (r0 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL \l0x0006: INVOKE  (r0 I:android.util.DisplayMetrics) = (r0 I:android.content.res.Resources) android.content.res.Resources.getDisplayMetrics():android.util.DisplayMetrics type: VIRTUAL \l0x000a: IGET  (r1 I:int) = (r0 I:android.util.DisplayMetrics) android.util.DisplayMetrics.widthPixels int \l0x000c: INVOKE  (r2 I:int) = (r4 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x0010: ARITH  (r1 I:int) = (r1 I:int) \/ (r2 I:int) \l0x0011: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0012: IGET  (r0 I:int) = (r0 I:android.util.DisplayMetrics) android.util.DisplayMetrics.heightPixels int \l0x0014: INVOKE  (r4 I:int) = (r4 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x0018: ARITH  (r0 I:int) = (r0 I:int) \/ (r4 I:int) \l0x0019: CAST  (r4 I:float) = (float) (r0 I:int) \l0x001a: INVOKE  (r0 I:int) = (r5 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x001e: CAST  (r0 I:float) = (float) (r0 I:int) \l0x001f: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x0020: INVOKE  (r1 I:int) = (r5 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x0024: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0025: ARITH  (r1 I:float) = (r1 I:float) \/ (r4 I:float) \l0x0026: INVOKE  (r4 I:int) = (r5 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x002a: CAST  (r4 I:float) = (float) (r4 I:int) \l0x002b: ARITH  (r0 I:float) = (r0 I:float) \/ (r4 I:float) \l0x002c: INVOKE  (r4 I:int) = (r5 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x0030: CAST  (r4 I:float) = (float) (r4 I:int) \l0x0031: ARITH  (r1 I:float) = (r1 I:float) \/ (r4 I:float) \l0x0032: INVOKE  (r4 I:float) = (r0 I:float), (r1 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x0036: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x0038: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x003a: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1058642330(0x3f19999a, float:0.6) ?[int, float, short, byte, char])\l \l0x003d: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x003f: CMP_L  (r1 I:int) = (r4 I:float), (r0 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0041|0x0041: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0043|0x0043: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0046|0x0046: CMP_G  (r0 I:int) = (r4 I:float), (r5 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0048|0x0048: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x004d \l}"];
Node_5 [shape=record,label="{5\:\ 0x004a|0x004a: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1058642330(0x3f19999a, float:0.6) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x004d|0x004d: RETURN  (r4 I:float) \l}"];
MethodNode[shape=record,label="{private float com.mapbox.mapboxsdk.snapshotter.MapSnapshotter.calculateLogoScale((r3 'this' I:com.mapbox.mapboxsdk.snapshotter.MapSnapshotter A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

