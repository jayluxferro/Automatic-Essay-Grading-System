digraph "CFG forcom.mapbox.mapboxsdk.snapshotter.MapSnaphotUtil.calculateInSampleSize(Landroid\/graphics\/BitmapFactory$Options;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.outHeight int \l0x0002: IGET  (r3 I:int) = (r3 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.outWidth int \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r3 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x000b: ARITH  (r3 I:int) = (r3 I:int) \/ (2 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: ARITH  (r2 I:int) = (r0 I:int) \/ (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: ARITH  (r2 I:int) = (r3 I:int) \/ (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{static int com.mapbox.mapboxsdk.snapshotter.MapSnaphotUtil.calculateInSampleSize((r3 I:android.graphics.BitmapFactory$Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_4;
}

