digraph "CFG forcom.mapbox.mapboxsdk.utils.ColorUtils.getAccentColor(Landroid\/content\/Context;)I" {
subgraph cluster_Region_207648850 {
label = "R(1:(2:1|2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_312486077 {
label = "Try: R(2:1|2) catches: R(1:5)";
node [shape=record,color=blue];
subgraph cluster_Region_1957304517 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x0020 \}\lSplitter:B:0:0x0000\l|android.util.TypedValue android.util.TypedValue r0 = new android.util.TypedValue()     \/\/ Catch:\{ Exception \-\> 0x0020 \}\lr6.getTheme().resolveAttribute(r6.getResources().getIdentifier(\"colorAccent\", \"attrs\", r6.getPackageName()), r0, true)     \/\/ Catch:\{ Exception \-\> 0x0020 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|RETURN\l|return r0.data\l}"];
}
subgraph cluster_Region_237610106 {
label = "R(1:5) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0026|RETURN\l|return getColorCompat(r6, com.mapbox.mapboxsdk.C1080R.color.mapbox_gray)\l}"];
}
}
}
subgraph cluster_Region_237610106 {
label = "R(1:5) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0026|RETURN\l|return getColorCompat(r6, com.mapbox.mapboxsdk.C1080R.color.mapbox_gray)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0020}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lExcHandler: Exception (unused java.lang.Exception)\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public static int com.mapbox.mapboxsdk.utils.ColorUtils.getAccentColor((r6v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[BUILD, android.support.annotation.ColorInt, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_3;
}

