digraph "CFG forcom.mapbox.mapboxsdk.utils.ColorUtils.rgbaToColor(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.regex.Matcher r5 = java.util.regex.Pattern.compile(\"rgba?s*(s*(d+.?d*)s*,s*(d+.?d*)s*,s*(d+.?d*)s*,?s*(d+.?d*)?s*)\").matcher(r5)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (r5.matches() == false) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r5.groupCount() != 3) goto L_0x0036\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019}"];
Node_5 [shape=record,label="{5\:\ 0x0035|RETURN\l|return android.graphics.Color.rgb(normalizeColorComponent(r5.group(1)), normalizeColorComponent(r5.group(2)), normalizeColorComponent(r5.group(3)))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0036}"];
Node_7 [shape=record,label="{7\:\ 0x003a|if (r5.matches() == false) goto L_0x0068\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c}"];
Node_9 [shape=record,label="{9\:\ 0x0041|if (r5.groupCount() != 4) goto L_0x0068\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043}"];
Node_11 [shape=record,label="{11\:\ 0x0067|RETURN\l|return android.graphics.Color.argb(normalizeColorComponent(r5.group(4)), normalizeColorComponent(r5.group(1)), normalizeColorComponent(r5.group(2)), normalizeColorComponent(r5.group(3)))\l}"];
Node_12 [shape=record,label="{12\:\ 0x0068}"];
Node_13 [shape=record,label="{13\:\ 0x006f|throw new com.mapbox.mapboxsdk.exceptions.ConversionException(\"Not a valid rgb\/rgba value\")\l}"];
MethodNode[shape=record,label="{public static int com.mapbox.mapboxsdk.utils.ColorUtils.rgbaToColor((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.ColorInt, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

