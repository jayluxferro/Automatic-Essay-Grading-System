digraph "CFG forcom.mapbox.mapboxsdk.utils.ColorUtils.rgbaToColor(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"rgba?s*(s*(d+.?d*)s*,s*(d+.?d*)s*,s*(d+.?d*)s*,?s*(d+.?d*)?s*)\" \l0x0002: INVOKE  (r0 I:java.util.regex.Pattern) = (r0 I:java.lang.String) java.util.regex.Pattern.compile(java.lang.String):java.util.regex.Pattern type: STATIC \l0x0006: INVOKE  (r5 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r5 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x000a: INVOKE  (r0 I:boolean) = (r5 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  (r0 I:int) = (r5 I:java.util.regex.Matcher) java.util.regex.Matcher.groupCount():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0036 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: INVOKE  (r0 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r2 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x001d: INVOKE  (r0 I:int) = (r0 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x0021: INVOKE  (r1 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0025: INVOKE  (r1 I:int) = (r1 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x0029: INVOKE  (r5 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r3 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x002d: INVOKE  (r5 I:int) = (r5 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x0031: INVOKE  (r5 I:int) = (r0 I:int), (r1 I:int), (r5 I:int) android.graphics.Color.rgb(int, int, int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: RETURN  (r5 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: INVOKE  (r0 I:boolean) = (r5 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0068 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: INVOKE  (r0 I:int) = (r5 I:java.util.regex.Matcher) java.util.regex.Matcher.groupCount():int type: VIRTUAL \l0x0040: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0068 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: INVOKE  (r0 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r4 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0047: INVOKE  (r0 I:int) = (r0 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x004b: INVOKE  (r2 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r2 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x004f: INVOKE  (r2 I:int) = (r2 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x0053: INVOKE  (r1 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r1 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0057: INVOKE  (r1 I:int) = (r1 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x005b: INVOKE  (r5 I:java.lang.String) = (r5 I:java.util.regex.Matcher), (r3 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x005f: INVOKE  (r5 I:int) = (r5 I:java.lang.String) com.mapbox.mapboxsdk.utils.ColorUtils.normalizeColorComponent(java.lang.String):int type: STATIC \l0x0063: INVOKE  (r5 I:int) = (r0 I:int), (r2 I:int), (r1 I:int), (r5 I:int) android.graphics.Color.argb(int, int, int, int):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|0x0067: RETURN  (r5 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0068|0x0068: NEW_INSTANCE  (r5 I:com.mapbox.mapboxsdk.exceptions.ConversionException) =  com.mapbox.mapboxsdk.exceptions.ConversionException \l0x006a: CONST_STR  (r0 I:java.lang.String) =  \"Not a valid rgb\/rgba value\" \l0x006c: INVOKE  \l  (r5 I:com.mapbox.mapboxsdk.exceptions.ConversionException)\l  (r0 I:java.lang.String)\l com.mapbox.mapboxsdk.exceptions.ConversionException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x006f|0x006f: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int com.mapbox.mapboxsdk.utils.ColorUtils.rgbaToColor((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.ColorInt, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

