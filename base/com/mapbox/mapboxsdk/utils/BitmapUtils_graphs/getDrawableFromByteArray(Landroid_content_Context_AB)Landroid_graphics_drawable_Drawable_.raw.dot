digraph "CFG forcom.mapbox.mapboxsdk.utils.BitmapUtils.getDrawableFromByteArray(Landroid\/content\/Context;[B)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: ARRAY_LENGTH  (r1 I:int) = (r3 I:?[]) \l0x0006: INVOKE  (r3 I:android.graphics.Bitmap) = (r3 I:byte[]), (r0 I:int), (r1 I:int) android.graphics.BitmapFactory.decodeByteArray(byte[], int, int):android.graphics.Bitmap type: STATIC \l0x000a: NEW_INSTANCE  (r0 I:android.graphics.drawable.BitmapDrawable) =  android.graphics.drawable.BitmapDrawable \l0x000c: INVOKE  (r2 I:android.content.res.Resources) = (r2 I:android.content.Context) android.content.Context.getResources():android.content.res.Resources type: VIRTUAL \l0x0010: INVOKE  \l  (r0 I:android.graphics.drawable.BitmapDrawable)\l  (r2 I:android.content.res.Resources)\l  (r3 I:android.graphics.Bitmap)\l android.graphics.drawable.BitmapDrawable.\<init\>(android.content.res.Resources, android.graphics.Bitmap):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.drawable.Drawable com.mapbox.mapboxsdk.utils.BitmapUtils.getDrawableFromByteArray((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

