digraph "CFG forcom.mapbox.mapboxsdk.utils.ThreadUtils.checkThread(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.os.Looper) =  android.os.Looper.myLooper():android.os.Looper type: STATIC \l0x0004: INVOKE  (r1 I:android.os.Looper) =  android.os.Looper.getMainLooper():android.os.Looper type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:com.mapbox.mapboxsdk.exceptions.CalledFromWorkerThreadException) =  com.mapbox.mapboxsdk.exceptions.CalledFromWorkerThreadException \l0x000d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"%s interactions should happen on the UI thread.\" \l0x0015: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r1 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0019: INVOKE  \l  (r0 I:com.mapbox.mapboxsdk.exceptions.CalledFromWorkerThreadException)\l  (r3 I:java.lang.String)\l com.mapbox.mapboxsdk.exceptions.CalledFromWorkerThreadException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void com.mapbox.mapboxsdk.utils.ThreadUtils.checkThread((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

