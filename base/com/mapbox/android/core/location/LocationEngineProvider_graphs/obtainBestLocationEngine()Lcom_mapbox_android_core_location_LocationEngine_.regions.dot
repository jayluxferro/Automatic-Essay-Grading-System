digraph "CFG forcom.mapbox.android.core.location.LocationEngineProvider.obtainBestLocationEngine()Lcom\/mapbox\/android\/core\/location\/LocationEngine;" {
subgraph cluster_Region_234168168 {
label = "R(3:0|(2:3|(1:5))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.android.core.location.LocationEngine com.mapbox.android.core.location.LocationEngine r0 = r4.locationEngineDictionary.get(com.mapbox.android.core.location.LocationEngine.Type.ANDROID)\ljava.util.Iterator r1 = OPTIONAL_LOCATION_ENGINES.iterator()\l}"];
subgraph cluster_LoopRegion_1520693289 {
label = "LOOP:0: (2:3|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0014|if (r1.hasNext() != false) goto L_0x0016\l}"];
subgraph cluster_Region_253905489 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0016|com.mapbox.android.core.location.LocationEngine com.mapbox.android.core.location.LocationEngine r2 = r4.locationEngineDictionary.get(r2)\l}"];
subgraph cluster_IfRegion_317358625 {
label = "IF [B:4:0x0024] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0024|LOOP_END\lLOOP:0: B:1:0x0010\-\>B:4:0x0024\l|if (r2 != null) goto L_0x0026\l}"];
subgraph cluster_Region_1646939481 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0026|RETURN\l|return r2\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0027|RETURN\l|return r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0010|LOOP_START\lLOOP:0: B:1:0x0010\-\>B:4:0x0024\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0026|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private com.mapbox.android.core.location.LocationEngine com.mapbox.android.core.location.LocationEngineProvider.obtainBestLocationEngine((r4v0 'this' com.mapbox.android.core.location.LocationEngineProvider A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_1[style=dashed];
Node_4 -> Node_7;
Node_1 -> Node_2;
Node_7 -> Node_5;
Node_8 -> Node_6;
}

