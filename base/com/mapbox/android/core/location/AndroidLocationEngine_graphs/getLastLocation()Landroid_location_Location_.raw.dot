digraph "CFG forcom.mapbox.android.core.location.AndroidLocationEngine.getLastLocation()Landroid\/location\/Location;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = \l  (r2 I:com.mapbox.android.core.location.AndroidLocationEngine)\l com.mapbox.android.core.location.AndroidLocationEngine.currentProvider java.lang.String \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:android.location.LocationManager) = \l  (r2 I:com.mapbox.android.core.location.AndroidLocationEngine)\l com.mapbox.android.core.location.AndroidLocationEngine.locationManager android.location.LocationManager \l0x000a: IGET  (r1 I:java.lang.String) = \l  (r2 I:com.mapbox.android.core.location.AndroidLocationEngine)\l com.mapbox.android.core.location.AndroidLocationEngine.currentProvider java.lang.String \l0x000c: INVOKE  (r0 I:android.location.Location) = \l  (r0 I:android.location.LocationManager)\l  (r1 I:java.lang.String)\l android.location.LocationManager.getLastKnownLocation(java.lang.String):android.location.Location type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r0 I:android.location.Location) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:android.location.Location) \l}"];
MethodNode[shape=record,label="{public android.location.Location com.mapbox.android.core.location.AndroidLocationEngine.getLastLocation((r2 'this' I:com.mapbox.android.core.location.AndroidLocationEngine A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

