digraph "CFG forcom.mapbox.android.core.location.LocationEngine.isBetterLocation(Landroid\/location\/Location;Landroid\/location\/Location;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:long) = (r8 I:android.location.Location) android.location.Location.getTime():long type: VIRTUAL \l0x0008: INVOKE  (r3 I:long) = (r9 I:android.location.Location) android.location.Location.getTime():long type: VIRTUAL \l0x000c: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x000d: CONST  (r3 I:?[long, double]) = (120000(0x1d4c0, double:5.9288E\-319) ?[long, double]) \l0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CMP_L  (r3 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: CONST  (r6 I:?[long, double]) = (\-120000(0xfffffffffffe2b40, double:NaN) ?[long, double]) \l0x001b: CMP_L  (r4 I:int) = (r1 I:long), (r6 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0024: CMP_L  (r1 I:int) = (r1 I:long), (r6 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x002a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002e \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0031 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|0x0030: RETURN  (r5 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|0x0031: INVOKE  (r2 I:float) = (r8 I:android.location.Location) android.location.Location.getAccuracy():float type: VIRTUAL \l0x0035: INVOKE  (r3 I:float) = (r9 I:android.location.Location) android.location.Location.getAccuracy():float type: VIRTUAL \l0x0039: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x003a: CAST  (r2 I:int) = (int) (r2 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003b|0x003b: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x003f \l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|0x003d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|0x003f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0040|0x0040: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:25:0x0044 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|0x0042: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0044|0x0044: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0045|0x0045: CONST  (r6 I:?[int, float, short, byte, char]) = (200(0xc8, float:2.8E\-43) ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0047|0x0047: IF  (r2 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:29:0x004b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0049|0x0049: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004b|0x004b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x004c|0x004c: INVOKE  (r8 I:java.lang.String) = (r8 I:android.location.Location) android.location.Location.getProvider():java.lang.String type: VIRTUAL \l0x0050: INVOKE  (r9 I:java.lang.String) = (r9 I:android.location.Location) android.location.Location.getProvider():java.lang.String type: VIRTUAL \l0x0054: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r9 I:java.lang.String) com.mapbox.android.core.location.LocationEngine.isSameProvider(java.lang.String, java.lang.String):boolean type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x0058|0x0058: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x005b \l}"];
Node_32 [shape=record,label="{32\:\ 0x005a|0x005a: RETURN  (r0 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0060 \l}"];
Node_34 [shape=record,label="{34\:\ 0x005d|0x005d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0060 \l}"];
Node_35 [shape=record,label="{35\:\ 0x005f|0x005f: RETURN  (r0 I:boolean) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0060|0x0060: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0067 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0062|0x0062: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0067 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0064|0x0064: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0067 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0066|0x0066: RETURN  (r0 I:boolean) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0067|0x0067: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{protected static boolean com.mapbox.android.core.location.LocationEngine.isBetterLocation((r8 I:android.location.Location A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.location.Location A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
}

