digraph "CFG forcom.mapbox.android.telemetry.TelemetryClientSettings.configureUrlHostname(Ljava\/lang\/String;)Lokhttp3\/HttpUrl;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.HttpUrl$Builder) =  okhttp3.HttpUrl$Builder \l0x0002: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"https\" \l0x0007: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) = (r0 I:okhttp3.HttpUrl$Builder), (r1 I:java.lang.String) okhttp3.HttpUrl.Builder.scheme(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x000b: INVOKE  (r0 I:okhttp3.HttpUrl$Builder), (r2 I:java.lang.String) okhttp3.HttpUrl.Builder.host(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x000e: INVOKE  (r2 I:okhttp3.HttpUrl) = (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.build():okhttp3.HttpUrl type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN  (r2 I:okhttp3.HttpUrl) \l}"];
MethodNode[shape=record,label="{static okhttp3.HttpUrl com.mapbox.android.telemetry.TelemetryClientSettings.configureUrlHostname((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

