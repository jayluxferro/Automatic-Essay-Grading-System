digraph "CFG forcom.mapbox.android.telemetry.TelemetryClientSettings.configureHttpClient(Lcom\/mapbox\/android\/telemetry\/CertificateBlacklist;Lokhttp3\/Interceptor;)Lokhttp3\/OkHttpClient;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.mapbox.android.telemetry.CertificatePinnerFactory) =  com.mapbox.android.telemetry.CertificatePinnerFactory \l0x0002: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.CertificatePinnerFactory)\l com.mapbox.android.telemetry.CertificatePinnerFactory.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:okhttp3.OkHttpClient) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.client okhttp3.OkHttpClient \l0x0007: INVOKE  (r1 I:okhttp3.OkHttpClient$Builder) = (r1 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.newBuilder():okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x000b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: INVOKE  (r1 I:okhttp3.OkHttpClient$Builder) = (r1 I:okhttp3.OkHttpClient$Builder), (r2 I:boolean) okhttp3.OkHttpClient.Builder.retryOnConnectionFailure(boolean):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x0010: IGET  (r3 I:com.mapbox.android.telemetry.Environment) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.environment com.mapbox.android.telemetry.Environment \l0x0012: INVOKE  (r5 I:okhttp3.CertificatePinner) = \l  (r0 I:com.mapbox.android.telemetry.CertificatePinnerFactory)\l  (r3 I:com.mapbox.android.telemetry.Environment)\l  (r5 I:com.mapbox.android.telemetry.CertificateBlacklist)\l com.mapbox.android.telemetry.CertificatePinnerFactory.provideCertificatePinnerFor(com.mapbox.android.telemetry.Environment, com.mapbox.android.telemetry.CertificateBlacklist):okhttp3.CertificatePinner type: VIRTUAL \l0x0016: INVOKE  (r5 I:okhttp3.OkHttpClient$Builder) = \l  (r1 I:okhttp3.OkHttpClient$Builder)\l  (r5 I:okhttp3.CertificatePinner)\l okhttp3.OkHttpClient.Builder.certificatePinner(okhttp3.CertificatePinner):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x001a: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001b: NEW_ARRAY  (r0 I:okhttp3.ConnectionSpec[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: okhttp3.ConnectionSpec[] \l0x001d: SGET  (r1 I:okhttp3.ConnectionSpec) =  okhttp3.ConnectionSpec.MODERN_TLS okhttp3.ConnectionSpec \l0x001f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0022: SGET  (r1 I:okhttp3.ConnectionSpec) =  okhttp3.ConnectionSpec.COMPATIBLE_TLS okhttp3.ConnectionSpec \l0x0024: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0026: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object[]) java.util.Arrays.asList(java.lang.Object[]):java.util.List type: STATIC \l0x002a: INVOKE  (r5 I:okhttp3.OkHttpClient$Builder) = (r5 I:okhttp3.OkHttpClient$Builder), (r0 I:java.util.List) okhttp3.OkHttpClient.Builder.connectionSpecs(java.util.List):okhttp3.OkHttpClient$Builder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0030|0x0030: INVOKE  \l  (r5 I:okhttp3.OkHttpClient$Builder)\l  (r6 I:okhttp3.Interceptor)\l okhttp3.OkHttpClient.Builder.addInterceptor(okhttp3.Interceptor):okhttp3.OkHttpClient$Builder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0033|0x0033: IGET  (r6 I:javax.net.ssl.SSLSocketFactory) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.sslSocketFactory javax.net.ssl.SSLSocketFactory \l0x0035: IGET  (r0 I:javax.net.ssl.X509TrustManager) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.x509TrustManager javax.net.ssl.X509TrustManager \l0x0037: INVOKE  (r6 I:boolean) = \l  (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings)\l  (r6 I:javax.net.ssl.SSLSocketFactory)\l  (r0 I:javax.net.ssl.X509TrustManager)\l com.mapbox.android.telemetry.TelemetryClientSettings.isSocketFactoryUnset(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager):boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0049 \l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|0x003d: IGET  (r6 I:javax.net.ssl.SSLSocketFactory) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.sslSocketFactory javax.net.ssl.SSLSocketFactory \l0x003f: IGET  (r0 I:javax.net.ssl.X509TrustManager) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.x509TrustManager javax.net.ssl.X509TrustManager \l0x0041: INVOKE  \l  (r5 I:okhttp3.OkHttpClient$Builder)\l  (r6 I:javax.net.ssl.SSLSocketFactory)\l  (r0 I:javax.net.ssl.X509TrustManager)\l okhttp3.OkHttpClient.Builder.sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x0044: IGET  (r6 I:javax.net.ssl.HostnameVerifier) = (r4 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.hostnameVerifier javax.net.ssl.HostnameVerifier \l0x0046: INVOKE  \l  (r5 I:okhttp3.OkHttpClient$Builder)\l  (r6 I:javax.net.ssl.HostnameVerifier)\l okhttp3.OkHttpClient.Builder.hostnameVerifier(javax.net.ssl.HostnameVerifier):okhttp3.OkHttpClient$Builder type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0049|0x0049: INVOKE  (r5 I:okhttp3.OkHttpClient) = (r5 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.build():okhttp3.OkHttpClient type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: RETURN  (r5 I:okhttp3.OkHttpClient) \l}"];
MethodNode[shape=record,label="{private okhttp3.OkHttpClient com.mapbox.android.telemetry.TelemetryClientSettings.configureHttpClient((r4 'this' I:com.mapbox.android.telemetry.TelemetryClientSettings A[IMMUTABLE_TYPE, THIS]), (r5 I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:okhttp3.Interceptor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

