digraph "CFG forcom.mapbox.android.telemetry.MapboxTelemetry.isMyServiceRunning(Ljava\/lang\/Class;)Z" {
subgraph cluster_Region_1136284511 {
label = "R(3:0|(1:(1:5))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = ((android.app.ActivityManager) applicationContext.getSystemService(\"activity\")).getRunningServices(Integer.MAX_VALUE).iterator()\l}"];
subgraph cluster_LoopRegion_1987541689 {
label = "LOOP:0: (1:(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0019|if (r0.hasNext() != false) goto L_0x001b\l}"];
subgraph cluster_Region_1520015978 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_590629034 {
label = "IF [B:4:0x002f] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x002f|LOOP_END\lLOOP:0: B:1:0x0015\-\>B:4:0x002f\l|if (r4.getName().equals(r1.service.getClassName()) == true) goto L_0x0031\l}"];
subgraph cluster_Region_839243576 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0031|RETURN\l|return true\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0033|RETURN\l|return false\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0015|LOOP_START\lLOOP:0: B:1:0x0015\-\>B:4:0x002f\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001b}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0033|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.android.telemetry.MapboxTelemetry.isMyServiceRunning((r3v0 'this' com.mapbox.android.telemetry.MapboxTelemetry A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_1[style=dashed];
Node_4 -> Node_8;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_6;
Node_8 -> Node_5;
}

