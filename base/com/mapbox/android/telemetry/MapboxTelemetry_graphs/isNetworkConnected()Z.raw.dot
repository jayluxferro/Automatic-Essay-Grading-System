digraph "CFG forcom.mapbox.android.telemetry.MapboxTelemetry.isNetworkConnected()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: SGET  (r0 I:android.content.Context) =  com.mapbox.android.telemetry.MapboxTelemetry.applicationContext android.content.Context A[Catch:\{ Exception \-\> 0x0013 \}, TRY_ENTER]\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"connectivity\" A[Catch:\{ Exception \-\> 0x0013 \}]\l0x0004: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) android.content.Context.getSystemService(java.lang.String):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0013 \}]\l0x0008: CHECK_CAST  (r0 I:android.net.ConnectivityManager) = (android.net.ConnectivityManager) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0013 \}]\l0x000a: INVOKE  (r0 I:android.net.NetworkInfo) = (r0 I:android.net.ConnectivityManager) android.net.ConnectivityManager.getActiveNetworkInfo():android.net.NetworkInfo type: VIRTUAL A[Catch:\{ Exception \-\> 0x0013 \}]\l0x000e: INVOKE  (r0 I:boolean) = (r0 I:android.net.NetworkInfo) android.net.NetworkInfo.isConnected():boolean type: VIRTUAL A[Catch:\{ Exception \-\> 0x0013 \}]\l0x0011: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.android.telemetry.MapboxTelemetry.isNetworkConnected((r2 'this' I:com.mapbox.android.telemetry.MapboxTelemetry A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_3 -> Node_5;
Node_4 -> Node_3;
}

