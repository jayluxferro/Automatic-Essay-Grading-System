digraph "CFG forcom.mapbox.android.telemetry.CertificatePinnerFactory.removeBlacklistedPins(Ljava\/util\/Map;Lcom\/mapbox\/android\/telemetry\/CertificateBlacklist;)Ljava\/util\/Map;" {
subgraph cluster_Region_667675466 {
label = "R(2:0|(2:(1:2)|(2:3|4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List java.util.List\<java.lang.String\> r4 = r4.retrieveBlackList()\l}"];
subgraph cluster_Region_2069703585 {
label = "R(2:(1:2)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1850424921 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r4.isEmpty() == true) goto L_0x000a\l}"];
subgraph cluster_Region_270578964 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_656073340 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|java.lang.String java.lang.String r0 = retrievePinKey(r3)\lr3.put(r0, removeBlaklistedHashes(r4, r3.get(r0)))\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|RETURN\l|return r3\l}"];
}
}
}
MethodNode[shape=record,label="{private java.util.Map\<java.lang.String, java.util.List\<java.lang.String\>\> com.mapbox.android.telemetry.CertificatePinnerFactory.removeBlacklistedPins((r2v0 'this' com.mapbox.android.telemetry.CertificatePinnerFactory A[IMMUTABLE_TYPE, THIS]), (r3v0 java.util.Map\<java.lang.String, java.util.List\<java.lang.String\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;\>;, Lcom\/mapbox\/android\/telemetry\/CertificateBlacklist;, ), Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
}

