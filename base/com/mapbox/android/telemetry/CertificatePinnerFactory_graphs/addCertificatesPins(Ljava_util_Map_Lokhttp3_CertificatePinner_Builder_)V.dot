digraph "CFG forcom.mapbox.android.telemetry.CertificatePinnerFactory.addCertificatesPins(Ljava\/util\/Map;Lokhttp3\/CertificatePinner$Builder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r7 = r7.entrySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lLOOP:0: B:1:0x0008\-\>B:9:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r7.hasNext() == false) goto L_0x003a\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|java.util.Map$Entry r0 = r7.next()\ljava.util.Iterator r1 = ((java.util.List) r0.getValue()).iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|LOOP_START\lLOOP:1: B:4:0x001e\-\>B:6:0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|if (r1.hasNext() == false) goto L_0x0008\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|LOOP_END\lLOOP:1: B:4:0x001e\-\>B:6:0x0024\l|java.lang.String[] r4 = new java.lang.String[]\{(java.lang.String) r1.next()\}\lr8.add((java.lang.String) r0.getKey(), r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0008|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0008\-\>B:9:0x0008\l}"];
MethodNode[shape=record,label="{private void com.mapbox.android.telemetry.CertificatePinnerFactory.addCertificatesPins((r6v0 'this' com.mapbox.android.telemetry.CertificatePinnerFactory A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.Map\<java.lang.String, java.util.List\<java.lang.String\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 okhttp3.CertificatePinner$Builder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;\>;, Lokhttp3\/CertificatePinner$Builder;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_4;
Node_8 -> Node_7;
Node_9 -> Node_1;
}

