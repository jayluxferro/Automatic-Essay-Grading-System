digraph "CFG forcom.mapbox.android.telemetry.AlarmSchedulerFlusher.unregister()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.app.AlarmManager) = (r2 I:com.mapbox.android.telemetry.AlarmSchedulerFlusher) com.mapbox.android.telemetry.AlarmSchedulerFlusher.manager android.app.AlarmManager \l0x0002: IGET  (r1 I:android.app.PendingIntent) = (r2 I:com.mapbox.android.telemetry.AlarmSchedulerFlusher) com.mapbox.android.telemetry.AlarmSchedulerFlusher.pendingIntent android.app.PendingIntent \l0x0004: INVOKE  \l  (r0 I:android.app.AlarmManager)\l  (r1 I:android.app.PendingIntent)\l android.app.AlarmManager.cancel(android.app.PendingIntent):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: IGET  (r0 I:android.content.Context) = (r2 I:com.mapbox.android.telemetry.AlarmSchedulerFlusher) com.mapbox.android.telemetry.AlarmSchedulerFlusher.context android.content.Context A[Catch:\{ IllegalArgumentException \-\> 0x000e \}, TRY_ENTER]\l0x0009: IGET  (r1 I:com.mapbox.android.telemetry.AlarmReceiver) = (r2 I:com.mapbox.android.telemetry.AlarmSchedulerFlusher) com.mapbox.android.telemetry.AlarmSchedulerFlusher.receiver com.mapbox.android.telemetry.AlarmReceiver A[Catch:\{ IllegalArgumentException \-\> 0x000e \}]\l0x000b: INVOKE  \l  (r0 I:android.content.Context)\l  (r1 I:android.content.BroadcastReceiver)\l android.content.Context.unregisterReceiver(android.content.BroadcastReceiver):void type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:1:0x0007\l}"];
MethodNode[shape=record,label="{public void com.mapbox.android.telemetry.AlarmSchedulerFlusher.unregister((r2 'this' I:com.mapbox.android.telemetry.AlarmSchedulerFlusher A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_3;
}

