digraph "CFG forcom.mapbox.android.telemetry.VisionEventFactory.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:com.mapbox.android.telemetry.VisionEventFactory$1) =  com.mapbox.android.telemetry.VisionEventFactory$1 \l0x0005: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.VisionEventFactory$1)\l  (r2 I:com.mapbox.android.telemetry.VisionEventFactory)\l com.mapbox.android.telemetry.VisionEventFactory.1.\<init\>(com.mapbox.android.telemetry.VisionEventFactory):void type: DIRECT \l0x0008: IPUT  \l  (r0 I:java.util.Map\<com.mapbox.android.telemetry.Event$Type, com.mapbox.android.telemetry.VisionBuildEvent\>)\l  (r2 I:com.mapbox.android.telemetry.VisionEventFactory)\l com.mapbox.android.telemetry.VisionEventFactory.BUILD_EVENT_VISION java.util.Map \l0x000a: SGET  (r0 I:android.content.Context) =  com.mapbox.android.telemetry.MapboxTelemetry.applicationContext android.content.Context \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"Create a MapboxTelemetry instance before calling this method.\" \l0x0013: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.mapbox.android.telemetry.VisionEventFactory.\<init\>((r2 'this' I:com.mapbox.android.telemetry.VisionEventFactory A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

