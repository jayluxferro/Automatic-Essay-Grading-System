digraph "CFG forcom.mapbox.android.telemetry.TelemetryClient.sendBatch(Ljava\/util\/List;Lokhttp3\/Callback;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.gson.GsonBuilder) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.configureGsonBuilder():com.google.gson.GsonBuilder type: DIRECT \l0x0004: INVOKE  (r0 I:com.google.gson.Gson) = (r0 I:com.google.gson.GsonBuilder) com.google.gson.GsonBuilder.create():com.google.gson.Gson type: VIRTUAL \l0x0008: INVOKE  (r0 I:java.lang.String) = (r0 I:com.google.gson.Gson), (r10 I:java.lang.Object) com.google.gson.Gson.toJson(java.lang.Object):java.lang.String type: VIRTUAL \l0x000c: SGET  (r1 I:okhttp3.MediaType) =  com.mapbox.android.telemetry.TelemetryClient.JSON okhttp3.MediaType \l0x000e: INVOKE  (r1 I:okhttp3.RequestBody) = (r1 I:okhttp3.MediaType), (r0 I:java.lang.String) okhttp3.RequestBody.create(okhttp3.MediaType, java.lang.String):okhttp3.RequestBody type: STATIC \l0x0012: IGET  (r2 I:com.mapbox.android.telemetry.TelemetryClientSettings) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.setting com.mapbox.android.telemetry.TelemetryClientSettings \l0x0014: INVOKE  (r2 I:okhttp3.HttpUrl) = (r2 I:com.mapbox.android.telemetry.TelemetryClientSettings) com.mapbox.android.telemetry.TelemetryClientSettings.getBaseUrl():okhttp3.HttpUrl type: VIRTUAL \l0x0018: CONST_STR  (r3 I:java.lang.String) =  \"\/events\/v2\" \l0x001a: INVOKE  (r2 I:okhttp3.HttpUrl$Builder) = (r2 I:okhttp3.HttpUrl), (r3 I:java.lang.String) okhttp3.HttpUrl.newBuilder(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x001e: CONST_STR  (r3 I:java.lang.String) =  \"access_token\" \l0x0020: IGET  (r4 I:java.lang.String) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.accessToken java.lang.String \l0x0022: INVOKE  (r2 I:okhttp3.HttpUrl$Builder) = \l  (r2 I:okhttp3.HttpUrl$Builder)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l okhttp3.HttpUrl.Builder.addQueryParameter(java.lang.String, java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x0026: INVOKE  (r2 I:okhttp3.HttpUrl) = (r2 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.build():okhttp3.HttpUrl type: VIRTUAL \l0x002a: INVOKE  (r3 I:boolean) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.isExtraDebuggingNeeded():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0058 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0030|0x0030: IGET  (r3 I:com.mapbox.android.telemetry.Logger) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.logger com.mapbox.android.telemetry.Logger \l0x0032: CONST_STR  (r4 I:java.lang.String) =  \"TelemetryClient\" \l0x0034: SGET  (r5 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0036: CONST_STR  (r6 I:java.lang.String) =  \"Sending POST to %s with %d event(s) (user agent: %s) with payload: %s\" \l0x0038: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0039: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x003b: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x003e: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003f: INVOKE  (r10 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0043: INVOKE  (r10 I:java.lang.Integer) = (r10 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0047: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x0049: CONST  (r10 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004a: IGET  (r8 I:java.lang.String) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.userAgent java.lang.String \l0x004c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x004e: CONST  (r10 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x004f: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0051: INVOKE  (r10 I:java.lang.String) = \l  (r5 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0055: INVOKE  \l  (r3 I:com.mapbox.android.telemetry.Logger)\l  (r4 I:java.lang.String)\l  (r10 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.debug(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0058|0x0058: NEW_INSTANCE  (r10 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x005a: INVOKE  (r10 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x005d: INVOKE  (r10 I:okhttp3.Request$Builder) = (r10 I:okhttp3.Request$Builder), (r2 I:okhttp3.HttpUrl) okhttp3.Request.Builder.url(okhttp3.HttpUrl):okhttp3.Request$Builder type: VIRTUAL \l0x0061: CONST_STR  (r0 I:java.lang.String) =  \"User\-Agent\" \l0x0063: IGET  (r2 I:java.lang.String) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.userAgent java.lang.String \l0x0065: INVOKE  (r10 I:okhttp3.Request$Builder) = \l  (r10 I:okhttp3.Request$Builder)\l  (r0 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x0069: INVOKE  (r10 I:okhttp3.Request$Builder) = (r10 I:okhttp3.Request$Builder), (r1 I:okhttp3.RequestBody) okhttp3.Request.Builder.post(okhttp3.RequestBody):okhttp3.Request$Builder type: VIRTUAL \l0x006d: INVOKE  (r10 I:okhttp3.Request) = (r10 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x0071: IGET  (r0 I:com.mapbox.android.telemetry.TelemetryClientSettings) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.setting com.mapbox.android.telemetry.TelemetryClientSettings \l0x0073: IGET  (r1 I:com.mapbox.android.telemetry.CertificateBlacklist) = (r9 I:com.mapbox.android.telemetry.TelemetryClient) com.mapbox.android.telemetry.TelemetryClient.certificateBlacklist com.mapbox.android.telemetry.CertificateBlacklist \l0x0075: INVOKE  (r0 I:okhttp3.OkHttpClient) = \l  (r0 I:com.mapbox.android.telemetry.TelemetryClientSettings)\l  (r1 I:com.mapbox.android.telemetry.CertificateBlacklist)\l com.mapbox.android.telemetry.TelemetryClientSettings.getClient(com.mapbox.android.telemetry.CertificateBlacklist):okhttp3.OkHttpClient type: VIRTUAL \l0x0079: INVOKE  (r10 I:okhttp3.Call) = (r0 I:okhttp3.OkHttpClient), (r10 I:okhttp3.Request) okhttp3.OkHttpClient.newCall(okhttp3.Request):okhttp3.Call type: VIRTUAL \l0x007d: INVOKE  (r10 I:okhttp3.Call), (r11 I:okhttp3.Callback) okhttp3.Call.enqueue(okhttp3.Callback):void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0080|0x0080: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.android.telemetry.TelemetryClient.sendBatch((r9 'this' I:com.mapbox.android.telemetry.TelemetryClient A[IMMUTABLE_TYPE, THIS]), (r10 I:java.util.List\<com.mapbox.android.telemetry.Event\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:okhttp3.Callback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/android\/telemetry\/Event;, \>;, Lokhttp3\/Callback;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

