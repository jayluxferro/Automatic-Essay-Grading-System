digraph "CFG forcom.mapbox.android.telemetry.TelemetryClient.reverseMultiForm(Lokhttp3\/MultipartBody$Builder;)Lokhttp3\/RequestBody;" {
subgraph cluster_Region_1634500403 {
label = "R(2:0|(2:1|(2:(1:5)|(1:3))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.MultipartBody okhttp3.MultipartBody r4 = r4.build()\lokhttp3.MultipartBody$Builder okhttp3.MultipartBody.Builder r0 = new okhttp3.MultipartBody.Builder(BOUNDARY).setType(okhttp3.MultipartBody.FORM)\lint int r1 = r4.size()\l}"];
subgraph cluster_LoopRegion_478622529 {
label = "LOOP:0: (2:1|(2:(1:5)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_95288397 {
label = "R(2:1|(2:(1:5)|(1:3)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0017|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:0:0x0000, B:3:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0017\-\>B:3:0x001a\l|r1\-\-\l}"];
subgraph cluster_Region_1078704982 {
label = "R(2:(1:5)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_121282092 {
label = "IF [B:2:0x0018] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0018|if (r1 \<= \-1) goto L_0x0024\l}"];
subgraph cluster_Region_1675352042 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0028|RETURN\l|return r0.build()\l}"];
}
}
subgraph cluster_Region_1023295572 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x0017\-\>B:3:0x001a\l|r0.addPart(r4.part(r1))\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0024}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0024|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private okhttp3.RequestBody com.mapbox.android.telemetry.TelemetryClient.reverseMultiForm((r3v0 'this' com.mapbox.android.telemetry.TelemetryClient A[IMMUTABLE_TYPE, THIS]), (r4v0 okhttp3.MultipartBody$Builder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_6 -> Node_4;
}

