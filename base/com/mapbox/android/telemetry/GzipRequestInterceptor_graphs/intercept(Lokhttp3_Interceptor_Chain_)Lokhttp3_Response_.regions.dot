digraph "CFG forcom.mapbox.android.telemetry.GzipRequestInterceptor.intercept(Lokhttp3\/Interceptor$Chain;)Lokhttp3\/Response;" {
subgraph cluster_Region_395665682 {
label = "R(2:0|(2:(1:7)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okhttp3.Request okhttp3.Request r0 = r5.request()\l}"];
subgraph cluster_Region_1308377087 {
label = "R(2:(1:7)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1982761010 {
label = "IF [B:1:0x0008, B:3:0x0010] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0.body() == null) goto L_0x0038\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|ADDED_TO_REGION\l|if (r0.header(p018io.fabric.sdk.android.services.network.HttpRequest.HEADER_CONTENT_ENCODING) != null) goto L_0x0038\l}"];
subgraph cluster_Region_565165841 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x003c|RETURN\l|return r5.proceed(r0)\l}"];
}
}
subgraph cluster_Region_1786306439 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0037|RETURN\l|return r5.proceed(r0.newBuilder().header(p018io.fabric.sdk.android.services.network.HttpRequest.HEADER_CONTENT_ENCODING, p018io.fabric.sdk.android.services.network.HttpRequest.ENCODING_GZIP).method(r0.method(), gzip(r0.body())).build())\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0038}"];
MethodNode[shape=record,label="{public okhttp3.Response com.mapbox.android.telemetry.GzipRequestInterceptor.intercept((r4v0 'this' com.mapbox.android.telemetry.GzipRequestInterceptor A[IMMUTABLE_TYPE, THIS]), (r5v0 okhttp3.Interceptor$Chain A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

