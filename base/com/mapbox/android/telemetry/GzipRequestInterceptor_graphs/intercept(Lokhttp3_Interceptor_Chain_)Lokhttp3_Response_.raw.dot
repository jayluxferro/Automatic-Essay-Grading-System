digraph "CFG forcom.mapbox.android.telemetry.GzipRequestInterceptor.intercept(Lokhttp3\/Interceptor$Chain;)Lokhttp3\/Response;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:okhttp3.Request) = (r5 I:okhttp3.Interceptor$Chain) okhttp3.Interceptor.Chain.request():okhttp3.Request type: INTERFACE \l0x0004: INVOKE  (r1 I:okhttp3.RequestBody) = (r0 I:okhttp3.Request) okhttp3.Request.body():okhttp3.RequestBody type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r1 I:java.lang.String) =  \"Content\-Encoding\" \l0x000c: INVOKE  (r1 I:java.lang.String) = (r0 I:okhttp3.Request), (r1 I:java.lang.String) okhttp3.Request.header(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r1 I:okhttp3.Request$Builder) = (r0 I:okhttp3.Request) okhttp3.Request.newBuilder():okhttp3.Request$Builder type: VIRTUAL \l0x0017: CONST_STR  (r2 I:java.lang.String) =  \"Content\-Encoding\" \l0x0019: CONST_STR  (r3 I:java.lang.String) =  \"gzip\" \l0x001b: INVOKE  (r1 I:okhttp3.Request$Builder) = \l  (r1 I:okhttp3.Request$Builder)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l okhttp3.Request.Builder.header(java.lang.String, java.lang.String):okhttp3.Request$Builder type: VIRTUAL \l0x001f: INVOKE  (r2 I:java.lang.String) = (r0 I:okhttp3.Request) okhttp3.Request.method():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r0 I:okhttp3.RequestBody) = (r0 I:okhttp3.Request) okhttp3.Request.body():okhttp3.RequestBody type: VIRTUAL \l0x0027: INVOKE  (r0 I:okhttp3.RequestBody) = \l  (r4 I:com.mapbox.android.telemetry.GzipRequestInterceptor)\l  (r0 I:okhttp3.RequestBody)\l com.mapbox.android.telemetry.GzipRequestInterceptor.gzip(okhttp3.RequestBody):okhttp3.RequestBody type: DIRECT \l0x002b: INVOKE  (r0 I:okhttp3.Request$Builder) = \l  (r1 I:okhttp3.Request$Builder)\l  (r2 I:java.lang.String)\l  (r0 I:okhttp3.RequestBody)\l okhttp3.Request.Builder.method(java.lang.String, okhttp3.RequestBody):okhttp3.Request$Builder type: VIRTUAL \l0x002f: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x0033: INVOKE  (r5 I:okhttp3.Response) = (r5 I:okhttp3.Interceptor$Chain), (r0 I:okhttp3.Request) okhttp3.Interceptor.Chain.proceed(okhttp3.Request):okhttp3.Response type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: RETURN  (r5 I:okhttp3.Response) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: INVOKE  (r5 I:okhttp3.Response) = (r5 I:okhttp3.Interceptor$Chain), (r0 I:okhttp3.Request) okhttp3.Interceptor.Chain.proceed(okhttp3.Request):okhttp3.Response type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: RETURN  (r5 I:okhttp3.Response) \l}"];
MethodNode[shape=record,label="{public okhttp3.Response com.mapbox.android.telemetry.GzipRequestInterceptor.intercept((r4 'this' I:com.mapbox.android.telemetry.GzipRequestInterceptor A[IMMUTABLE_TYPE, THIS]), (r5 I:okhttp3.Interceptor$Chain A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

