digraph "CFG forcom.mapbox.android.telemetry.MapDragendEvent.\<init\>(Landroid\/os\/Parcel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = null\lr4.orientation = null\lr4.carrier = null\lr4.wifi = null\lr4.event = r5.readString()\lr4.created = r5.readString()\lr4.latitude = r5.readDouble()\lr4.longitude = r5.readDouble()\lr4.zoom = r5.readDouble()\lr4.orientation = r5.readString()\lr4.batteryLevel = java.lang.Integer.valueOf(r5.readInt())\lr2 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x003e|if (r5.readByte() == 0) goto L_0x0042\l}"];
Node_2 [shape=record,label="{2\:\ 0x0040|r1 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0042|r1 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0043|PHI: r1 \l  PHI: (r1v9 boolean) = (r1v14 boolean), (r1v15 boolean) binds: [B:3:0x0042, B:2:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|r4.pluggedIn = java.lang.Boolean.valueOf(r1)\lr4.carrier = r5.readString()\lr4.cellularNetworkType = r5.readString()\lbyte r5 = r5.readByte()\l}"];
Node_5 [shape=record,label="{5\:\ 0x005a|if (r5 != 2) goto L_0x005d\l}"];
Node_6 [shape=record,label="{6\:\ 0x005d|if (r5 == 0) goto L_0x0060\l}"];
Node_7 [shape=record,label="{7\:\ 0x005f|r2 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0060|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:6:0x005d, B:7:0x005f] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Boolean r0 = java.lang.Boolean.valueOf(r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0064|PHI: r0 \l  PHI: (r0v1 java.lang.Boolean) = (r0v0 java.lang.Boolean), (r0v2 java.lang.Boolean) binds: [B:5:0x005a, B:8:0x0060] A[DONT_GENERATE, DONT_INLINE]\l|r4.wifi = r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0066|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.mapbox.android.telemetry.MapDragendEvent.\<init\>((r4v0 'this' com.mapbox.android.telemetry.MapDragendEvent A[IMMUTABLE_TYPE, THIS]), (r5v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

