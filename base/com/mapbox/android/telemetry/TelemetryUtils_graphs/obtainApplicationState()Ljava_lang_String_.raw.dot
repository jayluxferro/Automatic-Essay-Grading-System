digraph "CFG forcom.mapbox.android.telemetry.TelemetryUtils.obtainApplicationState()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:android.content.Context) =  com.mapbox.android.telemetry.MapboxTelemetry.applicationContext android.content.Context \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"activity\" \l0x0004: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) android.content.Context.getSystemService(java.lang.String):java.lang.Object type: VIRTUAL \l0x0008: CHECK_CAST  (r0 I:android.app.ActivityManager) = (android.app.ActivityManager) (r0 I:?[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:java.util.List) = (r0 I:android.app.ActivityManager) android.app.ActivityManager.getRunningAppProcesses():java.util.List type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST_STR  (r0 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: SGET  (r1 I:android.content.Context) =  com.mapbox.android.telemetry.MapboxTelemetry.applicationContext android.content.Context \l0x0015: INVOKE  (r1 I:java.lang.String) = (r1 I:android.content.Context) android.content.Context.getPackageName():java.lang.String type: VIRTUAL \l0x0019: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r2 I:android.app.ActivityManager$RunningAppProcessInfo) = (android.app.ActivityManager$RunningAppProcessInfo) (r2 I:?[OBJECT, ARRAY]) \l0x0029: IGET  (r3 I:int) = (r2 I:android.app.ActivityManager$RunningAppProcessInfo) android.app.ActivityManager.RunningAppProcessInfo.importance int \l0x002b: CONST  (r4 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IGET  (r2 I:java.lang.String) = (r2 I:android.app.ActivityManager$RunningAppProcessInfo) android.app.ActivityManager.RunningAppProcessInfo.processName java.lang.String \l0x0031: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: CONST_STR  (r0 I:java.lang.String) =  \"Foreground\" \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: RETURN  (r0 I:java.lang.String) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: CONST_STR  (r0 I:java.lang.String) =  \"Background\" \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String com.mapbox.android.telemetry.TelemetryUtils.obtainApplicationState() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_5;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
}

