digraph "CFG forcom.mapbox.android.telemetry.TelemetryUtils.obtainBatteryLevel()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:android.content.Context) =  com.mapbox.android.telemetry.MapboxTelemetry.applicationContext android.content.Context \l0x0002: INVOKE  (r0 I:android.content.Intent) = (r0 I:android.content.Context) com.mapbox.android.telemetry.TelemetryUtils.registerBatteryUpdates(android.content.Context):android.content.Intent type: STATIC \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST_STR  (r2 I:java.lang.String) =  \"level\" \l0x000c: INVOKE  (r2 I:int) = \l  (r0 I:android.content.Intent)\l  (r2 I:java.lang.String)\l  (r1 I:int)\l android.content.Intent.getIntExtra(java.lang.String, int):int type: VIRTUAL \l0x0010: CONST_STR  (r3 I:java.lang.String) =  \"scale\" \l0x0012: INVOKE  (r0 I:int) = \l  (r0 I:android.content.Intent)\l  (r3 I:java.lang.String)\l  (r1 I:int)\l android.content.Intent.getIntExtra(java.lang.String, int):int type: VIRTUAL \l0x0016: CAST  (r1 I:float) = (float) (r2 I:int) \l0x0017: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0018: ARITH  (r1 I:float) = (r1 I:float) \/ (r0 I:float) \l0x0019: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1120403456(0x42c80000, float:100.0) ?[int, float, short, byte, char])\l \l0x001b: ARITH  (r1 I:float) = (r1 I:float) * (r0 I:float) \l0x001d: INVOKE  (r0 I:int) = (r1 I:float) java.lang.Math.round(float):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{static int com.mapbox.android.telemetry.TelemetryUtils.obtainBatteryLevel() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

