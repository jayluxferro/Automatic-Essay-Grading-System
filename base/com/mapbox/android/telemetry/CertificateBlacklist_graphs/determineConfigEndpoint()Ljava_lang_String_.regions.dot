digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.determineConfigEndpoint()Ljava\/lang\/String;" {
subgraph cluster_Region_1221051026 {
label = "R(2:0|(2:2|(2:(1:12)|(2:6|7))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.mapbox.android.telemetry.EnvironmentResolver com.mapbox.android.telemetry.EnvironmentResolver r0 = new com.mapbox.android.telemetry.EnvironmentChain().setup()\l}"];
subgraph cluster_TryCatchRegion_470914081 {
label = "Try: R(2:2|(2:(1:12)|(2:6|7))) catches: R(3:8|9|10)";
node [shape=record,color=blue];
subgraph cluster_Region_950677379 {
label = "R(2:2|(2:(1:12)|(2:6|7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ NameNotFoundException \-\> 0x0034 \}\lSplitter:B:1:0x0009\l|android.content.pm.ApplicationInfo android.content.pm.ApplicationInfo r1 = r4.context.getPackageManager().getApplicationInfo(r4.context.getPackageName(), 128)     \/\/ Catch:\{ NameNotFoundException \-\> 0x0034 \}\l}"];
subgraph cluster_Region_1371792263 {
label = "R(2:(1:12)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1918773321 {
label = "IF [B:3:0x001b, B:5:0x001f] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001b|Catch:\{ NameNotFoundException \-\> 0x0034 \}\l|if (r1 == null) goto L_?     \/\/ Catch:\{ NameNotFoundException \-\> 0x0034 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|ADDED_TO_REGION\lCatch:\{ NameNotFoundException \-\> 0x0034 \}\l|if (r1.metaData == null) goto L_?     \/\/ Catch:\{ NameNotFoundException \-\> 0x0034 \}\l}"];
subgraph cluster_Region_1524705188 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return COM_CONFIG_ENDPOINT\l}"];
}
}
subgraph cluster_Region_768595817 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|Catch:\{ NameNotFoundException \-\> 0x0034 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|RETURN\l|return ENDPOINTS.get(r0.obtainServerInformation(r1.metaData).getEnvironment())\l}"];
}
}
}
subgraph cluster_Region_625034014 {
label = "R(3:8|9|10) | ExcHandler: NameNotFoundException (r0v2 'e' android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0034|ExcHandler: NameNotFoundException (r0v2 'e' android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0009\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|r4.logger.error(NAME_NOT_FOUND_EXCEPTION, r0.getMessage())\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return COM_CONFIG_ENDPOINT\l}"];
}
}
}
subgraph cluster_Region_625034014 {
label = "R(3:8|9|10) | ExcHandler: NameNotFoundException (r0v2 'e' android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0034|ExcHandler: NameNotFoundException (r0v2 'e' android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0009\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|r4.logger.error(NAME_NOT_FOUND_EXCEPTION, r0.getMessage())\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return COM_CONFIG_ENDPOINT\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001d|Catch:\{ NameNotFoundException \-\> 0x0034 \}\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return COM_CONFIG_ENDPOINT\l}"];
MethodNode[shape=record,label="{private java.lang.String com.mapbox.android.telemetry.CertificateBlacklist.determineConfigEndpoint((r4v0 'this' com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_4 -> Node_5;
}

