digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.updateBlacklist()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.HttpUrl$Builder) =  okhttp3.HttpUrl$Builder \l0x0002: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"https\" \l0x0007: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) = (r0 I:okhttp3.HttpUrl$Builder), (r1 I:java.lang.String) okhttp3.HttpUrl.Builder.scheme(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x000b: INVOKE  (r1 I:java.lang.String) = (r3 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.determineConfigEndpoint():java.lang.String type: DIRECT \l0x000f: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) = (r0 I:okhttp3.HttpUrl$Builder), (r1 I:java.lang.String) okhttp3.HttpUrl.Builder.host(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"events\-config\" \l0x0015: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) = (r0 I:okhttp3.HttpUrl$Builder), (r1 I:java.lang.String) okhttp3.HttpUrl.Builder.addPathSegment(java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x0019: CONST_STR  (r1 I:java.lang.String) =  \"access_token\" \l0x001b: IGET  (r2 I:java.lang.String) = (r3 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.accessToken java.lang.String \l0x001d: INVOKE  (r0 I:okhttp3.HttpUrl$Builder) = \l  (r0 I:okhttp3.HttpUrl$Builder)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l okhttp3.HttpUrl.Builder.addQueryParameter(java.lang.String, java.lang.String):okhttp3.HttpUrl$Builder type: VIRTUAL \l0x0021: INVOKE  (r0 I:okhttp3.HttpUrl) = (r0 I:okhttp3.HttpUrl$Builder) okhttp3.HttpUrl.Builder.build():okhttp3.HttpUrl type: VIRTUAL \l0x0025: NEW_INSTANCE  (r1 I:okhttp3.Request$Builder) =  okhttp3.Request$Builder \l0x0027: INVOKE  (r1 I:okhttp3.Request$Builder) okhttp3.Request.Builder.\<init\>():void type: DIRECT \l0x002a: INVOKE  (r0 I:okhttp3.Request$Builder) = (r1 I:okhttp3.Request$Builder), (r0 I:okhttp3.HttpUrl) okhttp3.Request.Builder.url(okhttp3.HttpUrl):okhttp3.Request$Builder type: VIRTUAL \l0x002e: INVOKE  (r0 I:okhttp3.Request) = (r0 I:okhttp3.Request$Builder) okhttp3.Request.Builder.build():okhttp3.Request type: VIRTUAL \l0x0032: NEW_INSTANCE  (r1 I:okhttp3.OkHttpClient) =  okhttp3.OkHttpClient \l0x0034: INVOKE  (r1 I:okhttp3.OkHttpClient) okhttp3.OkHttpClient.\<init\>():void type: DIRECT \l0x0037: INVOKE  (r0 I:okhttp3.Call) = (r1 I:okhttp3.OkHttpClient), (r0 I:okhttp3.Request) okhttp3.OkHttpClient.newCall(okhttp3.Request):okhttp3.Call type: VIRTUAL \l0x003b: INVOKE  (r0 I:okhttp3.Call), (r3 I:okhttp3.Callback) okhttp3.Call.enqueue(okhttp3.Callback):void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x003e|0x003e: RETURN   \l}"];
MethodNode[shape=record,label="{void com.mapbox.android.telemetry.CertificateBlacklist.updateBlacklist((r3 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

