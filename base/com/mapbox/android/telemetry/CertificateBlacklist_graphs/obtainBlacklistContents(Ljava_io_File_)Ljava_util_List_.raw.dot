digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.obtainBlacklistContents(Ljava\/io\/File;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x0002: INVOKE  (r0 I:java.io.FileInputStream), (r7 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT \l0x0005: NEW_INSTANCE  (r7 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0007: NEW_INSTANCE  (r1 I:java.io.InputStreamReader) =  java.io.InputStreamReader \l0x0009: INVOKE  \l  (r1 I:java.io.InputStreamReader)\l  (r0 I:java.io.InputStream)\l java.io.InputStreamReader.\<init\>(java.io.InputStream):void type: DIRECT \l0x000c: INVOKE  (r7 I:java.io.BufferedReader), (r1 I:java.io.Reader) java.io.BufferedReader.\<init\>(java.io.Reader):void type: DIRECT \l0x000f: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0011: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0071 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|SYNTHETIC\lSplitter:B:2:0x0018\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0018\l|0x0018: INVOKE  (r3 I:java.lang.String) = (r7 I:java.io.BufferedReader) java.io.BufferedReader.readLine():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x0030 \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x0030 \}]\l0x001f: GOTO  \-\> 0x0021 A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c A[Catch:\{ IOException \-\> 0x0030 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: INVOKE  (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ IOException \-\> 0x0030 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|ExcHandler: all null\lSplitter:B:15:0x0031\l|0x002e: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|ExcHandler: IOException null\lSplitter:B:2:0x0018\l|0x0030: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|SYNTHETIC\lSplitter:B:15:0x0031\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0031\l|0x0031: IGET  (r3 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger A[Catch:\{ all \-\> 0x002e \}, TRY_ENTER]\l0x0033: CONST_STR  (r4 I:java.lang.String) =  \"Unable to read line of Blacklist file\" A[Catch:\{ all \-\> 0x002e \}]\l0x0035: INVOKE  (r2 I:java.lang.String) = (r2 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}]\l0x0039: INVOKE  \l  (r3 I:com.mapbox.android.telemetry.Logger)\l  (r4 I:java.lang.String)\l  (r2 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|SYNTHETIC\lSplitter:B:17:0x003c\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x003c\l|0x003c: INVOKE  (r0 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0040 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|ExcHandler: IOException null\lSplitter:B:17:0x003c\l|0x0040: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|0x0041: IGET  (r2 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0043: CONST_STR  (r3 I:java.lang.String) =  \"Unable to close stream\" \l0x0045: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x0049: INVOKE  \l  (r2 I:com.mapbox.android.telemetry.Logger)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|SYNTHETIC\lSplitter:B:22:0x004c\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x004c\l|0x004c: INVOKE  (r7 I:java.io.BufferedReader) java.io.BufferedReader.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0085 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0050|SYNTHETIC\lSplitter:B:25:0x0050\l}"];
Node_26 [shape=record,label="{26\:\ ?|Splitter:B:25:0x0050\l|0x0050: INVOKE  (r0 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0054 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|ExcHandler: IOException null\lSplitter:B:25:0x0050\l|0x0054: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|0x0055: IGET  (r2 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0057: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x005b: CONST_STR  (r3 I:java.lang.String) =  \"Unable to close stream\" \l0x005d: INVOKE  \l  (r2 I:com.mapbox.android.telemetry.Logger)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|SYNTHETIC\lSplitter:B:30:0x0060\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x0060\l|0x0060: INVOKE  (r7 I:java.io.BufferedReader) java.io.BufferedReader.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0064 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0064|ExcHandler: IOException null\lSplitter:B:30:0x0060\l|0x0064: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_34 [shape=record,label="{34\:\ 0x0065|0x0065: IGET  (r0 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0067: INVOKE  (r7 I:java.lang.String) = (r7 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x006b: CONST_STR  (r2 I:java.lang.String) =  \"Unable to close BufferedReader\" \l0x006d: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.Logger)\l  (r2 I:java.lang.String)\l  (r7 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x0070|0x0070: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0071|SYNTHETIC\lSplitter:B:36:0x0071\l}"];
Node_37 [shape=record,label="{37\:\ ?|Splitter:B:36:0x0071\l|0x0071: INVOKE  (r0 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0075 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0075|ExcHandler: IOException null\lSplitter:B:36:0x0071\l|0x0075: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_40 [shape=record,label="{40\:\ 0x0076|0x0076: IGET  (r2 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0078: CONST_STR  (r3 I:java.lang.String) =  \"Unable to close stream\" \l0x007a: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x007e: INVOKE  \l  (r2 I:com.mapbox.android.telemetry.Logger)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x0081|SYNTHETIC\lSplitter:B:41:0x0081\l}"];
Node_42 [shape=record,label="{42\:\ ?|Splitter:B:41:0x0081\l|0x0081: INVOKE  (r7 I:java.io.BufferedReader) java.io.BufferedReader.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0085 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0085|ExcHandler: IOException null\lSplitter:B:22:0x004c\l|0x0085: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_45 [shape=record,label="{45\:\ 0x0086|0x0086: IGET  (r0 I:com.mapbox.android.telemetry.Logger) = (r6 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0088: CONST_STR  (r2 I:java.lang.String) =  \"Unable to close BufferedReader\" \l0x008a: INVOKE  (r7 I:java.lang.String) = (r7 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x008e: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.Logger)\l  (r2 I:java.lang.String)\l  (r7 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_46 [shape=record,label="{46\:\ 0x0091|0x0091: RETURN  (r1 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{private java.util.List\<java.lang.String\> com.mapbox.android.telemetry.CertificateBlacklist.obtainBlacklistContents((r6 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS]), (r7 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/File;, ), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_36;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_25;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_20;
Node_18 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_44;
Node_23 -> Node_44;
Node_23 -> Node_46;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_26 -> Node_28;
Node_26 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_33;
Node_31 -> Node_33;
Node_31 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_39;
Node_37 -> Node_39;
Node_37 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_44;
Node_42 -> Node_44;
Node_42 -> Node_46;
Node_44 -> Node_45;
Node_45 -> Node_46;
}

