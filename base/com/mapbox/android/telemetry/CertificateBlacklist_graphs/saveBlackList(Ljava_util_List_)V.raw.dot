digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.saveBlackList(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:com.mapbox.android.telemetry.CertificateBlacklist)\l  (r5 I:java.util.List)\l com.mapbox.android.telemetry.CertificateBlacklist.createListContent(java.util.List):java.lang.String type: DIRECT \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: IGET  (r1 I:android.content.Context) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.context android.content.Context A[Catch:\{ IOException \-\> 0x002e \}, TRY_ENTER]\l0x0007: CONST_STR  (r2 I:java.lang.String) =  \"MapboxBlacklist\" A[Catch:\{ IOException \-\> 0x002e \}]\l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x002e \}]\l0x000a: INVOKE  (r1 I:java.io.FileOutputStream) = \l  (r1 I:android.content.Context)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l android.content.Context.openFileOutput(java.lang.String, int):java.io.FileOutputStream type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}]\l0x000d: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|SYNTHETIC\lSplitter:B:3:0x000e\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000e\l|0x000e: INVOKE  (r5 I:byte[]) = (r5 I:java.lang.String) java.lang.String.getBytes():byte[] type: VIRTUAL A[Catch:\{ IOException \-\> 0x0029, all \-\> 0x0026 \}, TRY_ENTER]\l0x0012: INVOKE  (r1 I:java.io.FileOutputStream), (r5 I:byte[]) java.io.FileOutputStream.write(byte[]):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0029, all \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|SYNTHETIC\lSplitter:B:5:0x0015\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0015\l|0x0015: INVOKE  (r1 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0019 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|ExcHandler: IOException null\lSplitter:B:5:0x0015\l|0x0019: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r0 I:com.mapbox.android.telemetry.Logger) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"Unable to close stream\" \l0x001e: INVOKE  (r5 I:java.lang.String) = (r5 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x0022: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.Logger)\l  (r1 I:java.lang.String)\l  (r5 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|ExcHandler: all null\lSplitter:B:3:0x000e\l|0x0026: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|ExcHandler: IOException null\lSplitter:B:3:0x000e\l|0x0029: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|ExcHandler: all null\lSplitter:B:17:0x002f\l|0x002c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|ExcHandler: IOException null\lSplitter:B:1:0x0005\l|0x002e: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|SYNTHETIC\lSplitter:B:17:0x002f\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x002f\l|0x002f: IGET  (r1 I:com.mapbox.android.telemetry.Logger) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"Unable to save blacklist to file\" A[Catch:\{ all \-\> 0x002c \}]\l0x0033: INVOKE  (r5 I:java.lang.String) = (r5 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l0x0037: INVOKE  \l  (r1 I:com.mapbox.android.telemetry.Logger)\l  (r2 I:java.lang.String)\l  (r5 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|SYNTHETIC\lSplitter:B:19:0x003a\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x003a\l|0x003a: INVOKE  (r0 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0019 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|0x003d: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x003e|SYNTHETIC\lSplitter:B:22:0x003e\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x003e\l|0x003e: INVOKE  (r0 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0042 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|ExcHandler: IOException null\lSplitter:B:22:0x003e\l|0x0042: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_26 [shape=record,label="{26\:\ 0x0043|0x0043: IGET  (r1 I:com.mapbox.android.telemetry.Logger) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0045: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x0049: CONST_STR  (r2 I:java.lang.String) =  \"Unable to close stream\" \l0x004b: INVOKE  \l  (r1 I:com.mapbox.android.telemetry.Logger)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.mapbox.android.telemetry.CertificateBlacklist.saveBlackList((r4 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_12;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_6 -> Node_21;
Node_8 -> Node_9;
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_17;
Node_14 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_19 -> Node_8;
Node_20 -> Node_21;
Node_20 -> Node_8;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_23 -> Node_25;
Node_23 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27;
}

