digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.determineConfigEndpoint()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.mapbox.android.telemetry.EnvironmentChain) =  com.mapbox.android.telemetry.EnvironmentChain \l0x0002: INVOKE  (r0 I:com.mapbox.android.telemetry.EnvironmentChain) com.mapbox.android.telemetry.EnvironmentChain.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r0 I:com.mapbox.android.telemetry.EnvironmentResolver) = (r0 I:com.mapbox.android.telemetry.EnvironmentChain) com.mapbox.android.telemetry.EnvironmentChain.setup():com.mapbox.android.telemetry.EnvironmentResolver type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0009\l|0x0009: IGET  (r1 I:android.content.Context) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.context android.content.Context A[Catch:\{ NameNotFoundException \-\> 0x0034 \}, TRY_ENTER]\l0x000b: INVOKE  (r1 I:android.content.pm.PackageManager) = (r1 I:android.content.Context) android.content.Context.getPackageManager():android.content.pm.PackageManager type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x000f: IGET  (r2 I:android.content.Context) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.context android.content.Context A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0011: INVOKE  (r2 I:java.lang.String) = (r2 I:android.content.Context) android.content.Context.getPackageName():java.lang.String type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0015: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0017: INVOKE  (r1 I:android.content.pm.ApplicationInfo) = \l  (r1 I:android.content.pm.PackageManager)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int):android.content.pm.ApplicationInfo type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0040 A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IGET  (r2 I:android.os.Bundle) = (r1 I:android.content.pm.ApplicationInfo) android.content.pm.ApplicationInfo.metaData android.os.Bundle A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0040 A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IGET  (r1 I:android.os.Bundle) = (r1 I:android.content.pm.ApplicationInfo) android.content.pm.ApplicationInfo.metaData android.os.Bundle A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0023: INVOKE  (r0 I:com.mapbox.android.telemetry.ServerInformation) = \l  (r0 I:com.mapbox.android.telemetry.EnvironmentResolver)\l  (r1 I:android.os.Bundle)\l com.mapbox.android.telemetry.EnvironmentResolver.obtainServerInformation(android.os.Bundle):com.mapbox.android.telemetry.ServerInformation type: INTERFACE A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0027: SGET  (r1 I:java.util.Map\<com.mapbox.android.telemetry.Environment, java.lang.String\>) =  com.mapbox.android.telemetry.CertificateBlacklist.ENDPOINTS java.util.Map A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0029: INVOKE  (r0 I:com.mapbox.android.telemetry.Environment) = (r0 I:com.mapbox.android.telemetry.ServerInformation) com.mapbox.android.telemetry.ServerInformation.getEnvironment():com.mapbox.android.telemetry.Environment type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x002d: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ NameNotFoundException \-\> 0x0034 \}]\l0x0031: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ NameNotFoundException \-\> 0x0034 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: RETURN  (r0 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|ExcHandler: NameNotFoundException null\lSplitter:B:1:0x0009\l|0x0034: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r1 I:com.mapbox.android.telemetry.Logger) = (r4 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0037: CONST_STR  (r2 I:java.lang.String) =  \"Name Not Found\" \l0x0039: INVOKE  (r0 I:java.lang.String) = \l  (r0 I:android.content.pm.PackageManager$NameNotFoundException)\l android.content.pm.PackageManager.NameNotFoundException.getMessage():java.lang.String type: VIRTUAL \l0x003d: INVOKE  \l  (r1 I:com.mapbox.android.telemetry.Logger)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: CONST_STR  (r0 I:java.lang.String) =  \"api.mapbox.com\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String com.mapbox.android.telemetry.CertificateBlacklist.determineConfigEndpoint((r4 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

