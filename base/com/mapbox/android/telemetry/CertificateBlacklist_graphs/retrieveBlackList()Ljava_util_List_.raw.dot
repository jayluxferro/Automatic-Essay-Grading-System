digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.retrieveBlackList()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.content.Context) = (r5 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.context android.content.Context \l0x0002: INVOKE  (r0 I:java.io.File) = (r0 I:android.content.Context) android.content.Context.getFilesDir():java.io.File type: VIRTUAL \l0x0006: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0008: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000b: INVOKE  (r2 I:boolean) = (r0 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: NEW_INSTANCE  (r2 I:java.io.File) =  java.io.File \l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"MapboxBlacklist\" \l0x0015: INVOKE  \l  (r2 I:java.io.File)\l  (r0 I:java.io.File)\l  (r3 I:java.lang.String)\l java.io.File.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x0018: INVOKE  (r0 I:boolean) = (r2 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|SYNTHETIC\lSplitter:B:4:0x001e\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x001e\l|0x001e: INVOKE  (r0 I:java.util.List) = \l  (r5 I:com.mapbox.android.telemetry.CertificateBlacklist)\l  (r2 I:java.io.File)\l com.mapbox.android.telemetry.CertificateBlacklist.obtainBlacklistContents(java.io.File):java.util.List type: DIRECT A[Catch:\{ IOException \-\> 0x002d \}, TRY_ENTER]\l0x0021: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|SYNTHETIC\lSplitter:B:7:0x0023\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0023\l|0x0023: INVOKE  (r0 I:java.util.List), (r1 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE A[Catch:\{ IOException \-\> 0x0028 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|ExcHandler: IOException null\lSplitter:B:7:0x0023\l|0x0028: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x002a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|ExcHandler: IOException null\lSplitter:B:4:0x001e\l|0x002d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IGET  (r2 I:com.mapbox.android.telemetry.Logger) = (r5 I:com.mapbox.android.telemetry.CertificateBlacklist) com.mapbox.android.telemetry.CertificateBlacklist.logger com.mapbox.android.telemetry.Logger \l0x0030: CONST_STR  (r3 I:java.lang.String) =  \"Unable to retrieve blacklist contents from file\" \l0x0032: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x0036: INVOKE  \l  (r2 I:com.mapbox.android.telemetry.Logger)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.mapbox.android.telemetry.Logger.error(java.lang.String, java.lang.String):int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: RETURN  (r1 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{java.util.List\<java.lang.String\> com.mapbox.android.telemetry.CertificateBlacklist.retrieveBlackList((r5 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

