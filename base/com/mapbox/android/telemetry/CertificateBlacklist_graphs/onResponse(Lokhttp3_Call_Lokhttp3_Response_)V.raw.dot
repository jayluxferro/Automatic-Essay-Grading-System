digraph "CFG forcom.mapbox.android.telemetry.CertificateBlacklist.onResponse(Lokhttp3\/Call;Lokhttp3\/Response;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.util.List) = \l  (r0 I:com.mapbox.android.telemetry.CertificateBlacklist)\l  (r2 I:okhttp3.Response)\l com.mapbox.android.telemetry.CertificateBlacklist.extractResponse(okhttp3.Response):java.util.List type: DIRECT \l0x0004: INVOKE  \l  (r0 I:com.mapbox.android.telemetry.CertificateBlacklist)\l  (r1 I:java.util.List)\l com.mapbox.android.telemetry.CertificateBlacklist.saveBlackList(java.util.List):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.mapbox.android.telemetry.CertificateBlacklist.onResponse((r0 'this' I:com.mapbox.android.telemetry.CertificateBlacklist A[IMMUTABLE_TYPE, THIS]), (r1 I:okhttp3.Call A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:okhttp3.Response A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

