digraph "CFG forcom.mapbox.android.telemetry.TelemetryService.locationPermissionCheck()Z" {
subgraph cluster_Region_1813459905 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1224044648 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_536529325 {
label = "IF [B:1:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 23) goto L_0x0006\l}"];
subgraph cluster_Region_561669833 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return com.mapbox.android.core.permissions.PermissionsManager.areLocationPermissionsGranted(r3)\l}"];
}
}
subgraph cluster_Region_1948696604 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|RETURN\l|return android.support.p000v4.content.PermissionChecker.checkSelfPermission(com.mapbox.android.telemetry.MapboxTelemetry.applicationContext, \"android.permission.ACCESS_COARSE_LOCATION\") == 0 \|\| android.support.p000v4.content.PermissionChecker.checkSelfPermission(com.mapbox.android.telemetry.MapboxTelemetry.applicationContext, \"android.permission.ACCESS_FINE_LOCATION\") == 0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001d|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0020|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0022|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{private boolean com.mapbox.android.telemetry.TelemetryService.locationPermissionCheck((r3v0 'this' com.mapbox.android.telemetry.TelemetryService A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_8;
}

