digraph "CFG forcom.mapbox.android.telemetry.MapLoadEvent.writeToParcel(Landroid\/os\/Parcel;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.writeString(r2.event)\lr3.writeString(r2.created)\lr3.writeString(r2.userId)\lr3.writeString(r2.model)\lr3.writeString(r2.operatingSystem)\l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|if (r2.resolution != null) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|r3.writeByte((byte) 0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|r3.writeByte((byte) 1)\lr3.writeFloat(r2.resolution.floatValue())\l}"];
Node_4 [shape=record,label="{4\:\ 0x002f}"];
Node_5 [shape=record,label="{5\:\ 0x0031|if (r2.accessibilityFontScale != null) goto L_0x0037\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|r3.writeByte((byte) 0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|r3.writeByte((byte) 1)\lr3.writeFloat(r2.accessibilityFontScale.floatValue())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|r3.writeString(r2.orientation)\lr3.writeInt(r2.batteryLevel.intValue())\lr3.writeByte(r2.pluggedIn.booleanValue() ? (byte) 1 : 0)\lr3.writeString(r2.carrier)\lr3.writeString(r2.cellularNetworkType)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0067|if (r2.wifi != null) goto L_0x006e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0069|r3.writeByte((byte) 2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x006e|r3.writeByte(r2.wifi.booleanValue() ? (byte) 1 : 0)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.mapbox.android.telemetry.MapLoadEvent.writeToParcel((r2v0 'this' com.mapbox.android.telemetry.MapLoadEvent A[IMMUTABLE_TYPE, THIS]), (r3v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
}

