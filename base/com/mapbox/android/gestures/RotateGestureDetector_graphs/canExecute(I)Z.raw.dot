digraph "CFG forcom.mapbox.android.gestures.RotateGestureDetector.canExecute(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = (r2 I:com.mapbox.android.gestures.RotateGestureDetector) com.mapbox.android.gestures.RotateGestureDetector.deltaSinceStart float \l0x0002: INVOKE  (r0 I:float) = (r0 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0006: IGET  (r1 I:float) = (r2 I:com.mapbox.android.gestures.RotateGestureDetector) com.mapbox.android.gestures.RotateGestureDetector.angleThreshold float \l0x0008: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r3 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.ProgressiveGesture)\l  (r3 I:int)\l com.mapbox.android.gestures.ProgressiveGesture.canExecute(int):boolean type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.mapbox.android.gestures.RotateGestureDetector.canExecute((r2 'this' I:com.mapbox.android.gestures.RotateGestureDetector A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

