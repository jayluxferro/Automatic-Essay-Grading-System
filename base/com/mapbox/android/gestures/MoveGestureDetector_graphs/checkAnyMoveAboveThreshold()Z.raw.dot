digraph "CFG forcom.mapbox.android.gestures.MoveGestureDetector.checkAnyMoveAboveThreshold()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.Integer, com.mapbox.android.gestures.MoveDistancesObject\>) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.moveDistancesObjectMap java.util.Map \l0x0002: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE \l0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r1 I:com.mapbox.android.gestures.MoveDistancesObject) = (com.mapbox.android.gestures.MoveDistancesObject) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r2 I:float) = (r1 I:com.mapbox.android.gestures.MoveDistancesObject) com.mapbox.android.gestures.MoveDistancesObject.getDistanceXSinceStart():float type: VIRTUAL \l0x001a: INVOKE  (r2 I:float) = (r2 I:float) java.lang.Math.abs(float):float type: STATIC \l0x001e: IGET  (r3 I:float) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.moveThreshold float \l0x0020: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: INVOKE  (r1 I:float) = (r1 I:com.mapbox.android.gestures.MoveDistancesObject) com.mapbox.android.gestures.MoveDistancesObject.getDistanceYSinceStart():float type: VIRTUAL \l0x0028: INVOKE  (r1 I:float) = (r1 I:float) java.lang.Math.abs(float):float type: STATIC \l0x002c: IGET  (r2 I:float) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.moveThreshold float \l0x002e: CMP_L  (r1 I:int) = (r1 I:float), (r2 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean com.mapbox.android.gestures.MoveGestureDetector.checkAnyMoveAboveThreshold((r4 'this' I:com.mapbox.android.gestures.MoveGestureDetector A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

