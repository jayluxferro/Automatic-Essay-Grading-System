digraph "CFG forcom.mapbox.android.gestures.MoveGestureDetector.analyzeMovement()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:com.mapbox.android.gestures.ProgressiveGesture) com.mapbox.android.gestures.ProgressiveGesture.analyzeMovement():boolean type: SUPER \l0x0003: INVOKE  (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.updateMoveDistancesObjects():void type: DIRECT \l0x0006: INVOKE  (r0 I:boolean) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.isInProgress():boolean type: VIRTUAL \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r0 I:android.graphics.PointF) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.getFocalPoint():android.graphics.PointF type: VIRTUAL \l0x0011: IGET  (r2 I:android.graphics.PointF) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.previousFocalPoint android.graphics.PointF \l0x0013: IGET  (r2 I:float) = (r2 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0015: IGET  (r3 I:float) = (r0 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0017: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0018: IPUT  \l  (r2 I:float)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.lastDistanceX float \l0x001a: IGET  (r2 I:android.graphics.PointF) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.previousFocalPoint android.graphics.PointF \l0x001c: IGET  (r2 I:float) = (r2 I:android.graphics.PointF) android.graphics.PointF.y float \l0x001e: IGET  (r3 I:float) = (r0 I:android.graphics.PointF) android.graphics.PointF.y float \l0x0020: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0021: IPUT  \l  (r2 I:float)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.lastDistanceY float \l0x0023: IPUT  \l  (r0 I:android.graphics.PointF)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.previousFocalPoint android.graphics.PointF \l0x0025: IGET  (r0 I:boolean) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.resetFocal boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0035 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.resetFocal boolean \l0x002b: IGET  (r0 I:java.lang.Object) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.listener java.lang.Object \l0x002d: CHECK_CAST  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) = (com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) (r0 I:?[OBJECT, ARRAY]) \l0x002f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: INVOKE  (r0 I:boolean) = \l  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l  (r1 I:float)\l  (r1 I:float)\l com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener.onMove(com.mapbox.android.gestures.MoveGestureDetector, float, float):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: IGET  (r0 I:java.lang.Object) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.listener java.lang.Object \l0x0037: CHECK_CAST  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) = (com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) (r0 I:?[OBJECT, ARRAY]) \l0x0039: IGET  (r1 I:float) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.lastDistanceX float \l0x003b: IGET  (r2 I:float) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.lastDistanceY float \l0x003d: INVOKE  (r0 I:boolean) = \l  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l  (r1 I:float)\l  (r2 I:float)\l com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener.onMove(com.mapbox.android.gestures.MoveGestureDetector, float, float):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: RETURN  (r0 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0044: INVOKE  (r0 I:boolean) = \l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l  (r0 I:int)\l com.mapbox.android.gestures.MoveGestureDetector.canExecute(int):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0061 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|0x004a: IGET  (r0 I:java.lang.Object) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.listener java.lang.Object \l0x004c: CHECK_CAST  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) = (com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener) (r0 I:?[OBJECT, ARRAY]) \l0x004e: INVOKE  (r0 I:boolean) = \l  (r0 I:com.mapbox.android.gestures.MoveGestureDetector$OnMoveGestureListener)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.OnMoveGestureListener.onMoveBegin(com.mapbox.android.gestures.MoveGestureDetector):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0061 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|0x0054: INVOKE  (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.gestureStarted():void type: VIRTUAL \l0x0057: INVOKE  (r0 I:android.graphics.PointF) = (r4 I:com.mapbox.android.gestures.MoveGestureDetector) com.mapbox.android.gestures.MoveGestureDetector.getFocalPoint():android.graphics.PointF type: VIRTUAL \l0x005b: IPUT  \l  (r0 I:android.graphics.PointF)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.previousFocalPoint android.graphics.PointF \l0x005d: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.mapbox.android.gestures.MoveGestureDetector)\l com.mapbox.android.gestures.MoveGestureDetector.resetFocal boolean \l0x005f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0060|0x0060: RETURN  (r0 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0061|0x0061: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.mapbox.android.gestures.MoveGestureDetector.analyzeMovement((r4 'this' I:com.mapbox.android.gestures.MoveGestureDetector A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
}

