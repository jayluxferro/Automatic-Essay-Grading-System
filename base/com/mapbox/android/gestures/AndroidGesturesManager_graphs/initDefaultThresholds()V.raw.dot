digraph "CFG forcom.mapbox.android.gestures.AndroidGesturesManager.initDefaultThresholds()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.mapbox.android.gestures.BaseGesture\>) = (r6 I:com.mapbox.android.gestures.AndroidGesturesManager) com.mapbox.android.gestures.AndroidGesturesManager.detectors java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:com.mapbox.android.gestures.BaseGesture) = (com.mapbox.android.gestures.BaseGesture) (r1 I:?[OBJECT, ARRAY]) \l0x0012: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.MultiFingerTapGestureDetector \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0017: CHECK_CAST  (r3 I:com.mapbox.android.gestures.MultiFingerGesture) = (com.mapbox.android.gestures.MultiFingerGesture) (r3 I:?[OBJECT, ARRAY]) \l0x0019: SGET  (r4 I:int) =  com.mapbox.android.gestures.R.dimen.mapbox_defaultMutliFingerSpanThreshold int \l0x001b: INVOKE  \l  (r3 I:com.mapbox.android.gestures.MultiFingerGesture)\l  (r4 I:int)\l com.mapbox.android.gestures.MultiFingerGesture.setSpanThresholdResource(int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INSTANCE_OF  (r3 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.StandardScaleGestureDetector \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0023: CHECK_CAST  (r3 I:com.mapbox.android.gestures.StandardScaleGestureDetector) = (com.mapbox.android.gestures.StandardScaleGestureDetector) (r3 I:?[OBJECT, ARRAY]) \l0x0025: SGET  (r4 I:int) =  com.mapbox.android.gestures.R.dimen.mapbox_defaultScaleSpanSinceStartThreshold int \l0x0027: INVOKE  \l  (r3 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l  (r4 I:int)\l com.mapbox.android.gestures.StandardScaleGestureDetector.setSpanSinceStartThresholdResource(int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: INSTANCE_OF  (r3 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.ShoveGestureDetector \l0x002c: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1101004800(0x41a00000, float:20.0) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0031: CHECK_CAST  (r3 I:com.mapbox.android.gestures.ShoveGestureDetector) = (com.mapbox.android.gestures.ShoveGestureDetector) (r3 I:?[OBJECT, ARRAY]) \l0x0033: SGET  (r5 I:int) =  com.mapbox.android.gestures.R.dimen.mapbox_defaultShovePixelThreshold int \l0x0035: INVOKE  \l  (r3 I:com.mapbox.android.gestures.ShoveGestureDetector)\l  (r5 I:int)\l com.mapbox.android.gestures.ShoveGestureDetector.setPixelDeltaThresholdResource(int):void type: VIRTUAL \l0x0038: INVOKE  \l  (r3 I:com.mapbox.android.gestures.ShoveGestureDetector)\l  (r4 I:float)\l com.mapbox.android.gestures.ShoveGestureDetector.setMaxShoveAngle(float):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: INSTANCE_OF  (r3 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.SidewaysShoveGestureDetector \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004a \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0040: CHECK_CAST  (r3 I:com.mapbox.android.gestures.SidewaysShoveGestureDetector) = (com.mapbox.android.gestures.SidewaysShoveGestureDetector) (r3 I:?[OBJECT, ARRAY]) \l0x0042: SGET  (r5 I:int) =  com.mapbox.android.gestures.R.dimen.mapbox_defaultShovePixelThreshold int \l0x0044: INVOKE  \l  (r3 I:com.mapbox.android.gestures.SidewaysShoveGestureDetector)\l  (r5 I:int)\l com.mapbox.android.gestures.SidewaysShoveGestureDetector.setPixelDeltaThresholdResource(int):void type: VIRTUAL \l0x0047: INVOKE  \l  (r3 I:com.mapbox.android.gestures.SidewaysShoveGestureDetector)\l  (r4 I:float)\l com.mapbox.android.gestures.SidewaysShoveGestureDetector.setMaxShoveAngle(float):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x004d: CHECK_CAST  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector) = (com.mapbox.android.gestures.MultiFingerTapGestureDetector) (r2 I:?[OBJECT, ARRAY]) \l0x004f: SGET  (r3 I:int) =  com.mapbox.android.gestures.R.dimen.mapbox_defaultMultiTapMovementThreshold int \l0x0051: INVOKE  \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l  (r3 I:int)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.setMultiFingerTapMovementThresholdResource(int):void type: VIRTUAL \l0x0054: CONST  (r3 I:?[long, double]) = (150(0x96, double:7.4E\-322) ?[long, double]) \l0x0056: INVOKE  \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l  (r3 I:long)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.setMultiFingerTapTimeThreshold(long):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.RotateGestureDetector \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: CHECK_CAST  (r1 I:com.mapbox.android.gestures.RotateGestureDetector) = (com.mapbox.android.gestures.RotateGestureDetector) (r1 I:?[OBJECT, ARRAY]) \l0x005f: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1098173645(0x4174cccd, float:15.3) ?[int, float, short, byte, char])\l \l0x0062: INVOKE  \l  (r1 I:com.mapbox.android.gestures.RotateGestureDetector)\l  (r2 I:float)\l com.mapbox.android.gestures.RotateGestureDetector.setAngleThreshold(float):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.mapbox.android.gestures.AndroidGesturesManager.initDefaultThresholds((r6 'this' I:com.mapbox.android.gestures.AndroidGesturesManager A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_1;
}

