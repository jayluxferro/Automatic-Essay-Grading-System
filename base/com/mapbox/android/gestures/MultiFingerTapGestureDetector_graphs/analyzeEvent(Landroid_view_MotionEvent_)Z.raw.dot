digraph "CFG forcom.mapbox.android.gestures.MultiFingerTapGestureDetector.analyzeEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:com.mapbox.android.gestures.MultiFingerGesture)\l  (r3 I:android.view.MotionEvent)\l com.mapbox.android.gestures.MultiFingerGesture.analyzeEvent(android.view.MotionEvent):boolean type: SUPER \l0x0003: INVOKE  (r3 I:int) = (r3 I:android.view.MotionEvent) android.view.MotionEvent.getActionMasked():int type: VIRTUAL \l0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6] t:[0x002d, 0x001f, 0x000c, 0x000c, 0x0010, 0x000d] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IPUT  \l  (r0 I:boolean)\l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.pointerLifted boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r3 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.pointerLifted boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IPUT  \l  (r0 I:boolean)\l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.invalidMovement boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r3 I:java.util.List) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.pointerIdList java.util.List \l0x0018: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x001c: IPUT  \l  (r3 I:int)\l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.lastPointersDownCount int \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IGET  (r3 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.invalidMovement boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0024 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IGET  (r3 I:java.util.HashMap) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.pointersDistanceMap java.util.HashMap \l0x0026: INVOKE  (r3 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l  (r3 I:java.util.HashMap)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.exceededMovementThreshold(java.util.HashMap):boolean type: VIRTUAL \l0x002a: IPUT  \l  (r3 I:boolean)\l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.invalidMovement boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x002e: INVOKE  (r3 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l  (r3 I:int)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.canExecute(int):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IGET  (r3 I:java.lang.Object) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.listener java.lang.Object \l0x0036: CHECK_CAST  (r3 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector$OnMultiFingerTapGestureListener) = (com.mapbox.android.gestures.MultiFingerTapGestureDetector$OnMultiFingerTapGestureListener) (r3 I:?[OBJECT, ARRAY]) \l0x0038: IGET  (r0 I:int) = \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.lastPointersDownCount int \l0x003a: INVOKE  (r1 I:boolean) = \l  (r3 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector$OnMultiFingerTapGestureListener)\l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l  (r0 I:int)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.OnMultiFingerTapGestureListener.onMultiFingerTap(com.mapbox.android.gestures.MultiFingerTapGestureDetector, int):boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: INVOKE  \l  (r2 I:com.mapbox.android.gestures.MultiFingerTapGestureDetector)\l com.mapbox.android.gestures.MultiFingerTapGestureDetector.reset():void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.mapbox.android.gestures.MultiFingerTapGestureDetector.analyzeEvent((r2 'this' I:com.mapbox.android.gestures.MultiFingerTapGestureDetector A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4;
Node_1 -> Node_8;
Node_1 -> Node_12;
Node_1 -> Node_17;
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_17[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

