digraph "CFG forcom.mapbox.android.gestures.StandardScaleGestureDetector.innerOnScaleBegin(Landroid\/view\/ScaleGestureDetector;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:float) = (r3 I:android.view.ScaleGestureDetector) android.view.ScaleGestureDetector.getCurrentSpan():float type: VIRTUAL \l0x0004: IPUT  \l  (r3 I:float)\l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.startSpan float \l0x0006: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: INVOKE  (r0 I:boolean) = \l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l  (r3 I:int)\l com.mapbox.android.gestures.StandardScaleGestureDetector.canExecute(int):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r0 I:android.view.VelocityTracker) =  android.view.VelocityTracker.obtain():android.view.VelocityTracker type: STATIC \l0x0011: IPUT  \l  (r0 I:android.view.VelocityTracker)\l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.velocityTracker android.view.VelocityTracker \l0x0013: IGET  (r0 I:float) = \l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.spanSinceStartThreshold float \l0x0015: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r0 I:java.lang.Object) = \l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.listener java.lang.Object \l0x001c: CHECK_CAST  (r0 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) = (com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) (r0 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r0 I:boolean) = \l  (r0 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener)\l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener.onScaleBegin(com.mapbox.android.gestures.StandardScaleGestureDetector):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  \l  (r2 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.gestureStarted():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: RETURN  (r3 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean com.mapbox.android.gestures.StandardScaleGestureDetector.innerOnScaleBegin((r2 'this' I:com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.ScaleGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

