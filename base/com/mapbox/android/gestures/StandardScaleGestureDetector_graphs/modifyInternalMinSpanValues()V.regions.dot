digraph "CFG forcom.mapbox.android.gestures.StandardScaleGestureDetector.modifyInternalMinSpanValues()V" {
subgraph cluster_Region_1375761184 {
label = "R(3:0|(1:2)(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Field java.lang.reflect.Field r0 = r5.scaleGestureDetector.getClass().getDeclaredField(\"mMinSpan\")\lr0.setAccessible(true)\l}"];
subgraph cluster_IfRegion_6771767 {
label = "IF [B:1:0x0014] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0014|if (android.os.Build.VERSION.SDK_INT \>= 24) goto L_0x0016\l}"];
subgraph cluster_Region_1905679114 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|r0.set(r5.scaleGestureDetector, java.lang.Integer.valueOf((int) r5.context.getResources().getDimension(com.mapbox.android.gestures.C0976R.dimen.mapbox_internalScaleMinSpan24)))\l}"];
}
subgraph cluster_Region_174190265 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x002d|r0.set(r5.scaleGestureDetector, java.lang.Integer.valueOf((int) r5.context.getResources().getDimension(com.mapbox.android.gestures.C0976R.dimen.mapbox_internalScaleMinSpan23)))\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0043|java.lang.reflect.Field java.lang.reflect.Field r0 = r5.scaleGestureDetector.getClass().getDeclaredField(\"mSpanSlop\")\lr0.setAccessible(true)\lr0.set(r5.scaleGestureDetector, java.lang.Integer.valueOf(android.view.ViewConfiguration.get(r5.context).getScaledTouchSlop()))\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0065}"];
MethodNode[shape=record,label="{void com.mapbox.android.gestures.StandardScaleGestureDetector.modifyInternalMinSpanValues((r5v0 'this' com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.NoSuchFieldException, java.lang.IllegalAccessException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

