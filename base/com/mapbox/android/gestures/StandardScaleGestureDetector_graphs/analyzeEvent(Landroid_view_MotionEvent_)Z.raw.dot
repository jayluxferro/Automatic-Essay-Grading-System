digraph "CFG forcom.mapbox.android.gestures.StandardScaleGestureDetector.analyzeEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r1 I:com.mapbox.android.gestures.ProgressiveGesture)\l  (r2 I:android.view.MotionEvent)\l com.mapbox.android.gestures.ProgressiveGesture.analyzeEvent(android.view.MotionEvent):boolean type: SUPER \l0x0003: IGET  (r0 I:android.view.ScaleGestureDetector) = \l  (r1 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.scaleGestureDetector android.view.ScaleGestureDetector \l0x0005: INVOKE  (r2 I:boolean) = \l  (r0 I:android.view.ScaleGestureDetector)\l  (r2 I:android.view.MotionEvent)\l android.view.ScaleGestureDetector.onTouchEvent(android.view.MotionEvent):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.mapbox.android.gestures.StandardScaleGestureDetector.analyzeEvent((r1 'this' I:com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

