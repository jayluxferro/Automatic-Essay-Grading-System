digraph "CFG forcom.mapbox.android.gestures.StandardScaleGestureDetector.innerOnScale(Landroid\/view\/ScaleGestureDetector;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.startSpan float \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r0 I:float) = (r5 I:android.view.ScaleGestureDetector) android.view.ScaleGestureDetector.getCurrentSpan():float type: VIRTUAL \l0x000b: IPUT  \l  (r0 I:float)\l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.startSpan float \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r0 I:float) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.startSpan float \l0x000f: INVOKE  (r1 I:float) = (r5 I:android.view.ScaleGestureDetector) android.view.ScaleGestureDetector.getCurrentSpan():float type: VIRTUAL \l0x0013: ARITH  (r0 I:float) = (r0 I:float) \- (r1 I:float) \l0x0014: INVOKE  (r0 I:float) = (r0 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0018: IPUT  \l  (r0 I:float)\l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.spanDeltaSinceStart float \l0x001a: INVOKE  (r0 I:boolean) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.isInProgress():boolean type: VIRTUAL \l0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: INVOKE  (r0 I:boolean) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l  (r2 I:int)\l com.mapbox.android.gestures.StandardScaleGestureDetector.canExecute(int):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IGET  (r0 I:float) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.spanDeltaSinceStart float \l0x002a: IGET  (r3 I:float) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.spanSinceStartThreshold float \l0x002c: CMP_L  (r0 I:int) = (r0 I:float), (r3 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IGET  (r5 I:java.lang.Object) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.listener java.lang.Object \l0x0032: CHECK_CAST  (r5 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) = (com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) (r5 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r5 I:boolean) = \l  (r5 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener)\l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener.onScaleBegin(com.mapbox.android.gestures.StandardScaleGestureDetector):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: INVOKE  \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.gestureStarted():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: RETURN  (r2 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: INVOKE  (r0 I:boolean) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.isInProgress():boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: INVOKE  (r5 I:float) = (r5 I:android.view.ScaleGestureDetector) android.view.ScaleGestureDetector.getScaleFactor():float type: VIRTUAL \l0x0049: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x004b: CMP_G  (r5 I:int) = (r5 I:float), (r0 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:19:0x0050 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004f|0x004f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.isScalingOut boolean \l0x0052: IGET  (r5 I:java.lang.Object) = \l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.listener java.lang.Object \l0x0054: CHECK_CAST  (r5 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) = (com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener) (r5 I:?[OBJECT, ARRAY]) \l0x0056: INVOKE  (r5 I:boolean) = \l  (r5 I:com.mapbox.android.gestures.StandardScaleGestureDetector$StandardOnScaleGestureListener)\l  (r4 I:com.mapbox.android.gestures.StandardScaleGestureDetector)\l com.mapbox.android.gestures.StandardScaleGestureDetector.StandardOnScaleGestureListener.onScale(com.mapbox.android.gestures.StandardScaleGestureDetector):boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|0x005a: RETURN  (r5 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|0x005b: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean com.mapbox.android.gestures.StandardScaleGestureDetector.innerOnScale((r4 'this' I:com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.ScaleGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

