digraph "CFG forcom.mapbox.android.gestures.StandardScaleGestureDetector.\<init\>(Landroid\/content\/Context;Lcom\/mapbox\/android\/gestures\/AndroidGesturesManager;)V" {
subgraph cluster_Region_544204751 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r2, r3)\lr1.scaleGestureDetector = new android.view.ScaleGestureDetector(r2, r1.innerListener)\l}"];
subgraph cluster_TryCatchRegion_1048940811 {
label = "Try: R(1:2) catches: R(0)";
node [shape=record,color=blue];
subgraph cluster_Region_118283427 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IllegalAccessException \| NoSuchFieldException \-\> 0x0016 \}\lSplitter:B:1:0x0013\l|modifyInternalMinSpanValues()     \/\/ Catch:\{ IllegalAccessException \| NoSuchFieldException \-\> 0x0016 \}\l}"];
}
subgraph cluster_Region_1428502786 {
label = "R(0) | ExcHandler: IllegalAccessException \| NoSuchFieldException (unused java.lang.Throwable)\l";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1428502786 {
label = "R(0) | ExcHandler: IllegalAccessException \| NoSuchFieldException (unused java.lang.Throwable)\l";
node [shape=record,color=blue];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0013|SYNTHETIC\lSplitter:B:1:0x0013\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException \| NoSuchFieldException (unused java.lang.Throwable)\lSplitter:B:1:0x0013\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.mapbox.android.gestures.StandardScaleGestureDetector.\<init\>((r1v0 'this' com.mapbox.android.gestures.StandardScaleGestureDetector A[IMMUTABLE_TYPE, THIS]), (r2v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.mapbox.android.gestures.AndroidGesturesManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_5;
}

