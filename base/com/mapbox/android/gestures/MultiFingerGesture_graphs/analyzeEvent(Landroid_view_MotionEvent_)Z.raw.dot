digraph "CFG forcom.mapbox.android.gestures.MultiFingerGesture.analyzeEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:android.view.MotionEvent) android.view.MotionEvent.getActionMasked():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = \l  (r4 I:com.mapbox.android.gestures.MultiFingerGesture)\l  (r0 I:int)\l com.mapbox.android.gestures.MultiFingerGesture.isMissingAction(int):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INSTANCE_OF  (r2 I:boolean) = (r4 I:?[OBJECT, ARRAY]) com.mapbox.android.gestures.ProgressiveGesture \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x000f: CHECK_CAST  (r2 I:com.mapbox.android.gestures.ProgressiveGesture) = (com.mapbox.android.gestures.ProgressiveGesture) (r2 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:boolean) = (r2 I:com.mapbox.android.gestures.ProgressiveGesture) com.mapbox.android.gestures.ProgressiveGesture.isInProgress():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: INVOKE  (r2 I:com.mapbox.android.gestures.ProgressiveGesture) com.mapbox.android.gestures.ProgressiveGesture.gestureStopped():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IGET  (r2 I:java.util.List\<java.lang.Integer\>) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.pointerIdList java.util.List \l0x001c: INVOKE  (r2 I:java.util.List) java.util.List.clear():void type: INTERFACE \l0x001f: IGET  (r2 I:java.util.HashMap\<com.mapbox.android.gestures.PointerDistancePair, com.mapbox.android.gestures.MultiFingerDistancesObject\>) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.pointersDistanceMap java.util.HashMap \l0x0021: INVOKE  (r2 I:java.util.HashMap) java.util.HashMap.clear():void type: VIRTUAL \l0x0024: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0026: IPUT  \l  (r2 I:long)\l  (r4 I:com.mapbox.android.gestures.MultiFingerGesture)\l com.mapbox.android.gestures.MultiFingerGesture.allowedActions long \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  \l  (r4 I:com.mapbox.android.gestures.MultiFingerGesture)\l  (r5 I:android.view.MotionEvent)\l com.mapbox.android.gestures.MultiFingerGesture.updatePointerList(android.view.MotionEvent):void type: DIRECT \l0x002f: INVOKE  (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.updateAllowedActions():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: CONST_STR  (r5 I:java.lang.String) =  \"Some MotionEvents were not passed to the library.\" \l0x0037: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0039: INVOKE  (r5 I:java.lang.String), (r0 I:java.lang.Object[]) timber.log.Timber.w(java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0066 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|0x0040: IGET  (r0 I:java.util.List\<java.lang.Integer\>) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.pointerIdList java.util.List \l0x0042: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0046: INVOKE  (r1 I:int) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.getRequiredPointersCount():int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:25:0x0066 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|0x004c: INVOKE  (r0 I:boolean) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.checkPressure():boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0066 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: INVOKE  (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.calculateDistances():void type: DIRECT \l0x0055: INVOKE  (r0 I:boolean) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.isSloppyGesture():boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0066 \l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|0x005b: INVOKE  (r5 I:android.graphics.PointF) = (r5 I:android.view.MotionEvent) com.mapbox.android.gestures.Utils.determineFocalPoint(android.view.MotionEvent):android.graphics.PointF type: STATIC \l0x005f: IPUT  \l  (r5 I:android.graphics.PointF)\l  (r4 I:com.mapbox.android.gestures.MultiFingerGesture)\l com.mapbox.android.gestures.MultiFingerGesture.focalPoint android.graphics.PointF \l0x0061: INVOKE  (r5 I:boolean) = (r4 I:com.mapbox.android.gestures.MultiFingerGesture) com.mapbox.android.gestures.MultiFingerGesture.analyzeMovement():boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0065|0x0065: RETURN  (r5 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|0x0066: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.mapbox.android.gestures.MultiFingerGesture.analyzeEvent((r4 'this' I:com.mapbox.android.gestures.MultiFingerGesture A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
}

