digraph "CFG forcom.mapbox.android.gestures.PointerDistancePair.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r3 instanceof com.mapbox.android.gestures.PointerDistancePair) == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|com.mapbox.android.gestures.PointerDistancePair r3 = (com.mapbox.android.gestures.PointerDistancePair) r3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (((java.lang.Integer) r2.first).equals(r3.first) == false) goto L_0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012}"];
Node_5 [shape=record,label="{5\:\ 0x001c|if (((java.lang.Integer) r2.second).equals(r3.second) != false) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e}"];
Node_7 [shape=record,label="{7\:\ 0x0028|if (((java.lang.Integer) r2.first).equals(r3.second) == false) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a}"];
Node_9 [shape=record,label="{9\:\ 0x0034|if (((java.lang.Integer) r2.second).equals(r3.first) == false) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean com.mapbox.android.gestures.PointerDistancePair.equals((r2v0 'this' com.mapbox.android.gestures.PointerDistancePair A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_11[style=dashed];
Node_9 -> Node_14;
}

