digraph "CFG forcom.mapbox.core.utils.TextUtils.formatWaypointNames([Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_1738390858 {
label = "R(3:0|(2:(1:5)(0)|6)|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_368119683 {
label = "LOOP:0: (2:(1:5)(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|if (r0 \< r2.length) goto L_0x0004\l}"];
subgraph cluster_Region_647690453 {
label = "R(2:(1:5)(0)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1536844051 {
label = "IF [B:4:0x0006] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|if (r2[r0] == null) goto L_0x0008\l}"];
subgraph cluster_Region_1365766343 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0008|r2[r0] = \"\"\l}"];
}
subgraph cluster_Region_1732228410 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x000c|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:6:0x000c\l|r0++\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0015|RETURN\l|return join(\";\", r2)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v3 int) binds: [B:0:0x0000, B:6:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:6:0x000c\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000c|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.lang.String com.mapbox.core.utils.TextUtils.formatWaypointNames((r2v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_11[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_6;
Node_11 -> Node_6;
}

