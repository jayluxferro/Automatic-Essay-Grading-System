digraph "CFG forcom.mapbox.core.utils.TextUtils.formatRadiuses([D)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r8 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: ARRAY_LENGTH  (r0 I:int) = (r8 I:?[]) \l0x0007: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: ARRAY_LENGTH  (r3 I:int) = (r8 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: AGET  (r3 I:?[long, double]) = (r8 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0010: CONST  (r5 I:?[long, double]) = \l  (9218868437227405312(0x7ff0000000000000, double:Infinity) ?[long, double])\l \l0x0012: CMP_L  (r3 I:int) = (r3 I:double), (r5 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: CONST_STR  (r3 I:java.lang.String) =  \"unlimited\" \l0x0018: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: SGET  (r3 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x001d: CONST_STR  (r4 I:java.lang.String) =  \"%s\" \l0x001f: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0022: AGET  (r6 I:?[long, double]) = (r8 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0024: INVOKE  (r6 I:java.lang.String) = (r6 I:double) com.mapbox.core.utils.TextUtils.formatCoordinate(double):java.lang.String type: STATIC \l0x0028: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x002a: INVOKE  (r3 I:java.lang.String) = \l  (r3 I:java.util.Locale)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x002e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: CONST_STR  (r8 I:java.lang.String) =  \";\" \l0x0035: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.CharSequence), (r0 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: RETURN  (r8 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: RETURN  (r8 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.mapbox.core.utils.TextUtils.formatRadiuses((r8 I:double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

