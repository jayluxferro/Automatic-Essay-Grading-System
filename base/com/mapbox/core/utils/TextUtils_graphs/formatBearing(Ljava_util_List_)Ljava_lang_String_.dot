digraph "CFG forcom.mapbox.core.utils.TextUtils.formatBearing(Ljava\/util\/List;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r10.isEmpty() == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|java.lang.String[] r0 = new java.lang.String[r10.size()]\lr2 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:3:0x0008, B:10:0x0056] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0010\-\>B:10:0x0056\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r2 \>= r10.size()) goto L_0x0059\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016}"];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r10.get(r2).length != 0) goto L_0x0024\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|r0[r2] = \"\"\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|java.util.Locale r3 = java.util.Locale.US\ljava.lang.Object[] r5 = new java.lang.Object[]\{formatCoordinate(r10.get(r2)[0].doubleValue()), formatCoordinate(r10.get(r2)[1].doubleValue())\}\lr0[r2] = java.lang.String.format(r3, \"%s,%s\", r5)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|LOOP_END\lLOOP:0: B:4:0x0010\-\>B:10:0x0056\l|int r2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0059}"];
Node_12 [shape=record,label="{12\:\ 0x005f|RETURN\l|return join(\";\", r0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.lang.String com.mapbox.core.utils.TextUtils.formatBearing((r10v0 java.util.List\<java.lang.Double[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, [, Ljava\/lang\/Double;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_15;
Node_9 -> Node_14;
Node_10 -> Node_4;
Node_11 -> Node_12;
Node_13 -> Node_11;
Node_14 -> Node_10;
Node_15 -> Node_10;
}

