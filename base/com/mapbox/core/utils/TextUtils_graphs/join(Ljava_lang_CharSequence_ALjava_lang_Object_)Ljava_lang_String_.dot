digraph "CFG forcom.mapbox.core.utils.TextUtils.join(Ljava\/lang\/CharSequence;[Ljava\/lang\/Object;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 == null) goto L_?\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r7.length \>= 1) goto L_0x0007\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lint r2 = r7.length\lr1 = 0\lr4 = true\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_START\lPHI: r1 r4 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:3:0x0007, B:9:0x001b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean) binds: [B:3:0x0007, B:9:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0010\-\>B:9:0x001b\l|if (r1 \>= r2) goto L_0x0021\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|r5 = r7[r1]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (r4 == false) goto L_0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|r4 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|r0.append(r6)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|LOOP_END\lPHI: r4 \l  PHI: (r4v2 boolean) = (r4v1 boolean), (r4v3 boolean) binds: [B:13:0x001b, B:14:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0010\-\>B:9:0x001b\l|r0.append(r5)\lint r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\l|return r0.toString()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static java.lang.String com.mapbox.core.utils.TextUtils.join((r6v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_16[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_14;
Node_8 -> Node_13;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_12 -> Node_10;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

