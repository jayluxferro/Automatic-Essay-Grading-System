digraph "CFG forcom.mapbox.core.utils.TextUtils.formatApproaches([Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: ARRAY_LENGTH  (r1 I:int) = (r3 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x000a: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000f: CONST_STR  (r2 I:java.lang.String) =  \"unrestricted\" \l0x0011: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0019: CONST_STR  (r2 I:java.lang.String) =  \"curb\" \l0x001b: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0023: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: RETURN  (r3 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: CONST_STR  (r0 I:java.lang.String) =  \";\" \l0x0030: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.CharSequence), (r3 I:java.lang.Object[]) com.mapbox.core.utils.TextUtils.join(java.lang.CharSequence, java.lang.Object[]):java.lang.String type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.mapbox.core.utils.TextUtils.formatApproaches((r3 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_1;
Node_15 -> Node_16;
}

