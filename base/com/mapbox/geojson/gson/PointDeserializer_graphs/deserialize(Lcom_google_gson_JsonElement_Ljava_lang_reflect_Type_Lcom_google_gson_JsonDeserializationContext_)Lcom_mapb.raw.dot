digraph "CFG forcom.mapbox.geojson.gson.PointDeserializer.deserialize(Lcom\/google\/gson\/JsonElement;Ljava\/lang\/reflect\/Type;Lcom\/google\/gson\/JsonDeserializationContext;)Lcom\/mapbox\/geojson\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r8 I:boolean) = (r7 I:com.google.gson.JsonElement) com.google.gson.JsonElement.isJsonObject():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r7 I:com.google.gson.JsonObject) = (r7 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsJsonObject():com.google.gson.JsonObject type: VIRTUAL \l0x000a: CONST_STR  (r8 I:java.lang.String) =  \"coordinates\" \l0x000c: INVOKE  (r7 I:com.google.gson.JsonArray) = (r7 I:com.google.gson.JsonObject), (r8 I:java.lang.String) com.google.gson.JsonObject.getAsJsonArray(java.lang.String):com.google.gson.JsonArray type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r7 I:com.google.gson.JsonArray) = (r7 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsJsonArray():com.google.gson.JsonArray type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  (r8 I:com.google.gson.JsonElement) = (r7 I:com.google.gson.JsonArray), (r8 I:int) com.google.gson.JsonArray.get(int):com.google.gson.JsonElement type: VIRTUAL \l0x001a: INVOKE  (r0 I:double) = (r8 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsDouble():double type: VIRTUAL \l0x001e: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001f: INVOKE  (r8 I:com.google.gson.JsonElement) = (r7 I:com.google.gson.JsonArray), (r8 I:int) com.google.gson.JsonArray.get(int):com.google.gson.JsonElement type: VIRTUAL \l0x0023: INVOKE  (r2 I:double) = (r8 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsDouble():double type: VIRTUAL \l0x0027: INVOKE  (r8 I:int) = (r7 I:com.google.gson.JsonArray) com.google.gson.JsonArray.size():int type: VIRTUAL \l0x002b: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IF  (r8 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char])  \-\> B:8:0x003b \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: INVOKE  (r7 I:com.google.gson.JsonElement) = (r7 I:com.google.gson.JsonArray), (r9 I:int) com.google.gson.JsonArray.get(int):com.google.gson.JsonElement type: VIRTUAL \l0x0032: INVOKE  (r4 I:double) = (r7 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsDouble():double type: VIRTUAL \l0x0036: INVOKE  (r7 I:com.mapbox.geojson.Point) = (r0 I:double), (r2 I:double), (r4 I:double) com.mapbox.geojson.Point.fromLngLat(double, double, double):com.mapbox.geojson.Point type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: RETURN  (r7 I:com.mapbox.geojson.Point) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: INVOKE  (r7 I:com.mapbox.geojson.Point) = (r0 I:double), (r2 I:double) com.mapbox.geojson.Point.fromLngLat(double, double):com.mapbox.geojson.Point type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: RETURN  (r7 I:com.mapbox.geojson.Point) \l}"];
MethodNode[shape=record,label="{public com.mapbox.geojson.Point com.mapbox.geojson.gson.PointDeserializer.deserialize((r6 'this' I:com.mapbox.geojson.gson.PointDeserializer A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.gson.JsonElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.gson.JsonDeserializationContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

