digraph "CFG forcom.mapbox.geojson.Polygon.isLinearRing(Lcom\/mapbox\/geojson\/LineString;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.List) = (r3 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x0004: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:7:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r0 I:java.util.List) = (r3 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r0 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r0 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r1 I:java.util.List) = (r3 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x001a: INVOKE  (r3 I:java.util.List) = (r3 I:com.mapbox.geojson.LineString) com.mapbox.geojson.LineString.coordinates():java.util.List type: VIRTUAL \l0x001e: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0022: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0023: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int) \l0x0024: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0028: INVOKE  (r3 I:boolean) = (r0 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: RETURN  (r2 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: NEW_INSTANCE  (r3 I:com.mapbox.geojson.exception.GeoJsonException) =  com.mapbox.geojson.exception.GeoJsonException \l0x0031: CONST_STR  (r0 I:java.lang.String) =  \"LinearRings require first and last coordinate to be identical.\" \l0x0033: INVOKE  \l  (r3 I:com.mapbox.geojson.exception.GeoJsonException)\l  (r0 I:java.lang.String)\l com.mapbox.geojson.exception.GeoJsonException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: NEW_INSTANCE  (r3 I:com.mapbox.geojson.exception.GeoJsonException) =  com.mapbox.geojson.exception.GeoJsonException \l0x0039: CONST_STR  (r0 I:java.lang.String) =  \"LinearRings need to be made up of 4 or more coordinates.\" \l0x003b: INVOKE  \l  (r3 I:com.mapbox.geojson.exception.GeoJsonException)\l  (r0 I:java.lang.String)\l com.mapbox.geojson.exception.GeoJsonException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static boolean com.mapbox.geojson.Polygon.isLinearRing((r3 I:com.mapbox.geojson.LineString A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

