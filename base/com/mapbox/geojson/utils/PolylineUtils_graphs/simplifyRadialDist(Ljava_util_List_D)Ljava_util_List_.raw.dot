digraph "CFG forcom.mapbox.geojson.utils.PolylineUtils.simplifyRadialDist(Ljava\/util\/List;D)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r0 I:java.lang.Object) = (r7 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0005: CHECK_CAST  (r0 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r0 I:?[OBJECT, ARRAY]) \l0x0007: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0009: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000c: INVOKE  (r1 I:java.util.ArrayList), (r0 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x000f: INVOKE  (r2 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: INVOKE  (r4 I:java.lang.Object) = (r7 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001b: CHECK_CAST  (r4 I:com.mapbox.geojson.Point) = (com.mapbox.geojson.Point) (r4 I:?[OBJECT, ARRAY]) \l0x001d: INVOKE  (r5 I:double) = \l  (r4 I:com.mapbox.geojson.Point)\l  (r0 I:com.mapbox.geojson.Point)\l com.mapbox.geojson.utils.PolylineUtils.getSqDist(com.mapbox.geojson.Point, com.mapbox.geojson.Point):double type: STATIC \l0x0021: CMP_L  (r5 I:int) = (r5 I:double), (r8 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0029 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: INVOKE  (r1 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0028: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r7 I:boolean) = (r0 I:java.lang.Object), (r4 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: INVOKE  (r1 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: RETURN  (r1 I:java.util.List\<com.mapbox.geojson.Point\>) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<com.mapbox.geojson.Point\> com.mapbox.geojson.utils.PolylineUtils.simplifyRadialDist((r7 I:java.util.List\<com.mapbox.geojson.Point\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;D), Ljava\/util\/List\<, Lcom\/mapbox\/geojson\/Point;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

