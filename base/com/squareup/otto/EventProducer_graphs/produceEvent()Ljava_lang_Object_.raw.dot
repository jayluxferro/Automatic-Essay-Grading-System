digraph "CFG forcom.squareup.otto.EventProducer.produceEvent()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:com.squareup.otto.EventProducer) com.squareup.otto.EventProducer.valid boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0004\l|0x0004: IGET  (r0 I:java.lang.reflect.Method) = (r3 I:com.squareup.otto.EventProducer) com.squareup.otto.EventProducer.method java.lang.reflect.Method A[Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}, TRY_ENTER]\l0x0006: IGET  (r1 I:java.lang.Object) = (r3 I:com.squareup.otto.EventProducer) com.squareup.otto.EventProducer.target java.lang.Object A[Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}]\l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}]\l0x0009: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}]\l0x000b: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}]\l0x000e: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r0 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler: InvocationTargetException null\lSplitter:B:2:0x0004\l|0x0010: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.Throwable) = (r0 I:java.lang.reflect.InvocationTargetException) java.lang.reflect.InvocationTargetException.getCause():java.lang.Throwable type: VIRTUAL \l0x0015: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.Error \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: INVOKE  (r0 I:java.lang.Throwable) = (r0 I:java.lang.reflect.InvocationTargetException) java.lang.reflect.InvocationTargetException.getCause():java.lang.Throwable type: VIRTUAL \l0x001d: CHECK_CAST  (r0 I:java.lang.Error) = (java.lang.Error) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|ExcHandler: IllegalAccessException null\lSplitter:B:2:0x0004\l|0x0021: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0024: INVOKE  (r1 I:java.lang.AssertionError), (r0 I:java.lang.Object) java.lang.AssertionError.\<init\>(java.lang.Object):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002f: INVOKE  (r2 I:java.lang.String) = (r3 I:com.squareup.otto.EventProducer) com.squareup.otto.EventProducer.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: CONST_STR  (r2 I:java.lang.String) =  \" has been invalidated and can no longer produce events.\" \l0x0038: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.squareup.otto.EventProducer.produceEvent((r3 'this' I:com.squareup.otto.EventProducer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

