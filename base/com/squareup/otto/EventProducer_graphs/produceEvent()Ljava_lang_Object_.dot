digraph "CFG forcom.squareup.otto.EventProducer.produceEvent()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.valid == false) goto L_0x0028\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ IllegalAccessException \-\> 0x0021, InvocationTargetException \-\> 0x0010 \}\lSplitter:B:2:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|RETURN\l|return r3.method.invoke(r3.target, new java.lang.Object[0])\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler: InvocationTargetException (r0v3 'e' java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0004\l|java.lang.reflect.InvocationTargetException r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if ((r0.getCause() instanceof java.lang.Error) == false) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019}"];
Node_9 [shape=record,label="{9\:\ 0x001f|throw ((java.lang.Error) r0.getCause())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|throw r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|ExcHandler: IllegalAccessException (r0v2 'e' java.lang.IllegalAccessException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0004\l|java.lang.IllegalAccessException r0 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022}"];
Node_13 [shape=record,label="{13\:\ 0x0027|throw new java.lang.AssertionError(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(toString())\lr1.append(\" has been invalidated and can no longer produce events.\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|throw new java.lang.IllegalStateException(r1.toString())\l}"];
MethodNode[shape=record,label="{public java.lang.Object com.squareup.otto.EventProducer.produceEvent((r3v0 'this' com.squareup.otto.EventProducer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.reflect.InvocationTargetException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

