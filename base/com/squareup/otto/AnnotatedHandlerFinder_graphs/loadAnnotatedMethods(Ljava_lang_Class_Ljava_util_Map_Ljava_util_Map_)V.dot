digraph "CFG forcom.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods(Ljava\/lang\/Class;Ljava\/util\/Map;Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.reflect.Method[] r0 = r8.getDeclaredMethods()\lint r1 = r0.length\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:49:0x01b0] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:49:0x01b0\l|if (r3 \>= r1) goto L_0x01b4\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r4 = r0[r3]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r4.isBridge() == false) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r4.isAnnotationPresent(com.squareup.otto.Subscribe.class) == false) goto L_0x00b4\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|java.lang.Class[] r5 = r4.getParameterTypes()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r5.length != 1) goto L_0x008f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|r5 = r5[0]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|if (r5.isInterface() != false) goto L_0x006b\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b}"];
Node_11 [shape=record,label="{11\:\ 0x0030|if ((1 & r4.getModifiers()) == 0) goto L_0x0047\l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|java.util.Set r6 = r10.get(r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|if (r6 != null) goto L_0x0042\l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|java.util.HashSet r6 = new java.util.HashSet()\lr10.put(r5, r6)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|PHI: r6 \l  PHI: (r6v6 java.util.Set) = (r6v5 java.util.Set), (r6v7 java.util.Set) binds: [B:13:0x0038, B:14:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|r6.add(r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Subscribe annotation on \")\lr9.append(r5)\lr9.append(\" but is not 'public'.\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x006a|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x006b|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Subscribe annotation on \")\lr9.append(r5)\lr9.append(\" which is an interface.  Subscription must be on a concrete class type.\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x008e|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_20 [shape=record,label="{20\:\ 0x008f|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Subscribe annotation but requires \")\lr9.append(r5.length)\lr9.append(\" arguments.  Methods must require a single argument.\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b3|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b4}"];
Node_23 [shape=record,label="{23\:\ 0x00ba|if (r4.isAnnotationPresent(com.squareup.otto.Produce.class) == false) goto L_0x01b0\l}"];
Node_24 [shape=record,label="{24\:\ 0x00bc|java.lang.Class[] r5 = r4.getParameterTypes()\l}"];
Node_25 [shape=record,label="{25\:\ 0x00c1|if (r5.length != 0) goto L_0x018b\l}"];
Node_26 [shape=record,label="{26\:\ 0x00c3}"];
Node_27 [shape=record,label="{27\:\ 0x00c9|if (r4.getReturnType() == java.lang.Void.class) goto L_0x016f\l}"];
Node_28 [shape=record,label="{28\:\ 0x00cb|java.lang.Class r5 = r4.getReturnType()\l}"];
Node_29 [shape=record,label="{29\:\ 0x00d3|if (r5.isInterface() != false) goto L_0x014b\l}"];
Node_30 [shape=record,label="{30\:\ 0x00d5}"];
Node_31 [shape=record,label="{31\:\ 0x00db|if (r5.equals(java.lang.Void.TYPE) != false) goto L_0x012f\l}"];
Node_32 [shape=record,label="{32\:\ 0x00dd}"];
Node_33 [shape=record,label="{33\:\ 0x00e2|if ((1 & r4.getModifiers()) == 0) goto L_0x010b\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e4}"];
Node_35 [shape=record,label="{35\:\ 0x00e8|if (r9.containsKey(r5) != false) goto L_0x00ef\l}"];
Node_36 [shape=record,label="{36\:\ 0x00ea|r9.put(r5, r4)\l}"];
Node_37 [shape=record,label="{37\:\ 0x00ef|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Producer for type \")\lr9.append(r5)\lr9.append(\" has already been registered.\")\l}"];
Node_38 [shape=record,label="{38\:\ 0x010a|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_39 [shape=record,label="{39\:\ 0x010b|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Produce annotation on \")\lr9.append(r5)\lr9.append(\" but is not 'public'.\")\l}"];
Node_40 [shape=record,label="{40\:\ 0x012e|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_41 [shape=record,label="{41\:\ 0x012f|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Produce annotation but has no return type.\")\l}"];
Node_42 [shape=record,label="{42\:\ 0x014a|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_43 [shape=record,label="{43\:\ 0x014b|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has @Produce annotation on \")\lr9.append(r5)\lr9.append(\" which is an interface.  Producers must return a concrete class type.\")\l}"];
Node_44 [shape=record,label="{44\:\ 0x016e|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_45 [shape=record,label="{45\:\ 0x016f|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\" has a return type of void.  Must declare a non\-void type.\")\l}"];
Node_46 [shape=record,label="{46\:\ 0x018a|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_47 [shape=record,label="{47\:\ 0x018b|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Method \")\lr9.append(r4)\lr9.append(\"has @Produce annotation but requires \")\lr9.append(r5.length)\lr9.append(\" arguments.  Methods must require zero arguments.\")\l}"];
Node_48 [shape=record,label="{48\:\ 0x01af|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_49 [shape=record,label="{49\:\ 0x01b0|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:49:0x01b0\l|int r3 = r3 + 1\l}"];
Node_50 [shape=record,label="{50\:\ 0x01b4|PRODUCERS_CACHE.put(r8, r9)\lSUBSCRIBERS_CACHE.put(r8, r10)\l}"];
Node_51 [shape=record,label="{51\:\ 0x01be|RETURN\l|return\l}"];
Node_52 [shape=record,label="{52\:\ 0x018b|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x01b4|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x016f|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x014b|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x012f|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x008f|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x010b|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x00ef|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x006b|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0047|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x01b0|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x01b0|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x01b0|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x01b0|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods((r8v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.util.Map\<java.lang.Class\<?\>, java.lang.reflect.Method\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.util.Map\<java.lang.Class\<?\>, java.util.Set\<java.lang.reflect.Method\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/reflect\/Method;, \>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Set\<, Ljava\/lang\/reflect\/Method;, \>;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_53;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_65[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_22;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_57;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_60;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_61;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_62;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_63;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_52;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_54;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_55;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_56;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_58;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_59;
Node_36 -> Node_64;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_47 -> Node_48;
Node_49 -> Node_1;
Node_50 -> Node_51;
Node_52 -> Node_47;
Node_53 -> Node_50;
Node_54 -> Node_45;
Node_55 -> Node_43;
Node_56 -> Node_41;
Node_57 -> Node_20;
Node_58 -> Node_39;
Node_59 -> Node_37;
Node_60 -> Node_18;
Node_61 -> Node_16;
Node_62 -> Node_49;
Node_63 -> Node_49;
Node_64 -> Node_49;
Node_65 -> Node_49;
}

