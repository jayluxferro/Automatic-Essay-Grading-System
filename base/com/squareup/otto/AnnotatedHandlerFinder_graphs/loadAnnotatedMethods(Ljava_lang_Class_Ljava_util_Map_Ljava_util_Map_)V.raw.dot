digraph "CFG forcom.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods(Ljava\/lang\/Class;Ljava\/util\/Map;Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.reflect.Method[]) = (r8 I:java.lang.Class) java.lang.Class.getDeclaredMethods():java.lang.reflect.Method[] type: VIRTUAL \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:51:0x01b4 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x000b: INVOKE  (r5 I:boolean) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.isBridge():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST_CLASS  (r5 I:java.lang.Class\<com.squareup.otto.Subscribe\>) =  com.squareup.otto.Subscribe.class \l0x0015: INVOKE  (r5 I:boolean) = (r4 I:java.lang.reflect.Method), (r5 I:java.lang.Class) java.lang.reflect.Method.isAnnotationPresent(java.lang.Class):boolean type: VIRTUAL \l0x0019: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00b4 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r5 I:java.lang.Class[]) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getParameterTypes():java.lang.Class[] type: VIRTUAL \l0x0020: ARRAY_LENGTH  (r7 I:int) = (r5 I:?[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0025: INVOKE  (r7 I:boolean) = (r5 I:java.lang.Class) java.lang.Class.isInterface():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x006b \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: INVOKE  (r7 I:int) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getModifiers():int type: VIRTUAL \l0x002f: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (r7 I:?[int, boolean, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0047 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: INVOKE  (r6 I:java.lang.Object) = (r10 I:java.util.Map), (r5 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0036: CHECK_CAST  (r6 I:java.util.Set) = (java.util.Set) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0042 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: NEW_INSTANCE  (r6 I:java.util.HashSet) =  java.util.HashSet \l0x003c: INVOKE  (r6 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x003f: INVOKE  \l  (r10 I:java.util.Map)\l  (r5 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: INVOKE  (r6 I:java.util.Set), (r4 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0049: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004b: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004e: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0050: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0056: CONST_STR  (r10 I:java.lang.String) =  \" has @Subscribe annotation on \" \l0x0058: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x005e: CONST_STR  (r10 I:java.lang.String) =  \" but is not 'public'.\" \l0x0060: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0063: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0067: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x006a|0x006a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006b|0x006b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0072: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0074: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0077: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x007a: CONST_STR  (r10 I:java.lang.String) =  \" has @Subscribe annotation on \" \l0x007c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007f: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0082: CONST_STR  (r10 I:java.lang.String) =  \" which is an interface.  Subscription must be on a concrete class type.\" \l0x0084: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008b: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x008e|0x008e: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x008f|0x008f: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0091: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0093: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0096: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0098: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009b: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x009e: CONST_STR  (r10 I:java.lang.String) =  \" has @Subscribe annotation but requires \" \l0x00a0: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a3: ARRAY_LENGTH  (r10 I:int) = (r5 I:?[]) \l0x00a4: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a7: CONST_STR  (r10 I:java.lang.String) =  \" arguments.  Methods must require a single argument.\" \l0x00a9: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ac: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b0: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b3|0x00b3: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b4|0x00b4: CONST_CLASS  (r5 I:java.lang.Class\<com.squareup.otto.Produce\>) =  com.squareup.otto.Produce.class \l0x00b6: INVOKE  (r5 I:boolean) = (r4 I:java.lang.reflect.Method), (r5 I:java.lang.Class) java.lang.reflect.Method.isAnnotationPresent(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ba|0x00ba: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x01b0 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00bc|0x00bc: INVOKE  (r5 I:java.lang.Class[]) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getParameterTypes():java.lang.Class[] type: VIRTUAL \l0x00c0: ARRAY_LENGTH  (r7 I:int) = (r5 I:?[]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00c1|0x00c1: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x018b \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c3|0x00c3: INVOKE  (r5 I:java.lang.Class) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getReturnType():java.lang.Class type: VIRTUAL \l0x00c7: CONST_CLASS  (r7 I:java.lang.Class\<java.lang.Void\>) =  java.lang.Void.class \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c9|0x00c9: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x016f \l}"];
Node_29 [shape=record,label="{29\:\ 0x00cb|0x00cb: INVOKE  (r5 I:java.lang.Class) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getReturnType():java.lang.Class type: VIRTUAL \l0x00cf: INVOKE  (r7 I:boolean) = (r5 I:java.lang.Class) java.lang.Class.isInterface():boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x00d3|0x00d3: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x014b \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d5|0x00d5: SGET  (r7 I:java.lang.Class) =  java.lang.Void.TYPE java.lang.Class \l0x00d7: INVOKE  (r7 I:boolean) = (r5 I:java.lang.Object), (r7 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x00db|0x00db: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x012f \l}"];
Node_33 [shape=record,label="{33\:\ 0x00dd|0x00dd: INVOKE  (r7 I:int) = (r4 I:java.lang.reflect.Method) java.lang.reflect.Method.getModifiers():int type: VIRTUAL \l0x00e1: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (r7 I:?[int, boolean, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00e2|0x00e2: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x010b \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e4|0x00e4: INVOKE  (r6 I:boolean) = (r9 I:java.util.Map), (r5 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_36 [shape=record,label="{36\:\ 0x00e8|0x00e8: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00ef \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ea|0x00ea: INVOKE  \l  (r9 I:java.util.Map)\l  (r5 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_38 [shape=record,label="{38\:\ 0x00ef|0x00ef: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00f1: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00f3: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00f6: CONST_STR  (r10 I:java.lang.String) =  \"Producer for type \" \l0x00f8: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00fb: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00fe: CONST_STR  (r10 I:java.lang.String) =  \" has already been registered.\" \l0x0100: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0103: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0107: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_39 [shape=record,label="{39\:\ 0x010a|0x010a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ 0x010b|0x010b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x010d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x010f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0112: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0114: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0117: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x011a: CONST_STR  (r10 I:java.lang.String) =  \" has @Produce annotation on \" \l0x011c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x011f: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0122: CONST_STR  (r10 I:java.lang.String) =  \" but is not 'public'.\" \l0x0124: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0127: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x012b: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x012e|0x012e: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x012f|0x012f: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0131: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0133: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0136: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0138: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x013b: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x013e: CONST_STR  (r10 I:java.lang.String) =  \" has @Produce annotation but has no return type.\" \l0x0140: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0143: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0147: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x014a|0x014a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x014b|0x014b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x014d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x014f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0152: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0154: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0157: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x015a: CONST_STR  (r10 I:java.lang.String) =  \" has @Produce annotation on \" \l0x015c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x015f: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0162: CONST_STR  (r10 I:java.lang.String) =  \" which is an interface.  Producers must return a concrete class type.\" \l0x0164: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0167: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x016b: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x016e|0x016e: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ 0x016f|0x016f: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0171: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0173: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0176: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0178: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x017b: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x017e: CONST_STR  (r10 I:java.lang.String) =  \" has a return type of void.  Must declare a non\-void type.\" \l0x0180: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0183: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0187: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_47 [shape=record,label="{47\:\ 0x018a|0x018a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_48 [shape=record,label="{48\:\ 0x018b|0x018b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x018d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x018f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0192: CONST_STR  (r10 I:java.lang.String) =  \"Method \" \l0x0194: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0197: INVOKE  (r9 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x019a: CONST_STR  (r10 I:java.lang.String) =  \"has @Produce annotation but requires \" \l0x019c: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x019f: ARRAY_LENGTH  (r10 I:int) = (r5 I:?[]) \l0x01a0: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x01a3: CONST_STR  (r10 I:java.lang.String) =  \" arguments.  Methods must require zero arguments.\" \l0x01a5: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01a8: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x01ac: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_49 [shape=record,label="{49\:\ 0x01af|0x01af: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_50 [shape=record,label="{50\:\ 0x01b0|0x01b0: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_51 [shape=record,label="{51\:\ 0x01b4|0x01b4: SGET  (r0 I:java.util.concurrent.ConcurrentMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Class\<?\>, java.lang.reflect.Method\>\>) =  com.squareup.otto.AnnotatedHandlerFinder.PRODUCERS_CACHE java.util.concurrent.ConcurrentMap \l0x01b6: INVOKE  \l  (r0 I:java.util.concurrent.ConcurrentMap)\l  (r8 I:java.lang.Object)\l  (r9 I:java.lang.Object)\l java.util.concurrent.ConcurrentMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x01b9: SGET  (r9 I:java.util.concurrent.ConcurrentMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Class\<?\>, java.util.Set\<java.lang.reflect.Method\>\>\>) =  com.squareup.otto.AnnotatedHandlerFinder.SUBSCRIBERS_CACHE java.util.concurrent.ConcurrentMap \l0x01bb: INVOKE  \l  (r9 I:java.util.concurrent.ConcurrentMap)\l  (r8 I:java.lang.Object)\l  (r10 I:java.lang.Object)\l java.util.concurrent.ConcurrentMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_52 [shape=record,label="{52\:\ 0x01be|0x01be: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods((r8 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.Map\<java.lang.Class\<?\>, java.lang.reflect.Method\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.Map\<java.lang.Class\<?\>, java.util.Set\<java.lang.reflect.Method\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/reflect\/Method;, \>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Set\<, Ljava\/lang\/reflect\/Method;, \>;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_51;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_50[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_21;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_50;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_50;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_48;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_46;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_44;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_42;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_50;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_46 -> Node_47;
Node_48 -> Node_49;
Node_50 -> Node_1;
Node_51 -> Node_52;
}

