digraph "CFG forcom.squareup.otto.AnnotatedHandlerFinder.findAllProducers(Ljava\/lang\/Object;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: NEW_INSTANCE  (r1 I:java.util.HashMap) =  java.util.HashMap \l0x0006: INVOKE  (r1 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0009: SGET  (r2 I:java.util.concurrent.ConcurrentMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Class\<?\>, java.lang.reflect.Method\>\>) =  com.squareup.otto.AnnotatedHandlerFinder.PRODUCERS_CACHE java.util.concurrent.ConcurrentMap \l0x000b: INVOKE  (r2 I:java.lang.Object) = \l  (r2 I:java.util.concurrent.ConcurrentMap)\l  (r0 I:java.lang.Object)\l java.util.concurrent.ConcurrentMap.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r2 I:java.util.Map) = (java.util.Map) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: NEW_INSTANCE  (r2 I:java.util.HashMap) =  java.util.HashMap \l0x0015: INVOKE  (r2 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0018: INVOKE  (r0 I:java.lang.Class), (r2 I:java.util.Map) com.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedProducerMethods(java.lang.Class, java.util.Map):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r0 I:boolean) = (r2 I:java.util.Map) java.util.Map.isEmpty():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0048 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: INVOKE  (r0 I:java.util.Set) = (r2 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0025: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0048 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:?[OBJECT, ARRAY]) \l0x0035: NEW_INSTANCE  (r3 I:com.squareup.otto.EventProducer) =  com.squareup.otto.EventProducer \l0x0037: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r4 I:java.lang.reflect.Method) = (java.lang.reflect.Method) (r4 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r3 I:com.squareup.otto.EventProducer)\l  (r5 I:java.lang.Object)\l  (r4 I:java.lang.reflect.Method)\l com.squareup.otto.EventProducer.\<init\>(java.lang.Object, java.lang.reflect.Method):void type: DIRECT \l0x0040: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0044: INVOKE  \l  (r1 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: RETURN  \l  (r1 I:java.util.Map\<java.lang.Class\<?\>, com.squareup.otto.EventProducer\>)\l \l}"];
MethodNode[shape=record,label="{static java.util.Map\<java.lang.Class\<?\>, com.squareup.otto.EventProducer\> com.squareup.otto.AnnotatedHandlerFinder.findAllProducers((r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Object;, ), Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Lcom\/squareup\/otto\/EventProducer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
}

