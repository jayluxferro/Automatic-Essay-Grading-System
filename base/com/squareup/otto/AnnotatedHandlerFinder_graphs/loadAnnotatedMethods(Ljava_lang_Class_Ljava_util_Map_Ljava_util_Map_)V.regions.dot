digraph "CFG forcom.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods(Ljava\/lang\/Class;Ljava\/util\/Map;Ljava\/util\/Map;)V" {
subgraph cluster_Region_193644279 {
label = "R(3:0|(3:2|(1:(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63)))(0)|49)|50)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r1 = r8.getDeclaredMethods().length\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1075898833 {
label = "LOOP:0: (3:2|(1:(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63)))(0)|49)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:49:0x01b0] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:49:0x01b0\l|if (r3 \< r1) goto L_0x0009\l}"];
subgraph cluster_Region_1536990003 {
label = "R(3:2|(1:(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63)))(0)|49)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|r4 = r0[r3]\l}"];
subgraph cluster_IfRegion_731436830 {
label = "IF [B:3:0x000f] THEN: R(1:(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63))) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r4.isBridge() == false) goto L_0x0013\l}"];
subgraph cluster_Region_1821495637 {
label = "R(1:(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_909802878 {
label = "IF [B:5:0x001a] THEN: R(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21)) ELSE: R(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r4.isAnnotationPresent(com.squareup.otto.Subscribe.class) == true) goto L_0x001c\l}"];
subgraph cluster_Region_1480207360 {
label = "R(2:6|(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))(2:20|21))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001c|java.lang.Class[] java.lang.Class[] r5 = r4.getParameterTypes()\l}"];
subgraph cluster_IfRegion_1241271148 {
label = "IF [B:7:0x0021] THEN: R(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17))) ELSE: R(2:20|21)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r5.length == 1) goto L_0x0023\l}"];
subgraph cluster_Region_477609064 {
label = "R(2:8|(2:18|19)(1:(3:12|(1:14)|15)(2:16|17)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0023|java.lang.Class r5 = r5[0]\l}"];
subgraph cluster_IfRegion_987213411 {
label = "IF [B:9:0x0029] THEN: R(2:18|19) ELSE: R(1:(3:12|(1:14)|15)(2:16|17))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0029|if (r5.isInterface() != false) goto L_0x006b\l}"];
subgraph cluster_Region_299578750 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x006b}"];
Node_19 [shape=record,label="{19\:\ 0x008e|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Subscribe annotation on \" + r5 + \" which is an interface.  Subscription must be on a concrete class type.\")\l}"];
}
subgraph cluster_Region_1905488905 {
label = "R(1:(3:12|(1:14)|15)(2:16|17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_475950338 {
label = "IF [B:11:0x0030] THEN: R(3:12|(1:14)|15) ELSE: R(2:16|17) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0030|if ((1 & r4.getModifiers()) != 0) goto L_0x0032\l}"];
subgraph cluster_Region_820928465 {
label = "R(3:12|(1:14)|15)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0032|java.util.Set java.util.Set r6 = r10.get(r5)\l}"];
subgraph cluster_IfRegion_1788161375 {
label = "IF [B:13:0x0038] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0038|if (r6 == null) goto L_0x003a\l}"];
subgraph cluster_Region_630098629 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x003a|java.util.HashSet r6 = new java.util.HashSet()\lr10.put(r5, r6)\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0042|PHI: r6 \l  PHI: (r6v6 java.util.Set) = (r6v5 java.util.Set), (r6v7 java.util.Set) binds: [B:13:0x0038, B:14:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|r6.add(r4)\l}"];
}
subgraph cluster_Region_573414561 {
label = "R(2:16|17)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0047}"];
Node_17 [shape=record,label="{17\:\ 0x006a|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Subscribe annotation on \" + r5 + \" but is not 'public'.\")\l}"];
}
}
}
}
}
subgraph cluster_Region_864341567 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x008f}"];
Node_21 [shape=record,label="{21\:\ 0x00b3|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Subscribe annotation but requires \" + r5.length + \" arguments.  Methods must require a single argument.\")\l}"];
}
}
}
subgraph cluster_Region_2116488357 {
label = "R(1:(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))(1:63)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_454254482 {
label = "IF [B:23:0x00ba] THEN: R(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46))) ELSE: R(1:63) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x00ba|if (r4.isAnnotationPresent(com.squareup.otto.Produce.class) == true) goto L_0x00bc\l}"];
subgraph cluster_Region_901705154 {
label = "R(2:24|(2:47|48)(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)))";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x00bc|java.lang.Class[] java.lang.Class[] r5 = r4.getParameterTypes()\l}"];
subgraph cluster_IfRegion_1357395920 {
label = "IF [B:25:0x00c1] THEN: R(2:47|48) ELSE: R(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x00c1|if (r5.length != 0) goto L_0x018b\l}"];
subgraph cluster_Region_218693188 {
label = "R(2:47|48)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x018b}"];
Node_48 [shape=record,label="{48\:\ 0x01af|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \"has @Produce annotation but requires \" + r5.length + \" arguments.  Methods must require zero arguments.\")\l}"];
}
subgraph cluster_Region_1900692421 {
label = "R(1:(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))(2:45|46)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_512956051 {
label = "IF [B:27:0x00c9] THEN: R(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38))))) ELSE: R(2:45|46) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x00c9|if (r4.getReturnType() != java.lang.Void.class) goto L_0x00cb\l}"];
subgraph cluster_Region_846379477 {
label = "R(2:28|(2:43|44)(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x00cb|java.lang.Class java.lang.Class\<?\> r5 = r4.getReturnType()\l}"];
subgraph cluster_IfRegion_1893765796 {
label = "IF [B:29:0x00d3] THEN: R(2:43|44) ELSE: R(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38))))";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x00d3|if (r5.isInterface() != false) goto L_0x014b\l}"];
subgraph cluster_Region_1638366687 {
label = "R(2:43|44)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x014b}"];
Node_44 [shape=record,label="{44\:\ 0x016e|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Produce annotation on \" + r5 + \" which is an interface.  Producers must return a concrete class type.\")\l}"];
}
subgraph cluster_Region_1486320576 {
label = "R(1:(2:41|42)(1:(2:39|40)(1:(1:36)(2:37|38)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_722949489 {
label = "IF [B:31:0x00db] THEN: R(2:41|42) ELSE: R(1:(2:39|40)(1:(1:36)(2:37|38))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x00db|if (r5.equals(java.lang.Void.TYPE) != false) goto L_0x012f\l}"];
subgraph cluster_Region_1501124751 {
label = "R(2:41|42)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x012f}"];
Node_42 [shape=record,label="{42\:\ 0x014a|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Produce annotation but has no return type.\")\l}"];
}
subgraph cluster_Region_2056154126 {
label = "R(1:(2:39|40)(1:(1:36)(2:37|38))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2083510850 {
label = "IF [B:33:0x00e2] THEN: R(2:39|40) ELSE: R(1:(1:36)(2:37|38)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x00e2|if ((1 & r4.getModifiers()) == 0) goto L_0x010b\l}"];
subgraph cluster_Region_202178007 {
label = "R(2:39|40)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x010b}"];
Node_40 [shape=record,label="{40\:\ 0x012e|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has @Produce annotation on \" + r5 + \" but is not 'public'.\")\l}"];
}
subgraph cluster_Region_533049204 {
label = "R(1:(1:36)(2:37|38)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2014128960 {
label = "IF [B:35:0x00e8] THEN: R(1:36) ELSE: R(2:37|38) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x00e8|if (r9.containsKey(r5) == false) goto L_0x00ea\l}"];
subgraph cluster_Region_572454939 {
label = "R(1:36)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x00ea|r9.put(r5, r4)\l}"];
}
subgraph cluster_Region_859016692 {
label = "R(2:37|38)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x00ef}"];
Node_38 [shape=record,label="{38\:\ 0x010a|throw new java.lang.IllegalArgumentException(\"Producer for type \" + r5 + \" has already been registered.\")\l}"];
}
}
}
}
}
}
}
}
}
subgraph cluster_Region_216736035 {
label = "R(2:45|46)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x016f}"];
Node_46 [shape=record,label="{46\:\ 0x018a|throw new java.lang.IllegalArgumentException(\"Method \" + r4 + \" has a return type of void.  Must declare a non\-void type.\")\l}"];
}
}
}
}
}
subgraph cluster_Region_93115052 {
label = "R(1:63)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x01b0|SYNTHETIC\l|continue\l}"];
}
}
}
}
}
subgraph cluster_Region_125040021 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_49 [shape=record,label="{49\:\ 0x01b0|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:49:0x01b0\l|r3++\l}"];
}
}
Node_50 [shape=record,label="{50\:\ 0x01b4|PRODUCERS_CACHE.put(r8, r9)\lSUBSCRIBERS_CACHE.put(r8, r10)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002b}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x00b4}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x00c3}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x00d5}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x00dd}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x00e4}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x01be}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x018b|SYNTHETIC\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x01b4|SYNTHETIC\l}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x016f|SYNTHETIC\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x014b|SYNTHETIC\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x012f|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x008f|SYNTHETIC\l}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x010b|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x00ef|SYNTHETIC\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x006b|SYNTHETIC\l}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x0047|SYNTHETIC\l}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x01b0|SYNTHETIC\l}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x01b0|SYNTHETIC\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x01b0|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.squareup.otto.AnnotatedHandlerFinder.loadAnnotatedMethods((r8v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.util.Map\<java.lang.Class\<?\>, java.lang.reflect.Method\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.util.Map\<java.lang.Class\<?\>, java.util.Set\<java.lang.reflect.Method\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/reflect\/Method;, \>;, Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Ljava\/util\/Set\<, Ljava\/lang\/reflect\/Method;, \>;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_53[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_65[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_22[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_57[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_60;
Node_18 -> Node_19;
Node_11 -> Node_12;
Node_11 -> Node_61[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_62;
Node_16 -> Node_17;
Node_20 -> Node_21;
Node_23 -> Node_24;
Node_23 -> Node_63[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_52;
Node_47 -> Node_48;
Node_27 -> Node_28;
Node_27 -> Node_54[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_55;
Node_43 -> Node_44;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_56;
Node_41 -> Node_42;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_58;
Node_39 -> Node_40;
Node_35 -> Node_36;
Node_35 -> Node_59[style=dashed];
Node_36 -> Node_64;
Node_37 -> Node_38;
Node_45 -> Node_46;
Node_63 -> Node_49;
Node_49 -> Node_1;
Node_50 -> Node_51;
Node_4 -> Node_5;
Node_10 -> Node_11;
Node_22 -> Node_23;
Node_26 -> Node_27;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_52 -> Node_47;
Node_53 -> Node_50;
Node_54 -> Node_45;
Node_55 -> Node_43;
Node_56 -> Node_41;
Node_57 -> Node_20;
Node_58 -> Node_39;
Node_59 -> Node_37;
Node_60 -> Node_18;
Node_61 -> Node_16;
Node_62 -> Node_49;
Node_64 -> Node_49;
Node_65 -> Node_49;
}

