digraph "CFG forcom.squareup.otto.AnnotatedHandlerFinder.findAllProducers(Ljava\/lang\/Object;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Class r0 = r5.getClass()\ljava.util.HashMap r1 = new java.util.HashMap()\ljava.util.Map r2 = (java.util.Map) PRODUCERS_CACHE.get(r0)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (r2 != null) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|java.util.HashMap r2 = new java.util.HashMap()\lloadAnnotatedProducerMethods(r0, r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|PHI: r2 \l  PHI: (r2v3 java.util.Map) = (r2v2 java.util.Map), (r2v8 java.util.Map) binds: [B:1:0x0011, B:2:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (r2.isEmpty() != false) goto L_0x0048\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|java.util.Iterator r0 = r2.entrySet().iterator()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|LOOP_START\lLOOP:0: B:6:0x0029\-\>B:8:0x002f\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|if (r0.hasNext() == false) goto L_0x0048\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|LOOP_END\lLOOP:0: B:6:0x0029\-\>B:8:0x002f\l|java.util.Map$Entry r2 = (java.util.Map.Entry) r0.next()\lcom.squareup.otto.EventProducer r3 = new com.squareup.otto.EventProducer(r5, (java.lang.reflect.Method) r2.getValue())\lr1.put(r2.getKey(), r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.util.Map\<java.lang.Class\<?\>, com.squareup.otto.EventProducer\> com.squareup.otto.AnnotatedHandlerFinder.findAllProducers((r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Object;, ), Ljava\/util\/Map\<, Ljava\/lang\/Class\<, *\>;, Lcom\/squareup\/otto\/EventProducer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_6;
Node_10 -> Node_9;
}

