digraph "CFG forcom.squareup.otto.Bus.register(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r6 == null) goto L_0x0129\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|r5.enforcer.enforce(r5)\ljava.util.Map r0 = r5.handlerFinder.findAllProducers(r6)\ljava.util.Iterator r1 = r0.keySet().iterator()\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|LOOP_START\lLOOP:0: B:2:0x0015\-\>B:46:0x0015\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|if (r1.hasNext() == false) goto L_0x008d\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|java.lang.Class r2 = r1.next()\lcom.squareup.otto.EventProducer r3 = r0.get(r2)\lcom.squareup.otto.EventProducer r4 = r5.producersByType.putIfAbsent(r2, r3)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|if (r4 != null) goto L_0x0055\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|java.util.Set r2 = (java.util.Set) r5.handlersByType.get(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|if (r2 == null) goto L_0x0015\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b}"];
Node_9 [shape=record,label="{9\:\ 0x003f|if (r2.isEmpty() != false) goto L_0x0015\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|java.util.Iterator r2 = r2.iterator()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|LOOP_START\lLOOP:1: B:11:0x0045\-\>B:13:0x004b\l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|if (r2.hasNext() == false) goto L_0x0015\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|LOOP_END\lLOOP:1: B:11:0x0045\-\>B:13:0x004b\l|dispatchProducerResultToHandler((com.squareup.otto.EventHandler) r2.next(), r3)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Producer method for type \")\lr0.append(r2)\lr0.append(\" found on type \")\lr0.append(r3.target.getClass())\lr0.append(\", but already registered by type \")\lr0.append(r4.target.getClass())\lr0.append(mil.nga.geopackage.property.PropertyConstants.PROPERTY_DIVIDER)\l}"];
Node_15 [shape=record,label="{15\:\ 0x008c|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x008d|java.util.Map r6 = r5.handlerFinder.findAllSubscribers(r6)\ljava.util.Iterator r0 = r6.keySet().iterator()\l}"];
Node_17 [shape=record,label="{17\:\ 0x009b|LOOP_START\lLOOP:2: B:17:0x009b\-\>B:25:0x00cc\l}"];
Node_18 [shape=record,label="{18\:\ 0x009f|if (r0.hasNext() == false) goto L_0x00d7\l}"];
Node_19 [shape=record,label="{19\:\ 0x00a1|java.lang.Class r1 = r0.next()\ljava.util.Set r2 = (java.util.Set) r5.handlersByType.get(r1)\l}"];
Node_20 [shape=record,label="{20\:\ 0x00af|if (r2 != null) goto L_0x00c2\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b1|java.util.concurrent.CopyOnWriteArraySet r2 = new java.util.concurrent.CopyOnWriteArraySet()\ljava.util.Set r3 = r5.handlersByType.putIfAbsent(r1, r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x00be|if (r3 != null) goto L_0x00c1\l}"];
Node_23 [shape=record,label="{23\:\ 0x00c1|r2 = r3\l}"];
Node_24 [shape=record,label="{24\:\ 0x00c2|PHI: r2 \l  PHI: (r2v9 java.util.Set) = (r2v8 java.util.Set), (r2v10 java.util.Set), (r2v11 java.util.Set) binds: [B:20:0x00af, B:22:0x00be, B:23:0x00c1] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x00cc|LOOP_END\lLOOP:2: B:17:0x009b\-\>B:25:0x00cc\l|if (r2.addAll(r6.get(r1)) == false) goto L_0x00cf\l}"];
Node_26 [shape=record,label="{26\:\ 0x00cf}"];
Node_27 [shape=record,label="{27\:\ 0x00d6|throw new java.lang.IllegalArgumentException(\"Object already registered.\")\l}"];
Node_28 [shape=record,label="{28\:\ 0x00d7|java.util.Iterator r6 = r6.entrySet().iterator()\l}"];
Node_29 [shape=record,label="{29\:\ 0x00df|LOOP_START\lLOOP:3: B:29:0x00df\-\>B:54:0x00df\l}"];
Node_30 [shape=record,label="{30\:\ 0x00e3|if (r6.hasNext() == false) goto L_0x0128\l}"];
Node_31 [shape=record,label="{31\:\ 0x00e5|java.util.Map$Entry r0 = r6.next()\ljava.util.concurrent.ConcurrentMap\<java.lang.Class\<?\>, com.squareup.otto.EventProducer\> r2 = r5.producersByType\lcom.squareup.otto.EventProducer r1 = (com.squareup.otto.EventProducer) r2.get((java.lang.Class) r0.getKey())\l}"];
Node_32 [shape=record,label="{32\:\ 0x00f9|if (r1 == null) goto L_0x00df\l}"];
Node_33 [shape=record,label="{33\:\ 0x00fb}"];
Node_34 [shape=record,label="{34\:\ 0x00ff|if (r1.isValid() == false) goto L_0x00df\l}"];
Node_35 [shape=record,label="{35\:\ 0x0101|java.util.Iterator r0 = ((java.util.Set) r0.getValue()).iterator()\l}"];
Node_36 [shape=record,label="{36\:\ 0x010b|LOOP_START\lLOOP:4: B:36:0x010b\-\>B:60:0x010b\l}"];
Node_37 [shape=record,label="{37\:\ 0x010f|if (r0.hasNext() == false) goto L_0x00df\l}"];
Node_38 [shape=record,label="{38\:\ 0x0111|com.squareup.otto.EventHandler r2 = (com.squareup.otto.EventHandler) r0.next()\l}"];
Node_39 [shape=record,label="{39\:\ 0x011b|if (r1.isValid() != false) goto L_0x011e\l}"];
Node_40 [shape=record,label="{40\:\ 0x011e}"];
Node_41 [shape=record,label="{41\:\ 0x0122|if (r2.isValid() == false) goto L_0x010b\l}"];
Node_42 [shape=record,label="{42\:\ 0x0124|dispatchProducerResultToHandler(r2, r1)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0128|RETURN\l|return\l}"];
Node_44 [shape=record,label="{44\:\ 0x0129}"];
Node_45 [shape=record,label="{45\:\ 0x0130|throw new java.lang.NullPointerException(\"Object to register must not be null.\")\l}"];
Node_46 [shape=record,label="{46\:\ 0x0015|LOOP_END\lSYNTHETIC\lLOOP:0: B:2:0x0015\-\>B:46:0x0015\l}"];
Node_47 [shape=record,label="{47\:\ 0x0055|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x008d|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0015|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0015|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0015|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x00cf|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x00d7|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x00df|LOOP_END\lSYNTHETIC\lLOOP:3: B:29:0x00df\-\>B:54:0x00df\l}"];
Node_55 [shape=record,label="{55\:\ 0x0128|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x00df|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x00df|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x00df|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x00df|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x010b|LOOP_END\lSYNTHETIC\lLOOP:4: B:36:0x010b\-\>B:60:0x010b\l}"];
Node_61 [shape=record,label="{61\:\ 0x010b|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x010b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.squareup.otto.Bus.register((r5v0 'this' com.squareup.otto.Bus A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_44;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_48;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_47;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_49;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_50;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_51;
Node_13 -> Node_11;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_53;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_17[style=dashed];
Node_25 -> Node_52;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_55;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_56;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_57;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_58;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_59[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_61;
Node_42 -> Node_62;
Node_44 -> Node_45;
Node_46 -> Node_2;
Node_47 -> Node_14;
Node_48 -> Node_16;
Node_49 -> Node_46;
Node_50 -> Node_46;
Node_51 -> Node_46;
Node_52 -> Node_26;
Node_53 -> Node_28;
Node_54 -> Node_29;
Node_55 -> Node_43;
Node_56 -> Node_54;
Node_57 -> Node_54;
Node_58 -> Node_54;
Node_59 -> Node_54;
Node_60 -> Node_36;
Node_61 -> Node_60;
Node_62 -> Node_60;
}

