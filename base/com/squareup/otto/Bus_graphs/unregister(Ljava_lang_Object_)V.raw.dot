digraph "CFG forcom.squareup.otto.Bus.unregister(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00d6 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:com.squareup.otto.ThreadEnforcer) = (r6 I:com.squareup.otto.Bus) com.squareup.otto.Bus.enforcer com.squareup.otto.ThreadEnforcer \l0x0004: INVOKE  \l  (r0 I:com.squareup.otto.ThreadEnforcer)\l  (r6 I:com.squareup.otto.Bus)\l com.squareup.otto.ThreadEnforcer.enforce(com.squareup.otto.Bus):void type: INTERFACE \l0x0007: IGET  (r0 I:com.squareup.otto.HandlerFinder) = (r6 I:com.squareup.otto.Bus) com.squareup.otto.Bus.handlerFinder com.squareup.otto.HandlerFinder \l0x0009: INVOKE  (r0 I:java.util.Map) = \l  (r0 I:com.squareup.otto.HandlerFinder)\l  (r7 I:java.lang.Object)\l com.squareup.otto.HandlerFinder.findAllProducers(java.lang.Object):java.util.Map type: INTERFACE \l0x000d: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0011: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0065 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001f: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0025: CHECK_CAST  (r2 I:java.lang.Class) = (java.lang.Class) (r2 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  (r3 I:com.squareup.otto.EventProducer) = (r6 I:com.squareup.otto.Bus), (r2 I:java.lang.Class) com.squareup.otto.Bus.getProducerForEventType(java.lang.Class):com.squareup.otto.EventProducer type: VIRTUAL \l0x002b: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x002f: CHECK_CAST  (r1 I:com.squareup.otto.EventProducer) = (com.squareup.otto.EventProducer) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0045 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: INVOKE  (r1 I:boolean) = \l  (r1 I:com.squareup.otto.EventProducer)\l  (r3 I:java.lang.Object)\l com.squareup.otto.EventProducer.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IGET  (r1 I:java.util.concurrent.ConcurrentMap\<java.lang.Class\<?\>, com.squareup.otto.EventProducer\>) = (r6 I:com.squareup.otto.Bus) com.squareup.otto.Bus.producersByType java.util.concurrent.ConcurrentMap \l0x003b: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:java.util.concurrent.ConcurrentMap)\l  (r2 I:java.lang.Object)\l java.util.concurrent.ConcurrentMap.remove(java.lang.Object):java.lang.Object type: INTERFACE \l0x003f: CHECK_CAST  (r1 I:com.squareup.otto.EventProducer) = (com.squareup.otto.EventProducer) (r1 I:?[OBJECT, ARRAY]) \l0x0041: INVOKE  (r1 I:com.squareup.otto.EventProducer) com.squareup.otto.EventProducer.invalidate():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0047: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004c: CONST_STR  (r2 I:java.lang.String) =  \"Missing event producer for an annotated method. Is \" \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r7 I:java.lang.Class) = (r7 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0055: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0058: CONST_STR  (r7 I:java.lang.String) =  \" registered?\" \l0x005a: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005d: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0061: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0064|0x0064: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0065|0x0065: IGET  (r0 I:com.squareup.otto.HandlerFinder) = (r6 I:com.squareup.otto.Bus) com.squareup.otto.Bus.handlerFinder com.squareup.otto.HandlerFinder \l0x0067: INVOKE  (r0 I:java.util.Map) = \l  (r0 I:com.squareup.otto.HandlerFinder)\l  (r7 I:java.lang.Object)\l com.squareup.otto.HandlerFinder.findAllSubscribers(java.lang.Object):java.util.Map type: INTERFACE \l0x006b: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x006f: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0073|0x0073: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|0x0077: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00d5 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0079|0x0079: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x007d: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x007f: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0083: CHECK_CAST  (r2 I:java.lang.Class) = (java.lang.Class) (r2 I:?[OBJECT, ARRAY]) \l0x0085: INVOKE  (r2 I:java.util.Set) = (r6 I:com.squareup.otto.Bus), (r2 I:java.lang.Class) com.squareup.otto.Bus.getHandlersForEventType(java.lang.Class):java.util.Set type: VIRTUAL \l0x0089: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x008d: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x008f|0x008f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00b5 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0091|0x0091: INVOKE  (r3 I:boolean) = (r2 I:java.util.Set), (r1 I:java.util.Collection) java.util.Set.containsAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0095|0x0095: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00b5 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0097|0x0097: INVOKE  (r3 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x009b|0x009b: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x009f|0x009f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00b1 \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a1|0x00a1: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00a5: CHECK_CAST  (r4 I:com.squareup.otto.EventHandler) = (com.squareup.otto.EventHandler) (r4 I:?[OBJECT, ARRAY]) \l0x00a7: INVOKE  (r5 I:boolean) = (r1 I:java.util.Collection), (r4 I:java.lang.Object) java.util.Collection.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x00ab|0x00ab: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x009b \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ad|0x00ad: INVOKE  (r4 I:com.squareup.otto.EventHandler) com.squareup.otto.EventHandler.invalidate():void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00b1|0x00b1: INVOKE  (r2 I:java.util.Set), (r1 I:java.util.Collection) java.util.Set.removeAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x00b5|0x00b5: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00b7: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00b9: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00bc: CONST_STR  (r2 I:java.lang.String) =  \"Missing event handler for an annotated method. Is \" \l0x00be: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c1: INVOKE  (r7 I:java.lang.Class) = (r7 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x00c5: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00c8: CONST_STR  (r7 I:java.lang.String) =  \" registered?\" \l0x00ca: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00cd: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00d1: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d4|0x00d4: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00d5|0x00d5: RETURN   \l}"];
Node_28 [shape=record,label="{28\:\ 0x00d6|0x00d6: NEW_INSTANCE  (r7 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x00d8: CONST_STR  (r0 I:java.lang.String) =  \"Object to unregister must not be null.\" \l0x00da: INVOKE  \l  (r7 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00dd|0x00dd: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.squareup.otto.Bus.unregister((r6 'this' I:com.squareup.otto.Bus A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_28;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_2;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_19;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_19;
Node_24 -> Node_12;
Node_25 -> Node_26;
Node_28 -> Node_29;
}

