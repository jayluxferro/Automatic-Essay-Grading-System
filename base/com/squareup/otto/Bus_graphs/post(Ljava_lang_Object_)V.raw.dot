digraph "CFG forcom.squareup.otto.Bus.post(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0053 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:com.squareup.otto.ThreadEnforcer) = (r4 I:com.squareup.otto.Bus) com.squareup.otto.Bus.enforcer com.squareup.otto.ThreadEnforcer \l0x0004: INVOKE  \l  (r0 I:com.squareup.otto.ThreadEnforcer)\l  (r4 I:com.squareup.otto.Bus)\l com.squareup.otto.ThreadEnforcer.enforce(com.squareup.otto.Bus):void type: INTERFACE \l0x0007: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x000b: INVOKE  (r0 I:java.util.Set) = (r4 I:com.squareup.otto.Bus), (r0 I:java.lang.Class) com.squareup.otto.Bus.flattenHierarchy(java.lang.Class):java.util.Set type: VIRTUAL \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r2 I:java.lang.Class) = (java.lang.Class) (r2 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  (r2 I:java.util.Set) = (r4 I:com.squareup.otto.Bus), (r2 I:java.lang.Class) com.squareup.otto.Bus.getHandlersForEventType(java.lang.Class):java.util.Set type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  (r3 I:boolean) = (r2 I:java.util.Set) java.util.Set.isEmpty():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0014 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002d: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0014 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r3 I:com.squareup.otto.EventHandler) = (com.squareup.otto.EventHandler) (r3 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r4 I:com.squareup.otto.Bus)\l  (r5 I:java.lang.Object)\l  (r3 I:com.squareup.otto.EventHandler)\l com.squareup.otto.Bus.enqueueEvent(java.lang.Object, com.squareup.otto.EventHandler):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.squareup.otto.DeadEvent \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: NEW_INSTANCE  (r0 I:com.squareup.otto.DeadEvent) =  com.squareup.otto.DeadEvent \l0x0049: INVOKE  \l  (r0 I:com.squareup.otto.DeadEvent)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l com.squareup.otto.DeadEvent.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT \l0x004c: INVOKE  (r4 I:com.squareup.otto.Bus), (r0 I:java.lang.Object) com.squareup.otto.Bus.post(java.lang.Object):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: INVOKE  (r4 I:com.squareup.otto.Bus) com.squareup.otto.Bus.dispatchQueuedEvents():void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|0x0053: NEW_INSTANCE  (r5 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0055: CONST_STR  (r0 I:java.lang.String) =  \"Event to post must not be null.\" \l0x0057: INVOKE  \l  (r5 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|0x005a: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.squareup.otto.Bus.post((r4 'this' I:com.squareup.otto.Bus A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_18;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_2;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_9;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

