digraph "CFG forcom.squareup.picasso.LruCache.clearKeyUri(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r4.cache.snapshot().keySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lLOOP:0: B:1:0x000e\-\>B:11:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|if (r0.hasNext() == false) goto L_0x003c\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|java.lang.String r1 = r0.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|if (r1.startsWith(r5) == false) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020}"];
Node_6 [shape=record,label="{6\:\ 0x0028|if (r1.length() \<= r5.length()) goto L_0x000e\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a}"];
Node_8 [shape=record,label="{8\:\ 0x0034|if (r1.charAt(r5.length()) != 10) goto L_0x000e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|r4.cache.remove(r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000e\-\>B:11:0x000e\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.squareup.picasso.LruCache.clearKeyUri((r4v0 'this' com.squareup.picasso.LruCache A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_16;
Node_11 -> Node_1;
Node_12 -> Node_10;
Node_13 -> Node_11;
Node_14 -> Node_11;
Node_15 -> Node_11;
Node_16 -> Node_11;
}

