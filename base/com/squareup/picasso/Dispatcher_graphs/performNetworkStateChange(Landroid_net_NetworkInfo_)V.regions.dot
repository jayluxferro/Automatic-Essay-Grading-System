digraph "CFG forcom.squareup.picasso.Dispatcher.performNetworkStateChange(Landroid\/net\/NetworkInfo;)V" {
subgraph cluster_Region_2025799970 {
label = "R(2:(1:2)|(1:(1:6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1943482482 {
label = "IF [B:1:0x0004] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r1.service instanceof com.squareup.picasso.PicassoExecutorService) == true) goto L_0x0006\l}"];
subgraph cluster_Region_1760153895 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|((com.squareup.picasso.PicassoExecutorService) r1.service).adjustThreadCount(r2)\l}"];
}
}
subgraph cluster_Region_927016998 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_896915901 {
label = "IF [B:3:0x000d, B:5:0x0013] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r2 != null) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|ADDED_TO_REGION\l|if (r2.isConnected() != false) goto L_0x0015\l}"];
subgraph cluster_Region_2146118593 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0015|flushFailedActions()\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void com.squareup.picasso.Dispatcher.performNetworkStateChange((r1v0 'this' com.squareup.picasso.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r2v0 android.net.NetworkInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_4 -> Node_5;
}

