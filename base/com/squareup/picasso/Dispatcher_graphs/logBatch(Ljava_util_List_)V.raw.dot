digraph "CFG forcom.squareup.picasso.Dispatcher.logBatch(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:boolean) = (r4 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r0 I:com.squareup.picasso.BitmapHunter) = (com.squareup.picasso.BitmapHunter) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:com.squareup.picasso.Picasso) = (r0 I:com.squareup.picasso.BitmapHunter) com.squareup.picasso.BitmapHunter.getPicasso():com.squareup.picasso.Picasso type: VIRTUAL \l0x0014: IGET  (r0 I:boolean) = (r0 I:com.squareup.picasso.Picasso) com.squareup.picasso.Picasso.loggingEnabled boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002b: CHECK_CAST  (r1 I:com.squareup.picasso.BitmapHunter) = (com.squareup.picasso.BitmapHunter) (r1 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  (r2 I:int) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.length():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: CONST_STR  (r2 I:java.lang.String) =  \", \" \l0x0035: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: INVOKE  (r1 I:java.lang.String) = (r1 I:com.squareup.picasso.BitmapHunter) com.squareup.picasso.Utils.getLogIdsForHunter(com.squareup.picasso.BitmapHunter):java.lang.String type: STATIC \l0x003c: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: CONST_STR  (r4 I:java.lang.String) =  \"Dispatcher\" \l0x0042: CONST_STR  (r1 I:java.lang.String) =  \"delivered\" \l0x0044: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0048: INVOKE  \l  (r4 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r0 I:java.lang.String)\l com.squareup.picasso.Utils.log(java.lang.String, java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|0x004b: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.squareup.picasso.Dispatcher.logBatch((r3 'this' I:com.squareup.picasso.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.List\<com.squareup.picasso.BitmapHunter\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/squareup\/picasso\/BitmapHunter;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_15[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_7;
Node_13 -> Node_14;
}

