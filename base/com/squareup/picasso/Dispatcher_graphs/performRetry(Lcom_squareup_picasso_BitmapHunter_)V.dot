digraph "CFG forcom.squareup.picasso.Dispatcher.performRetry(Lcom\/squareup\/picasso\/BitmapHunter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4.isCancelled() == false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|r1 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r3.service.isShutdown() == false) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|performError(r4, false)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|r0 = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|if (r3.scansNetworkChanges == false) goto L_0x0027\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|android.net.NetworkInfo r0 = ((android.net.ConnectivityManager) com.squareup.picasso.Utils.getService(r3.context, \"connectivity\")).getActiveNetworkInfo()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|PHI: r0 \l  PHI: (r0v4 android.net.NetworkInfo) = (r0v3 android.net.NetworkInfo), (r0v20 android.net.NetworkInfo) binds: [B:8:0x0017, B:9:0x0019] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|if (r4.shouldRetry(r3.airplaneMode, r0) == false) goto L_0x005c\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f}"];
Node_13 [shape=record,label="{13\:\ 0x0035|if (r4.getPicasso().loggingEnabled == false) goto L_0x0042\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|com.squareup.picasso.Utils.log(DISPATCHER_THREAD_NAME, \"retrying\", com.squareup.picasso.Utils.getLogIdsForHunter(r4))\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042}"];
Node_16 [shape=record,label="{16\:\ 0x0048|if ((r4.getException() instanceof com.squareup.picasso.NetworkRequestHandler.ContentLengthException) == false) goto L_0x0053\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|r4.networkPolicy = r4.networkPolicy \| com.squareup.picasso.NetworkPolicy.NO_CACHE.index\l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|r4.future = r3.service.submit(r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x005c}"];
Node_20 [shape=record,label="{20\:\ 0x005e|if (r3.scansNetworkChanges == false) goto L_0x0067\l}"];
Node_21 [shape=record,label="{21\:\ 0x0060}"];
Node_22 [shape=record,label="{22\:\ 0x0064|if (r4.supportsReplay() == false) goto L_0x0067\l}"];
Node_23 [shape=record,label="{23\:\ 0x0066|r1 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v0 boolean), (r1v2 boolean) binds: [B:20:0x005e, B:22:0x0064, B:23:0x0066] A[DONT_GENERATE, DONT_INLINE]\l|performError(r4, r1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x006a|if (r1 == false) goto L_?\l}"];
Node_26 [shape=record,label="{26\:\ 0x006c|markForReplay(r4)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void com.squareup.picasso.Dispatcher.performRetry((r3v0 'this' com.squareup.picasso.Dispatcher A[IMMUTABLE_TYPE, THIS]), (r4v0 com.squareup.picasso.BitmapHunter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.annotation.SuppressLint, \{value=[MissingPermission]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
}

