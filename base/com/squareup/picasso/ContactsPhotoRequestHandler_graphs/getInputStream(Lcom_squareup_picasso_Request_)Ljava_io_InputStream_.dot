digraph "CFG forcom.squareup.picasso.ContactsPhotoRequestHandler.getInputStream(Lcom\/squareup\/picasso\/Request;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.content.ContentResolver r0 = r3.context.getContentResolver()\landroid.net.Uri r4 = r4.uri\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|switch(matcher.match(r4)) \{\l    case 1: goto L_0x002d;\l    case 2: goto L_0x0028;\l    case 3: goto L_0x0035;\l    case 4: goto L_0x0028;\l    default: goto L_0x0011;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Invalid uri: \")\lr1.append(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0028}"];
Node_5 [shape=record,label="{5\:\ 0x002c|RETURN\l|return r0.openInputStream(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|android.net.Uri r4 = android.provider.ContactsContract.Contacts.lookupContact(r0, r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|if (r4 != null) goto L_0x0035\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|RETURN\l|return null\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|PHI: r4 \l  PHI: (r4v2 android.net.Uri) = (r4v1 android.net.Uri), (r4v4 android.net.Uri) binds: [B:1:0x000e, B:7:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|RETURN\l|return android.provider.ContactsContract.Contacts.openContactPhotoInputStream(r0, r4, true)\l}"];
MethodNode[shape=record,label="{private java.io.InputStream com.squareup.picasso.ContactsPhotoRequestHandler.getInputStream((r3v0 'this' com.squareup.picasso.ContactsPhotoRequestHandler A[IMMUTABLE_TYPE, THIS]), (r4v0 com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
}

