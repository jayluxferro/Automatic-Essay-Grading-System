digraph "CFG forcom.squareup.picasso.BitmapHunter.forRequest(Lcom\/squareup\/picasso\/Picasso;Lcom\/squareup\/picasso\/Dispatcher;Lcom\/squareup\/picasso\/Cache;Lcom\/squareup\/picasso\/Stats;Lcom\/squareup\/picasso\/Action;)Lcom\/squareup\/picasso\/BitmapHunter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.squareup.picasso.Request r0 = r16.getRequest()\ljava.util.List r1 = r12.getRequestHandlers()\lint r2 = r1.size()\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:6:0x0029] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:6:0x0029\l|if (r3 \>= r2) goto L_0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|com.squareup.picasso.RequestHandler r11 = r1.get(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|if (r11.canHandleRequest(r0) == false) goto L_0x0029\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c}"];
Node_5 [shape=record,label="{5\:\ 0x0028|RETURN\l|return new com.squareup.picasso.BitmapHunter(r12, r13, r14, r15, r16, r11)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:6:0x0029\l|int r3 = r3 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|r5 = r12\lr6 = r13\lr7 = r14\lr8 = r15\lr9 = r16\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|RETURN\l|return new com.squareup.picasso.BitmapHunter(r5, r6, r7, r8, r9, ERRORING_HANDLER)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static com.squareup.picasso.BitmapHunter com.squareup.picasso.BitmapHunter.forRequest((r12v0 com.squareup.picasso.Picasso A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 com.squareup.picasso.Dispatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 com.squareup.picasso.Cache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 com.squareup.picasso.Stats A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 com.squareup.picasso.Action A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_6;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_4;
Node_10 -> Node_7;
}

