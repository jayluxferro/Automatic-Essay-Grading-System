digraph "CFG forcom.squareup.picasso.BitmapHunter.decodeStream(Lokio\/Source;Lcom\/squareup\/picasso\/Request;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:okio.BufferedSource) = (r7 I:okio.Source) okio.Okio.buffer(okio.Source):okio.BufferedSource type: STATIC \l0x0004: INVOKE  (r0 I:boolean) = (r7 I:okio.BufferedSource) com.squareup.picasso.Utils.isWebPFile(okio.BufferedSource):boolean type: STATIC \l0x0008: IGET  (r1 I:boolean) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.Request.purgeable boolean \l0x000a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0010: CONST  (r4 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r1 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: INVOKE  (r4 I:android.graphics.BitmapFactory$Options) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.RequestHandler.createBitmapOptions(com.squareup.picasso.Request):android.graphics.BitmapFactory$Options type: STATIC \l0x001b: INVOKE  (r5 I:boolean) = (r4 I:android.graphics.BitmapFactory$Options) com.squareup.picasso.RequestHandler.requiresInSampleSize(android.graphics.BitmapFactory$Options):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0059 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: INVOKE  (r7 I:java.io.InputStream) = (r7 I:okio.BufferedSource) okio.BufferedSource.inputStream():java.io.InputStream type: INTERFACE \l0x0028: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: NEW_INSTANCE  (r1 I:com.squareup.picasso.MarkableInputStream) =  com.squareup.picasso.MarkableInputStream \l0x002d: INVOKE  \l  (r1 I:com.squareup.picasso.MarkableInputStream)\l  (r7 I:java.io.InputStream)\l com.squareup.picasso.MarkableInputStream.\<init\>(java.io.InputStream):void type: DIRECT \l0x0030: INVOKE  \l  (r1 I:com.squareup.picasso.MarkableInputStream)\l  (r3 I:boolean)\l com.squareup.picasso.MarkableInputStream.allowMarksToExpire(boolean):void type: VIRTUAL \l0x0033: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l0x0035: INVOKE  (r5 I:long) = (r1 I:com.squareup.picasso.MarkableInputStream), (r7 I:int) com.squareup.picasso.MarkableInputStream.savePosition(int):long type: VIRTUAL \l0x0039: INVOKE  \l  (r1 I:java.io.InputStream)\l  (r0 I:android.graphics.Rect)\l  (r4 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC \l0x003c: IGET  (r7 I:int) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.Request.targetWidth int \l0x003e: IGET  (r3 I:int) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.Request.targetHeight int \l0x0040: INVOKE  \l  (r7 I:int)\l  (r3 I:int)\l  (r4 I:android.graphics.BitmapFactory$Options)\l  (r8 I:com.squareup.picasso.Request)\l com.squareup.picasso.RequestHandler.calculateInSampleSize(int, int, android.graphics.BitmapFactory$Options, com.squareup.picasso.Request):void type: STATIC \l0x0043: INVOKE  \l  (r1 I:com.squareup.picasso.MarkableInputStream)\l  (r5 I:long)\l com.squareup.picasso.MarkableInputStream.reset(long):void type: VIRTUAL \l0x0046: INVOKE  \l  (r1 I:com.squareup.picasso.MarkableInputStream)\l  (r2 I:boolean)\l com.squareup.picasso.MarkableInputStream.allowMarksToExpire(boolean):void type: VIRTUAL \l0x0049: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: INVOKE  (r7 I:android.graphics.Bitmap) = \l  (r7 I:java.io.InputStream)\l  (r0 I:android.graphics.Rect)\l  (r4 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0051 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: RETURN  (r7 I:android.graphics.Bitmap) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: NEW_INSTANCE  (r7 I:java.io.IOException) =  java.io.IOException \l0x0053: CONST_STR  (r8 I:java.lang.String) =  \"Failed to decode stream.\" \l0x0055: INVOKE  (r7 I:java.io.IOException), (r8 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: INVOKE  (r7 I:byte[]) = (r7 I:okio.BufferedSource) okio.BufferedSource.readByteArray():byte[] type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006a \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l0x0060: INVOKE  \l  (r7 I:byte[])\l  (r3 I:int)\l  (r0 I:int)\l  (r4 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC \l0x0063: IGET  (r0 I:int) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.Request.targetWidth int \l0x0065: IGET  (r1 I:int) = (r8 I:com.squareup.picasso.Request) com.squareup.picasso.Request.targetHeight int \l0x0067: INVOKE  \l  (r0 I:int)\l  (r1 I:int)\l  (r4 I:android.graphics.BitmapFactory$Options)\l  (r8 I:com.squareup.picasso.Request)\l com.squareup.picasso.RequestHandler.calculateInSampleSize(int, int, android.graphics.BitmapFactory$Options, com.squareup.picasso.Request):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|0x006a: ARRAY_LENGTH  (r8 I:int) = (r7 I:?[]) \l0x006b: INVOKE  (r7 I:android.graphics.Bitmap) = \l  (r7 I:byte[])\l  (r3 I:int)\l  (r8 I:int)\l  (r4 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: RETURN  (r7 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{static android.graphics.Bitmap com.squareup.picasso.BitmapHunter.decodeStream((r7 I:okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_10;
Node_8 -> Node_18[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

