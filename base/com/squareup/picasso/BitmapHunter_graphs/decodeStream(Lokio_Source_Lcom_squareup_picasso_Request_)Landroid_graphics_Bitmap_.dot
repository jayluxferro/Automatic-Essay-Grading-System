digraph "CFG forcom.squareup.picasso.BitmapHunter.decodeStream(Lokio\/Source;Lcom\/squareup\/picasso\/Request;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|okio.BufferedSource r7 = okio.Okio.buffer(r7)\lboolean r0 = com.squareup.picasso.Utils.isWebPFile(r7)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r8.purgeable == false) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (android.os.Build.VERSION.SDK_INT \>= 21) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|r1 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|r1 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v4 boolean), (r1v6 boolean) binds: [B:5:0x0016, B:4:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.BitmapFactory$Options r4 = com.squareup.picasso.RequestHandler.createBitmapOptions(r8)\lboolean r5 = com.squareup.picasso.RequestHandler.requiresInSampleSize(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if (r0 != false) goto L_0x0059\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r1 == false) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|java.io.InputStream r7 = r7.inputStream()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|if (r5 == false) goto L_0x004a\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|com.squareup.picasso.MarkableInputStream r1 = new com.squareup.picasso.MarkableInputStream(r7)\lr1.allowMarksToExpire(false)\llong r5 = r1.savePosition(1024)\landroid.graphics.BitmapFactory.decodeStream(r1, (android.graphics.Rect) null, r4)\lcom.squareup.picasso.RequestHandler.calculateInSampleSize(r8.targetWidth, r8.targetHeight, r4, r8)\lr1.reset(r5)\lr1.allowMarksToExpire(true)\lr7 = r1\l}"];
Node_12 [shape=record,label="{12\:\ 0x004a|PHI: r7 \l  PHI: (r7v5 java.io.InputStream) = (r7v4 java.io.InputStream), (r7v10 java.io.InputStream) binds: [B:10:0x0029, B:11:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.Bitmap r7 = android.graphics.BitmapFactory.decodeStream(r7, (android.graphics.Rect) null, r4)\l}"];
Node_13 [shape=record,label="{13\:\ 0x004e|if (r7 == null) goto L_0x0051\l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|RETURN\l|return r7\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051}"];
Node_16 [shape=record,label="{16\:\ 0x0058|throw new java.io.IOException(\"Failed to decode stream.\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|byte[] r7 = r7.readByteArray()\l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|if (r5 == false) goto L_0x006a\l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|android.graphics.BitmapFactory.decodeByteArray(r7, 0, r7.length, r4)\lcom.squareup.picasso.RequestHandler.calculateInSampleSize(r8.targetWidth, r8.targetHeight, r4, r8)\l}"];
Node_20 [shape=record,label="{20\:\ 0x006a}"];
Node_21 [shape=record,label="{21\:\ 0x006f|RETURN\l|return android.graphics.BitmapFactory.decodeByteArray(r7, 0, r7.length, r4)\l}"];
MethodNode[shape=record,label="{static android.graphics.Bitmap com.squareup.picasso.BitmapHunter.decodeStream((r7v0 okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_8 -> Node_17[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

