digraph "CFG forcom.squareup.picasso.RequestHandler.createBitmapOptions(Lcom\/squareup\/picasso\/Request;)Landroid\/graphics\/BitmapFactory$Options;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.hasSize():boolean type: VIRTUAL \l0x0004: IGET  (r1 I:android.graphics.Bitmap$Config) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.config android.graphics.Bitmap$Config \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r3 I:boolean) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.purgeable boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:android.graphics.BitmapFactory$Options) =  android.graphics.BitmapFactory$Options \l0x0016: INVOKE  (r2 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.\<init\>():void type: DIRECT \l0x0019: IPUT  \l  (r0 I:boolean)\l  (r2 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inJustDecodeBounds boolean \l0x001b: IGET  (r0 I:boolean) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.purgeable boolean \l0x001d: IPUT  \l  (r0 I:boolean)\l  (r2 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inInputShareable boolean \l0x001f: IGET  (r0 I:boolean) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.purgeable boolean \l0x0021: IPUT  \l  (r0 I:boolean)\l  (r2 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inPurgeable boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0029 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: IGET  (r4 I:android.graphics.Bitmap$Config) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.config android.graphics.Bitmap$Config \l0x0027: IPUT  \l  (r4 I:android.graphics.Bitmap$Config)\l  (r2 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inPreferredConfig android.graphics.Bitmap$Config \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: RETURN  (r2 I:android.graphics.BitmapFactory$Options) \l}"];
MethodNode[shape=record,label="{static android.graphics.BitmapFactory$Options com.squareup.picasso.RequestHandler.createBitmapOptions((r4 I:com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

