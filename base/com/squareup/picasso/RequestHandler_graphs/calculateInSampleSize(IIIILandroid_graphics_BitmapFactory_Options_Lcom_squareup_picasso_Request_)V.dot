digraph "CFG forcom.squareup.picasso.RequestHandler.calculateInSampleSize(IIIILandroid\/graphics\/BitmapFactory$Options;Lcom\/squareup\/picasso\/Request;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 \> r3) goto L_0x0007\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 \<= r2) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r2 = 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r3 != 0) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|int r2 = (int) java.lang.Math.floor((double) (((float) r4) \/ ((float) r2)))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r2 != 0) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|int r2 = (int) java.lang.Math.floor((double) (((float) r5) \/ ((float) r3)))\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|int r3 = (int) java.lang.Math.floor((double) (((float) r5) \/ ((float) r3)))\lint r2 = (int) java.lang.Math.floor((double) (((float) r4) \/ ((float) r2)))\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|if (r7.centerInside == false) goto L_0x003a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|int r2 = java.lang.Math.max(r3, r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|int r2 = java.lang.Math.min(r3, r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|PHI: r2 \l  PHI: (r2v1 int) = (r2v5 int), (r2v6 int), (r2v11 int), (r2v15 int), (r2v16 int) binds: [B:10:0x003a, B:9:0x0035, B:6:0x0015, B:4:0x0009, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|r6.inSampleSize = r2\lr6.inJustDecodeBounds = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|RETURN\l|return\l}"];
MethodNode[shape=record,label="{static void com.squareup.picasso.RequestHandler.calculateInSampleSize((r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.graphics.BitmapFactory$Options A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

