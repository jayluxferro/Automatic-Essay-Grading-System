digraph "CFG forcom.squareup.picasso.FileRequestHandler.load(Lcom\/squareup\/picasso\/Request;I)Lcom\/squareup\/picasso\/RequestHandler$Result;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:java.io.InputStream) = \l  (r3 I:com.squareup.picasso.FileRequestHandler)\l  (r4 I:com.squareup.picasso.Request)\l com.squareup.picasso.FileRequestHandler.getInputStream(com.squareup.picasso.Request):java.io.InputStream type: VIRTUAL \l0x0004: INVOKE  (r5 I:okio.Source) = (r5 I:java.io.InputStream) okio.Okio.source(java.io.InputStream):okio.Source type: STATIC \l0x0008: NEW_INSTANCE  (r0 I:com.squareup.picasso.RequestHandler$Result) =  com.squareup.picasso.RequestHandler$Result \l0x000a: SGET  (r1 I:com.squareup.picasso.Picasso$LoadedFrom) =  com.squareup.picasso.Picasso.LoadedFrom.DISK com.squareup.picasso.Picasso$LoadedFrom \l0x000c: IGET  (r4 I:android.net.Uri) = (r4 I:com.squareup.picasso.Request) com.squareup.picasso.Request.uri android.net.Uri \l0x000e: INVOKE  (r4 I:int) = (r4 I:android.net.Uri) com.squareup.picasso.FileRequestHandler.getFileExifRotation(android.net.Uri):int type: STATIC \l0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  \l  (r0 I:com.squareup.picasso.RequestHandler$Result)\l  (r2 I:android.graphics.Bitmap)\l  (r5 I:okio.Source)\l  (r1 I:com.squareup.picasso.Picasso$LoadedFrom)\l  (r4 I:int)\l com.squareup.picasso.RequestHandler.Result.\<init\>(android.graphics.Bitmap, okio.Source, com.squareup.picasso.Picasso$LoadedFrom, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: RETURN  (r0 I:com.squareup.picasso.RequestHandler$Result) \l}"];
MethodNode[shape=record,label="{public com.squareup.picasso.RequestHandler$Result com.squareup.picasso.FileRequestHandler.load((r3 'this' I:com.squareup.picasso.FileRequestHandler A[IMMUTABLE_TYPE, THIS]), (r4 I:com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

