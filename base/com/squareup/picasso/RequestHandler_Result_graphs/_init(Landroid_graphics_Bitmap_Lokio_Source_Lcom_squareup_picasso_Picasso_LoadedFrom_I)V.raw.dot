digraph "CFG forcom.squareup.picasso.RequestHandler.Result.\<init\>(Landroid\/graphics\/Bitmap;Lokio\/Source;Lcom\/squareup\/picasso\/Picasso$LoadedFrom;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IPUT  \l  (r4 I:android.graphics.Bitmap)\l  (r3 I:com.squareup.picasso.RequestHandler$Result)\l com.squareup.picasso.RequestHandler.Result.bitmap android.graphics.Bitmap \l0x0011: IPUT  \l  (r5 I:okio.Source)\l  (r3 I:com.squareup.picasso.RequestHandler$Result)\l com.squareup.picasso.RequestHandler.Result.source okio.Source \l0x0013: CONST_STR  (r4 I:java.lang.String) =  \"loadedFrom == null\" \l0x0015: INVOKE  (r4 I:java.lang.Object) = (r6 I:java.lang.Object), (r4 I:java.lang.String) com.squareup.picasso.Utils.checkNotNull(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x0019: CHECK_CAST  (r4 I:com.squareup.picasso.Picasso$LoadedFrom) = (com.squareup.picasso.Picasso$LoadedFrom) (r4 I:?[OBJECT, ARRAY]) \l0x001b: IPUT  \l  (r4 I:com.squareup.picasso.Picasso$LoadedFrom)\l  (r3 I:com.squareup.picasso.RequestHandler$Result)\l com.squareup.picasso.RequestHandler.Result.loadedFrom com.squareup.picasso.Picasso$LoadedFrom \l0x001d: IPUT  \l  (r7 I:int)\l  (r3 I:com.squareup.picasso.RequestHandler$Result)\l com.squareup.picasso.RequestHandler.Result.exifOrientation int \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0022: INVOKE  (r4 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void com.squareup.picasso.RequestHandler.Result.\<init\>((r3 'this' I:com.squareup.picasso.RequestHandler$Result A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.squareup.picasso.Picasso$LoadedFrom A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

