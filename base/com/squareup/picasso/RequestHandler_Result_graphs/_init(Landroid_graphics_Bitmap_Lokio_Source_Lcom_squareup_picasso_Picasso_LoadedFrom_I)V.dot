digraph "CFG forcom.squareup.picasso.RequestHandler.Result.\<init\>(Landroid\/graphics\/Bitmap;Lokio\/Source;Lcom\/squareup\/picasso\/Picasso$LoadedFrom;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4 == null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|r2 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r2 \l  PHI: (r2v0 boolean) = (r2v1 boolean), (r2v2 boolean) binds: [B:3:0x0009, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == null) goto L_0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|r0 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v2 boolean) binds: [B:4:0x000a, B:5:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == r0) goto L_0x0020\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|r3.bitmap = r4\lr3.source = r5\lr3.loadedFrom = (com.squareup.picasso.Picasso.LoadedFrom) com.squareup.picasso.Utils.checkNotNull(r6, \"loadedFrom == null\")\lr3.exifOrientation = r7\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020}"];
Node_10 [shape=record,label="{10\:\ 0x0025|throw new java.lang.AssertionError()\l}"];
MethodNode[shape=record,label="{void com.squareup.picasso.RequestHandler.Result.\<init\>((r3v0 'this' com.squareup.picasso.RequestHandler$Result A[IMMUTABLE_TYPE, THIS]), (r4v0 android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 okio.Source A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.squareup.picasso.Picasso$LoadedFrom A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.NonNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

