digraph "CFG forcom.squareup.picasso.Request.logId()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0004: IGET  (r2 I:long) = (r5 I:com.squareup.picasso.Request) com.squareup.picasso.Request.started long \l0x0006: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l0x0007: SGET  (r2 I:long) =  com.squareup.picasso.Request.TOO_LONG_LOG long \l0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l0x000b: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0011: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0014: INVOKE  (r3 I:java.lang.String) = (r5 I:com.squareup.picasso.Request) com.squareup.picasso.Request.plainId():java.lang.String type: VIRTUAL \l0x0018: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x001e: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.NANOSECONDS java.util.concurrent.TimeUnit \l0x0020: INVOKE  (r0 I:long) = (r3 I:java.util.concurrent.TimeUnit), (r0 I:long) java.util.concurrent.TimeUnit.toSeconds(long):long type: VIRTUAL \l0x0024: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (115(0x73, float:1.61E\-43) ?[int, float, short, byte, char])\l \l0x0029: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0030|0x0030: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0033: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0036: INVOKE  (r3 I:java.lang.String) = (r5 I:com.squareup.picasso.Request) com.squareup.picasso.Request.plainId():java.lang.String type: VIRTUAL \l0x003a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0040: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.NANOSECONDS java.util.concurrent.TimeUnit \l0x0042: INVOKE  (r0 I:long) = (r3 I:java.util.concurrent.TimeUnit), (r0 I:long) java.util.concurrent.TimeUnit.toMillis(long):long type: VIRTUAL \l0x0046: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0049: CONST_STR  (r0 I:java.lang.String) =  \"ms\" \l0x004b: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0052|0x0052: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{java.lang.String com.squareup.picasso.Request.logId((r5 'this' I:com.squareup.picasso.Request A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

