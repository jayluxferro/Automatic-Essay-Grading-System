digraph "CFG forcom.squareup.picasso.OkHttp3Downloader.\<init\>(Ljava\/io\/File;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:okhttp3.OkHttpClient$Builder) =  okhttp3.OkHttpClient$Builder \l0x0002: INVOKE  (r0 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r1 I:okhttp3.Cache) =  okhttp3.Cache \l0x0007: INVOKE  (r1 I:okhttp3.Cache), (r3 I:java.io.File), (r4 I:long) okhttp3.Cache.\<init\>(java.io.File, long):void type: DIRECT \l0x000a: INVOKE  (r3 I:okhttp3.OkHttpClient$Builder) = (r0 I:okhttp3.OkHttpClient$Builder), (r1 I:okhttp3.Cache) okhttp3.OkHttpClient.Builder.cache(okhttp3.Cache):okhttp3.OkHttpClient$Builder type: VIRTUAL \l0x000e: INVOKE  (r3 I:okhttp3.OkHttpClient) = (r3 I:okhttp3.OkHttpClient$Builder) okhttp3.OkHttpClient.Builder.build():okhttp3.OkHttpClient type: VIRTUAL \l0x0012: INVOKE  \l  (r2 I:com.squareup.picasso.OkHttp3Downloader)\l  (r3 I:okhttp3.OkHttpClient)\l com.squareup.picasso.OkHttp3Downloader.\<init\>(okhttp3.OkHttpClient):void type: DIRECT \l0x0015: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: IPUT  \l  (r3 I:boolean)\l  (r2 I:com.squareup.picasso.OkHttp3Downloader)\l com.squareup.picasso.OkHttp3Downloader.sharedClient boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.squareup.picasso.OkHttp3Downloader.\<init\>((r2 'this' I:com.squareup.picasso.OkHttp3Downloader A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

