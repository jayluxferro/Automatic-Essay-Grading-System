digraph "CFG forcom.squareup.picasso.AssetRequestHandler.load(Lcom\/squareup\/picasso\/Request;I)Lcom\/squareup\/picasso\/RequestHandler$Result;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.assetManager != null) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.lang.Object r3 = r1.lock\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|monitor\-enter(r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ ?}"];
Node_6 [shape=record,label="{6\:\ 0x0009|if (r1.assetManager != null) goto L_0x0013\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|r1.assetManager = r1.context.getAssets()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|monitor\-exit(r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014}"];
Node_10 [shape=record,label="{10\:\ 0x0015|REMOVE\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|REMOVE\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|REMOVE\l|throw r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0018}"];
Node_14 [shape=record,label="{14\:\ 0x002d|RETURN\l|return new com.squareup.picasso.RequestHandler.Result(okio.Okio.source(r1.assetManager.open(getFilePath(r2))), com.squareup.picasso.Picasso.LoadedFrom.DISK)\l}"];
MethodNode[shape=record,label="{public com.squareup.picasso.RequestHandler$Result com.squareup.picasso.AssetRequestHandler.load((r1v0 'this' com.squareup.picasso.AssetRequestHandler A[IMMUTABLE_TYPE, THIS]), (r2v0 com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

