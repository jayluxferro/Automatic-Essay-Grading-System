digraph "CFG forcom.squareup.picasso.MarkableInputStream.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.allowExpire boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:long) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0006: CAST  (r2 I:long) = (long) (r9 I:int) \l0x0007: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0008: IGET  (r4 I:long) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limit long \l0x000a: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r0 I:long) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0010: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0011: IGET  (r2 I:int) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limitIncrement int \l0x0013: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0014: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0015: INVOKE  \l  (r6 I:com.squareup.picasso.MarkableInputStream)\l  (r0 I:long)\l com.squareup.picasso.MarkableInputStream.setLimit(long):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r0 I:java.io.InputStream) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.in java.io.InputStream \l0x001a: INVOKE  (r7 I:int) = \l  (r0 I:java.io.InputStream)\l  (r7 I:byte[])\l  (r8 I:int)\l  (r9 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l0x001e: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IGET  (r8 I:long) = (r6 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0023: CAST  (r0 I:long) = (long) (r7 I:int) \l0x0024: ARITH  (r8 I:long) = (r8 I:long) + (r0 I:long) \l0x0025: IPUT  \l  (r8 I:long)\l  (r6 I:com.squareup.picasso.MarkableInputStream)\l com.squareup.picasso.MarkableInputStream.offset long \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{public int com.squareup.picasso.MarkableInputStream.read((r6 'this' I:com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

