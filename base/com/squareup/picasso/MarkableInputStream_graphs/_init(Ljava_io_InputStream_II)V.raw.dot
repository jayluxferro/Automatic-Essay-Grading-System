digraph "CFG forcom.squareup.picasso.MarkableInputStream.\<init\>(Ljava\/io\/InputStream;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.io.InputStream) java.io.InputStream.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0005: IPUT  \l  (r0 I:long)\l  (r2 I:com.squareup.picasso.MarkableInputStream)\l com.squareup.picasso.MarkableInputStream.defaultMark long \l0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: IPUT  \l  (r0 I:boolean)\l  (r2 I:com.squareup.picasso.MarkableInputStream)\l com.squareup.picasso.MarkableInputStream.allowExpire boolean \l0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000b: IPUT  (r0 I:int), (r2 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limitIncrement int \l0x000d: INVOKE  (r0 I:boolean) = (r3 I:java.io.InputStream) java.io.InputStream.markSupported():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream \l0x0015: INVOKE  \l  (r0 I:java.io.BufferedInputStream)\l  (r3 I:java.io.InputStream)\l  (r4 I:int)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream, int):void type: DIRECT \l0x0018: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IPUT  \l  (r3 I:java.io.InputStream)\l  (r2 I:com.squareup.picasso.MarkableInputStream)\l com.squareup.picasso.MarkableInputStream.in java.io.InputStream \l0x001b: IPUT  (r5 I:int), (r2 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limitIncrement int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.squareup.picasso.MarkableInputStream.\<init\>((r2 'this' I:com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

