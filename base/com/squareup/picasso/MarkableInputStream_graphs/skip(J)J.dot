digraph "CFG forcom.squareup.picasso.MarkableInputStream.skip(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.allowExpire != false) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (((r4.offset + r5) \> r4.limit ? 1 : ((r4.offset + r5) == r4.limit ? 0 : \-1)) \<= 0) goto L_0x0017\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|setLimit((r4.offset + r5) + ((long) r4.limitIncrement))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|long r5 = r4.f218in.skip(r5)\lr4.offset = r4.offset + r5\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public long com.squareup.picasso.MarkableInputStream.skip((r4v0 'this' com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

