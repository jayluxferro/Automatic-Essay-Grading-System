digraph "CFG forcom.squareup.picasso.MarkableInputStream.read([B)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.allowExpire boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0006: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[]) \l0x0007: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0008: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0009: IGET  (r2 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limit long \l0x000b: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r0 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0011: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[]) \l0x0012: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0013: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0014: IGET  (r2 I:int) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limitIncrement int \l0x0016: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0017: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0018: INVOKE  \l  (r4 I:com.squareup.picasso.MarkableInputStream)\l  (r0 I:long)\l com.squareup.picasso.MarkableInputStream.setLimit(long):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r0 I:java.io.InputStream) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.in java.io.InputStream \l0x001d: INVOKE  (r5 I:int) = (r0 I:java.io.InputStream), (r5 I:byte[]) java.io.InputStream.read(byte[]):int type: VIRTUAL \l0x0021: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IGET  (r0 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0026: CAST  (r2 I:long) = (long) (r5 I:int) \l0x0027: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0028: IPUT  \l  (r0 I:long)\l  (r4 I:com.squareup.picasso.MarkableInputStream)\l com.squareup.picasso.MarkableInputStream.offset long \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public int com.squareup.picasso.MarkableInputStream.read((r4 'this' I:com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

