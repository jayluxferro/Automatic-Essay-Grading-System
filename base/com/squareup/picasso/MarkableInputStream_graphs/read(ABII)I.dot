digraph "CFG forcom.squareup.picasso.MarkableInputStream.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.allowExpire != false) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|long r2 = (long) r9\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (((r6.offset + r2) \> r6.limit ? 1 : ((r6.offset + r2) == r6.limit ? 0 : \-1)) \<= 0) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|setLimit((r6.offset + r2) + ((long) r6.limitIncrement))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|int r7 = r6.f218in.read(r7, r8, r9)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r7 == \-1) goto L_0x0027\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|r6.offset = r6.offset + ((long) r7)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|RETURN\l|return r7\l}"];
MethodNode[shape=record,label="{public int com.squareup.picasso.MarkableInputStream.read((r6v0 'this' com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r7v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

