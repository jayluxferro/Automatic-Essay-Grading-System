digraph "CFG forcom.squareup.picasso.MarkableInputStream.savePosition(I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l0x0002: CAST  (r2 I:long) = (long) (r5 I:int) \l0x0003: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0004: IGET  (r2 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.limit long \l0x0006: CMP_L  (r5 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  \l  (r4 I:com.squareup.picasso.MarkableInputStream)\l  (r0 I:long)\l com.squareup.picasso.MarkableInputStream.setLimit(long):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r0 I:long) = (r4 I:com.squareup.picasso.MarkableInputStream) com.squareup.picasso.MarkableInputStream.offset long \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long com.squareup.picasso.MarkableInputStream.savePosition((r4 'this' I:com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

