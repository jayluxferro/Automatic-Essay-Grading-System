digraph "CFG forcom.squareup.picasso.MarkableInputStream.read([BII)I" {
subgraph cluster_Region_1048536642 {
label = "R(4:(2:2|(1:4))|5|(1:7)|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_859474756 {
label = "IF [B:1:0x0002] THEN: R(2:2|(1:4)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.allowExpire == false) goto L_0x0004\l}"];
subgraph cluster_Region_60013229 {
label = "R(2:2|(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|long long r2 = (long) r9\l}"];
subgraph cluster_IfRegion_1184600555 {
label = "IF [B:3:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r6.offset + r2) \> r6.limit) goto L_0x000e\l}"];
subgraph cluster_Region_1978228143 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|setLimit(r6.offset + r2 + ((long) r6.limitIncrement))\l}"];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x0018|int int r7 = r6.f218in.read(r7, r8, r9)\l}"];
subgraph cluster_IfRegion_1542260098 {
label = "IF [B:6:0x001f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r7 != \-1) goto L_0x0021\l}"];
subgraph cluster_Region_877216575 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0021|r6.offset += (long) r7\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0027|RETURN\l|return r7\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public int com.squareup.picasso.MarkableInputStream.read((r6v0 'this' com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r7v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_0 -> Node_1;
}

