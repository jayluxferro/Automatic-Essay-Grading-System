digraph "CFG forcom.squareup.picasso.MarkableInputStream.\<init\>(Ljava\/io\/InputStream;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.defaultMark = \-1\lr2.allowExpire = true\lr2.limitIncrement = \-1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (r3.markSupported() != false) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|r3 = new java.io.BufferedInputStream(r3, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|PHI: r3 \l  PHI: (r3v1 java.io.InputStream) = (r3v0 java.io.InputStream), (r3v2 java.io.InputStream) binds: [B:1:0x0011, B:2:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|r2.f218in = r3\lr2.limitIncrement = r5\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.squareup.picasso.MarkableInputStream.\<init\>((r2v0 'this' com.squareup.picasso.MarkableInputStream A[IMMUTABLE_TYPE, THIS]), (r3v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

