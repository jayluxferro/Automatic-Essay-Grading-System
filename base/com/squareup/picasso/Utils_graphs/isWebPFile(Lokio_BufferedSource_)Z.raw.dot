digraph "CFG forcom.squareup.picasso.Utils.isWebPFile(Lokio\/BufferedSource;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:okio.ByteString) =  com.squareup.picasso.Utils.WEBP_FILE_HEADER_RIFF okio.ByteString \l0x0002: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0004: INVOKE  (r0 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r1 I:long)\l  (r0 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[long, double]) = (8 ?[long, double]) \l0x000c: SGET  (r2 I:okio.ByteString) =  com.squareup.picasso.Utils.WEBP_FILE_HEADER_WEBP okio.ByteString \l0x000e: INVOKE  (r3 I:boolean) = \l  (r3 I:okio.BufferedSource)\l  (r0 I:long)\l  (r2 I:okio.ByteString)\l okio.BufferedSource.rangeEquals(long, okio.ByteString):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{static boolean com.squareup.picasso.Utils.isWebPFile((r3 I:okio.BufferedSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

