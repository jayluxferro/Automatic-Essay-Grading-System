digraph "CFG forcom.squareup.picasso.Utils.getLogIdsForHunter(Lcom\/squareup\/picasso\/BitmapHunter;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder(r5)\lcom.squareup.picasso.Action r5 = r4.getAction()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r5 == null) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|r0.append(r5.request.logId())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|java.util.List r4 = r4.getActions()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r4 == null) goto L_0x003c\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|r1 = 0\lint r2 = r4.size()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:5:0x001a, B:10:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x001f\-\>B:10:0x002a\l|if (r1 \>= r2) goto L_0x003c\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r1 \> 0) goto L_0x0025\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|if (r5 == null) goto L_0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|r0.append(\", \")\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|LOOP_END\lLOOP:0: B:6:0x001f\-\>B:10:0x002a\l|r0.append(r4.get(r1).request.logId())\lint r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|return r0.toString()\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.lang.String com.squareup.picasso.Utils.getLogIdsForHunter((r4v0 com.squareup.picasso.BitmapHunter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_14;
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_13 -> Node_11;
Node_14 -> Node_10;
Node_15 -> Node_10;
}

