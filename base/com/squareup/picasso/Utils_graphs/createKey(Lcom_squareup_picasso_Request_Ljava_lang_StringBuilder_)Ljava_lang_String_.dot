digraph "CFG forcom.squareup.picasso.Utils.createKey(Lcom\/squareup\/picasso\/Request;Ljava\/lang\/StringBuilder;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4.stableKey == null) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|r5.ensureCapacity(r4.stableKey.length() + 50)\lr5.append(r4.stableKey)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r4.uri == null) goto L_0x002c\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|java.lang.String r0 = r4.uri.toString()\lr5.ensureCapacity(r0.length() + 50)\lr5.append(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|r5.ensureCapacity(50)\lr5.append(r4.resourceId)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|r5.append(KEY_SEPARATOR)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|if ((r4.rotationDegrees \> 0.0f ? 1 : (r4.rotationDegrees == 0.0f ? 0 : \-1)) == 0) goto L_0x0065\l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|r5.append(\"rotation:\")\lr5.append(r4.rotationDegrees)\l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|if (r4.hasRotationPivot == false) goto L_0x0062\l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|r5.append('@')\lr5.append(r4.rotationPivotX)\lr5.append('x')\lr5.append(r4.rotationPivotY)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0062|r5.append(KEY_SEPARATOR)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0065}"];
Node_14 [shape=record,label="{14\:\ 0x0069|if (r4.hasSize() == false) goto L_0x0080\l}"];
Node_15 [shape=record,label="{15\:\ 0x006b|r5.append(\"resize:\")\lr5.append(r4.targetWidth)\lr5.append('x')\lr5.append(r4.targetHeight)\lr5.append(KEY_SEPARATOR)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0080}"];
Node_17 [shape=record,label="{17\:\ 0x0082|if (r4.centerCrop == false) goto L_0x0092\l}"];
Node_18 [shape=record,label="{18\:\ 0x0084|r5.append(\"centerCrop:\")\lr5.append(r4.centerCropGravity)\lr5.append(KEY_SEPARATOR)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0092}"];
Node_20 [shape=record,label="{20\:\ 0x0094|if (r4.centerInside == false) goto L_0x009e\l}"];
Node_21 [shape=record,label="{21\:\ 0x0096|r5.append(\"centerInside\")\lr5.append(KEY_SEPARATOR)\l}"];
Node_22 [shape=record,label="{22\:\ 0x009e}"];
Node_23 [shape=record,label="{23\:\ 0x00a0|if (r4.transformations == null) goto L_0x00c0\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a2|r1 = 0\lint r2 = r4.transformations.size()\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a9|LOOP_START\lPHI: r1 \l  PHI: (r1v7 int) = (r1v6 int), (r1v8 int) binds: [B:24:0x00a2, B:26:0x00ab] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:25:0x00a9\-\>B:26:0x00ab\l|if (r1 \>= r2) goto L_0x00c0\l}"];
Node_26 [shape=record,label="{26\:\ 0x00ab|LOOP_END\lLOOP:0: B:25:0x00a9\-\>B:26:0x00ab\l|r5.append(r4.transformations.get(r1).key())\lr5.append(KEY_SEPARATOR)\lint r1 = r1 + 1\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c0}"];
Node_28 [shape=record,label="{28\:\ 0x00c4|RETURN\l|return r5.toString()\l}"];
Node_29 [shape=record,label="{29\:\ 0x00c0|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static java.lang.String com.squareup.picasso.Utils.createKey((r4v0 com.squareup.picasso.Request A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_25;
Node_27 -> Node_28;
Node_29 -> Node_27;
}

