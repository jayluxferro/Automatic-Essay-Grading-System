digraph "CFG forcom.squareup.picasso.Utils.getLogIdsForHunter(Lcom\/squareup\/picasso\/BitmapHunter;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.\<init\>(java.lang.String):void type: DIRECT \l0x0005: INVOKE  (r5 I:com.squareup.picasso.Action) = (r4 I:com.squareup.picasso.BitmapHunter) com.squareup.picasso.BitmapHunter.getAction():com.squareup.picasso.Action type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r1 I:com.squareup.picasso.Request) = (r5 I:com.squareup.picasso.Action) com.squareup.picasso.Action.request com.squareup.picasso.Request \l0x000d: INVOKE  (r1 I:java.lang.String) = (r1 I:com.squareup.picasso.Request) com.squareup.picasso.Request.logId():java.lang.String type: VIRTUAL \l0x0011: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r4 I:java.util.List) = (r4 I:com.squareup.picasso.BitmapHunter) com.squareup.picasso.BitmapHunter.getActions():java.util.List type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  (r2 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x003c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST_STR  (r3 I:java.lang.String) =  \", \" \l0x0027: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002e: CHECK_CAST  (r3 I:com.squareup.picasso.Action) = (com.squareup.picasso.Action) (r3 I:?[OBJECT, ARRAY]) \l0x0030: IGET  (r3 I:com.squareup.picasso.Request) = (r3 I:com.squareup.picasso.Action) com.squareup.picasso.Action.request com.squareup.picasso.Request \l0x0032: INVOKE  (r3 I:java.lang.String) = (r3 I:com.squareup.picasso.Request) com.squareup.picasso.Request.logId():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: RETURN  (r4 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{static java.lang.String com.squareup.picasso.Utils.getLogIdsForHunter((r4 I:com.squareup.picasso.BitmapHunter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_11 -> Node_12;
}

