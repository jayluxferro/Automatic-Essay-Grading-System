digraph "CFG forcom.squareup.picasso.Utils.isAirplaneModeOn(Landroid\/content\/Context;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:android.content.ContentResolver) = (r4 I:android.content.Context) android.content.Context.getContentResolver():android.content.ContentResolver type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}, TRY_ENTER]\l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l0x0009: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x0016 A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST_STR  (r1 I:java.lang.String) =  \"airplane_mode_on\" A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l0x000e: INVOKE  (r4 I:int) = \l  (r4 I:android.content.ContentResolver)\l  (r1 I:java.lang.String)\l  (r0 I:int)\l android.provider.Settings.System.getInt(android.content.ContentResolver, java.lang.String, int):int type: STATIC A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r0 I:boolean) A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST_STR  (r1 I:java.lang.String) =  \"airplane_mode_on\" A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l0x0018: INVOKE  (r4 I:int) = \l  (r4 I:android.content.ContentResolver)\l  (r1 I:java.lang.String)\l  (r0 I:int)\l android.provider.Settings.Global.getInt(android.content.ContentResolver, java.lang.String, int):int type: STATIC A[Catch:\{ NullPointerException \-\> 0x0021, SecurityException \-\> 0x0020 \}]\l0x001b: NOP   A[TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r0 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: RETURN  (r0 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: SecurityException null\lSplitter:B:1:0x0005\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lExcHandler: NullPointerException null\lSplitter:B:1:0x0005\l}"];
MethodNode[shape=record,label="{static boolean com.squareup.picasso.Utils.isAirplaneModeOn((r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_13 -> Node_12;
Node_15 -> Node_14;
}

