digraph "CFG forcom.squareup.picasso.MediaStoreRequestHandler.getPicassoKind(II)Lcom\/squareup\/picasso\/MediaStoreRequestHandler$PicassoKind;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MICRO com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l0x0002: IGET  (r0 I:int) = \l  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.width int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MICRO com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l0x0008: IGET  (r0 I:int) = \l  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.height int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: SGET  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MICRO com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: RETURN  \l  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: SGET  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MINI com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l0x0011: IGET  (r0 I:int) = \l  (r0 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.width int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r1 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: SGET  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MINI com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l0x0017: IGET  (r1 I:int) = \l  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.height int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: SGET  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.MINI com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: RETURN  \l  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: SGET  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind) =  com.squareup.picasso.MediaStoreRequestHandler.PicassoKind.FULL com.squareup.picasso.MediaStoreRequestHandler$PicassoKind \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: RETURN  \l  (r1 I:com.squareup.picasso.MediaStoreRequestHandler$PicassoKind)\l \l}"];
MethodNode[shape=record,label="{static com.squareup.picasso.MediaStoreRequestHandler$PicassoKind com.squareup.picasso.MediaStoreRequestHandler.getPicassoKind((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

