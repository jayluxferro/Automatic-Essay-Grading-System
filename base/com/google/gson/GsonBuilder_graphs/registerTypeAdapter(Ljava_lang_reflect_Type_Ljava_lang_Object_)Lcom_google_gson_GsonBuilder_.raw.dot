digraph "CFG forcom.google.gson.GsonBuilder.registerTypeAdapter(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Object;)Lcom\/google\/gson\/GsonBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.JsonSerializer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.JsonDeserializer \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.InstanceCreator \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.TypeAdapter \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0011 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|0x0014: INVOKE  (r1 I:boolean) com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean):void type: STATIC \l0x0017: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.InstanceCreator \l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0023 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: IGET  (r1 I:java.util.Map\<java.lang.reflect.Type, com.google.gson.InstanceCreator\<?\>\>) = (r3 I:com.google.gson.GsonBuilder) com.google.gson.GsonBuilder.instanceCreators java.util.Map \l0x001d: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x001e: CHECK_CAST  (r2 I:com.google.gson.InstanceCreator) = (com.google.gson.InstanceCreator) (r2 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  \l  (r1 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0029 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.JsonDeserializer \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: INVOKE  (r0 I:com.google.gson.reflect.TypeToken) = (r4 I:java.lang.reflect.Type) com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type):com.google.gson.reflect.TypeToken type: STATIC \l0x002d: IGET  (r1 I:java.util.List\<com.google.gson.TypeAdapterFactory\>) = (r3 I:com.google.gson.GsonBuilder) com.google.gson.GsonBuilder.factories java.util.List \l0x002f: INVOKE  (r0 I:com.google.gson.TypeAdapterFactory) = \l  (r0 I:com.google.gson.reflect.TypeToken)\l  (r5 I:java.lang.Object)\l com.google.gson.internal.bind.TreeTypeAdapter.newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken, java.lang.Object):com.google.gson.TypeAdapterFactory type: STATIC \l0x0033: INVOKE  (r1 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) com.google.gson.TypeAdapter \l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|0x0038: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003a|0x003a: IGET  (r0 I:java.util.List\<com.google.gson.TypeAdapterFactory\>) = (r3 I:com.google.gson.GsonBuilder) com.google.gson.GsonBuilder.factories java.util.List \l0x003c: INVOKE  (r4 I:com.google.gson.reflect.TypeToken) = (r4 I:java.lang.reflect.Type) com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type):com.google.gson.reflect.TypeToken type: STATIC \l0x0040: CHECK_CAST  (r5 I:com.google.gson.TypeAdapter) = (com.google.gson.TypeAdapter) (r5 I:?[OBJECT, ARRAY]) \l0x0042: INVOKE  (r4 I:com.google.gson.TypeAdapterFactory) = \l  (r4 I:com.google.gson.reflect.TypeToken)\l  (r5 I:com.google.gson.TypeAdapter)\l com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapter):com.google.gson.TypeAdapterFactory type: STATIC \l0x0046: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: RETURN  (r3 I:com.google.gson.GsonBuilder) \l}"];
MethodNode[shape=record,label="{public com.google.gson.GsonBuilder com.google.gson.GsonBuilder.registerTypeAdapter((r3 'this' I:com.google.gson.GsonBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
}

