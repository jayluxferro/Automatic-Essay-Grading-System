digraph "CFG forcom.google.gson.stream.JsonReader.\<init\>(Ljava\/io\/Reader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r0 I:boolean), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lenient boolean \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l0x0008: NEW_ARRAY  (r1 I:char[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x000a: IPUT  (r1 I:char[]), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x000c: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x000e: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0010: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0012: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l0x0014: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0018: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001a: IPUT  (r2 I:int[]), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x001c: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x001e: IGET  (r0 I:int[]) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x0020: IGET  (r2 I:int) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0022: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x0024: IPUT  (r3 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0026: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0027: APUT  \l  (r0 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[int, float])\l \l0x0029: NEW_ARRAY  (r0 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x002b: IPUT  \l  (r0 I:java.lang.String[])\l  (r4 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.pathNames java.lang.String[] \l0x002d: NEW_ARRAY  (r0 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x002f: IPUT  (r0 I:int[]), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0031|0x0031: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0033|0x0033: IPUT  \l  (r5 I:java.io.Reader)\l  (r4 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.in java.io.Reader \l}"];
Node_3 [shape=record,label="{3\:\ 0x0035|0x0035: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: NEW_INSTANCE  (r5 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0038: CONST_STR  (r0 I:java.lang.String) =  \"in == null\" \l0x003a: INVOKE  \l  (r5 I:java.lang.NullPointerException)\l  (r0 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|0x003d: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.gson.stream.JsonReader.\<init\>((r4 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

