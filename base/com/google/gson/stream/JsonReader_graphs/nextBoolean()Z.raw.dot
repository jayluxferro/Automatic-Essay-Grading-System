digraph "CFG forcom.google.gson.stream.JsonReader.nextBoolean()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.doPeek():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IPUT  (r2 I:int), (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x000f: IGET  (r0 I:int[]) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x0011: IGET  (r1 I:int) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0013: ARITH  (r1 I:int) = (r1 I:int) \- (r3 I:int) \l0x0014: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0016: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0017: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN  (r3 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IPUT  (r2 I:int), (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x001f: IGET  (r0 I:int[]) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x0021: IGET  (r1 I:int) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0023: ARITH  (r1 I:int) = (r1 I:int) \- (r3 I:int) \l0x0024: AGET  (r4 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0026: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l0x0027: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: RETURN  (r2 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"Expected a boolean but was \" \l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r2 I:com.google.gson.stream.JsonToken) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.String) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0048: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean com.google.gson.stream.JsonReader.nextBoolean((r5 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

