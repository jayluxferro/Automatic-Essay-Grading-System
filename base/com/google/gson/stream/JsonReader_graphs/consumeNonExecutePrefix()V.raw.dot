digraph "CFG forcom.google.gson.stream.JsonReader.consumeNonExecutePrefix()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  (r3 I:com.google.gson.stream.JsonReader), (r0 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l0x0004: IGET  (r1 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0006: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x0007: IPUT  (r1 I:int), (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0009: IGET  (r0 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x000b: SGET  (r1 I:char[]) =  com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX char[] \l0x000d: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x000e: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000f: IGET  (r1 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: SGET  (r0 I:char[]) =  com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX char[] \l0x0015: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0016: INVOKE  (r0 I:boolean) = (r3 I:com.google.gson.stream.JsonReader), (r0 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: SGET  (r1 I:char[]) =  com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX char[] \l0x0020: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r1 I:char[]) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0025: IGET  (r2 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0028: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r1 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x002a: SGET  (r2 I:char[]) =  com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX char[] \l0x002c: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = \l  (r2 I:char[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IGET  (r0 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0036: SGET  (r1 I:char[]) =  com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX char[] \l0x0038: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0039: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x003a: IPUT  (r0 I:int), (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonReader.consumeNonExecutePrefix((r3 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_6;
Node_12 -> Node_13;
}

