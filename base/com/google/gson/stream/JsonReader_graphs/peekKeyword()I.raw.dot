digraph "CFG forcom.google.gson.stream.JsonReader.peekKeyword()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0002: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0004: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (116(0x74, float:1.63E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (84 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0029 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, short, byte, char]) = (70 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (110(0x6e, float:1.54E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0023 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = (78 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0022 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|0x0022: RETURN  (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: CONST_STR  (r0 I:java.lang.String) =  \"null\" \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"NULL\" \l0x0027: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: CONST_STR  (r0 I:java.lang.String) =  \"false\" \l0x002b: CONST_STR  (r2 I:java.lang.String) =  \"FALSE\" \l0x002d: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: CONST_STR  (r0 I:java.lang.String) =  \"true\" \l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"TRUE\" \l0x0033: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: INVOKE  (r4 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0038: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: IF  (r5 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:32:0x0062 \l}"];
Node_21 [shape=record,label="{21\:\ 0x003b|0x003b: IGET  (r6 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x003d: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l0x003e: IGET  (r7 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: IF  (r6 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:26:0x004b \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: ARITH  (r6 I:int) = (r5 I:int) + (1 int) \l0x0044: INVOKE  (r6 I:boolean) = (r8 I:com.google.gson.stream.JsonReader), (r6 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x0048|0x0048: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x004b \l}"];
Node_25 [shape=record,label="{25\:\ 0x004a|0x004a: RETURN  (r1 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004b|0x004b: IGET  (r6 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x004d: IGET  (r7 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x004f: ARITH  (r7 I:int) = (r7 I:int) + (r5 I:int) \l0x0050: AGET  (r6 I:char A[IMMUTABLE_TYPE]) = \l  (r6 I:char[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0052: INVOKE  (r7 I:char) = (r0 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|0x0056: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x005f \l}"];
Node_28 [shape=record,label="{28\:\ 0x0058|0x0058: INVOKE  (r7 I:char) = (r2 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x005c|0x005c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x005f \l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|0x005e: RETURN  (r1 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x005f|0x005f: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0062|0x0062: IGET  (r0 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0064: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) \l0x0065: IGET  (r2 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_33 [shape=record,label="{33\:\ 0x0067|0x0067: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:36:0x0071 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0069|0x0069: ARITH  (r0 I:int) = (r4 I:int) + (1 int) \l0x006b: INVOKE  (r0 I:boolean) = (r8 I:com.google.gson.stream.JsonReader), (r0 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x006f|0x006f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x007f \l}"];
Node_36 [shape=record,label="{36\:\ 0x0071|0x0071: IGET  (r0 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0073: IGET  (r2 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0075: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x0076: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0078: INVOKE  (r0 I:boolean) = (r8 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.isLiteral(char):boolean type: DIRECT \l}"];
Node_37 [shape=record,label="{37\:\ 0x007c|0x007c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x007f \l}"];
Node_38 [shape=record,label="{38\:\ 0x007e|0x007e: RETURN  (r1 I:int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x007f|0x007f: IGET  (r0 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0081: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int) \l0x0082: IPUT  (r0 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0084: IPUT  (r3 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_40 [shape=record,label="{40\:\ 0x0086|0x0086: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private int com.google.gson.stream.JsonReader.peekKeyword((r8 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_18[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_17[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_20;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_39 -> Node_40;
}

