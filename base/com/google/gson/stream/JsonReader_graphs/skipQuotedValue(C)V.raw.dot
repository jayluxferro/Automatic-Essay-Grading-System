digraph "CFG forcom.google.gson.stream.JsonReader.skipQuotedValue(C)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:char[]) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0004: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:15:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: ARITH  (r4 I:int) = (r1 I:int) + (1 int) \l0x000b: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IPUT  (r4 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CONST  (r5 I:?[int, float, short, byte, char]) = (92 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IPUT  (r4 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0018: INVOKE  (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.readEscapeCharacter():char type: DIRECT \l0x001b: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x001d: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0026: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x0027: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0029: IPUT  (r4 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x002f: INVOKE  (r1 I:boolean) = (r6 I:com.google.gson.stream.JsonReader), (r3 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: CONST_STR  (r7 I:java.lang.String) =  \"Unterminated string\" \l0x0038: INVOKE  (r7 I:java.io.IOException) = \l  (r6 I:com.google.gson.stream.JsonReader)\l  (r7 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|0x003c: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonReader.skipQuotedValue((r6 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r7 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_2;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_2;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_1[style=dashed];
Node_18 -> Node_19;
}

