digraph "CFG forcom.google.gson.stream.JsonReader.nextName()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.doPeek():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r0 I:java.lang.String) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextUnquotedValue():java.lang.String type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST  (r0 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r0 I:java.lang.String) = (r3 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.nextQuotedValue(char):java.lang.String type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r1 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CONST  (r0 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l0x0022: INVOKE  (r0 I:java.lang.String) = (r3 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.nextQuotedValue(char):java.lang.String type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: IPUT  (r1 I:int), (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x0029: IGET  (r1 I:java.lang.String[]) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathNames java.lang.String[] \l0x002b: IGET  (r2 I:int) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x002d: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x002f: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r0 I:java.lang.String) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0034: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0039: CONST_STR  (r2 I:java.lang.String) =  \"Expected a name but was \" \l0x003b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r2 I:com.google.gson.stream.JsonToken) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r2 I:java.lang.String) = (r3 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0050: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0053|0x0053: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.google.gson.stream.JsonReader.nextName((r3 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

