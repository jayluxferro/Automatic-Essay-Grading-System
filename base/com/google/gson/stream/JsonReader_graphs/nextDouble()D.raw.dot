digraph "CFG forcom.google.gson.stream.JsonReader.nextDouble()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.doPeek():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IPUT  (r2 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x000f: IGET  (r0 I:int[]) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x0011: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0015: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0017: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0019: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x001b: IGET  (r0 I:long) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedLong long \l0x001d: CAST  (r0 I:double) = (double) (r0 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN  (r0 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0021: CONST  (r3 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x0027: IGET  (r1 I:char[]) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0029: IGET  (r4 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x002b: IGET  (r5 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedNumberLength int \l0x002d: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:char[])\l  (r4 I:int)\l  (r5 I:int)\l java.lang.String.\<init\>(char[], int, int):void type: DIRECT \l0x0030: IPUT  \l  (r0 I:java.lang.String)\l  (r6 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x0032: IGET  (r0 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0034: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedNumberLength int \l0x0036: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0037: IPUT  (r0 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0073 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0043 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: INVOKE  (r0 I:java.lang.String) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextUnquotedValue():java.lang.String type: DIRECT \l0x004b: IPUT  \l  (r0 I:java.lang.String)\l  (r6 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0051 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|0x0051: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0053: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0055: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0058: CONST_STR  (r2 I:java.lang.String) =  \"Expected a double but was \" \l0x005a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005d: INVOKE  (r2 I:com.google.gson.stream.JsonToken) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0061: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r2 I:java.lang.String) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0072|0x0072: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|0x0073: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0078 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|0x0075: CONST  (r0 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: CONST  (r0 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x007a|0x007a: INVOKE  (r0 I:java.lang.String) = (r6 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.nextQuotedValue(char):java.lang.String type: DIRECT \l0x007e: IPUT  \l  (r0 I:java.lang.String)\l  (r6 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l}"];
Node_26 [shape=record,label="{26\:\ 0x0080|0x0080: IPUT  (r3 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x0082: IGET  (r0 I:java.lang.String) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x0084: INVOKE  (r0 I:double) = (r0 I:java.lang.String) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x0088: IGET  (r3 I:boolean) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lenient boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x008a|0x008a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00b7 \l}"];
Node_28 [shape=record,label="{28\:\ 0x008c|0x008c: INVOKE  (r3 I:boolean) = (r0 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x0090|0x0090: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0099 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|0x0092: INVOKE  (r3 I:boolean) = (r0 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x0096|0x0096: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0099 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0099|0x0099: NEW_INSTANCE  (r2 I:com.google.gson.stream.MalformedJsonException) =  com.google.gson.stream.MalformedJsonException \l0x009b: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x009d: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a0: CONST_STR  (r4 I:java.lang.String) =  \"JSON forbids NaN and infinities: \" \l0x00a2: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a5: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x00a8: INVOKE  (r0 I:java.lang.String) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x00ac: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00af: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b3: INVOKE  \l  (r2 I:com.google.gson.stream.MalformedJsonException)\l  (r0 I:java.lang.String)\l com.google.gson.stream.MalformedJsonException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b6|0x00b6: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00b7|0x00b7: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b8: IPUT  \l  (r3 I:java.lang.String)\l  (r6 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x00ba: IPUT  (r2 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x00bc: IGET  (r2 I:int[]) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x00be: IGET  (r3 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x00c0: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x00c2: AGET  (r4 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x00c4: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x00c6: APUT  \l  (r2 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00c8|0x00c8: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public double com.google.gson.stream.JsonReader.nextDouble((r6 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_26;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_22[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_26;
Node_18 -> Node_20;
Node_18 -> Node_26[style=dashed];
Node_20 -> Node_21;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_35 -> Node_36;
}

