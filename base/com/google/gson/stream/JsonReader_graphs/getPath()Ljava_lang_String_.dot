digraph "CFG forcom.google.gson.stream.JsonReader.getPath()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(kotlin.text.Typography.dollar)\lint r1 = r4.stackSize\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:8:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:8:0x003b\l|if (r2 \>= r1) goto L_0x003e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f}"];
Node_3 [shape=record,label="{3\:\ 0x0013|switch(r4.stack[r2]) \{\l    case 1: goto L_0x002a;\l    case 2: goto L_0x002a;\l    case 3: goto L_0x0017;\l    case 4: goto L_0x0017;\l    case 5: goto L_0x0017;\l    default: goto L_0x0016;\l\}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|r0.append('.')\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|if (r4.pathNames[r2] == null) goto L_0x003b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|r0.append(r4.pathNames[r2])\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|r0.append('[')\lr0.append(r4.pathIndices[r2])\lr0.append(']')\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:8:0x003b\l|int r2 = r2 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e}"];
Node_10 [shape=record,label="{10\:\ 0x0042|RETURN\l|return r0.toString()\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String com.google.gson.stream.JsonReader.getPath((r4v0 'this' com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_14;
Node_7 -> Node_12;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_14 -> Node_8;
Node_15 -> Node_8;
}

