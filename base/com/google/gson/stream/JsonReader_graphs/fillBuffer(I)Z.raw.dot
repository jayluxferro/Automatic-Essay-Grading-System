digraph "CFG forcom.google.gson.stream.JsonReader.fillBuffer(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:char[]) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0002: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l0x0004: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0006: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0007: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l0x0009: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x000b: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0012: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0014: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0015: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0017: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0019: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x001b: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r0 I:java.lang.Object)\l  (r3 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IPUT  (r3 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IPUT  (r3 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IGET  (r1 I:java.io.Reader) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.in java.io.Reader \l0x0025: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0027: ARRAY_LENGTH  (r4 I:int) = (r0 I:?[]) \l0x0028: IGET  (r5 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x002a: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x002b: INVOKE  (r1 I:int) = \l  (r1 I:java.io.Reader)\l  (r0 I:char[])\l  (r2 I:int)\l  (r4 I:int)\l java.io.Reader.read(char[], int, int):int type: VIRTUAL \l0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: IGET  (r2 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0034: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0035: IPUT  (r2 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0037: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0039: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0046: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (65279(0xfeff, float:9.1475E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0057 \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x004d: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x004e: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0050: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l0x0052: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0053: IPUT  (r1 I:int), (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l0x0055: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: IGET  (r1 I:int) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: IF  (r1 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: RETURN  (r2 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005c|0x005c: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.google.gson.stream.JsonReader.fillBuffer((r6 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_19;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_5;
Node_17 -> Node_18[style=dashed];
}

