digraph "CFG forcom.google.gson.stream.JsonReader.nextQuotedValue(C)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:char[]) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IGET  (r2 I:int) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0005: IGET  (r3 I:int) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x000a: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:23:0x005b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: ARITH  (r7 I:int) = (r2 I:int) + (1 int) \l0x000f: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0027 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IPUT  (r7 I:int), (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0015: ARITH  (r7 I:int) = (r7 I:int) \- (r4 I:int) \l0x0016: ARITH  (r7 I:int) = (r7 I:int) \- (r6 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: NEW_INSTANCE  (r10 I:java.lang.String) =  java.lang.String \l0x001b: INVOKE  \l  (r10 I:java.lang.String)\l  (r0 I:char[])\l  (r4 I:int)\l  (r7 I:int)\l java.lang.String.\<init\>(char[], int, int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: RETURN  (r10 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r0 I:char[])\l  (r4 I:int)\l  (r7 I:int)\l java.lang.StringBuilder.append(char[], int, int):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r10 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: RETURN  (r10 I:java.lang.String) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: CONST  (r8 I:?[int, float, short, byte, char]) = (92 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004e \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: IPUT  (r7 I:int), (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x002d: ARITH  (r7 I:int) = (r7 I:int) \- (r4 I:int) \l0x002e: ARITH  (r7 I:int) = (r7 I:int) \- (r6 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: ARITH  (r1 I:int) = (r7 I:int) + (1 int) \l0x0033: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x0035: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0037: INVOKE  (r1 I:int) = (r1 I:int), (r5 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x003b: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x003e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r0 I:char[])\l  (r4 I:int)\l  (r7 I:int)\l java.lang.StringBuilder.append(char[], int, int):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r2 I:char) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.readEscapeCharacter():char type: DIRECT \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0049: IGET  (r2 I:int) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x004b: IGET  (r3 I:int) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: IGET  (r2 I:int) = (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0054: ARITH  (r2 I:int) = (r2 I:int) + (r6 I:int) \l0x0055: IPUT  (r2 I:int), (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0057: IPUT  (r7 I:int), (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x006b \l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|0x005d: ARITH  (r1 I:int) = (r2 I:int) \- (r4 I:int) \l0x005f: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x0061: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0063: INVOKE  (r1 I:int) = (r1 I:int), (r5 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0067: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x006a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x006b|0x006b: ARITH  (r3 I:int) = (r2 I:int) \- (r4 I:int) \l0x006d: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r0 I:char[])\l  (r4 I:int)\l  (r3 I:int)\l java.lang.StringBuilder.append(char[], int, int):java.lang.StringBuilder type: VIRTUAL \l0x0070: IPUT  (r2 I:int), (r9 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0072: INVOKE  (r2 I:boolean) = (r9 I:com.google.gson.stream.JsonReader), (r6 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0076|0x0076: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0079 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0079|0x0079: CONST_STR  (r10 I:java.lang.String) =  \"Unterminated string\" \l0x007b: INVOKE  (r10 I:java.io.IOException) = \l  (r9 I:com.google.gson.stream.JsonReader)\l  (r10 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x007f|0x007f: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.lang.String com.google.gson.stream.JsonReader.nextQuotedValue((r9 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r10 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_2;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_3;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_1[style=dashed];
Node_28 -> Node_29;
}

