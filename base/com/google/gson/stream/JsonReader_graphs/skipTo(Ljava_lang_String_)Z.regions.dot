digraph "CFG forcom.google.gson.stream.JsonReader.skipTo(Ljava\/lang\/String;)Z" {
subgraph cluster_Region_1561856662 {
label = "R(2:0|(2:1|(2:(1:5)|(2:(1:8)(2:(1:(1:13)(0))|14)|12))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r6.length()\l}"];
subgraph cluster_LoopRegion_1857914399 {
label = "LOOP:0: (2:1|(2:(1:5)|(2:(1:8)(2:(1:(1:13)(0))|14)|12)))";
node [shape=record,color=blue];
subgraph cluster_Region_1621804010 {
label = "R(2:1|(2:(1:5)|(2:(1:8)(2:(1:(1:13)(0))|14)|12)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lLOOP:0: B:1:0x0004\-\>B:12:0x0039\l|int r3 = 0\l}"];
subgraph cluster_Region_1614553701 {
label = "R(2:(1:5)|(2:(1:8)(2:(1:(1:13)(0))|14)|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_920000308 {
label = "IF [B:2:0x000a, B:4:0x0010] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if ((r5.pos + r0) \> r5.limit) goto L_0x000c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|ADDED_TO_REGION\l|if (fillBuffer(r0) != true) goto L_0x0013\l}"];
subgraph cluster_Region_2115773396 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_28190351 {
label = "R(2:(1:8)(2:(1:(1:13)(0))|14)|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_52549083 {
label = "IF [B:7:0x001d] THEN: R(1:8) ELSE: R(2:(1:(1:13)(0))|14)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r5.buffer[r5.pos] == 10) goto L_0x001f\l}"];
subgraph cluster_Region_42987728 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|r5.lineNumber++\lr5.lineStart = r5.pos + 1\l}"];
}
subgraph cluster_Region_496132566 {
label = "R(2:(1:(1:13)(0))|14)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1262254449 {
label = "LOOP:1: (1:(1:13)(0))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002a|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:7:0x001d, B:13:0x003f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x002a\-\>B:13:0x003f\l|if (r3 \< r0) goto L_0x002c\l}"];
subgraph cluster_Region_1836627637 {
label = "R(1:(1:13)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2073231103 {
label = "IF [B:11:0x0037] THEN: R(1:13) ELSE: R(0)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0037|if (r5.buffer[r5.pos + r3] == r6.charAt(r3)) goto L_0x003f\l}"];
subgraph cluster_Region_2105227731 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x003f|LOOP_END\lLOOP:1: B:9:0x002a\-\>B:13:0x003f\l|r3++\l}"];
}
subgraph cluster_Region_1627007436 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0042|RETURN\l|return true\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0039|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:12:0x0039\l|r5.pos++\l}"];
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0014}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002c}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0013|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0042|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0039|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0039|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean com.google.gson.stream.JsonReader.skipTo((r5v0 'this' com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6[style=dashed];
Node_4 -> Node_6[style=dashed];
Node_4 -> Node_15;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_9 -> Node_16[style=dashed];
Node_11 -> Node_13;
Node_11 -> Node_18[style=dashed];
Node_13 -> Node_9;
Node_12 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_10 -> Node_11;
Node_15 -> Node_5;
Node_16 -> Node_14;
Node_17 -> Node_12;
Node_18 -> Node_12;
}

