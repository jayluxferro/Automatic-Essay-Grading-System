digraph "CFG forcom.google.gson.stream.JsonReader.nextNonWhitespace(Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:char[]) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0002: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0004: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IPUT  (r1 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x000b: INVOKE  (r1 I:boolean) = (r7 I:com.google.gson.stream.JsonReader), (r3 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0030 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN  (r8 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: NEW_INSTANCE  (r8 I:java.io.EOFException) =  java.io.EOFException \l0x0017: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"End of input\" \l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r1 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x0025: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0028: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002c: INVOKE  (r8 I:java.io.EOFException), (r0 I:java.lang.String) java.io.EOFException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0032: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: ARITH  (r4 I:int) = (r1 I:int) + (1 int) \l0x0036: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x0038: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0045 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x003e: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x003f: IPUT  (r1 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x0041: IPUT  (r4 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: CONST  (r5 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00b8 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|0x0049: CONST  (r5 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00b8 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: CONST  (r5 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0052 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: CONST  (r5 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|0x0054: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00a3 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: IPUT  (r4 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0058: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0059|0x0059: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x006c \l}"];
Node_25 [shape=record,label="{25\:\ 0x005b|0x005b: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x005d: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x005e: IPUT  (r2 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0060: INVOKE  (r2 I:boolean) = (r7 I:com.google.gson.stream.JsonReader), (r6 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l0x0064: IGET  (r4 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0066: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l0x0067: IPUT  (r4 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x006c \l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|0x006b: RETURN  (r1 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x006c|0x006c: INVOKE  (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x006f: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0071: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0073: CONST  (r4 I:?[int, float, short, byte, char]) = (42 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0075|0x0075: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0088 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0077|0x0077: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x007a \l}"];
Node_31 [shape=record,label="{31\:\ 0x0079|0x0079: RETURN  (r1 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x007a|0x007a: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x007c: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x007d: IPUT  (r1 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x007f: INVOKE  (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.skipToEndOfLine():void type: DIRECT \l0x0082: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0084: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_33 [shape=record,label="{33\:\ 0x0088|0x0088: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x008a: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x008b: IPUT  (r1 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x008d: CONST_STR  (r1 I:java.lang.String) =  \"*\/\" \l0x008f: INVOKE  (r1 I:boolean) = \l  (r7 I:com.google.gson.stream.JsonReader)\l  (r1 I:java.lang.String)\l com.google.gson.stream.JsonReader.skipTo(java.lang.String):boolean type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x0093|0x0093: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x009c \l}"];
Node_35 [shape=record,label="{35\:\ 0x0095|0x0095: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0097: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) \l0x0098: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_36 [shape=record,label="{36\:\ 0x009c|0x009c: CONST_STR  (r8 I:java.lang.String) =  \"Unterminated comment\" \l0x009e: INVOKE  (r8 I:java.io.IOException) = \l  (r7 I:com.google.gson.stream.JsonReader)\l  (r8 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_37 [shape=record,label="{37\:\ 0x00a2|0x00a2: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00a3|0x00a3: CONST  (r2 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00a5|0x00a5: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00b5 \l}"];
Node_40 [shape=record,label="{40\:\ 0x00a7|0x00a7: IPUT  (r4 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00a9: INVOKE  (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x00ac: INVOKE  (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.skipToEndOfLine():void type: DIRECT \l0x00af: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00b1: IGET  (r2 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_41 [shape=record,label="{41\:\ 0x00b5|0x00b5: IPUT  (r4 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_42 [shape=record,label="{42\:\ 0x00b7|0x00b7: RETURN  (r1 I:int) \l}"];
Node_43 [shape=record,label="{43\:\ 0x00b8|0x00b8: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private int com.google.gson.stream.JsonReader.nextNonWhitespace((r7 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_43;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_43;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_43;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_43[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_38;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_32 -> Node_1;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_1;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_1;
Node_41 -> Node_42;
Node_43 -> Node_1;
}

