digraph "CFG forcom.google.gson.stream.JsonReader.skipValue()V" {
subgraph cluster_Region_1697565274 {
label = "R(3:0|(4:1|(1:3)|(1:6)(1:(1:8)(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))))|33)|35)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
subgraph cluster_LoopRegion_473518312 {
label = "LOOP:0: (4:1|(1:3)|(1:6)(1:(1:8)(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))))|33)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x006a|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:34:0x006a\l|if (r1 != 0) goto L_0x0002\l}"];
subgraph cluster_Region_1117279092 {
label = "R(4:1|(1:3)|(1:6)(1:(1:8)(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))))|33)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:34:0x006a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:34:0x006a\l|int int r2 = r5.peeked\l}"];
subgraph cluster_IfRegion_716273122 {
label = "IF [B:2:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r2 == 0) goto L_0x0006\l}"];
subgraph cluster_Region_1468469274 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|int r2 = doPeek()\l}"];
}
}
subgraph cluster_IfRegion_2094653004 {
label = "IF [B:5:0x000c] THEN: R(1:6) ELSE: R(1:(1:8)(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r2 == 3) goto L_0x000e\l}"];
subgraph cluster_Region_258888892 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|push(1)\lr1++\l}"];
}
subgraph cluster_Region_822940929 {
label = "R(1:(1:8)(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29)))))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2094674256 {
label = "IF [B:7:0x0014] THEN: R(1:8) ELSE: R(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r2 == 1) goto L_0x0016\l}"];
subgraph cluster_Region_478228844 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0016|push(3)\lr1++\l}"];
}
subgraph cluster_Region_144497401 {
label = "R(1:(1:11)(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_322103569 {
label = "IF [B:10:0x001d] THEN: R(1:11) ELSE: R(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001d|if (r2 == 4) goto L_0x001f\l}"];
subgraph cluster_Region_2089049956 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001f|r5.stackSize\-\-\lr1\-\-\l}"];
}
subgraph cluster_Region_118463751 {
label = "R(1:(1:14)(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_848138480 {
label = "IF [B:13:0x0028] THEN: R(1:14) ELSE: R(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0028|if (r2 == 2) goto L_0x002a\l}"];
subgraph cluster_Region_1867485544 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x002a|r5.stackSize\-\-\lr1\-\-\l}"];
}
subgraph cluster_Region_1065465005 {
label = "R(1:(1:32)(1:(1:31)(1:(1:30)(1:(1:29))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_9704275 {
label = "IF [B:16:0x0034, B:18:0x0038] THEN: R(1:32) ELSE: R(1:(1:31)(1:(1:30)(1:(1:29)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0034|if (r2 == 14) goto L_0x0065\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|ADDED_TO_REGION\l|if (r2 == 10) goto L_0x0065\l}"];
subgraph cluster_Region_1719470913 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0065|skipUnquotedValue()\l}"];
}
subgraph cluster_Region_140009061 {
label = "R(1:(1:31)(1:(1:30)(1:(1:29)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_770302624 {
label = "IF [B:20:0x003d, B:22:0x0041] THEN: R(1:31) ELSE: R(1:(1:30)(1:(1:29))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x003d|if (r2 == 8) goto L_0x005f\l}"];
Node_22 [shape=record,label="{22\:\ 0x0041|ADDED_TO_REGION\l|if (r2 == 12) goto L_0x005f\l}"];
subgraph cluster_Region_1933843916 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x005f|skipQuotedValue(org.osgeo.proj4j.units.AngleFormat.CH_MIN_SYMBOL)\l}"];
}
subgraph cluster_Region_1095957461 {
label = "R(1:(1:30)(1:(1:29))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_689433709 {
label = "IF [B:24:0x0046, B:26:0x004a] THEN: R(1:30) ELSE: R(1:(1:29)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0046|if (r2 == 9) goto L_0x0059\l}"];
Node_26 [shape=record,label="{26\:\ 0x004a|ADDED_TO_REGION\l|if (r2 == 13) goto L_0x0059\l}"];
subgraph cluster_Region_1341900733 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0059|skipQuotedValue(kotlin.text.Typography.quote)\l}"];
}
subgraph cluster_Region_93983569 {
label = "R(1:(1:29)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2009330607 {
label = "IF [B:28:0x004f] THEN: R(1:29) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x004f|if (r2 == 16) goto L_0x0051\l}"];
subgraph cluster_Region_1457771603 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0051|r5.pos += r5.peekedNumberLength\l}"];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
Node_33 [shape=record,label="{33\:\ 0x0068|PHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v1 int), (r1v1 int), (r1v1 int), (r1v1 int), (r1v7 int), (r1v8 int), (r1v9 int), (r1v10 int) binds: [B:32:0x0065, B:31:0x005f, B:30:0x0059, B:28:0x004f, B:29:0x0051, B:14:0x002a, B:11:0x001f, B:8:0x0016, B:6:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|r5.peeked = 0\l}"];
}
}
Node_35 [shape=record,label="{35\:\ 0x006c|int[] int[] r0 = r5.pathIndices\lint int r1 = r5.stackSize \- 1\lr0[r1] = r0[r1] + 1\lr5.pathNames[r5.stackSize \- 1] = \"null\"\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x000a|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v13 int) binds: [B:2:0x0004, B:3:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001c}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0027}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0032}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0036}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x003b}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x003f}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0044}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0048}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x004d}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x007f}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x006c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.gson.stream.JsonReader.skipValue((r5v0 'this' com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_34 -> Node_1;
Node_34 -> Node_37[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_33;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_33;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_33;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_33;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_32;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_32;
Node_32 -> Node_33;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_31 -> Node_33;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_30 -> Node_33;
Node_28 -> Node_29;
Node_28 -> Node_33[style=dashed];
Node_29 -> Node_33;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_4 -> Node_5;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_37 -> Node_35;
}

