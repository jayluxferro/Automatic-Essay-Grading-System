digraph "CFG forcom.google.gson.stream.JsonReader.readEscapeCharacter()C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0002: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r8 I:com.google.gson.stream.JsonReader), (r2 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST_STR  (r0 I:java.lang.String) =  \"Unterminated escape sequence\" \l0x0010: INVOKE  (r0 I:java.io.IOException) = \l  (r8 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r0 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0017: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0019: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x001b: IPUT  (r3 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x001d: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x00cd \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r2 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00d6 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: CONST  (r2 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00d6 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: CONST  (r2 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00d6 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (92 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00d6 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: CONST  (r2 I:?[int, float, short, byte, char]) = (98 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x00ca \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x00c7 \l}"];
Node_21 [shape=record,label="{21\:\ 0x003b|0x003b: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (110(0x6e, float:1.54E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x00c6 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|0x003f: CONST  (r3 I:?[int, float, short, byte, char]) = (114(0x72, float:1.6E\-43) ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x00c3 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0043|0x0043: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[116, 117] t:[0x00c0, 0x004d] \l}"];
Node_26 [shape=record,label="{26\:\ 0x0046|0x0046: CONST_STR  (r0 I:java.lang.String) =  \"Invalid escape sequence\" \l0x0048: INVOKE  (r0 I:java.io.IOException) = \l  (r8 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x004d|0x004d: IGET  (r0 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x004f: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0050: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x0051: IGET  (r4 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0053|0x0053: IF  (r0 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:35:0x0063 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0055|0x0055: INVOKE  (r0 I:boolean) = (r8 I:com.google.gson.stream.JsonReader), (r3 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x005c \l}"];
Node_33 [shape=record,label="{33\:\ 0x005c|0x005c: CONST_STR  (r0 I:java.lang.String) =  \"Unterminated escape sequence\" \l0x005e: INVOKE  (r0 I:java.io.IOException) = \l  (r8 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x0062|0x0062: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0063|0x0063: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0064: IGET  (r4 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0066: ARITH  (r5 I:int) = (r4 I:int) + (4 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0068|0x0068: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:54:0x00ba \l}"];
Node_37 [shape=record,label="{37\:\ 0x006a|0x006a: IGET  (r6 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x006c: AGET  (r6 I:char A[IMMUTABLE_TYPE]) = \l  (r6 I:char[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x006e: ARITH  (r0 I:int) = (r0 I:int) \<\< (4 int) \l0x0070: CAST  (r0 I:char) = (char) (r0 I:int) \l0x0071: CONST  (r7 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0073|0x0073: IF  (r6 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:42:0x007e \l}"];
Node_39 [shape=record,label="{39\:\ 0x0075|0x0075: CONST  (r7 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0077|0x0077: IF  (r6 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:42:0x007e \l}"];
Node_41 [shape=record,label="{41\:\ 0x0079|0x0079: ARITH  (r6 I:int) = (r6 I:int) + (\-48 int) \l0x007b: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x007c: CAST  (r0 I:char) = (char) (r0 I:int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x007e|0x007e: CONST  (r7 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0080|0x0080: IF  (r6 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:46:0x008a \l}"];
Node_44 [shape=record,label="{44\:\ 0x0082|0x0082: IF  (r6 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:46:0x008a \l}"];
Node_45 [shape=record,label="{45\:\ 0x0084|0x0084: ARITH  (r6 I:int) = (r6 I:int) + (\-97 int) \l0x0086: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int) \l0x0087: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x0088: CAST  (r0 I:char) = (char) (r0 I:int) \l}"];
Node_46 [shape=record,label="{46\:\ 0x008a|0x008a: CONST  (r7 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x008c|0x008c: IF  (r6 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:52:0x009a \l}"];
Node_48 [shape=record,label="{48\:\ 0x008e|0x008e: CONST  (r7 I:?[int, float, short, byte, char]) = (70 ?[int, float, short, byte, char]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0090|0x0090: IF  (r6 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:52:0x009a \l}"];
Node_50 [shape=record,label="{50\:\ 0x0092|0x0092: ARITH  (r6 I:int) = (r6 I:int) + (\-65 int) \l0x0094: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int) \l0x0095: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x0096: CAST  (r0 I:char) = (char) (r0 I:int) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0097|0x0097: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_52 [shape=record,label="{52\:\ 0x009a|0x009a: NEW_INSTANCE  (r0 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x009c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x009e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a1: CONST_STR  (r2 I:java.lang.String) =  \"u\" \l0x00a3: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a6: NEW_INSTANCE  (r2 I:java.lang.String) =  java.lang.String \l0x00a8: IGET  (r4 I:char[]) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x00aa: IGET  (r5 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00ac: INVOKE  \l  (r2 I:java.lang.String)\l  (r4 I:char[])\l  (r5 I:int)\l  (r3 I:int)\l java.lang.String.\<init\>(char[], int, int):void type: DIRECT \l0x00af: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b2: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b6: INVOKE  \l  (r0 I:java.lang.NumberFormatException)\l  (r1 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_53 [shape=record,label="{53\:\ 0x00b9|0x00b9: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_54 [shape=record,label="{54\:\ 0x00ba|0x00ba: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00bc: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x00bd: IPUT  (r1 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_55 [shape=record,label="{55\:\ 0x00bf|0x00bf: RETURN  (r0 I:char) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00c0|0x00c0: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x00c2|0x00c2: RETURN  (r0 I:char) \l}"];
Node_58 [shape=record,label="{58\:\ 0x00c3|0x00c3: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x00c5|0x00c5: RETURN  (r0 I:char) \l}"];
Node_60 [shape=record,label="{60\:\ 0x00c6|0x00c6: RETURN  (r1 I:char) \l}"];
Node_61 [shape=record,label="{61\:\ 0x00c7|0x00c7: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x00c9|0x00c9: RETURN  (r0 I:char) \l}"];
Node_63 [shape=record,label="{63\:\ 0x00ca|0x00ca: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x00cc|0x00cc: RETURN  (r0 I:char) \l}"];
Node_65 [shape=record,label="{65\:\ 0x00cd|0x00cd: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x00cf: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x00d0: IPUT  (r1 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineNumber int \l0x00d2: IGET  (r1 I:int) = (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00d4: IPUT  (r1 I:int), (r8 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lineStart int \l}"];
Node_66 [shape=record,label="{66\:\ 0x00d6|0x00d6: RETURN  (r0 I:char) \l}"];
MethodNode[shape=record,label="{private char com.google.gson.stream.JsonReader.readEscapeCharacter((r8 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_65;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_66;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_66;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_66;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_66;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_63;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_61;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_60;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_58;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_25 -> Node_56;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_35;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_54;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_51;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_46;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_51;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_52;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_52;
Node_50 -> Node_51;
Node_51 -> Node_36;
Node_52 -> Node_53;
Node_54 -> Node_55;
Node_56 -> Node_57;
Node_58 -> Node_59;
Node_61 -> Node_62;
Node_63 -> Node_64;
Node_65 -> Node_66;
}

