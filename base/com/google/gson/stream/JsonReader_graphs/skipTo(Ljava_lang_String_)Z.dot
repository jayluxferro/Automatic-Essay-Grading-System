digraph "CFG forcom.google.gson.stream.JsonReader.skipTo(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r6.length()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lLOOP:0: B:1:0x0004\-\>B:12:0x0039\l|r3 = 0\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if ((r5.pos + r0) \<= r5.limit) goto L_0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (fillBuffer(r0) == false) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r5.buffer[r5.pos] != 10) goto L_0x002a\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|r5.lineNumber = r5.lineNumber + 1\lr5.lineStart = r5.pos + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:7:0x001d, B:13:0x003f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x002a\-\>B:13:0x003f\l|if (r3 \>= r0) goto L_0x0042\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c}"];
Node_11 [shape=record,label="{11\:\ 0x0037|if (r5.buffer[r5.pos + r3] == r6.charAt(r3)) goto L_0x003f\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:12:0x0039\l|r5.pos = r5.pos + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|LOOP_END\lLOOP:1: B:9:0x002a\-\>B:13:0x003f\l|int r3 = r3 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean com.google.gson.stream.JsonReader.skipTo((r5v0 'this' com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_6[style=dashed];
Node_4 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_17;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_18[style=dashed];
Node_12 -> Node_1;
Node_13 -> Node_9;
Node_15 -> Node_5;
Node_16 -> Node_14;
Node_17 -> Node_12;
Node_18 -> Node_12;
}

