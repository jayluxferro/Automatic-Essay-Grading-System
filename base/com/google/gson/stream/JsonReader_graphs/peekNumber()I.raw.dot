digraph "CFG forcom.google.gson.stream.JsonReader.peekNumber()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:char[]) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0004: IGET  (r2 I:int) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0006: IGET  (r3 I:int) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l0x0008: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: CONST  (r11 I:?[long, double]) = (0 ?[long, double]) \l0x0010: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: ARITH  (r14 I:int) = (r2 I:int) + (r3 I:int) \l0x0013: CONST  (r15 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: ARRAY_LENGTH  (r2 I:int) = (r1 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r7 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: ARITH  (r2 I:int) = (r3 I:int) + (1 int) \l0x001c: INVOKE  (r2 I:boolean) = (r0 I:com.google.gson.stream.JsonReader), (r2 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IGET  (r2 I:int) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0026: IGET  (r8 I:int) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: ARITH  (r14 I:int) = (r2 I:int) + (r3 I:int) \l0x002a: AGET  (r14 I:char A[IMMUTABLE_TYPE]) = \l  (r1 I:char[] A[IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char])\l \l0x002c: CONST  (r7 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l0x002e: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x002f: CONST  (r5 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:93:0x00ee \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: CONST  (r7 I:?[int, float, short, byte, char]) = (69 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x00e2 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (101(0x65, float:1.42E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x00e2 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: SWITCH  \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[45, 46] t:[0x00d5, 0x00cd] \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: CONST  (r7 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: IF  (r14 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:49:0x008f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: CONST  (r7 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: IF  (r14 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:22:0x0046 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0084 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0074 \l}"];
Node_26 [shape=record,label="{26\:\ 0x004d|0x004d: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l0x004f: CMP_L  (r4 I:int) = (r11 I:long), (r16 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0051|0x0051: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0055 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0053|0x0053: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0054|0x0054: RETURN  (r4 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0055|0x0055: CONST  (r4 I:?[long, double]) = (10 ?[long, double]) \l0x0057: ARITH  (r4 I:long) = (r4 I:long) * (r11 I:long) \l0x0059: ARITH  (r14 I:int) = (r14 I:int) + (\-48 int) \l0x005b: CAST  (r14 I:long) = (long) (r14 I:int) \l0x005c: ARITH  (r4 I:long) = (r4 I:long) \- (r14 I:long) \l0x005d: CONST  (r14 I:?[long, double]) = \l  (\-922337203685477580(0xf333333333333334, double:\-8.390303882365713E246) ?[long, double])\l \l0x0062: CMP_L  (r7 I:int) = (r11 I:long), (r14 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0064|0x0064: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:37:0x006f \l}"];
Node_32 [shape=record,label="{32\:\ 0x0066|0x0066: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x006d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|0x0068: CMP_L  (r7 I:int) = (r4 I:long), (r11 I:long) \l}"];
Node_34 [shape=record,label="{34\:\ 0x006a|0x006a: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:36:0x006d \l}"];
Node_36 [shape=record,label="{36\:\ 0x006d|0x006d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x006f|0x006f: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0070|0x0070: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (r10 I:?[int, boolean, short, byte, char]) \l0x0071: MOVE  (r11 I:?[long, double]) = (r4 I:?[long, double]) \l0x0072: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x0074|0x0074: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0079 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0076|0x0076: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0077: CONST  (r9 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0079|0x0079: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0081 \l}"];
Node_42 [shape=record,label="{42\:\ 0x007b|0x007b: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x007c|0x007c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x007f \l}"];
Node_45 [shape=record,label="{45\:\ 0x007f|0x007f: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_46 [shape=record,label="{46\:\ 0x0081|0x0081: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0082: CONST  (r9 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0084|0x0084: ARITH  (r14 I:int) = (r14 I:int) + (\-48 int) \l0x0086: NEG  (r4 I:int) = (r14 I:int) \l0x0087: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0088: MOVE  (r11 I:?[long, double]) = (r4 I:?[long, double]) \l0x0089: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008a: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x008b|0x008b: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x008f|0x008f: INVOKE  (r1 I:boolean) = (r0 I:com.google.gson.stream.JsonReader), (r14 I:char) com.google.gson.stream.JsonReader.isLiteral(char):boolean type: DIRECT \l}"];
Node_50 [shape=record,label="{50\:\ 0x0093|0x0093: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x00cb \l}"];
Node_51 [shape=record,label="{51\:\ 0x0095|0x0095: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00b9 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0097|0x0097: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00b9 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0099|0x0099: CONST  (r1 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x009b: CMP_L  (r1 I:int) = (r11 I:long), (r1 I:long) \l}"];
Node_54 [shape=record,label="{54\:\ 0x009d|0x009d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x00a1 \l}"];
Node_55 [shape=record,label="{55\:\ 0x009f|0x009f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00b9 \l}"];
Node_56 [shape=record,label="{56\:\ 0x00a1|0x00a1: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l0x00a3: CMP_L  (r1 I:int) = (r11 I:long), (r16 I:long) \l}"];
Node_57 [shape=record,label="{57\:\ 0x00a5|0x00a5: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x00a9 \l}"];
Node_58 [shape=record,label="{58\:\ 0x00a7|0x00a7: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00b9 \l}"];
Node_59 [shape=record,label="{59\:\ 0x00a9|0x00a9: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x00ac \l}"];
Node_61 [shape=record,label="{61\:\ 0x00ac|0x00ac: NEG  (r11 I:long) = (r11 I:long) \l}"];
Node_62 [shape=record,label="{62\:\ 0x00ad|0x00ad: IPUT  (r11 I:long), (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedLong long \l0x00af: IGET  (r1 I:int) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00b1: ARITH  (r1 I:int) = (r1 I:int) + (r3 I:int) \l0x00b2: IPUT  (r1 I:int), (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00b4: CONST  (r1 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x00b6: IPUT  (r1 I:int), (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_63 [shape=record,label="{63\:\ 0x00b8|0x00b8: RETURN  (r1 I:int) \l}"];
Node_64 [shape=record,label="{64\:\ 0x00b9|0x00b9: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x00c4 \l}"];
Node_65 [shape=record,label="{65\:\ 0x00bb|0x00bb: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x00bc|0x00bc: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x00c4 \l}"];
Node_67 [shape=record,label="{67\:\ 0x00be|0x00be: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x00bf|0x00bf: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x00c2 \l}"];
Node_70 [shape=record,label="{70\:\ 0x00c2|0x00c2: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_71 [shape=record,label="{71\:\ 0x00c3|0x00c3: RETURN  (r7 I:int) \l}"];
Node_72 [shape=record,label="{72\:\ 0x00c4|0x00c4: IPUT  (r3 I:int), (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedNumberLength int \l0x00c6: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x00c8: IPUT  (r1 I:int), (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_73 [shape=record,label="{73\:\ 0x00ca|0x00ca: RETURN  (r1 I:int) \l}"];
Node_74 [shape=record,label="{74\:\ 0x00cb|0x00cb: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_75 [shape=record,label="{75\:\ 0x00cc|0x00cc: RETURN  (r7 I:int) \l}"];
Node_76 [shape=record,label="{76\:\ 0x00cd|0x00cd: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ce: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_77 [shape=record,label="{77\:\ 0x00d0|0x00d0: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x00d4 \l}"];
Node_78 [shape=record,label="{78\:\ 0x00d2|0x00d2: CONST  (r9 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x00d4|0x00d4: RETURN  (r7 I:int) \l}"];
Node_80 [shape=record,label="{80\:\ 0x00d5|0x00d5: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x00d6: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d7: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x00d9|0x00d9: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x00de \l}"];
Node_82 [shape=record,label="{82\:\ 0x00db|0x00db: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00dc: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_83 [shape=record,label="{83\:\ 0x00de|0x00de: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x00e1 \l}"];
Node_85 [shape=record,label="{85\:\ 0x00e1|0x00e1: RETURN  (r7 I:int) \l}"];
Node_86 [shape=record,label="{86\:\ 0x00e2|0x00e2: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e3: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x00e5|0x00e5: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:92:0x00ec \l}"];
Node_88 [shape=record,label="{88\:\ 0x00e7|0x00e7: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_89 [shape=record,label="{89\:\ 0x00e8|0x00e8: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x00eb \l}"];
Node_91 [shape=record,label="{91\:\ 0x00eb|0x00eb: RETURN  (r7 I:int) \l}"];
Node_92 [shape=record,label="{92\:\ 0x00ec|0x00ec: CONST  (r9 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_93 [shape=record,label="{93\:\ 0x00ee|0x00ee: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x00ef: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f0: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_94 [shape=record,label="{94\:\ 0x00f2|0x00f2: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x00f9 \l}"];
Node_95 [shape=record,label="{95\:\ 0x00f4|0x00f4: CONST  (r9 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_96 [shape=record,label="{96\:\ 0x00f5|0x00f5: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_97 [shape=record,label="{97\:\ 0x00f9|0x00f9: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{private int com.google.gson.stream.JsonReader.peekNumber((r18 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_51[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_93;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_86;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_86;
Node_16 -> Node_17;
Node_16 -> Node_76;
Node_16 -> Node_80;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_49;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_49[style=dashed];
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_47;
Node_23 -> Node_25;
Node_23 -> Node_47[style=dashed];
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_39;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_45;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_48;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_46;
Node_42 -> Node_43;
Node_43 -> Node_45;
Node_43 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_96;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_74;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_64;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_64;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_64;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_64;
Node_59 -> Node_61;
Node_59 -> Node_62[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_72;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_72;
Node_67 -> Node_68;
Node_68 -> Node_70;
Node_68 -> Node_72[style=dashed];
Node_70 -> Node_71;
Node_72 -> Node_73;
Node_74 -> Node_75;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_96;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_83;
Node_82 -> Node_96;
Node_83 -> Node_85;
Node_83 -> Node_95[style=dashed];
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_92;
Node_88 -> Node_89;
Node_89 -> Node_91;
Node_89 -> Node_92[style=dashed];
Node_92 -> Node_96;
Node_93 -> Node_94;
Node_94 -> Node_95[style=dashed];
Node_94 -> Node_97;
Node_95 -> Node_96;
Node_96 -> Node_1;
}

