digraph "CFG forcom.google.gson.stream.JsonReader.doPeek()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x0002: IGET  (r1 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0006: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000b: CONST  (r4 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l0x000d: CONST  (r5 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l0x000f: CONST  (r6 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l0x0011: CONST  (r7 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0012: CONST  (r8 I:?[int, float, short, byte, char]) = (59 ?[int, float, short, byte, char]) \l0x0014: CONST  (r9 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0016: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0017: CONST  (r11 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: IGET  (r12 I:int[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x001c: IGET  (r13 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x001e: ARITH  (r13 I:int) = (r13 I:int) \- (r2 I:int) \l0x001f: APUT  \l  (r12 I:?[int, float][])\l  (r13 I:?[int, short, byte, char])\l  (r11 I:?[int, float])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: INVOKE  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ac \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0039 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IPUT  (r10 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: RETURN  (r10 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: CONST_STR  (r0 I:java.lang.String) =  \"Unterminated array\" \l0x0034: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: CONST  (r12 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x0125 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0045 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0080 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: IGET  (r13 I:int[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x0049: IGET  (r14 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x004b: ARITH  (r14 I:int) = (r14 I:int) \- (r2 I:int) \l0x004c: APUT  \l  (r13 I:?[int, float][])\l  (r14 I:?[int, short, byte, char])\l  (r12 I:?[int, float])\l \l0x004e: INVOKE  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l0x0052: CONST  (r13 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|0x0054: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ac \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: CONST  (r13 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0079 \l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x005d: IGET  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x005f: IGET  (r13 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.limit int \l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|0x0061: IF  (r12 I:?[int, byte, short, char]) \< (r13 I:?[int, byte, short, char])  \-\> B:26:0x0069 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0063|0x0063: INVOKE  (r12 I:boolean) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:int) com.google.gson.stream.JsonReader.fillBuffer(int):boolean type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0067|0x0067: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ac \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: IGET  (r12 I:char[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x006b: IGET  (r13 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x006d: AGET  (r12 I:char A[IMMUTABLE_TYPE]) = \l  (r12 I:char[] A[IMMUTABLE_TYPE])\l  (r13 I:?[int, short, byte, char])\l \l0x006f: CONST  (r13 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0071|0x0071: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ac \l}"];
Node_28 [shape=record,label="{28\:\ 0x0073|0x0073: IGET  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0075: ARITH  (r12 I:int) = (r12 I:int) + (r2 I:int) \l0x0076: IPUT  (r12 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0079|0x0079: CONST_STR  (r0 I:java.lang.String) =  \"Expected ':'\" \l0x007b: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x007f|0x007f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0080|0x0080: CONST  (r12 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0081|0x0081: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0092 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0083|0x0083: IGET  (r12 I:boolean) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.lenient boolean \l}"];
Node_34 [shape=record,label="{34\:\ 0x0085|0x0085: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x008a \l}"];
Node_35 [shape=record,label="{35\:\ 0x0087|0x0087: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.consumeNonExecutePrefix():void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x008a|0x008a: IGET  (r12 I:int[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x008c: IGET  (r13 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x008e: ARITH  (r13 I:int) = (r13 I:int) \- (r2 I:int) \l0x008f: APUT  \l  (r12 I:?[int, float][])\l  (r13 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x0092|0x0092: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00aa \l}"];
Node_38 [shape=record,label="{38\:\ 0x0094|0x0094: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0095: INVOKE  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r12 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l0x0099: CONST  (r13 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x009a|0x009a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00a1 \l}"];
Node_40 [shape=record,label="{40\:\ 0x009c|0x009c: CONST  (r0 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l0x009e: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_41 [shape=record,label="{41\:\ 0x00a0|0x00a0: RETURN  (r0 I:int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00a1|0x00a1: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x00a4: IGET  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00a6: ARITH  (r12 I:int) = (r12 I:int) \- (r2 I:int) \l0x00a7: IPUT  (r12 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_43 [shape=record,label="{43\:\ 0x00aa|0x00aa: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x011d \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ac|0x00ac: INVOKE  (r12 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x00b0|0x00b0: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0118 \l}"];
Node_46 [shape=record,label="{46\:\ 0x00b2|0x00b2: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0112 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00b4|0x00b4: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x00fb \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b6|0x00b6: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x00fb \l}"];
Node_49 [shape=record,label="{49\:\ 0x00b8|0x00b8: CONST  (r1 I:?[int, float, short, byte, char]) = (91 ?[int, float, short, byte, char]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x00ba|0x00ba: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x00f8 \l}"];
Node_51 [shape=record,label="{51\:\ 0x00bc|0x00bc: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00f3 \l}"];
Node_52 [shape=record,label="{52\:\ 0x00be|0x00be: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (123(0x7b, float:1.72E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_53 [shape=record,label="{53\:\ 0x00c0|0x00c0: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00f0 \l}"];
Node_54 [shape=record,label="{54\:\ 0x00c2|0x00c2: IGET  (r0 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00c4: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x00c5: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00c7: INVOKE  (r0 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekKeyword():int type: DIRECT \l}"];
Node_55 [shape=record,label="{55\:\ 0x00cb|0x00cb: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x00ce \l}"];
Node_56 [shape=record,label="{56\:\ 0x00cd|0x00cd: RETURN  (r0 I:int) \l}"];
Node_57 [shape=record,label="{57\:\ 0x00ce|0x00ce: INVOKE  (r0 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekNumber():int type: DIRECT \l}"];
Node_58 [shape=record,label="{58\:\ 0x00d2|0x00d2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x00d5 \l}"];
Node_59 [shape=record,label="{59\:\ 0x00d4|0x00d4: RETURN  (r0 I:int) \l}"];
Node_60 [shape=record,label="{60\:\ 0x00d5|0x00d5: IGET  (r0 I:char[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x00d7: IGET  (r1 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x00d9: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l0x00db: INVOKE  (r0 I:boolean) = (r15 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.isLiteral(char):boolean type: DIRECT \l}"];
Node_61 [shape=record,label="{61\:\ 0x00df|0x00df: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x00e9 \l}"];
Node_62 [shape=record,label="{62\:\ 0x00e1|0x00e1: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x00e4: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x00e6: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_63 [shape=record,label="{63\:\ 0x00e8|0x00e8: RETURN  (r0 I:int) \l}"];
Node_64 [shape=record,label="{64\:\ 0x00e9|0x00e9: CONST_STR  (r0 I:java.lang.String) =  \"Expected value\" \l0x00eb: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_65 [shape=record,label="{65\:\ 0x00ef|0x00ef: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_66 [shape=record,label="{66\:\ 0x00f0|0x00f0: IPUT  (r2 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_67 [shape=record,label="{67\:\ 0x00f2|0x00f2: RETURN  (r2 I:int) \l}"];
Node_68 [shape=record,label="{68\:\ 0x00f3|0x00f3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x00fb \l}"];
Node_69 [shape=record,label="{69\:\ 0x00f5|0x00f5: IPUT  (r10 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_70 [shape=record,label="{70\:\ 0x00f7|0x00f7: RETURN  (r10 I:int) \l}"];
Node_71 [shape=record,label="{71\:\ 0x00f8|0x00f8: IPUT  (r3 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_72 [shape=record,label="{72\:\ 0x00fa|0x00fa: RETURN  (r3 I:int) \l}"];
Node_73 [shape=record,label="{73\:\ 0x00fb|0x00fb: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0107 \l}"];
Node_74 [shape=record,label="{74\:\ 0x00fd|0x00fd: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0100 \l}"];
Node_76 [shape=record,label="{76\:\ 0x0100|0x0100: CONST_STR  (r0 I:java.lang.String) =  \"Unexpected value\" \l0x0102: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_77 [shape=record,label="{77\:\ 0x0106|0x0106: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_78 [shape=record,label="{78\:\ 0x0107|0x0107: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x010a: IGET  (r0 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x010c: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x010d: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x010f: IPUT  (r7 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_79 [shape=record,label="{79\:\ 0x0111|0x0111: RETURN  (r7 I:int) \l}"];
Node_80 [shape=record,label="{80\:\ 0x0112|0x0112: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x0115: IPUT  (r1 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_81 [shape=record,label="{81\:\ 0x0117|0x0117: RETURN  (r1 I:int) \l}"];
Node_82 [shape=record,label="{82\:\ 0x0118|0x0118: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x011a: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_83 [shape=record,label="{83\:\ 0x011c|0x011c: RETURN  (r0 I:int) \l}"];
Node_84 [shape=record,label="{84\:\ 0x011d|0x011d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x011f: CONST_STR  (r1 I:java.lang.String) =  \"JsonReader is closed\" \l0x0121: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_85 [shape=record,label="{85\:\ 0x0124|0x0124: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_86 [shape=record,label="{86\:\ 0x0125|0x0125: IGET  (r1 I:int[]) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x0127: IGET  (r3 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0129: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int) \l0x012a: APUT  \l  (r1 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r10 I:?[int, float])\l \l0x012c: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (125(0x7d, float:1.75E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_87 [shape=record,label="{87\:\ 0x012e|0x012e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x0147 \l}"];
Node_88 [shape=record,label="{88\:\ 0x0130|0x0130: INVOKE  (r3 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l}"];
Node_89 [shape=record,label="{89\:\ 0x0134|0x0134: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x0147 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0136|0x0136: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x0144 \l}"];
Node_91 [shape=record,label="{91\:\ 0x0138|0x0138: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x013d \l}"];
Node_92 [shape=record,label="{92\:\ 0x013a|0x013a: IPUT  (r11 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_93 [shape=record,label="{93\:\ 0x013c|0x013c: RETURN  (r11 I:int) \l}"];
Node_94 [shape=record,label="{94\:\ 0x013d|0x013d: CONST_STR  (r0 I:java.lang.String) =  \"Unterminated object\" \l0x013f: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_95 [shape=record,label="{95\:\ 0x0143|0x0143: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_96 [shape=record,label="{96\:\ 0x0144|0x0144: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l}"];
Node_97 [shape=record,label="{97\:\ 0x0147|0x0147: INVOKE  (r3 I:int) = (r15 I:com.google.gson.stream.JsonReader), (r2 I:boolean) com.google.gson.stream.JsonReader.nextNonWhitespace(boolean):int type: DIRECT \l}"];
Node_98 [shape=record,label="{98\:\ 0x014b|0x014b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:114:0x0180 \l}"];
Node_99 [shape=record,label="{99\:\ 0x014d|0x014d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:112:0x0178 \l}"];
Node_100 [shape=record,label="{100\:\ 0x014f|0x014f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:107:0x016c \l}"];
Node_101 [shape=record,label="{101\:\ 0x0151|0x0151: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x0154: IGET  (r0 I:int) = (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0156: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0157: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0159: CAST  (r0 I:char) = (char) (r3 I:int) \l0x015a: INVOKE  (r0 I:boolean) = (r15 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.isLiteral(char):boolean type: DIRECT \l}"];
Node_102 [shape=record,label="{102\:\ 0x015e|0x015e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:105:0x0165 \l}"];
Node_103 [shape=record,label="{103\:\ 0x0160|0x0160: CONST  (r0 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x0162: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_104 [shape=record,label="{104\:\ 0x0164|0x0164: RETURN  (r0 I:int) \l}"];
Node_105 [shape=record,label="{105\:\ 0x0165|0x0165: CONST_STR  (r0 I:java.lang.String) =  \"Expected name\" \l0x0167: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_106 [shape=record,label="{106\:\ 0x016b|0x016b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_107 [shape=record,label="{107\:\ 0x016c|0x016c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:110:0x0171 \l}"];
Node_108 [shape=record,label="{108\:\ 0x016e|0x016e: IPUT  (r11 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_109 [shape=record,label="{109\:\ 0x0170|0x0170: RETURN  (r11 I:int) \l}"];
Node_110 [shape=record,label="{110\:\ 0x0171|0x0171: CONST_STR  (r0 I:java.lang.String) =  \"Expected name\" \l0x0173: INVOKE  (r0 I:java.io.IOException) = \l  (r15 I:com.google.gson.stream.JsonReader)\l  (r0 I:java.lang.String)\l com.google.gson.stream.JsonReader.syntaxError(java.lang.String):java.io.IOException type: DIRECT \l}"];
Node_111 [shape=record,label="{111\:\ 0x0177|0x0177: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_112 [shape=record,label="{112\:\ 0x0178|0x0178: INVOKE  (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.checkLenient():void type: DIRECT \l0x017b: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x017d: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_113 [shape=record,label="{113\:\ 0x017f|0x017f: RETURN  (r0 I:int) \l}"];
Node_114 [shape=record,label="{114\:\ 0x0180|0x0180: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0182: IPUT  (r0 I:int), (r15 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_115 [shape=record,label="{115\:\ 0x0184|0x0184: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{int com.google.gson.stream.JsonReader.doPeek((r15 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_44;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_44;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_44;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_86;
Node_15 -> Node_17;
Node_15 -> Node_86[style=dashed];
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_31;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_44;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_44;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_44;
Node_28 -> Node_44;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_44;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_43;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_42 -> Node_44;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_84;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_82;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_80;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_73;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_73;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_71;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_68;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_66;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_64;
Node_62 -> Node_63;
Node_64 -> Node_65;
Node_66 -> Node_67;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_73;
Node_69 -> Node_70;
Node_71 -> Node_72;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_78;
Node_74 -> Node_76;
Node_74 -> Node_78[style=dashed];
Node_76 -> Node_77;
Node_78 -> Node_79;
Node_80 -> Node_81;
Node_82 -> Node_83;
Node_84 -> Node_85;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_97;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_97;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_96;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_94;
Node_92 -> Node_93;
Node_94 -> Node_95;
Node_96 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_114;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_112;
Node_100 -> Node_101[style=dashed];
Node_100 -> Node_107;
Node_101 -> Node_102;
Node_102 -> Node_103[style=dashed];
Node_102 -> Node_105;
Node_103 -> Node_104;
Node_105 -> Node_106;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_110;
Node_108 -> Node_109;
Node_110 -> Node_111;
Node_112 -> Node_113;
Node_114 -> Node_115;
}

