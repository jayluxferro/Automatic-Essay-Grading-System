digraph "CFG forcom.google.gson.stream.JsonReader.nextDouble()D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r6.peeked\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r0 != 0) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r0 = doPeek()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|PHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v18 int) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r0 != 15) goto L_0x001f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|r6.peeked = 0\lint[] r0 = r6.pathIndices\lint r1 = r6.stackSize + \-1\lr0[r1] = r0[r1] + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return (double) r6.peekedLong\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f}"];
Node_8 [shape=record,label="{8\:\ 0x0023|if (r0 != 16) goto L_0x003a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|r6.peekedString = new java.lang.String(r6.buffer, r6.pos, r6.peekedNumberLength)\lr6.pos = r6.pos + r6.peekedNumberLength\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a}"];
Node_11 [shape=record,label="{11\:\ 0x003c|if (r0 == 8) goto L_0x0073\l}"];
Node_12 [shape=record,label="{12\:\ 0x003e}"];
Node_13 [shape=record,label="{13\:\ 0x0040|if (r0 != 9) goto L_0x0043\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043}"];
Node_15 [shape=record,label="{15\:\ 0x0045|if (r0 != 10) goto L_0x004e\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|r6.peekedString = nextUnquotedValue()\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|if (r0 != 11) goto L_0x0051\l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Expected a double but was \")\lr1.append(peek())\lr1.append(locationString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x0072|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_20 [shape=record,label="{20\:\ 0x0073|if (r0 != 8) goto L_0x0078\l}"];
Node_21 [shape=record,label="{21\:\ 0x0075|r0 = org.osgeo.proj4j.units.AngleFormat.CH_MIN_SYMBOL\l}"];
Node_22 [shape=record,label="{22\:\ 0x0078|r0 = kotlin.text.Typography.quote\l}"];
Node_23 [shape=record,label="{23\:\ 0x007a|PHI: r0 \l  PHI: (r0v6 char) = (r0v8 char), (r0v9 char) binds: [B:22:0x0078, B:21:0x0075] A[DONT_GENERATE, DONT_INLINE]\l|r6.peekedString = nextQuotedValue(r0)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0080|r6.peeked = 11\ldouble r0 = java.lang.Double.parseDouble(r6.peekedString)\l}"];
Node_25 [shape=record,label="{25\:\ 0x008a|if (r6.lenient != false) goto L_0x00b7\l}"];
Node_26 [shape=record,label="{26\:\ 0x008c}"];
Node_27 [shape=record,label="{27\:\ 0x0090|if (java.lang.Double.isNaN(r0) != false) goto L_0x0099\l}"];
Node_28 [shape=record,label="{28\:\ 0x0092}"];
Node_29 [shape=record,label="{29\:\ 0x0096|if (java.lang.Double.isInfinite(r0) != false) goto L_0x0099\l}"];
Node_30 [shape=record,label="{30\:\ 0x0099|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"JSON forbids NaN and infinities: \")\lr3.append(r0)\lr3.append(locationString())\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b6|throw new com.google.gson.stream.MalformedJsonException(r3.toString())\l}"];
Node_32 [shape=record,label="{32\:\ 0x00b7|r6.peekedString = null\lr6.peeked = 0\lint[] r2 = r6.pathIndices\lint r3 = r6.stackSize + \-1\lr2[r3] = r2[r3] + 1\l}"];
Node_33 [shape=record,label="{33\:\ 0x00c8|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public double com.google.gson.stream.JsonReader.nextDouble((r6v0 'this' com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_24;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_20[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_17 -> Node_24[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_32[style=dashed];
Node_30 -> Node_31;
Node_32 -> Node_33;
}

