digraph "CFG forcom.google.gson.stream.JsonReader.getPath()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (36 ?[int, float, short, byte, char]) \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x000a: IGET  (r1 I:int) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:10:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r3 I:int[]) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stack int[] \l0x0011: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5] t:[0x002a, 0x002a, 0x0017, 0x0017, 0x0017] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x001c: IGET  (r3 I:java.lang.String[]) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathNames java.lang.String[] \l0x001e: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IGET  (r3 I:java.lang.String[]) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathNames java.lang.String[] \l0x0024: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: CONST  (r3 I:?[int, float, short, byte, char]) = (91 ?[int, float, short, byte, char]) \l0x002c: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002f: IGET  (r3 I:int[]) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x0031: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0036: CONST  (r3 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.google.gson.stream.JsonReader.getPath((r4 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_8;
Node_3 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
}

