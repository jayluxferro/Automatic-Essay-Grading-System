digraph "CFG forcom.google.gson.stream.JsonReader.nextLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.doPeek():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r1 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IPUT  (r2 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x000f: IGET  (r0 I:int[]) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x0011: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0015: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0017: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0019: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x001b: IGET  (r0 I:long) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedLong long \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: RETURN  (r0 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x0024: IGET  (r1 I:char[]) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.buffer char[] \l0x0026: IGET  (r3 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0028: IGET  (r4 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedNumberLength int \l0x002a: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:char[])\l  (r3 I:int)\l  (r4 I:int)\l java.lang.String.\<init\>(char[], int, int):void type: DIRECT \l0x002d: IPUT  \l  (r0 I:java.lang.String)\l  (r7 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x002f: IGET  (r0 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l0x0031: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedNumberLength int \l0x0033: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0034: IPUT  (r0 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pos int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0039: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0066 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0066 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0046: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004b: CONST_STR  (r2 I:java.lang.String) =  \"Expected a long but was \" \l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r2 I:com.google.gson.stream.JsonToken) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0054: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0057: INVOKE  (r2 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x005b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0062: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0065|0x0065: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0066|0x0066: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|0x0068: INVOKE  (r0 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextUnquotedValue():java.lang.String type: DIRECT \l0x006c: IPUT  \l  (r0 I:java.lang.String)\l  (r7 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l}"];
Node_20 [shape=record,label="{20\:\ 0x006f|0x006f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0074 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: CONST  (r0 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0074|0x0074: CONST  (r0 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0076|0x0076: INVOKE  (r0 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader), (r0 I:char) com.google.gson.stream.JsonReader.nextQuotedValue(char):java.lang.String type: DIRECT \l0x007a: IPUT  \l  (r0 I:java.lang.String)\l  (r7 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|SYNTHETIC\lSplitter:B:24:0x007c\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x007c\l|0x007c: IGET  (r0 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedString java.lang.String A[Catch:\{ NumberFormatException \-\> 0x0091 \}, TRY_ENTER]\l0x007e: INVOKE  (r0 I:long) = (r0 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x0082: IPUT  (r2 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x0084: IGET  (r3 I:int[]) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x0086: IGET  (r4 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x0088: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x008a: AGET  (r5 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x008c: ARITH  (r5 I:int) = (r5 I:int) + (1 int) A[Catch:\{ NumberFormatException \-\> 0x0091 \}]\l0x008e: APUT  \l  (r3 I:?[int, float][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l A[Catch:\{ NumberFormatException \-\> 0x0091 \}, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0090|0x0090: RETURN  (r0 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0091|0x0091: CONST  (r0 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0093: IPUT  (r0 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x0095: IGET  (r0 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x0097: INVOKE  (r0 I:double) = (r0 I:java.lang.String) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x009b: CAST  (r3 I:long) = (long) (r0 I:double) \l0x009c: CAST  (r5 I:double) = (double) (r3 I:long) \l0x009d: CMP_L  (r0 I:int) = (r5 I:double), (r0 I:double) \l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:24:0x007c\l}"];
Node_29 [shape=record,label="{29\:\ 0x009f|0x009f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00b3 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a1|0x00a1: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a2: IPUT  \l  (r0 I:java.lang.String)\l  (r7 I:com.google.gson.stream.JsonReader)\l com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x00a4: IPUT  (r2 I:int), (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l0x00a6: IGET  (r0 I:int[]) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.pathIndices int[] \l0x00a8: IGET  (r1 I:int) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.stackSize int \l0x00aa: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x00ac: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x00ae: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x00b0: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b2|0x00b2: RETURN  (r3 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b3|0x00b3: NEW_INSTANCE  (r0 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x00b5: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00b7: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ba: CONST_STR  (r2 I:java.lang.String) =  \"Expected a long but was \" \l0x00bc: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00bf: IGET  (r2 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peekedString java.lang.String \l0x00c1: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c4: INVOKE  (r2 I:java.lang.String) = (r7 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x00c8: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00cb: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00cf: INVOKE  \l  (r0 I:java.lang.NumberFormatException)\l  (r1 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_33 [shape=record,label="{33\:\ 0x00d2|0x00d2: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long com.google.gson.stream.JsonReader.nextLong((r7 'this' I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_27;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_16;
Node_14 -> Node_18[style=dashed];
Node_16 -> Node_17;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_24;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_27;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_32 -> Node_33;
}

