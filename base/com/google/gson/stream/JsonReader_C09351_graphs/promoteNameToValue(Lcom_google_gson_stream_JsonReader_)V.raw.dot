digraph "CFG forcom.google.gson.stream.JsonReader.1.promoteNameToValue(Lcom\/google\/gson\/stream\/JsonReader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) com.google.gson.internal.bind.JsonTreeReader \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CHECK_CAST  (r4 I:com.google.gson.internal.bind.JsonTreeReader) = (com.google.gson.internal.bind.JsonTreeReader) (r4 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r4 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.promoteNameToValue():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.doPeek():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: CONST  (r1 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0018: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: CONST  (r1 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0024 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0021: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: CONST  (r1 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x002a: IPUT  (r0 I:int), (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peeked int \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0034: CONST_STR  (r2 I:java.lang.String) =  \"Expected a name but was \" \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r2 I:com.google.gson.stream.JsonToken) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x003d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r4 I:java.lang.String) = (r4 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.locationString():java.lang.String type: VIRTUAL \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.gson.stream.JsonReader.1.promoteNameToValue((r3 'this' I:com.google.gson.stream.JsonReader$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

