digraph "CFG forcom.google.gson.stream.JsonWriter.beforeValue()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.peek():int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6, 7] t:[0x0038, 0x002d, 0x0007, 0x0021, 0x0007, 0x001c, 0x000f] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"Nesting problem.\" \l0x000b: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r0 I:boolean) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.lenient boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"JSON must have only one top\-level value.\" \l0x0018: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x001d: INVOKE  (r2 I:com.google.gson.stream.JsonWriter), (r0 I:int) com.google.gson.stream.JsonWriter.replaceTop(int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IGET  (r0 I:java.io.Writer) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0023: IGET  (r1 I:java.lang.String) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.separator java.lang.String \l0x0025: INVOKE  (r0 I:java.io.Writer), (r1 I:java.lang.CharSequence) java.io.Writer.append(java.lang.CharSequence):java.io.Writer type: VIRTUAL \l0x0028: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r2 I:com.google.gson.stream.JsonWriter), (r0 I:int) com.google.gson.stream.JsonWriter.replaceTop(int):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IGET  (r0 I:java.io.Writer) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x002f: CONST  (r1 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0031: INVOKE  (r0 I:java.io.Writer), (r1 I:char) java.io.Writer.append(char):java.io.Writer type: VIRTUAL \l0x0034: INVOKE  (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.newline():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0039: INVOKE  (r2 I:com.google.gson.stream.JsonWriter), (r0 I:int) com.google.gson.stream.JsonWriter.replaceTop(int):void type: DIRECT \l0x003c: INVOKE  (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.newline():void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.beforeValue((r2 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_9;
Node_1 -> Node_10;
Node_1 -> Node_11;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_13;
Node_10 -> Node_13;
Node_11 -> Node_13;
Node_12 -> Node_13;
}

