digraph "CFG forcom.google.gson.stream.JsonWriter.value(Ljava\/lang\/Number;)Lcom\/google\/gson\/stream\/JsonWriter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 != null) goto L_0x0007\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return nullValue()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|writeDeferredName()\ljava.lang.String r0 = r4.toString()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r3.lenient != false) goto L_0x0042\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r0.equals(\"\-Infinity\") != false) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if (r0.equals(\"Infinity\") != false) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x0028|if (r0.equals(\"NaN\") != false) goto L_0x002b\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Numeric values must be finite, but was \")\lr1.append(r4)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|beforeValue()\lr3.out.append(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter.value((r3v0 'this' com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
}

