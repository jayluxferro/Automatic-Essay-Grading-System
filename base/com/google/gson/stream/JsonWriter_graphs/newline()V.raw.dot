digraph "CFG forcom.google.gson.stream.JsonWriter.newline()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.indent java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:java.io.Writer) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"\l\" \l0x0009: INVOKE  (r0 I:java.io.Writer), (r1 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x000c: IGET  (r0 I:int) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x000e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r2 I:java.io.Writer) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0013: IGET  (r3 I:java.lang.String) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.indent java.lang.String \l0x0015: INVOKE  (r2 I:java.io.Writer), (r3 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0018: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.newline((r4 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
}

