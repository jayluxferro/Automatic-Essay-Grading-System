digraph "CFG forcom.google.gson.stream.JsonWriter.string(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.htmlSafe boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:java.lang.String[]) =  com.google.gson.stream.JsonWriter.HTML_SAFE_REPLACEMENT_CHARS java.lang.String[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: SGET  (r0 I:java.lang.String[]) =  com.google.gson.stream.JsonWriter.REPLACEMENT_CHARS java.lang.String[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r1 I:java.io.Writer) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"\"\" \l0x000d: INVOKE  (r1 I:java.io.Writer), (r2 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0010: INVOKE  (r1 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:21:0x0045 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r4 I:char) = (r8 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001c: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (8232(0x2028, float:1.1535E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: CONST_STR  (r4 I:java.lang.String) =  \"u2028\" \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (8233(0x2029, float:1.1537E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0042 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: CONST_STR  (r4 I:java.lang.String) =  \"u2029\" \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:19:0x003b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|0x0034: IGET  (r5 I:java.io.Writer) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0036: ARITH  (r6 I:int) = (r2 I:int) \- (r3 I:int) \l0x0038: INVOKE  \l  (r5 I:java.io.Writer)\l  (r8 I:java.lang.String)\l  (r3 I:int)\l  (r6 I:int)\l java.io.Writer.write(java.lang.String, int, int):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: IGET  (r3 I:java.io.Writer) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x003d: INVOKE  (r3 I:java.io.Writer), (r4 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0040: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:23:0x004d \l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: IGET  (r0 I:java.io.Writer) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0049: ARITH  (r1 I:int) = (r1 I:int) \- (r3 I:int) \l0x004a: INVOKE  \l  (r0 I:java.io.Writer)\l  (r8 I:java.lang.String)\l  (r3 I:int)\l  (r1 I:int)\l java.io.Writer.write(java.lang.String, int, int):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: IGET  (r8 I:java.io.Writer) = (r7 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x004f: CONST_STR  (r0 I:java.lang.String) =  \"\"\" \l0x0051: INVOKE  (r8 I:java.io.Writer), (r0 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.string((r7 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_21;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_17;
Node_9 -> Node_20[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_5;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
}

