digraph "CFG forcom.google.gson.stream.JsonWriter.beforeValue()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|switch(peek()) \{\l    case 1: goto L_0x0038;\l    case 2: goto L_0x002d;\l    case 3: goto L_0x0007;\l    case 4: goto L_0x0021;\l    case 5: goto L_0x0007;\l    case 6: goto L_0x001c;\l    case 7: goto L_0x000f;\l    default: goto L_0x0007;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000e|throw new java.lang.IllegalStateException(\"Nesting problem.\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r2.lenient == false) goto L_0x0014\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x001b|throw new java.lang.IllegalStateException(\"JSON must have only one top\-level value.\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|replaceTop(7)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|r2.out.append(r2.separator)\lreplaceTop(5)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|r2.out.append(',')\lnewline()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|replaceTop(2)\lnewline()\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.beforeValue((r2v0 'this' com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_8;
Node_1 -> Node_9;
Node_1 -> Node_10;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_13;
Node_9 -> Node_14;
Node_10 -> Node_15;
Node_11 -> Node_12;
}

