digraph "CFG forcom.google.gson.stream.JsonWriter.close(IILjava\/lang\/String;)Lcom\/google\/gson\/stream\/JsonWriter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.peek():int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"Nesting problem.\" \l0x000d: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r2 I:java.lang.String) = (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.deferredName java.lang.String \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IGET  (r2 I:int) = (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x0017: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0019: IPUT  (r2 I:int), (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: INVOKE  (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.newline():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IGET  (r2 I:java.io.Writer) = (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0022: INVOKE  (r2 I:java.io.Writer), (r4 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: RETURN  (r1 I:com.google.gson.stream.JsonWriter) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0028: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002d: CONST_STR  (r4 I:java.lang.String) =  \"Dangling name: \" \l0x002f: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: IGET  (r4 I:java.lang.String) = (r1 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.deferredName java.lang.String \l0x0034: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003b: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter.close((r1 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_4;
Node_2 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

