digraph "CFG forcom.google.gson.stream.JsonWriter.close(IILjava\/lang\/String;)Lcom\/google\/gson\/stream\/JsonWriter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = peek()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == r3) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r0 != r2) goto L_0x0009\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009}"];
Node_4 [shape=record,label="{4\:\ 0x0010|throw new java.lang.IllegalStateException(\"Nesting problem.\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r1.deferredName != null) goto L_0x0026\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|r1.stackSize = r1.stackSize + \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|if (r0 != r3) goto L_0x0020\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|newline()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|r1.out.write(r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Dangling name: \")\lr3.append(r1.deferredName)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|throw new java.lang.IllegalStateException(r3.toString())\l}"];
MethodNode[shape=record,label="{private com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter.close((r1v0 'this' com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

