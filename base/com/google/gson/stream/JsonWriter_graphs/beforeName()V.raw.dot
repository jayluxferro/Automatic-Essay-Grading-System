digraph "CFG forcom.google.gson.stream.JsonWriter.beforeName()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.peek():int type: DIRECT \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:java.io.Writer) = (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.out java.io.Writer \l0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x000b: INVOKE  (r0 I:java.io.Writer), (r1 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: INVOKE  (r2 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.newline():void type: DIRECT \l0x0015: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r2 I:com.google.gson.stream.JsonWriter), (r0 I:int) com.google.gson.stream.JsonWriter.replaceTop(int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"Nesting problem.\" \l0x001e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.beforeName((r2 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

