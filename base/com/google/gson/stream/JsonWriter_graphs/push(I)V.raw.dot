digraph "CFG forcom.google.gson.stream.JsonWriter.push(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x0002: IGET  (r1 I:int[]) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stack int[] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x0009: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x000b: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000d: IGET  (r1 I:int[]) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stack int[] \l0x000f: IGET  (r2 I:int) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: INVOKE  \l  (r1 I:java.lang.Object)\l  (r3 I:int)\l  (r0 I:java.lang.Object)\l  (r3 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0015: IPUT  (r0 I:int[]), (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stack int[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IGET  (r0 I:int[]) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stack int[] \l0x0019: IGET  (r1 I:int) = (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x001b: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x001d: IPUT  (r2 I:int), (r4 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.stackSize int \l0x001f: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.stream.JsonWriter.push((r4 'this' I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

