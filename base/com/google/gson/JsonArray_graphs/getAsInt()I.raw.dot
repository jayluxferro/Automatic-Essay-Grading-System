digraph "CFG forcom.google.gson.JsonArray.getAsInt()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.google.gson.JsonElement\>) = (r2 I:com.google.gson.JsonArray) com.google.gson.JsonArray.elements java.util.List \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r0 I:java.util.List\<com.google.gson.JsonElement\>) = (r2 I:com.google.gson.JsonArray) com.google.gson.JsonArray.elements java.util.List \l0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r0 I:com.google.gson.JsonElement) = (com.google.gson.JsonElement) (r0 I:?[OBJECT, ARRAY]) \l0x0012: INVOKE  (r0 I:int) = (r0 I:com.google.gson.JsonElement) com.google.gson.JsonElement.getAsInt():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0019: INVOKE  (r0 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.google.gson.JsonArray.getAsInt((r2 'this' I:com.google.gson.JsonArray A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

