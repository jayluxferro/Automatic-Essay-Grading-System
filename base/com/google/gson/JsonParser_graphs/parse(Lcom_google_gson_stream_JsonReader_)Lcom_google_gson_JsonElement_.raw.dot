digraph "CFG forcom.google.gson.JsonParser.parse(Lcom\/google\/gson\/stream\/JsonReader;)Lcom\/google\/gson\/JsonElement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.isLenient():boolean type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: INVOKE  (r6 I:com.google.gson.stream.JsonReader), (r1 I:boolean) com.google.gson.stream.JsonReader.setLenient(boolean):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0008\l|0x0008: INVOKE  (r1 I:com.google.gson.JsonElement) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader):com.google.gson.JsonElement type: STATIC A[Catch:\{ StackOverflowError \-\> 0x002f, OutOfMemoryError \-\> 0x0012 \}, TRY_ENTER]\l0x000b: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r6 I:com.google.gson.stream.JsonReader), (r0 I:boolean) com.google.gson.stream.JsonReader.setLenient(boolean):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r1 I:com.google.gson.JsonElement) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|ExcHandler: all null\lSplitter:B:8:0x0013\l|0x0010: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|ExcHandler: OutOfMemoryError null\lSplitter:B:1:0x0008\l|0x0012: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|SYNTHETIC\lSplitter:B:8:0x0013\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0013\l|0x0013: NEW_INSTANCE  (r2 I:com.google.gson.JsonParseException) =  com.google.gson.JsonParseException A[Catch:\{ all \-\> 0x0010 \}, TRY_ENTER]\l0x0015: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0010 \}]\l0x0017: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0010 \}]\l0x001a: CONST_STR  (r4 I:java.lang.String) =  \"Failed parsing JSON source: \" A[Catch:\{ all \-\> 0x0010 \}]\l0x001c: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x001f: INVOKE  (r3 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0022: CONST_STR  (r4 I:java.lang.String) =  \" to Json\" A[Catch:\{ all \-\> 0x0010 \}]\l0x0024: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0027: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x002b: INVOKE  \l  (r2 I:com.google.gson.JsonParseException)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l com.google.gson.JsonParseException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|ExcHandler: StackOverflowError null\lSplitter:B:1:0x0008\l|0x002f: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: NEW_INSTANCE  (r2 I:com.google.gson.JsonParseException) =  com.google.gson.JsonParseException A[Catch:\{ all \-\> 0x0010 \}]\l0x0032: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0010 \}]\l0x0034: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0010 \}]\l0x0037: CONST_STR  (r4 I:java.lang.String) =  \"Failed parsing JSON source: \" A[Catch:\{ all \-\> 0x0010 \}]\l0x0039: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x003c: INVOKE  (r3 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x003f: CONST_STR  (r4 I:java.lang.String) =  \" to Json\" A[Catch:\{ all \-\> 0x0010 \}]\l0x0041: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0044: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0048: INVOKE  \l  (r2 I:com.google.gson.JsonParseException)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l com.google.gson.JsonParseException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0010 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: INVOKE  (r6 I:com.google.gson.stream.JsonReader), (r0 I:boolean) com.google.gson.stream.JsonReader.setLenient(boolean):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.google.gson.JsonElement com.google.gson.JsonParser.parse((r5 'this' I:com.google.gson.JsonParser A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_1 -> Node_7;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

