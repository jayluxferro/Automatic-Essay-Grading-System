digraph "CFG forcom.google.gson.JsonParser.parse(Ljava\/io\/Reader;)Lcom\/google\/gson\/JsonElement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:com.google.gson.stream.JsonReader) =  com.google.gson.stream.JsonReader A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}, TRY_ENTER]\l0x0002: INVOKE  \l  (r0 I:com.google.gson.stream.JsonReader)\l  (r3 I:java.io.Reader)\l com.google.gson.stream.JsonReader.\<init\>(java.io.Reader):void type: DIRECT A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l0x0005: INVOKE  (r3 I:com.google.gson.JsonElement) = \l  (r2 I:com.google.gson.JsonParser)\l  (r0 I:com.google.gson.stream.JsonReader)\l com.google.gson.JsonParser.parse(com.google.gson.stream.JsonReader):com.google.gson.JsonElement type: VIRTUAL A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l0x0009: INVOKE  (r1 I:boolean) = (r3 I:com.google.gson.JsonElement) com.google.gson.JsonElement.isJsonNull():boolean type: VIRTUAL A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r0 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l0x0013: SGET  (r1 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.END_DOCUMENT com.google.gson.stream.JsonToken A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: GOTO  \-\> 0x0020 A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: NEW_INSTANCE  (r3 I:com.google.gson.JsonSyntaxException) =  com.google.gson.JsonSyntaxException A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l0x001a: CONST_STR  (r0 I:java.lang.String) =  \"Did not consume the entire document.\" A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l0x001c: INVOKE  \l  (r3 I:com.google.gson.JsonSyntaxException)\l  (r0 I:java.lang.String)\l com.google.gson.JsonSyntaxException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: THROW  (r3 I:java.lang.Throwable) A[Catch:\{ MalformedJsonException \-\> 0x002f, IOException \-\> 0x0028, NumberFormatException \-\> 0x0021 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: RETURN  (r3 I:com.google.gson.JsonElement) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|ExcHandler: NumberFormatException null\lSplitter:B:0:0x0000\l|0x0021: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:com.google.gson.JsonSyntaxException) =  com.google.gson.JsonSyntaxException \l0x0024: INVOKE  \l  (r0 I:com.google.gson.JsonSyntaxException)\l  (r3 I:java.lang.Throwable)\l com.google.gson.JsonSyntaxException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x0028: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: NEW_INSTANCE  (r0 I:com.google.gson.JsonIOException) =  com.google.gson.JsonIOException \l0x002b: INVOKE  \l  (r0 I:com.google.gson.JsonIOException)\l  (r3 I:java.lang.Throwable)\l com.google.gson.JsonIOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|ExcHandler: MalformedJsonException null\lSplitter:B:0:0x0000\l|0x002f: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:com.google.gson.JsonSyntaxException) =  com.google.gson.JsonSyntaxException \l0x0032: INVOKE  \l  (r0 I:com.google.gson.JsonSyntaxException)\l  (r3 I:java.lang.Throwable)\l com.google.gson.JsonSyntaxException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.google.gson.JsonElement com.google.gson.JsonParser.parse((r2 'this' I:com.google.gson.JsonParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_15;
Node_0 -> Node_12;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

