digraph "CFG forcom.google.gson.Gson.toJson(Lcom\/google\/gson\/JsonElement;Ljava\/lang\/Appendable;)V" {
subgraph cluster_Region_1261028178 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1775719366 {
label = "Try: R(1:1) catches: R(2:3|5)";
node [shape=record,color=blue];
subgraph cluster_Region_207486107 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IOException \-\> 0x000c \}\lSplitter:B:0:0x0000\l|toJson(r1, newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(r2)))     \/\/ Catch:\{ IOException \-\> 0x000c \}\l}"];
}
subgraph cluster_Region_1959418726 {
label = "R(2:3|5) | ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|throw new com.google.gson.JsonIOException((java.lang.Throwable) r1)\l}"];
}
}
}
subgraph cluster_Region_1959418726 {
label = "R(2:3|5) | ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|ExcHandler: IOException (r1v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|throw new com.google.gson.JsonIOException((java.lang.Throwable) r1)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
MethodNode[shape=record,label="{public void com.google.gson.Gson.toJson((r0v0 'this' com.google.gson.Gson A[IMMUTABLE_TYPE, THIS]), (r1v0 com.google.gson.JsonElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.Appendable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.gson.JsonIOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_4 -> Node_5;
}

