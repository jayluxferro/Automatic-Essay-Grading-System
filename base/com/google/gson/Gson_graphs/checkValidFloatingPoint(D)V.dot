digraph "CFG forcom.google.gson.Gson.checkValidFloatingPoint(D)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (java.lang.Double.isNaN(r2) != false) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (java.lang.Double.isInfinite(r2) != false) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r2)\lr1.append(\" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{static void com.google.gson.Gson.checkValidFloatingPoint((r2v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

