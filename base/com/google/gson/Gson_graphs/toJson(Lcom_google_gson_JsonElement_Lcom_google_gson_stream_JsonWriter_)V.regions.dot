digraph "CFG forcom.google.gson.Gson.toJson(Lcom\/google\/gson\/JsonElement;Lcom\/google\/gson\/stream\/JsonWriter;)V" {
subgraph cluster_Region_1448126257 {
label = "R(2:0|(2:2|3))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean boolean r0 = r8.isLenient()\lr8.setLenient(true)\lboolean boolean r1 = r8.isHtmlSafe()\lr8.setHtmlSafe(r6.htmlSafe)\lboolean boolean r2 = r8.getSerializeNulls()\lr8.setSerializeNulls(r6.serializeNulls)\l}"];
subgraph cluster_TryCatchRegion_234222884 {
label = "Try: R(2:2|3) catches: R(2:10|12), R(3:6|8|9), R(3:5|13|14)";
node [shape=record,color=blue];
subgraph cluster_Region_1478218495 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\lSplitter:B:1:0x001a\l|com.google.gson.internal.Streams.write(r7, r8)     \/\/ Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|r8.setLenient(r0)\lr8.setHtmlSafe(r1)\lr8.setSerializeNulls(r2)\l}"];
}
subgraph cluster_Region_1426464042 {
label = "R(2:10|12) | ExcHandler: IOException (r7v1 'e' java.io.IOException A[CUSTOM_DECLARE, Catch:\{  \}])\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0045|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\lExcHandler: IOException (r7v1 'e' java.io.IOException A[CUSTOM_DECLARE, Catch:\{  \}])\lSplitter:B:1:0x001a\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l|throw new com.google.gson.JsonIOException((java.lang.Throwable) r7)     \/\/ Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
}
subgraph cluster_Region_1298575679 {
label = "R(3:6|8|9) | ExcHandler: AssertionError (r7v2 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0029|ExcHandler: AssertionError (r7v2 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\lSplitter:B:1:0x001a\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\lSplitter:B:7:0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l|throw new java.lang.AssertionError(\"AssertionError (GSON 2.8.5): \" + r7.getMessage(), r7)     \/\/ Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
}
subgraph cluster_Region_117356610 {
label = "R(3:5|13|14) | ExcHandler: all (r7v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0027|ExcHandler: all (r7v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x002a\l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|r8.setLenient(r0)\lr8.setHtmlSafe(r1)\lr8.setSerializeNulls(r2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|throw r7\l}"];
}
}
}
subgraph cluster_Region_1426464042 {
label = "R(2:10|12) | ExcHandler: IOException (r7v1 'e' java.io.IOException A[CUSTOM_DECLARE, Catch:\{  \}])\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0045|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\lExcHandler: IOException (r7v1 'e' java.io.IOException A[CUSTOM_DECLARE, Catch:\{  \}])\lSplitter:B:1:0x001a\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l|throw new com.google.gson.JsonIOException((java.lang.Throwable) r7)     \/\/ Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
}
subgraph cluster_Region_1298575679 {
label = "R(3:6|8|9) | ExcHandler: AssertionError (r7v2 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0029|ExcHandler: AssertionError (r7v2 'e' java.lang.AssertionError A[CUSTOM_DECLARE])\lSplitter:B:1:0x001a\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\lSplitter:B:7:0x002a\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l|throw new java.lang.AssertionError(\"AssertionError (GSON 2.8.5): \" + r7.getMessage(), r7)     \/\/ Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
}
subgraph cluster_Region_117356610 {
label = "R(3:5|13|14) | ExcHandler: all (r7v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0027|ExcHandler: all (r7v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x002a\l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|r8.setLenient(r0)\lr8.setHtmlSafe(r1)\lr8.setSerializeNulls(r2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|throw r7\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x001a|SYNTHETIC\lSplitter:B:1:0x001a\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0026}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002a|SYNTHETIC\lSplitter:B:7:0x002a\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0046|Catch:\{ IOException \-\> 0x0045, AssertionError \-\> 0x0029, all \-\> 0x0027 \}\l}"];
MethodNode[shape=record,label="{public void com.google.gson.Gson.toJson((r6v0 'this' com.google.gson.Gson A[IMMUTABLE_TYPE, THIS]), (r7v0 com.google.gson.JsonElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.gson.JsonIOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_10 -> Node_11;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_5 -> Node_13;
Node_13 -> Node_14;
Node_10 -> Node_11;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_5 -> Node_13;
Node_13 -> Node_14;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_1 -> Node_6;
Node_1 -> Node_5;
Node_7 -> Node_8;
Node_7 -> Node_5;
Node_11 -> Node_12;
}

