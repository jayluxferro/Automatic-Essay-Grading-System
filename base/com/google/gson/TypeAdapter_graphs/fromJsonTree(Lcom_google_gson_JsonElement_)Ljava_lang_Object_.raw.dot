digraph "CFG forcom.google.gson.TypeAdapter.fromJsonTree(Lcom\/google\/gson\/JsonElement;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:com.google.gson.internal.bind.JsonTreeReader) =  com.google.gson.internal.bind.JsonTreeReader A[Catch:\{ IOException \-\> 0x000a \}, TRY_ENTER]\l0x0002: INVOKE  \l  (r0 I:com.google.gson.internal.bind.JsonTreeReader)\l  (r2 I:com.google.gson.JsonElement)\l com.google.gson.internal.bind.JsonTreeReader.\<init\>(com.google.gson.JsonElement):void type: DIRECT A[Catch:\{ IOException \-\> 0x000a \}]\l0x0005: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:com.google.gson.TypeAdapter)\l  (r0 I:com.google.gson.stream.JsonReader)\l com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader):java.lang.Object type: VIRTUAL A[Catch:\{ IOException \-\> 0x000a \}]\l0x0008: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r2 I:T) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x000a: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:com.google.gson.JsonIOException) =  com.google.gson.JsonIOException \l0x000d: INVOKE  \l  (r0 I:com.google.gson.JsonIOException)\l  (r2 I:java.lang.Throwable)\l com.google.gson.JsonIOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final T com.google.gson.TypeAdapter.fromJsonTree((r1 'this' I:com.google.gson.TypeAdapter A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.gson.JsonElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/gson\/JsonElement;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

