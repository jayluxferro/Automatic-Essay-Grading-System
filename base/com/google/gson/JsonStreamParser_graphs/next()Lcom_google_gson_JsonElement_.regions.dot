digraph "CFG forcom.google.gson.JsonStreamParser.next()Lcom\/google\/gson\/JsonElement;" {
subgraph cluster_Region_1346843813 {
label = "R(1:(1:(1:4))(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1371673890 {
label = "IF [B:1:0x0004] THEN: R(1:(1:4)) ELSE: R(1:17)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (hasNext() == true) goto L_0x0006\l}"];
subgraph cluster_Region_320208844 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_100056722 {
label = "Try: R(1:4) catches: R(2:13|15), R(2:10|12), R(4:5|6|(1:8)|9)";
node [shape=record,color=blue];
subgraph cluster_Region_1820147861 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return com.google.gson.internal.Streams.parse(r3.parser)\l}"];
}
subgraph cluster_Region_769073981 {
label = "R(2:13|15) | ExcHandler: StackOverflowError (r0v2 'e' java.lang.StackOverflowError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0025|ExcHandler: StackOverflowError (r0v2 'e' java.lang.StackOverflowError A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|throw new com.google.gson.JsonParseException(\"Failed parsing JSON source to Json\", r0)\l}"];
}
subgraph cluster_Region_285229780 {
label = "R(2:10|12) | ExcHandler: OutOfMemoryError (r0v3 'e' java.lang.OutOfMemoryError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|ExcHandler: OutOfMemoryError (r0v3 'e' java.lang.OutOfMemoryError A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|throw new com.google.gson.JsonParseException(\"Failed parsing JSON source to Json\", r0)\l}"];
}
subgraph cluster_Region_929513486 {
label = "R(4:5|6|(1:8)|9) | ExcHandler: JsonParseException (r0v4 'e' com.google.gson.JsonParseException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|ExcHandler: JsonParseException (r0v4 'e' com.google.gson.JsonParseException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|boolean boolean r1 = r0.getCause() instanceof java.io.EOFException\ljava.lang.Throwable r0 = r0\l}"];
subgraph cluster_IfRegion_1029695563 {
label = "IF [B:7:0x0014] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r1 == true) goto L_0x0016\l}"];
subgraph cluster_Region_1628643648 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0016|r0 = new java.util.NoSuchElementException()\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x001b|PHI: r0 \l  PHI: (r0v5 java.lang.Throwable) = (r0v9 java.lang.Throwable), (r0v10 java.lang.Throwable) binds: [B:7:0x0014, B:8:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|throw r0\l}"];
}
}
}
subgraph cluster_Region_565345352 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0033|throw new java.util.NoSuchElementException()\l}"];
}
}
}
subgraph cluster_Region_769073981 {
label = "R(2:13|15) | ExcHandler: StackOverflowError (r0v2 'e' java.lang.StackOverflowError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0025|ExcHandler: StackOverflowError (r0v2 'e' java.lang.StackOverflowError A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|throw new com.google.gson.JsonParseException(\"Failed parsing JSON source to Json\", r0)\l}"];
}
subgraph cluster_Region_285229780 {
label = "R(2:10|12) | ExcHandler: OutOfMemoryError (r0v3 'e' java.lang.OutOfMemoryError A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|ExcHandler: OutOfMemoryError (r0v3 'e' java.lang.OutOfMemoryError A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|throw new com.google.gson.JsonParseException(\"Failed parsing JSON source to Json\", r0)\l}"];
}
subgraph cluster_Region_929513486 {
label = "R(4:5|6|(1:8)|9) | ExcHandler: JsonParseException (r0v4 'e' com.google.gson.JsonParseException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|ExcHandler: JsonParseException (r0v4 'e' com.google.gson.JsonParseException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0006\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|boolean boolean r1 = r0.getCause() instanceof java.io.EOFException\ljava.lang.Throwable r0 = r0\l}"];
subgraph cluster_IfRegion_1029695563 {
label = "IF [B:7:0x0014] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r1 == true) goto L_0x0016\l}"];
subgraph cluster_Region_1628643648 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0016|r0 = new java.util.NoSuchElementException()\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x001b|PHI: r0 \l  PHI: (r0v5 java.lang.Throwable) = (r0v9 java.lang.Throwable), (r0v10 java.lang.Throwable) binds: [B:7:0x0014, B:8:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|throw r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|Catch:\{ StackOverflowError \-\> 0x0025, OutOfMemoryError \-\> 0x001c, JsonParseException \-\> 0x000d \}\lSplitter:B:2:0x0006\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001d}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0026}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x002e}"];
MethodNode[shape=record,label="{public com.google.gson.JsonElement com.google.gson.JsonStreamParser.next((r3v0 'this' com.google.gson.JsonStreamParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.gson.JsonParseException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_16[style=dashed];
Node_13 -> Node_14;
Node_10 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_13 -> Node_14;
Node_10 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_2 -> Node_10;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_11 -> Node_12;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

