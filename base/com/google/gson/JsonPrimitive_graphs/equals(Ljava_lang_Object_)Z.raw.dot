digraph "CFG forcom.google.gson.JsonPrimitive.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x007a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Class) = (r6 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x000b: INVOKE  (r3 I:java.lang.Class) = (r7 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: CHECK_CAST  (r7 I:com.google.gson.JsonPrimitive) = (com.google.gson.JsonPrimitive) (r7 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r2 I:java.lang.Object) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001f \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IGET  (r7 I:java.lang.Object) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: INVOKE  (r2 I:boolean) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: INVOKE  (r2 I:boolean) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive):boolean type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0042 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002b|0x002b: INVOKE  (r2 I:java.lang.Number) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.getAsNumber():java.lang.Number type: VIRTUAL \l0x002f: INVOKE  (r2 I:long) = (r2 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l0x0033: INVOKE  (r7 I:java.lang.Number) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.getAsNumber():java.lang.Number type: VIRTUAL \l0x0037: INVOKE  (r4 I:long) = (r7 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l0x003b: CMP_L  (r7 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|0x003d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0040 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0041|0x0041: RETURN  (r0 I:boolean) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|0x0042: IGET  (r2 I:java.lang.Object) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l0x0044: INSTANCE_OF  (r2 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.lang.Number \l}"];
Node_25 [shape=record,label="{25\:\ 0x0046|0x0046: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0071 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|0x0048: IGET  (r2 I:java.lang.Object) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l0x004a: INSTANCE_OF  (r2 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.lang.Number \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0071 \l}"];
Node_28 [shape=record,label="{28\:\ 0x004e|0x004e: INVOKE  (r2 I:java.lang.Number) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.getAsNumber():java.lang.Number type: VIRTUAL \l0x0052: INVOKE  (r2 I:double) = (r2 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x0056: INVOKE  (r7 I:java.lang.Number) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.getAsNumber():java.lang.Number type: VIRTUAL \l0x005a: INVOKE  (r4 I:double) = (r7 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x005e: CMP_L  (r7 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0060|0x0060: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0070 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0062|0x0062: INVOKE  (r7 I:boolean) = (r2 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x0066|0x0066: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x006f \l}"];
Node_32 [shape=record,label="{32\:\ 0x0068|0x0068: INVOKE  (r7 I:boolean) = (r4 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x006c|0x006c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x006f \l}"];
Node_35 [shape=record,label="{35\:\ 0x006f|0x006f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x0070|0x0070: RETURN  (r0 I:boolean) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0071|0x0071: IGET  (r0 I:java.lang.Object) = (r6 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l0x0073: IGET  (r7 I:java.lang.Object) = (r7 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.value java.lang.Object \l0x0075: INVOKE  (r7 I:boolean) = (r0 I:java.lang.Object), (r7 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x0079|0x0079: RETURN  (r7 I:boolean) \l}"];
Node_39 [shape=record,label="{39\:\ 0x007a|0x007a: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.gson.JsonPrimitive.equals((r6 'this' I:com.google.gson.JsonPrimitive A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_39;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_39[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_37;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_37;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_36;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_37 -> Node_38;
}

