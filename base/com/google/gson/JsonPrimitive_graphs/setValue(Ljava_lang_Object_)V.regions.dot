digraph "CFG forcom.google.gson.JsonPrimitive.setValue(Ljava\/lang\/Object;)V" {
subgraph cluster_Region_605247656 {
label = "R(1:(2:(2:2|11)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1345827963 {
label = "R(2:(2:2|11)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_915051259 {
label = "IF [B:1:0x0002] THEN: R(2:2|11) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r2 instanceof java.lang.Character) == true) goto L_0x0004\l}"];
subgraph cluster_Region_1746096637 {
label = "R(2:2|11)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r1.value = java.lang.String.valueOf(((java.lang.Character) r2).charValue())\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1450934863 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001f|PHI: r0 \l  PHI: (r0v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.gson.internal.C$Gson$Preconditions.checkArgument((r2 instanceof java.lang.Number) \|\| isPrimitiveOrString(r2))\lr1.value = r2\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0015}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{void com.google.gson.JsonPrimitive.setValue((r1v0 'this' com.google.gson.JsonPrimitive A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
}

