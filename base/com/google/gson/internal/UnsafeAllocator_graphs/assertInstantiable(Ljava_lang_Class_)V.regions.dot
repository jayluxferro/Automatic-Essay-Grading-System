digraph "CFG forcom.google.gson.internal.UnsafeAllocator.assertInstantiable(Ljava\/lang\/Class;)V" {
subgraph cluster_Region_1833403840 {
label = "R(2:0|(2:7|8)(1:(2:5|6)(0)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r3.getModifiers()\l}"];
subgraph cluster_IfRegion_966399255 {
label = "IF [B:1:0x0008] THEN: R(2:7|8) ELSE: R(1:(2:5|6)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (java.lang.reflect.Modifier.isInterface(r0) != false) goto L_0x002c\l}"];
subgraph cluster_Region_1269054174 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002c}"];
Node_8 [shape=record,label="{8\:\ 0x0046|throw new java.lang.UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + r3.getName())\l}"];
}
subgraph cluster_Region_498878498 {
label = "R(1:(2:5|6)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_852910164 {
label = "IF [B:3:0x000e] THEN: R(2:5|6) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (java.lang.reflect.Modifier.isAbstract(r0) != false) goto L_0x0011\l}"];
subgraph cluster_Region_618485601 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x002b|throw new java.lang.UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + r3.getName())\l}"];
}
subgraph cluster_Region_1053916848 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
MethodNode[shape=record,label="{static void com.google.gson.internal.UnsafeAllocator.assertInstantiable((r3v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_7 -> Node_8;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_2 -> Node_3;
}

