digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.8.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/concurrent\/atomic\/AtomicInteger;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicInteger) =  java.util.concurrent.atomic.AtomicInteger A[Catch:\{ NumberFormatException \-\> 0x000a \}, TRY_ENTER]\l0x0002: INVOKE  (r2 I:int) = (r2 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextInt():int type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x000a \}]\l0x0006: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicInteger)\l  (r2 I:int)\l java.util.concurrent.atomic.AtomicInteger.\<init\>(int):void type: DIRECT A[Catch:\{ NumberFormatException \-\> 0x000a \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r0 I:java.util.concurrent.atomic.AtomicInteger) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: NumberFormatException null\lSplitter:B:0:0x0000\l|0x000a: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:com.google.gson.JsonSyntaxException) =  com.google.gson.JsonSyntaxException \l0x000d: INVOKE  \l  (r0 I:com.google.gson.JsonSyntaxException)\l  (r2 I:java.lang.Throwable)\l com.google.gson.JsonSyntaxException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.concurrent.atomic.AtomicInteger com.google.gson.internal.bind.TypeAdapters.8.read((r1 'this' I:com.google.gson.internal.bind.TypeAdapters$8 A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

