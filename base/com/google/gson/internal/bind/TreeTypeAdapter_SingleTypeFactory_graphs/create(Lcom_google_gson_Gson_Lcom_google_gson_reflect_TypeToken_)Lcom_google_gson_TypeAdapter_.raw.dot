digraph "CFG forcom.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.create(Lcom\/google\/gson\/Gson;Lcom\/google\/gson\/reflect\/TypeToken;)Lcom\/google\/gson\/TypeAdapter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.google.gson.reflect.TypeToken\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.exactType com.google.gson.reflect.TypeToken \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.google.gson.reflect.TypeToken\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.exactType com.google.gson.reflect.TypeToken \l0x0006: INVOKE  (r0 I:boolean) = \l  (r0 I:com.google.gson.reflect.TypeToken)\l  (r9 I:java.lang.Object)\l com.google.gson.reflect.TypeToken.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:boolean) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.matchRawType boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r0 I:com.google.gson.reflect.TypeToken\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.exactType com.google.gson.reflect.TypeToken \l0x0012: INVOKE  (r0 I:java.lang.reflect.Type) = (r0 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.getType():java.lang.reflect.Type type: VIRTUAL \l0x0016: INVOKE  (r1 I:java.lang.Class) = (r9 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.getRawType():java.lang.Class type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IGET  (r0 I:java.lang.Class\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.hierarchyType java.lang.Class \l0x0023: INVOKE  (r1 I:java.lang.Class) = (r9 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.getRawType():java.lang.Class type: VIRTUAL \l0x0027: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class), (r1 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003b \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: NEW_INSTANCE  (r0 I:com.google.gson.internal.bind.TreeTypeAdapter) =  com.google.gson.internal.bind.TreeTypeAdapter \l0x002f: IGET  (r2 I:com.google.gson.JsonSerializer\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.serializer com.google.gson.JsonSerializer \l0x0031: IGET  (r3 I:com.google.gson.JsonDeserializer\<?\>) = \l  (r7 I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.deserializer com.google.gson.JsonDeserializer \l0x0033: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0034: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0035: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0036: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0037: INVOKE  \l  (r1 I:com.google.gson.internal.bind.TreeTypeAdapter)\l  (r2 I:com.google.gson.JsonSerializer)\l  (r3 I:com.google.gson.JsonDeserializer)\l  (r4 I:com.google.gson.Gson)\l  (r5 I:com.google.gson.reflect.TypeToken)\l  (r6 I:com.google.gson.TypeAdapterFactory)\l com.google.gson.internal.bind.TreeTypeAdapter.\<init\>(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: RETURN  (r0 I:com.google.gson.TypeAdapter\<T\>) \l}"];
MethodNode[shape=record,label="{public com.google.gson.TypeAdapter\<T\> com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.create((r7 'this' I:com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory A[IMMUTABLE_TYPE, THIS]), (r8 I:com.google.gson.Gson A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.gson.reflect.TypeToken\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/google\/gson\/Gson;, Lcom\/google\/gson\/reflect\/TypeToken\<, TT;\>;), Lcom\/google\/gson\/TypeAdapter\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
}

