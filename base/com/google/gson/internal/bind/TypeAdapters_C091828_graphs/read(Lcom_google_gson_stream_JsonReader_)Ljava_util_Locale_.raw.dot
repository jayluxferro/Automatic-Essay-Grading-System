digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.28.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/Locale;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0004: SGET  (r1 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NULL com.google.gson.stream.JsonToken \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextNull():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r2 I:java.util.Locale) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r5 I:java.lang.String) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextString():java.lang.String type: VIRTUAL \l0x0011: NEW_INSTANCE  (r0 I:java.util.StringTokenizer) =  java.util.StringTokenizer \l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"_\" \l0x0015: INVOKE  \l  (r0 I:java.util.StringTokenizer)\l  (r5 I:java.lang.String)\l  (r1 I:java.lang.String)\l java.util.StringTokenizer.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0018: INVOKE  (r5 I:boolean) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.hasMoreElements():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r5 I:java.lang.String) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.nextToken():java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  (r1 I:boolean) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.hasMoreElements():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r1 I:java.lang.String) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.nextToken():java.lang.String type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r3 I:boolean) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.hasMoreElements():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: INVOKE  (r2 I:java.lang.String) = (r0 I:java.util.StringTokenizer) java.util.StringTokenizer.nextToken():java.lang.String type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0044 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0044 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.util.Locale) =  java.util.Locale \l0x0040: INVOKE  (r0 I:java.util.Locale), (r5 I:java.lang.String) java.util.Locale.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: RETURN  (r0 I:java.util.Locale) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x004c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: NEW_INSTANCE  (r0 I:java.util.Locale) =  java.util.Locale \l0x0048: INVOKE  \l  (r0 I:java.util.Locale)\l  (r5 I:java.lang.String)\l  (r1 I:java.lang.String)\l java.util.Locale.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: RETURN  (r0 I:java.util.Locale) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|0x004c: NEW_INSTANCE  (r0 I:java.util.Locale) =  java.util.Locale \l0x004e: INVOKE  \l  (r0 I:java.util.Locale)\l  (r5 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l java.util.Locale.\<init\>(java.lang.String, java.lang.String, java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0051|0x0051: RETURN  (r0 I:java.util.Locale) \l}"];
MethodNode[shape=record,label="{public java.util.Locale com.google.gson.internal.bind.TypeAdapters.28.read((r4 'this' I:com.google.gson.internal.bind.TypeAdapters$28 A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

