digraph "CFG forcom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Object;)Ljava\/lang\/reflect\/Type;" {
subgraph cluster_Region_2081957469 {
label = "R(1:(2:(1:2)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1822196633 {
label = "R(2:(1:2)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1094295690 {
label = "IF [B:0:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 != null) goto L_0x0002\l}"];
subgraph cluster_Region_25193602 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return (r2 == java.lang.Object.class \|\| (r2 instanceof java.lang.reflect.TypeVariable) \|\| (r2 instanceof java.lang.Class)) ? r3.getClass() : r2\l}"];
}
}
subgraph cluster_Region_1008179233 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008|REMOVE\lADDED_TO_REGION\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.lang.reflect.Type com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific((r1v0 'this' com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
}

