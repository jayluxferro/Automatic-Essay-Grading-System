digraph "CFG forcom.google.gson.internal.bind.JsonTreeWriter.value(Ljava\/lang\/Number;)Lcom\/google\/gson\/stream\/JsonWriter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r4 I:com.google.gson.stream.JsonWriter) = (r3 I:com.google.gson.internal.bind.JsonTreeWriter) com.google.gson.internal.bind.JsonTreeWriter.nullValue():com.google.gson.stream.JsonWriter type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r4 I:com.google.gson.stream.JsonWriter) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r3 I:com.google.gson.internal.bind.JsonTreeWriter) com.google.gson.internal.bind.JsonTreeWriter.isLenient():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:double) = (r4 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x0011: INVOKE  (r2 I:boolean) = (r0 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r0 I:boolean) = (r0 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0020: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"JSON forbids NaN and infinities: \" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:com.google.gson.JsonPrimitive) =  com.google.gson.JsonPrimitive \l0x0037: INVOKE  \l  (r0 I:com.google.gson.JsonPrimitive)\l  (r4 I:java.lang.Number)\l com.google.gson.JsonPrimitive.\<init\>(java.lang.Number):void type: DIRECT \l0x003a: INVOKE  \l  (r3 I:com.google.gson.internal.bind.JsonTreeWriter)\l  (r0 I:com.google.gson.JsonElement)\l com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: RETURN  (r3 I:com.google.gson.stream.JsonWriter) \l}"];
MethodNode[shape=record,label="{public com.google.gson.stream.JsonWriter com.google.gson.internal.bind.JsonTreeWriter.value((r3 'this' I:com.google.gson.internal.bind.JsonTreeWriter A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
}

