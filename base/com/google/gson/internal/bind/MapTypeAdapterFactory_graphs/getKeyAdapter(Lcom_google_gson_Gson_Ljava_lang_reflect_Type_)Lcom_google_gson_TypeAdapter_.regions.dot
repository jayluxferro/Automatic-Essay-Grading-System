digraph "CFG forcom.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter(Lcom\/google\/gson\/Gson;Ljava\/lang\/reflect\/Type;)Lcom\/google\/gson\/TypeAdapter;" {
subgraph cluster_Region_355372226 {
label = "R(1:(2:(1:6)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_796289736 {
label = "R(2:(1:6)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1962942604 {
label = "IF [B:1:0x0002, B:3:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 == java.lang.Boolean.TYPE) goto L_0x0012\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|ADDED_TO_REGION\l|if (r3 == java.lang.Boolean.class) goto L_0x0012\l}"];
subgraph cluster_Region_640642130 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return com.google.gson.internal.bind.TypeAdapters.BOOLEAN_AS_STRING\l}"];
}
}
subgraph cluster_Region_1200012489 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r2.getAdapter(com.google.gson.reflect.TypeToken.get(r3))\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0009}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0012}"];
MethodNode[shape=record,label="{private com.google.gson.TypeAdapter\<?\> com.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter((r1v0 'this' com.google.gson.internal.bind.MapTypeAdapterFactory A[IMMUTABLE_TYPE, THIS]), (r2v0 com.google.gson.Gson A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/gson\/Gson;, Ljava\/lang\/reflect\/Type;, ), Lcom\/google\/gson\/TypeAdapter\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_7;
Node_5 -> Node_6;
}

