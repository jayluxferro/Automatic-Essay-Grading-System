digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.22.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/net\/URI;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r4.peek() != com.google.gson.stream.JsonToken.NULL) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r4.nextNull()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return null\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|SYNTHETIC\lSplitter:B:4:0x000d\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ URISyntaxException \-\> 0x0020 \}\lSplitter:B:4:0x000d\l|java.lang.String r4 = r4.nextString()     \/\/ Catch:\{ URISyntaxException \-\> 0x0020 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|Catch:\{ URISyntaxException \-\> 0x0020 \}\l|if (\"null\".equals(r4) == false) goto L_0x001a     \/\/ Catch:\{ URISyntaxException \-\> 0x0020 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|Catch:\{ URISyntaxException \-\> 0x0020 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|Catch:\{ URISyntaxException \-\> 0x0020 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|ExcHandler: URISyntaxException (r4v1 'e' java.net.URISyntaxException A[CUSTOM_DECLARE])\lSplitter:B:4:0x000d\l|java.net.URISyntaxException r4 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021}"];
Node_11 [shape=record,label="{11\:\ 0x0026|throw new com.google.gson.JsonIOException((java.lang.Throwable) r4)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new java.net.URI(r4)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public java.net.URI com.google.gson.internal.bind.TypeAdapters.22.read((r3v0 'this' com.google.gson.internal.bind.TypeAdapters$22 A[IMMUTABLE_TYPE, THIS]), (r4v0 com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

