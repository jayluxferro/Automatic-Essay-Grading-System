digraph "CFG forcom.google.gson.internal.bind.util.ISO8601Utils.format(Ljava\/util\/Date;ZLjava\/util\/TimeZone;)Ljava\/lang\/String;" {
subgraph cluster_Region_132611035 {
label = "R(6:0|9|(1:11)|12|(3:14|(1:16)|17)(1:18)|20)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.GregorianCalendar java.util.GregorianCalendar r0 = new java.util.GregorianCalendar(r7, java.util.Locale.US)\lr0.setTime(r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|java.lang.StringBuilder java.lang.StringBuilder r1 = new java.lang.StringBuilder(\"yyyy\-MM\-ddThh:mm:ss\".length() + (r6 ? \".sss\".length() : 0) + (r7.getRawOffset() == 0 ? \"Z\" : \"+hh:mm\").length())\lpadInt(r1, r0.get(1), \"yyyy\".length())\lchar r2 = '\-'\lr1.append('\-')\lpadInt(r1, r0.get(2) + 1, mil.nga.tiff.util.TiffConstants.BYTE_ORDER_BIG_ENDIAN.length())\lr1.append('\-')\lpadInt(r1, r0.get(5), \"dd\".length())\lr1.append('T')\lpadInt(r1, r0.get(11), \"hh\".length())\lr1.append(':')\lpadInt(r1, r0.get(12), \"mm\".length())\lr1.append(':')\lpadInt(r1, r0.get(13), \"ss\".length())\l}"];
subgraph cluster_IfRegion_1460096791 {
label = "IF [B:10:0x009e] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x009e|if (r6 == true) goto L_0x00a0\l}"];
subgraph cluster_Region_1668175156 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x00a0|r1.append('.')\lpadInt(r1, r0.get(14), \"sss\".length())\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x00b4|int int r6 = r7.getOffset(r0.getTimeInMillis())\l}"];
subgraph cluster_IfRegion_266287816 {
label = "IF [B:13:0x00bc] THEN: R(3:14|(1:16)|17) ELSE: R(1:18)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x00bc|if (r6 != 0) goto L_0x00be\l}"];
subgraph cluster_Region_1681357697 {
label = "R(3:14|(1:16)|17)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x00be|int int r7 = r6 \/ 60000\lint int r0 = java.lang.Math.abs(r7 \/ 60)\lint int r7 = java.lang.Math.abs(r7 % 60)\l}"];
subgraph cluster_IfRegion_1357620161 {
label = "IF [B:15:0x00cf] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x00cf|if (r6 \>= 0) goto L_0x00d2\l}"];
subgraph cluster_Region_503909320 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x00d2|r2 = '+'\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x00d4|PHI: r2 \l  PHI: (r2v2 char) = (r2v1 char), (r2v3 char) binds: [B:15:0x00cf, B:16:0x00d2] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(r2)\lpadInt(r1, r0, \"hh\".length())\lr1.append(':')\lpadInt(r1, r7, \"mm\".length())\l}"];
}
subgraph cluster_Region_571250161 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x00ed|r1.append('Z')\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x00f6|RETURN\l|return r1.toString()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0010}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0012}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0019}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001a|PHI: r1 \l  PHI: (r1v1 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001f}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0023|PHI: r1 \l  PHI: (r1v4 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0028}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x00f2}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.gson.internal.bind.util.ISO8601Utils.format((r5v0 java.util.Date A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.TimeZone A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_8 -> Node_7;
Node_19 -> Node_20;
}

