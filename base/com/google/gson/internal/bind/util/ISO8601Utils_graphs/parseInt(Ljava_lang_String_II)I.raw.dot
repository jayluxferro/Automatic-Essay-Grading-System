digraph "CFG forcom.google.gson.internal.bind.util.ISO8601Utils.parseInt(Ljava\/lang\/String;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r6 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:11:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: ARITH  (r0 I:int) = (r5 I:int) + (1 int) \l0x0011: INVOKE  (r2 I:char) = (r4 I:java.lang.String), (r5 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0015: INVOKE  (r2 I:int) = (r2 I:char), (r1 I:int) java.lang.Character.digit(char, int):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: NEG  (r2 I:int) = (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x001f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"Invalid number: \" \l0x0026: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r5 I:int), (r6 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  \l  (r0 I:java.lang.NumberFormatException)\l  (r4 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0039: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:18:0x0068 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x003e: INVOKE  (r0 I:char) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0042: INVOKE  (r0 I:int) = (r0 I:char), (r1 I:int) java.lang.Character.digit(char, int):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x004d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: ARITH  (r2 I:int) = (r2 I:int) * (10 int) \l0x004a: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x004b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: NEW_INSTANCE  (r0 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x004f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0051: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0054: CONST_STR  (r2 I:java.lang.String) =  \"Invalid number: \" \l0x0056: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r5 I:int), (r6 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x005d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0064: INVOKE  \l  (r0 I:java.lang.NumberFormatException)\l  (r4 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|0x0068: NEG  (r4 I:int) = (r2 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0069|0x0069: RETURN  (r4 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|0x006a: NEW_INSTANCE  (r5 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x006c: INVOKE  \l  (r5 I:java.lang.NumberFormatException)\l  (r4 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static int com.google.gson.internal.bind.util.ISO8601Utils.parseInt((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.NumberFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_20;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

