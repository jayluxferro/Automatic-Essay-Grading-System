digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.31.create(Lcom\/google\/gson\/Gson;Lcom\/google\/gson\/reflect\/TypeToken;)Lcom\/google\/gson\/TypeAdapter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.gson.reflect.TypeToken) = (r0 I:com.google.gson.internal.bind.TypeAdapters$31) com.google.gson.internal.bind.TypeAdapters.31.val$type com.google.gson.reflect.TypeToken \l0x0002: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.gson.reflect.TypeToken)\l  (r1 I:java.lang.Object)\l com.google.gson.reflect.TypeToken.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r1 I:com.google.gson.TypeAdapter) = (r0 I:com.google.gson.internal.bind.TypeAdapters$31) com.google.gson.internal.bind.TypeAdapters.31.val$typeAdapter com.google.gson.TypeAdapter \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r1 I:com.google.gson.TypeAdapter\<T\>) \l}"];
MethodNode[shape=record,label="{public com.google.gson.TypeAdapter\<T\> com.google.gson.internal.bind.TypeAdapters.31.create((r0 'this' I:com.google.gson.internal.bind.TypeAdapters$31 A[IMMUTABLE_TYPE, THIS]), (r1 I:com.google.gson.Gson A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:com.google.gson.reflect.TypeToken\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/google\/gson\/Gson;, Lcom\/google\/gson\/reflect\/TypeToken\<, TT;\>;), Lcom\/google\/gson\/TypeAdapter\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

