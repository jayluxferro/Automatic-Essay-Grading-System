digraph "CFG forcom.google.gson.internal.bind.JsonTreeReader.expect(Lcom\/google\/gson\/stream\/JsonToken;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0009: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000e: CONST_STR  (r2 I:java.lang.String) =  \"Expected \" \l0x0010: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0016: CONST_STR  (r4 I:java.lang.String) =  \" but was \" \l0x0018: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r4 I:com.google.gson.stream.JsonToken) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r4 I:java.lang.String) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.locationString():java.lang.String type: DIRECT \l0x0026: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002d: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0030|0x0030: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.google.gson.internal.bind.JsonTreeReader.expect((r3 'this' I:com.google.gson.internal.bind.JsonTreeReader A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.gson.stream.JsonToken A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

