digraph "CFG forcom.google.gson.internal.bind.JsonTreeReader.skipValue()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0004: SGET  (r1 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NAME com.google.gson.stream.JsonToken \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.nextName():java.lang.String type: VIRTUAL \l0x000b: IGET  (r0 I:java.lang.String[]) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.pathNames java.lang.String[] \l0x000d: IGET  (r1 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l0x000f: ARITH  (r1 I:int) = (r1 I:int) + (\-2 int) \l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"null\" \l0x0013: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.popStack():java.lang.Object type: DIRECT \l0x0019: IGET  (r0 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r0 I:java.lang.String[]) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.pathNames java.lang.String[] \l0x001f: IGET  (r1 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l0x0021: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0023: CONST_STR  (r2 I:java.lang.String) =  \"null\" \l0x0025: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IGET  (r0 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IGET  (r0 I:int[]) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.pathIndices int[] \l0x002d: IGET  (r1 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l0x002f: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0031: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0033: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0035: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.gson.internal.bind.JsonTreeReader.skipValue((r3 'this' I:com.google.gson.internal.bind.JsonTreeReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

