digraph "CFG forcom.google.gson.internal.bind.JsonTreeReader.beginArray()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.BEGIN_ARRAY com.google.gson.stream.JsonToken \l0x0002: INVOKE  \l  (r3 I:com.google.gson.internal.bind.JsonTreeReader)\l  (r0 I:com.google.gson.stream.JsonToken)\l com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken):void type: DIRECT \l0x0005: INVOKE  (r0 I:java.lang.Object) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peekStack():java.lang.Object type: DIRECT \l0x0009: CHECK_CAST  (r0 I:com.google.gson.JsonArray) = (com.google.gson.JsonArray) (r0 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:com.google.gson.JsonArray) com.google.gson.JsonArray.iterator():java.util.Iterator type: VIRTUAL \l0x000f: INVOKE  \l  (r3 I:com.google.gson.internal.bind.JsonTreeReader)\l  (r0 I:java.lang.Object)\l com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object):void type: DIRECT \l0x0012: IGET  (r0 I:int[]) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.pathIndices int[] \l0x0014: IGET  (r1 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l0x0016: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.gson.internal.bind.JsonTreeReader.beginArray((r3 'this' I:com.google.gson.internal.bind.JsonTreeReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

