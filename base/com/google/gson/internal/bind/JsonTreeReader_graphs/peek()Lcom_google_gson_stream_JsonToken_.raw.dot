digraph "CFG forcom.google.gson.internal.bind.JsonTreeReader.peek()Lcom\/google\/gson\/stream\/JsonToken;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.END_DOCUMENT com.google.gson.stream.JsonToken \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.Object) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peekStack():java.lang.Object type: DIRECT \l0x000b: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) java.util.Iterator \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003a \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r1 I:java.lang.Object[]) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stack java.lang.Object[] \l0x0011: IGET  (r2 I:int) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.stackSize int \l0x0013: ARITH  (r2 I:int) = (r2 I:int) + (\-2 int) \l0x0015: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0017: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.google.gson.JsonObject \l0x0019: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0032 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NAME com.google.gson.stream.JsonToken \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: INVOKE  \l  (r3 I:com.google.gson.internal.bind.JsonTreeReader)\l  (r0 I:java.lang.Object)\l com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object):void type: DIRECT \l0x002d: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r3 I:com.google.gson.internal.bind.JsonTreeReader) com.google.gson.internal.bind.JsonTreeReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.END_OBJECT com.google.gson.stream.JsonToken \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.END_ARRAY com.google.gson.stream.JsonToken \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.gson.JsonObject \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0041 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.BEGIN_OBJECT com.google.gson.stream.JsonToken \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|0x0041: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.gson.JsonArray \l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0048 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.BEGIN_ARRAY com.google.gson.stream.JsonToken \l}"];
Node_24 [shape=record,label="{24\:\ 0x0047|0x0047: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.gson.JsonPrimitive \l}"];
Node_26 [shape=record,label="{26\:\ 0x004a|0x004a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x006f \l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: CHECK_CAST  (r0 I:com.google.gson.JsonPrimitive) = (com.google.gson.JsonPrimitive) (r0 I:?[OBJECT, ARRAY]) \l0x004e: INVOKE  (r1 I:boolean) = (r0 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.isString():boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0052|0x0052: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0057 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0054|0x0054: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.STRING com.google.gson.stream.JsonToken \l}"];
Node_30 [shape=record,label="{30\:\ 0x0056|0x0056: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0057|0x0057: INVOKE  (r1 I:boolean) = (r0 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.isBoolean():boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0060 \l}"];
Node_33 [shape=record,label="{33\:\ 0x005d|0x005d: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.BOOLEAN com.google.gson.stream.JsonToken \l}"];
Node_34 [shape=record,label="{34\:\ 0x005f|0x005f: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0060|0x0060: INVOKE  (r0 I:boolean) = (r0 I:com.google.gson.JsonPrimitive) com.google.gson.JsonPrimitive.isNumber():boolean type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x0064|0x0064: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0069 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0066|0x0066: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NUMBER com.google.gson.stream.JsonToken \l}"];
Node_38 [shape=record,label="{38\:\ 0x0068|0x0068: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0069|0x0069: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x006b: INVOKE  (r0 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_40 [shape=record,label="{40\:\ 0x006e|0x006e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x006f|0x006f: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.gson.JsonNull \l}"];
Node_42 [shape=record,label="{42\:\ 0x0071|0x0071: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0076 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0073|0x0073: SGET  (r0 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NULL com.google.gson.stream.JsonToken \l}"];
Node_44 [shape=record,label="{44\:\ 0x0075|0x0075: RETURN  (r0 I:com.google.gson.stream.JsonToken) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0076|0x0076: SGET  (r1 I:java.lang.Object) =  com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED java.lang.Object \l}"];
Node_46 [shape=record,label="{46\:\ 0x0078|0x0078: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0082 \l}"];
Node_47 [shape=record,label="{47\:\ 0x007a|0x007a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x007c: CONST_STR  (r1 I:java.lang.String) =  \"JsonReader is closed\" \l0x007e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_48 [shape=record,label="{48\:\ 0x0081|0x0081: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0082|0x0082: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0084: INVOKE  (r0 I:java.lang.AssertionError) java.lang.AssertionError.\<init\>():void type: DIRECT \l}"];
Node_50 [shape=record,label="{50\:\ 0x0087|0x0087: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.google.gson.stream.JsonToken com.google.gson.internal.bind.JsonTreeReader.peek((r3 'this' I:com.google.gson.internal.bind.JsonTreeReader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_41;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_45;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_49;
Node_47 -> Node_48;
Node_49 -> Node_50;
}

