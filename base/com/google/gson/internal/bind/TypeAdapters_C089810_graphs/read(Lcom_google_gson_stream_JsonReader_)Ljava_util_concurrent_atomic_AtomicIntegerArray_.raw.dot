digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.10.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/concurrent\/atomic\/AtomicIntegerArray;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.beginArray():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.hasNext():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|SYNTHETIC\lSplitter:B:3:0x000e\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000e\l|0x000e: INVOKE  (r1 I:int) = (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextInt():int type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x001a \}, TRY_ENTER]\l0x0012: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ NumberFormatException \-\> 0x001a \}]\l0x0016: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ NumberFormatException \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|ExcHandler: NumberFormatException null\lSplitter:B:3:0x000e\l|0x001a: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:com.google.gson.JsonSyntaxException) =  com.google.gson.JsonSyntaxException \l0x001d: INVOKE  \l  (r0 I:com.google.gson.JsonSyntaxException)\l  (r5 I:java.lang.Throwable)\l com.google.gson.JsonSyntaxException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  (r5 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.endArray():void type: VIRTUAL \l0x0024: INVOKE  (r5 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0028: NEW_INSTANCE  (r1 I:java.util.concurrent.atomic.AtomicIntegerArray) =  java.util.concurrent.atomic.AtomicIntegerArray \l0x002a: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicIntegerArray)\l  (r5 I:int)\l java.util.concurrent.atomic.AtomicIntegerArray.\<init\>(int):void type: DIRECT \l0x002d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r2 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:12:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0034: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) \l0x0036: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x003a: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicIntegerArray)\l  (r2 I:int)\l  (r3 I:int)\l java.util.concurrent.atomic.AtomicIntegerArray.set(int, int):void type: VIRTUAL \l0x003d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: RETURN  (r1 I:java.util.concurrent.atomic.AtomicIntegerArray) \l}"];
MethodNode[shape=record,label="{public java.util.concurrent.atomic.AtomicIntegerArray com.google.gson.internal.bind.TypeAdapters.10.read((r4 'this' I:com.google.gson.internal.bind.TypeAdapters$10 A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_10;
}

