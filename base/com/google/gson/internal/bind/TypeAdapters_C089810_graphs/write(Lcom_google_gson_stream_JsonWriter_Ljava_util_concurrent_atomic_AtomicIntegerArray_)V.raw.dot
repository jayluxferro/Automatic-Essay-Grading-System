digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.10.write(Lcom\/google\/gson\/stream\/JsonWriter;Ljava\/util\/concurrent\/atomic\/AtomicIntegerArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.beginArray():com.google.gson.stream.JsonWriter type: VIRTUAL \l0x0003: INVOKE  (r0 I:int) = (r6 I:java.util.concurrent.atomic.AtomicIntegerArray) java.util.concurrent.atomic.AtomicIntegerArray.length():int type: VIRTUAL \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r2 I:int) = \l  (r6 I:java.util.concurrent.atomic.AtomicIntegerArray)\l  (r1 I:int)\l java.util.concurrent.atomic.AtomicIntegerArray.get(int):int type: VIRTUAL \l0x000e: CAST  (r2 I:long) = (long) (r2 I:int) \l0x000f: INVOKE  (r5 I:com.google.gson.stream.JsonWriter), (r2 I:long) com.google.gson.stream.JsonWriter.value(long):com.google.gson.stream.JsonWriter type: VIRTUAL \l0x0012: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r5 I:com.google.gson.stream.JsonWriter) com.google.gson.stream.JsonWriter.endArray():com.google.gson.stream.JsonWriter type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.gson.internal.bind.TypeAdapters.10.write((r4 'this' I:com.google.gson.internal.bind.TypeAdapters$10 A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.gson.stream.JsonWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.concurrent.atomic.AtomicIntegerArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

