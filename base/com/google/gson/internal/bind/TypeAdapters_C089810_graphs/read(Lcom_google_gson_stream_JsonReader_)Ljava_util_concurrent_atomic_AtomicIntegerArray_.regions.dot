digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.10.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/concurrent\/atomic\/AtomicIntegerArray;" {
subgraph cluster_Region_2043357844 {
label = "R(5:0|(1:(1:4))|8|(1:10)|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\lr5.beginArray()\l}"];
subgraph cluster_LoopRegion_981988351 {
label = "LOOP:0: (1:(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r5.hasNext() != false) goto L_0x000e\l}"];
subgraph cluster_Region_168033218 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_519300828 {
label = "Try: R(1:4) catches: R(2:5|7)";
node [shape=record,color=blue];
subgraph cluster_Region_1612653239 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|LOOP_END\lCatch:\{ NumberFormatException \-\> 0x001a \}\lSplitter:B:3:0x000e\lLOOP:0: B:1:0x0008\-\>B:4:?\l|r0.add(java.lang.Integer.valueOf(r5.nextInt()))     \/\/ Catch:\{ NumberFormatException \-\> 0x001a \}\l}"];
}
subgraph cluster_Region_1800375060 {
label = "R(2:5|7) | ExcHandler: NumberFormatException (r5v2 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|ExcHandler: NumberFormatException (r5v2 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\lSplitter:B:3:0x000e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|throw new com.google.gson.JsonSyntaxException((java.lang.Throwable) r5)\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0021|r5.endArray()\lint int r5 = r0.size()\ljava.util.concurrent.atomic.AtomicIntegerArray java.util.concurrent.atomic.AtomicIntegerArray r1 = new java.util.concurrent.atomic.AtomicIntegerArray(r5)\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_231563956 {
label = "LOOP:1: (1:10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002e|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:8:0x0021, B:10:0x0030] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x002e\-\>B:10:0x0030\l|if (r2 \< r5) goto L_0x0030\l}"];
subgraph cluster_Region_697727062 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0030|LOOP_END\lLOOP:1: B:9:0x002e\-\>B:10:0x0030\l|r1.set(r2, ((java.lang.Integer) r0.get(r2)).intValue())\lr2++\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0040|RETURN\l|return r1\l}"];
}
subgraph cluster_Region_1800375060 {
label = "R(2:5|7) | ExcHandler: NumberFormatException (r5v2 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|ExcHandler: NumberFormatException (r5v2 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\lSplitter:B:3:0x000e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|throw new com.google.gson.JsonSyntaxException((java.lang.Throwable) r5)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0008|LOOP_START\lLOOP:0: B:1:0x0008\-\>B:4:?\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e|SYNTHETIC\lSplitter:B:3:0x000e\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001b}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0021|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0040|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.util.concurrent.atomic.AtomicIntegerArray com.google.gson.internal.bind.TypeAdapters.10.read((r4v0 'this' com.google.gson.internal.bind.TypeAdapters$10 A[IMMUTABLE_TYPE, THIS]), (r5v0 com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13[style=dashed];
Node_10 -> Node_9;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_6 -> Node_7;
Node_12 -> Node_8;
Node_13 -> Node_11;
}

