digraph "CFG forcom.google.gson.internal.bind.MapTypeAdapterFactory.Adapter.keyToString(Lcom\/google\/gson\/JsonElement;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r2.isJsonPrimitive() == false) goto L_0x0039\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|com.google.gson.JsonPrimitive r2 = r2.getAsJsonPrimitive()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r2.isNumber() == false) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010}"];
Node_5 [shape=record,label="{5\:\ 0x0018|RETURN\l|return java.lang.String.valueOf(r2.getAsNumber())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019}"];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r2.isBoolean() == false) goto L_0x0028\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f}"];
Node_9 [shape=record,label="{9\:\ 0x0027|RETURN\l|return java.lang.Boolean.toString(r2.getAsBoolean())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028}"];
Node_11 [shape=record,label="{11\:\ 0x002c|if (r2.isString() == false) goto L_0x0033\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e}"];
Node_13 [shape=record,label="{13\:\ 0x0032|RETURN\l|return r2.getAsString()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033}"];
Node_15 [shape=record,label="{15\:\ 0x0038|throw new java.lang.AssertionError()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039}"];
Node_17 [shape=record,label="{17\:\ 0x003d|if (r2.isJsonNull() == false) goto L_0x0042\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|RETURN\l|return \"null\"\l}"];
Node_19 [shape=record,label="{19\:\ 0x0042}"];
Node_20 [shape=record,label="{20\:\ 0x0047|throw new java.lang.AssertionError()\l}"];
MethodNode[shape=record,label="{private java.lang.String com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter.keyToString((r1v0 'this' com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter A[IMMUTABLE_TYPE, THIS]), (r2v0 com.google.gson.JsonElement A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
}

