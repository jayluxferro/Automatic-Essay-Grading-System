digraph "CFG forcom.google.gson.internal.bind.TypeAdapters.27.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/Calendar;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x0004: SGET  (r1 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.NULL com.google.gson.stream.JsonToken \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextNull():void type: VIRTUAL \l0x000b: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r10 I:java.util.Calendar) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.beginObject():void type: VIRTUAL \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r0 I:com.google.gson.stream.JsonToken) = (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.peek():com.google.gson.stream.JsonToken type: VIRTUAL \l0x001b: SGET  (r1 I:com.google.gson.stream.JsonToken) =  com.google.gson.stream.JsonToken.END_OBJECT com.google.gson.stream.JsonToken \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0063 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r0 I:java.lang.String) = (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextName():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r1 I:int) = (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.nextInt():int type: VIRTUAL \l0x0027: CONST_STR  (r8 I:java.lang.String) =  \"year\" \l0x0029: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: CONST_STR  (r8 I:java.lang.String) =  \"month\" \l0x0033: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: CONST_STR  (r8 I:java.lang.String) =  \"dayOfMonth\" \l0x003d: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0045 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: CONST_STR  (r8 I:java.lang.String) =  \"hourOfDay\" \l0x0047: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|0x004b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004f \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: CONST_STR  (r8 I:java.lang.String) =  \"minute\" \l0x0051: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|0x0055: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: CONST_STR  (r8 I:java.lang.String) =  \"second\" \l0x005b: INVOKE  (r0 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x005f|0x005f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|0x0061: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0063|0x0063: INVOKE  (r10 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.endObject():void type: VIRTUAL \l0x0066: NEW_INSTANCE  (r10 I:java.util.GregorianCalendar) =  java.util.GregorianCalendar \l0x0068: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0069: INVOKE  \l  (r1 I:java.util.GregorianCalendar)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l java.util.GregorianCalendar.\<init\>(int, int, int, int, int, int):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x006c|0x006c: RETURN  (r10 I:java.util.Calendar) \l}"];
MethodNode[shape=record,label="{public java.util.Calendar com.google.gson.internal.bind.TypeAdapters.27.read((r9 'this' I:com.google.gson.internal.bind.TypeAdapters$27 A[IMMUTABLE_TYPE, THIS]), (r10 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_25;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_5;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_5;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_5;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_5;
Node_22 -> Node_23;
Node_23 -> Node_5;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_5;
Node_25 -> Node_26;
}

