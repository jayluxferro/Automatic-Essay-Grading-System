digraph "CFG forcom.google.gson.internal.LinkedTreeMap.Node.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r4 instanceof java.util.Map.Entry) == false) goto L_0x0037\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|java.util.Map$Entry r4 = (java.util.Map.Entry) r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r3.key != null) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r4.getKey() != null) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x001c|if (r3.key.equals(r4.getKey()) == false) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e}"];
Node_9 [shape=record,label="{9\:\ 0x0020|if (r3.value != null) goto L_0x0029\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022}"];
Node_11 [shape=record,label="{11\:\ 0x0026|if (r4.getValue() != null) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029}"];
Node_13 [shape=record,label="{13\:\ 0x0033|if (r3.value.equals(r4.getValue()) == false) goto L_?\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean com.google.gson.internal.LinkedTreeMap.Node.equals((r3v0 'this' com.google.gson.internal.LinkedTreeMap$Node A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_8[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_14[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
}

