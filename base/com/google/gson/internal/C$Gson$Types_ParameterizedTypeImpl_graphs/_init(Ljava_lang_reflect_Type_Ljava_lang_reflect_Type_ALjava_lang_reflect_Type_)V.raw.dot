digraph "CFG forcom.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.\<init\>(Ljava\/lang\/reflect\/Type;Ljava\/lang\/reflect\/Type;[Ljava\/lang\/reflect\/Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: INSTANCE_OF  (r0 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.lang.Class \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0009: CHECK_CAST  (r0 I:java.lang.Class) = (java.lang.Class) (r0 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r2 I:int) = (r0 I:java.lang.Class) java.lang.Class.getModifiers():int type: VIRTUAL \l0x000f: INVOKE  (r2 I:boolean) = (r2 I:int) java.lang.reflect.Modifier.isStatic(int):boolean type: STATIC \l0x0013: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r0 I:java.lang.Class) = (r0 I:java.lang.Class) java.lang.Class.getEnclosingClass():java.lang.Class type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: INVOKE  (r3 I:boolean) com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002d \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: INVOKE  (r5 I:java.lang.reflect.Type) = (r5 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):java.lang.reflect.Type type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: IPUT  \l  (r5 I:java.lang.reflect.Type)\l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.ownerType java.lang.reflect.Type \l0x0033: INVOKE  (r5 I:java.lang.reflect.Type) = (r6 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):java.lang.reflect.Type type: STATIC \l0x0037: IPUT  \l  (r5 I:java.lang.reflect.Type)\l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.rawType java.lang.reflect.Type \l0x0039: INVOKE  (r5 I:java.lang.Object) = (r7 I:java.lang.Object) java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x003d: CHECK_CAST  (r5 I:java.lang.reflect.Type[]) = (java.lang.reflect.Type[]) (r5 I:?[OBJECT, ARRAY]) \l0x003f: IPUT  \l  (r5 I:java.lang.reflect.Type[])\l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x0041: IGET  (r5 I:java.lang.reflect.Type[]) = \l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x0043: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: IF  (r1 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:20:0x0063 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: IGET  (r6 I:java.lang.reflect.Type[]) = \l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x0048: AGET  (r6 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x004a: INVOKE  (r6 I:java.lang.Object) com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x004d: IGET  (r6 I:java.lang.reflect.Type[]) = \l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x004f: AGET  (r6 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0051: INVOKE  (r6 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x0054: IGET  (r6 I:java.lang.reflect.Type[]) = \l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x0056: IGET  (r7 I:java.lang.reflect.Type[]) = \l  (r4 I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl)\l com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[] \l0x0058: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x005a: INVOKE  (r7 I:java.lang.reflect.Type) = (r7 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):java.lang.reflect.Type type: STATIC \l0x005e: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0060: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.\<init\>((r4 'this' I:com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_18;
}

