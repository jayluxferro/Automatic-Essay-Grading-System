digraph "CFG forcom.google.gson.internal.LinkedHashTreeMap.doubleCapacity()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>[]) = (r2 I:com.google.gson.internal.LinkedHashTreeMap) com.google.gson.internal.LinkedHashTreeMap.table com.google.gson.internal.LinkedHashTreeMap$Node[] \l0x0002: INVOKE  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node[]) = (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node[]) com.google.gson.internal.LinkedHashTreeMap.doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[]):com.google.gson.internal.LinkedHashTreeMap$Node[] type: STATIC \l0x0006: IPUT  \l  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>[])\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap)\l com.google.gson.internal.LinkedHashTreeMap.table com.google.gson.internal.LinkedHashTreeMap$Node[] \l0x0008: IGET  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>[]) = (r2 I:com.google.gson.internal.LinkedHashTreeMap) com.google.gson.internal.LinkedHashTreeMap.table com.google.gson.internal.LinkedHashTreeMap$Node[] \l0x000a: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x000b: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x000d: IGET  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>[]) = (r2 I:com.google.gson.internal.LinkedHashTreeMap) com.google.gson.internal.LinkedHashTreeMap.table com.google.gson.internal.LinkedHashTreeMap$Node[] \l0x000f: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0010: ARITH  (r1 I:int) = (r1 I:int) \/ (4 int) \l0x0012: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0013: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap)\l com.google.gson.internal.LinkedHashTreeMap.threshold int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.gson.internal.LinkedHashTreeMap.doubleCapacity((r2 'this' I:com.google.gson.internal.LinkedHashTreeMap A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

