digraph "CFG forcom.google.gson.internal.LinkedHashTreeMap.put(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node) = \l  (r1 I:com.google.gson.internal.LinkedHashTreeMap)\l  (r2 I:java.lang.Object)\l  (r0 I:boolean)\l com.google.gson.internal.LinkedHashTreeMap.find(java.lang.Object, boolean):com.google.gson.internal.LinkedHashTreeMap$Node type: VIRTUAL \l0x0007: IGET  (r0 I:V) = (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.value java.lang.Object \l0x0009: IPUT  \l  (r3 I:V)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.value java.lang.Object \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r0 I:V) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x000e: CONST_STR  (r3 I:java.lang.String) =  \"key == null\" \l0x0010: INVOKE  \l  (r2 I:java.lang.NullPointerException)\l  (r3 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public V com.google.gson.internal.LinkedHashTreeMap.put((r1 'this' I:com.google.gson.internal.LinkedHashTreeMap A[IMMUTABLE_TYPE, THIS]), (r2 I:K A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:V A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TK;TV;)TV;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

