digraph "CFG forcom.google.gson.internal.$Gson$Types.getRawType(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/Class;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r4 instanceof java.lang.Class) == false) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return (java.lang.Class) r4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if ((r4 instanceof java.lang.reflect.ParameterizedType) == false) goto L_0x0019\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|java.lang.reflect.Type r4 = ((java.lang.reflect.ParameterizedType) r4).getRawType()\lcom.google.gson.internal.C$Gson$Preconditions.checkArgument(r4 instanceof java.lang.Class)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return (java.lang.Class) r4\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019}"];
Node_9 [shape=record,label="{9\:\ 0x001c|if ((r4 instanceof java.lang.reflect.GenericArrayType) == false) goto L_0x0031\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e}"];
Node_11 [shape=record,label="{11\:\ 0x0030|RETURN\l|return java.lang.reflect.Array.newInstance(getRawType(((java.lang.reflect.GenericArrayType) r4).getGenericComponentType()), 0).getClass()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031}"];
Node_13 [shape=record,label="{13\:\ 0x0033|if ((r4 instanceof java.lang.reflect.TypeVariable) == false) goto L_0x0038\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|RETURN\l|return java.lang.Object.class\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038}"];
Node_16 [shape=record,label="{16\:\ 0x003a|if ((r4 instanceof java.lang.reflect.WildcardType) == false) goto L_0x0049\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c}"];
Node_18 [shape=record,label="{18\:\ 0x0048|RETURN\l|return getRawType(((java.lang.reflect.WildcardType) r4).getUpperBounds()[0])\l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|if (r4 != null) goto L_0x004e\l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|java.lang.String r0 = \"null\"\l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|java.lang.String r0 = r4.getClass().getName()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|PHI: r0 \l  PHI: (r0v5 java.lang.String) = (r0v7 java.lang.String), (r0v8 java.lang.String) binds: [B:21:0x004e, B:20:0x004b] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Expected a Class, ParameterizedType, or GenericArrayType, but \<\")\lr2.append(r4)\lr2.append(\"\> is of type \")\lr2.append(r0)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
MethodNode[shape=record,label="{public static java.lang.Class\<?\> com.google.gson.internal.$Gson$Types.getRawType((r4v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, ), Ljava\/lang\/Class\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

