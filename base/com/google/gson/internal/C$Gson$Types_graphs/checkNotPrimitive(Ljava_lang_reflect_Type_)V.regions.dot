digraph "CFG forcom.google.gson.internal.$Gson$Types.checkNotPrimitive(Ljava\/lang\/reflect\/Type;)V" {
subgraph cluster_Region_1603001742 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|PHI: r1 \l  PHI: (r1v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.gson.internal.C$Gson$Preconditions.checkArgument(!(r1 instanceof java.lang.Class) \|\| !((java.lang.Class) r1).isPrimitive())\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000f}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013}"];
MethodNode[shape=record,label="{static void com.google.gson.internal.$Gson$Types.checkNotPrimitive((r1v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

