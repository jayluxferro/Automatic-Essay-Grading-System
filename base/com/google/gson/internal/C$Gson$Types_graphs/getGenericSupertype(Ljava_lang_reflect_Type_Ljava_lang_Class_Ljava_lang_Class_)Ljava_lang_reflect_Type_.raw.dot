digraph "CFG forcom.google.gson.internal.$Gson$Types.getGenericSupertype(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Class;Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r3 I:boolean) = (r5 I:java.lang.Class) java.lang.Class.isInterface():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r3 I:java.lang.Class[]) = (r4 I:java.lang.Class) java.lang.Class.getInterfaces():java.lang.Class[] type: VIRTUAL \l0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: ARRAY_LENGTH  (r1 I:int) = (r3 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: AGET  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: INVOKE  (r3 I:java.lang.reflect.Type[]) = (r4 I:java.lang.Class) java.lang.Class.getGenericInterfaces():java.lang.reflect.Type[] type: VIRTUAL \l0x0019: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: AGET  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x001e: INVOKE  (r2 I:boolean) = (r5 I:java.lang.Class), (r2 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: INVOKE  (r4 I:java.lang.reflect.Type[]) = (r4 I:java.lang.Class) java.lang.Class.getGenericInterfaces():java.lang.reflect.Type[] type: VIRTUAL \l0x0028: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002a: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002c: INVOKE  (r3 I:java.lang.reflect.Type) = \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:java.lang.Class)\l  (r5 I:java.lang.Class)\l com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):java.lang.reflect.Type type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: INVOKE  (r3 I:boolean) = (r4 I:java.lang.Class) java.lang.Class.isInterface():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x005a \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x005a \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: INVOKE  (r3 I:java.lang.Class) = (r4 I:java.lang.Class) java.lang.Class.getSuperclass():java.lang.Class type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0049 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: INVOKE  (r3 I:java.lang.reflect.Type) = (r4 I:java.lang.Class) java.lang.Class.getGenericSuperclass():java.lang.reflect.Type type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: INVOKE  (r0 I:boolean) = (r5 I:java.lang.Class), (r3 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0058 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: INVOKE  (r4 I:java.lang.reflect.Type) = (r4 I:java.lang.Class) java.lang.Class.getGenericSuperclass():java.lang.reflect.Type type: VIRTUAL \l0x0053: INVOKE  (r3 I:java.lang.reflect.Type) = \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:java.lang.Class)\l  (r5 I:java.lang.Class)\l com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):java.lang.reflect.Type type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0057|0x0057: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|0x0058: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|0x005a: RETURN  (r5 I:java.lang.reflect.Type) \l}"];
MethodNode[shape=record,label="{static java.lang.reflect.Type com.google.gson.internal.$Gson$Types.getGenericSupertype((r3 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/reflect\/Type;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_5;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_28;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_17;
}

