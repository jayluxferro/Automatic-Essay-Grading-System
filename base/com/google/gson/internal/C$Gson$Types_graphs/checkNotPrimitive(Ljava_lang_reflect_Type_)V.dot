digraph "CFG forcom.google.gson.internal.$Gson$Types.checkNotPrimitive(Ljava\/lang\/reflect\/Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r1 instanceof java.lang.Class) == false) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (((java.lang.Class) r1).isPrimitive() != false) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|r1 = false\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r1 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v2 boolean), (r1v5 boolean) binds: [B:5:0x000f, B:4:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|com.google.gson.internal.C$Gson$Preconditions.checkArgument(r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\l|return\l}"];
MethodNode[shape=record,label="{static void com.google.gson.internal.$Gson$Types.checkNotPrimitive((r1v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

