digraph "CFG forcom.google.gson.internal.$Gson$Types.getCollectionElementType(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<java.util.Collection\>) =  java.util.Collection.class \l0x0002: INVOKE  (r1 I:java.lang.reflect.Type) = \l  (r1 I:java.lang.reflect.Type)\l  (r2 I:java.lang.Class)\l  (r0 I:java.lang.Class)\l com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):java.lang.reflect.Type type: STATIC \l0x0006: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.reflect.WildcardType \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CHECK_CAST  (r1 I:java.lang.reflect.WildcardType) = (java.lang.reflect.WildcardType) (r1 I:?[OBJECT, ARRAY]) \l0x000d: INVOKE  (r1 I:java.lang.reflect.Type[]) = (r1 I:java.lang.reflect.WildcardType) java.lang.reflect.WildcardType.getUpperBounds():java.lang.reflect.Type[] type: INTERFACE \l0x0011: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CHECK_CAST  (r1 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r1 I:?[OBJECT, ARRAY]) \l0x0019: INVOKE  (r1 I:java.lang.reflect.Type[]) = (r1 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l0x001d: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: RETURN  (r1 I:java.lang.reflect.Type) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: CONST_CLASS  (r1 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: RETURN  (r1 I:java.lang.reflect.Type) \l}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Type com.google.gson.internal.$Gson$Types.getCollectionElementType((r1 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/reflect\/Type;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

