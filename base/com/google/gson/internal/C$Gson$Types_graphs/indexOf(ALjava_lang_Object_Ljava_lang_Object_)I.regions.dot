digraph "CFG forcom.google.gson.internal.$Gson$Types.indexOf([Ljava\/lang\/Object;Ljava\/lang\/Object;)I" {
subgraph cluster_Region_1528205403 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r3.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_633545865 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000d\l|if (r1 \< r0) goto L_0x0004\l}"];
subgraph cluster_Region_1758630928 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_793864944 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1484500736 {
label = "IF [B:3:0x000a] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r4.equals(r3[r1]) == true) goto L_0x000c\l}"];
subgraph cluster_Region_931166236 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_513502494 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000d\l|r1++\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0015|throw new java.util.NoSuchElementException()\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0010|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.gson.internal.$Gson$Types.indexOf((r3v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_9;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_4;
}

