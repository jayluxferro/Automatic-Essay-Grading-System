digraph "CFG forcom.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(Ljava\/lang\/reflect\/Type;Ljava\/lang\/Class;)[Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<java.util.Properties\>) =  java.util.Properties.class \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: NEW_ARRAY  (r4 I:java.lang.reflect.Type[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x0009: CONST_CLASS  (r5 I:java.lang.Class\<java.lang.String\>) =  java.lang.String.class \l0x000b: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x000d: CONST_CLASS  (r5 I:java.lang.Class\<java.lang.String\>) =  java.lang.String.class \l0x000f: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: RETURN  (r4 I:java.lang.reflect.Type[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST_CLASS  (r0 I:java.lang.Class\<java.util.Map\>) =  java.util.Map.class \l0x0014: INVOKE  (r4 I:java.lang.reflect.Type) = \l  (r4 I:java.lang.reflect.Type)\l  (r5 I:java.lang.Class)\l  (r0 I:java.lang.Class)\l com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class):java.lang.reflect.Type type: STATIC \l0x0018: INSTANCE_OF  (r5 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CHECK_CAST  (r4 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r4 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r4 I:java.lang.reflect.Type[]) = (r4 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: RETURN  (r4 I:java.lang.reflect.Type[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: NEW_ARRAY  (r4 I:java.lang.reflect.Type[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x0025: CONST_CLASS  (r5 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0027: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0029: CONST_CLASS  (r5 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x002b: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: RETURN  (r4 I:java.lang.reflect.Type[]) \l}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Type[] com.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes((r4 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/Class\<, *\>;)[, Ljava\/lang\/reflect\/Type;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

