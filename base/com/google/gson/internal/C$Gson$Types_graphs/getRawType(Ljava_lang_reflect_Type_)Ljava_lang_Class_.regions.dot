digraph "CFG forcom.google.gson.internal.$Gson$Types.getRawType(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/Class;" {
subgraph cluster_Region_444453691 {
label = "R(1:(2:(1:3)|(1:(2:6|7)(1:(1:11)(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23))))))))) | DECL_VAR: java.lang.String null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1565837407 {
label = "R(2:(1:3)|(1:(2:6|7)(1:(1:11)(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23))))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1597976189 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r4 instanceof java.lang.Class) == true) goto L_0x0004\l}"];
subgraph cluster_Region_947724394 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return (java.lang.Class) r4\l}"];
}
}
subgraph cluster_Region_1290655829 {
label = "R(1:(2:6|7)(1:(1:11)(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23)))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_931194791 {
label = "IF [B:5:0x0009] THEN: R(2:6|7) ELSE: R(1:(1:11)(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23))))))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|if ((r4 instanceof java.lang.reflect.ParameterizedType) == true) goto L_0x000b\l}"];
subgraph cluster_Region_295512988 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|java.lang.reflect.Type java.lang.reflect.Type r4 = ((java.lang.reflect.ParameterizedType) r4).getRawType()\lcom.google.gson.internal.C$Gson$Preconditions.checkArgument(r4 instanceof java.lang.Class)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return (java.lang.Class) r4\l}"];
}
subgraph cluster_Region_300579820 {
label = "R(1:(1:11)(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1086678987 {
label = "IF [B:9:0x001c] THEN: R(1:11) ELSE: R(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001c|if ((r4 instanceof java.lang.reflect.GenericArrayType) == true) goto L_0x001e\l}"];
subgraph cluster_Region_1648894198 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0030|RETURN\l|return java.lang.reflect.Array.newInstance(getRawType(((java.lang.reflect.GenericArrayType) r4).getGenericComponentType()), 0).getClass()\l}"];
}
subgraph cluster_Region_1380273863 {
label = "R(1:(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23)))))";
node [shape=record,color=blue];
subgraph cluster_Region_280132216 {
label = "R(2:(1:14)|(1:(2:(1:18)|(3:(1:20)(1:21)|22|23))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2074262682 {
label = "IF [B:13:0x0033] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0033|if ((r4 instanceof java.lang.reflect.TypeVariable) == true) goto L_0x0035\l}"];
subgraph cluster_Region_1489927304 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0035|RETURN\l|return java.lang.Object.class\l}"];
}
}
subgraph cluster_Region_537207328 {
label = "R(1:(2:(1:18)|(3:(1:20)(1:21)|22|23)))";
node [shape=record,color=blue];
subgraph cluster_Region_602406370 {
label = "R(2:(1:18)|(3:(1:20)(1:21)|22|23))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1297073000 {
label = "IF [B:16:0x003a] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x003a|if ((r4 instanceof java.lang.reflect.WildcardType) == true) goto L_0x003c\l}"];
subgraph cluster_Region_1724832885 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0048|RETURN\l|return getRawType(((java.lang.reflect.WildcardType) r4).getUpperBounds()[0])\l}"];
}
}
subgraph cluster_Region_1876162222 {
label = "R(3:(1:20)(1:21)|22|23)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1934036571 {
label = "IF [B:19:0x0049] THEN: R(1:20) ELSE: R(1:21)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0049|if (r4 == null) goto L_0x004b\l}"];
subgraph cluster_Region_1962507133 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x004b|java.lang.String r0 = \"null\"\l}"];
}
subgraph cluster_Region_1774982911 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x004e|java.lang.String r0 = r4.getClass().getName()\l}"];
}
}
Node_22 [shape=record,label="{22\:\ 0x0056|PHI: r0 \l  PHI: (r0v5 java.lang.String) = (r0v7 java.lang.String), (r0v8 java.lang.String) binds: [B:21:0x004e, B:20:0x004b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|throw new java.lang.IllegalArgumentException(\"Expected a Class, ParameterizedType, or GenericArrayType, but \<\" + r4 + \"\> is of type \" + r0)\l}"];
}
}
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0007}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001e}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0031}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0038}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x003c}"];
MethodNode[shape=record,label="{public static java.lang.Class\<?\> com.google.gson.internal.$Gson$Types.getRawType((r4v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, ), Ljava\/lang\/Class\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_19 -> Node_20;
Node_19 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

