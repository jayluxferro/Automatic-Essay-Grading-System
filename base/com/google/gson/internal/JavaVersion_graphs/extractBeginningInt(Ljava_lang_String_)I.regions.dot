digraph "CFG forcom.google.gson.internal.JavaVersion.extractBeginningInt(Ljava\/lang\/String;)I" {
subgraph cluster_Region_271434583 {
label = "R(1:(3:1|(2:4|(2:(1:11)|(1:6)))|8))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1133421867 {
label = "Try: R(3:1|(2:4|(2:(1:11)|(1:6)))|8) catches: R(1:9)";
node [shape=record,color=blue];
subgraph cluster_Region_91501848 {
label = "R(3:1|(2:4|(2:(1:11)|(1:6)))|8)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ NumberFormatException \-\> 0x0025 \}\lSplitter:B:0:0x0000\l|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder()     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\lint r1 = 0     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
subgraph cluster_LoopRegion_1145972816 {
label = "LOOP:0: (2:4|(2:(1:11)|(1:6)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|Catch:\{ NumberFormatException \-\> 0x0025 \}\l|if (r1 \< r4.length()) goto L_0x000c     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
subgraph cluster_Region_220640802 {
label = "R(2:4|(2:(1:11)|(1:6)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|Catch:\{ NumberFormatException \-\> 0x0025 \}\l|char char r2 = r4.charAt(r1)     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
subgraph cluster_Region_132110120 {
label = "R(2:(1:11)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_702451307 {
label = "IF [B:5:0x0014] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|Catch:\{ NumberFormatException \-\> 0x0025 \}\l|if (java.lang.Character.isDigit(r2) != true) goto L_0x001c     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
subgraph cluster_Region_190981401 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\lEDGE_INSN: B:11:0x001c\-\>B:7:0x001c ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_759948795 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lCatch:\{ NumberFormatException \-\> 0x0025 \}\lLOOP:0: B:2:0x0006\-\>B:6:0x0016\l|r0.append(r2)     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\lr1++     \/\/ Catch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ 0x0024|RETURN\l|return java.lang.Integer.parseInt(r0.toString())\l}"];
}
subgraph cluster_Region_1974171737 {
label = "R(1:9) | ExcHandler: NumberFormatException (unused java.lang.NumberFormatException)\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return \-1\l}"];
}
}
}
subgraph cluster_Region_1974171737 {
label = "R(1:9) | ExcHandler: NumberFormatException (unused java.lang.NumberFormatException)\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return \-1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006|LOOP_START\lCatch:\{ NumberFormatException \-\> 0x0025 \}\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:1:?, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0006\-\>B:6:0x0016\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c|EDGE_INSN: B:11:0x001c\-\>B:7:0x001c ?: BREAK  \lCatch:\{ NumberFormatException \-\> 0x0025 \}\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException (unused java.lang.NumberFormatException)\lSplitter:B:0:0x0000\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.gson.internal.JavaVersion.extractBeginningInt((r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_11 -> Node_7;
Node_6 -> Node_2;
Node_0 -> Node_1;
Node_0 -> Node_10;
Node_2 -> Node_3;
Node_7 -> Node_8;
Node_10 -> Node_9;
Node_12 -> Node_7;
}

