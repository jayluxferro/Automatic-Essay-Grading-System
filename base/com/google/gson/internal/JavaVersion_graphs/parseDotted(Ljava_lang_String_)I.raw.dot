digraph "CFG forcom.google.gson.internal.JavaVersion.parseDotted(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"[._]\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r3 I:java.lang.String[]) = (r3 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x001b \}, TRY_ENTER]\l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l0x0007: AGET  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l0x0009: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l0x000d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: ARRAY_LENGTH  (r2 I:int) = (r3 I:?[]) A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x001a A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l0x0015: INVOKE  (r3 I:int) = (r3 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x001b \}]\l0x0018: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: RETURN  (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:1:0x0002\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.google.gson.internal.JavaVersion.parseDotted((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_9 -> Node_11;
Node_10 -> Node_9;
}

