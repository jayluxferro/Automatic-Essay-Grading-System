digraph "CFG forcom.google.gson.internal.LinkedHashTreeMap.AvlBuilder.add(Lcom\/google\/gson\/internal\/LinkedHashTreeMap$Node;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.right = null\lr6.parent = null\lr6.left = null\lr6.height = 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r5.leavesToSkip \<= 0) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if ((r5.size & 1) != 0) goto L_0x0022\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|r5.size = r5.size + 1\lr5.leavesToSkip = r5.leavesToSkip \- 1\lr5.leavesSkipped = r5.leavesSkipped + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|r6.parent = r5.stack\lr5.stack = r6\lr5.size = r5.size + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|if (r5.leavesToSkip \<= 0) goto L_0x0045\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031}"];
Node_8 [shape=record,label="{8\:\ 0x0034|if ((r5.size & 1) != 0) goto L_0x0045\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|r5.size = r5.size + 1\lr5.leavesToSkip = r5.leavesToSkip \- 1\lr5.leavesSkipped = r5.leavesSkipped + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|r6 = 4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|LOOP_START\lPHI: r6 \l  PHI: (r6v5 int) = (r6v4 int), (r6v6 int) binds: [B:10:0x0045, B:22:0x0089] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0046\-\>B:22:0x0089\l|int r2 = r6 + \-1\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|if ((r5.size & r2) != r2) goto L_0x008c\l}"];
Node_13 [shape=record,label="{13\:\ 0x004d}"];
Node_14 [shape=record,label="{14\:\ 0x004f|if (r5.leavesSkipped != 0) goto L_0x006b\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> r1 = r5.stack\lcom.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> r2 = r1.parent\lcom.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> r3 = r2.parent\lr2.parent = r3.parent\lr5.stack = r2\lr2.left = r3\lr2.right = r1\lr2.height = r1.height + 1\lr3.parent = r2\lr1.parent = r2\l}"];
Node_16 [shape=record,label="{16\:\ 0x006b}"];
Node_17 [shape=record,label="{17\:\ 0x006e|if (r5.leavesSkipped != 1) goto L_0x0082\l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> r1 = r5.stack\lcom.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> r3 = r1.parent\lr5.stack = r3\lr3.right = r1\lr3.height = r1.height + 1\lr1.parent = r3\lr5.leavesSkipped = 0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0082}"];
Node_20 [shape=record,label="{20\:\ 0x0085|if (r5.leavesSkipped != 2) goto L_0x0089\l}"];
Node_21 [shape=record,label="{21\:\ 0x0087|r5.leavesSkipped = 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0089|LOOP_END\lLOOP:0: B:11:0x0046\-\>B:22:0x0089\l|int r6 = r6 * 2\l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|RETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ 0x008c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0089|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0089|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0089|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0089|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.add((r5v0 'this' com.google.gson.internal.LinkedHashTreeMap$AvlBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/gson\/internal\/LinkedHashTreeMap$Node\<, TK;TV;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_26;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_28;
Node_21 -> Node_25;
Node_22 -> Node_11;
Node_24 -> Node_23;
Node_25 -> Node_22;
Node_26 -> Node_22;
Node_27 -> Node_22;
Node_28 -> Node_22;
}

