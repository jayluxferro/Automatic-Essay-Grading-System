digraph "CFG forcom.google.gson.internal.LinkedHashTreeMap.AvlBuilder.add(Lcom\/google\/gson\/internal\/LinkedHashTreeMap$Node;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  \l  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.right com.google.gson.internal.LinkedHashTreeMap$Node \l0x0003: IPUT  \l  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0005: IPUT  \l  (r0 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.left com.google.gson.internal.LinkedHashTreeMap$Node \l0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.height int \l0x000a: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0010: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0015: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0016: IPUT  \l  (r1 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0018: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l0x001a: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x001b: IPUT  \l  (r1 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l0x001d: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l0x001f: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0020: IPUT  \l  (r1 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IGET  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x0024: IPUT  \l  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0026: IPUT  \l  (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x0028: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x002a: ARITH  (r6 I:int) = (r6 I:int) + (r0 I:int) \l0x002b: IPUT  \l  (r6 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x002d: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0045 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0033: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (r0 I:?[int, boolean, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0045 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0038: ARITH  (r6 I:int) = (r6 I:int) + (r0 I:int) \l0x0039: IPUT  \l  (r6 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x003b: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l0x003d: ARITH  (r6 I:int) = (r6 I:int) \- (r0 I:int) \l0x003e: IPUT  \l  (r6 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesToSkip int \l0x0040: IGET  (r6 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l0x0042: ARITH  (r6 I:int) = (r6 I:int) + (r0 I:int) \l0x0043: IPUT  \l  (r6 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.size int \l0x0048: ARITH  (r2 I:int) = (r6 I:int) + (\-1 int) \l0x004a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x008c \l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IGET  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x0053: IGET  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0055: IGET  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0057: IGET  (r4 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0059: IPUT  \l  (r4 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x005b: IPUT  \l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x005d: IPUT  \l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.left com.google.gson.internal.LinkedHashTreeMap$Node \l0x005f: IPUT  \l  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.right com.google.gson.internal.LinkedHashTreeMap$Node \l0x0061: IGET  (r4 I:int) = (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.height int \l0x0063: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int) \l0x0064: IPUT  \l  (r4 I:int)\l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.height int \l0x0066: IPUT  \l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0068: IPUT  \l  (r2 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l}"];
Node_16 [shape=record,label="{16\:\ 0x006b|0x006b: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l0x006d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x006e|0x006e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0082 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|0x0070: IGET  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x0072: IGET  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>) = (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x0074: IPUT  \l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.stack com.google.gson.internal.LinkedHashTreeMap$Node \l0x0076: IPUT  \l  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.right com.google.gson.internal.LinkedHashTreeMap$Node \l0x0078: IGET  (r4 I:int) = (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node) com.google.gson.internal.LinkedHashTreeMap.Node.height int \l0x007a: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int) \l0x007b: IPUT  \l  (r4 I:int)\l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.height int \l0x007d: IPUT  \l  (r3 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\>)\l  (r1 I:com.google.gson.internal.LinkedHashTreeMap$Node)\l com.google.gson.internal.LinkedHashTreeMap.Node.parent com.google.gson.internal.LinkedHashTreeMap$Node \l0x007f: IPUT  \l  (r2 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0082|0x0082: IGET  (r1 I:int) = \l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l0x0084: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0085|0x0085: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0089 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0087|0x0087: IPUT  \l  (r2 I:int)\l  (r5 I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder)\l com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.leavesSkipped int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0089|0x0089: ARITH  (r6 I:int) = (r6 I:int) * (2 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|0x008c: RETURN   \l}"];
MethodNode[shape=record,label="{void com.google.gson.internal.LinkedHashTreeMap.AvlBuilder.add((r5 'this' I:com.google.gson.internal.LinkedHashTreeMap$AvlBuilder A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.gson.internal.LinkedHashTreeMap$Node\<K, V\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/gson\/internal\/LinkedHashTreeMap$Node\<, TK;TV;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_11;
}

