digraph "CFG forcom.google.gson.internal.ConstructorConstructor.get(Lcom\/google\/gson\/reflect\/TypeToken;)Lcom\/google\/gson\/internal\/ObjectConstructor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.reflect.Type) = (r3 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.getType():java.lang.reflect.Type type: VIRTUAL \l0x0004: INVOKE  (r3 I:java.lang.Class) = (r3 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.getRawType():java.lang.Class type: VIRTUAL \l0x0008: IGET  (r1 I:java.util.Map\<java.lang.reflect.Type, com.google.gson.InstanceCreator\<?\>\>) = (r2 I:com.google.gson.internal.ConstructorConstructor) com.google.gson.internal.ConstructorConstructor.instanceCreators java.util.Map \l0x000a: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r1 I:com.google.gson.InstanceCreator) = (com.google.gson.InstanceCreator) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: NEW_INSTANCE  (r3 I:com.google.gson.internal.ConstructorConstructor$1) =  com.google.gson.internal.ConstructorConstructor$1 \l0x0014: INVOKE  \l  (r3 I:com.google.gson.internal.ConstructorConstructor$1)\l  (r2 I:com.google.gson.internal.ConstructorConstructor)\l  (r1 I:com.google.gson.InstanceCreator)\l  (r0 I:java.lang.reflect.Type)\l com.google.gson.internal.ConstructorConstructor.1.\<init\>(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: RETURN  (r3 I:com.google.gson.internal.ObjectConstructor\<T\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IGET  (r1 I:java.util.Map\<java.lang.reflect.Type, com.google.gson.InstanceCreator\<?\>\>) = (r2 I:com.google.gson.internal.ConstructorConstructor) com.google.gson.internal.ConstructorConstructor.instanceCreators java.util.Map \l0x001a: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r1 I:com.google.gson.InstanceCreator) = (com.google.gson.InstanceCreator) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: NEW_INSTANCE  (r3 I:com.google.gson.internal.ConstructorConstructor$2) =  com.google.gson.internal.ConstructorConstructor$2 \l0x0024: INVOKE  \l  (r3 I:com.google.gson.internal.ConstructorConstructor$2)\l  (r2 I:com.google.gson.internal.ConstructorConstructor)\l  (r1 I:com.google.gson.InstanceCreator)\l  (r0 I:java.lang.reflect.Type)\l com.google.gson.internal.ConstructorConstructor.2.\<init\>(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: RETURN  (r3 I:com.google.gson.internal.ObjectConstructor\<T\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: INVOKE  (r1 I:com.google.gson.internal.ObjectConstructor) = \l  (r2 I:com.google.gson.internal.ConstructorConstructor)\l  (r3 I:java.lang.Class)\l com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class):com.google.gson.internal.ObjectConstructor type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: RETURN  (r1 I:com.google.gson.internal.ObjectConstructor\<T\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: INVOKE  (r1 I:com.google.gson.internal.ObjectConstructor) = \l  (r2 I:com.google.gson.internal.ConstructorConstructor)\l  (r0 I:java.lang.reflect.Type)\l  (r3 I:java.lang.Class)\l com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(java.lang.reflect.Type, java.lang.Class):com.google.gson.internal.ObjectConstructor type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN  (r1 I:com.google.gson.internal.ObjectConstructor\<T\>) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: INVOKE  (r3 I:com.google.gson.internal.ObjectConstructor) = \l  (r2 I:com.google.gson.internal.ConstructorConstructor)\l  (r0 I:java.lang.reflect.Type)\l  (r3 I:java.lang.Class)\l com.google.gson.internal.ConstructorConstructor.newUnsafeAllocator(java.lang.reflect.Type, java.lang.Class):com.google.gson.internal.ObjectConstructor type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: RETURN  (r3 I:com.google.gson.internal.ObjectConstructor\<T\>) \l}"];
MethodNode[shape=record,label="{public com.google.gson.internal.ObjectConstructor\<T\> com.google.gson.internal.ConstructorConstructor.get((r2 'this' I:com.google.gson.internal.ConstructorConstructor A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.gson.reflect.TypeToken\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/google\/gson\/reflect\/TypeToken\<, TT;\>;), Lcom\/google\/gson\/internal\/ObjectConstructor\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

