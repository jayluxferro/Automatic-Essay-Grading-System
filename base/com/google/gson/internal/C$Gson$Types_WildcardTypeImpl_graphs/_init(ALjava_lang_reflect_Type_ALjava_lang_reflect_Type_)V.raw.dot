digraph "CFG forcom.google.gson.internal.$Gson$Types.WildcardTypeImpl.\<init\>([Ljava\/lang\/reflect\/Type;[Ljava\/lang\/reflect\/Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r0 I:boolean) com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean):void type: STATIC \l0x000e: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean):void type: STATIC \l0x0017: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x001c: INVOKE  (r0 I:java.lang.Object) com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x001f: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0021: INVOKE  (r0 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x0024: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0026: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: INVOKE  (r1 I:boolean) com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean):void type: STATIC \l0x002f: AGET  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0031: INVOKE  (r4 I:java.lang.reflect.Type) = (r4 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):java.lang.reflect.Type type: STATIC \l0x0035: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:com.google.gson.internal.$Gson$Types$WildcardTypeImpl)\l com.google.gson.internal.$Gson$Types.WildcardTypeImpl.lowerBound java.lang.reflect.Type \l0x0037: CONST_CLASS  (r4 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0039: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:com.google.gson.internal.$Gson$Types$WildcardTypeImpl)\l com.google.gson.internal.$Gson$Types.WildcardTypeImpl.upperBound java.lang.reflect.Type \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x003e: INVOKE  (r5 I:java.lang.Object) com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0041: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0043: INVOKE  (r5 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type):void type: STATIC \l0x0046: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: IPUT  \l  (r5 I:java.lang.reflect.Type)\l  (r3 I:com.google.gson.internal.$Gson$Types$WildcardTypeImpl)\l com.google.gson.internal.$Gson$Types.WildcardTypeImpl.lowerBound java.lang.reflect.Type \l0x0049: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x004b: INVOKE  (r4 I:java.lang.reflect.Type) = (r4 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type):java.lang.reflect.Type type: STATIC \l0x004f: IPUT  \l  (r4 I:java.lang.reflect.Type)\l  (r3 I:com.google.gson.internal.$Gson$Types$WildcardTypeImpl)\l com.google.gson.internal.$Gson$Types.WildcardTypeImpl.upperBound java.lang.reflect.Type \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.gson.internal.$Gson$Types.WildcardTypeImpl.\<init\>((r3 'this' I:com.google.gson.internal.$Gson$Types$WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.reflect.Type[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_15 -> Node_16;
}

