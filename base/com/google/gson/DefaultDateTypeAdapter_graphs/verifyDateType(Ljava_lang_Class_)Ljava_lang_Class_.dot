digraph "CFG forcom.google.gson.DefaultDateTypeAdapter.verifyDateType(Ljava\/lang\/Class;)Ljava\/lang\/Class;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 == java.util.Date.class) goto L_0x0042\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r3 == java.sql.Date.class) goto L_0x0042\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r3 != java.sql.Timestamp.class) goto L_0x000d\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Date type must be one of \")\lr1.append(java.util.Date.class)\lr1.append(\", \")\lr1.append(java.sql.Timestamp.class)\lr1.append(\", or \")\lr1.append(java.sql.Date.class)\lr1.append(\" but was \")\lr1.append(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{private static java.lang.Class\<? extends java.util.Date\> com.google.gson.DefaultDateTypeAdapter.verifyDateType((r3v0 java.lang.Class\<? extends java.util.Date\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, +, Ljava\/util\/Date;, \>;), Ljava\/lang\/Class\<, +, Ljava\/util\/Date;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
}

