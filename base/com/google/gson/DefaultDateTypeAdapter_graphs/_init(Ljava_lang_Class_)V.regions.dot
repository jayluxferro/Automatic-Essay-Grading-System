digraph "CFG forcom.google.gson.DefaultDateTypeAdapter.\<init\>(Ljava\/lang\/Class;)V" {
subgraph cluster_Region_1717594073 {
label = "R(3:0|(1:2)|(1:(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.dateFormats = new java.util.ArrayList()\lr2.dateType = verifyDateType(r3)\lr2.dateFormats.add(java.text.DateFormat.getDateTimeInstance(2, 2, java.util.Locale.US))\l}"];
subgraph cluster_IfRegion_763385099 {
label = "IF [B:1:0x0026] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0026|if (java.util.Locale.getDefault().equals(java.util.Locale.US) == false) goto L_0x0028\l}"];
subgraph cluster_Region_1141212372 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0028|r2.dateFormats.add(java.text.DateFormat.getDateTimeInstance(2, 2))\l}"];
}
}
subgraph cluster_Region_1608266028 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_979880865 {
label = "IF [B:4:0x0035] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0035|if (com.google.gson.internal.JavaVersion.isJava9OrLater() == true) goto L_0x0037\l}"];
subgraph cluster_Region_358676971 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0037|r2.dateFormats.add(com.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(2, 2))\l}"];
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0031}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void com.google.gson.DefaultDateTypeAdapter.\<init\>((r2v0 'this' com.google.gson.DefaultDateTypeAdapter A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Class\<? extends java.util.Date\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, +, Ljava\/util\/Date;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_3 -> Node_4;
}

