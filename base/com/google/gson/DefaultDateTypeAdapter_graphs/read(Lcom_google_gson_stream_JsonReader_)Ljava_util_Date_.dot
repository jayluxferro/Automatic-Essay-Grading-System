digraph "CFG forcom.google.gson.DefaultDateTypeAdapter.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/Date;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4.peek() != com.google.gson.stream.JsonToken.NULL) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r4.nextNull()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return null\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|java.util.Date r4 = deserializeToDate(r4.nextString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|if (r3.dateType != java.util.Date.class) goto L_0x001c\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|RETURN\l|return r4\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if (r3.dateType != java.sql.Timestamp.class) goto L_0x002c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x002b|RETURN\l|return new java.sql.Timestamp(r4.getTime())\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c}"];
Node_12 [shape=record,label="{12\:\ 0x0030|if (r3.dateType != java.sql.Date.class) goto L_0x003c\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032}"];
Node_14 [shape=record,label="{14\:\ 0x003b|RETURN\l|return new java.sql.Date(r4.getTime())\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c}"];
Node_16 [shape=record,label="{16\:\ 0x0041|throw new java.lang.AssertionError()\l}"];
MethodNode[shape=record,label="{public java.util.Date com.google.gson.DefaultDateTypeAdapter.read((r3v0 'this' com.google.gson.DefaultDateTypeAdapter A[IMMUTABLE_TYPE, THIS]), (r4v0 com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

