digraph "CFG forcom.google.gson.Gson.5.read(Lcom\/google\/gson\/stream\/JsonReader;)Ljava\/util\/concurrent\/atomic\/AtomicLongArray;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.beginArray():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.hasNext():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0022 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r1 I:com.google.gson.TypeAdapter) = (r5 I:com.google.gson.Gson$5) com.google.gson.Gson.5.val$longAdapter com.google.gson.TypeAdapter \l0x0010: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:com.google.gson.TypeAdapter)\l  (r6 I:com.google.gson.stream.JsonReader)\l com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader):java.lang.Object type: VIRTUAL \l0x0014: CHECK_CAST  (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r1 I:long) = (r1 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l0x001a: INVOKE  (r1 I:java.lang.Long) = (r1 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x001e: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: INVOKE  (r6 I:com.google.gson.stream.JsonReader) com.google.gson.stream.JsonReader.endArray():void type: VIRTUAL \l0x0025: INVOKE  (r6 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0029: NEW_INSTANCE  (r1 I:java.util.concurrent.atomic.AtomicLongArray) =  java.util.concurrent.atomic.AtomicLongArray \l0x002b: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicLongArray)\l  (r6 I:int)\l java.util.concurrent.atomic.AtomicLongArray.\<init\>(int):void type: DIRECT \l0x002e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IF  (r2 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:7:0x0041 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0035: CHECK_CAST  (r3 I:java.lang.Long) = (java.lang.Long) (r3 I:?[OBJECT, ARRAY]) \l0x0037: INVOKE  (r3 I:long) = (r3 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x003b: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicLongArray)\l  (r2 I:int)\l  (r3 I:long)\l java.util.concurrent.atomic.AtomicLongArray.set(int, long):void type: VIRTUAL \l0x003e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: RETURN  (r1 I:java.util.concurrent.atomic.AtomicLongArray) \l}"];
MethodNode[shape=record,label="{public java.util.concurrent.atomic.AtomicLongArray com.google.gson.Gson.5.read((r5 'this' I:com.google.gson.Gson$5 A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.gson.stream.JsonReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_5;
}

