digraph "CFG forcom.google.gson.reflect.TypeToken.isAssignableFrom(Ljava\/lang\/reflect\/Type;Ljava\/lang\/reflect\/ParameterizedType;Ljava\/util\/Map;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:boolean) = (r10 I:java.lang.Object), (r9 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Class) = (r9 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type):java.lang.Class type: STATIC \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INSTANCE_OF  (r4 I:boolean) = (r9 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0016: CHECK_CAST  (r3 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004c \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: INVOKE  (r9 I:java.lang.reflect.Type[]) = (r3 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l0x001e: INVOKE  (r4 I:java.lang.reflect.TypeVariable[]) = (r1 I:java.lang.Class) java.lang.Class.getTypeParameters():java.lang.reflect.TypeVariable[] type: VIRTUAL \l0x0022: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: ARRAY_LENGTH  (r6 I:int) = (r9 I:?[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: AGET  (r6 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0028: AGET  (r7 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: INSTANCE_OF  (r8 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.lang.reflect.TypeVariable \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: CHECK_CAST  (r6 I:java.lang.reflect.TypeVariable) = (java.lang.reflect.TypeVariable) (r6 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.reflect.TypeVariable) java.lang.reflect.TypeVariable.getName():java.lang.String type: INTERFACE \l0x0034: INVOKE  (r6 I:java.lang.Object) = (r11 I:java.util.Map), (r6 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0038: CHECK_CAST  (r6 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.reflect.TypeVariable) java.lang.reflect.TypeVariable.getName():java.lang.String type: INTERFACE \l0x003f: INVOKE  \l  (r11 I:java.util.Map)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0042: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: INVOKE  (r9 I:boolean) = \l  (r3 I:java.lang.reflect.ParameterizedType)\l  (r10 I:java.lang.reflect.ParameterizedType)\l  (r11 I:java.util.Map)\l com.google.gson.reflect.TypeToken.typeEquals(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType, java.util.Map):boolean type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004c \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: RETURN  (r2 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: INVOKE  (r9 I:java.lang.reflect.Type[]) = (r1 I:java.lang.Class) java.lang.Class.getGenericInterfaces():java.lang.reflect.Type[] type: VIRTUAL \l0x0050: ARRAY_LENGTH  (r3 I:int) = (r9 I:?[]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0051|0x0051: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:27:0x0064 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|0x0053: AGET  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0055: NEW_INSTANCE  (r5 I:java.util.HashMap) =  java.util.HashMap \l0x0057: INVOKE  (r5 I:java.util.HashMap), (r11 I:java.util.Map) java.util.HashMap.\<init\>(java.util.Map):void type: DIRECT \l0x005a: INVOKE  (r4 I:boolean) = \l  (r4 I:java.lang.reflect.Type)\l  (r10 I:java.lang.reflect.ParameterizedType)\l  (r5 I:java.util.Map)\l com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):boolean type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0061 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0060|0x0060: RETURN  (r2 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0064|0x0064: INVOKE  (r9 I:java.lang.reflect.Type) = (r1 I:java.lang.Class) java.lang.Class.getGenericSuperclass():java.lang.reflect.Type type: VIRTUAL \l0x0068: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x006a: INVOKE  (r0 I:java.util.HashMap), (r11 I:java.util.Map) java.util.HashMap.\<init\>(java.util.Map):void type: DIRECT \l0x006d: INVOKE  (r9 I:boolean) = \l  (r9 I:java.lang.reflect.Type)\l  (r10 I:java.lang.reflect.ParameterizedType)\l  (r0 I:java.util.Map)\l com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):boolean type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x0071|0x0071: RETURN  (r9 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.google.gson.reflect.TypeToken.isAssignableFrom((r9 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.Map\<java.lang.String, java.lang.reflect.Type\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/reflect\/ParameterizedType;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/reflect\/Type;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_22;
Node_27 -> Node_28;
}

