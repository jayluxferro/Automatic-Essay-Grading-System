digraph "CFG forcom.google.gson.reflect.TypeToken.isAssignableFrom(Ljava\/lang\/reflect\/Type;Ljava\/lang\/reflect\/ParameterizedType;Ljava\/util\/Map;)Z" {
subgraph cluster_Region_536506429 {
label = "R(2:0|(2:(1:2)|(1:(2:(1:5)|(6:6|(1:8)|(3:10|(3:13|(1:16)|17)|(1:20))|21|(1:(2:(1:25)|(1:26)))|28)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_Region_2057602117 {
label = "R(2:(1:2)|(1:(2:(1:5)|(6:6|(1:8)|(3:10|(3:13|(1:16)|17)|(1:20))|21|(1:(2:(1:25)|(1:26)))|28))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1211569030 {
label = "IF [B:1:0x0001] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r9 == null) goto L_0x0003\l}"];
subgraph cluster_Region_960350796 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_997520117 {
label = "R(1:(2:(1:5)|(6:6|(1:8)|(3:10|(3:13|(1:16)|17)|(1:20))|21|(1:(2:(1:25)|(1:26)))|28)))";
node [shape=record,color=blue];
subgraph cluster_Region_1697435506 {
label = "R(2:(1:5)|(6:6|(1:8)|(3:10|(3:13|(1:16)|17)|(1:20))|21|(1:(2:(1:25)|(1:26)))|28))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_368528242 {
label = "IF [B:4:0x0009] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r10.equals(r9) == true) goto L_0x000b\l}"];
subgraph cluster_Region_1112509482 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1462555622 {
label = "R(6:6|(1:8)|(3:10|(3:13|(1:16)|17)|(1:20))|21|(1:(2:(1:25)|(1:26)))|28)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000c|java.lang.Class java.lang.Class\<?\> r1 = com.google.gson.internal.C$Gson$Types.getRawType(r9)\ljava.lang.reflect.ParameterizedType r3 = null\l}"];
subgraph cluster_IfRegion_1588604364 {
label = "IF [B:7:0x0013] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0013|if ((r9 instanceof java.lang.reflect.ParameterizedType) == true) goto L_0x0015\l}"];
subgraph cluster_Region_380792625 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0015|java.lang.reflect.ParameterizedType r3 = (java.lang.reflect.ParameterizedType) r9\l}"];
}
}
subgraph cluster_IfRegion_1444361091 {
label = "IF [B:9:0x0018] THEN: R(3:10|(3:13|(1:16)|17)|(1:20)) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0018|PHI: r3 \l  PHI: (r3v1 java.lang.reflect.ParameterizedType) = (r3v0 java.lang.reflect.ParameterizedType), (r3v4 java.lang.reflect.ParameterizedType) binds: [B:7:0x0013, B:8:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 != null) goto L_0x001a\l}"];
subgraph cluster_Region_1510311892 {
label = "R(3:10|(3:13|(1:16)|17)|(1:20))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001a|java.lang.reflect.Type[] java.lang.reflect.Type[] r9 = r3.getActualTypeArguments()\ljava.lang.reflect.TypeVariable[] java.lang.reflect.TypeVariable[] r4 = r1.getTypeParameters()\lint r5 = 0\l}"];
subgraph cluster_LoopRegion_299399493 {
label = "LOOP:0: (3:13|(1:16)|17)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0024|if (r5 \< r9.length) goto L_0x0026\l}"];
subgraph cluster_Region_337008552 {
label = "R(3:13|(1:16)|17)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0026|java.lang.reflect.Type r6 = r9[r5]\ljava.lang.reflect.TypeVariable r7 = r4[r5]\l}"];
subgraph cluster_LoopRegion_929135841 {
label = "LOOP:1: (1:16)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002c|if ((r6 instanceof java.lang.reflect.TypeVariable) != false) goto L_0x002e\l}"];
subgraph cluster_Region_2071131522 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x002e|LOOP_END\lLOOP:1: B:14:0x002a\-\>B:16:0x002e\l|java.lang.reflect.Type r6 = r11.get(((java.lang.reflect.TypeVariable) r6).getName())\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x003b|LOOP_END\lLOOP:0: B:11:0x0023\-\>B:17:0x003b\l|r11.put(r7.getName(), r6)\lr5++\l}"];
}
}
subgraph cluster_IfRegion_1737845060 {
label = "IF [B:19:0x0049] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0049|if (typeEquals(r3, r10, r11) == true) goto L_0x004b\l}"];
subgraph cluster_Region_1575239223 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x004b|RETURN\l|return true\l}"];
}
}
}
}
Node_21 [shape=record,label="{21\:\ 0x004c|int int r3 = r1.getGenericInterfaces().length\l}"];
subgraph cluster_LoopRegion_1927762466 {
label = "LOOP:2: (1:(2:(1:25)|(1:26)))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0051|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v3 int) binds: [B:21:0x004c, B:26:0x0061] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:22:0x0051\-\>B:26:0x0061\l|if (r0 \< r3) goto L_0x0053\l}"];
subgraph cluster_Region_1282911880 {
label = "R(1:(2:(1:25)|(1:26)))";
node [shape=record,color=blue];
subgraph cluster_Region_334898311 {
label = "R(2:(1:25)|(1:26))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1864344904 {
label = "IF [B:24:0x005e] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x005e|if (isAssignableFrom(r4, r10, new java.util.HashMap(r11)) == true) goto L_0x0060\l}"];
subgraph cluster_Region_656514251 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0060|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_989811535 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0061|LOOP_END\lLOOP:2: B:22:0x0051\-\>B:26:0x0061\l|r0++\l}"];
}
}
}
}
Node_28 [shape=record,label="{28\:\ 0x0071|RETURN\l|return isAssignableFrom(r1.getGenericSuperclass(), r10, new java.util.HashMap(r11))\l}"];
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0023|LOOP_START\lPHI: r5 \l  PHI: (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:10:0x001a, B:17:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0023\-\>B:17:0x003b\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002a|LOOP_START\lPHI: r6 \l  PHI: (r6v2 java.lang.reflect.Type) = (r6v1 java.lang.reflect.Type), (r6v6 java.lang.reflect.Type) binds: [B:13:0x0026, B:16:0x002e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:14:0x002a\-\>B:16:0x002e\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0045}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0053}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0064}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0045|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x003b|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0064|SYNTHETIC\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0060|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean com.google.gson.reflect.TypeToken.isAssignableFrom((r9v0 java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.util.Map\<java.lang.String, java.lang.reflect.Type\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Type;, Ljava\/lang\/reflect\/ParameterizedType;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/reflect\/Type;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_21[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_29[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_30[style=dashed];
Node_16 -> Node_14;
Node_17 -> Node_11;
Node_19 -> Node_20;
Node_19 -> Node_21[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_31[style=dashed];
Node_24 -> Node_26[style=dashed];
Node_24 -> Node_32;
Node_26 -> Node_22;
Node_3 -> Node_4;
Node_11 -> Node_12;
Node_14 -> Node_15;
Node_18 -> Node_19;
Node_23 -> Node_24;
Node_27 -> Node_28;
Node_29 -> Node_18;
Node_30 -> Node_17;
Node_31 -> Node_27;
Node_32 -> Node_25;
}

