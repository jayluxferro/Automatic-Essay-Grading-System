digraph "CFG forcom.google.gson.reflect.TypeToken.typeEquals(Ljava\/lang\/reflect\/ParameterizedType;Ljava\/lang\/reflect\/ParameterizedType;Ljava\/util\/Map;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.reflect.Type) = (r4 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getRawType():java.lang.reflect.Type type: INTERFACE \l0x0004: INVOKE  (r1 I:java.lang.reflect.Type) = (r5 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getRawType():java.lang.reflect.Type type: INTERFACE \l0x0008: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r4 I:java.lang.reflect.Type[]) = (r4 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l0x0013: INVOKE  (r5 I:java.lang.reflect.Type[]) = (r5 I:java.lang.reflect.ParameterizedType) java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] type: INTERFACE \l0x0017: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: ARRAY_LENGTH  (r2 I:int) = (r4 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x001d: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x001f: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.reflect.Type)\l  (r3 I:java.lang.reflect.Type)\l  (r6 I:java.util.Map)\l com.google.gson.reflect.TypeToken.matches(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: RETURN  (r4 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.google.gson.reflect.TypeToken.typeEquals((r4 I:java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.reflect.ParameterizedType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.Map\<java.lang.String, java.lang.reflect.Type\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/ParameterizedType;, Ljava\/lang\/reflect\/ParameterizedType;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/reflect\/Type;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_3;
Node_9 -> Node_10;
}

