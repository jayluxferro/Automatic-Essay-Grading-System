digraph "CFG forcom.google.gson.reflect.TypeToken.isAssignableFrom(Ljava\/lang\/reflect\/Type;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r1 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0006: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r5 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l0x000a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r1 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0010: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.Class \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IGET  (r0 I:java.lang.Class\<? super T\>) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.rawType java.lang.Class \l0x0016: INVOKE  (r5 I:java.lang.Class) = (r5 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type):java.lang.Class type: STATIC \l0x001a: INVOKE  (r5 I:boolean) = (r0 I:java.lang.Class), (r5 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: RETURN  (r5 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IGET  (r1 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0021: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.reflect.ParameterizedType \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IGET  (r0 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0027: CHECK_CAST  (r0 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r0 I:?[OBJECT, ARRAY]) \l0x0029: NEW_INSTANCE  (r1 I:java.util.HashMap) =  java.util.HashMap \l0x002b: INVOKE  (r1 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x002e: INVOKE  (r5 I:boolean) = \l  (r5 I:java.lang.reflect.Type)\l  (r0 I:java.lang.reflect.ParameterizedType)\l  (r1 I:java.util.Map)\l com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: RETURN  (r5 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IGET  (r1 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0035: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.reflect.GenericArrayType \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0051 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IGET  (r1 I:java.lang.Class\<? super T\>) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.rawType java.lang.Class \l0x003b: INVOKE  (r3 I:java.lang.Class) = (r5 I:java.lang.reflect.Type) com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type):java.lang.Class type: STATIC \l0x003f: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Class), (r3 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0050 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: IGET  (r1 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0047: CHECK_CAST  (r1 I:java.lang.reflect.GenericArrayType) = (java.lang.reflect.GenericArrayType) (r1 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  (r5 I:boolean) = \l  (r5 I:java.lang.reflect.Type)\l  (r1 I:java.lang.reflect.GenericArrayType)\l com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.GenericArrayType):boolean type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0050 \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0050|0x0050: RETURN  (r0 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0051|0x0051: IGET  (r5 I:java.lang.reflect.Type) = (r4 I:com.google.gson.reflect.TypeToken) com.google.gson.reflect.TypeToken.type java.lang.reflect.Type \l0x0053: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0054: NEW_ARRAY  (r1 I:java.lang.Class[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] \l0x0056: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.Class\>) =  java.lang.Class.class \l0x0058: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x005a: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.reflect.ParameterizedType\>) =  java.lang.reflect.ParameterizedType.class \l0x005c: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x005e: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x005f: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.reflect.GenericArrayType\>) =  java.lang.reflect.GenericArrayType.class \l0x0061: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0063: INVOKE  (r5 I:java.lang.AssertionError) = (r5 I:java.lang.reflect.Type), (r1 I:java.lang.Class[]) com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class[]):java.lang.AssertionError type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0067|0x0067: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean com.google.gson.reflect.TypeToken.isAssignableFrom((r4 'this' I:com.google.gson.reflect.TypeToken A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.reflect.Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

