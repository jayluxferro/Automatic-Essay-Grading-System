digraph "CFG forcom.google.firebase.FirebaseApp.GlobalBackgroundStateListener.onBackgroundStateChanged(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) =  com.google.firebase.FirebaseApp.access$300():java.lang.Object type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x0030 \}, TRY_ENTER]\l0x0007: SGET  (r2 I:java.util.Map\<java.lang.String, com.google.firebase.FirebaseApp\>) =  com.google.firebase.FirebaseApp.INSTANCES java.util.Map A[Catch:\{ all \-\> 0x0030 \}]\l0x0009: INVOKE  (r2 I:java.util.Collection) = (r2 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l0x000d: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT A[Catch:\{ all \-\> 0x0030 \}]\l0x0010: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0030 \}]\l0x001e: CHECK_CAST  (r2 I:com.google.firebase.FirebaseApp) = (com.google.firebase.FirebaseApp) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0030 \}]\l0x0020: INVOKE  (r3 I:java.util.concurrent.atomic.AtomicBoolean) = (r2 I:com.google.firebase.FirebaseApp) com.google.firebase.FirebaseApp.access$500(com.google.firebase.FirebaseApp):java.util.concurrent.atomic.AtomicBoolean type: STATIC A[Catch:\{ all \-\> 0x0030 \}]\l0x0024: INVOKE  (r3 I:boolean) = (r3 I:java.util.concurrent.atomic.AtomicBoolean) java.util.concurrent.atomic.AtomicBoolean.get():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  (r2 I:com.google.firebase.FirebaseApp), (r5 I:boolean) com.google.firebase.FirebaseApp.access$600(com.google.firebase.FirebaseApp, boolean):void type: STATIC A[Catch:\{ all \-\> 0x0030 \}]\l0x002d: GOTO  \-\> 0x0014 A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: RETURN   A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x0030: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0030 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0030 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.firebase.FirebaseApp.GlobalBackgroundStateListener.onBackgroundStateChanged((r4 'this' I:com.google.firebase.FirebaseApp$GlobalBackgroundStateListener A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

