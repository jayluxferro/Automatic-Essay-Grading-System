digraph "CFG forcom.google.firebase.iid.zzba.zzaq()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) =  com.google.firebase.iid.FirebaseInstanceId.zzm():boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"FirebaseInstanceId\" \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"Connectivity change received registered\" \l0x000a: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:android.content.IntentFilter) =  android.content.IntentFilter \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"android.net.conn.CONNECTIVITY_CHANGE\" \l0x0011: INVOKE  \l  (r0 I:android.content.IntentFilter)\l  (r1 I:java.lang.String)\l android.content.IntentFilter.\<init\>(java.lang.String):void type: DIRECT \l0x0014: IGET  (r1 I:com.google.firebase.iid.zzax) = (r2 I:com.google.firebase.iid.zzba) com.google.firebase.iid.zzba.zzdr com.google.firebase.iid.zzax \l0x0016: INVOKE  (r1 I:android.content.Context) = (r1 I:com.google.firebase.iid.zzax) com.google.firebase.iid.zzax.getContext():android.content.Context type: VIRTUAL \l0x001a: INVOKE  \l  (r1 I:android.content.Context)\l  (r2 I:android.content.BroadcastReceiver)\l  (r0 I:android.content.IntentFilter)\l android.content.Context.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter):android.content.Intent type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{public final void com.google.firebase.iid.zzba.zzaq((r2 'this' I:com.google.firebase.iid.zzba A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

