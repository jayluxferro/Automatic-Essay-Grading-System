digraph "CFG forcom.google.firebase.iid.zzz.zza(Ljava\/nio\/channels\/FileChannel;)Lcom\/google\/firebase\/iid\/zzy;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Properties r0 = new java.util.Properties()\lr0.load(java.nio.channels.Channels.newInputStream(r3))\ljava.lang.String r3 = r0.getProperty(\"pub\")\ljava.lang.String r1 = r0.getProperty(\"pri\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|if (r3 == null) goto L_0x0037\l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|if (r1 == null) goto L_0x0037\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c}"];
Node_4 [shape=record,label="{4\:\ 0x0022|SYNTHETIC\lSplitter:B:4:0x0022\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ NumberFormatException \-\> 0x0030 \}\lSplitter:B:4:0x0022\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a}"];
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\l|return new com.google.firebase.iid.zzy(zzc(r3, r1), java.lang.Long.parseLong(r0.getProperty(\"cre\")))\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|ExcHandler: NumberFormatException (r3v6 'e' java.lang.NumberFormatException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0022\l|java.lang.NumberFormatException r3 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031}"];
Node_10 [shape=record,label="{10\:\ 0x0036|throw new com.google.firebase.iid.zzaa((java.lang.Exception) r3)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037}"];
Node_12 [shape=record,label="{12\:\ 0x003e|throw new com.google.firebase.iid.zzaa(\"Invalid properties file\")\l}"];
MethodNode[shape=record,label="{private static com.google.firebase.iid.zzy com.google.firebase.iid.zzz.zza((r3v0 java.nio.channels.FileChannel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.firebase.iid.zzaa, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

