digraph "CFG forcom.google.firebase.iid.zzz.zza(Landroid\/content\/Context;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:java.io.File) = (r5 I:android.content.Context) com.google.firebase.iid.zzz.zzb(android.content.Context):java.io.File type: STATIC \l0x0004: INVOKE  (r5 I:java.io.File[]) = (r5 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l0x0008: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: AGET  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x000e: INVOKE  (r3 I:java.lang.String) = (r2 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0012: CONST_STR  (r4 I:java.lang.String) =  \"com.google.InstanceId\" \l0x0014: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: INVOKE  (r2 I:java.io.File) java.io.File.delete():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{static void com.google.firebase.iid.zzz.zza((r5 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
}

