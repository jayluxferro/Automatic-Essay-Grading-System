digraph "CFG forcom.google.firebase.iid.FirebaseInstanceId.zza(Ljava\/lang\/String;)Lcom\/google\/android\/gms\/tasks\/Task;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:com.google.firebase.iid.zzaz) = (r1 I:com.google.firebase.iid.FirebaseInstanceId) com.google.firebase.iid.FirebaseInstanceId.zzay com.google.firebase.iid.zzaz A[Catch:\{ all \-\> 0x000c \}, TRY_ENTER]\l0x0003: INVOKE  (r2 I:com.google.android.gms.tasks.Task) = \l  (r0 I:com.google.firebase.iid.zzaz)\l  (r2 I:java.lang.String)\l com.google.firebase.iid.zzaz.zza(java.lang.String):com.google.android.gms.tasks.Task type: VIRTUAL A[Catch:\{ all \-\> 0x000c \}]\l0x0007: INVOKE  (r1 I:com.google.firebase.iid.FirebaseInstanceId) com.google.firebase.iid.FirebaseInstanceId.startSync():void type: DIRECT A[Catch:\{ all \-\> 0x000c \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: RETURN  (r2 I:com.google.android.gms.tasks.Task\<java.lang.Void\>) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final synchronized com.google.android.gms.tasks.Task\<java.lang.Void\> com.google.firebase.iid.FirebaseInstanceId.zza((r1 'this' I:com.google.firebase.iid.FirebaseInstanceId A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Lcom\/google\/android\/gms\/tasks\/Task\<, Ljava\/lang\/Void;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

