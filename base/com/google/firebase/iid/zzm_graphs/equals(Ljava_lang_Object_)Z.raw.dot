digraph "CFG forcom.google.firebase.iid.zzm.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: INVOKE  (r1 I:android.os.IBinder) = (r2 I:com.google.firebase.iid.zzm) com.google.firebase.iid.zzm.getBinder():android.os.IBinder type: DIRECT A[Catch:\{ ClassCastException \-\> 0x0013 \}, TRY_ENTER]\l0x0008: CHECK_CAST  (r3 I:com.google.firebase.iid.zzm) = (com.google.firebase.iid.zzm) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ ClassCastException \-\> 0x0013 \}]\l0x000a: INVOKE  (r3 I:android.os.IBinder) = (r3 I:com.google.firebase.iid.zzm) com.google.firebase.iid.zzm.getBinder():android.os.IBinder type: DIRECT A[Catch:\{ ClassCastException \-\> 0x0013 \}]\l0x000e: INVOKE  (r3 I:boolean) = (r1 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ ClassCastException \-\> 0x0013 \}]\l0x0011: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r3 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: ClassCastException null\lSplitter:B:3:0x0004\l}"];
MethodNode[shape=record,label="{public boolean com.google.firebase.iid.zzm.equals((r2 'this' I:com.google.firebase.iid.zzm A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_7 -> Node_6;
}

