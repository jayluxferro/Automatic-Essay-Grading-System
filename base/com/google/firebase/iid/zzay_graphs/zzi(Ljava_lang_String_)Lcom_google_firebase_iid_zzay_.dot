digraph "CFG forcom.google.firebase.iid.zzay.zzi(Ljava\/lang\/String;)Lcom\/google\/firebase\/iid\/zzay;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (android.text.TextUtils.isEmpty(r6) == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r6.startsWith(\"\{\") == false) goto L_0x0053\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|SYNTHETIC\lSplitter:B:5:0x0010\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ JSONException \-\> 0x002d \}\lSplitter:B:5:0x0010\l|org.json.JSONObject r0 = new org.json.JSONObject(r6)     \/\/ Catch:\{ JSONException \-\> 0x002d \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|RETURN\l|return new com.google.firebase.iid.zzay(r0.getString(\"token\"), r0.getString(\"appVersion\"), r0.getLong(\"timestamp\"))\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|ExcHandler: JSONException (r6v1 'e' org.json.JSONException A[CUSTOM_DECLARE])\lSplitter:B:5:0x0010\l|org.json.JSONException r6 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|java.lang.String r6 = java.lang.String.valueOf(r6)\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder(java.lang.String.valueOf(r6).length() + 23)\lr3.append(\"Failed to parse token: \")\lr3.append(r6)\landroid.util.Log.w(\"FirebaseInstanceId\", r3.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0053}"];
Node_12 [shape=record,label="{12\:\ 0x005a|RETURN\l|return new com.google.firebase.iid.zzay(r6, (java.lang.String) null, 0)\l}"];
MethodNode[shape=record,label="{static com.google.firebase.iid.zzay com.google.firebase.iid.zzay.zzi((r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

