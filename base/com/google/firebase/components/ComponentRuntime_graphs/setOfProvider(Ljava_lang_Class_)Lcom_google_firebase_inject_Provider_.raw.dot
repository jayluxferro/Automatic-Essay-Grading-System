digraph "CFG forcom.google.firebase.components.ComponentRuntime.setOfProvider(Ljava\/lang\/Class;)Lcom\/google\/firebase\/inject\/Provider;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.Class\<?\>, com.google.firebase.components.Lazy\<java.util.Set\<?\>\>\>) = (r1 I:com.google.firebase.components.ComponentRuntime) com.google.firebase.components.ComponentRuntime.lazySetMap java.util.Map \l0x0002: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0006: CHECK_CAST  (r2 I:com.google.firebase.components.Lazy) = (com.google.firebase.components.Lazy) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  \l  (r2 I:com.google.firebase.inject.Provider\<java.util.Set\<T\>\>)\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: SGET  (r2 I:com.google.firebase.inject.Provider\<java.util.Set\<java.lang.Object\>\>) =  com.google.firebase.components.ComponentRuntime.EMPTY_PROVIDER com.google.firebase.inject.Provider \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  \l  (r2 I:com.google.firebase.inject.Provider\<java.util.Set\<T\>\>)\l \l}"];
MethodNode[shape=record,label="{public com.google.firebase.inject.Provider\<java.util.Set\<T\>\> com.google.firebase.components.ComponentRuntime.setOfProvider((r1 'this' I:com.google.firebase.components.ComponentRuntime A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Class\<, TT;\>;), Lcom\/google\/firebase\/inject\/Provider\<, Ljava\/util\/Set\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

