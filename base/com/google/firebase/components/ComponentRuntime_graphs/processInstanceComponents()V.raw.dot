digraph "CFG forcom.google.firebase.components.ComponentRuntime.processInstanceComponents()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<com.google.firebase.components.Component\<?\>, com.google.firebase.components.Lazy\<?\>\>) = (r5 I:com.google.firebase.components.ComponentRuntime) com.google.firebase.components.ComponentRuntime.components java.util.Map \l0x0002: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x001a: CHECK_CAST  (r2 I:com.google.firebase.components.Component) = (com.google.firebase.components.Component) (r2 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r3 I:boolean) = (r2 I:com.google.firebase.components.Component) com.google.firebase.components.Component.isValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r1 I:com.google.firebase.components.Lazy) = (com.google.firebase.components.Lazy) (r1 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r2 I:java.util.Set) = (r2 I:com.google.firebase.components.Component) com.google.firebase.components.Component.getProvidedInterfaces():java.util.Set type: VIRTUAL \l0x002d: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r3 I:java.lang.Class) = (java.lang.Class) (r3 I:?[OBJECT, ARRAY]) \l0x003d: IGET  (r4 I:java.util.Map\<java.lang.Class\<?\>, com.google.firebase.components.Lazy\<?\>\>) = (r5 I:com.google.firebase.components.ComponentRuntime) com.google.firebase.components.ComponentRuntime.lazyInstanceMap java.util.Map \l0x003f: INVOKE  \l  (r4 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: INVOKE  (r5 I:com.google.firebase.components.ComponentRuntime) com.google.firebase.components.ComponentRuntime.validateDependencies():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.firebase.components.ComponentRuntime.processInstanceComponents((r5 'this' I:com.google.firebase.components.ComponentRuntime A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_1[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_7;
Node_10 -> Node_11;
}

