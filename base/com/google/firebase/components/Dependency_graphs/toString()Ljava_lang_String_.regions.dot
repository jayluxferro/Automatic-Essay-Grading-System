digraph "CFG forcom.google.firebase.components.Dependency.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_1086926418 {
label = "R(5:0|7|(1:9)|10|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(\"Dependency\{anInterface=\")\lr0.append(r3.anInterface)\lr0.append(\", type=\")\lboolean r2 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|PHI: r1 \l  PHI: (r1v4 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(r3.type == 1 ? \"required\" : r3.type == 0 ? \"optional\" : \"set\")\lr0.append(\", direct=\")\l}"];
subgraph cluster_IfRegion_1220589481 {
label = "IF [B:8:0x002c] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002c|if (r3.injection != 0) goto L_0x002f\l}"];
subgraph cluster_Region_254785705 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002f|r2 = false\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0030|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:8:0x002c, B:9:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(r2)\lr0.append(\"\}\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|RETURN\l|return r0.toString()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0014}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0016}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0019}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001b}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0020}"];
MethodNode[shape=record,label="{public java.lang.String com.google.firebase.components.Dependency.toString((r3v0 'this' com.google.firebase.components.Dependency A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

