digraph "CFG forcom.google.firebase.components.Dependency.toString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"Dependency\{anInterface=\" \l0x0004: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.\<init\>(java.lang.String):void type: DIRECT \l0x0007: IGET  (r1 I:java.lang.Class\<?\>) = (r3 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.anInterface java.lang.Class \l0x0009: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x000c: CONST_STR  (r1 I:java.lang.String) =  \", type=\" \l0x000e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0011: IGET  (r1 I:int) = (r3 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.type int \l0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: CONST_STR  (r1 I:java.lang.String) =  \"required\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IGET  (r1 I:int) = (r3 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.type int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: CONST_STR  (r1 I:java.lang.String) =  \"optional\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST_STR  (r1 I:java.lang.String) =  \"set\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: CONST_STR  (r1 I:java.lang.String) =  \", direct=\" \l0x0027: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: IGET  (r1 I:int) = (r3 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.injection int \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:boolean) java.lang.StringBuilder.append(boolean):java.lang.StringBuilder type: VIRTUAL \l0x0033: CONST_STR  (r1 I:java.lang.String) =  \"\}\" \l0x0035: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0038: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.google.firebase.components.Dependency.toString((r3 'this' I:com.google.firebase.components.Dependency A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
}

