digraph "CFG forcom.google.firebase.components.CycleDetector.detect(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Set r0 = toGraph(r7)\ljava.util.Set r1 = getRoots(r0)\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v4 int) binds: [B:0:0x0000, B:24:0x0009] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0009\-\>B:24:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|if (r1.isEmpty() != false) goto L_0x003f\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|com.google.firebase.components.CycleDetector$ComponentNode r3 = r1.iterator().next()\lr1.remove(r3)\lint r2 = r2 + 1\ljava.util.Iterator r4 = r3.getDependencies().iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|LOOP_START\lLOOP:1: B:4:0x0026\-\>B:23:0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|if (r4.hasNext() == false) goto L_0x0009\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|com.google.firebase.components.CycleDetector$ComponentNode r5 = r4.next()\lr5.removeDependent(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|if (r5.isRoot() == false) goto L_0x0026\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|r1.add(r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003f}"];
Node_10 [shape=record,label="{10\:\ 0x0043|if (r2 != r7.size()) goto L_0x0046\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|java.util.ArrayList r7 = new java.util.ArrayList()\ljava.util.Iterator r0 = r0.iterator()\l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|LOOP_START\lLOOP:2: B:13:0x004f\-\>B:27:0x004f\l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|if (r0.hasNext() == false) goto L_0x006f\l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|com.google.firebase.components.CycleDetector$ComponentNode r1 = r0.next()\l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|if (r1.isRoot() != false) goto L_0x004f\l}"];
Node_17 [shape=record,label="{17\:\ 0x0061}"];
Node_18 [shape=record,label="{18\:\ 0x0065|if (r1.isLeaf() != false) goto L_0x004f\l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|r7.add(r1.getComponent())\l}"];
Node_20 [shape=record,label="{20\:\ 0x006f}"];
Node_21 [shape=record,label="{21\:\ 0x0074|throw new com.google.firebase.components.DependencyCycleException(r7)\l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|LOOP_END\lSYNTHETIC\lLOOP:1: B:4:0x0026\-\>B:23:0x0026\l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0009\-\>B:24:0x0009\l}"];
Node_25 [shape=record,label="{25\:\ 0x0026|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x004f|LOOP_END\lSYNTHETIC\lLOOP:2: B:13:0x004f\-\>B:27:0x004f\l}"];
Node_28 [shape=record,label="{28\:\ 0x006f|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x004f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x004f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static void com.google.firebase.components.CycleDetector.detect((r7v0 java.util.List\<com.google.firebase.components.Component\<?\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/google\/firebase\/components\/Component\<, *\>;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_25;
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_28;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_29;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_30;
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_22 -> Node_9;
Node_23 -> Node_4;
Node_24 -> Node_1;
Node_25 -> Node_23;
Node_26 -> Node_23;
Node_27 -> Node_13;
Node_28 -> Node_20;
Node_29 -> Node_27;
Node_30 -> Node_27;
Node_31 -> Node_27;
}

