digraph "CFG forcom.google.firebase.components.CycleDetector.detect(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.Set) = (r7 I:java.util.List) com.google.firebase.components.CycleDetector.toGraph(java.util.List):java.util.Set type: STATIC \l0x0004: INVOKE  (r1 I:java.util.Set) = (r0 I:java.util.Set) com.google.firebase.components.CycleDetector.getRoots(java.util.Set):java.util.Set type: STATIC \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r3 I:boolean) = (r1 I:java.util.Set) java.util.Set.isEmpty():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r3 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l0x0013: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode) = (com.google.firebase.components.CycleDetector$ComponentNode) (r3 I:?[OBJECT, ARRAY]) \l0x0019: INVOKE  (r1 I:java.util.Set), (r3 I:java.lang.Object) java.util.Set.remove(java.lang.Object):boolean type: INTERFACE \l0x001c: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x001e: INVOKE  (r4 I:java.util.Set) = \l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.getDependencies():java.util.Set type: VIRTUAL \l0x0022: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0009 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0030: CHECK_CAST  (r5 I:com.google.firebase.components.CycleDetector$ComponentNode) = (com.google.firebase.components.CycleDetector$ComponentNode) (r5 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  \l  (r5 I:com.google.firebase.components.CycleDetector$ComponentNode)\l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.removeDependent(com.google.firebase.components.CycleDetector$ComponentNode):void type: VIRTUAL \l0x0035: INVOKE  (r6 I:boolean) = \l  (r5 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.isRoot():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: INVOKE  (r1 I:java.util.Set), (r5 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: INVOKE  (r7 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0046 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: NEW_INSTANCE  (r7 I:java.util.ArrayList) =  java.util.ArrayList \l0x0048: INVOKE  (r7 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x004b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|0x004f: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0059: CHECK_CAST  (r1 I:com.google.firebase.components.CycleDetector$ComponentNode) = (com.google.firebase.components.CycleDetector$ComponentNode) (r1 I:?[OBJECT, ARRAY]) \l0x005b: INVOKE  (r2 I:boolean) = \l  (r1 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.isRoot():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|0x005f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004f \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: INVOKE  (r2 I:boolean) = \l  (r1 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.isLeaf():boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0065|0x0065: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|0x0067: INVOKE  (r1 I:com.google.firebase.components.Component) = \l  (r1 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.getComponent():com.google.firebase.components.Component type: VIRTUAL \l0x006b: INVOKE  (r7 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x006f|0x006f: NEW_INSTANCE  (r0 I:com.google.firebase.components.DependencyCycleException) =  com.google.firebase.components.DependencyCycleException \l0x0071: INVOKE  \l  (r0 I:com.google.firebase.components.DependencyCycleException)\l  (r7 I:java.util.List)\l com.google.firebase.components.DependencyCycleException.\<init\>(java.util.List):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|0x0074: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static void com.google.firebase.components.CycleDetector.detect((r7 I:java.util.List\<com.google.firebase.components.Component\<?\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/google\/firebase\/components\/Component\<, *\>;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_13;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_13;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_13;
Node_20 -> Node_21;
}

