digraph "CFG forcom.google.firebase.components.CycleDetector.toGraph(Ljava\/util\/List;)Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0002: INVOKE  (r1 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: INVOKE  (r0 I:java.util.HashMap), (r1 I:int) java.util.HashMap.\<init\>(int):void type: DIRECT \l0x0009: INVOKE  (r10 I:java.util.Iterator) = (r10 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: INVOKE  (r1 I:boolean) = (r10 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0074 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r10 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r1 I:com.google.firebase.components.Component) = (com.google.firebase.components.Component) (r1 I:?[OBJECT, ARRAY]) \l0x001a: NEW_INSTANCE  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode) =  com.google.firebase.components.CycleDetector$ComponentNode \l0x001c: INVOKE  \l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l  (r1 I:com.google.firebase.components.Component)\l com.google.firebase.components.CycleDetector.ComponentNode.\<init\>(com.google.firebase.components.Component):void type: DIRECT \l0x001f: INVOKE  (r4 I:java.util.Set) = (r1 I:com.google.firebase.components.Component) com.google.firebase.components.Component.getProvidedInterfaces():java.util.Set type: VIRTUAL \l0x0023: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0031: CHECK_CAST  (r5 I:java.lang.Class) = (java.lang.Class) (r5 I:?[OBJECT, ARRAY]) \l0x0033: NEW_INSTANCE  (r6 I:com.google.firebase.components.CycleDetector$Dep) =  com.google.firebase.components.CycleDetector$Dep \l0x0035: INVOKE  (r7 I:boolean) = (r1 I:com.google.firebase.components.Component) com.google.firebase.components.Component.isValue():boolean type: VIRTUAL \l0x0039: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003a: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) ^ (r8 I:?[int, boolean, short, byte, char]) \l0x003b: INVOKE  \l  (r6 I:com.google.firebase.components.CycleDetector$Dep)\l  (r5 I:java.lang.Class)\l  (r7 I:boolean)\l  (r2 I:com.google.firebase.components.CycleDetector$1)\l com.google.firebase.components.CycleDetector.Dep.\<init\>(java.lang.Class, boolean, com.google.firebase.components.CycleDetector$1):void type: DIRECT \l0x003e: INVOKE  (r7 I:boolean) = (r0 I:java.util.Map), (r6 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|0x0042: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x004c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: NEW_INSTANCE  (r7 I:java.util.HashSet) =  java.util.HashSet \l0x0046: INVOKE  (r7 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0049: INVOKE  \l  (r0 I:java.util.Map)\l  (r6 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|0x004c: INVOKE  (r7 I:java.lang.Object) = (r0 I:java.util.Map), (r6 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0050: CHECK_CAST  (r7 I:java.util.Set) = (java.util.Set) (r7 I:?[OBJECT, ARRAY]) \l0x0052: INVOKE  (r9 I:boolean) = (r7 I:java.util.Set) java.util.Set.isEmpty():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0070 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: INVOKE  (r6 I:boolean) = (r6 I:com.google.firebase.components.CycleDetector$Dep) com.google.firebase.components.CycleDetector.Dep.access$100(com.google.firebase.components.CycleDetector$Dep):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|0x005c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005f \l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|0x005f: NEW_INSTANCE  (r10 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0061: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r8 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0063: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0064: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0066: CONST_STR  (r1 I:java.lang.String) =  \"Multiple components provide %s.\" \l0x0068: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:java.lang.Object[]) java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x006c: INVOKE  \l  (r10 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x006f|0x006f: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|0x0070: INVOKE  (r7 I:java.util.Set), (r3 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|0x0074: INVOKE  (r10 I:java.util.Collection) = (r0 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE \l0x0078: INVOKE  (r10 I:java.util.Iterator) = (r10 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x007c|0x007c: INVOKE  (r1 I:boolean) = (r10 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x0080|0x0080: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00e4 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0082|0x0082: INVOKE  (r1 I:java.lang.Object) = (r10 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0086: CHECK_CAST  (r1 I:java.util.Set) = (java.util.Set) (r1 I:?[OBJECT, ARRAY]) \l0x0088: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x008c|0x008c: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0090|0x0090: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x007c \l}"];
Node_23 [shape=record,label="{23\:\ 0x0092|0x0092: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0096: CHECK_CAST  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode) = (com.google.firebase.components.CycleDetector$ComponentNode) (r3 I:?[OBJECT, ARRAY]) \l0x0098: INVOKE  (r4 I:com.google.firebase.components.Component) = \l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.getComponent():com.google.firebase.components.Component type: VIRTUAL \l0x009c: INVOKE  (r4 I:java.util.Set) = (r4 I:com.google.firebase.components.Component) com.google.firebase.components.Component.getDependencies():java.util.Set type: VIRTUAL \l0x00a0: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a4|0x00a4: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a8|0x00a8: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008c \l}"];
Node_26 [shape=record,label="{26\:\ 0x00aa|0x00aa: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00ae: CHECK_CAST  (r5 I:com.google.firebase.components.Dependency) = (com.google.firebase.components.Dependency) (r5 I:?[OBJECT, ARRAY]) \l0x00b0: INVOKE  (r6 I:boolean) = (r5 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.isDirectInjection():boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x00b4|0x00b4: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00b7 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b7|0x00b7: NEW_INSTANCE  (r6 I:com.google.firebase.components.CycleDetector$Dep) =  com.google.firebase.components.CycleDetector$Dep \l0x00b9: INVOKE  (r7 I:java.lang.Class) = (r5 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.getInterface():java.lang.Class type: VIRTUAL \l0x00bd: INVOKE  (r5 I:boolean) = (r5 I:com.google.firebase.components.Dependency) com.google.firebase.components.Dependency.isSet():boolean type: VIRTUAL \l0x00c1: INVOKE  \l  (r6 I:com.google.firebase.components.CycleDetector$Dep)\l  (r7 I:java.lang.Class)\l  (r5 I:boolean)\l  (r2 I:com.google.firebase.components.CycleDetector$1)\l com.google.firebase.components.CycleDetector.Dep.\<init\>(java.lang.Class, boolean, com.google.firebase.components.CycleDetector$1):void type: DIRECT \l0x00c4: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.Map), (r6 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x00c8: CHECK_CAST  (r5 I:java.util.Set) = (java.util.Set) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ca|0x00ca: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00cd \l}"];
Node_32 [shape=record,label="{32\:\ 0x00cd|0x00cd: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_33 [shape=record,label="{33\:\ 0x00d1|0x00d1: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_34 [shape=record,label="{34\:\ 0x00d5|0x00d5: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00a4 \l}"];
Node_35 [shape=record,label="{35\:\ 0x00d7|0x00d7: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00db: CHECK_CAST  (r6 I:com.google.firebase.components.CycleDetector$ComponentNode) = (com.google.firebase.components.CycleDetector$ComponentNode) (r6 I:?[OBJECT, ARRAY]) \l0x00dd: INVOKE  \l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l  (r6 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.addDependency(com.google.firebase.components.CycleDetector$ComponentNode):void type: VIRTUAL \l0x00e0: INVOKE  \l  (r6 I:com.google.firebase.components.CycleDetector$ComponentNode)\l  (r3 I:com.google.firebase.components.CycleDetector$ComponentNode)\l com.google.firebase.components.CycleDetector.ComponentNode.addDependent(com.google.firebase.components.CycleDetector$ComponentNode):void type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00e4|0x00e4: NEW_INSTANCE  (r10 I:java.util.HashSet) =  java.util.HashSet \l0x00e6: INVOKE  (r10 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x00e9: INVOKE  (r0 I:java.util.Collection) = (r0 I:java.util.Map) java.util.Map.values():java.util.Collection type: INTERFACE \l0x00ed: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_37 [shape=record,label="{37\:\ 0x00f1|0x00f1: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_38 [shape=record,label="{38\:\ 0x00f5|0x00f5: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0101 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00f7|0x00f7: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00fb: CHECK_CAST  (r1 I:java.util.Set) = (java.util.Set) (r1 I:?[OBJECT, ARRAY]) \l0x00fd: INVOKE  (r10 I:java.util.HashSet), (r1 I:java.util.Collection) java.util.HashSet.addAll(java.util.Collection):boolean type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x0101|0x0101: RETURN  \l  (r10 I:java.util.Set\<com.google.firebase.components.CycleDetector$ComponentNode\>)\l \l}"];
MethodNode[shape=record,label="{private static java.util.Set\<com.google.firebase.components.CycleDetector$ComponentNode\> com.google.firebase.components.CycleDetector.toGraph((r10 I:java.util.List\<com.google.firebase.components.Component\<?\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lcom\/google\/firebase\/components\/Component\<, *\>;\>;), Ljava\/util\/Set\<, Lcom\/google\/firebase\/components\/CycleDetector$ComponentNode;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_4;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_36;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_21;
Node_25 -> Node_26[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_24[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_24[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_24;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_33;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_37;
}

