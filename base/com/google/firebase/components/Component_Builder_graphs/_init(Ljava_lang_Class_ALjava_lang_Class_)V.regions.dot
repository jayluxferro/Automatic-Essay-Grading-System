digraph "CFG forcom.google.firebase.components.Component.Builder.\<init\>(Ljava\/lang\/Class;[Ljava\/lang\/Class;)V" {
subgraph cluster_Region_610679565 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.providedInterfaces = new java.util.HashSet()\lr3.dependencies = new java.util.HashSet()\lint r0 = 0\lr3.instantiation = 0\lr3.type = 0\lr3.publishedEvents = new java.util.HashSet()\lcom.google.android.gms.common.internal.Preconditions.checkNotNull(r4, \"Null interface\")\lr3.providedInterfaces.add(r4)\lint int r4 = r5.length\l}"];
subgraph cluster_LoopRegion_456508104 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0028|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:2:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0028\-\>B:2:0x002a\l|if (r0 \< r4) goto L_0x002a\l}"];
subgraph cluster_Region_2125229866 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x002a|LOOP_END\lLOOP:0: B:1:0x0028\-\>B:2:0x002a\l|com.google.android.gms.common.internal.Preconditions.checkNotNull(r1, \"Null interface\")\lr0++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0034|java.util.Collections.addAll(r3.providedInterfaces, r5)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0039}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.google.firebase.components.Component.Builder.\<init\>((r3v0 'this' com.google.firebase.components.Component$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Class\<? super T\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.SafeVarargs, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, TT;\>;[, Ljava\/lang\/Class\<, \-TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

