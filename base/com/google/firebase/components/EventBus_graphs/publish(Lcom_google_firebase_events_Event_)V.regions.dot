digraph "CFG forcom.google.firebase.components.EventBus.publish(Lcom\/google\/firebase\/events\/Event;)V" {
subgraph cluster_Region_331121663 {
label = "R(2:0|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.gms.common.internal.Preconditions.checkNotNull(r4)\l}"];
subgraph cluster_SynchronizedRegion_1464835474 {
label = "Synchronized:R(2:1|(1:(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003}"];
subgraph cluster_Region_1604829241 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1083178598 {
label = "IF [B:4:0x0006] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|if (r3.pendingEvents != null) goto L_0x0008\l}"];
subgraph cluster_Region_937111283 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0008|r3.pendingEvents.add(r4)\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0004|SYNTHETIC\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000d|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x000d: MONITOR_EXIT  \l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000f|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x000f: MONITOR_EXIT  \l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0010|java.util.Iterator r0 = getHandlers(r4).iterator()\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0018|LOOP_START\lLOOP:0: B:10:0x0018\-\>B:12:0x001e\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001c|if (r0.hasNext() == false) goto L_0x0032\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001e|LOOP_END\lLOOP:0: B:10:0x0018\-\>B:12:0x001e\l|java.util.Map$Entry r1 = r0.next()\l((java.util.concurrent.Executor) r1.getValue()).execute(com.google.firebase.components.EventBus$$Lambda$1.lambdaFactory$(r1, r4))\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0032|RETURN\l|return\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0033|LOOP_START\lREMOVE\lLOOP:1: B:14:0x0033\-\>B:19:0x0033\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0034|SYNTHETIC\lREMOVE\lSplitter:B:15:0x0034\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|REMOVE\lSplitter:B:15:0x0034\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0035|REMOVE\l|throw r4\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0032|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0033|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:1: B:14:0x0033\-\>B:19:0x0033\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0035|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0033|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public void com.google.firebase.components.EventBus.publish((r3v0 'this' com.google.firebase.components.EventBus A[IMMUTABLE_TYPE, THIS]), (r4v0 com.google.firebase.events.Event\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lCode restructure failed: missing block: B:9:0x0010, code lost:\l    r0 = getHandlers(r4).iterator();\l\lCode restructure failed: missing block: B:11:0x001c, code lost:\l    if (r0.hasNext() == false) goto L_0x0032;\l\lCode restructure failed: missing block: B:12:0x001e, code lost:\l    r1 = r0.next();\l    ((java.util.concurrent.Executor) r1.getValue()).execute(com.google.firebase.components.EventBus$$Lambda$1.lambdaFactory$(r1, r4));\l\lCode restructure failed: missing block: B:13:0x0032, code lost:\l    return;\l\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/firebase\/events\/Event\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_20;
Node_16 -> Node_21;
Node_18 -> Node_13;
Node_19 -> Node_14;
Node_20 -> Node_17;
Node_21 -> Node_19;
}

