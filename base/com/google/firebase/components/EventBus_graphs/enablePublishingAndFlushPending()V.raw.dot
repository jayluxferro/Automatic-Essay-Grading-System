digraph "CFG forcom.google.firebase.components.EventBus.enablePublishingAndFlushPending()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.Queue\<com.google.firebase.events.Event\<?\>\>) = (r2 I:com.google.firebase.components.EventBus) com.google.firebase.components.EventBus.pendingEvents java.util.Queue A[Catch:\{ all \-\> 0x0024 \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:java.util.Queue\<com.google.firebase.events.Event\<?\>\>) = (r2 I:com.google.firebase.components.EventBus) com.google.firebase.components.EventBus.pendingEvents java.util.Queue A[Catch:\{ all \-\> 0x0024 \}]\l0x0008: IPUT  \l  (r1 I:java.util.Queue\<com.google.firebase.events.Event\<?\>\>)\l  (r2 I:com.google.firebase.components.EventBus)\l com.google.firebase.components.EventBus.pendingEvents java.util.Queue A[Catch:\{ all \-\> 0x0024 \}]\l0x000a: GOTO  \-\> 0x000c A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Queue) java.util.Queue.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r1 I:com.google.firebase.events.Event) = (com.google.firebase.events.Event) (r1 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r2 I:com.google.firebase.components.EventBus)\l  (r1 I:com.google.firebase.events.Event)\l com.google.firebase.components.EventBus.publish(com.google.firebase.events.Event):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0024: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|SYNTHETIC\lSplitter:B:14:0x0025\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0025\l|0x0025: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void com.google.firebase.components.EventBus.enablePublishingAndFlushPending((r2 'this' I:com.google.firebase.components.EventBus A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16;
Node_15 -> Node_13;
}

