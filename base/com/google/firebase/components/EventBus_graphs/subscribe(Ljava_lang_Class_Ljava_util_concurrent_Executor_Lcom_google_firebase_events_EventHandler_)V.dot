digraph "CFG forcom.google.firebase.components.EventBus.subscribe(Ljava\/lang\/Class;Ljava\/util\/concurrent\/Executor;Lcom\/google\/firebase\/events\/EventHandler;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|com.google.android.gms.common.internal.Preconditions.checkNotNull(r3)\lcom.google.android.gms.common.internal.Preconditions.checkNotNull(r5)\lcom.google.android.gms.common.internal.Preconditions.checkNotNull(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r2.handlerMap.containsKey(r3) != false) goto L_0x001c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|r2.handlerMap.put(r3, new java.util.concurrent.ConcurrentHashMap())\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|r2.handlerMap.get(r3).put(r5, r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|monitor\-exit(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|REMOVE\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public synchronized void com.google.firebase.components.EventBus.subscribe((r2v0 'this' com.google.firebase.components.EventBus A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.concurrent.Executor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 com.google.firebase.events.EventHandler\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Class\<, TT;\>;, Ljava\/util\/concurrent\/Executor;, Lcom\/google\/firebase\/events\/EventHandler\<, \-TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

