digraph "CFG forcom.google.firebase.messaging.RemoteMessage.getData()Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.String, java.lang.String\>) = (r6 I:com.google.firebase.messaging.RemoteMessage) com.google.firebase.messaging.RemoteMessage.zzef java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0057 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.os.Bundle) = (r6 I:com.google.firebase.messaging.RemoteMessage) com.google.firebase.messaging.RemoteMessage.zzee android.os.Bundle \l0x0006: NEW_INSTANCE  (r1 I:android.support.v4.util.ArrayMap) =  android.support.v4.util.ArrayMap \l0x0008: INVOKE  (r1 I:android.support.v4.util.ArrayMap) android.support.v4.util.ArrayMap.\<init\>():void type: DIRECT \l0x000b: INVOKE  (r2 I:java.util.Set) = (r0 I:android.os.Bundle) android.os.Bundle.keySet():java.util.Set type: VIRTUAL \l0x000f: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0055 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r4 I:java.lang.Object) = (r0 I:android.os.Bundle), (r3 I:java.lang.String) android.os.Bundle.get(java.lang.String):java.lang.Object type: VIRTUAL \l0x0023: INSTANCE_OF  (r5 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0029: CONST_STR  (r5 I:java.lang.String) =  \"google.\" \l0x002b: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: CONST_STR  (r5 I:java.lang.String) =  \"gcm.\" \l0x0033: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: CONST_STR  (r5 I:java.lang.String) =  \"from\" \l0x003b: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: CONST_STR  (r5 I:java.lang.String) =  \"message_type\" \l0x0043: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: CONST_STR  (r5 I:java.lang.String) =  \"collapse_key\" \l0x004b: INVOKE  (r5 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|0x0051: INVOKE  \l  (r1 I:android.support.v4.util.ArrayMap)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l android.support.v4.util.ArrayMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|0x0055: IPUT  \l  (r1 I:java.util.Map\<java.lang.String, java.lang.String\>)\l  (r6 I:com.google.firebase.messaging.RemoteMessage)\l com.google.firebase.messaging.RemoteMessage.zzef java.util.Map \l}"];
Node_19 [shape=record,label="{19\:\ 0x0057|0x0057: IGET  (r0 I:java.util.Map\<java.lang.String, java.lang.String\>) = (r6 I:com.google.firebase.messaging.RemoteMessage) com.google.firebase.messaging.RemoteMessage.zzef java.util.Map \l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|0x0059: RETURN  (r0 I:java.util.Map\<java.lang.String, java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public final java.util.Map\<java.lang.String, java.lang.String\> com.google.firebase.messaging.RemoteMessage.getData((r6 'this' I:com.google.firebase.messaging.RemoteMessage A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_3;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_3;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_3;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_3;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_3;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

