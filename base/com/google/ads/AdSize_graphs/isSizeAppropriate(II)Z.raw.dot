digraph "CFG forcom.google.ads.AdSize.isSizeAppropriate(II)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1067450368(0x3fa00000, float:1.25) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1061997773(0x3f4ccccd, float:0.8) ?[int, float, short, byte, char])\l \l0x0005: INVOKE  (r0 I:int) = (r6 I:com.google.ads.AdSize) com.google.ads.AdSize.getWidth():int type: VIRTUAL \l0x0009: INVOKE  (r1 I:int) = (r6 I:com.google.ads.AdSize) com.google.ads.AdSize.getHeight():int type: VIRTUAL \l0x000d: CAST  (r2 I:float) = (float) (r7 I:int) \l0x000e: CAST  (r3 I:float) = (float) (r0 I:int) \l0x000f: ARITH  (r3 I:float) = (r3 I:float) * (r5 I:float) \l0x0010: CMP_G  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CAST  (r2 I:float) = (float) (r7 I:int) \l0x0015: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0016: ARITH  (r0 I:float) = (r0 I:float) * (r4 I:float) \l0x0017: CMP_L  (r0 I:int) = (r2 I:float), (r0 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: CAST  (r0 I:float) = (float) (r8 I:int) \l0x001c: CAST  (r2 I:float) = (float) (r1 I:int) \l0x001d: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x001e: CMP_G  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CAST  (r0 I:float) = (float) (r8 I:int) \l0x0023: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0024: ARITH  (r1 I:float) = (r1 I:float) * (r4 I:float) \l0x0025: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: RETURN  (r0 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public final boolean com.google.ads.AdSize.isSizeAppropriate((r6 'this' I:com.google.ads.AdSize A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_9;
}

