digraph "CFG forcom.google.android.gms.dynamic.ObjectWrapper.unwrap(Lcom\/google\/android\/gms\/dynamic\/IObjectWrapper;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r7 I:?[OBJECT, ARRAY]) com.google.android.gms.dynamic.ObjectWrapper \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CHECK_CAST  (r7 I:com.google.android.gms.dynamic.ObjectWrapper) = (com.google.android.gms.dynamic.ObjectWrapper) (r7 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r7 I:T) = (r7 I:com.google.android.gms.dynamic.ObjectWrapper) com.google.android.gms.dynamic.ObjectWrapper.zzib java.lang.Object \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r7 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r7 I:android.os.IBinder) = (r7 I:com.google.android.gms.dynamic.IObjectWrapper) com.google.android.gms.dynamic.IObjectWrapper.asBinder():android.os.IBinder type: INTERFACE \l0x000d: INVOKE  (r0 I:java.lang.Class) = (r7 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0011: INVOKE  (r0 I:java.lang.reflect.Field[]) = (r0 I:java.lang.Class) java.lang.Class.getDeclaredFields():java.lang.reflect.Field[] type: VIRTUAL \l0x0015: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0017: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: AGET  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x001e: INVOKE  (r6 I:boolean) = (r5 I:java.lang.reflect.Field) java.lang.reflect.Field.isSynthetic():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0026: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0055 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: INVOKE  (r0 I:boolean) = (r4 I:java.lang.reflect.Field) java.lang.reflect.Field.isAccessible():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: INVOKE  (r4 I:java.lang.reflect.Field), (r2 I:boolean) java.lang.reflect.Field.setAccessible(boolean):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|SYNTHETIC\lSplitter:B:15:0x0036\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0036\l|0x0036: INVOKE  (r7 I:java.lang.Object) = (r4 I:java.lang.reflect.Field), (r7 I:java.lang.Object) java.lang.reflect.Field.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ NullPointerException \-\> 0x0044, IllegalAccessException \-\> 0x003b \}, TRY_ENTER]\l0x0039: NOP   A[TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: RETURN  (r7 I:T) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|ExcHandler: IllegalAccessException null\lSplitter:B:15:0x0036\l|0x003b: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003e: CONST_STR  (r1 I:java.lang.String) =  \"Could not access the field in remoteBinder.\" \l0x0040: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l  (r7 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|ExcHandler: NullPointerException null\lSplitter:B:15:0x0036\l|0x0044: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0047: CONST_STR  (r1 I:java.lang.String) =  \"Binder object is null.\" \l0x0049: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l  (r7 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|0x004c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004f: CONST_STR  (r0 I:java.lang.String) =  \"IObjectWrapper declared field not private!\" \l0x0051: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|0x0054: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0057: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0058: CONST  (r1 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x005a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x005f: CONST_STR  (r1 I:java.lang.String) =  \"Unexpected number of IObjectWrapper declared fields: \" \l0x0061: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0067: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006b: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x006e|0x006e: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static T com.google.android.gms.dynamic.ObjectWrapper.unwrap((r7 I:com.google.android.gms.dynamic.IObjectWrapper A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/google\/android\/gms\/dynamic\/IObjectWrapper;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_26;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_21;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

