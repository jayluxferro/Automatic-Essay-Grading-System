digraph "CFG forcom.google.android.gms.common.api.GoogleApiClient.Builder.addScopeNames([Ljava\/lang\/String;)Lcom\/google\/android\/gms\/common\/api\/GoogleApiClient$Builder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r1 I:java.util.Set\<com.google.android.gms.common.api.Scope\>) = \l  (r4 I:com.google.android.gms.common.api.GoogleApiClient$Builder)\l com.google.android.gms.common.api.GoogleApiClient.Builder.zabr java.util.Set \l0x0006: NEW_INSTANCE  (r2 I:com.google.android.gms.common.api.Scope) =  com.google.android.gms.common.api.Scope \l0x0008: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000a: INVOKE  \l  (r2 I:com.google.android.gms.common.api.Scope)\l  (r3 I:java.lang.String)\l com.google.android.gms.common.api.Scope.\<init\>(java.lang.String):void type: DIRECT \l0x000d: INVOKE  (r1 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l0x0010: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN  \l  (r4 I:com.google.android.gms.common.api.GoogleApiClient$Builder)\l \l}"];
MethodNode[shape=record,label="{public final com.google.android.gms.common.api.GoogleApiClient$Builder com.google.android.gms.common.api.GoogleApiClient.Builder.addScopeNames((r4 'this' I:com.google.android.gms.common.api.GoogleApiClient$Builder A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

