digraph "CFG forcom.google.android.gms.common.api.GoogleApiClient.Builder.zaa(Lcom\/google\/android\/gms\/common\/api\/Api;Lcom\/google\/android\/gms\/common\/api\/Api$ApiOptions;[Lcom\/google\/android\/gms\/common\/api\/Scope;)V" {
subgraph cluster_Region_1236271292 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.HashSet java.util.HashSet r0 = new java.util.HashSet(r4.zah().getImpliedScopes(r5))\lint int r5 = r6.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_543481726 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:0:0x0000, B:2:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:2:0x0011\l|if (r1 \< r5) goto L_0x0011\l}"];
subgraph cluster_Region_1581202964 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0011|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:2:0x0011\l|r0.add(r2)\lr1++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0019|r3.zabx.put(r4, new com.google.android.gms.common.internal.ClientSettings.OptionalApiSettings(r0))\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0023}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void com.google.android.gms.common.api.GoogleApiClient.Builder.zaa((r3v0 'this' com.google.android.gms.common.api.GoogleApiClient$Builder A[IMMUTABLE_TYPE, THIS]), (r4v0 com.google.android.gms.common.api.Api\<O\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 O A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.google.android.gms.common.api.Scope[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<O::, Lcom\/google\/android\/gms\/common\/api\/Api$ApiOptions;, \>(, Lcom\/google\/android\/gms\/common\/api\/Api\<, TO;\>;TO;[, Lcom\/google\/android\/gms\/common\/api\/Scope;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

