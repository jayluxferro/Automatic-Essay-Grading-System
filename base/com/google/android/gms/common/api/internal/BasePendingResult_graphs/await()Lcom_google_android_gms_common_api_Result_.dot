digraph "CFG forcom.google.android.gms.common.api.internal.BasePendingResult.await()Lcom\/google\/android\/gms\/common\/api\/Result;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.gms.common.internal.Preconditions.checkNotMainThread(\"await must not be called on the UI thread\")\lr1 = true\lcom.google.android.gms.common.internal.Preconditions.checkState(r3.zadu ^ true, \"Result has already been consumed\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r3.zady != null) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|r1 = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v3 boolean) binds: [B:1:0x0010, B:2:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.gms.common.internal.Preconditions.checkState(r1, \"Cannot await if then() has been called.\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|SYNTHETIC\lSplitter:B:4:0x0019\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ InterruptedException \-\> 0x001f \}\lSplitter:B:4:0x0019\l|r3.zadq.await()     \/\/ Catch:\{ InterruptedException \-\> 0x001f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|zab(com.google.android.gms.common.api.Status.RESULT_INTERRUPTED)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: InterruptedException (unused java.lang.InterruptedException)\lSplitter:B:4:0x0019\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|com.google.android.gms.common.internal.Preconditions.checkState(isReady(), \"Result is not ready.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|RETURN\l|return get()\l}"];
MethodNode[shape=record,label="{public final R com.google.android.gms.common.api.internal.BasePendingResult.await((r3v0 'this' com.google.android.gms.common.api.internal.BasePendingResult A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
}

