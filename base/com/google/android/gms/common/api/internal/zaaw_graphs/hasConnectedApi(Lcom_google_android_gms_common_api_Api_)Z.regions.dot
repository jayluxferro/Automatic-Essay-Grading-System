digraph "CFG forcom.google.android.gms.common.api.internal.zaaw.hasConnectedApi(Lcom\/google\/android\/gms\/common\/api\/Api;)Z" {
subgraph cluster_Region_1753954233 {
label = "R(1:(2:(1:7)|(1:8))) | DECL_VAR: com.google.android.gms.common.api.Api$Client null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1209975592 {
label = "R(2:(1:7)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1990221272 {
label = "IF [B:1:0x0005, B:4:0x0014, B:6:0x001a] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (isConnected() == true) goto L_0x0008\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|ADDED_TO_REGION\l|if ((r3 = r2.zagy.get(r3.getClientKey())) != null) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|ADDED_TO_REGION\l|if (r3.isConnected() == true) goto L_0x001c\l}"];
subgraph cluster_Region_497022779 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001c|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_748174798 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001e|RETURN\l|return false\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0007|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0016}"];
MethodNode[shape=record,label="{public final boolean com.google.android.gms.common.api.internal.zaaw.hasConnectedApi((r2v0 'this' com.google.android.gms.common.api.internal.zaaw A[IMMUTABLE_TYPE, THIS]), (r3v0 com.google.android.gms.common.api.Api\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/gms\/common\/api\/Api\<, *\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

