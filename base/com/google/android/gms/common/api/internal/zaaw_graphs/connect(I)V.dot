digraph "CFG forcom.google.android.gms.common.api.internal.zaaw.connect(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.zaen.lock()\lr1 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r4 == 3) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r4 == 1) goto L_0x0010\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r4 != 2) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r1 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v0 boolean), (r1v0 boolean), (r1v2 boolean) binds: [B:1:0x0007, B:2:0x0009, B:4:0x000c, B:5:0x000f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|SYNTHETIC\lSplitter:B:7:0x0012\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ all \-\> 0x0032 \}\lSplitter:B:7:0x0012\l|java.lang.StringBuilder r2 = new java.lang.StringBuilder(33)     \/\/ Catch:\{ all \-\> 0x0032 \}\lr2.append(\"Illegal sign\-in mode: \")     \/\/ Catch:\{ all \-\> 0x0032 \}\lr2.append(r4)     \/\/ Catch:\{ all \-\> 0x0032 \}\lcom.google.android.gms.common.internal.Preconditions.checkArgument(r1, r2.toString())     \/\/ Catch:\{ all \-\> 0x0032 \}\lzae(r4)     \/\/ Catch:\{ all \-\> 0x0032 \}\lzaau()     \/\/ Catch:\{ all \-\> 0x0032 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|DONT_GENERATE\l|java.util.concurrent.locks.Lock r4 = r3.zaen\lr4.unlock()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|ExcHandler:  FINALLY\lSplitter:B:7:0x0012\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|FINALLY_INSNS\l|r3.zaen.unlock()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|throw r4\l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.common.api.internal.zaaw.connect((r3v0 'this' com.google.android.gms.common.api.internal.zaaw A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

