digraph "CFG forcom.google.android.gms.common.api.internal.zza.onSaveInstanceState(Landroid\/os\/Bundle;)V" {
subgraph cluster_Region_179536327 {
label = "R(2:0|(1:(2:3|(1:6))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.onSaveInstanceState(r5)\l}"];
subgraph cluster_Region_2038080615 {
label = "R(1:(2:3|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1368990619 {
label = "IF [B:1:0x0003] THEN: R(2:3|(1:6)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5 != null) goto L_0x0006\l}"];
subgraph cluster_Region_1003033011 {
label = "R(2:3|(1:6))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|java.util.Iterator r0 = r4.zzbf.entrySet().iterator()\l}"];
subgraph cluster_LoopRegion_769790644 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r0.hasNext() != false) goto L_0x0016\l}"];
subgraph cluster_Region_1000286988 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:0: B:4:0x0010\-\>B:6:0x0016\l|java.util.Map$Entry r1 = r0.next()\landroid.os.Bundle android.os.Bundle r2 = new android.os.Bundle()\l((com.google.android.gms.common.api.internal.LifecycleCallback) r1.getValue()).onSaveInstanceState(r2)\lr5.putBundle((java.lang.String) r1.getKey(), r2)\l}"];
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010|LOOP_START\lLOOP:0: B:4:0x0010\-\>B:6:0x0016\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0034}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.common.api.internal.zza.onSaveInstanceState((r4v0 'this' com.google.android.gms.common.api.internal.zza A[IMMUTABLE_TYPE, THIS]), (r5v0 android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_4;
Node_4 -> Node_5;
Node_8 -> Node_7;
}

