digraph "CFG forcom.google.android.gms.common.api.internal.zaak.zaat()Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.zaes != null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return java.util.Collections.emptySet()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|java.util.HashSet r0 = new java.util.HashSet(r6.zaes.getRequiredScopes())\ljava.util.Map r1 = r6.zaes.getOptionalApiSettings()\ljava.util.Iterator r2 = r1.keySet().iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|LOOP_START\lLOOP:0: B:5:0x0022\-\>B:11:0x0022\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|if (r2.hasNext() == false) goto L_0x0048\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|com.google.android.gms.common.api.Api r3 = r2.next()\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|if (r6.zafs.zaho.containsKey(r3.getClientKey()) != false) goto L_0x0022\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|r0.addAll(r1.get(r3).mScopes)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|LOOP_END\lSYNTHETIC\lLOOP:0: B:5:0x0022\-\>B:11:0x0022\l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final java.util.Set\<com.google.android.gms.common.api.Scope\> com.google.android.gms.common.api.internal.zaak.zaat((r6v0 'this' com.google.android.gms.common.api.internal.zaak A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Set\<, Lcom\/google\/android\/gms\/common\/api\/Scope;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_14;
Node_11 -> Node_5;
Node_12 -> Node_10;
Node_13 -> Node_11;
Node_14 -> Node_11;
}

