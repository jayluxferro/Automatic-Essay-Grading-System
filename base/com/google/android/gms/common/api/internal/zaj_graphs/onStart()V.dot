digraph "CFG forcom.google.android.gms.common.api.internal.zaj.onStart()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.onStart()\lboolean r1 = r5.mStarted\ljava.lang.String r2 = java.lang.String.valueOf(r5.zacv)\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder(java.lang.String.valueOf(r2).length() + 14)\lr4.append(\"onStart \")\lr4.append(r1)\lr4.append(\" \")\lr4.append(r2)\landroid.util.Log.d(\"AutoManageHelper\", r4.toString())\l}"];
Node_1 [shape=record,label="{1\:\ 0x0039|if (r5.zade.get() != null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x003b|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|LOOP_START\lPHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v5 int) binds: [B:2:0x003b, B:8:0x004f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x003c\-\>B:8:0x004f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0042|if (r0 \>= r5.zacv.size()) goto L_0x0052\l}"];
Node_5 [shape=record,label="{5\:\ 0x0044|com.google.android.gms.common.api.internal.zaj$zaa r1 = zab(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0048|if (r1 == null) goto L_0x004f\l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|r1.zacx.connect()\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|LOOP_END\lLOOP:0: B:3:0x003c\-\>B:8:0x004f\l|int r0 = r0 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0052|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.gms.common.api.internal.zaj.onStart((r5v0 'this' com.google.android.gms.common.api.internal.zaj A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_10;
Node_8 -> Node_3;
Node_9 -> Node_13;
Node_10 -> Node_8;
Node_11 -> Node_8;
}

