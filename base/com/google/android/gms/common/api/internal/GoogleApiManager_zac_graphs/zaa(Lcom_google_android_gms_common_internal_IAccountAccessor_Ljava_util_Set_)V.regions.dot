digraph "CFG forcom.google.android.gms.common.api.internal.GoogleApiManager.zac.zaa(Lcom\/google\/android\/gms\/common\/internal\/IAccountAccessor;Ljava\/util\/Set;)V" {
subgraph cluster_Region_1062741989 {
label = "R(1:(2:(2:4|5)|(1:2)))";
node [shape=record,color=blue];
subgraph cluster_Region_152503532 {
label = "R(2:(2:4|5)|(1:2))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_680149785 {
label = "IF [B:0:0x0000, B:1:0x0002] THEN: R(2:4|5) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 == null) goto L_0x000d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r3 == null) goto L_0x000d\l}"];
subgraph cluster_Region_160630223 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|android.util.Log.wtf(\"GoogleApiManager\", \"Received null response from onSignInSuccess\", new java.lang.Exception())\lzag(new com.google.android.gms.common.ConnectionResult(4))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1997171735 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|r1.zajc = r2\lr1.zajd = r3\lzabr()\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.common.api.internal.GoogleApiManager.zac.zaa((r1v0 'this' com.google.android.gms.common.api.internal.GoogleApiManager$zac A[IMMUTABLE_TYPE, THIS]), (r2v0 com.google.android.gms.common.internal.IAccountAccessor A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.util.Set\<com.google.android.gms.common.api.Scope\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/gms\/common\/internal\/IAccountAccessor;, Ljava\/util\/Set\<, Lcom\/google\/android\/gms\/common\/api\/Scope;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_4 -> Node_5;
Node_2 -> Node_3;
}

