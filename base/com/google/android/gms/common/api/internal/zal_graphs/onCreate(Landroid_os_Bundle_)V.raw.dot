digraph "CFG forcom.google.android.gms.common.api.internal.zal.onCreate(Landroid\/os\/Bundle;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r4 I:com.google.android.gms.common.api.internal.LifecycleCallback)\l  (r5 I:android.os.Bundle)\l com.google.android.gms.common.api.internal.LifecycleCallback.onCreate(android.os.Bundle):void type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:java.util.concurrent.atomic.AtomicReference\<com.google.android.gms.common.api.internal.zam\>) = (r4 I:com.google.android.gms.common.api.internal.zal) com.google.android.gms.common.api.internal.zal.zade java.util.concurrent.atomic.AtomicReference \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"resolving_error\" \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r1 I:boolean) = \l  (r5 I:android.os.Bundle)\l  (r1 I:java.lang.String)\l  (r2 I:boolean)\l android.os.Bundle.getBoolean(java.lang.String, boolean):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:com.google.android.gms.common.ConnectionResult) =  com.google.android.gms.common.ConnectionResult \l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"failed_status\" \l0x0014: INVOKE  (r2 I:int) = (r5 I:android.os.Bundle), (r2 I:java.lang.String) android.os.Bundle.getInt(java.lang.String):int type: VIRTUAL \l0x0018: CONST_STR  (r3 I:java.lang.String) =  \"failed_resolution\" \l0x001a: INVOKE  (r3 I:android.os.Parcelable) = (r5 I:android.os.Bundle), (r3 I:java.lang.String) android.os.Bundle.getParcelable(java.lang.String):android.os.Parcelable type: VIRTUAL \l0x001e: CHECK_CAST  (r3 I:android.app.PendingIntent) = (android.app.PendingIntent) (r3 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  \l  (r1 I:com.google.android.gms.common.ConnectionResult)\l  (r2 I:int)\l  (r3 I:android.app.PendingIntent)\l com.google.android.gms.common.ConnectionResult.\<init\>(int, android.app.PendingIntent):void type: DIRECT \l0x0023: CONST_STR  (r2 I:java.lang.String) =  \"failed_client_id\" \l0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0026: INVOKE  (r5 I:int) = \l  (r5 I:android.os.Bundle)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l android.os.Bundle.getInt(java.lang.String, int):int type: VIRTUAL \l0x002a: NEW_INSTANCE  (r2 I:com.google.android.gms.common.api.internal.zam) =  com.google.android.gms.common.api.internal.zam \l0x002c: INVOKE  \l  (r2 I:com.google.android.gms.common.api.internal.zam)\l  (r1 I:com.google.android.gms.common.ConnectionResult)\l  (r5 I:int)\l com.google.android.gms.common.api.internal.zam.\<init\>(com.google.android.gms.common.ConnectionResult, int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReference)\l  (r2 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.set(java.lang.Object):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.gms.common.api.internal.zal.onCreate((r4 'this' I:com.google.android.gms.common.api.internal.zal A[IMMUTABLE_TYPE, THIS]), (r5 I:android.os.Bundle A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

