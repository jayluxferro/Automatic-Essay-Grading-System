digraph "CFG forcom.google.android.gms.common.api.internal.OptionalPendingResultImpl.get()Lcom\/google\/android\/gms\/common\/api\/Result;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r3 I:com.google.android.gms.common.api.OptionalPendingResult)\l com.google.android.gms.common.api.OptionalPendingResult.isDone():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0008: SGET  (r2 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit \l0x000a: INVOKE  (r0 I:com.google.android.gms.common.api.Result) = \l  (r3 I:com.google.android.gms.common.api.PendingResult)\l  (r0 I:long)\l  (r2 I:java.util.concurrent.TimeUnit)\l com.google.android.gms.common.api.PendingResult.await(long, java.util.concurrent.TimeUnit):com.google.android.gms.common.api.Result type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r0 I:R) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"Result is not available. Check that isDone() returns true before calling get().\" \l0x0013: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final R com.google.android.gms.common.api.internal.OptionalPendingResultImpl.get((r3 'this' I:com.google.android.gms.common.api.internal.OptionalPendingResultImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

