digraph "CFG forcom.google.android.gms.common.GoogleSignatureVerifier.isUidGoogleSigned(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.content.Context) = \l  (r5 I:com.google.android.gms.common.GoogleSignatureVerifier)\l com.google.android.gms.common.GoogleSignatureVerifier.mContext android.content.Context \l0x0002: INVOKE  (r0 I:com.google.android.gms.common.wrappers.PackageManagerWrapper) = (r0 I:android.content.Context) com.google.android.gms.common.wrappers.Wrappers.packageManager(android.content.Context):com.google.android.gms.common.wrappers.PackageManagerWrapper type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.String[]) = \l  (r0 I:com.google.android.gms.common.wrappers.PackageManagerWrapper)\l  (r6 I:int)\l com.google.android.gms.common.wrappers.PackageManagerWrapper.getPackagesForUid(int):java.lang.String[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: AGET  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0017: INVOKE  (r1 I:com.google.android.gms.common.zzm) = \l  (r5 I:com.google.android.gms.common.GoogleSignatureVerifier)\l  (r1 I:java.lang.String)\l  (r6 I:int)\l com.google.android.gms.common.GoogleSignatureVerifier.zza(java.lang.String, int):com.google.android.gms.common.zzm type: DIRECT \l0x001b: IGET  (r4 I:boolean) = (r1 I:com.google.android.gms.common.zzm) com.google.android.gms.common.zzm.zzad boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: CONST_STR  (r6 I:java.lang.String) =  \"no pkgs\" \l0x0024: INVOKE  (r1 I:com.google.android.gms.common.zzm) = (r6 I:java.lang.String) com.google.android.gms.common.zzm.zzb(java.lang.String):com.google.android.gms.common.zzm type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: INVOKE  (r1 I:com.google.android.gms.common.zzm) com.google.android.gms.common.zzm.zzf():void type: VIRTUAL \l0x002b: IGET  (r6 I:boolean) = (r1 I:com.google.android.gms.common.zzm) com.google.android.gms.common.zzm.zzad boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: RETURN  (r6 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.gms.common.GoogleSignatureVerifier.isUidGoogleSigned((r5 'this' I:com.google.android.gms.common.GoogleSignatureVerifier A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.internal.ShowFirstParty, \{\}], Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

