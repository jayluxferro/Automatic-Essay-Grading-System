digraph "CFG forcom.google.android.gms.common.data.DataBufferUtils.freezeAndClose(Lcom\/google\/android\/gms\/common\/data\/DataBuffer;)Ljava\/util\/ArrayList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList\<\>(r3.getCount())\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0025 \}\lSplitter:B:1:0x0009\l|java.util.Iterator r1 = r3.iterator()     \/\/ Catch:\{ all \-\> 0x0025 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lCatch:\{ all \-\> 0x0025 \}\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|Catch:\{ all \-\> 0x0025 \}\l|if (r1.hasNext() == false) goto L_0x0021     \/\/ Catch:\{ all \-\> 0x0025 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|LOOP_END\lCatch:\{ all \-\> 0x0025 \}\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l|r0.add(((com.google.android.gms.common.data.Freezable) r1.next()).freeze())     \/\/ Catch:\{ all \-\> 0x0025 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|DONT_GENERATE\l|r3.close()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|ExcHandler:  FINALLY\lSplitter:B:1:0x0009\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|FINALLY_INSNS\l|r3.close()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|throw r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.ArrayList\<T\> com.google.android.gms.common.data.DataBufferUtils.freezeAndClose((r3v0 com.google.android.gms.common.data.DataBuffer\<E\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, E::, Lcom\/google\/android\/gms\/common\/data\/Freezable\<, TT;\>;\>(, Lcom\/google\/android\/gms\/common\/data\/DataBuffer\<, TE;\>;), Ljava\/util\/ArrayList\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_6;
}

