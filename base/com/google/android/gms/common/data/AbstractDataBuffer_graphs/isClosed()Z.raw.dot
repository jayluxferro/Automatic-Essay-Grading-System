digraph "CFG forcom.google.android.gms.common.data.AbstractDataBuffer.isClosed()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.google.android.gms.common.data.DataHolder) = \l  (r1 I:com.google.android.gms.common.data.AbstractDataBuffer)\l com.google.android.gms.common.data.AbstractDataBuffer.mDataHolder com.google.android.gms.common.data.DataHolder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.google.android.gms.common.data.DataHolder) = \l  (r1 I:com.google.android.gms.common.data.AbstractDataBuffer)\l com.google.android.gms.common.data.AbstractDataBuffer.mDataHolder com.google.android.gms.common.data.DataHolder \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:com.google.android.gms.common.data.DataHolder) com.google.android.gms.common.data.DataHolder.isClosed():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.gms.common.data.AbstractDataBuffer.isClosed((r1 'this' I:com.google.android.gms.common.data.AbstractDataBuffer A[IMMUTABLE_TYPE, THIS]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

