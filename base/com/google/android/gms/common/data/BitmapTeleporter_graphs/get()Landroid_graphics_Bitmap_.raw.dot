digraph "CFG forcom.google.android.gms.common.data.BitmapTeleporter.get()Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r5 I:com.google.android.gms.common.data.BitmapTeleporter) com.google.android.gms.common.data.BitmapTeleporter.zalh boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.io.DataInputStream) =  java.io.DataInputStream \l0x0006: NEW_INSTANCE  (r1 I:android.os.ParcelFileDescriptor$AutoCloseInputStream) =  android.os.ParcelFileDescriptor$AutoCloseInputStream \l0x0008: IGET  (r2 I:android.os.ParcelFileDescriptor) = (r5 I:com.google.android.gms.common.data.BitmapTeleporter) com.google.android.gms.common.data.BitmapTeleporter.zalf android.os.ParcelFileDescriptor \l0x000a: INVOKE  \l  (r1 I:android.os.ParcelFileDescriptor$AutoCloseInputStream)\l  (r2 I:android.os.ParcelFileDescriptor)\l android.os.ParcelFileDescriptor.AutoCloseInputStream.\<init\>(android.os.ParcelFileDescriptor):void type: DIRECT \l0x000d: INVOKE  (r0 I:java.io.DataInputStream), (r1 I:java.io.InputStream) java.io.DataInputStream.\<init\>(java.io.InputStream):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: INVOKE  (r1 I:int) = (r0 I:java.io.DataInputStream) java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}, TRY_ENTER]\l0x0014: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ IOException \-\> 0x003f \}]\l0x0016: INVOKE  (r2 I:int) = (r0 I:java.io.DataInputStream) java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x001a: INVOKE  (r3 I:int) = (r0 I:java.io.DataInputStream) java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x001e: INVOKE  (r4 I:java.lang.String) = (r0 I:java.io.DataInputStream) java.io.DataInputStream.readUTF():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}]\l0x0022: INVOKE  (r4 I:android.graphics.Bitmap$Config) = (r4 I:java.lang.String) android.graphics.Bitmap.Config.valueOf(java.lang.String):android.graphics.Bitmap$Config type: STATIC A[Catch:\{ IOException \-\> 0x003f \}]\l0x0026: INVOKE  (r0 I:java.io.DataInputStream), (r1 I:byte[]) java.io.DataInputStream.read(byte[]):int type: VIRTUAL A[Catch:\{ IOException \-\> 0x003f \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: INVOKE  (r0 I:java.io.Closeable) com.google.android.gms.common.data.BitmapTeleporter.zaa(java.io.Closeable):void type: STATIC \l0x002c: INVOKE  (r0 I:java.nio.ByteBuffer) = (r1 I:byte[]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x0030: INVOKE  (r1 I:android.graphics.Bitmap) = \l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC \l0x0034: INVOKE  (r1 I:android.graphics.Bitmap), (r0 I:java.nio.Buffer) android.graphics.Bitmap.copyPixelsFromBuffer(java.nio.Buffer):void type: VIRTUAL \l0x0037: IPUT  \l  (r1 I:android.graphics.Bitmap)\l  (r5 I:com.google.android.gms.common.data.BitmapTeleporter)\l com.google.android.gms.common.data.BitmapTeleporter.zalg android.graphics.Bitmap \l0x0039: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003a: IPUT  \l  (r0 I:boolean)\l  (r5 I:com.google.android.gms.common.data.BitmapTeleporter)\l com.google.android.gms.common.data.BitmapTeleporter.zalh boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x003d|ExcHandler: all null\lSplitter:B:9:0x0040\l|0x003d: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|ExcHandler: IOException null\lSplitter:B:3:0x0010\l|0x003f: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|SYNTHETIC\lSplitter:B:9:0x0040\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0040\l|0x0040: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x003d \}, TRY_ENTER]\l0x0042: CONST_STR  (r3 I:java.lang.String) =  \"Could not read from parcel file descriptor\" A[Catch:\{ all \-\> 0x003d \}]\l0x0044: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable)\l java.lang.IllegalStateException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x003d \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003d \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|0x0048: INVOKE  (r0 I:java.io.Closeable) com.google.android.gms.common.data.BitmapTeleporter.zaa(java.io.Closeable):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: IGET  (r0 I:android.graphics.Bitmap) = (r5 I:com.google.android.gms.common.data.BitmapTeleporter) com.google.android.gms.common.data.BitmapTeleporter.zalg android.graphics.Bitmap \l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{public android.graphics.Bitmap com.google.android.gms.common.data.BitmapTeleporter.get((r5 'this' I:com.google.android.gms.common.data.BitmapTeleporter A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_14;
Node_6 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

