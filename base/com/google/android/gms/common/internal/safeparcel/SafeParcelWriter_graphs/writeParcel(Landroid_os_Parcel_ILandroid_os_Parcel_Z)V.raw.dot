digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeParcel(Landroid\/os\/Parcel;ILandroid\/os\/Parcel;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r1 I:android.os.Parcel), (r2 I:int), (r0 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int, int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r2 I:int) = (r1 I:android.os.Parcel), (r2 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zza(android.os.Parcel, int):int type: STATIC \l0x000d: INVOKE  (r4 I:int) = (r3 I:android.os.Parcel) android.os.Parcel.dataSize():int type: VIRTUAL \l0x0011: INVOKE  \l  (r1 I:android.os.Parcel)\l  (r3 I:android.os.Parcel)\l  (r0 I:int)\l  (r4 I:int)\l android.os.Parcel.appendFrom(android.os.Parcel, int, int):void type: VIRTUAL \l0x0014: INVOKE  (r1 I:android.os.Parcel), (r2 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeParcel((r1 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

