digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeParcelArray(Landroid\/os\/Parcel;I[Landroid\/os\/Parcel;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r6 != null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r7 == false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|zzb(r4, r5, 0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|int r5 = zza(r4, r5)\lint r7 = r6.length\lr4.writeInt(r7)\lr1 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:4:0x0009, B:10:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0012\-\>B:10:0x002a\l|if (r1 \>= r7) goto L_0x002d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r2 = r6[r1]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r2 == null) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|r4.writeInt(r2.dataSize())\lr4.appendFrom(r2, 0, r2.dataSize())\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|r4.writeInt(0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|LOOP_END\lLOOP:0: B:5:0x0012\-\>B:10:0x002a\l|int r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|zzb(r4, r5)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeParcelArray((r4v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.os.Parcel[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_15;
Node_9 -> Node_14;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_13 -> Node_11;
Node_14 -> Node_10;
Node_15 -> Node_10;
}

