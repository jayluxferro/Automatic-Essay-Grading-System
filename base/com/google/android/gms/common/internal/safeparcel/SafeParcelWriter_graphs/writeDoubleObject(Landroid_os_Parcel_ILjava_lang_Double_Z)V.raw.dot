digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeDoubleObject(Landroid\/os\/Parcel;ILjava\/lang\/Double;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  (r0 I:android.os.Parcel), (r1 I:int), (r2 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000b: INVOKE  (r0 I:android.os.Parcel), (r1 I:int), (r3 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int, int):void type: STATIC \l0x000e: INVOKE  (r1 I:double) = (r2 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0012: INVOKE  (r0 I:android.os.Parcel), (r1 I:double) android.os.Parcel.writeDouble(double):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeDoubleObject((r0 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

