digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeLongList(Landroid\/os\/Parcel;ILjava\/util\/List;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 != null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r6 == false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|zzb(r3, r4, 0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|int r4 = zza(r3, r4)\lint r6 = r5.size()\lr3.writeInt(r6)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:4:0x0009, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0014\-\>B:6:0x0016\l|if (r0 \>= r6) goto L_0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:0: B:5:0x0014\-\>B:6:0x0016\l|r3.writeLong(r5.get(r0).longValue())\lint r0 = r0 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|zzb(r3, r4)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeLongList((r3v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.List\<java.lang.Long\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/os\/Parcel;, I, Ljava\/util\/List\<, Ljava\/lang\/Long;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

