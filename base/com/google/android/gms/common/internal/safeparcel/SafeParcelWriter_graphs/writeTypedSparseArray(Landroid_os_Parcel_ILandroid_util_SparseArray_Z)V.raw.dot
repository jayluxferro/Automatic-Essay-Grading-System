digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeTypedSparseArray(Landroid\/os\/Parcel;ILandroid\/util\/SparseArray;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r3 I:android.os.Parcel), (r4 I:int), (r0 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int, int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r4 I:int) = (r3 I:android.os.Parcel), (r4 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zza(android.os.Parcel, int):int type: STATIC \l0x000d: INVOKE  (r6 I:int) = (r5 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x0011: INVOKE  (r3 I:android.os.Parcel), (r6 I:int) android.os.Parcel.writeInt(int):void type: VIRTUAL \l0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r2 I:int) = (r5 I:android.util.SparseArray), (r1 I:int) android.util.SparseArray.keyAt(int):int type: VIRTUAL \l0x001b: INVOKE  (r3 I:android.os.Parcel), (r2 I:int) android.os.Parcel.writeInt(int):void type: VIRTUAL \l0x001e: INVOKE  (r2 I:java.lang.Object) = (r5 I:android.util.SparseArray), (r1 I:int) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0022: CHECK_CAST  (r2 I:android.os.Parcelable) = (android.os.Parcelable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: INVOKE  (r3 I:android.os.Parcel), (r0 I:int) android.os.Parcel.writeInt(int):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  \l  (r3 I:android.os.Parcel)\l  (r2 I:android.os.Parcelable)\l  (r0 I:int)\l com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zza(android.os.Parcel, android.os.Parcelable, int):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r3 I:android.os.Parcel), (r4 I:int) com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.zzb(android.os.Parcel, int):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeTypedSparseArray((r3 I:android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.util.SparseArray\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Landroid\/os\/Parcelable;, \>(, Landroid\/os\/Parcel;, I, Landroid\/util\/SparseArray\<, TT;\>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_6;
Node_12 -> Node_13;
}

