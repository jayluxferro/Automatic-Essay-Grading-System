digraph "CFG forcom.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeStringSparseArray(Landroid\/os\/Parcel;ILandroid\/util\/SparseArray;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r4 != null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r5 == false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|zzb(r2, r3, 0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|int r3 = zza(r2, r3)\lint r5 = r4.size()\lr2.writeInt(r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:4:0x0009, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0014\-\>B:6:0x0016\l|if (r0 \>= r5) goto L_0x0029\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:0: B:5:0x0014\-\>B:6:0x0016\l|r2.writeInt(r4.keyAt(r0))\lr2.writeString(r4.valueAt(r0))\lint r0 = r0 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|zzb(r2, r3)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeStringSparseArray((r2v0 android.os.Parcel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 android.util.SparseArray\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/os\/Parcel;, I, Landroid\/util\/SparseArray\<, Ljava\/lang\/String;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

