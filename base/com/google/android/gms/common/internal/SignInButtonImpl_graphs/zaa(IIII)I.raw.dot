digraph "CFG forcom.google.android.gms.common.internal.SignInButtonImpl.zaa(IIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2] t:[0x001e, 0x001d, 0x001c] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l0x0007: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0009: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x000c: CONST_STR  (r2 I:java.lang.String) =  \"Unknown color scheme: \" \l0x000e: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0011: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0014: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0018: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: RETURN  (r3 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN  (r2 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.gms.common.internal.SignInButtonImpl.zaa((r0 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_0 -> Node_4;
Node_0 -> Node_5;
Node_1 -> Node_2;
}

