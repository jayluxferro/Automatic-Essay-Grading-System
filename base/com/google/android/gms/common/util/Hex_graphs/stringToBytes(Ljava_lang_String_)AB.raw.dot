digraph "CFG forcom.google.android.gms.common.util.Hex.stringToBytes(Ljava\/lang\/String;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0004: ARITH  (r1 I:int) = (r0 I:int) % (2 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: ARITH  (r1 I:int) = (r0 I:int) \/ (2 int) \l0x000a: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARITH  (r3 I:int) = (r2 I:int) \/ (2 int) \l0x0011: ARITH  (r4 I:int) = (r2 I:int) + (2 int) \l0x0013: INVOKE  (r2 I:java.lang.String) = (r6 I:java.lang.String), (r2 I:int), (r4 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0017: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r2 I:int) = (r2 I:java.lang.String), (r5 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x001d: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x001e: APUT  \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x0020: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: RETURN  (r1 I:byte[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0025: CONST_STR  (r0 I:java.lang.String) =  \"Hex string has odd number of characters\" \l0x0027: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.common.util.Hex.stringToBytes((r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}], Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_6 -> Node_7;
}

