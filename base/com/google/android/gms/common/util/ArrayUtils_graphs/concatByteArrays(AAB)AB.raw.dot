digraph "CFG forcom.google.android.gms.common.util.ArrayUtils.concatByteArrays([[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_ARRAY  (r6 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r6 I:byte[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: ARRAY_LENGTH  (r3 I:int) = (r6 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000e: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x000f: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0010: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: AGET  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0015: INVOKE  (r0 I:byte[]) = (r0 I:byte[]), (r2 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x0019: AGET  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001b: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x001c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: ARRAY_LENGTH  (r4 I:int) = (r6 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: AGET  (r4 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0022: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x0023: INVOKE  \l  (r4 I:java.lang.Object)\l  (r1 I:int)\l  (r0 I:java.lang.Object)\l  (r2 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0026: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x0028: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: RETURN  (r0 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.common.util.ArrayUtils.concatByteArrays((r6 I:byte[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
}

