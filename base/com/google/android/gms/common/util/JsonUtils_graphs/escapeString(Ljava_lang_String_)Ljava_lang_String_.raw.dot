digraph "CFG forcom.google.android.gms.common.util.JsonUtils.escapeString(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r4 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0071 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:java.util.regex.Pattern) =  com.google.android.gms.common.util.JsonUtils.zzhe java.util.regex.Pattern \l0x0008: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r4 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:boolean) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.find():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0066 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0017: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r2 I:java.lang.String) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.group():java.lang.String type: VIRTUAL \l0x001e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  (r2 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0023: CONST  (r3 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0060 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST  (r3 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005a \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: CONST  (r3 I:?[int, float, short, byte, char]) = (92 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0054 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[8, 9, 10] t:[0x004e, 0x0048, 0x0042] \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[12, 13] t:[0x003c, 0x0036] \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: CONST_STR  (r2 I:java.lang.String) =  \"r\" \l0x0038: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: CONST_STR  (r2 I:java.lang.String) =  \"f\" \l0x003e: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: CONST_STR  (r2 I:java.lang.String) =  \"n\" \l0x0044: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: CONST_STR  (r2 I:java.lang.String) =  \"t\" \l0x004a: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x004e|0x004e: CONST_STR  (r2 I:java.lang.String) =  \"b\" \l0x0050: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|0x0054: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x0056: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: CONST_STR  (r2 I:java.lang.String) =  \"\/\" \l0x005c: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0060|0x0060: CONST_STR  (r2 I:java.lang.String) =  \"\"\" \l0x0062: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l  (r2 I:java.lang.String)\l java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer, java.lang.String):java.util.regex.Matcher type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0069 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: RETURN  (r4 I:java.lang.String) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: INVOKE  \l  (r0 I:java.util.regex.Matcher)\l  (r1 I:java.lang.StringBuffer)\l java.util.regex.Matcher.appendTail(java.lang.StringBuffer):java.lang.StringBuffer type: VIRTUAL \l0x006c: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0070|0x0070: RETURN  (r4 I:java.lang.String) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0071|0x0071: RETURN  (r4 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.gms.common.util.JsonUtils.escapeString((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_24;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_22;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_13 -> Node_18;
Node_13 -> Node_19;
Node_13 -> Node_20;
Node_14 -> Node_16;
Node_14 -> Node_17;
Node_14 -> Node_3;
Node_16 -> Node_3;
Node_17 -> Node_3;
Node_18 -> Node_3;
Node_19 -> Node_3;
Node_20 -> Node_3;
Node_21 -> Node_3;
Node_22 -> Node_3;
Node_23 -> Node_3;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27;
}

