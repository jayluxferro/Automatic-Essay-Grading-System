digraph "CFG forcom.google.android.gms.common.util.WorkSourceUtil.zza(Landroid\/os\/WorkSource;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  com.google.android.gms.common.util.WorkSourceUtil.zzhm java.lang.reflect.Method \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: SGET  (r0 I:java.lang.reflect.Method) =  com.google.android.gms.common.util.WorkSourceUtil.zzhm java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x0014 \}, TRY_ENTER]\l0x0007: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x0014 \}]\l0x0009: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0014 \}]\l0x000d: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0014 \}]\l0x000f: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x0014 \}]\l0x0012: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN  (r3 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|ExcHandler: Exception null\lSplitter:B:2:0x0005\l|0x0014: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST_STR  (r0 I:java.lang.String) =  \"WorkSourceUtil\" \l0x0017: CONST_STR  (r2 I:java.lang.String) =  \"Unable to assign blame through WorkSource\" \l0x0019: INVOKE  \l  (r0 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Throwable)\l android.util.Log.wtf(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.gms.common.util.WorkSourceUtil.zza((r3 I:android.os.WorkSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

