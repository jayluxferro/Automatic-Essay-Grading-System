digraph "CFG forcom.google.android.gms.common.util.WorkSourceUtil.hasWorkSourcePermission(Landroid\/content\/Context;)Z" {
subgraph cluster_Region_1209886930 {
label = "R(1:(2:(1:9)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_775208656 {
label = "R(2:(1:9)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_251907186 {
label = "IF [B:1:0x0001, B:4:0x0008, B:7:0x0019] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r3 == null) goto L_0x0003\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|ADDED_TO_REGION\l|if (r3.getPackageManager() == null) goto L_0x000a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|ADDED_TO_REGION\l|if (com.google.android.gms.common.wrappers.Wrappers.packageManager(r3).checkPermission(\"android.permission.UPDATE_DEVICE_STATS\", r3.getPackageName()) != 0) goto L_0x001d\l}"];
subgraph cluster_Region_13888172 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001d|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_598428060 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001b|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000b}"];
MethodNode[shape=record,label="{public static boolean com.google.android.gms.common.util.WorkSourceUtil.hasWorkSourcePermission((r3v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
}

