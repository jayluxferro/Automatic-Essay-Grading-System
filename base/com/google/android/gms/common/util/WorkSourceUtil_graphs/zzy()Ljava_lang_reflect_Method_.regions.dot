digraph "CFG forcom.google.android.gms.common.util.WorkSourceUtil.zzy()Ljava\/lang\/reflect\/Method;" {
subgraph cluster_Region_1910462243 {
label = "R(2:(2:2|(2:4|7))|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_800250410 {
label = "IF [B:1:0x0004] THEN: R(2:2|(2:4|7)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (com.google.android.gms.common.util.PlatformVersion.isAtLeastJellyBeanMR2() == true) goto L_0x0006\l}"];
subgraph cluster_Region_820477702 {
label = "R(2:2|(2:4|7))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
subgraph cluster_TryCatchRegion_734919951 {
label = "Try: R(2:4|7) catches: R(0)";
node [shape=record,color=blue];
subgraph cluster_Region_547410202 {
label = "R(2:4|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ Exception \-\> 0x001c \}\lSplitter:B:3:0x000b\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return android.os.WorkSource.class.getMethod(\"add\", new java.lang.Class[]\{java.lang.Integer.TYPE, java.lang.String.class\})\l}"];
}
subgraph cluster_Region_427441326 {
label = "R(0) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x001c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
}
subgraph cluster_Region_427441326 {
label = "R(0) | ExcHandler: Exception (unused java.lang.Exception)\l";
node [shape=record,color=blue];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b|SYNTHETIC\lSplitter:B:3:0x000b\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lExcHandler: Exception (unused java.lang.Exception)\lSplitter:B:3:0x000b\l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Method com.google.android.gms.common.util.WorkSourceUtil.zzy() }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_6 -> Node_5;
}

