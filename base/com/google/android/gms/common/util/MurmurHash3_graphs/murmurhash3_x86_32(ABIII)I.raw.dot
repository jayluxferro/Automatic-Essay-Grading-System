digraph "CFG forcom.google.android.gms.common.util.MurmurHash3.murmurhash3_x86_32([BIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (\-4 ?[int, float, short, byte, char]) \l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (461845907(0x1b873593, float:2.2368498E\-22) ?[int, float, short, byte, char])\l \l0x0006: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (\-862048943(0xffffffffcc9e2d51, float:\-8.2930312E7) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r6 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x0040 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x000d: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000f: ARITH  (r4 I:int) = (r6 I:int) + (1 int) \l0x0011: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0013: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0015: ARITH  (r4 I:int) = (r4 I:int) \<\< (8 int) \l0x0017: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) \| (r4 I:?[int, boolean, short, byte, char]) \l0x0018: ARITH  (r4 I:int) = (r6 I:int) + (2 int) \l0x001a: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x001c: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001e: ARITH  (r4 I:int) = (r4 I:int) \<\< (16 int) \l0x0020: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) \| (r4 I:?[int, boolean, short, byte, char]) \l0x0021: ARITH  (r4 I:int) = (r6 I:int) + (3 int) \l0x0023: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0025: ARITH  (r4 I:int) = (r4 I:int) \<\< (24 int) \l0x0027: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) \| (r4 I:?[int, boolean, short, byte, char]) \l0x0028: ARITH  (r3 I:int) = (r3 I:int) * (r2 I:int) \l0x002a: ARITH  (r2 I:int) = (r3 I:int) \<\< (15 int) \l0x002c: ARITH  (r3 I:int) = (r3 I:int) \>\>\> (17 int) \l0x002e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l0x002f: ARITH  (r2 I:int) = (r2 I:int) * (r1 I:int) \l0x0031: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l0x0032: ARITH  (r1 I:int) = (r8 I:int) \<\< (13 int) \l0x0034: ARITH  (r8 I:int) = (r8 I:int) \>\>\> (19 int) \l0x0036: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) \| (r1 I:?[int, boolean, short, byte, char]) \l0x0037: ARITH  (r8 I:int) = (r8 I:int) * (5 int) \l0x0039: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-430675100(0xffffffffe6546b64, float:\-2.5078068E23) ?[int, float, short, byte, char])\l \l0x003c: ARITH  (r8 I:int) = (r8 I:int) + (r1 I:int) \l0x003d: ARITH  (r6 I:int) = (r6 I:int) + (4 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0040|0x0040: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0058, 0x004f, 0x0047] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|0x0047: ARITH  (r6 I:int) = (r0 I:int) + (2 int) \l0x0049: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x004b: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x004d: ARITH  (r6 I:int) = (r6 I:int) \<\< (16 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x0051: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0053: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0055: ARITH  (r3 I:int) = (r3 I:int) \<\< (8 int) \l0x0057: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x005a: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x005c: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x005d: ARITH  (r5 I:int) = (r5 I:int) * (r2 I:int) \l0x005f: ARITH  (r6 I:int) = (r5 I:int) \<\< (15 int) \l0x0061: ARITH  (r5 I:int) = (r5 I:int) \>\>\> (17 int) \l0x0063: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x0064: ARITH  (r5 I:int) = (r5 I:int) * (r1 I:int) \l0x0066: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) ^ (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0067|0x0067: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) ^ (r7 I:?[int, boolean, short, byte, char]) \l0x0069: ARITH  (r6 I:int) = (r5 I:int) \>\>\> (16 int) \l0x006b: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) ^ (r6 I:?[int, boolean, short, byte, char]) \l0x006c: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (\-2048144789(0xffffffff85ebca6b, float:\-2.217365E\-35) ?[int, float, short, byte, char])\l \l0x006f: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x0071: ARITH  (r6 I:int) = (r5 I:int) \>\>\> (13 int) \l0x0073: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) ^ (r6 I:?[int, boolean, short, byte, char]) \l0x0074: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (\-1028477387(0xffffffffc2b2ae35, float:\-89.34025) ?[int, float, short, byte, char])\l \l0x0077: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x0079: ARITH  (r6 I:int) = (r5 I:int) \>\>\> (16 int) \l0x007b: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) ^ (r6 I:?[int, boolean, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x007c|0x007c: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.gms.common.util.MurmurHash3.murmurhash3_x86_32((r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_5 -> Node_9;
Node_5 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

