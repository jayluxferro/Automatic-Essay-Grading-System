digraph "CFG forcom.google.android.gms.common.util.AndroidUtilsLight.getPackageCertificateHashBytes(Landroid\/content\/Context;Ljava\/lang\/String;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"SHA1\" \l0x0002: INVOKE  (r2 I:com.google.android.gms.common.wrappers.PackageManagerWrapper) = (r2 I:android.content.Context) com.google.android.gms.common.wrappers.Wrappers.packageManager(android.content.Context):com.google.android.gms.common.wrappers.PackageManagerWrapper type: STATIC \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x0008: INVOKE  (r2 I:android.content.pm.PackageInfo) = \l  (r2 I:com.google.android.gms.common.wrappers.PackageManagerWrapper)\l  (r3 I:java.lang.String)\l  (r1 I:int)\l com.google.android.gms.common.wrappers.PackageManagerWrapper.getPackageInfo(java.lang.String, int):android.content.pm.PackageInfo type: VIRTUAL \l0x000c: IGET  (r3 I:android.content.pm.Signature[]) = (r2 I:android.content.pm.PackageInfo) android.content.pm.PackageInfo.signatures android.content.pm.Signature[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r3 I:android.content.pm.Signature[]) = (r2 I:android.content.pm.PackageInfo) android.content.pm.PackageInfo.signatures android.content.pm.Signature[] \l0x0012: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r3 I:java.security.MessageDigest) = (r0 I:java.lang.String) com.google.android.gms.common.util.AndroidUtilsLight.zzj(java.lang.String):java.security.MessageDigest type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r2 I:android.content.pm.Signature[]) = (r2 I:android.content.pm.PackageInfo) android.content.pm.PackageInfo.signatures android.content.pm.Signature[] \l0x001e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0021: INVOKE  (r2 I:byte[]) = (r2 I:android.content.pm.Signature) android.content.pm.Signature.toByteArray():byte[] type: VIRTUAL \l0x0025: INVOKE  (r2 I:byte[]) = (r3 I:java.security.MessageDigest), (r2 I:byte[]) java.security.MessageDigest.digest(byte[]):byte[] type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: RETURN  (r2 I:byte[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: RETURN  (r2 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.common.util.AndroidUtilsLight.getPackageCertificateHashBytes((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.content.pm.PackageManager$NameNotFoundException]\}], Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

