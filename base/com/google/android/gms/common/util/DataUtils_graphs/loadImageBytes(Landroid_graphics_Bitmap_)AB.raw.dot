digraph "CFG forcom.google.android.gms.common.util.DataUtils.loadImageBytes(Landroid\/graphics\/Bitmap;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0002: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x0005: SGET  (r1 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.JPEG android.graphics.Bitmap$CompressFormat \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x0009: INVOKE  \l  (r3 I:android.graphics.Bitmap)\l  (r1 I:android.graphics.Bitmap$CompressFormat)\l  (r2 I:int)\l  (r0 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL \l0x000c: INVOKE  (r3 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: RETURN  (r3 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.common.util.DataUtils.loadImageBytes((r3 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

