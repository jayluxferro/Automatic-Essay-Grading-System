digraph "CFG forcom.google.android.gms.internal.measurement.zzuf.zzvx()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v4 int) binds: [B:0:0x0000, B:3:0x000b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v4 int) binds: [B:0:0x0000, B:3:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:3:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r1 \>= r4.zzbvj.zzyc()) goto L_0x0024\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:3:0x000b\l|java.util.Map$Entry r3 = r4.zzbvj.zzbx(r1)\lint r2 = r2 + zzb((com.google.android.gms.internal.measurement.zzuh\<?\>) (com.google.android.gms.internal.measurement.zzuh) r3.getKey(), r3.getValue())\lr1 = r1 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|java.util.Iterator r3 = r4.zzbvj.zzyd().iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|LOOP_START\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:4:0x0024, B:7:0x0034] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x002e\-\>B:7:0x0034\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|if (r3.hasNext() == false) goto L_0x004a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|LOOP_END\lLOOP:1: B:5:0x002e\-\>B:7:0x0034\l|java.util.Map$Entry r0 = r3.next()\lint r2 = r2 + zzb((com.google.android.gms.internal.measurement.zzuh\<?\>) (com.google.android.gms.internal.measurement.zzuh) r0.getKey(), r0.getValue())\l}"];
Node_8 [shape=record,label="{8\:\ 0x004a|RETURN\l|return r2\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final int com.google.android.gms.internal.measurement.zzuf.zzvx((r4v0 'this' com.google.android.gms.internal.measurement.zzuf A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_5;
Node_9 -> Node_4;
Node_10 -> Node_8;
}

