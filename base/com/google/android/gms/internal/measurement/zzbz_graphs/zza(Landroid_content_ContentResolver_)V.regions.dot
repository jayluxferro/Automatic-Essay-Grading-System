digraph "CFG forcom.google.android.gms.internal.measurement.zzbz.zza(Landroid\/content\/ContentResolver;)V" {
subgraph cluster_Region_846372994 {
label = "R(1:(1:2)(1:(1:6)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1770573449 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: R(1:(1:6)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (zzzz == null) goto L_0x0005\l}"];
subgraph cluster_Region_535182481 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|zzzy.set(false)\lzzzz = new java.util.HashMap\<\>()\lzzaae = new java.lang.Object()\lzzaaf = false\lr4.registerContentObserver(CONTENT_URI, true, new com.google.android.gms.internal.measurement.zzby((android.os.Handler) null))\l}"];
}
subgraph cluster_Region_214396351 {
label = "R(1:(1:6)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_731294229 {
label = "IF [B:5:0x002d] THEN: R(1:6) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002d|if (zzzy.getAndSet(false) == true) goto L_0x002f\l}"];
subgraph cluster_Region_71685480 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002f|zzzz.clear()\lzzaaa.clear()\lzzaab.clear()\lzzaac.clear()\lzzaad.clear()\lzzaae = new java.lang.Object()\lzzaaf = false\l}"];
}
subgraph cluster_Region_719938501 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0026}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0027}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.google.android.gms.internal.measurement.zzbz.zza((r4v0 android.content.ContentResolver A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_4 -> Node_5;
}

