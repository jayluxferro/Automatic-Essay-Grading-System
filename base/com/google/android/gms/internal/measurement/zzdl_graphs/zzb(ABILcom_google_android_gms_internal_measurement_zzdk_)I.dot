digraph "CFG forcom.google.android.gms.internal.measurement.zzdl.zzb([BILcom\/google\/android\/gms\/internal\/measurement\/zzdk;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r10 + 1\llong r1 = (long) r9[r10]\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if ((r1 \> 0 ? 1 : (r1 == 0 ? 0 : \-1)) \< 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|r11.zzadb = r1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|int r10 = r0 + 1\lbyte r0 = r9[r0]\lr2 = (r1 & 127) \| (((long) (r0 & kotlin.jvm.internal.ByteCompanionObject.MAX_VALUE)) \<\< 7)\lr1 = 7\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|LOOP_START\lPHI: r0 r1 r2 r10 \l  PHI: (r0v2 byte) = (r0v1 byte), (r0v4 byte) binds: [B:4:0x000e, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v4 int) = (r1v3 int), (r1v5 int) binds: [B:4:0x000e, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 long) = (r2v0 long), (r2v2 long) binds: [B:4:0x000e, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v4 int) = (r10v3 int), (r10v6 int) binds: [B:4:0x000e, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x001d\-\>B:6:0x001f\l|if (r0 \>= 0) goto L_0x002d\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|LOOP_END\lLOOP:0: B:5:0x001d\-\>B:6:0x001f\l|int r0 = r10 + 1\lbyte r10 = r9[r10]\lint r1 = r1 + 7\llong r2 = r2 \| (((long) (r10 & kotlin.jvm.internal.ByteCompanionObject.MAX_VALUE)) \<\< r1)\lr8 = r0\lr0 = r10\lr10 = r8\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|r11.zzadb = r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|RETURN\l|return r10\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int com.google.android.gms.internal.measurement.zzdl.zzb((r9v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 com.google.android.gms.internal.measurement.zzdk A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

