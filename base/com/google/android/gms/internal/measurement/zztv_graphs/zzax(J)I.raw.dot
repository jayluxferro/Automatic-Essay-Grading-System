digraph "CFG forcom.google.android.gms.internal.measurement.zztv.zzax(J)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CONST  (r0 I:?[long, double]) = (\-128(0xffffffffffffff80, double:NaN) ?[long, double]) \l0x0004: ARITH  (r0 I:long) = (r0 I:long) & (r8 I:long) \l0x0005: CMP_L  (r0 I:int) = (r0 I:long), (r6 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CMP_L  (r0 I:int) = (r8 I:long), (r6 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0013: CONST  (r2 I:?[long, double]) = \l  (\-34359738368(0xfffffff800000000, double:NaN) ?[long, double])\l \l0x0018: ARITH  (r2 I:long) = (r2 I:long) & (r8 I:long) \l0x0019: CMP_L  (r1 I:int) = (r2 I:long), (r6 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x001e: CONST  (r1 I:?[int, float, short, byte, char]) = (28 ?[int, float, short, byte, char]) \l0x0020: ARITH  (r2 I:long) = (r8 I:long) \>\>\> (r1 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: CONST  (r4 I:?[long, double]) = (\-2097152(0xffffffffffe00000, double:NaN) ?[long, double]) \l0x0025: ARITH  (r4 I:long) = (r4 I:long) & (r2 I:long) \l0x0026: CMP_L  (r1 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002f \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l0x002c: CONST  (r1 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x002e: ARITH  (r2 I:long) = (r2 I:long) \>\>\> (r1 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: CONST  (r4 I:?[long, double]) = (\-16384(0xffffffffffffc000, double:NaN) ?[long, double]) \l0x0031: ARITH  (r2 I:long) = (r2 I:long) & (r4 I:long) \l0x0032: CMP_L  (r1 I:int) = (r2 I:long), (r6 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.gms.internal.measurement.zztv.zzax((r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_3;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_3;
Node_16 -> Node_10;
}

