digraph "CFG forcom.google.android.gms.internal.measurement.zzee.zze.zzbn(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (\-128(0xffffffffffffff80, double:NaN) ?[long, double]) \l0x0002: ARITH  (r0 I:long) = (r0 I:long) & (r5 I:long) \l0x0003: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|SYNTHETIC\lSplitter:B:2:0x0009\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0009\l|0x0009: IGET  (r0 I:java.nio.ByteBuffer) = (r4 I:com.google.android.gms.internal.measurement.zzee$zze) com.google.android.gms.internal.measurement.zzee.zze.zzaei java.nio.ByteBuffer A[Catch:\{ BufferOverflowException \-\> 0x0011 \}, TRY_ENTER]\l0x000b: CAST  (r5 I:int) = (int) (r5 I:long) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x000c: CAST  (r5 I:byte) = (byte) (r5 I:int) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x000d: INVOKE  (r0 I:java.nio.ByteBuffer), (r5 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|ExcHandler: BufferOverflowException null\lSplitter:B:2:0x0009\l|0x0011: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: GOTO  \-\> 0x0021 A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r0 I:java.nio.ByteBuffer) = (r4 I:com.google.android.gms.internal.measurement.zzee$zze) com.google.android.gms.internal.measurement.zzee.zze.zzaei java.nio.ByteBuffer A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x0015: CAST  (r1 I:int) = (int) (r5 I:long) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x0016: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x0018: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x001a: CAST  (r1 I:byte) = (byte) (r1 I:int) A[Catch:\{ BufferOverflowException \-\> 0x0011 \}]\l0x001b: INVOKE  (r0 I:java.nio.ByteBuffer), (r1 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL A[Catch:\{ BufferOverflowException \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x001f: ARITH  (r5 I:long) = (r5 I:long) \>\>\> (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: NEW_INSTANCE  (r6 I:com.google.android.gms.internal.measurement.zzee$zzb) =  com.google.android.gms.internal.measurement.zzee$zzb \l0x0023: INVOKE  \l  (r6 I:com.google.android.gms.internal.measurement.zzee$zzb)\l  (r5 I:java.lang.Throwable)\l com.google.android.gms.internal.measurement.zzee.zzb.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.internal.measurement.zzee.zze.zzbn((r4 'this' I:com.google.android.gms.internal.measurement.zzee$zze A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_0;
Node_9 -> Node_10;
}

