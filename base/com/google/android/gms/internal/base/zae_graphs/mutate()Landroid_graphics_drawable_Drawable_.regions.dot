digraph "CFG forcom.google.android.gms.internal.base.zae.mutate()Landroid\/graphics\/drawable\/Drawable;" {
subgraph cluster_Region_1212659401 {
label = "R(2:(1:(1:6)(1:8))|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1830801759 {
label = "IF [B:1:0x0002, B:3:0x0008] THEN: R(1:(1:6)(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|ADDED_TO_REGION\l|if (r2.zanl == false) goto L_0x0004\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|if (super.mutate() == r2) goto L_0x000a\l}"];
subgraph cluster_Region_224267434 {
label = "R(1:(1:6)(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1408878990 {
label = "IF [B:5:0x000e] THEN: R(1:6) ELSE: R(1:8)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|if (canConstantState() == true) goto L_0x0010\l}"];
subgraph cluster_Region_645778630 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|r2.zann.mutate()\lr2.zano.mutate()\lr2.zanl = true\l}"];
}
subgraph cluster_Region_905671807 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0025|throw new java.lang.IllegalStateException(\"One or more children of this LayerDrawable does not have constant state; this drawable cannot be mutated.\")\l}"];
}
}
}
}
Node_9 [shape=record,label="{9\:\ 0x0026|RETURN\l|return r2\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e}"];
MethodNode[shape=record,label="{public final android.graphics.drawable.Drawable com.google.android.gms.internal.base.zae.mutate((r2v0 'this' com.google.android.gms.internal.base.zae A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_7 -> Node_8;
}

