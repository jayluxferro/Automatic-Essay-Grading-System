digraph "CFG forcom.google.android.gms.internal.ads.zzcam.zza([BDZ)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: NEW_INSTANCE  (r1 I:android.graphics.BitmapFactory$Options) =  android.graphics.BitmapFactory$Options \l0x0003: INVOKE  (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.\<init\>():void type: DIRECT \l0x0006: CONST  (r2 I:?[long, double]) = \l  (4639833516098453504(0x4064000000000000, double:160.0) ?[long, double])\l \l0x0008: ARITH  (r2 I:double) = (r2 I:double) * (r8 I:double) \l0x0009: CAST  (r0 I:int) = (int) (r2 I:double) \l0x000a: IPUT  (r0 I:int), (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.inDensity int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: SGET  (r0 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.RGB_565 android.graphics.Bitmap$Config \l0x0010: IPUT  \l  (r0 I:android.graphics.Bitmap$Config)\l  (r1 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inPreferredConfig android.graphics.Bitmap$Config \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: SGET  (r0 I:com.google.android.gms.internal.ads.zzaci\<java.lang.Boolean\>) =  com.google.android.gms.internal.ads.zzact.zzcwo com.google.android.gms.internal.ads.zzaci \l0x0014: INVOKE  (r2 I:com.google.android.gms.internal.ads.zzacq) =  com.google.android.gms.internal.ads.zzyr.zzpe():com.google.android.gms.internal.ads.zzacq type: STATIC \l0x0018: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:com.google.android.gms.internal.ads.zzacq)\l  (r0 I:com.google.android.gms.internal.ads.zzaci)\l com.google.android.gms.internal.ads.zzacq.zzd(com.google.android.gms.internal.ads.zzaci):java.lang.Object type: VIRTUAL \l0x001c: CHECK_CAST  (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0053 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IPUT  \l  (r4 I:boolean)\l  (r1 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inJustDecodeBounds boolean \l0x0026: INVOKE  \l  (r6 I:com.google.android.gms.internal.ads.zzcam)\l  (r7 I:byte[])\l  (r1 I:android.graphics.BitmapFactory$Options)\l com.google.android.gms.internal.ads.zzcam.zza(byte[], android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: DIRECT \l0x0029: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: IPUT  \l  (r0 I:boolean)\l  (r1 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.Options.inJustDecodeBounds boolean \l0x002c: IGET  (r0 I:int) = (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.outWidth int \l0x002e: IGET  (r2 I:int) = (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.outHeight int \l0x0030: ARITH  (r2 I:int) = (r2 I:int) * (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0053 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: SGET  (r0 I:com.google.android.gms.internal.ads.zzaci\<java.lang.Integer\>) =  com.google.android.gms.internal.ads.zzact.zzcwp com.google.android.gms.internal.ads.zzaci \l0x0035: INVOKE  (r3 I:com.google.android.gms.internal.ads.zzacq) =  com.google.android.gms.internal.ads.zzyr.zzpe():com.google.android.gms.internal.ads.zzacq type: STATIC \l0x0039: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:com.google.android.gms.internal.ads.zzacq)\l  (r0 I:com.google.android.gms.internal.ads.zzaci)\l com.google.android.gms.internal.ads.zzacq.zzd(com.google.android.gms.internal.ads.zzaci):java.lang.Object type: VIRTUAL \l0x003d: CHECK_CAST  (r0 I:java.lang.Integer) = (java.lang.Integer) (r0 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0043: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0045: ARITH  (r0 I:int) = (r2 I:int) \/ (r0 I:int) \l0x0047: INVOKE  (r0 I:int) = (r0 I:int) java.lang.Integer.numberOfLeadingZeros(int):int type: STATIC \l0x004b: ARITH  (r0 I:int) = (33 int) \- (r0 I:int) \l0x004d: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x004f: ARITH  (r0 I:int) = (r4 I:int) \<\< (r0 I:int) \l0x0051: IPUT  (r0 I:int), (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.inSampleSize int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0053|0x0053: INVOKE  (r0 I:android.graphics.Bitmap) = \l  (r6 I:com.google.android.gms.internal.ads.zzcam)\l  (r7 I:byte[])\l  (r1 I:android.graphics.BitmapFactory$Options)\l com.google.android.gms.internal.ads.zzcam.zza(byte[], android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0057|0x0057: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{private final android.graphics.Bitmap com.google.android.gms.internal.ads.zzcam.zza((r6 'this' I:com.google.android.gms.internal.ads.zzcam A[IMMUTABLE_TYPE, THIS]), (r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

