digraph "CFG forcom.google.android.gms.internal.ads.zzki.zzd([B)Landroid\/util\/Pair;" {
subgraph cluster_Region_1225989759 {
label = "R(6:0|1|5|(1:10)|7|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r2 = true\lint r0 = (r5[0] \>\> 3) & 31\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|int r0 = (r0 == 5 \|\| r0 == 29) ? 1 : 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|PHI: r0 \l  PHI: (r0v3 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = ((r5[r0] & 7) \<\< 1) \| ((r5[r0 + 1] \>\> 7) & 1)\l}"];
subgraph cluster_IfRegion_1691470483 {
label = "IF [B:6:0x0021] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|if (r3 \>= 13) goto L_0x0041\l}"];
subgraph cluster_Region_166518526 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0041|r2 = false\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0023|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v0 boolean), (r2v1 boolean) binds: [B:6:0x0021, B:10:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.gms.internal.ads.zzkh.checkState(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|RETURN\l|return android.util.Pair.create(java.lang.Integer.valueOf(zzaqu[r3]), java.lang.Integer.valueOf((r5[r0 + 1] \>\> 3) & 15))\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000d|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x003f}"];
MethodNode[shape=record,label="{public static android.util.Pair\<java.lang.Integer, java.lang.Integer\> com.google.android.gms.internal.ads.zzki.zzd((r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([B), Landroid\/util\/Pair, \<, Ljava\/lang\/Integer;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_10 -> Node_7;
Node_7 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_9 -> Node_5;
}

