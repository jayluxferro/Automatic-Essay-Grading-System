digraph "CFG forcom.google.android.gms.internal.ads.zzdnh.zzd.zzfj(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lPHI: r6 \l  PHI: (r6v1 long) = (r6v0 long), (r6v2 long) binds: [B:0:0x0000, B:6:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:0:0x0000\-\>B:6:0x001c\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (((\-128 & r6) \> 0 ? 1 : ((\-128 & r6) == 0 ? 0 : \-1)) != 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|SYNTHETIC\lSplitter:B:2:0x0009\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ BufferOverflowException \-\> 0x001f \}\lSplitter:B:2:0x0009\l|r5.zzaxl.put((byte) ((int) r6))     \/\/ Catch:\{ BufferOverflowException \-\> 0x001f \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|RETURN\lCatch:\{ BufferOverflowException \-\> 0x001f \}\l|return     \/\/ Catch:\{ BufferOverflowException \-\> 0x001f \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|Catch:\{ BufferOverflowException \-\> 0x001f \}\l|r5.zzaxl.put((byte) ((((int) r6) & 127) \| 128))     \/\/ Catch:\{ BufferOverflowException \-\> 0x001f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:6:0x001c\l|long r6 = r6 \>\>\> 7\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|ExcHandler: BufferOverflowException (r0v5 'e' java.nio.BufferOverflowException A[CUSTOM_DECLARE])\lSplitter:B:2:0x0009\l|java.nio.BufferOverflowException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020}"];
Node_9 [shape=record,label="{9\:\ 0x0025|throw new com.google.android.gms.internal.ads.zzdnh.zzc((java.lang.Throwable) r0)\l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.internal.ads.zzdnh.zzd.zzfj((r5v0 'this' com.google.android.gms.internal.ads.zzdnh$zzd A[IMMUTABLE_TYPE, THIS]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_0;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

