digraph "CFG forcom.google.android.gms.internal.ads.zzdlu.zza(Ljava\/math\/BigInteger;I)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r0 I:byte[]) = (r5 I:java.math.BigInteger) java.math.BigInteger.toByteArray():byte[] type: VIRTUAL \l0x0005: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN  (r0 I:byte[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x000a: ARITH  (r2 I:int) = (r6 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.security.GeneralSecurityException) =  java.security.GeneralSecurityException \l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"integer too large\" \l0x0012: INVOKE  \l  (r0 I:java.security.GeneralSecurityException)\l  (r1 I:java.lang.String)\l java.security.GeneralSecurityException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0017: ARITH  (r2 I:int) = (r6 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0026 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0021: INVOKE  (r0 I:byte[]) = (r0 I:byte[]), (r1 I:int), (r2 I:int) java.util.Arrays.copyOfRange(byte[], int, int):byte[] type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: NEW_INSTANCE  (r0 I:java.security.GeneralSecurityException) =  java.security.GeneralSecurityException \l0x0028: CONST_STR  (r1 I:java.lang.String) =  \"integer too large\" \l0x002a: INVOKE  \l  (r0 I:java.security.GeneralSecurityException)\l  (r1 I:java.lang.String)\l java.security.GeneralSecurityException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: NEW_ARRAY  (r1 I:byte[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0030: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x0031: ARITH  (r2 I:int) = (r6 I:int) \- (r2 I:int) \l0x0033: ARRAY_LENGTH  (r3 I:int) = (r0 I:?[]) \l0x0034: INVOKE  \l  (r0 I:java.lang.Object)\l  (r4 I:int)\l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0037: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.internal.ads.zzdlu.zza((r5 I:java.math.BigInteger A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_2;
Node_12 -> Node_13;
Node_14 -> Node_2;
}

