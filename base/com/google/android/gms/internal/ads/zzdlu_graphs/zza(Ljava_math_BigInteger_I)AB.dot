digraph "CFG forcom.google.android.gms.internal.ads.zzdlu.zza(Ljava\/math\/BigInteger;I)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] r0 = r5.toByteArray()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0.length != r6) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r0.length \<= (r6 + 1)) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0015|throw new java.security.GeneralSecurityException(\"integer too large\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016}"];
Node_7 [shape=record,label="{7\:\ 0x0019|if (r0.length != (r6 + 1)) goto L_0x002e\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b}"];
Node_9 [shape=record,label="{9\:\ 0x001d|if (r0[0] != 0) goto L_0x0026\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f}"];
Node_11 [shape=record,label="{11\:\ 0x0026}"];
Node_12 [shape=record,label="{12\:\ 0x002d|throw new java.security.GeneralSecurityException(\"integer too large\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|byte[] r1 = new byte[r6]\ljava.lang.System.arraycopy(r0, 0, r1, r6 \- r0.length, r0.length)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return java.util.Arrays.copyOfRange(r0, 1, r0.length)\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.internal.ads.zzdlu.zza((r5v0 java.math.BigInteger A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_13 -> Node_16;
}

