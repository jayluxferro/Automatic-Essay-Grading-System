digraph "CFG forcom.google.android.gms.internal.ads.zzig.zzdu()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r8.zzaiz == false) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (zzfo() == false) goto L_0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f}"];
Node_6 [shape=record,label="{6\:\ 0x0012|r1 = 0\lr2 = Long.MIN_VALUE\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:6:0x0012, B:9:0x001d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 long) = (r2v0 long), (r2v3 long) binds: [B:6:0x0012, B:9:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0015\-\>B:9:0x001d\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|if (r1 \>= r8.zzaif.size()) goto L_0x0031\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|LOOP_END\lLOOP:0: B:7:0x0015\-\>B:9:0x001d\l|long r2 = java.lang.Math.max(r2, r8.zzaif.valueAt(r1).zzff())\lr1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031}"];
Node_11 [shape=record,label="{11\:\ 0x0033|if ((r2 \> Long.MIN_VALUE ? 1 : (r2 == Long.MIN_VALUE ? 0 : \-1)) != 0) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035}"];
Node_13 [shape=record,label="{13\:\ 0x0031|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r8.zzaiq\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r8.zzaio\l}"];
MethodNode[shape=record,label="{public final long com.google.android.gms.internal.ads.zzig.zzdu((r8v0 'this' com.google.android.gms.internal.ads.zzig A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_16;
Node_13 -> Node_10;
}

