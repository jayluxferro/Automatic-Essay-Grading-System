digraph "CFG forcom.google.android.gms.internal.ads.zzdkq.zza(Ljava\/security\/spec\/ECPoint;Ljava\/security\/spec\/EllipticCurve;)V" {
subgraph cluster_Region_1860638487 {
label = "R(2:0|(1:4)(1:(1:10)(1:(1:16)(1:(1:20)(0)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.math.BigInteger java.math.BigInteger r0 = zza(r6)\ljava.math.BigInteger java.math.BigInteger r1 = r5.getAffineX()\ljava.math.BigInteger java.math.BigInteger r2 = r5.getAffineY()\l}"];
subgraph cluster_IfRegion_60151616 {
label = "IF [B:1:0x000d, B:2:0x000f] THEN: R(1:4) ELSE: R(1:(1:10)(1:(1:16)(1:(1:20)(0))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r1 == null) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|ADDED_TO_REGION\l|if (r2 == null) goto L_0x0011\l}"];
subgraph cluster_Region_579186555 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0018|throw new java.security.GeneralSecurityException(\"point is at infinity\")\l}"];
}
subgraph cluster_Region_614735097 {
label = "R(1:(1:10)(1:(1:16)(1:(1:20)(0)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_142807962 {
label = "IF [B:6:0x001d, B:8:0x0023] THEN: R(1:10) ELSE: R(1:(1:16)(1:(1:20)(0))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001d|if (r1.signum() == \-1) goto L_0x0025\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|ADDED_TO_REGION\l|if (r1.compareTo(r0) != \-1) goto L_0x0025\l}"];
subgraph cluster_Region_141123987 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002c|throw new java.security.GeneralSecurityException(\"x is out of range\")\l}"];
}
subgraph cluster_Region_1619559039 {
label = "R(1:(1:16)(1:(1:20)(0))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2116078041 {
label = "IF [B:12:0x0031, B:14:0x0037] THEN: R(1:16) ELSE: R(1:(1:20)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0031|if (r2.signum() == \-1) goto L_0x0039\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|ADDED_TO_REGION\l|if (r2.compareTo(r0) != \-1) goto L_0x0039\l}"];
subgraph cluster_Region_1870202722 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0040|throw new java.security.GeneralSecurityException(\"y is out of range\")\l}"];
}
subgraph cluster_Region_1799265696 {
label = "R(1:(1:20)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1436298571 {
label = "IF [B:18:0x0069] THEN: R(1:20) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0069|if (r2.multiply(r2).mod(r0).equals(r1.multiply(r1).add(r6.getA()).multiply(r1).add(r6.getB()).mod(r0)) == false) goto L_0x006b\l}"];
subgraph cluster_Region_681053357 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0072|throw new java.security.GeneralSecurityException(\"Point is not on curve\")\l}"];
}
subgraph cluster_Region_203946171 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0025}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002d}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0033}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0039}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0041}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x006b}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0073}"];
MethodNode[shape=record,label="{static void com.google.android.gms.internal.ads.zzdkq.zza((r5v0 java.security.spec.ECPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.security.spec.EllipticCurve A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_11[style=dashed];
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_18 -> Node_19;
Node_18 -> Node_21[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

