digraph "CFG forcom.google.android.gms.internal.ads.zzdkq.zza(Ljava\/security\/interfaces\/ECPrivateKey;Ljava\/security\/spec\/ECPoint;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|zza(r14, r13.getParams().getCurve())\ljava.security.spec.ECParameterSpec r0 = r13.getParams()\lr0.getCurve()\ljava.security.spec.ECPublicKeySpec r2 = new java.security.spec.ECPublicKeySpec(r14, r0)\ljava.security.PublicKey r2 = java.security.KeyFactory.getInstance(\"EC\").generatePublic(r2)\ljavax.crypto.KeyAgreement r0 = com.google.android.gms.internal.ads.zzdkw.zzhat.zzgt(\"ECDH\")\lr0.init(r13)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|SYNTHETIC\lSplitter:B:1:0x0032\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IllegalStateException \-\> 0x005f \}\lSplitter:B:1:0x0032\l|r0.doPhase(r2, true)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lbyte[] r5 = r0.generateSecret()     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.security.spec.EllipticCurve r0 = r13.getParams().getCurve()     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r2 = new java.math.BigInteger(1, r5)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x004b|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r2.signum() == \-1) goto L_0x0057     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x004d|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0055|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r2.compareTo(zza(r0)) == \-1) goto L_0x006a     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0057|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x005e|Catch:\{ IllegalStateException \-\> 0x005f \}\l|throw new java.security.GeneralSecurityException(\"shared secret is out of range\")     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x005f|ExcHandler: IllegalStateException (r0v8 'e' java.lang.IllegalStateException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0032\l|java.lang.IllegalStateException r0 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0060}"];
Node_10 [shape=record,label="{10\:\ 0x0069|throw new java.security.GeneralSecurityException(r0.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|SYNTHETIC\lSplitter:B:11:0x006a\l}"];
Node_12 [shape=record,label="{12\:\ ?|Catch:\{ IllegalStateException \-\> 0x005f \}\lSplitter:B:11:0x006a\l|java.math.BigInteger r6 = zza(r0)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r3 = r0.getA()     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r0 = r0.getB()     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r0 = r2.multiply(r2).add(r3).multiply(r2).add(r0).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x008e|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.signum() == 1) goto L_0x0098     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0090|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0097|Catch:\{ IllegalStateException \-\> 0x005f \}\l|throw new java.security.InvalidAlgorithmParameterException(\"p must be positive\")     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0098|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r7 = r0.mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lr0 = null     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x00a3|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r7.equals(java.math.BigInteger.ZERO) == false) goto L_0x00b6     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x00a5|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r0 = java.math.BigInteger.ZERO     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_19 [shape=record,label="{19\:\ 0x00a7|Catch:\{ IllegalStateException \-\> 0x005f \}\lPHI: r0 \l  PHI: (r0v46 java.math.BigInteger) = (r0v21 java.math.BigInteger), (r0v40 java.math.BigInteger), (r0v40 java.math.BigInteger), (r0v48 java.math.BigInteger) binds: [B:40:0x011b, B:28:0x00d3, B:30:0x00e1, B:18:0x00a5] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x00ac|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (true == r0.testBit(0)) goto L_0x00b5     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x00ae|Catch:\{ IllegalStateException \-\> 0x005f \}\l|r6.subtract(r0).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b5|RETURN\lCatch:\{ IllegalStateException \-\> 0x005f \}\l|return r5     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_23 [shape=record,label="{23\:\ 0x00b6|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_24 [shape=record,label="{24\:\ 0x00bb|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.testBit(0) == false) goto L_0x00eb     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_25 [shape=record,label="{25\:\ 0x00bd|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_26 [shape=record,label="{26\:\ 0x00c2|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.testBit(1) == false) goto L_0x00eb     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c4|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r0 = r7.modPow(r6.add(java.math.BigInteger.ONE).shiftRight(2), r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_28 [shape=record,label="{28\:\ 0x00d3|Catch:\{ IllegalStateException \-\> 0x005f \}\lPHI: r0 \l  PHI: (r0v40 java.math.BigInteger) = (r0v16 java.math.BigInteger), (r0v16 java.math.BigInteger), (r0v27 java.math.BigInteger), (r0v45 java.math.BigInteger) binds: [B:34:0x00f0, B:36:0x00f7, B:67:0x00d3, B:27:0x00c4] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L_0x00a7     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_29 [shape=record,label="{29\:\ 0x00d5|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_30 [shape=record,label="{30\:\ 0x00e1|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r0.multiply(r0).mod(r6).compareTo(r7) == 0) goto L_0x00a7     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_31 [shape=record,label="{31\:\ 0x00e3|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_32 [shape=record,label="{32\:\ 0x00ea|Catch:\{ IllegalStateException \-\> 0x005f \}\l|throw new java.security.GeneralSecurityException(\"Could not find a modular square root\")     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_33 [shape=record,label="{33\:\ 0x00eb|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_34 [shape=record,label="{34\:\ 0x00f0|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.testBit(0) == false) goto L_0x00d3     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_35 [shape=record,label="{35\:\ 0x00f2|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_36 [shape=record,label="{36\:\ 0x00f7|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.testBit(1) != false) goto L_0x00d3     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_37 [shape=record,label="{37\:\ 0x00f9|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r3 = java.math.BigInteger.ONE     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r2 = r6.subtract(java.math.BigInteger.ONE).shiftRight(1)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lr0 = 0     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_38 [shape=record,label="{38\:\ 0x0107|LOOP_START\lCatch:\{ IllegalStateException \-\> 0x005f \}\lPHI: r0 r3 \l  PHI: (r0v20 int) = (r0v19 int), (r0v38 int) binds: [B:37:0x00f9, B:60:0x0107] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v9 java.math.BigInteger) = (r3v8 java.math.BigInteger), (r3v10 java.math.BigInteger) binds: [B:37:0x00f9, B:60:0x0107] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:38:0x0107\-\>B:60:0x0107\l|java.math.BigInteger r8 = r3.multiply(r3).subtract(r7).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_39 [shape=record,label="{39\:\ 0x0119|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r8.equals(java.math.BigInteger.ZERO) == false) goto L_0x011d     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_40 [shape=record,label="{40\:\ 0x011b|Catch:\{ IllegalStateException \-\> 0x005f \}\l|r0 = r3     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_41 [shape=record,label="{41\:\ 0x011d|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r1 = r8.modPow(r2, r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_42 [shape=record,label="{42\:\ 0x012b|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r1.add(java.math.BigInteger.ONE).equals(r6) != false) goto L_0x0159     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_43 [shape=record,label="{43\:\ 0x012d|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_44 [shape=record,label="{44\:\ 0x0133|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r1.equals(java.math.BigInteger.ONE) != false) goto L_0x013d     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_45 [shape=record,label="{45\:\ 0x0135|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_46 [shape=record,label="{46\:\ 0x013c|Catch:\{ IllegalStateException \-\> 0x005f \}\l|throw new java.security.InvalidAlgorithmParameterException(\"p is not prime\")     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_47 [shape=record,label="{47\:\ 0x013d|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r3 = r3.add(java.math.BigInteger.ONE)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lint r0 = r0 + 1     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_48 [shape=record,label="{48\:\ 0x0147|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r0 != 128) goto L_0x0107     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_49 [shape=record,label="{49\:\ 0x0149|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_50 [shape=record,label="{50\:\ 0x014f|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r6.isProbablePrime(80) != false) goto L_0x0107     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_51 [shape=record,label="{51\:\ 0x0151|Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_52 [shape=record,label="{52\:\ 0x0158|Catch:\{ IllegalStateException \-\> 0x005f \}\l|throw new java.security.InvalidAlgorithmParameterException(\"p is not prime\")     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_53 [shape=record,label="{53\:\ 0x0159|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r9 = r6.add(java.math.BigInteger.ONE).shiftRight(1)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r1 = java.math.BigInteger.ONE     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lr4 = r9.bitLength() + \-2     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\lr0 = r3     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_54 [shape=record,label="{54\:\ 0x016e|LOOP_START\lCatch:\{ IllegalStateException \-\> 0x005f \}\lPHI: r0 r1 r4 \l  PHI: (r0v27 java.math.BigInteger) = (r0v26 java.math.BigInteger), (r0v33 java.math.BigInteger) binds: [B:53:0x0159, B:58:0x01b6] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v10 java.math.BigInteger) = (r1v9 java.math.BigInteger), (r1v17 java.math.BigInteger) binds: [B:53:0x0159, B:58:0x01b6] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v6 int) = (r4v5 int), (r4v7 int) binds: [B:53:0x0159, B:58:0x01b6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:54:0x016e\-\>B:58:0x01b6\l|if (r4 \< 0) goto L_0x00d3     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_55 [shape=record,label="{55\:\ 0x0170|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r10 = r0.multiply(r1)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r2 = r0.multiply(r0).add(r1.multiply(r1).mod(r6).multiply(r8)).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r0 = r10.add(r10).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_56 [shape=record,label="{56\:\ 0x0198|Catch:\{ IllegalStateException \-\> 0x005f \}\l|if (r9.testBit(r4) == false) goto L_0x01bd     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_57 [shape=record,label="{57\:\ 0x019a|Catch:\{ IllegalStateException \-\> 0x005f \}\l|java.math.BigInteger r1 = r2.multiply(r3).add(r0.multiply(r8)).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\ljava.math.BigInteger r0 = r3.multiply(r0).add(r2).mod(r6)     \/\/ Catch:\{ IllegalStateException \-\> 0x005f \}\l}"];
Node_58 [shape=record,label="{58\:\ 0x01b6|LOOP_END\lPHI: r0 r1 \l  PHI: (r0v32 java.math.BigInteger) = (r0v31 java.math.BigInteger), (r0v36 java.math.BigInteger) binds: [B:68:0x01b6, B:69:0x01b6] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v16 java.math.BigInteger) = (r1v15 java.math.BigInteger), (r1v20 java.math.BigInteger) binds: [B:68:0x01b6, B:69:0x01b6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:54:0x016e\-\>B:58:0x01b6\l|r4 = r4 + \-1\lr12 = r0\lr0 = r1\lr1 = r12\l}"];
Node_59 [shape=record,label="{59\:\ 0x01bd|r1 = r2\l}"];
Node_60 [shape=record,label="{60\:\ 0x0107|LOOP_END\lSYNTHETIC\lLOOP:0: B:38:0x0107\-\>B:60:0x0107\l}"];
Node_61 [shape=record,label="{61\:\ 0x0135|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x011b|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0159|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0151|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0107|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0107|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x00d3|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x01b6|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x01b6|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.gms.internal.ads.zzdkq.zza((r13v0 java.security.interfaces.ECPrivateKey A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 java.security.spec.ECPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_33;
Node_27 -> Node_28;
Node_28 -> Node_19;
Node_28 -> Node_29[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_19;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_34 -> Node_28;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_28;
Node_36 -> Node_37[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_62[style=dashed];
Node_40 -> Node_19;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_63;
Node_43 -> Node_44;
Node_44 -> Node_47;
Node_44 -> Node_61[style=dashed];
Node_45 -> Node_46;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_65;
Node_49 -> Node_50;
Node_50 -> Node_64[style=dashed];
Node_50 -> Node_66;
Node_51 -> Node_52;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_67;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_69;
Node_58 -> Node_54;
Node_59 -> Node_68;
Node_60 -> Node_38;
Node_61 -> Node_45;
Node_62 -> Node_40;
Node_63 -> Node_53;
Node_64 -> Node_51;
Node_65 -> Node_60;
Node_66 -> Node_60;
Node_67 -> Node_28;
Node_68 -> Node_58;
Node_69 -> Node_58;
}

