digraph "CFG forcom.google.android.gms.internal.ads.zzdjt.\<init\>([BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: ARRAY_LENGTH  (r0 I:int) = (r3 I:?[]) \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.security.InvalidKeyException) =  java.security.InvalidKeyException \l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"The key length in bytes must be 32.\" \l0x000c: INVOKE  \l  (r0 I:java.security.InvalidKeyException)\l  (r1 I:java.lang.String)\l java.security.InvalidKeyException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r0 I:int[]) = (r3 I:byte[]) com.google.android.gms.internal.ads.zzdjt.zzr(byte[]):int[] type: STATIC \l0x0014: IPUT  \l  (r0 I:int[])\l  (r2 I:com.google.android.gms.internal.ads.zzdjt)\l com.google.android.gms.internal.ads.zzdjt.zzgyf int[] \l0x0016: IPUT  \l  (r4 I:int)\l  (r2 I:com.google.android.gms.internal.ads.zzdjt)\l com.google.android.gms.internal.ads.zzdjt.zzgyg int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{void com.google.android.gms.internal.ads.zzdjt.\<init\>((r2 'this' I:com.google.android.gms.internal.ads.zzdjt A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.InvalidKeyException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

