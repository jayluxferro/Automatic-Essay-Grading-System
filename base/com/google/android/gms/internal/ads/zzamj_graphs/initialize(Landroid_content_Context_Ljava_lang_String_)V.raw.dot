digraph "CFG forcom.google.android.gms.internal.ads.zzamj.initialize(Landroid\/content\/Context;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicBoolean) =  com.google.android.gms.internal.ads.zzamj.zzdef java.util.concurrent.atomic.AtomicBoolean \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r1 I:boolean)\l  (r2 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.Thread) =  java.lang.Thread \l0x000d: NEW_INSTANCE  (r1 I:com.google.android.gms.internal.ads.zzamk) =  com.google.android.gms.internal.ads.zzamk \l0x000f: INVOKE  \l  (r1 I:com.google.android.gms.internal.ads.zzamk)\l  (r3 I:android.content.Context)\l  (r4 I:java.lang.String)\l com.google.android.gms.internal.ads.zzamk.\<init\>(android.content.Context, java.lang.String):void type: DIRECT \l0x0012: INVOKE  (r0 I:java.lang.Thread), (r1 I:java.lang.Runnable) java.lang.Thread.\<init\>(java.lang.Runnable):void type: DIRECT \l0x0015: INVOKE  (r0 I:java.lang.Thread) java.lang.Thread.start():void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.internal.ads.zzamj.initialize((r3 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_2;
}

