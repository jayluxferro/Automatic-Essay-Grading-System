digraph "CFG forcom.google.android.gms.internal.ads.zzan.zza(Lcom\/google\/android\/gms\/internal\/ads\/zzap;J)[B" {
subgraph cluster_Region_1059630485 {
label = "R(2:0|(2:(1:7)|(2:8|9)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r0 = r5.zzo()\l}"];
subgraph cluster_Region_495567842 {
label = "R(2:(1:7)|(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_466042909 {
label = "IF [B:1:0x0008, B:3:0x000c, B:5:0x0012] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r6 \< 0) goto L_0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|ADDED_TO_REGION\l|if (r6 \> r0) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ADDED_TO_REGION\l|if (((long) ((int) r6)) != r6) goto L_0x0014\l}"];
subgraph cluster_Region_93584109 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0038|throw new java.io.IOException(new java.lang.StringBuilder(73).append(\"streamToBytes length=\").append(r6).append(\", maxLength=\").append(r0).toString())\l}"];
}
}
subgraph cluster_Region_1479866012 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0039|byte[] byte[] r0 = new byte[((int) r6)]\lnew java.io.DataInputStream(r5).readFully(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|RETURN\l|return r0\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0014}"];
MethodNode[shape=record,label="{private static byte[] com.google.android.gms.internal.ads.zzan.zza((r5v0 com.google.android.gms.internal.ads.zzap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{\}], Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

