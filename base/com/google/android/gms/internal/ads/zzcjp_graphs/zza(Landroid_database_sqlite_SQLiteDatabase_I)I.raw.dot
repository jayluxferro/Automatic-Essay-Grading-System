digraph "CFG forcom.google.android.gms.internal.ads.zzcjp.zza(Landroid\/database\/sqlite\/SQLiteDatabase;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: NEW_ARRAY  (r2 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"total\" \l0x0007: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x0009: CONST_STR  (r3 I:java.lang.String) =  \"statistic_name = ?\" \l0x000b: NEW_ARRAY  (r4 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: SWITCH  \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2] t:[0x0032, 0x0037] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST_STR  (r1 I:java.lang.String) =  \"offline_signal_statistics\" \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0013: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0014: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:android.database.Cursor) = \l  (r0 I:android.database.sqlite.SQLiteDatabase)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String[])\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String[])\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.String)\l android.database.sqlite.SQLiteDatabase.query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String):android.database.Cursor type: VIRTUAL \l0x0019: INVOKE  (r0 I:int) = (r1 I:android.database.Cursor) android.database.Cursor.getCount():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x003c \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: INVOKE  (r1 I:android.database.Cursor) android.database.Cursor.moveToNext():boolean type: INTERFACE \l0x0022: CONST_STR  (r0 I:java.lang.String) =  \"total\" \l0x0024: INVOKE  (r0 I:int) = (r1 I:android.database.Cursor), (r0 I:java.lang.String) android.database.Cursor.getColumnIndexOrThrow(java.lang.String):int type: INTERFACE \l0x0028: INVOKE  (r0 I:int) = (r1 I:android.database.Cursor), (r0 I:int) android.database.Cursor.getInt(int):int type: INTERFACE \l0x002c: ARITH  (r0 I:int) = (r0 I:int) + (0 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: INVOKE  (r1 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: RETURN  (r0 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CONST_STR  (r0 I:java.lang.String) =  \"failed_requests\" \l0x0034: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: CONST_STR  (r0 I:java.lang.String) =  \"total_requests\" \l0x0039: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static int com.google.android.gms.internal.ads.zzcjp.zza((r9 I:android.database.sqlite.SQLiteDatabase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_2;
Node_8 -> Node_2;
Node_9 -> Node_5;
}

