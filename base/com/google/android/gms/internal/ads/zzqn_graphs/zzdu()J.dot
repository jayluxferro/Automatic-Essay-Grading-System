digraph "CFG forcom.google.android.gms.internal.ads.zzqn.zzdu()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.gms.internal.ads.zzqj[] r5 = r12.zzbjg\lint r8 = r5.length\lr4 = 0\lr0 = Long.MAX_VALUE\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r0 r4 \l  PHI: (r0v2 long) = (r0v1 long), (r0v4 long) binds: [B:0:0x0000, B:5:0x001d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v3 int) binds: [B:0:0x0000, B:5:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x001d\l|if (r4 \>= r8) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|long r10 = r5[r4].zzdu()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if ((r10 \> Long.MIN_VALUE ? 1 : (r10 == Long.MIN_VALUE ? 0 : \-1)) == 0) goto L_0x001d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|long r0 = java.lang.Math.min(r0, r10)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|LOOP_END\lPHI: r0 \l  PHI: (r0v4 long) = (r0v2 long), (r0v5 long) binds: [B:11:0x001d, B:10:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x001d\l|int r4 = r4 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if ((r0 \> Long.MAX_VALUE ? 1 : (r0 == Long.MAX_VALUE ? 0 : \-1)) != 0) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024}"];
Node_9 [shape=record,label="{9\:\ 0x0020|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return Long.MIN_VALUE\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public final long com.google.android.gms.internal.ads.zzqn.zzdu((r12v0 'this' com.google.android.gms.internal.ads.zzqn A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_10;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_12;
Node_9 -> Node_6;
Node_10 -> Node_5;
Node_11 -> Node_5;
}

