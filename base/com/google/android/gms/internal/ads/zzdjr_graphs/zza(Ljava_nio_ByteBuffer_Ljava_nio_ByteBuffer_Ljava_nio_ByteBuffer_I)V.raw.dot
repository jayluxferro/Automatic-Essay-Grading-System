digraph "CFG forcom.google.android.gms.internal.ads.zzdjr.zza(Ljava\/nio\/ByteBuffer;Ljava\/nio\/ByteBuffer;Ljava\/nio\/ByteBuffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.remaining():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.remaining():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.remaining():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"That combination of buffers, offsets and length to xor result in out\-of\-bond accesses.\" \l0x0018: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  (r1 I:byte) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.get():byte type: VIRTUAL \l0x0023: INVOKE  (r2 I:byte) = (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.get():byte type: VIRTUAL \l0x0027: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l0x0028: CAST  (r1 I:byte) = (byte) (r1 I:int) \l0x0029: INVOKE  (r3 I:java.nio.ByteBuffer), (r1 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x002c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public static final void com.google.android.gms.internal.ads.zzdjr.zza((r3 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_10;
}

