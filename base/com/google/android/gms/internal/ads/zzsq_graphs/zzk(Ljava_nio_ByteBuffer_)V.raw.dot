digraph "CFG forcom.google.android.gms.internal.ads.zzsq.zzk(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r3 I:int) = (r7 I:java.nio.ByteBuffer) java.nio.ByteBuffer.position():int type: VIRTUAL \l0x0005: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:16:0x003f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r4 I:byte) = (r7 I:java.nio.ByteBuffer), (r2 I:int) java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x000f: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0011: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: ARITH  (r5 I:int) = (r2 I:int) + (1 int) \l0x0019: INVOKE  (r5 I:byte) = (r7 I:java.nio.ByteBuffer), (r5 I:int) java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x001d: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (31 ?[int, float, short, byte, char]) \l0x001f: CONST  (r6 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r0 I:java.nio.ByteBuffer) = (r7 I:java.nio.ByteBuffer) java.nio.ByteBuffer.duplicate():java.nio.ByteBuffer type: VIRTUAL \l0x0026: ARITH  (r2 I:int) = (r2 I:int) + (\-3 int) \l0x0028: INVOKE  (r0 I:java.nio.ByteBuffer), (r2 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x002b: INVOKE  (r0 I:java.nio.ByteBuffer), (r3 I:int) java.nio.ByteBuffer.limit(int):java.nio.Buffer type: VIRTUAL \l0x002e: INVOKE  (r7 I:java.nio.ByteBuffer), (r1 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0031: INVOKE  (r7 I:java.nio.ByteBuffer), (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.put(java.nio.ByteBuffer):java.nio.ByteBuffer type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: INVOKE  (r7 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public static void com.google.android.gms.internal.ads.zzsq.zzk((r7 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_10;
}

