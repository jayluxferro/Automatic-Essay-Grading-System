digraph "CFG forcom.google.android.gms.internal.ads.zzsy.zza([JJZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = java.util.Arrays.binarySearch(r5, r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 \>= 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|int r0 = \-(r0 + 2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|PHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v7 int) binds: [B:9:0x001b, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 == false) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0011|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:1:0x0004, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0011\-\>B:8:0x0019\l|int r0 = r0 + \-1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r0 \< 0) goto L_0x001b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_END\lLOOP:0: B:5:0x0011\-\>B:8:0x0019\l|if ((r5[r0] \> r6 ? 1 : (r5[r0] == r6 ? 0 : \-1)) == 0) goto L_0x0011\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|int r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.lang.Math.max(0, r0)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public static int com.google.android.gms.internal.ads.zzsy.zza((r5v0 long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_11[style=dashed];
Node_9 -> Node_3;
Node_10 -> Node_9;
Node_11 -> Node_9;
}

