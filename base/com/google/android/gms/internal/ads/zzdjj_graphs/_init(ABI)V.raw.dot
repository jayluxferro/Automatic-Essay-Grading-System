digraph "CFG forcom.google.android.gms.internal.ads.zzdjj.\<init\>([BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"IV size should be either 12 or 16 bytes\" \l0x000f: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IPUT  \l  (r6 I:int)\l  (r4 I:com.google.android.gms.internal.ads.zzdjj)\l com.google.android.gms.internal.ads.zzdjj.zzgxs int \l0x0015: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0016: INVOKE  (r0 I:int) com.google.android.gms.internal.ads.zzdlw.zzfg(int):void type: STATIC \l0x0019: NEW_INSTANCE  (r0 I:javax.crypto.spec.SecretKeySpec) =  javax.crypto.spec.SecretKeySpec \l0x001b: CONST_STR  (r1 I:java.lang.String) =  \"AES\" \l0x001d: INVOKE  \l  (r0 I:javax.crypto.spec.SecretKeySpec)\l  (r5 I:byte[])\l  (r1 I:java.lang.String)\l javax.crypto.spec.SecretKeySpec.\<init\>(byte[], java.lang.String):void type: DIRECT \l0x0020: IPUT  \l  (r0 I:javax.crypto.spec.SecretKeySpec)\l  (r4 I:com.google.android.gms.internal.ads.zzdjj)\l com.google.android.gms.internal.ads.zzdjj.zzgxn javax.crypto.spec.SecretKeySpec \l0x0022: CONST_STR  (r0 I:java.lang.String) =  \"AES\/ECB\/NOPADDING\" \l0x0024: INVOKE  (r0 I:javax.crypto.Cipher) = (r0 I:java.lang.String) javax.crypto.Cipher.getInstance(java.lang.String):javax.crypto.Cipher type: STATIC \l0x0028: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0029: IGET  (r2 I:javax.crypto.spec.SecretKeySpec) = (r4 I:com.google.android.gms.internal.ads.zzdjj) com.google.android.gms.internal.ads.zzdjj.zzgxn javax.crypto.spec.SecretKeySpec \l0x002b: INVOKE  \l  (r0 I:javax.crypto.Cipher)\l  (r1 I:int)\l  (r2 I:java.security.Key)\l javax.crypto.Cipher.init(int, java.security.Key):void type: VIRTUAL \l0x002e: NEW_ARRAY  (r1 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0030: INVOKE  (r0 I:byte[]) = (r0 I:javax.crypto.Cipher), (r1 I:byte[]) javax.crypto.Cipher.doFinal(byte[]):byte[] type: VIRTUAL \l0x0034: INVOKE  (r0 I:byte[]) = (r0 I:byte[]) com.google.android.gms.internal.ads.zzdjj.zzp(byte[]):byte[] type: STATIC \l0x0038: IPUT  \l  (r0 I:byte[])\l  (r4 I:com.google.android.gms.internal.ads.zzdjj)\l com.google.android.gms.internal.ads.zzdjj.zzgxq byte[] \l0x003a: IGET  (r0 I:byte[]) = (r4 I:com.google.android.gms.internal.ads.zzdjj) com.google.android.gms.internal.ads.zzdjj.zzgxq byte[] \l0x003c: INVOKE  (r0 I:byte[]) = (r0 I:byte[]) com.google.android.gms.internal.ads.zzdjj.zzp(byte[]):byte[] type: STATIC \l0x0040: IPUT  \l  (r0 I:byte[])\l  (r4 I:com.google.android.gms.internal.ads.zzdjj)\l com.google.android.gms.internal.ads.zzdjj.zzgxr byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0042|0x0042: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.gms.internal.ads.zzdjj.\<init\>((r4 'this' I:com.google.android.gms.internal.ads.zzdjj A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

