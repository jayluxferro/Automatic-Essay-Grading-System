digraph "CFG forcom.google.android.gms.internal.ads.zzdjj.zzp([B)[B" {
subgraph cluster_Region_1080698493 {
label = "R(6:0|(1:2)|3|(1:7)|5|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\lbyte[] byte[] r2 = new byte[16]\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_806145993 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v5 int) binds: [B:0:0x0000, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|if (r1 \< 15) goto L_0x000a\l}"];
subgraph cluster_Region_269065592 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:2:0x000a\l|r2[r1] = (byte) ((r6[r1] \<\< 1) ^ ((r6[r1 + 1] & 255) \>\>\> 7))\lr1++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x001d|int int r1 = r6[15] \<\< 1\l}"];
subgraph cluster_IfRegion_552202297 {
label = "IF [B:4:0x0025] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0025|if ((r6[0] & 128) != 0) goto L_0x002c\l}"];
subgraph cluster_Region_492864071 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002c|r0 = com.google.android.exoplayer2.extractor.p046ts.TsExtractor.TS_STREAM_TYPE_E_AC3\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0027|PHI: r0 \l  PHI: (r0v2 int) = (r0v0 int), (r0v1 int) binds: [B:4:0x0025, B:7:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|r2[15] = (byte) (r0 ^ r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|RETURN\l|return r2\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static byte[] com.google.android.gms.internal.ads.zzdjj.zzp((r6v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_5;
Node_5 -> Node_6;
Node_8 -> Node_3;
}

