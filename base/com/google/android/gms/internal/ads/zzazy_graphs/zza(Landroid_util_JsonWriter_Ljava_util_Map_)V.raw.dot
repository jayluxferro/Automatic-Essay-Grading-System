digraph "CFG forcom.google.android.gms.internal.ads.zzazy.zza(Landroid\/util\/JsonWriter;Ljava\/util\/Map;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST_STR  (r0 I:java.lang.String) =  \"headers\" \l0x0005: INVOKE  (r0 I:android.util.JsonWriter) = (r5 I:android.util.JsonWriter), (r0 I:java.lang.String) android.util.JsonWriter.name(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0009: INVOKE  (r0 I:android.util.JsonWriter) android.util.JsonWriter.beginArray():android.util.JsonWriter type: VIRTUAL \l0x000c: INVOKE  (r0 I:java.util.Set) = (r6 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0010: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0091 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r0 I:java.util.Map$Entry) = (java.util.Map$Entry) (r0 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0024: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x0026: SGET  (r3 I:java.util.Set\<java.lang.String\>) =  com.google.android.gms.internal.ads.zzazy.zzdyy java.util.Set \l0x0028: INVOKE  (r3 I:boolean) = (r3 I:java.util.Set), (r1 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0032: INSTANCE_OF  (r3 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.util.List \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0065 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x003a: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l0x003c: INVOKE  (r3 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: INVOKE  (r0 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x004a: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x004c: INVOKE  (r5 I:android.util.JsonWriter) android.util.JsonWriter.beginObject():android.util.JsonWriter type: VIRTUAL \l0x004f: CONST_STR  (r4 I:java.lang.String) =  \"name\" \l0x0051: INVOKE  (r4 I:android.util.JsonWriter) = (r5 I:android.util.JsonWriter), (r4 I:java.lang.String) android.util.JsonWriter.name(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0055: INVOKE  (r4 I:android.util.JsonWriter), (r1 I:java.lang.String) android.util.JsonWriter.value(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0058: CONST_STR  (r4 I:java.lang.String) =  \"value\" \l0x005a: INVOKE  (r4 I:android.util.JsonWriter) = (r5 I:android.util.JsonWriter), (r4 I:java.lang.String) android.util.JsonWriter.name(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x005e: INVOKE  (r4 I:android.util.JsonWriter), (r0 I:java.lang.String) android.util.JsonWriter.value(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0061: INVOKE  (r5 I:android.util.JsonWriter) android.util.JsonWriter.endObject():android.util.JsonWriter type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0065|0x0065: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0069: INSTANCE_OF  (r3 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x008c \l}"];
Node_15 [shape=record,label="{15\:\ 0x006d|0x006d: INVOKE  (r5 I:android.util.JsonWriter) android.util.JsonWriter.beginObject():android.util.JsonWriter type: VIRTUAL \l0x0070: CONST_STR  (r3 I:java.lang.String) =  \"name\" \l0x0072: INVOKE  (r3 I:android.util.JsonWriter) = (r5 I:android.util.JsonWriter), (r3 I:java.lang.String) android.util.JsonWriter.name(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0076: INVOKE  (r3 I:android.util.JsonWriter), (r1 I:java.lang.String) android.util.JsonWriter.value(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0079: CONST_STR  (r1 I:java.lang.String) =  \"value\" \l0x007b: INVOKE  (r1 I:android.util.JsonWriter) = (r5 I:android.util.JsonWriter), (r1 I:java.lang.String) android.util.JsonWriter.name(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x007f: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0083: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x0085: INVOKE  (r1 I:android.util.JsonWriter), (r0 I:java.lang.String) android.util.JsonWriter.value(java.lang.String):android.util.JsonWriter type: VIRTUAL \l0x0088: INVOKE  (r5 I:android.util.JsonWriter) android.util.JsonWriter.endObject():android.util.JsonWriter type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x008c|0x008c: CONST_STR  (r0 I:java.lang.String) =  \"Connection headers should be either Map\<String, String\> or Map\<String, List\<String\>\>\" \l0x008e: INVOKE  (r0 I:java.lang.String) com.google.android.gms.internal.ads.zzbae.zzen(java.lang.String):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0091|0x0091: INVOKE  (r5 I:android.util.JsonWriter) android.util.JsonWriter.endArray():android.util.JsonWriter type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static void com.google.android.gms.internal.ads.zzazy.zza((r5 I:android.util.JsonWriter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.Map\<java.lang.String, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, android.support.annotation.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/util\/JsonWriter;, Ljava\/util\/Map, \<, Ljava\/lang\/String;, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_3;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_3;
Node_16 -> Node_17;
Node_17 -> Node_1;
}

