digraph "CFG forcom.google.android.gms.internal.ads.zzdjl.zzc([B[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r8.length \<= 2147483619) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x0011|throw new java.security.GeneralSecurityException(\"plaintext too long\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|byte[] r4 = new byte[((r8.length + 12) + 16)]\lbyte[] r1 = com.google.android.gms.internal.ads.zzdln.zzff(12)\ljava.lang.System.arraycopy(r1, 0, r4, 0, 12)\ljavax.crypto.Cipher r0 = com.google.android.gms.internal.ads.zzdkw.zzhap.zzgt(\"AES\/GCM\/NoPadding\")\ljava.security.spec.AlgorithmParameterSpec r1 = zzf(r1, 0, r1.length)\lr0.init(1, r7.zzgxc, r1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|if (r9 == null) goto L_0x003c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0036}"];
Node_7 [shape=record,label="{7\:\ 0x0037|if (r9.length == 0) goto L_0x003c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|r0.updateAAD(r9)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|r1 = r8\lint r0 = r0.doFinal(r1, 0, r8.length, r4, 12)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|if (r0 == (r8.length + 16)) goto L_0x0066\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|java.lang.Object[] r4 = new java.lang.Object[]\{16, java.lang.Integer.valueOf(r0 \- r8.length)\}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|throw new java.security.GeneralSecurityException(java.lang.String.format(\"encryption failed; GCM tag must be %s bytes, but got only %s bytes\", r4))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0066|RETURN\l|return r4\l}"];
MethodNode[shape=record,label="{public final byte[] com.google.android.gms.internal.ads.zzdjl.zzc((r7v0 'this' com.google.android.gms.internal.ads.zzdjl A[IMMUTABLE_TYPE, THIS]), (r8v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.security.GeneralSecurityException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
}

