digraph "CFG forcom.google.android.gms.internal.ads.zzdnh.zze.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 == null) goto L_0x0014\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r10 \< 0) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r11 \< 0) goto L_0x0014\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if ((r9.length \- r11) \< r10) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (((r8.zzhdu \- ((long) r11)) \> r8.zzahv ? 1 : ((r8.zzhdu \- ((long) r11)) == r8.zzahv ? 0 : \-1)) \>= 0) goto L_0x0046\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if (r9 != null) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001d|throw new java.lang.NullPointerException(com.google.android.gms.measurement.api.AppMeasurementSdk.ConditionalUserProperty.VALUE)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|java.lang.Object[] r2 = new java.lang.Object[]\{java.lang.Long.valueOf(r8.zzahv), java.lang.Long.valueOf(r8.zzhdu), java.lang.Integer.valueOf(r11)\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|throw new com.google.android.gms.internal.ads.zzdnh.zzc(java.lang.String.format(\"Pos: %d, limit: %d, len: %d\", r2))\l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|r1 = r9\lcom.google.android.gms.internal.ads.zzdqy.zza(r1, (long) r10, r8.zzahv, (long) r11)\lr8.zzahv = r8.zzahv + ((long) r11)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.internal.ads.zzdnh.zze.write((r8v0 'this' com.google.android.gms.internal.ads.zzdnh$zze A[IMMUTABLE_TYPE, THIS]), (r9v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

