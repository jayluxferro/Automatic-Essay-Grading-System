digraph "CFG forcom.google.android.gms.internal.ads.zzib.zzr(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r6\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v6 int) binds: [B:0:0x0000, B:10:0x0028] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:10:0x0028\l|if (r0 \<= 0) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (java.lang.Thread.interrupted() == false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x000e|throw new java.lang.InterruptedException()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|int r1 = r5.zzahu.read(zzaht, 0, java.lang.Math.min(zzaht.length, r0))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if (r1 != \-1) goto L_0x0028\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022}"];
Node_9 [shape=record,label="{9\:\ 0x0027|throw new java.io.EOFException()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:10:0x0028\l|int r0 = r0 \- r1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|r5.zzahv = r5.zzahv + ((long) r6)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.internal.ads.zzib.zzr((r5v0 'this' com.google.android.gms.internal.ads.zzib A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_6;
Node_3 -> Node_15[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_7 -> Node_13[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_13 -> Node_8;
Node_14 -> Node_11;
Node_15 -> Node_4;
}

