digraph "CFG forcom.google.android.gms.internal.ads.zzaxj.zza(Ljava\/io\/InputStreamReader;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l0x0004: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2048(0x800, float:2.87E\-42) ?[int, float, short, byte, char])\l \l0x0009: NEW_ARRAY  (r1 I:char[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: char[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: INVOKE  (r2 I:int) = (r4 I:java.io.InputStreamReader), (r1 I:char[]) java.io.InputStreamReader.read(char[]):int type: VIRTUAL \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r1 I:char[])\l  (r3 I:int)\l  (r2 I:int)\l java.lang.StringBuilder.append(char[], int, int):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.gms.internal.ads.zzaxj.zza((r4 I:java.io.InputStreamReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

