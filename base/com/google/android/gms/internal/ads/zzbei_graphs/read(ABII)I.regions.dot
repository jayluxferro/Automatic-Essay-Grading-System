digraph "CFG forcom.google.android.gms.internal.ads.zzbei.read([BII)I" {
subgraph cluster_Region_1407622331 {
label = "R(1:(1:3)(1:(1:8)(1:9)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_258484843 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: R(1:(1:8)(1:9))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.isOpen == false) goto L_0x0004\l}"];
subgraph cluster_Region_1740504069 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|throw new java.io.IOException(\"Attempt to read closed CacheDataSource.\")\l}"];
}
subgraph cluster_Region_73366957 {
label = "R(1:(1:8)(1:9)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1664826073 {
label = "IF [B:5:0x000e] THEN: R(1:8) ELSE: R(1:9) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r2.zzege != null) goto L_0x0010\l}"];
subgraph cluster_Region_768507815 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2.zzege.read(r3, r4, r5)\l}"];
}
subgraph cluster_Region_622584783 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r2.zzegf.read(r3, r4, r5)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017}"];
MethodNode[shape=record,label="{public final int com.google.android.gms.internal.ads.zzbei.read((r2v0 'this' com.google.android.gms.internal.ads.zzbei A[IMMUTABLE_TYPE, THIS]), (r3v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_9;
}

