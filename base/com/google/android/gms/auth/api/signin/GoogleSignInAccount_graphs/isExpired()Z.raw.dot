digraph "CFG forcom.google.android.gms.auth.api.signin.GoogleSignInAccount.isExpired()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.google.android.gms.common.util.Clock) =  com.google.android.gms.auth.api.signin.GoogleSignInAccount.zae com.google.android.gms.common.util.Clock \l0x0002: INVOKE  (r0 I:long) = (r0 I:com.google.android.gms.common.util.Clock) com.google.android.gms.common.util.Clock.currentTimeMillis():long type: INTERFACE \l0x0006: CONST  (r2 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0008: ARITH  (r0 I:long) = (r0 I:long) \/ (r2 I:long) \l0x0009: IGET  (r2 I:long) = \l  (r6 I:com.google.android.gms.auth.api.signin.GoogleSignInAccount)\l com.google.android.gms.auth.api.signin.GoogleSignInAccount.zak long \l0x000b: CONST  (r4 I:?[long, double]) = (300(0x12c, double:1.48E\-321) ?[long, double]) \l0x000d: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x000e: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.gms.auth.api.signin.GoogleSignInAccount.isExpired((r6 'this' I:com.google.android.gms.auth.api.signin.GoogleSignInAccount A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

