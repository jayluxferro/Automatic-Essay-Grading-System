digraph "CFG forcom.google.android.gms.auth.api.signin.internal.Storage.clear()V" {
subgraph cluster_Region_1649493289 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.zaal.lock()\l}"];
subgraph cluster_TryCatchRegion_750047124 {
label = "Try: R(1:2) finally: R(3:5|6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_1057562924 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0018 \}\lSplitter:B:1:0x0005\l|r2.zaam.edit().clear().apply()     \/\/ Catch:\{ all \-\> 0x0018 \}\l}"];
}
subgraph cluster_Region_1894275541 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|FINALLY_INSNS\l|r2.zaal.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|throw r0\l}"];
}
}
}
subgraph cluster_Region_1894275541 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|FINALLY_INSNS\l|r2.zaal.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|throw r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0012|DONT_GENERATE\l|java.util.concurrent.locks.Lock r0 = r2.zaal\lr0.unlock()\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0017}"];
MethodNode[shape=record,label="{public void com.google.android.gms.auth.api.signin.internal.Storage.clear((r2v0 'this' com.google.android.gms.auth.api.signin.internal.Storage A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, com.google.android.gms.common.annotation.KeepForSdk, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_3 -> Node_4;
}

