digraph "CFG forcom.google.android.gms.ads.doubleclick.PublisherAdView.setAdSizes([Lcom\/google\/android\/gms\/ads\/AdSize;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r3 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"The supported ad sizes must contain at least one valid ad size.\" \l0x0009: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r0 I:com.google.android.gms.internal.ads.zzaaz) = \l  (r2 I:com.google.android.gms.ads.doubleclick.PublisherAdView)\l com.google.android.gms.ads.doubleclick.PublisherAdView.zzabf com.google.android.gms.internal.ads.zzaaz \l0x000f: INVOKE  \l  (r0 I:com.google.android.gms.internal.ads.zzaaz)\l  (r3 I:com.google.android.gms.ads.AdSize[])\l com.google.android.gms.internal.ads.zzaaz.zza(com.google.android.gms.ads.AdSize[]):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{public final void com.google.android.gms.ads.doubleclick.PublisherAdView.setAdSizes((r2 'this' I:com.google.android.gms.ads.doubleclick.PublisherAdView A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.gms.ads.AdSize[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

