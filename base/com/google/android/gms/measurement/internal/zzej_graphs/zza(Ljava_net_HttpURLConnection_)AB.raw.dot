digraph "CFG forcom.google.android.gms.measurement.internal.zzej.zza(Ljava\/net\/HttpURLConnection;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r1 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0025 \}]\l0x0006: INVOKE  (r5 I:java.io.InputStream) = (r5 I:java.net.HttpURLConnection) java.net.HttpURLConnection.getInputStream():java.io.InputStream type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l0x0009: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|SYNTHETIC\lSplitter:B:4:0x000c\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000c\l|0x000c: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r2 I:int) = (r5 I:java.io.InputStream), (r0 I:byte[]) java.io.InputStream.read(byte[]):int type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0019 A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0023 \}]\l0x0015: INVOKE  \l  (r1 I:java.io.ByteArrayOutputStream)\l  (r0 I:byte[])\l  (r3 I:int)\l  (r2 I:int)\l java.io.ByteArrayOutputStream.write(byte[], int, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l0x0018: GOTO  \-\> 0x000e A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: INVOKE  (r0 I:byte[]) = (r1 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l0x001c: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  (r5 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: RETURN  (r0 I:byte[]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|ExcHandler: all null\lSplitter:B:4:0x000c\l|0x0023: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0025: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: INVOKE  (r5 I:java.io.InputStream) java.io.InputStream.close():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static byte[] com.google.android.gms.measurement.internal.zzej.zza((r5 I:java.net.HttpURLConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}], Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

