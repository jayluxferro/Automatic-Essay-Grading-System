digraph "CFG forcom.google.android.gms.measurement.internal.zzjs.zzb(Ljava\/lang\/Object;)[Landroid\/os\/Bundle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) android.os.Bundle \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: NEW_ARRAY  (r0 I:android.os.Bundle[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: android.os.Bundle[] \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CHECK_CAST  (r2 I:android.os.Bundle) = (android.os.Bundle) (r2 I:?[OBJECT, ARRAY]) \l0x000a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r0 I:android.os.Bundle[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) android.os.Parcelable[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CHECK_CAST  (r2 I:android.os.Parcelable[]) = (android.os.Parcelable[]) (r2 I:?[OBJECT, ARRAY]) \l0x0013: ARRAY_LENGTH  (r0 I:int) = (r2 I:?[]) \l0x0014: CONST_CLASS  (r1 I:java.lang.Class\<android.os.Bundle[]\>) =  android.os.Bundle[].class \l0x0016: INVOKE  (r2 I:java.lang.Object[]) = \l  (r2 I:java.lang.Object[])\l  (r0 I:int)\l  (r1 I:java.lang.Class)\l java.util.Arrays.copyOf(java.lang.Object[], int, java.lang.Class):java.lang.Object[] type: STATIC \l0x001a: CHECK_CAST  (r2 I:android.os.Bundle[]) = (android.os.Bundle[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r2 I:android.os.Bundle[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.ArrayList \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: CHECK_CAST  (r2 I:java.util.ArrayList) = (java.util.ArrayList) (r2 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r0 I:int) = (r2 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0027: NEW_ARRAY  (r0 I:android.os.Bundle[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: android.os.Bundle[] \l0x0029: INVOKE  (r2 I:java.lang.Object[]) = (r2 I:java.util.ArrayList), (r0 I:java.lang.Object[]) java.util.ArrayList.toArray(java.lang.Object[]):java.lang.Object[] type: VIRTUAL \l0x002d: CHECK_CAST  (r2 I:android.os.Bundle[]) = (android.os.Bundle[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN  (r2 I:android.os.Bundle[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r2 I:android.os.Bundle[]) \l}"];
MethodNode[shape=record,label="{static android.os.Bundle[] com.google.android.gms.measurement.internal.zzjs.zzb((r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

