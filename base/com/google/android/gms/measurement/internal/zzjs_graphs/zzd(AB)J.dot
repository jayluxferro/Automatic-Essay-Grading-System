digraph "CFG forcom.google.android.gms.measurement.internal.zzjs.zzd([B)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.gms.common.internal.Preconditions.checkNotNull(r9)\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r9.length \<= 0) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v6 boolean), (r0v7 boolean) binds: [B:3:0x000a, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.gms.common.internal.Preconditions.checkState(r0)\lr3 = 0\lint r0 = r9.length \- 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_START\lPHI: r0 r1 r3 \l  PHI: (r0v4 int) = (r0v3 int), (r0v5 int) binds: [B:4:0x000b, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:4:0x000b, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 long) = (r3v0 long), (r3v2 long) binds: [B:4:0x000b, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0012\-\>B:8:0x0019\l|if (r0 \< 0) goto L_0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if (r0 \< (r9.length + \-8)) goto L_0x0026\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_END\lLOOP:0: B:5:0x0012\-\>B:8:0x0019\l|long r3 = r3 + ((((long) r9[r0]) & 255) \<\< r1)\lint r1 = r1 + 8\lint r0 = r0 + \-1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|RETURN\l|return r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static long com.google.android.gms.measurement.internal.zzjs.zzd((r9v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, com.google.android.gms.common.util.VisibleForTesting, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_5;
Node_10 -> Node_9;
Node_11 -> Node_9;
}

