digraph "CFG forcom.google.android.gms.measurement.internal.AppMeasurementDynamiteService.onActivitySaveInstanceState(Lcom\/google\/android\/gms\/dynamic\/IObjectWrapper;Lcom\/google\/android\/gms\/internal\/measurement\/zzp;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|zzbi()\lcom.google.android.gms.measurement.internal.zzhj r4 = r1.zzj.zzq().zzpu\landroid.os.Bundle r5 = new android.os.Bundle()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r4 == null) goto L_0x0024\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|r1.zzj.zzq().zzif()\lr4.onActivitySaveInstanceState((android.app.Activity) com.google.android.gms.dynamic.ObjectWrapper.unwrap(r2), r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|SYNTHETIC\lSplitter:B:3:0x0024\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ RemoteException \-\> 0x0028 \}\lSplitter:B:3:0x0024\l|r3.zzb(r5)     \/\/ Catch:\{ RemoteException \-\> 0x0028 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|ExcHandler: RemoteException (r2v1 'e' android.os.RemoteException A[CUSTOM_DECLARE])\lSplitter:B:3:0x0024\l|android.os.RemoteException r2 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|r1.zzj.zzab().zzgn().zza(\"Error returning bundle value to wrapper\", r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.gms.measurement.internal.AppMeasurementDynamiteService.onActivitySaveInstanceState((r1v0 'this' com.google.android.gms.measurement.internal.AppMeasurementDynamiteService A[IMMUTABLE_TYPE, THIS]), (r2v0 com.google.android.gms.dynamic.IObjectWrapper A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.google.android.gms.internal.measurement.zzp A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[android.os.RemoteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

