digraph "CFG forcom.google.android.gms.measurement.internal.zzjo.zza(Ljava\/util\/List;Ljava\/util\/List;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList), (r8 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x0005: INVOKE  (r8 I:java.util.Iterator) = (r9 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r9 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0068 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r9 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0013: CHECK_CAST  (r9 I:java.lang.Integer) = (java.lang.Integer) (r9 I:?[OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:int) = (r9 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r1 I:com.google.android.gms.measurement.internal.zzef) = (r7 I:com.google.android.gms.measurement.internal.zzgf) com.google.android.gms.measurement.internal.zzgf.zzab():com.google.android.gms.measurement.internal.zzef type: VIRTUAL \l0x001f: INVOKE  (r1 I:com.google.android.gms.measurement.internal.zzeh) = (r1 I:com.google.android.gms.measurement.internal.zzef) com.google.android.gms.measurement.internal.zzef.zzgn():com.google.android.gms.measurement.internal.zzeh type: VIRTUAL \l0x0023: CONST_STR  (r2 I:java.lang.String) =  \"Ignoring negative bit index to be cleared\" \l0x0025: INVOKE  \l  (r1 I:com.google.android.gms.measurement.internal.zzeh)\l  (r2 I:java.lang.String)\l  (r9 I:java.lang.Object)\l com.google.android.gms.measurement.internal.zzeh.zza(java.lang.String, java.lang.Object):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r1 I:int) = (r9 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x002d: ARITH  (r1 I:int) = (r1 I:int) \/ (64 int) \l0x002f: INVOKE  (r2 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: INVOKE  (r1 I:com.google.android.gms.measurement.internal.zzef) = (r7 I:com.google.android.gms.measurement.internal.zzgf) com.google.android.gms.measurement.internal.zzgf.zzab():com.google.android.gms.measurement.internal.zzef type: VIRTUAL \l0x0039: INVOKE  (r1 I:com.google.android.gms.measurement.internal.zzeh) = (r1 I:com.google.android.gms.measurement.internal.zzef) com.google.android.gms.measurement.internal.zzef.zzgn():com.google.android.gms.measurement.internal.zzeh type: VIRTUAL \l0x003d: CONST_STR  (r2 I:java.lang.String) =  \"Ignoring bit index greater than bitSet size\" \l0x003f: INVOKE  (r3 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0043: INVOKE  (r3 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0047: INVOKE  \l  (r1 I:com.google.android.gms.measurement.internal.zzeh)\l  (r2 I:java.lang.String)\l  (r9 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l com.google.android.gms.measurement.internal.zzeh.zza(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x004f: CHECK_CAST  (r2 I:java.lang.Long) = (java.lang.Long) (r2 I:?[OBJECT, ARRAY]) \l0x0051: INVOKE  (r2 I:long) = (r2 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0055: CONST  (r4 I:?[long, double]) = (1 ?[long, double]) \l0x0057: INVOKE  (r9 I:int) = (r9 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x005b: ARITH  (r9 I:int) = (r9 I:int) % (64 int) \l0x005d: ARITH  (r4 I:long) = (r4 I:long) \<\< (r9 I:long) \l0x005e: NOT  (r4 I:long) = (r4 I:long) \l0x005f: ARITH  (r2 I:long) = (r2 I:long) & (r4 I:long) \l0x0060: INVOKE  (r9 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0064: INVOKE  \l  (r0 I:java.util.ArrayList)\l  (r1 I:int)\l  (r9 I:java.lang.Object)\l java.util.ArrayList.set(int, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0068|0x0068: INVOKE  (r8 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x006c: INVOKE  (r9 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0070: ARITH  (r9 I:int) = (r9 I:int) + (\-1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0072|0x0072: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0073: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0074: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0075|0x0075: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x008a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|0x0077: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r8 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x007b: CHECK_CAST  (r1 I:java.lang.Long) = (java.lang.Long) (r1 I:?[OBJECT, ARRAY]) \l0x007d: INVOKE  (r1 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0081: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0083: CMP_L  (r1 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0085|0x0085: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x008a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0087|0x0087: ARITH  (r9 I:int) = (r8 I:int) + (\-1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x008a|0x008a: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008b: INVOKE  (r8 I:java.util.List) = (r0 I:java.util.ArrayList), (r8 I:int), (r9 I:int) java.util.ArrayList.subList(int, int):java.util.List type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|0x008f: RETURN  (r8 I:java.util.List\<java.lang.Long\>) \l}"];
MethodNode[shape=record,label="{final java.util.List\<java.lang.Long\> com.google.android.gms.measurement.internal.zzjo.zza((r7 'this' I:com.google.android.gms.measurement.internal.zzjo A[IMMUTABLE_TYPE, THIS]), (r8 I:java.util.List\<java.lang.Long\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/Long;, \>;, Ljava\/util\/List\<, Ljava\/lang\/Integer;, \>;), Ljava\/util\/List\<, Ljava\/lang\/Long;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_17;
}

