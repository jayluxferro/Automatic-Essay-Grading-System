digraph "CFG forcom.google.android.gms.measurement.internal.zzx.zzca()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|zzo()\lzzbi()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (zzcg() != false) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|long r0 = zzac().zzlm.get()\llong r2 = zzx().elapsedRealtime()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0034|if ((java.lang.Math.abs(r2 \- r0) \> com.google.android.gms.measurement.internal.zzak.zzhd.get(null).longValue() ? 1 : (java.lang.Math.abs(r2 \- r0) == com.google.android.gms.measurement.internal.zzak.zzhd.get(null).longValue() ? 0 : \-1)) \<= 0) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|zzac().zzlm.set(r2)\lzzo()\lzzbi()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0049|if (zzcg() == false) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x004b|android.database.sqlite.SQLiteDatabase r0 = getWritableDatabase()\ljava.lang.String[] r1 = new java.lang.String[]\{java.lang.String.valueOf(zzx().currentTimeMillis()), java.lang.String.valueOf(com.google.android.gms.measurement.internal.zzs.zzbs())\}\lint r0 = r0.delete(\"queue\", \"abs(bundle_end_timestamp \- ?) \> cast(? as integer)\", r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0074|if (r0 \<= 0) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0076|zzab().zzgs().zza(\"Deleted stale rows. rowsDeleted\", java.lang.Integer.valueOf(r0))\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{final void com.google.android.gms.measurement.internal.zzx.zzca((r6v0 'this' com.google.android.gms.measurement.internal.zzx A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
}

