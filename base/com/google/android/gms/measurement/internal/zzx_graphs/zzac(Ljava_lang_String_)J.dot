digraph "CFG forcom.google.android.gms.measurement.internal.zzx.zzac(Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.gms.common.internal.Preconditions.checkNotEmpty(r7)\lzzo()\lzzbi()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLiteException \-\> 0x0039 \}\lSplitter:B:1:0x0009\l|android.database.sqlite.SQLiteDatabase r0 = getWritableDatabase()     \/\/ Catch:\{ SQLiteException \-\> 0x0039 \}\ljava.lang.String r1 = java.lang.String.valueOf(java.lang.Math.max(0, java.lang.Math.min(1000000, zzad().zzb(r7, com.google.android.gms.measurement.internal.zzak.zzgu))))     \/\/ Catch:\{ SQLiteException \-\> 0x0039 \}\ljava.lang.String[] r5 = new java.lang.String[]\{r7, r1\}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0037}"];
Node_4 [shape=record,label="{4\:\ 0x0038|RETURN\l|return (long) r0.delete(\"raw_events\", \"rowid in (select rowid from raw_events where app_id=? order by rowid desc limit \-1 offset ?)\", r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|ExcHandler: SQLiteException (r0v0 'e' android.database.sqlite.SQLiteException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0009\l|android.database.sqlite.SQLiteException r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|zzab().zzgk().zza(\"Error deleting over the limit events. appId\", com.google.android.gms.measurement.internal.zzef.zzam(r7), r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public final long com.google.android.gms.measurement.internal.zzx.zzac((r6v0 'this' com.google.android.gms.measurement.internal.zzx A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

