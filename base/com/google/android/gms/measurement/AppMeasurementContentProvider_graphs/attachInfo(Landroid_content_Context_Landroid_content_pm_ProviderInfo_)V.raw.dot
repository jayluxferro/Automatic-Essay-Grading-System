digraph "CFG forcom.google.android.gms.measurement.AppMeasurementContentProvider.attachInfo(Landroid\/content\/Context;Landroid\/content\/pm\/ProviderInfo;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:android.content.ContentProvider)\l  (r1 I:android.content.Context)\l  (r2 I:android.content.pm.ProviderInfo)\l android.content.ContentProvider.attachInfo(android.content.Context, android.content.pm.ProviderInfo):void type: SUPER \l0x0003: CONST_STR  (r1 I:java.lang.String) =  \"com.google.android.gms.measurement.google_measurement_service\" \l0x0005: IGET  (r2 I:java.lang.String) = (r2 I:android.content.pm.ProviderInfo) android.content.pm.ProviderInfo.authority java.lang.String \l0x0007: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Incorrect provider authority in manifest. Most likely due to a missing applicationId variable in application's build.gradle.\" \l0x0012: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.gms.measurement.AppMeasurementContentProvider.attachInfo((r0 'this' I:com.google.android.gms.measurement.AppMeasurementContentProvider A[IMMUTABLE_TYPE, THIS]), (r1 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.content.pm.ProviderInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

