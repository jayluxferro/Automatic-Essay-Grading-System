digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMaxInputSize(Ljava\/lang\/String;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('width' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('height' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r3 I:int) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-1664118616, \-1662541442, 1187890754, 1331836730, 1599127256, 1599127257] t:[0x001d, 0x0045, 0x0027, 0x0031, 0x003b, 0x004f] \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5] t:[0x0014, 0x0014, 0x0059, 0x0072, 0x0076, 0x0076] \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r7 I:int A[D('width' int)]) * (r8 I:int A[D('height' int)]) \l0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: ARITH  (r2 I:int) = (r0 I:int A[D('maxPixels' int)]) * (3 int) \l0x0019: ARITH  (r3 I:int) = (r1 I:int A[D('minCompressionRatio' int)]) * (2 int) \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \/ (r3 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: CONST_STR  (r3 I:java.lang.String) =  \"video\/3gpp\" \l0x001f: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"video\/mp4v\-es\" \l0x0029: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: CONST_STR  (r3 I:java.lang.String) =  \"video\/avc\" \l0x0033: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003b|0x003b: CONST_STR  (r3 I:java.lang.String) =  \"video\/x\-vnd.on2.vp8\" \l0x003d: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|0x0041: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0045|0x0045: CONST_STR  (r3 I:java.lang.String) =  \"video\/hevc\" \l0x0047: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x004b|0x004b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004f|0x004f: CONST_STR  (r3 I:java.lang.String) =  \"video\/x\-vnd.on2.vp9\" \l0x0051: INVOKE  (r3 I:boolean) = \l  (r6 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0055|0x0055: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_28 [shape=record,label="{28\:\ 0x0057|0x0057: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0059|0x0059: CONST_STR  (r3 I:java.lang.String) =  \"BRAVIA 4K 2015\" \l0x005b: SGET  (r4 I:java.lang.String) =  com.google.android.exoplayer2.util.Util.MODEL java.lang.String \l0x005d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0061|0x0061: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0063|0x0063: INVOKE  (r2 I:int) = (r7 I:int A[D('width' int)]), (r5 I:int) com.google.android.exoplayer2.util.Util.ceilDivide(int, int):int type: STATIC \l0x0067: INVOKE  (r3 I:int) = (r8 I:int A[D('height' int)]), (r5 I:int) com.google.android.exoplayer2.util.Util.ceilDivide(int, int):int type: STATIC \l0x006b: ARITH  (r2 I:int) = (r2 I:int) * (r3 I:int) \l0x006c: ARITH  (r2 I:int) = (r2 I:int) * (16 int) \l0x006e: ARITH  (r0 I:int) = (r2 I:int) * (16 int) \l0x0070: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0072|0x0072: ARITH  (r0 I:int A[D('maxPixels' int)]) = (r7 I:int A[D('width' int)]) * (r8 I:int A[D('height' int)]) \l0x0074: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0076|0x0076: ARITH  (r0 I:int A[D('maxPixels' int)]) = (r7 I:int A[D('width' int)]) * (r8 I:int A[D('height' int)]) \l0x0078: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMaxInputSize((r6 I:java.lang.String A[D('sampleMimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0016\-0x001d: r0 'maxPixels' int\l  0x0017\-0x001d: r1 'minCompressionRatio' int\l  0x0070\-0x0072: r0 'maxPixels' int\l  0x0071\-0x0072: r1 'minCompressionRatio' int\l  0x0074\-0x0076: r0 'maxPixels' int\l  0x0075\-0x0076: r1 'minCompressionRatio' int\l  0x0078\-0x00a3: r0 'maxPixels' int\l  0x0079\-0x00a3: r1 'minCompressionRatio' int\l  ?\-0x00a3: r6 'sampleMimeType' java.lang.String\l  ?\-0x00a3: r7 'width' int\l  ?\-0x00a3: r8 'height' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_5 -> Node_14;
Node_5 -> Node_17;
Node_5 -> Node_20;
Node_5 -> Node_23;
Node_5 -> Node_26;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_29;
Node_7 -> Node_32;
Node_7 -> Node_33;
Node_7 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_3;
Node_11 -> Node_12;
Node_12 -> Node_6;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_7;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_7;
Node_17 -> Node_18;
Node_18 -> Node_6;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_7;
Node_20 -> Node_21;
Node_21 -> Node_6;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_7;
Node_23 -> Node_24;
Node_24 -> Node_6;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_7;
Node_26 -> Node_27;
Node_27 -> Node_6;
Node_27 -> Node_28[style=dashed];
Node_28 -> Node_7;
Node_29 -> Node_30;
Node_30 -> Node_3;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_10;
Node_32 -> Node_10;
Node_33 -> Node_10;
}

