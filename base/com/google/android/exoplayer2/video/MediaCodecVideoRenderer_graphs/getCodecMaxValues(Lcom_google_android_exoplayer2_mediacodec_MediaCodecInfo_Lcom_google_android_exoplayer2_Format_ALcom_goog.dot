digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Lcom\/google\/android\/exoplayer2\/Format;[Lcom\/google\/android\/exoplayer2\/Format;)Lcom\/google\/android\/exoplayer2\/video\/MediaCodecVideoRenderer$CodecMaxValues;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r4 = r14.width\lint r2 = r14.height\lint r3 = getMaxInputSize(r14)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r15.length != 1) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e}"];
Node_3 [shape=record,label="{3\:\ 0x0014|r1 = false\lint r10 = r15.length\lr9 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|LOOP_START\lPHI: r1 r2 r3 r4 r9 \l  PHI: (r1v1 'haveUnknownDimensions' boolean) = (r1v0 'haveUnknownDimensions' boolean), (r1v2 'haveUnknownDimensions' boolean) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'maxHeight' int) = (r2v0 'maxHeight' int), (r2v4 'maxHeight' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'maxInputSize' int) = (r3v0 'maxInputSize' int), (r3v4 'maxInputSize' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'maxWidth' int) = (r4v0 'maxWidth' int), (r4v4 'maxWidth' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0017\-\>B:13:0x0041\l|if (r9 \>= r10) goto L_0x0047\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|r5 = r15[r9]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|if (areAdaptationCompatible(r13.adaptive, r14, r5) == false) goto L_0x0041\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023}"];
Node_8 [shape=record,label="{8\:\ 0x0025|if (r5.width == \-1) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027}"];
Node_10 [shape=record,label="{10\:\ 0x0029|if (r5.height != \-1) goto L_0x0045\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|r6 = true\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|PHI: r6 \l  PHI: (r6v12 boolean) = (r6v16 boolean), (r6v18 boolean) binds: [B:11:0x002b, B:14:0x0045] A[DONT_GENERATE, DONT_INLINE]\l|r1 = r1 \| r6\lint r4 = java.lang.Math.max(r4, r5.width)\lint r2 = java.lang.Math.max(r2, r5.height)\lint r3 = java.lang.Math.max(r3, getMaxInputSize(r5))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|LOOP_END\lPHI: r1 r2 r3 r4 \l  PHI: (r1v2 'haveUnknownDimensions' boolean) = (r1v1 'haveUnknownDimensions' boolean), (r1v3 'haveUnknownDimensions' boolean) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v4 'maxHeight' int) = (r2v1 'maxHeight' int), (r2v5 'maxHeight' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'maxInputSize' int) = (r3v1 'maxInputSize' int), (r3v5 'maxInputSize' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'maxWidth' int) = (r4v1 'maxWidth' int), (r4v5 'maxWidth' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0017\-\>B:13:0x0041\l|r9 = r9 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|r6 = false\l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|if (r1 == false) goto L_0x00a9\l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|android.util.Log.w(TAG, new java.lang.StringBuilder().append(\"Resolutions unknown. Codec max resolution: \").append(r4).append(\"x\").append(r2).toString())\landroid.graphics.Point r0 = getCodecMaxSize(r13, r14)\l}"];
Node_17 [shape=record,label="{17\:\ 0x006f|if (r0 == null) goto L_0x00a9\l}"];
Node_18 [shape=record,label="{18\:\ 0x0071|int r4 = java.lang.Math.max(r4, r0.x)\lint r2 = java.lang.Math.max(r2, r0.y)\lint r3 = java.lang.Math.max(r3, getMaxInputSize(r14.sampleMimeType, r4, r2))\landroid.util.Log.w(TAG, new java.lang.StringBuilder().append(\"Codec max resolution adjusted to: \").append(r4).append(\"x\").append(r2).toString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x00a9|PHI: r2 r3 r4 \l  PHI: (r2v2 'maxHeight' int) = (r2v1 'maxHeight' int), (r2v1 'maxHeight' int), (r2v3 'maxHeight' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'maxInputSize' int) = (r3v1 'maxInputSize' int), (r3v1 'maxInputSize' int), (r3v3 'maxInputSize' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'maxWidth' int) = (r4v1 'maxWidth' int), (r4v1 'maxWidth' int), (r4v3 'maxWidth' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0041|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues(r4, r2, r3)\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return new com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues(r4, r2, r3)\l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues((r12v0 'this' com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r13v0 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'format' com.google.android.exoplayer2.Format A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'streamFormats' com.google.android.exoplayer2.Format[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_23;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_22;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_21;
Node_13 -> Node_4;
Node_14 -> Node_12;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_24;
Node_20 -> Node_15;
Node_21 -> Node_13;
Node_22 -> Node_13;
}

