digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.configureCodec(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Landroid\/media\/MediaCodec;Lcom\/google\/android\/exoplayer2\/Format;Landroid\/media\/MediaCrypto;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.Format[]) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.streamFormats com.google.android.exoplayer2.Format[] \l0x0002: INVOKE  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r5 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r7 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l  (r1 I:com.google.android.exoplayer2.Format[])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues(com.google.android.exoplayer2.mediacodec.MediaCodecInfo, com.google.android.exoplayer2.Format, com.google.android.exoplayer2.Format[]):com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues type: VIRTUAL \l0x0006: IPUT  \l  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues)\l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.codecMaxValues com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues \l0x0008: IGET  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.codecMaxValues com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues \l0x000a: IGET  (r2 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.deviceNeedsAutoFrcWorkaround boolean \l0x000c: IGET  (r3 I:int) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.tunnelingAudioSessionId int \l0x000e: INVOKE  (r0 I:android.media.MediaFormat) = \l  (r7 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues)\l  (r2 I:boolean)\l  (r3 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMediaFormat(com.google.android.exoplayer2.Format, com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues, boolean, int):android.media.MediaFormat type: STATIC \l0x0012: IGET  (r1 I:android.view.Surface) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.surface android.view.Surface \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  \l  (r6 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec)])\l  (r0 I:android.media.MediaFormat A[D('mediaFormat' android.media.MediaFormat)])\l  (r1 I:android.view.Surface)\l  (r8 I:android.media.MediaCrypto A[D('crypto' android.media.MediaCrypto)])\l  (r2 I:int)\l android.media.MediaCodec.configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int):void type: VIRTUAL \l0x0018: SGET  (r1 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:5:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: IGET  (r1 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.tunneling boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$OnFrameRenderedListenerV23) =  com.google.android.exoplayer2.video.MediaCodecVideoRenderer$OnFrameRenderedListenerV23 \l0x0024: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: INVOKE  \l  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$OnFrameRenderedListenerV23)\l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r6 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec)])\l  (r2 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$1)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.OnFrameRenderedListenerV23.\<init\>(com.google.android.exoplayer2.video.MediaCodecVideoRenderer, android.media.MediaCodec, com.google.android.exoplayer2.video.MediaCodecVideoRenderer$1):void type: DIRECT \l0x0028: IPUT  \l  (r1 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$OnFrameRenderedListenerV23)\l  (r4 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.tunnelingOnFrameRenderedListener com.google.android.exoplayer2.video.MediaCodecVideoRenderer$OnFrameRenderedListenerV23 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.video.MediaCodecVideoRenderer.configureCodec((r4 'this' I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.media.MediaCrypto A[D('crypto' android.media.MediaCrypto), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x002a: r0 'mediaFormat' android.media.MediaFormat\l  ?\-0x002a: r5 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  ?\-0x002a: r6 'codec' android.media.MediaCodec\l  ?\-0x002a: r7 'format' com.google.android.exoplayer2.Format\l  ?\-0x002a: r8 'crypto' android.media.MediaCrypto\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

