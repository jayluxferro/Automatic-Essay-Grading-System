digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.processOutputBuffer(JJLandroid\/media\/MediaCodec;Ljava\/nio\/ByteBuffer;IIJZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r34 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('shouldSkip' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x0006: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x0008: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.skipOutputBuffer(android.media.MediaCodec, int):void type: DIRECT \l0x000b: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r9 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x000f: IGET  (r9 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.renderedFirstFrame boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0036 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: SGET  (r9 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0015: CONST  (r18 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0017: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r9 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:9:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r18 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0021: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x0023: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x0025: MOVE  (r3 I:?[long, double]) = (r18 I:?[long, double]) \l0x0027: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l  (r3 I:long)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.renderOutputBufferV21(android.media.MediaCodec, int, long):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x002e: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x0030: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x0032: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.renderOutputBuffer(android.media.MediaCodec, int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: INVOKE  (r9 I:int) = \l  (r23 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getState():int type: VIRTUAL \l0x003a: CONST  (r18 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: INVOKE  (r18 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC \l0x0046: CONST  (r20 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0048: ARITH  (r18 I:long) = (r18 I:long) * (r20 I:long) \l0x004a: ARITH  (r12 I:long) = (r18 I:long) \- (r26 I:long A[D('elapsedRealtimeUs' long)]) \l0x004c: ARITH  (r18 I:long) = (r32 I:long A[D('bufferPresentationTimeUs' long)]) \- (r24 I:long A[D('positionUs' long)]) \l0x004e: ARITH  (r10 I:long) = (r18 I:long) \- (r12 I:long A[D('elapsedSinceStartOfLoopUs' long)]) \l0x0050: INVOKE  (r14 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0054: CONST  (r18 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0056: ARITH  (r18 I:long) = (r18 I:long) * (r10 I:long A[D('earlyUs' long)]) \l0x0058: ARITH  (r16 I:long) = (r14 I:long A[D('systemTimeNs' long)]) + (r18 I:long) \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x005c: IGET  (r9 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper) = \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.frameReleaseTimeHelper com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper \l0x005e: MOVE  (r0 I:?[long, double]) = \l  (r32 I:?[long, double] A[D('bufferPresentationTimeUs' long)])\l \l0x0060: MOVE  (r2 I:?[long, double]) = \l  (r16 I:?[long, double] A[D('unadjustedFrameReleaseTimeNs' long)])\l \l0x0062: INVOKE  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper)\l  (r0 I:long)\l  (r2 I:long)\l com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.adjustReleaseTime(long, long):long type: VIRTUAL \l0x0066: ARITH  (r18 I:long) = (r6 I:long A[D('adjustedReleaseTimeNs' long)]) \- (r14 I:long A[D('systemTimeNs' long)]) \l0x0068: CONST  (r20 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x006a: ARITH  (r10 I:long A[D('earlyUs' long)]) = (r18 I:long) \/ (r20 I:long) \l0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x006e: MOVE  (r1 I:?[long, double]) = (r26 I:?[long, double] A[D('elapsedRealtimeUs' long)]) \l0x0070: INVOKE  (r9 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r10 I:long A[D('earlyUs' long)])\l  (r1 I:long)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.shouldDropOutputBuffer(long, long):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0074|0x0074: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0081 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0076|0x0076: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0078: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x007a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x007c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.dropOutputBuffer(android.media.MediaCodec, int):void type: DIRECT \l0x007f: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0081|0x0081: SGET  (r9 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0083: CONST  (r18 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0085: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0087|0x0087: IF  (r9 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:21:0x009c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0089|0x0089: CONST  (r18 I:?[long, double]) = (50000(0xc350, double:2.47033E\-319) ?[long, double]) \l0x008c: CMP_L  (r9 I:int) = (r10 I:long A[D('earlyUs' long)]), (r18 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x008e|0x008e: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x00c8 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0090|0x0090: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0092: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x0094: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x0096: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l  (r6 I:long A[D('adjustedReleaseTimeNs' long)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.renderOutputBufferV21(android.media.MediaCodec, int, long):void type: DIRECT \l0x0099: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x009c|0x009c: CONST  (r18 I:?[long, double]) = (30000(0x7530, double:1.4822E\-319) ?[long, double]) \l0x009e: CMP_L  (r9 I:int) = (r10 I:long A[D('earlyUs' long)]), (r18 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a0|0x00a0: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x00c8 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a2|0x00a2: CONST  (r18 I:?[long, double]) = (11000(0x2af8, double:5.4347E\-320) ?[long, double]) \l0x00a4: CMP_L  (r9 I:int) = (r10 I:long A[D('earlyUs' long)]), (r18 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a6|0x00a6: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:28:0x00b3 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a8|0x00a8: CONST  (r18 I:?[long, double]) = (10000(0x2710, double:4.9407E\-320) ?[long, double]) \l0x00aa: ARITH  (r18 I:long) = (r10 I:long A[D('earlyUs' long)]) \- (r18 I:long) \l0x00ac: CONST  (r20 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00ae|SYNTHETIC\lSplitter:B:26:0x00ae\l}"];
Node_27 [shape=record,label="{27\:\ ?|Splitter:B:26:0x00ae\l|0x00ae: ARITH  (r18 I:long) = (r18 I:long) \/ (r20 I:long) A[Catch:\{ InterruptedException \-\> 0x00bf \}, TRY_ENTER]\l0x00b0: INVOKE  (r18 I:long) java.lang.Thread.sleep(long):void type: STATIC A[Catch:\{ InterruptedException \-\> 0x00bf \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x00b3|0x00b3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x00b5: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('codec' android.media.MediaCodec)])\l \l0x00b7: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferIndex' int)])\l \l0x00b9: INVOKE  \l  (r0 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r1 I:android.media.MediaCodec)\l  (r2 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.renderOutputBuffer(android.media.MediaCodec, int):void type: DIRECT \l0x00bc: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00bf|ExcHandler: InterruptedException null\lSplitter:B:26:0x00ae\l|0x00bf: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c0|0x00c0: INVOKE  (r9 I:java.lang.Thread) =  java.lang.Thread.currentThread():java.lang.Thread type: STATIC \l0x00c4: INVOKE  (r9 I:java.lang.Thread) java.lang.Thread.interrupt():void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00c8|0x00c8: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.exoplayer2.video.MediaCodecVideoRenderer.processOutputBuffer((r23 'this' I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r24 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[D('elapsedRealtimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:int A[D('bufferIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:int A[D('bufferFlags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:long A[D('bufferPresentationTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:boolean A[D('shouldSkip' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x00c0\-0x00c8: r8 'e' java.lang.InterruptedException\l  0x0066\-0x00ca: r6 'adjustedReleaseTimeNs' long\l  0x0050\-0x00ca: r10 'earlyUs' long\l  0x004c\-0x00ca: r12 'elapsedSinceStartOfLoopUs' long\l  0x0054\-0x00ca: r14 'systemTimeNs' long\l  0x005a\-0x00ca: r16 'unadjustedFrameReleaseTimeNs' long\l  ?\-0x00ca: r24 'positionUs' long\l  ?\-0x00ca: r26 'elapsedRealtimeUs' long\l  ?\-0x00ca: r28 'codec' android.media.MediaCodec\l  ?\-0x00ca: r29 'buffer' java.nio.ByteBuffer\l  ?\-0x00ca: r30 'bufferIndex' int\l  ?\-0x00ca: r31 'bufferFlags' int\l  ?\-0x00ca: r32 'bufferPresentationTimeUs' long\l  ?\-0x00ca: r34 'shouldSkip' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_2;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_2;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_2;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_2;
Node_29 -> Node_30;
Node_30 -> Node_28;
Node_31 -> Node_2;
}

