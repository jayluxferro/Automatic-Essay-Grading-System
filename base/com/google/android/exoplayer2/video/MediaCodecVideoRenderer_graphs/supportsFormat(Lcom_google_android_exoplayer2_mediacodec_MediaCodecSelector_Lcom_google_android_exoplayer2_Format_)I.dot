digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecSelector;Lcom\/google\/android\/exoplayer2\/Format;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r8 = r18.sampleMimeType\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (com.google.android.exoplayer2.util.MimeTypes.isVideo(r8) != false) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|r9 = false\lcom.google.android.exoplayer2.drm.DrmInitData r5 = r18.drmInitData\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r5 == null) goto L_0x0022\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r7 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|LOOP_START\lPHI: r7 r9 \l  PHI: (r7v1 'i' int) = (r7v0 'i' int), (r7v2 'i' int) binds: [B:5:0x0013, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v2 'requiresSecureDecryption' boolean) = (r9v0 'requiresSecureDecryption' boolean), (r9v3 'requiresSecureDecryption' boolean) binds: [B:5:0x0013, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0014\-\>B:8:0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r7 \>= r5.schemeDataCount) goto L_0x0022\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|LOOP_END\lLOOP:0: B:6:0x0014\-\>B:8:0x0018\l|r9 = r9 \| r5.get(r7).requiresSecureDecryption\lint r7 = r7 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|PHI: r9 \l  PHI: (r9v1 'requiresSecureDecryption' boolean) = (r9v0 'requiresSecureDecryption' boolean), (r9v2 'requiresSecureDecryption' boolean) binds: [B:4:0x0011, B:39:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.mediacodec.MediaCodecInfo r4 = r17.getDecoderInfo(r8, r9)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|if (r4 != null) goto L_0x002c\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|boolean r3 = r4.isCodecSupported(r18.codecs)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|if (r3 == false) goto L_0x0059\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036}"];
Node_15 [shape=record,label="{15\:\ 0x003a|if (r18.width \<= 0) goto L_0x0059\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c}"];
Node_17 [shape=record,label="{17\:\ 0x0040|if (r18.height \<= 0) goto L_0x0059\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042}"];
Node_19 [shape=record,label="{19\:\ 0x0046|if (com.google.android.exoplayer2.util.Util.SDK_INT \< 21) goto L_0x006c\l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|boolean r3 = r4.isVideoSizeAndRateSupportedV21(r18.width, r18.height, (double) r18.frameRate)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|PHI: r3 \l  PHI: (r3v1 'decoderCapable' boolean) = (r3v0 'decoderCapable' boolean), (r3v0 'decoderCapable' boolean), (r3v0 'decoderCapable' boolean), (r3v3 'decoderCapable' boolean), (r3v3 'decoderCapable' boolean), (r3v5 'decoderCapable' boolean) binds: [B:13:0x0034, B:15:0x003a, B:17:0x0040, B:33:0x007c, B:34:0x007e, B:20:0x0048] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|if (r4.adaptive == false) goto L_0x00bd\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|r2 = 8\l}"];
Node_24 [shape=record,label="{24\:\ 0x005f|PHI: r2 \l  PHI: (r2v1 'adaptiveSupport' int) = (r2v0 'adaptiveSupport' int), (r2v2 'adaptiveSupport' int) binds: [B:36:0x00bd, B:23:0x005d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0061|if (r4.tunneling == false) goto L_0x00bf\l}"];
Node_26 [shape=record,label="{26\:\ 0x0063|r10 = 16\l}"];
Node_27 [shape=record,label="{27\:\ 0x0065|PHI: r10 \l  PHI: (r10v1 'tunnelingSupport' int) = (r10v0 'tunnelingSupport' int), (r10v2 'tunnelingSupport' int) binds: [B:37:0x00bf, B:26:0x0063] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L_0x00c1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0067|r6 = 3\l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|PHI: r6 \l  PHI: (r6v1 'formatSupport' int) = (r6v0 'formatSupport' int), (r6v2 'formatSupport' int) binds: [B:38:0x00c1, B:28:0x0067] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x006c}"];
Node_31 [shape=record,label="{31\:\ 0x0079|if ((r18.width * r18.height) \> com.google.android.exoplayer2.mediacodec.MediaCodecUtil.maxH264DecodableFrameSize()) goto L_0x00bb\l}"];
Node_32 [shape=record,label="{32\:\ 0x007b|r3 = true\l}"];
Node_33 [shape=record,label="{33\:\ 0x007c|PHI: r3 \l  PHI: (r3v3 'decoderCapable' boolean) = (r3v2 'decoderCapable' boolean), (r3v4 'decoderCapable' boolean) binds: [B:35:0x00bb, B:32:0x007b] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 != false) goto L_0x0059\l}"];
Node_34 [shape=record,label="{34\:\ 0x007e|android.util.Log.d(TAG, new java.lang.StringBuilder().append(\"FalseCheck [legacyFrameSize, \").append(r18.width).append(\"x\").append(r18.height).append(\"] [\").append(com.google.android.exoplayer2.util.Util.DEVICE_DEBUG_INFO).append(\"]\").toString())\l}"];
Node_35 [shape=record,label="{35\:\ 0x00bb|r3 = false\l}"];
Node_36 [shape=record,label="{36\:\ 0x00bd|r2 = 4\l}"];
Node_37 [shape=record,label="{37\:\ 0x00bf|r10 = 0\l}"];
Node_38 [shape=record,label="{38\:\ 0x00c1|r6 = 2\l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return (r2 \| r10) \| r6\l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat((r16v0 'this' com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r17v0 'mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'format' com.google.android.exoplayer2.Format A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_39;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_36;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_37;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_29 -> Node_40;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_21;
Node_33 -> Node_34[style=dashed];
Node_34 -> Node_21;
Node_35 -> Node_33;
Node_36 -> Node_24;
Node_37 -> Node_27;
Node_38 -> Node_29;
Node_39 -> Node_9;
}

