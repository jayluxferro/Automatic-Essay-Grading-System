digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Lcom\/google\/android\/exoplayer2\/Format;[Lcom\/google\/android\/exoplayer2\/Format;)Lcom\/google\/android\/exoplayer2\/video\/MediaCodecVideoRenderer$CodecMaxValues;" {
subgraph cluster_Region_399260256 {
label = "R(2:0|(2:(1:23)|(4:3|(3:5|(2:(1:11)(1:14)|12)(0)|13)|(2:16|(1:18))|24))) | DECL_VAR: boolean null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r4 = r14.width\lint int r2 = r14.height\lint int r3 = getMaxInputSize(r14)\l}"];
subgraph cluster_Region_179277718 {
label = "R(2:(1:23)|(4:3|(3:5|(2:(1:11)(1:14)|12)(0)|13)|(2:16|(1:18))|24))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_840356538 {
label = "IF [B:1:0x000c] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r15.length == 1) goto L_0x000e\l}"];
subgraph cluster_Region_948430816 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues(r4, r2, r3)\l}"];
}
}
subgraph cluster_Region_405577736 {
label = "R(4:3|(3:5|(2:(1:11)(1:14)|12)(0)|13)|(2:16|(1:18))|24)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0014|boolean r1 = false\lint int r10 = r15.length\lint r9 = 0\l}"];
subgraph cluster_LoopRegion_563120691 {
label = "LOOP:0: (3:5|(2:(1:11)(1:14)|12)(0)|13)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|LOOP_START\lPHI: r1 r2 r3 r4 r9 \l  PHI: (r1v1 'haveUnknownDimensions' boolean) = (r1v0 'haveUnknownDimensions' boolean), (r1v2 'haveUnknownDimensions' boolean) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'maxHeight' int) = (r2v0 'maxHeight' int), (r2v4 'maxHeight' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'maxInputSize' int) = (r3v0 'maxInputSize' int), (r3v4 'maxInputSize' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'maxWidth' int) = (r4v0 'maxWidth' int), (r4v4 'maxWidth' int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:3:0x0014, B:13:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0017\-\>B:13:0x0041\l|if (r9 \< r10) goto L_0x0019\l}"];
subgraph cluster_Region_182611758 {
label = "R(3:5|(2:(1:11)(1:14)|12)(0)|13)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0019|r5 = r15[r9]\l}"];
subgraph cluster_IfRegion_583373250 {
label = "IF [B:6:0x0021] THEN: R(2:(1:11)(1:14)|12) ELSE: R(0)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|if (areAdaptationCompatible(r13.adaptive, r14, r5) != false) goto L_0x0023\l}"];
subgraph cluster_Region_202587881 {
label = "R(2:(1:11)(1:14)|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1415608627 {
label = "IF [B:8:0x0025, B:10:0x0029] THEN: R(1:11) ELSE: R(1:14)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0025|if (r5.width == \-1) goto L_0x002b\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|ADDED_TO_REGION\l|if (r5.height == \-1) goto L_0x002b\l}"];
subgraph cluster_Region_1330176758 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002b|r6 = true\l}"];
}
subgraph cluster_Region_738003756 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0045|r6 = false\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x002c|PHI: r6 \l  PHI: (r6v12 boolean) = (r6v16 boolean), (r6v18 boolean) binds: [B:11:0x002b, B:14:0x0045] A[DONT_GENERATE, DONT_INLINE]\l|r1 \|= r6\lint r4 = java.lang.Math.max(r4, r5.width)\lint r2 = java.lang.Math.max(r2, r5.height)\lint r3 = java.lang.Math.max(r3, getMaxInputSize(r5))\l}"];
}
subgraph cluster_Region_1348989447 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_13 [shape=record,label="{13\:\ 0x0041|LOOP_END\lPHI: r1 r2 r3 r4 \l  PHI: (r1v2 'haveUnknownDimensions' boolean) = (r1v1 'haveUnknownDimensions' boolean), (r1v3 'haveUnknownDimensions' boolean) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v4 'maxHeight' int) = (r2v1 'maxHeight' int), (r2v5 'maxHeight' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'maxInputSize' int) = (r3v1 'maxInputSize' int), (r3v5 'maxInputSize' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'maxWidth' int) = (r4v1 'maxWidth' int), (r4v5 'maxWidth' int) binds: [B:22:0x0041, B:21:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0017\-\>B:13:0x0041\l|r9++\l}"];
}
}
subgraph cluster_IfRegion_232599954 {
label = "IF [B:15:0x0047] THEN: R(2:16|(1:18)) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0047|if (r1 == true) goto L_0x0049\l}"];
subgraph cluster_Region_1315886506 {
label = "R(2:16|(1:18))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0049|android.util.Log.w(TAG, \"Resolutions unknown. Codec max resolution: \" + r4 + \"x\" + r2)\landroid.graphics.Point android.graphics.Point r0 = getCodecMaxSize(r13, r14)\l}"];
subgraph cluster_IfRegion_840513629 {
label = "IF [B:17:0x006f] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x006f|if (r0 != null) goto L_0x0071\l}"];
subgraph cluster_Region_1955876871 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0071|int r4 = java.lang.Math.max(r4, r0.x)\lint r2 = java.lang.Math.max(r2, r0.y)\lint r3 = java.lang.Math.max(r3, getMaxInputSize(r14.sampleMimeType, r4, r2))\landroid.util.Log.w(TAG, \"Codec max resolution adjusted to: \" + r4 + \"x\" + r2)\l}"];
}
}
}
}
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return new com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues(r4, r2, r3)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0023}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0027}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x00a9|PHI: r2 r3 r4 \l  PHI: (r2v2 'maxHeight' int) = (r2v1 'maxHeight' int), (r2v1 'maxHeight' int), (r2v3 'maxHeight' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'maxInputSize' int) = (r3v1 'maxInputSize' int), (r3v1 'maxInputSize' int), (r3v3 'maxInputSize' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'maxWidth' int) = (r4v1 'maxWidth' int), (r4v1 'maxWidth' int), (r4v3 'maxWidth' int) binds: [B:15:0x0047, B:17:0x006f, B:18:0x0071] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0047|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0041|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0041|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues((r12v0 'this' com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r13v0 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'format' com.google.android.exoplayer2.Format A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'streamFormats' com.google.android.exoplayer2.Format[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_20[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_22[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_11 -> Node_12;
Node_14 -> Node_12;
Node_12 -> Node_21;
Node_13 -> Node_4;
Node_15 -> Node_16;
Node_15 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_2 -> Node_23;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_19 -> Node_24;
Node_20 -> Node_15;
Node_21 -> Node_13;
Node_22 -> Node_13;
}

