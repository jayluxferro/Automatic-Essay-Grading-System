digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecSelector;Lcom\/google\/android\/exoplayer2\/Format;)I" {
subgraph cluster_Region_1331864120 {
label = "R(2:0|(2:(1:2)|(4:3|(2:5|(1:8))|9|(2:(1:11)|(5:12|(1:(1:20)(2:31|(1:34)))|22|25|40)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r8 = r18.sampleMimeType\l}"];
subgraph cluster_Region_1348126420 {
label = "R(2:(1:2)|(4:3|(2:5|(1:8))|9|(2:(1:11)|(5:12|(1:(1:20)(2:31|(1:34)))|22|25|40))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1770975083 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (com.google.android.exoplayer2.util.MimeTypes.isVideo(r8) == false) goto L_0x000a\l}"];
subgraph cluster_Region_830297540 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_837025607 {
label = "R(4:3|(2:5|(1:8))|9|(2:(1:11)|(5:12|(1:(1:20)(2:31|(1:34)))|22|25|40)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|boolean r9 = false\lcom.google.android.exoplayer2.drm.DrmInitData com.google.android.exoplayer2.drm.DrmInitData r5 = r18.drmInitData\l}"];
subgraph cluster_IfRegion_1520660461 {
label = "IF [B:4:0x0011] THEN: R(2:5|(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r5 != null) goto L_0x0013\l}"];
subgraph cluster_Region_1192082141 {
label = "R(2:5|(1:8))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|int r7 = 0\l}"];
subgraph cluster_LoopRegion_1145583205 {
label = "LOOP:0: (1:8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r7 \< r5.schemeDataCount) goto L_0x0018\l}"];
subgraph cluster_Region_687798 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0018|LOOP_END\lLOOP:0: B:6:0x0014\-\>B:8:0x0018\l|r9 \|= r5.get(r7).requiresSecureDecryption\lr7++\l}"];
}
}
}
}
Node_9 [shape=record,label="{9\:\ 0x0022|PHI: r9 \l  PHI: (r9v1 'requiresSecureDecryption' boolean) = (r9v0 'requiresSecureDecryption' boolean), (r9v2 'requiresSecureDecryption' boolean) binds: [B:4:0x0011, B:39:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.mediacodec.MediaCodecInfo com.google.android.exoplayer2.mediacodec.MediaCodecInfo r4 = r17.getDecoderInfo(r8, r9)\l}"];
subgraph cluster_Region_301043835 {
label = "R(2:(1:11)|(5:12|(1:(1:20)(2:31|(1:34)))|22|25|40))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1786769516 {
label = "IF [B:10:0x0028] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028|if (r4 == null) goto L_0x002a\l}"];
subgraph cluster_Region_481901425 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002a|SYNTHETIC\lRETURN\l|return 1\l}"];
}
}
subgraph cluster_Region_970185819 {
label = "R(5:12|(1:(1:20)(2:31|(1:34)))|22|25|40)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x002c|boolean boolean r3 = r4.isCodecSupported(r18.codecs)\l}"];
subgraph cluster_IfRegion_1750698403 {
label = "IF [B:13:0x0034, B:15:0x003a, B:17:0x0040] THEN: R(1:(1:20)(2:31|(1:34))) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0034|ADDED_TO_REGION\l|if (r3 == true) goto L_0x0036\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|ADDED_TO_REGION\l|if (r18.width \> 0) goto L_0x003c\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|ADDED_TO_REGION\l|if (r18.height \> 0) goto L_0x0042\l}"];
subgraph cluster_Region_450044500 {
label = "R(1:(1:20)(2:31|(1:34)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1104910271 {
label = "IF [B:19:0x0046] THEN: R(1:20) ELSE: R(2:31|(1:34))";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0046|if (com.google.android.exoplayer2.util.Util.SDK_INT \>= 21) goto L_0x0048\l}"];
subgraph cluster_Region_2026770571 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0048|boolean r3 = r4.isVideoSizeAndRateSupportedV21(r18.width, r18.height, (double) r18.frameRate)\l}"];
}
subgraph cluster_Region_2108750569 {
label = "R(2:31|(1:34))";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0079|r3 = r18.width * r18.height \<= com.google.android.exoplayer2.mediacodec.MediaCodecUtil.maxH264DecodableFrameSize()\l}"];
subgraph cluster_IfRegion_1330618871 {
label = "IF [B:33:0x007c] THEN: R(1:34) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x007c|PHI: r3 \l  PHI: (r3v3 'decoderCapable' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L_0x007e\l}"];
subgraph cluster_Region_1546954167 {
label = "R(1:34)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x007e|android.util.Log.d(TAG, \"FalseCheck [legacyFrameSize, \" + r18.width + \"x\" + r18.height + \"] [\" + com.google.android.exoplayer2.util.Util.DEVICE_DEBUG_INFO + \"]\")\l}"];
}
}
}
}
}
}
Node_22 [shape=record,label="{22\:\ 0x005b}"];
Node_25 [shape=record,label="{25\:\ 0x0061}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return (r4.adaptive ? 8 : 4) \| (r4.tunneling ? 16 : 0) \| (r3 ? 3 : 2)\l}"];
}
}
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0014|LOOP_START\lPHI: r7 r9 \l  PHI: (r7v1 'i' int) = (r7v0 'i' int), (r7v2 'i' int) binds: [B:5:0x0013, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v2 'requiresSecureDecryption' boolean) = (r9v0 'requiresSecureDecryption' boolean), (r9v3 'requiresSecureDecryption' boolean) binds: [B:5:0x0013, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0014\-\>B:8:0x0018\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0036}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x003c}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0042}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0059|PHI: r3 \l  PHI: (r3v1 'decoderCapable' boolean) = (r3v0 'decoderCapable' boolean), (r3v0 'decoderCapable' boolean), (r3v0 'decoderCapable' boolean), (r3v3 'decoderCapable' boolean), (r3v3 'decoderCapable' boolean), (r3v5 'decoderCapable' boolean) binds: [B:13:0x0034, B:15:0x003a, B:17:0x0040, B:33:0x007c, B:34:0x007e, B:20:0x0048] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x005d}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x005f|PHI: r2 \l  PHI: (r2v1 'adaptiveSupport' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0063}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0065|PHI: r10 \l  PHI: (r10v1 'tunnelingSupport' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0067}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0068|PHI: r6 \l  PHI: (r6v1 'formatSupport' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x006c}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x007b}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x00bb}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x00bd}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x00bf}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x00c1}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat((r16v0 'this' com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r17v0 'mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'format' com.google.android.exoplayer2.Format A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_39[style=dashed];
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_21[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_21[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_19 -> Node_30[style=dashed];
Node_20 -> Node_21;
Node_31 -> Node_32;
Node_31 -> Node_35;
Node_33 -> Node_21[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_22 -> Node_23;
Node_22 -> Node_36;
Node_25 -> Node_26;
Node_25 -> Node_37;
Node_6 -> Node_7;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_29 -> Node_40;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_35 -> Node_33;
Node_36 -> Node_24;
Node_37 -> Node_27;
Node_38 -> Node_29;
Node_39 -> Node_9;
}

