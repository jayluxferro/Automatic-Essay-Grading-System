digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.handleMessage(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('messageType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CHECK_CAST  (r4 I:android.view.Surface A[D('message' java.lang.Object)]) = (android.view.Surface) (r4 I:?[OBJECT, ARRAY] A[D('message' java.lang.Object)]) \l0x0005: INVOKE  \l  (r2 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l  (r4 I:android.view.Surface A[D('message' java.lang.Object)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.setSurface(android.view.Surface):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('messageType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CHECK_CAST  (r4 I:java.lang.Integer A[D('message' java.lang.Object)]) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY] A[D('message' java.lang.Object)]) \l0x000e: INVOKE  (r1 I:int) = (r4 I:java.lang.Integer A[D('message' java.lang.Object)]) java.lang.Integer.intValue():int type: VIRTUAL \l0x0012: IPUT  \l  (r1 I:int)\l  (r2 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.scalingMode int \l0x0014: INVOKE  (r0 I:android.media.MediaCodec) = \l  (r2 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodec():android.media.MediaCodec type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('codec' android.media.MediaCodec)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.scalingMode int \l0x001c: INVOKE  \l  (r0 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec)])\l  (r1 I:int)\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.setVideoScalingMode(android.media.MediaCodec, int):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: INVOKE  \l  (r2 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l  (r3 I:int A[D('messageType' int)])\l  (r4 I:java.lang.Object A[D('message' java.lang.Object)])\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.handleMessage(int, java.lang.Object):void type: SUPER \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.video.MediaCodecVideoRenderer.handleMessage((r2 'this' I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('messageType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[D('message' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0005: r4 'message' java.lang.Object\l  0x0009\-0x000e: r4 'message' java.lang.Object\l  0x0018\-0x0020: r0 'codec' android.media.MediaCodec\l  ?\-0x0023: r3 'messageType' int\l  0x0020\-0x0023: r4 'message' java.lang.Object\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_3;
Node_9 -> Node_3;
}

