digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Lcom\/google\/android\/exoplayer2\/Format;[Lcom\/google\/android\/exoplayer2\/Format;)Lcom\/google\/android\/exoplayer2\/video\/MediaCodecVideoRenderer$CodecMaxValues;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: IGET  (r4 I:int) = \l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l0x0005: IGET  (r2 I:int) = \l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l0x0007: INVOKE  (r3 I:int) = \l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMaxInputSize(com.google.android.exoplayer2.Format):int type: STATIC \l0x000b: ARRAY_LENGTH  (r6 I:int) = \l  (r15 I:?[] A[D('streamFormats' com.google.android.exoplayer2.Format[])])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues) =  com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues \l0x0010: INVOKE  \l  (r6 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues)\l  (r4 I:int A[D('maxWidth' int)])\l  (r2 I:int A[D('maxHeight' int)])\l  (r3 I:int A[D('maxInputSize' int)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues.\<init\>(int, int, int):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  \l  (r6 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: ARRAY_LENGTH  (r10 I:int) = \l  (r15 I:?[] A[D('streamFormats' com.google.android.exoplayer2.Format[])])\l \l0x0016: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r9 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:16:0x0047 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY][] A[D('streamFormats' com.google.android.exoplayer2.Format[])])\l  (r9 I:?[int, short, byte, char])\l \l0x001b: IGET  (r6 I:boolean) = \l  (r13 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.adaptive boolean \l0x001d: INVOKE  (r6 I:boolean) = \l  (r6 I:boolean)\l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.areAdaptationCompatible(boolean, com.google.android.exoplayer2.Format, com.google.android.exoplayer2.Format):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r6 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IGET  (r6 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0045 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: ARITH  (r1 I:?[int, boolean, short, byte, char] A[D('haveUnknownDimensions' boolean)]) = (r1 I:?[int, boolean, short, byte, char] A[D('haveUnknownDimensions' boolean)]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x002d: IGET  (r6 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l0x002f: INVOKE  (r4 I:int A[D('maxWidth' int)]) = (r4 I:int A[D('maxWidth' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0033: IGET  (r6 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l0x0035: INVOKE  (r2 I:int A[D('maxHeight' int)]) = (r2 I:int A[D('maxHeight' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0039: INVOKE  (r6 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('streamFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMaxInputSize(com.google.android.exoplayer2.Format):int type: STATIC \l0x003d: INVOKE  (r3 I:int A[D('maxInputSize' int)]) = (r3 I:int A[D('maxInputSize' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: ARITH  (r6 I:int) = (r9 I:int) + (1 int) \l0x0043: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('haveUnknownDimensions' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00a9 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: CONST_STR  (r6 I:java.lang.String) =  \"MediaCodecVideoRenderer\" \l0x004b: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004d: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0050: CONST_STR  (r8 I:java.lang.String) =  \"Resolutions unknown. Codec max resolution: \" \l0x0052: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0056: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r4 I:int A[D('maxWidth' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x005a: CONST_STR  (r8 I:java.lang.String) =  \"x\" \l0x005c: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r2 I:int A[D('maxHeight' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  (r6 I:java.lang.String), (r7 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x006b: INVOKE  (r0 I:android.graphics.Point) = \l  (r13 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxSize(com.google.android.exoplayer2.mediacodec.MediaCodecInfo, com.google.android.exoplayer2.Format):android.graphics.Point type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x006f|0x006f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('codecMaxSize' android.graphics.Point)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00a9 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|0x0071: IGET  (r6 I:int) = \l  (r0 I:android.graphics.Point A[D('codecMaxSize' android.graphics.Point)])\l android.graphics.Point.x int \l0x0073: INVOKE  (r4 I:int A[D('maxWidth' int)]) = (r4 I:int A[D('maxWidth' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0077: IGET  (r6 I:int) = \l  (r0 I:android.graphics.Point A[D('codecMaxSize' android.graphics.Point)])\l android.graphics.Point.y int \l0x0079: INVOKE  (r2 I:int A[D('maxHeight' int)]) = (r2 I:int A[D('maxHeight' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x007d: IGET  (r6 I:java.lang.String) = \l  (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x007f: INVOKE  (r6 I:int) = \l  (r6 I:java.lang.String)\l  (r4 I:int A[D('maxWidth' int)])\l  (r2 I:int A[D('maxHeight' int)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getMaxInputSize(java.lang.String, int, int):int type: STATIC \l0x0083: INVOKE  (r3 I:int A[D('maxInputSize' int)]) = (r3 I:int A[D('maxInputSize' int)]), (r6 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0087: CONST_STR  (r6 I:java.lang.String) =  \"MediaCodecVideoRenderer\" \l0x0089: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x008b: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x008e: CONST_STR  (r8 I:java.lang.String) =  \"Codec max resolution adjusted to: \" \l0x0090: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0094: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r4 I:int A[D('maxWidth' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0098: CONST_STR  (r8 I:java.lang.String) =  \"x\" \l0x009a: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009e: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r2 I:int A[D('maxHeight' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a2: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a6: INVOKE  (r6 I:java.lang.String), (r7 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a9|0x00a9: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues) =  com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues \l0x00ab: INVOKE  \l  (r6 I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues)\l  (r4 I:int A[D('maxWidth' int)])\l  (r2 I:int A[D('maxHeight' int)])\l  (r3 I:int A[D('maxInputSize' int)])\l com.google.android.exoplayer2.video.MediaCodecVideoRenderer.CodecMaxValues.\<init\>(int, int, int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.video.MediaCodecVideoRenderer$CodecMaxValues com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxValues((r12 'this' I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r13 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:com.google.android.exoplayer2.Format[] A[D('streamFormats' com.google.android.exoplayer2.Format[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001b\-0x0047: r5 'streamFormat' com.google.android.exoplayer2.Format\l  0x006f\-0x00a9: r0 'codecMaxSize' android.graphics.Point\l  0x0015\-0x00af: r1 'haveUnknownDimensions' boolean\l  0x0007\-0x00af: r2 'maxHeight' int\l  0x000b\-0x00af: r3 'maxInputSize' int\l  0x0005\-0x00af: r4 'maxWidth' int\l  ?\-0x00af: r13 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  ?\-0x00af: r14 'format' com.google.android.exoplayer2.Format\l  ?\-0x00af: r15 'streamFormats' com.google.android.exoplayer2.Format[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_5;
Node_15 -> Node_13;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_3;
}

