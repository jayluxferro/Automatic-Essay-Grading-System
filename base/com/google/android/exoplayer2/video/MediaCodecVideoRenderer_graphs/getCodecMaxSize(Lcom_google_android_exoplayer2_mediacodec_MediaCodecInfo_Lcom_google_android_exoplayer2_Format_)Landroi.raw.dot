digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxSize(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Lcom\/google\/android\/exoplayer2\/Format;)Landroid\/graphics\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0002: IGET  (r12 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0006: IGET  (r13 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r12 I:?[int, byte, short, char]) \<= (r13 I:?[int, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x000f: IGET  (r6 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0015: IGET  (r7 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: CAST  (r12 I:float) = (float) (r7 I:int A[D('formatShortEdgePx' int)]) \l0x0018: CAST  (r13 I:float) = (float) (r6 I:int A[D('formatLongEdgePx' int)]) \l0x0019: ARITH  (r5 I:float) = (r12 I:float) \/ (r13 I:float) \l0x001b: SGET  (r15 I:int[]) =  com.google.android.exoplayer2.video.MediaCodecVideoRenderer.STANDARD_LONG_EDGE_VIDEO_PX int[] \l0x001d: ARRAY_LENGTH  (r0 I:int) = (r15 I:?[]) \l0x001e: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r14 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:38:0x0093 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: AGET  (r10 I:?[int, float]) = (r15 I:?[int, float][]), (r14 I:?[int, short, byte, char]) \l0x0028: CAST  (r12 I:float) = (float) (r10 I:int A[D('longEdgePx' int)]) \l0x0029: ARITH  (r12 I:float) = (r12 I:float) * (r5 I:float A[D('aspectRatio' float)]) \l0x002a: CAST  (r11 I:int) = (int) (r12 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r10 I:?[int, byte, short, char] A[D('longEdgePx' int)]) \<= (r6 I:?[int, byte, short, char] A[D('formatLongEdgePx' int)])  \-\> B:13:0x002f \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r11 I:?[int, byte, short, char] A[D('shortEdgePx' int)]) \> (r7 I:?[int, byte, short, char] A[D('formatShortEdgePx' int)])  \-\> B:18:0x003d \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: RETURN  (r4 I:android.graphics.Point) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isVerticalVideo' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0035: IGET  (r6 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x003a: IGET  (r7 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: SGET  (r12 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x003f: CONST  (r13 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: IF  (r12 I:?[int, byte, short, char]) \< (r13 I:?[int, byte, short, char])  \-\> B:29:0x006c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0068 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('shortEdgePx' int)])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x006a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('longEdgePx' int)])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|0x0049: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l \l0x004b: INVOKE  (r4 I:android.graphics.Point) = \l  (r0 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo)\l  (r13 I:int)\l  (r12 I:int)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.alignVideoSizeV21(int, int):android.graphics.Point type: VIRTUAL \l0x004f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0051: IGET  (r8 I:float) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.frameRate float \l0x0053: IGET  (r12 I:int) = \l  (r4 I:android.graphics.Point A[D('alignedSize' android.graphics.Point)])\l android.graphics.Point.x int \l0x0055: IGET  (r13 I:int) = \l  (r4 I:android.graphics.Point A[D('alignedSize' android.graphics.Point)])\l android.graphics.Point.y int \l0x0057: CAST  (r0 I:double) = (double) (r8 I:float A[D('frameRate' float)]) \l0x0058: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l \l0x005c: MOVE  (r1 I:?[long, double]) = (r18 I:?[long, double]) \l0x005e: INVOKE  (r12 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo)\l  (r12 I:int)\l  (r13 I:int)\l  (r1 I:double)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.isVideoSizeAndRateSupportedV21(int, int, double):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0062|0x0062: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0064|0x0064: ARITH  (r12 I:int) = (r14 I:int) + (1 int) \l0x0066: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0068|0x0068: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('longEdgePx' int)])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x006a|0x006a: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('shortEdgePx' int)])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x006c|0x006c: CONST  (r12 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x006e: INVOKE  (r12 I:int) = (r10 I:int A[D('longEdgePx' int)]), (r12 I:int) com.google.android.exoplayer2.util.Util.ceilDivide(int, int):int type: STATIC \l0x0072: ARITH  (r10 I:int A[D('longEdgePx' int)]) = (r12 I:int) * (16 int) \l0x0074: CONST  (r12 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0076: INVOKE  (r12 I:int) = (r11 I:int A[D('shortEdgePx' int)]), (r12 I:int) com.google.android.exoplayer2.util.Util.ceilDivide(int, int):int type: STATIC \l0x007a: ARITH  (r11 I:int A[D('shortEdgePx' int)]) = (r12 I:int) * (16 int) \l0x007c: ARITH  (r12 I:int) = (r10 I:int A[D('longEdgePx' int)]) * (r11 I:int A[D('shortEdgePx' int)]) \l0x007e: INVOKE  (r13 I:int) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil.maxH264DecodableFrameSize():int type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ 0x0082|0x0082: IF  (r12 I:?[int, byte, short, char]) \> (r13 I:?[int, byte, short, char])  \-\> B:26:0x0064 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0084|0x0084: NEW_INSTANCE  (r4 I:android.graphics.Point) =  android.graphics.Point \l}"];
Node_32 [shape=record,label="{32\:\ 0x0086|0x0086: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x008f \l}"];
Node_33 [shape=record,label="{33\:\ 0x0088|0x0088: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('shortEdgePx' int)])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x0089|0x0089: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isVerticalVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0091 \l}"];
Node_35 [shape=record,label="{35\:\ 0x008b|0x008b: INVOKE  \l  (r4 I:android.graphics.Point)\l  (r12 I:int)\l  (r10 I:int A[D('longEdgePx' int)])\l android.graphics.Point.\<init\>(int, int):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x008f|0x008f: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('longEdgePx' int)])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x0091|0x0091: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('longEdgePx' int)]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('shortEdgePx' int)])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x0093|0x0093: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static android.graphics.Point com.google.android.exoplayer2.video.MediaCodecVideoRenderer.getCodecMaxSize((r20 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0028\-0x0030: r10 'longEdgePx' int\l  0x002b\-0x0030: r11 'shortEdgePx' int\l  0x001b\-0x0031: r5 'aspectRatio' float\l  0x0011\-0x0031: r6 'formatLongEdgePx' int\l  0x0017\-0x0031: r7 'formatShortEdgePx' int\l  0x000b\-0x0031: r9 'isVerticalVideo' boolean\l  0x004f\-0x0064: r4 'alignedSize' android.graphics.Point\l  0x0053\-0x0064: r8 'frameRate' float\l  0x003d\-0x008b: r10 'longEdgePx' int\l  0x008f\-0x0093: r10 'longEdgePx' int\l  0x003d\-0x0093: r11 'shortEdgePx' int\l  0x003d\-0x0094: r5 'aspectRatio' float\l  0x0038\-0x0094: r6 'formatLongEdgePx' int\l  0x003d\-0x0094: r7 'formatShortEdgePx' int\l  0x0033\-0x0094: r9 'isVerticalVideo' boolean\l  ?\-0x0094: r20 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  ?\-0x0094: r21 'format' com.google.android.exoplayer2.Format\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_38;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_15 -> Node_3;
Node_16 -> Node_5;
Node_17 -> Node_7;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
Node_25 -> Node_26[style=dashed];
Node_26 -> Node_8;
Node_27 -> Node_22;
Node_28 -> Node_24;
Node_29 -> Node_30;
Node_30 -> Node_26;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_14;
Node_36 -> Node_34;
Node_37 -> Node_35;
Node_38 -> Node_14;
}

