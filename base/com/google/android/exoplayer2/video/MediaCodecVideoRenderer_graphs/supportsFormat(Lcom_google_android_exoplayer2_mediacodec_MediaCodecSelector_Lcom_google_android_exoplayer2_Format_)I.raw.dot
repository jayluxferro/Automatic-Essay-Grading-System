digraph "CFG forcom.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecSelector;Lcom\/google\/android\/exoplayer2\/Format;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0002: IGET  (r8 I:java.lang.String) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0004: INVOKE  (r11 I:boolean) = (r8 I:java.lang.String A[D('mimeType' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.isVideo(java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r11 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x000f: IGET  (r5 I:com.google.android.exoplayer2.drm.DrmInitData) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.drmInitData com.google.android.exoplayer2.drm.DrmInitData \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r11 I:int) = \l  (r5 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l com.google.android.exoplayer2.drm.DrmInitData.schemeDataCount int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r7 I:?[int, byte, short, char] A[D('i' int)]) \>= (r11 I:?[int, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: INVOKE  (r11 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData) = \l  (r5 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l  (r7 I:int A[D('i' int)])\l com.google.android.exoplayer2.drm.DrmInitData.get(int):com.google.android.exoplayer2.drm.DrmInitData$SchemeData type: VIRTUAL \l0x001c: IGET  (r11 I:boolean) = \l  (r11 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l com.google.android.exoplayer2.drm.DrmInitData.SchemeData.requiresSecureDecryption boolean \l0x001e: ARITH  (r9 I:?[int, boolean, short, byte, char] A[D('requiresSecureDecryption' boolean)]) = (r9 I:?[int, boolean, short, byte, char] A[D('requiresSecureDecryption' boolean)]) \| (r11 I:?[int, boolean, short, byte, char]) \l0x001f: ARITH  (r7 I:int A[D('i' int)]) = (r7 I:int A[D('i' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector)])\l \l0x0024: INVOKE  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo) = \l  (r0 I:com.google.android.exoplayer2.mediacodec.MediaCodecSelector)\l  (r8 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r9 I:boolean A[D('requiresSecureDecryption' boolean)])\l com.google.android.exoplayer2.mediacodec.MediaCodecSelector.getDecoderInfo(java.lang.String, boolean):com.google.android.exoplayer2.mediacodec.MediaCodecInfo type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x002e: IGET  (r11 I:java.lang.String) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.codecs java.lang.String \l0x0030: INVOKE  (r3 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r11 I:java.lang.String)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.isCodecSupported(java.lang.String):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderCapable' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0038: IGET  (r11 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x003e: IGET  (r11 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: SGET  (r11 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0044: CONST  (r12 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: IF  (r11 I:?[int, byte, short, char]) \< (r12 I:?[int, byte, short, char])  \-\> B:31:0x006c \l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x004a: IGET  (r11 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l0x004c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x004e: IGET  (r12 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l0x0050: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0052: IGET  (r13 I:float) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.frameRate float \l0x0054: CAST  (r14 I:double) = (double) (r13 I:float) \l0x0055: INVOKE  (r3 I:boolean A[D('decoderCapable' boolean)]) = \l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r11 I:int)\l  (r12 I:int)\l  (r14 I:double)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.isVideoSizeAndRateSupportedV21(int, int, double):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: IGET  (r11 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.adaptive boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|0x005b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00bd \l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|0x005d: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005f|0x005f: IGET  (r11 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.tunneling boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00bf \l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|0x0063: CONST  (r10 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0065|0x0065: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderCapable' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00c1 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0067|0x0067: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0068|0x0068: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('adaptiveSupport' int)]) \| (r10 I:?[int, boolean, short, byte, char] A[D('tunnelingSupport' int)]) \l0x006a: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r11 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char] A[D('formatSupport' int)]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x006c|0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x006e: IGET  (r11 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l0x0070: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0072: IGET  (r12 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l0x0074: ARITH  (r11 I:int) = (r11 I:int) * (r12 I:int) \l0x0075: INVOKE  (r12 I:int) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil.maxH264DecodableFrameSize():int type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x0079|0x0079: IF  (r11 I:?[int, byte, short, char]) \> (r12 I:?[int, byte, short, char])  \-\> B:36:0x00bb \l}"];
Node_33 [shape=record,label="{33\:\ 0x007b|0x007b: CONST  (r3 I:?[boolean, int, float, short, byte, char] A[D('decoderCapable' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x007c|0x007c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderCapable' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_35 [shape=record,label="{35\:\ 0x007e|0x007e: CONST_STR  (r11 I:java.lang.String) =  \"MediaCodecVideoRenderer\" \l0x0080: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0082: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0085: CONST_STR  (r13 I:java.lang.String) =  \"FalseCheck [legacyFrameSize, \" \l0x0087: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x008d: IGET  (r13 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.width int \l0x008f: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0093: CONST_STR  (r13 I:java.lang.String) =  \"x\" \l0x0095: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0099: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x009b: IGET  (r13 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.height int \l0x009d: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a1: CONST_STR  (r13 I:java.lang.String) =  \"] [\" \l0x00a3: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a7: SGET  (r13 I:java.lang.String) =  com.google.android.exoplayer2.util.Util.DEVICE_DEBUG_INFO java.lang.String \l0x00a9: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ad: CONST_STR  (r13 I:java.lang.String) =  \"]\" \l0x00af: INVOKE  (r12 I:java.lang.StringBuilder) = (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b3: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b7: INVOKE  (r11 I:java.lang.String), (r12 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_36 [shape=record,label="{36\:\ 0x00bb|0x00bb: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('decoderCapable' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x00bd|0x00bd: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00bf|0x00bf: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c1|0x00c1: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.video.MediaCodecVideoRenderer.supportsFormat((r16 'this' I:com.google.android.exoplayer2.video.MediaCodecVideoRenderer A[IMMUTABLE_TYPE, THIS]), (r17 I:com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[D('mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x0022: r7 'i' int\l  0x005f\-0x006c: r2 'adaptiveSupport' int\l  0x0068\-0x006c: r6 'formatSupport' int\l  0x0065\-0x006c: r10 'tunnelingSupport' int\l  0x00bf\-0x00c2: r2 'adaptiveSupport' int\l  0x0034\-0x00c2: r3 'decoderCapable' boolean\l  0x0028\-0x00c2: r4 'decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  0x0011\-0x00c2: r5 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  0x0004\-0x00c2: r8 'mimeType' java.lang.String\l  0x000d\-0x00c2: r9 'requiresSecureDecryption' boolean\l  0x00c1\-0x00c2: r10 'tunnelingSupport' int\l  ?\-0x00c2: r17 'mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector\l  ?\-0x00c2: r18 'format' com.google.android.exoplayer2.Format\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_3;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_37;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_3;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_22;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_22;
Node_36 -> Node_34;
Node_37 -> Node_25;
Node_38 -> Node_28;
Node_39 -> Node_30;
}

