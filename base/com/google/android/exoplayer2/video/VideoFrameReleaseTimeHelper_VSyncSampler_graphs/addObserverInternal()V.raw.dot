digraph "CFG forcom.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.addObserverInternal()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler)\l com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.observerCount int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0004: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler)\l com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.observerCount int \l0x0006: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler)\l com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.observerCount int \l0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r0 I:android.view.Choreographer) = \l  (r2 I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler)\l com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.choreographer android.view.Choreographer \l0x000d: INVOKE  \l  (r0 I:android.view.Choreographer)\l  (r2 I:android.view.Choreographer$FrameCallback)\l android.view.Choreographer.postFrameCallback(android.view.Choreographer$FrameCallback):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper.VSyncSampler.addObserverInternal((r2 'this' I:com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

