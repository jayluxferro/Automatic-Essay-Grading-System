digraph "CFG forcom.google.android.exoplayer2.ExoPlayerImplInternal.maybeThrowPeriodPrepareError()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.loadingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.loadingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l0x0006: IGET  (r1 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder)\l com.google.android.exoplayer2.ExoPlayerImplInternal.MediaPeriodHolder.prepared boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.readingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.readingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l0x0010: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = \l  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder)\l com.google.android.exoplayer2.ExoPlayerImplInternal.MediaPeriodHolder.next com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l0x0012: IGET  (r2 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.loadingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IGET  (r2 I:com.google.android.exoplayer2.Renderer[]) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.enabledRenderers com.google.android.exoplayer2.Renderer[] \l0x0018: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001e: INVOKE  (r4 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.Renderer A[D('renderer' com.google.android.exoplayer2.Renderer)])\l com.google.android.exoplayer2.Renderer.hasReadStreamToEnd():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0025 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IGET  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder) = (r5 I:com.google.android.exoplayer2.ExoPlayerImplInternal) com.google.android.exoplayer2.ExoPlayerImplInternal.loadingPeriodHolder com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder \l0x002a: IGET  (r1 I:com.google.android.exoplayer2.source.MediaPeriod) = \l  (r1 I:com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder)\l com.google.android.exoplayer2.ExoPlayerImplInternal.MediaPeriodHolder.mediaPeriod com.google.android.exoplayer2.source.MediaPeriod \l0x002c: INVOKE  (r1 I:com.google.android.exoplayer2.source.MediaPeriod) com.google.android.exoplayer2.source.MediaPeriod.maybeThrowPrepareError():void type: INTERFACE \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.ExoPlayerImplInternal.maybeThrowPeriodPrepareError((r5 'this' I:com.google.android.exoplayer2.ExoPlayerImplInternal A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x001e\-0x0024: r0 'renderer' com.google.android.exoplayer2.Renderer\l  0x0025\-0x0028: r0 'renderer' com.google.android.exoplayer2.Renderer\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_12;
}

