digraph "CFG forcom.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand.parseFromSection(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;JLcom\/google\/android\/exoplayer2\/util\/TimestampAdjuster;)Lcom\/google\/android\/exoplayer2\/metadata\/scte35\/SpliceInsertCommand;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r32 I:long) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l0x0004: INVOKE  (r2 I:int) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0008: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0085 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r14 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0015: INVOKE  (r18 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l0x0019: CONST  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: CONST  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: CONST  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CONST  (r20 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spliceEventCancelIndicator' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00be \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: INVOKE  (r27 I:int) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x002c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('headerByte' int)])\l \l0x002e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0087 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CONST  (r11 I:?[boolean, int, float, short, byte, char] A[D('outOfNetworkIndicator' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r27 I:?[int, boolean, short, byte, char] A[D('headerByte' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0089 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: CONST  (r12 I:?[boolean, int, float, short, byte, char] A[D('programSpliceFlag' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r27 I:?[int, boolean, short, byte, char] A[D('headerByte' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008b \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: CONST  (r26 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r27 I:?[int, boolean, short, byte, char] A[D('headerByte' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x008e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: CONST  (r13 I:?[boolean, int, float, short, byte, char] A[D('spliceImmediateFlag' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('programSpliceFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x004b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spliceImmediateFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x004b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|0x0047: INVOKE  (r14 I:long A[D('programSplicePts' long)]) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r36 I:long A[D('ptsAdjustment' long)])\l com.google.android.exoplayer2.metadata.scte35.TimeSignalCommand.parseSpliceTime(com.google.android.exoplayer2.util.ParsableByteArray, long):long type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('programSpliceFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0090 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: INVOKE  (r25 I:int) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0051: NEW_INSTANCE  (r18 I:java.util.ArrayList A[D('componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>)]) =  java.util.ArrayList \l0x0053: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>)])\l \l0x0055: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r25 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('componentCount' int)])\l \l0x0057: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x005a: CONST  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|0x005c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x005e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r25 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('componentCount' int)])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0060|0x0060: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:33:0x0090 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0062|0x0062: INVOKE  (r3 I:int) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0066: CONST  (r4 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x006b|0x006b: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spliceImmediateFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0071 \l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|0x006d: INVOKE  (r4 I:long A[D('componentSplicePts' long)]) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r36 I:long A[D('ptsAdjustment' long)])\l com.google.android.exoplayer2.metadata.scte35.TimeSignalCommand.parseSpliceTime(com.google.android.exoplayer2.util.ParsableByteArray, long):long type: STATIC \l}"];
Node_27 [shape=record,label="{27\:\ 0x0071|0x0071: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice) =  com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice \l0x0073: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r38 I:?[OBJECT, ARRAY] A[D('timestampAdjuster' com.google.android.exoplayer2.util.TimestampAdjuster)])\l \l0x0075: INVOKE  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.util.TimestampAdjuster)\l  (r4 I:long A[D('componentSplicePts' long)])\l com.google.android.exoplayer2.util.TimestampAdjuster.adjustTsTimestamp(long):long type: VIRTUAL \l0x0079: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007a: INVOKE  \l  (r2 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice)\l  (r3 I:int A[D('componentTag' int)])\l  (r4 I:long A[D('componentSplicePts' long)])\l  (r6 I:long)\l  (r8 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$1)\l com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand.ComponentSplice.\<init\>(int, long, long, com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$1):void type: DIRECT \l0x007d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>)])\l \l0x007f: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0082: ARITH  (r30 I:int A[D('i' int)]) = (r30 I:int A[D('i' int)]) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0085|0x0085: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('spliceEventCancelIndicator' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0087|0x0087: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outOfNetworkIndicator' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0089|0x0089: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('programSpliceFlag' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x008b|0x008b: CONST  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x008e|0x008e: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('spliceImmediateFlag' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0090|0x0090: IF  (r26 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('durationFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00b2 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0092|0x0092: INVOKE  (r2 I:int) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0096: CAST  (r0 I:long) = (long) (r2 I:int) \l0x0097: MOVE  (r28 I:?[long, double]) = (r0 I:?[long, double]) \l0x0099: CONST  (r6 I:?[long, double]) = (128(0x80, double:6.32E\-322) ?[long, double]) \l0x009b: ARITH  (r6 I:long) = (r6 I:long) & (r28 I:long A[D('firstByte' long)]) \l0x009d: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x009f: CMP_L  (r2 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a1|0x00a1: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00cc \l}"];
Node_36 [shape=record,label="{36\:\ 0x00a3|0x00a3: CONST  (r19 I:?[boolean, int, float, short, byte, char] A[D('autoReturn' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00a5|0x00a5: CONST  (r6 I:?[long, double]) = (1 ?[long, double]) \l0x00a7: ARITH  (r6 I:long) = (r6 I:long) & (r28 I:long A[D('firstByte' long)]) \l0x00a9: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x00ab: ARITH  (r6 I:long) = (r6 I:long) \<\< (r2 I:long) \l0x00ac: INVOKE  (r8 I:long) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l0x00b0: ARITH  (r20 I:long A[D('duration' long)]) = (r6 I:long) \| (r8 I:long) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b2|0x00b2: INVOKE  (r22 I:int A[D('uniqueProgramId' int)]) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x00b6: INVOKE  (r23 I:int A[D('availNum' int)]) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x00ba: INVOKE  (r24 I:int A[D('availsExpected' int)]) = \l  (r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_39 [shape=record,label="{39\:\ 0x00be|0x00be: NEW_INSTANCE  (r7 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand) =  com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand \l0x00c0: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r38 I:?[OBJECT, ARRAY] A[D('timestampAdjuster' com.google.android.exoplayer2.util.TimestampAdjuster)])\l \l0x00c2: INVOKE  (r16 I:long) = \l  (r0 I:com.google.android.exoplayer2.util.TimestampAdjuster)\l  (r14 I:long A[D('programSplicePts' long)])\l com.google.android.exoplayer2.util.TimestampAdjuster.adjustTsTimestamp(long):long type: VIRTUAL \l0x00c6: MOVE  (r8 I:?[long, double]) = (r32 I:?[long, double] A[D('spliceEventId' long)]) \l0x00c8: INVOKE  \l  (r7 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand)\l  (r8 I:long)\l  (r10 I:boolean A[D('spliceEventCancelIndicator' boolean)])\l  (r11 I:boolean A[D('outOfNetworkIndicator' boolean)])\l  (r12 I:boolean A[D('programSpliceFlag' boolean)])\l  (r13 I:boolean A[D('spliceImmediateFlag' boolean)])\l  (r14 I:long A[D('programSplicePts' long)])\l  (r16 I:long)\l  (r18 I:java.util.List A[D('componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>)])\l  (r19 I:boolean A[D('autoReturn' boolean)])\l  (r20 I:long A[D('duration' long)])\l  (r22 I:int A[D('uniqueProgramId' int)])\l  (r23 I:int A[D('availNum' int)])\l  (r24 I:int A[D('availsExpected' int)])\l com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand.\<init\>(long, boolean, boolean, boolean, boolean, long, long, java.util.List, boolean, long, int, int, int):void type: DIRECT \l}"];
Node_40 [shape=record,label="{40\:\ 0x00cb|0x00cb: RETURN  \l  (r7 I:com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand)\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x00cc|0x00cc: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('autoReturn' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{static com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand.parseFromSection((r35 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('sectionData' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:long A[D('ptsAdjustment' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38 I:com.google.android.exoplayer2.util.TimestampAdjuster A[D('timestampAdjuster' com.google.android.exoplayer2.util.TimestampAdjuster), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0053: r18 'componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>\l  0x0066\-0x0085: r3 'componentTag' int\l  0x006b\-0x0085: r4 'componentSplicePts' long\l  0x000d\-0x0085: r10 'spliceEventCancelIndicator' boolean\l  0x000e\-0x0085: r11 'outOfNetworkIndicator' boolean\l  0x000f\-0x0085: r12 'programSpliceFlag' boolean\l  0x0010\-0x0085: r13 'spliceImmediateFlag' boolean\l  0x0015\-0x0085: r14 'programSplicePts' long\l  0x005a\-0x0085: r18 'componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>\l  0x0021\-0x0085: r19 'autoReturn' boolean\l  0x0026\-0x0085: r20 'duration' long\l  0x001b\-0x0085: r22 'uniqueProgramId' int\l  0x001d\-0x0085: r23 'availNum' int\l  0x001f\-0x0085: r24 'availsExpected' int\l  0x0051\-0x0085: r25 'componentCount' int\l  0x003e\-0x0085: r26 'durationFlag' boolean\l  0x002c\-0x0085: r27 'headerByte' int\l  0x005c\-0x0085: r30 'i' int\l  0x0099\-0x00b2: r28 'firstByte' long\l  0x008e\-0x00be: r26 'durationFlag' boolean\l  0x0087\-0x00be: r27 'headerByte' int\l  0x0087\-0x00ce: r10 'spliceEventCancelIndicator' boolean\l  0x0087\-0x00ce: r11 'outOfNetworkIndicator' boolean\l  0x0087\-0x00ce: r12 'programSpliceFlag' boolean\l  0x0087\-0x00ce: r13 'spliceImmediateFlag' boolean\l  0x0087\-0x00ce: r14 'programSplicePts' long\l  0x0087\-0x00ce: r18 'componentSplices' java.util.List\<com.google.android.exoplayer2.metadata.scte35.SpliceInsertCommand$ComponentSplice\>\l  0x0087\-0x00ce: r19 'autoReturn' boolean\l  0x0087\-0x00ce: r20 'duration' long\l  0x0087\-0x00ce: r22 'uniqueProgramId' int\l  0x0087\-0x00ce: r23 'availNum' int\l  0x0087\-0x00ce: r24 'availsExpected' int\l  0x00cc\-0x00ce: r26 'durationFlag' boolean\l  0x00cc\-0x00ce: r27 'headerByte' int\l  0x00cc\-0x00ce: r28 'firstByte' long\l  0x0004\-0x00ce: r32 'spliceEventId' long\l  ?\-0x00ce: r35 'sectionData' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00ce: r36 'ptsAdjustment' long\l  ?\-0x00ce: r38 'timestampAdjuster' com.google.android.exoplayer2.util.TimestampAdjuster\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_39;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_29;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_30;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_31;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_32;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_22;
Node_28 -> Node_3;
Node_29 -> Node_8;
Node_30 -> Node_11;
Node_31 -> Node_14;
Node_32 -> Node_17;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_38;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_41 -> Node_37;
}

