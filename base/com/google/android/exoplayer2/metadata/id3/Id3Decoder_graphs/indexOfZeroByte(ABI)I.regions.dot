digraph "CFG forcom.google.android.exoplayer2.metadata.id3.Id3Decoder.indexOfZeroByte([BI)I" {
subgraph cluster_Region_322150574 {
label = "R(3:0|(1:(2:(1:10)|(1:5)))|9)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r3\l}"];
subgraph cluster_LoopRegion_984046208 {
label = "LOOP:0: (1:(2:(1:10)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|if (r0 \< r2.length) goto L_0x0004\l}"];
subgraph cluster_Region_436347726 {
label = "R(1:(2:(1:10)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1726793842 {
label = "R(2:(1:10)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_651341106 {
label = "IF [B:4:0x0006] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|if (r2[r0] == 0) goto L_0x0008\l}"];
subgraph cluster_Region_678059926 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1974586088 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x0009\l|r0++\l}"];
}
}
}
}
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2.length\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v3 'i' int) binds: [B:0:0x0000, B:5:0x0009] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x0009\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000c|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0008|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.metadata.id3.Id3Decoder.indexOfZeroByte((r2v0 'data' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'fromIndex' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_6 -> Node_9;
Node_7 -> Node_6;
Node_8 -> Node_10;
}

