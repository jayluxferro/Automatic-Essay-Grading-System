digraph "CFG forcom.google.android.exoplayer2.metadata.id3.Id3Decoder.validateFrames(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;IIZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r9 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0004\l|0x0004: INVOKE  (r10 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_ENTER]\l0x0008: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameHeaderSize' int)])\l A[Catch:\{ all \-\> 0x00cc \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r10 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:65:0x00d3 A[Catch:\{ all \-\> 0x00cc \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r10 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x00cc \}]\l0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('majorVersion' int)])\l A[Catch:\{ all \-\> 0x00cc \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r10 I:?[int, byte, short, char])  \-\> B:14:0x002e A[Catch:\{ all \-\> 0x00cc \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r7 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}]\l0x0015: INVOKE  (r4 I:long) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}]\l0x0019: INVOKE  (r2 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('id' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CONST  (r10 I:?[long, double]) = (0 ?[long, double]) \l0x0021: CMP_L  (r10 I:int) = (r4 I:long A[D('frameSize' long)]), (r10 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('flags' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0028: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x002a: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: RETURN  (r10 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|SYNTHETIC\lSplitter:B:14:0x002e\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x002e\l|0x002e: INVOKE  (r7 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_ENTER]\l0x0032: INVOKE  (r10 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0036: CAST  (r4 I:long) = (long) (r10 I:int) \l0x0037: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x003a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('majorVersion' int)])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0075 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unsignedIntFrameSizeHack' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0075 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: CONST  (r10 I:?[long, double]) = (8421504(0x808080, double:4.160776E\-317) ?[long, double]) \l0x0043: ARITH  (r10 I:long) = (r10 I:long) & (r4 I:long A[D('frameSize' long)]) \l0x0044: CONST  (r12 I:?[long, double]) = (0 ?[long, double]) \l0x0046: CMP_L  (r10 I:int) = (r10 I:long), (r12 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0051 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004a|0x004a: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x004d: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0051|0x0051: CONST  (r10 I:?[long, double]) = (255(0xff, double:1.26E\-321) ?[long, double]) \l0x0053: ARITH  (r10 I:long) = (r10 I:long) & (r4 I:long A[D('frameSize' long)]) \l0x0054: CONST  (r12 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0056: ARITH  (r12 I:long) = (r4 I:long A[D('frameSize' long)]) \>\> (r12 I:long) \l0x0058: CONST  (r14 I:?[long, double]) = (255(0xff, double:1.26E\-321) ?[long, double]) \l0x005a: ARITH  (r12 I:long) = (r12 I:long) & (r14 I:long) \l0x005b: CONST  (r14 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x005c: ARITH  (r12 I:long) = (r12 I:long) \<\< (r14 I:long) \l0x005d: ARITH  (r10 I:long) = (r10 I:long) \| (r12 I:long) \l0x005e: CONST  (r12 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0060: ARITH  (r12 I:long) = (r4 I:long A[D('frameSize' long)]) \>\> (r12 I:long) \l0x0062: CONST  (r14 I:?[long, double]) = (255(0xff, double:1.26E\-321) ?[long, double]) \l0x0064: ARITH  (r12 I:long) = (r12 I:long) & (r14 I:long) \l0x0065: CONST  (r14 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x0067: ARITH  (r12 I:long) = (r12 I:long) \<\< (r14 I:long) \l0x0068: ARITH  (r10 I:long) = (r10 I:long) \| (r12 I:long) \l0x0069: CONST  (r12 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l0x006b: ARITH  (r12 I:long) = (r4 I:long A[D('frameSize' long)]) \>\> (r12 I:long) \l0x006d: CONST  (r14 I:?[long, double]) = (255(0xff, double:1.26E\-321) ?[long, double]) \l0x006f: ARITH  (r12 I:long) = (r12 I:long) & (r14 I:long) \l0x0070: CONST  (r14 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0072: ARITH  (r12 I:long) = (r12 I:long) \<\< (r14 I:long) \l0x0073: ARITH  (r4 I:long A[D('frameSize' long)]) = (r10 I:long) \| (r12 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0075|0x0075: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0076: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0077: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0078: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('majorVersion' int)])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x007a|0x007a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x009f \l}"];
Node_26 [shape=record,label="{26\:\ 0x007c|0x007c: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x007e|0x007e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x009b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0080|0x0080: CONST  (r6 I:?[boolean, int, float, short, byte, char] A[D('hasGroupIdentifier' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0081|0x0081: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0083|0x0083: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x009d \l}"];
Node_31 [shape=record,label="{31\:\ 0x0085|0x0085: CONST  (r3 I:?[boolean, int, float, short, byte, char] A[D('hasDataLength' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0086|0x0086: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0087|0x0087: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasGroupIdentifier' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x008b \l}"];
Node_34 [shape=record,label="{34\:\ 0x0089|0x0089: ARITH  (r8 I:int A[D('minimumFrameSize' int)]) = (r8 I:int A[D('minimumFrameSize' int)]) + (1 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x008b|0x008b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasDataLength' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x008f \l}"];
Node_36 [shape=record,label="{36\:\ 0x008d|0x008d: ARITH  (r8 I:int A[D('minimumFrameSize' int)]) = (r8 I:int A[D('minimumFrameSize' int)]) + (4 int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x008f|0x008f: CAST  (r10 I:long) = (long) (r8 I:int A[D('minimumFrameSize' int)]) \l0x0090: CMP_L  (r10 I:int) = (r4 I:long A[D('frameSize' long)]), (r10 I:long) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0092|0x0092: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:53:0x00b3 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0094|0x0094: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0095: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0097: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x009b|0x009b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasGroupIdentifier' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x009d|0x009d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasDataLength' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_42 [shape=record,label="{42\:\ 0x009f|0x009f: CONST  (r10 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x00a0: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('majorVersion' int)])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x00a2|0x00a2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0086 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00a4|0x00a4: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00a6|0x00a6: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00af \l}"];
Node_46 [shape=record,label="{46\:\ 0x00a8|0x00a8: CONST  (r6 I:?[boolean, int, float, short, byte, char] A[D('hasGroupIdentifier' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x00a9|0x00a9: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00ab|0x00ab: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x00b1 \l}"];
Node_49 [shape=record,label="{49\:\ 0x00ad|0x00ad: CONST  (r3 I:?[boolean, int, float, short, byte, char] A[D('hasDataLength' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x00af|0x00af: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasGroupIdentifier' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_52 [shape=record,label="{52\:\ 0x00b1|0x00b1: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasDataLength' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_53 [shape=record,label="{53\:\ 0x00b3|SYNTHETIC\lSplitter:B:53:0x00b3\l}"];
Node_54 [shape=record,label="{54\:\ ?|Splitter:B:53:0x00b3\l|0x00b3: INVOKE  (r10 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_55 [shape=record,label="{55\:\ 0x00b6|0x00b7: CAST  (r10 I:long) = (long) (r10 I:int) \l0x00b8: CMP_L  (r10 I:int) = (r10 I:long), (r4 I:long A[D('frameSize' long)]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x00ba|0x00ba: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:58:0x00c4 \l}"];
Node_57 [shape=record,label="{57\:\ 0x00bc|0x00bc: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bd: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00bf: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
Node_58 [shape=record,label="{58\:\ 0x00c4|0x00c4: CAST  (r10 I:int) = (int) (r4 I:long A[D('frameSize' long)]) \l0x00c5: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l}"];
Node_59 [shape=record,label="{59\:\ 0x00c7|SYNTHETIC\lSplitter:B:59:0x00c7\l}"];
Node_60 [shape=record,label="{60\:\ ?|Splitter:B:59:0x00c7\l|0x00c7: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r10 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x00cc \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_62 [shape=record,label="{62\:\ 0x00cc|ExcHandler: all null\lSplitter:B:1:0x0004\l|0x00cc: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_63 [shape=record,label="{63\:\ 0x00cd|0x00cd: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00cf: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
Node_64 [shape=record,label="{64\:\ 0x00d2|0x00d2: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_65 [shape=record,label="{65\:\ 0x00d3|0x00d3: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00d4: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00d6: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.metadata.id3.Id3Decoder.validateFrames((r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('id3Data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('majorVersion' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('frameHeaderSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[D('unsignedIntFrameSizeHack' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001d\-0x002d: r2 'flags' int\l  0x0019\-0x002d: r4 'frameSize' long\l  0x0015\-0x002d: r7 'id' int\l  0x0087\-0x009b: r8 'minimumFrameSize' int\l  0x0038\-0x00cc: r2 'flags' int\l  0x0077\-0x00cc: r3 'hasDataLength' boolean\l  0x0037\-0x00cc: r4 'frameSize' long\l  0x0076\-0x00cc: r6 'hasGroupIdentifier' boolean\l  0x0032\-0x00cc: r7 'id' int\l  0x00b3\-0x00cc: r8 'minimumFrameSize' int\l  0x0004\-0x00da: r9 'startPosition' int\l  ?\-0x00da: r16 'id3Data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00da: r17 'majorVersion' int\l  ?\-0x00da: r18 'frameHeaderSize' int\l  ?\-0x00da: r19 'unsignedIntFrameSizeHack' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_62;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_65;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_14 -> Node_62;
Node_15 -> Node_16;
Node_15 -> Node_62;
Node_16 -> Node_8;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_13;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_42;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_40;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_41;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_53;
Node_39 -> Node_13;
Node_40 -> Node_29;
Node_41 -> Node_32;
Node_42 -> Node_43;
Node_43 -> Node_32;
Node_43 -> Node_44[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_51;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_52;
Node_49 -> Node_32;
Node_51 -> Node_47;
Node_52 -> Node_32;
Node_53 -> Node_54;
Node_53 -> Node_62;
Node_54 -> Node_55;
Node_54 -> Node_62;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_13;
Node_58 -> Node_59;
Node_59 -> Node_60;
Node_59 -> Node_62;
Node_60 -> Node_62;
Node_60 -> Node_1;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_65 -> Node_13;
}

