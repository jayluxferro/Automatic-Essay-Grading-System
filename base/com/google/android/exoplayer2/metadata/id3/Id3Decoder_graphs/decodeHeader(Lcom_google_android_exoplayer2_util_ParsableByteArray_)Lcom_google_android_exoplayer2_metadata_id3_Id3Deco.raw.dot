digraph "CFG forcom.google.android.exoplayer2.metadata.id3.Id3Decoder.decodeHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Lcom\/google\/android\/exoplayer2\/metadata\/id3\/Id3Decoder$Id3Header;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r13 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: INVOKE  (r11 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0008: CONST  (r12 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST_STR  (r9 I:java.lang.String) =  \"Id3Decoder\" \l0x000e: CONST_STR  (r11 I:java.lang.String) =  \"Data too short to be an ID3 tag\" \l0x0010: INVOKE  (r9 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0013: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  \l  (r9 I:com.google.android.exoplayer2.metadata.id3.Id3Decoder$Id3Header)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: INVOKE  (r5 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL \l0x0019: SGET  (r11 I:int) =  com.google.android.exoplayer2.metadata.id3.Id3Decoder.ID3_TAG int \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('id' int)]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0037 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: CONST_STR  (r9 I:java.lang.String) =  \"Id3Decoder\" \l0x001f: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0024: CONST_STR  (r12 I:java.lang.String) =  \"Unexpected first three bytes of ID3 tag header: \" \l0x0026: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r5 I:int A[D('id' int)]) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0032: INVOKE  (r9 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0035: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: INVOKE  (r8 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x003b: INVOKE  \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x003e: INVOKE  (r1 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0042: INVOKE  (r2 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readSynchSafeInt():int type: VIRTUAL \l0x0046: CONST  (r11 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('majorVersion' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0059 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isCompressed' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: CONST_STR  (r9 I:java.lang.String) =  \"Id3Decoder\" \l0x0052: CONST_STR  (r11 I:java.lang.String) =  \"Skipped ID3 tag with majorVersion=2 and undefined compression scheme\" \l0x0054: INVOKE  (r9 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0057: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|0x0059: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isCompressed' boolean)]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|0x005b: CONST  (r11 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|0x005c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('majorVersion' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x007d \l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|0x0060: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0062|0x0062: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasExtendedHeader' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006f \l}"];
Node_21 [shape=record,label="{21\:\ 0x0065|0x0065: INVOKE  (r0 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0069: INVOKE  \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('extendedHeaderSize' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x006c: ARITH  (r10 I:int) = (r0 I:int A[D('extendedHeaderSize' int)]) + (4 int) \l0x006e: ARITH  (r2 I:int A[D('framesSize' int)]) = (r2 I:int A[D('framesSize' int)]) \- (r10 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: IF  (r8 I:?[int, byte, short, char] A[D('majorVersion' int)]) \>= (r13 I:?[int, byte, short, char])  \-\> B:41:0x00b9 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0071|0x0071: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0073|0x0073: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00b9 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0075|0x0075: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.metadata.id3.Id3Decoder$Id3Header) =  com.google.android.exoplayer2.metadata.id3.Id3Decoder$Id3Header \l0x0077: INVOKE  \l  (r9 I:com.google.android.exoplayer2.metadata.id3.Id3Decoder$Id3Header)\l  (r8 I:int A[D('majorVersion' int)])\l  (r7 I:boolean A[D('isUnsynchronized' boolean)])\l  (r2 I:int A[D('framesSize' int)])\l com.google.android.exoplayer2.metadata.id3.Id3Decoder.Id3Header.\<init\>(int, boolean, int):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x007b|0x007b: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x007d|0x007d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('majorVersion' int)]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x009e \l}"];
Node_28 [shape=record,label="{28\:\ 0x007f|0x007f: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0081|0x0081: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x009a \l}"];
Node_30 [shape=record,label="{30\:\ 0x0083|0x0083: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0084|0x0084: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasExtendedHeader' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0090 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0086|0x0086: INVOKE  (r0 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readSynchSafeInt():int type: VIRTUAL \l0x008a: ARITH  (r10 I:int) = (r0 I:int A[D('extendedHeaderSize' int)]) + (\-4 int) \l0x008c: INVOKE  \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r10 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x008f: ARITH  (r2 I:int A[D('framesSize' int)]) = (r2 I:int A[D('framesSize' int)]) \- (r0 I:int A[D('extendedHeaderSize' int)]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0090|0x0090: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0092|0x0092: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x009c \l}"];
Node_35 [shape=record,label="{35\:\ 0x0094|0x0094: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x0095|0x0095: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasFooter' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006f \l}"];
Node_37 [shape=record,label="{37\:\ 0x0097|0x0097: ARITH  (r2 I:int A[D('framesSize' int)]) = (r2 I:int A[D('framesSize' int)]) + (\-10 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x009a|0x009a: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasExtendedHeader' boolean)]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_39 [shape=record,label="{39\:\ 0x009c|0x009c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x009e|0x009e: CONST_STR  (r9 I:java.lang.String) =  \"Id3Decoder\" \l0x00a0: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00a2: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a5: CONST_STR  (r12 I:java.lang.String) =  \"Skipped ID3 tag with unsupported majorVersion=\" \l0x00a7: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ab: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r8 I:int A[D('majorVersion' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00af: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b3: INVOKE  (r9 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x00b6: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00b9|0x00b9: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.metadata.id3.Id3Decoder$Id3Header com.google.android.exoplayer2.metadata.id3.Id3Decoder.decodeHeader((r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x004e\-0x0059: r6 'isCompressed' boolean\l  0x0069\-0x006f: r0 'extendedHeaderSize' int\l  0x0063\-0x006f: r3 'hasExtendedHeader' boolean\l  0x0075\-0x007b: r7 'isUnsynchronized' boolean\l  0x008a\-0x0090: r0 'extendedHeaderSize' int\l  0x0084\-0x009a: r3 'hasExtendedHeader' boolean\l  0x0095\-0x009a: r4 'hasFooter' boolean\l  0x009c\-0x009e: r3 'hasExtendedHeader' boolean\l  0x0042\-0x00ba: r1 'flags' int\l  0x0046\-0x00ba: r2 'framesSize' int\l  0x0019\-0x00ba: r5 'id' int\l  0x003b\-0x00ba: r8 'majorVersion' int\l  ?\-0x00ba: r14 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_3;
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_41;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_41;
Node_25 -> Node_3;
Node_26 -> Node_20;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_40;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_36 -> Node_37[style=dashed];
Node_37 -> Node_22;
Node_38 -> Node_31;
Node_39 -> Node_36;
Node_40 -> Node_3;
Node_41 -> Node_25;
}

