digraph "CFG forcom.google.android.exoplayer2.metadata.id3.PrivFrame.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (17 ?[int, float, short, byte, char]) \l0x0002: IGET  (r1 I:java.lang.String) = (r3 I:com.google.android.exoplayer2.metadata.id3.PrivFrame) com.google.android.exoplayer2.metadata.id3.PrivFrame.owner java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:java.lang.String) = (r3 I:com.google.android.exoplayer2.metadata.id3.PrivFrame) com.google.android.exoplayer2.metadata.id3.PrivFrame.owner java.lang.String \l0x0008: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: ARITH  (r0 I:int A[D('result' int)]) = (r1 I:int) + (527 int) \l0x000e: ARITH  (r1 I:int) = (r0 I:int A[D('result' int)]) * (31 int) \l0x0010: IGET  (r2 I:byte[]) = (r3 I:com.google.android.exoplayer2.metadata.id3.PrivFrame) com.google.android.exoplayer2.metadata.id3.PrivFrame.privateData byte[] \l0x0012: INVOKE  (r2 I:int) = (r2 I:byte[]) java.util.Arrays.hashCode(byte[]):int type: STATIC \l0x0016: ARITH  (r0 I:int A[D('result' int)]) = (r1 I:int) + (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN  (r0 I:int A[D('result' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.metadata.id3.PrivFrame.hashCode((r3 'this' I:com.google.android.exoplayer2.metadata.id3.PrivFrame A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0002\-0x001a: r0 'result' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

