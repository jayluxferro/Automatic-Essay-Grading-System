digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferEnd(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r10)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r10.streamCount \<= 0) goto L_0x0071\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|r0 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v12 boolean) binds: [B:21:0x0071, B:4:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r0)\llong r8 = android.os.SystemClock.elapsedRealtime()\lint r1 = (int) (r8 \- r10.sampleStartTimeMs)\lr10.totalElapsedTimeMs = r10.totalElapsedTimeMs + ((long) r1)\lr10.totalBytesTransferred = r10.totalBytesTransferred + r10.sampleBytesTransferred\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r1 \<= 0) goto L_0x0059\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|float r7 = (float) ((r10.sampleBytesTransferred * 8000) \/ ((long) r1))\lr10.slidingPercentile.addSample((int) java.lang.Math.sqrt((double) r10.sampleBytesTransferred), r7)\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|if ((r10.totalElapsedTimeMs \> 2000 ? 1 : (r10.totalElapsedTimeMs == 2000 ? 0 : \-1)) \>= 0) goto L_0x0047\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e}"];
Node_10 [shape=record,label="{10\:\ 0x0045|if ((r10.totalBytesTransferred \> android.support.p000v4.media.session.PlaybackStateCompat.ACTION_SET_SHUFFLE_MODE_ENABLED ? 1 : (r10.totalBytesTransferred == android.support.p000v4.media.session.PlaybackStateCompat.ACTION_SET_SHUFFLE_MODE_ENABLED ? 0 : \-1)) \< 0) goto L_0x0059\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|float r6 = r10.slidingPercentile.getPercentile(0.5f)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|if (java.lang.Float.isNaN(r6) == false) goto L_0x0073\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|r2 = \-1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|PHI: r2 \l  PHI: (r2v18 long) = (r2v17 long), (r2v19 long) binds: [B:22:0x0073, B:13:0x0055] A[DONT_GENERATE, DONT_INLINE]\l|r10.bitrateEstimate = r2\l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|r0 = r10\lnotifyBandwidthSample(r1, r10.sampleBytesTransferred, r10.bitrateEstimate)\lint r0 = r10.streamCount + \-1\lr10.streamCount = r0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0067|if (r0 \<= 0) goto L_0x006b\l}"];
Node_17 [shape=record,label="{17\:\ 0x0069|r10.sampleStartTimeMs = r8\l}"];
Node_18 [shape=record,label="{18\:\ 0x006b|r10.sampleBytesTransferred = 0\l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|monitor\-exit(r10)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0070|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|r0 = false\l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|long r2 = (long) r6\l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|REMOVE\l}"];
Node_25 [shape=record,label="{25\:\ 0x0077|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferEnd((r10v0 'this' com.google.android.exoplayer2.upstream.DefaultBandwidthMeter A[IMMUTABLE_TYPE, THIS]), (r11v0 'source' java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_5;
Node_22 -> Node_14;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

