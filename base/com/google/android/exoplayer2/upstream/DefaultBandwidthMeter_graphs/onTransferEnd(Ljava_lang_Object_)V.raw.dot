digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferEnd(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0075 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0071 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0075 \}]\l0x0009: INVOKE  (r8 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC A[Catch:\{ all \-\> 0x0075 \}]\l0x000d: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleStartTimeMs long A[Catch:\{ all \-\> 0x0075 \}]\l0x000f: ARITH  (r2 I:long) = (r8 I:long A[D('nowMs' long)]) \- (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0011: CAST  (r1 I:int) = (int) (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0012: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalElapsedTimeMs long A[Catch:\{ all \-\> 0x0075 \}]\l0x0014: CAST  (r4 I:long) = (long) (r1 I:int A[D('sampleElapsedTimeMs' int)]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0015: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0016: IPUT  \l  (r2 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalElapsedTimeMs long A[Catch:\{ all \-\> 0x0075 \}]\l0x0018: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x001a: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x001c: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x001d: IPUT  \l  (r2 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char] A[D('sampleElapsedTimeMs' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0059 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x0023: CONST  (r4 I:?[long, double]) = (8000(0x1f40, double:3.9525E\-320) ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0025: ARITH  (r2 I:long) = (r2 I:long) * (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0026: CAST  (r4 I:long) = (long) (r1 I:int A[D('sampleElapsedTimeMs' int)]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0027: ARITH  (r2 I:long) = (r2 I:long) \/ (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0028: CAST  (r7 I:float) = (float) (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x0029: IGET  (r0 I:com.google.android.exoplayer2.util.SlidingPercentile) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.slidingPercentile com.google.android.exoplayer2.util.SlidingPercentile A[Catch:\{ all \-\> 0x0075 \}]\l0x002b: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x002d: CAST  (r2 I:double) = (double) (r2 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l0x002e: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.sqrt(double):double type: STATIC A[Catch:\{ all \-\> 0x0075 \}]\l0x0032: CAST  (r2 I:int) = (int) (r2 I:double) A[Catch:\{ all \-\> 0x0075 \}]\l0x0033: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.SlidingPercentile)\l  (r2 I:int)\l  (r7 I:float A[D('bitsPerSecond' float)])\l com.google.android.exoplayer2.util.SlidingPercentile.addSample(int, float):void type: VIRTUAL A[Catch:\{ all \-\> 0x0075 \}]\l0x0036: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalElapsedTimeMs long A[Catch:\{ all \-\> 0x0075 \}]\l0x0038: CONST  (r4 I:?[long, double]) = (2000(0x7d0, double:9.88E\-321) ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l0x003a: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x0047 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.totalBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x0040: CONST  (r4 I:?[long, double]) = (524288(0x80000, double:2.590327E\-318) ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l0x0043: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0059 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IGET  (r0 I:com.google.android.exoplayer2.util.SlidingPercentile) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.slidingPercentile com.google.android.exoplayer2.util.SlidingPercentile A[Catch:\{ all \-\> 0x0075 \}]\l0x0049: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0075 \}]\l0x004b: INVOKE  (r6 I:float) = \l  (r0 I:com.google.android.exoplayer2.util.SlidingPercentile)\l  (r2 I:float)\l com.google.android.exoplayer2.util.SlidingPercentile.getPercentile(float):float type: VIRTUAL A[Catch:\{ all \-\> 0x0075 \}]\l0x004f: INVOKE  (r0 I:boolean) = (r6 I:float A[D('bitrateEstimateFloat' float)]) java.lang.Float.isNaN(float):boolean type: STATIC A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0073 A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|0x0057: IPUT  \l  (r2 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.bitrateEstimate long A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: IGET  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}]\l0x005b: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.bitrateEstimate long A[Catch:\{ all \-\> 0x0075 \}]\l0x005d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0075 \}]\l0x005e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l  (r1 I:int A[D('sampleElapsedTimeMs' int)])\l  (r2 I:long)\l  (r4 I:long)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.notifyBandwidthSample(int, long, long):void type: DIRECT A[Catch:\{ all \-\> 0x0075 \}]\l0x0061: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0075 \}]\l0x0063: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x0075 \}]\l0x0065: IPUT  \l  (r0 I:int)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0067|0x0067: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x006b A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0069|0x0069: IPUT  \l  (r8 I:long A[D('nowMs' long)])\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleStartTimeMs long A[Catch:\{ all \-\> 0x0075 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x006b|0x006b: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0075 \}]\l0x006d: IPUT  \l  (r2 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0075 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|0x006f: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0070|0x0070: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0073|0x0073: CAST  (r2 I:long) = (long) (r6 I:float A[D('bitrateEstimateFloat' float)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0075: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|0x0076: MONITOR_EXIT  (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0077|0x0077: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferEnd((r10 'this' I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.Object A[D('source' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x004f\-0x0059: r6 'bitrateEstimateFloat' float\l  0x0029\-0x0059: r7 'bitsPerSecond' float\l  0x0012\-0x0071: r1 'sampleElapsedTimeMs' int\l  0x000d\-0x0071: r8 'nowMs' long\l  0x0073\-0x0075: r1 'sampleElapsedTimeMs' int\l  0x0073\-0x0075: r6 'bitrateEstimateFloat' float\l  0x0073\-0x0075: r7 'bitsPerSecond' float\l  0x0073\-0x0075: r8 'nowMs' long\l  ?\-0x0077: r11 'source' java.lang.Object\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_5;
Node_22 -> Node_14;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

