digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onBytesTransferred(Ljava\/lang\/Object;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:long) = \l  (r4 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0009 \}, TRY_ENTER]\l0x0003: CAST  (r2 I:long) = (long) (r6 I:int A[D('bytes' int)]) A[Catch:\{ all \-\> 0x0009 \}]\l0x0004: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) A[Catch:\{ all \-\> 0x0009 \}]\l0x0005: IPUT  \l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleBytesTransferred long A[Catch:\{ all \-\> 0x0009 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0009: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onBytesTransferred((r4 'this' I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[D('source' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('bytes' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000b: r5 'source' java.lang.Object\l  ?\-0x000b: r6 'bytes' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

