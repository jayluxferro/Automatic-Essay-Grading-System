digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferStart(Ljava\/lang\/Object;Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0013 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r0 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC A[Catch:\{ all \-\> 0x0013 \}]\l0x0009: IPUT  \l  (r0 I:long)\l  (r2 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.sampleStartTimeMs long A[Catch:\{ all \-\> 0x0013 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0013 \}]\l0x000d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) A[Catch:\{ all \-\> 0x0013 \}]\l0x000f: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter)\l com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.streamCount int A[Catch:\{ all \-\> 0x0013 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0013: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.DefaultBandwidthMeter.onTransferStart((r2 'this' I:com.google.android.exoplayer2.upstream.DefaultBandwidthMeter A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('source' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0015: r3 'source' java.lang.Object\l  ?\-0x0015: r4 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

