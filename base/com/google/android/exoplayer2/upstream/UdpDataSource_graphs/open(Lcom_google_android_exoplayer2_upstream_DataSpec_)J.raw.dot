digraph "CFG forcom.google.android.exoplayer2.upstream.UdpDataSource.open(Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:android.net.Uri) = \l  (r7 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l com.google.android.exoplayer2.upstream.DataSpec.uri android.net.Uri \l0x0002: IPUT  \l  (r3 I:android.net.Uri)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.uri android.net.Uri \l0x0004: IGET  (r3 I:android.net.Uri) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.uri android.net.Uri \l0x0006: INVOKE  (r1 I:java.lang.String) = (r3 I:android.net.Uri) android.net.Uri.getHost():java.lang.String type: VIRTUAL \l0x000a: IGET  (r3 I:android.net.Uri) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.uri android.net.Uri \l0x000c: INVOKE  (r2 I:int) = (r3 I:android.net.Uri) android.net.Uri.getPort():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|SYNTHETIC\lSplitter:B:1:0x0010\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0010\l|0x0010: INVOKE  (r3 I:java.net.InetAddress) = (r1 I:java.lang.String A[D('host' java.lang.String)]) java.net.InetAddress.getByName(java.lang.String):java.net.InetAddress type: STATIC A[Catch:\{ IOException \-\> 0x005b \}, TRY_ENTER]\l0x0014: IPUT  \l  (r3 I:java.net.InetAddress)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x0016: NEW_INSTANCE  (r3 I:java.net.InetSocketAddress) =  java.net.InetSocketAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x0018: IGET  (r4 I:java.net.InetAddress) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x001a: INVOKE  \l  (r3 I:java.net.InetSocketAddress)\l  (r4 I:java.net.InetAddress)\l  (r2 I:int A[D('port' int)])\l java.net.InetSocketAddress.\<init\>(java.net.InetAddress, int):void type: DIRECT A[Catch:\{ IOException \-\> 0x005b \}]\l0x001d: IPUT  \l  (r3 I:java.net.InetSocketAddress)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.socketAddress java.net.InetSocketAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x001f: IGET  (r3 I:java.net.InetAddress) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x0021: INVOKE  (r3 I:boolean) = (r3 I:java.net.InetAddress) java.net.InetAddress.isMulticastAddress():boolean type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0051 A[Catch:\{ IOException \-\> 0x005b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: NEW_INSTANCE  (r3 I:java.net.MulticastSocket) =  java.net.MulticastSocket A[Catch:\{ IOException \-\> 0x005b \}]\l0x0029: IGET  (r4 I:java.net.InetSocketAddress) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socketAddress java.net.InetSocketAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x002b: INVOKE  \l  (r3 I:java.net.MulticastSocket)\l  (r4 I:java.net.SocketAddress)\l java.net.MulticastSocket.\<init\>(java.net.SocketAddress):void type: DIRECT A[Catch:\{ IOException \-\> 0x005b \}]\l0x002e: IPUT  \l  (r3 I:java.net.MulticastSocket)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket A[Catch:\{ IOException \-\> 0x005b \}]\l0x0030: IGET  (r3 I:java.net.MulticastSocket) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket A[Catch:\{ IOException \-\> 0x005b \}]\l0x0032: IGET  (r4 I:java.net.InetAddress) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x0034: INVOKE  \l  (r3 I:java.net.MulticastSocket)\l  (r4 I:java.net.InetAddress)\l java.net.MulticastSocket.joinGroup(java.net.InetAddress):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x005b \}]\l0x0037: IGET  (r3 I:java.net.MulticastSocket) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket A[Catch:\{ IOException \-\> 0x005b \}]\l0x0039: IPUT  \l  (r3 I:java.net.DatagramSocket)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket A[Catch:\{ IOException \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|SYNTHETIC\lSplitter:B:5:0x003b\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x003b\l|0x003b: IGET  (r3 I:java.net.DatagramSocket) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket A[Catch:\{ SocketException \-\> 0x0062 \}, TRY_ENTER]\l0x003d: IGET  (r4 I:int) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socketTimeoutMillis int A[Catch:\{ SocketException \-\> 0x0062 \}]\l0x003f: INVOKE  (r3 I:java.net.DatagramSocket), (r4 I:int) java.net.DatagramSocket.setSoTimeout(int):void type: VIRTUAL A[Catch:\{ SocketException \-\> 0x0062 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0042|0x0042: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0043: IPUT  \l  (r3 I:boolean)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.opened boolean \l0x0045: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.UdpDataSource\>) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.UdpDataSource\>) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l0x004b: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.TransferListener)\l  (r6 I:java.lang.Object)\l  (r7 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l com.google.android.exoplayer2.upstream.TransferListener.onTransferStart(java.lang.Object, com.google.android.exoplayer2.upstream.DataSpec):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: RETURN  (r4 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|SYNTHETIC\lSplitter:B:12:0x0051\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0051\l|0x0051: NEW_INSTANCE  (r3 I:java.net.DatagramSocket) =  java.net.DatagramSocket A[Catch:\{ IOException \-\> 0x005b \}, TRY_ENTER]\l0x0053: IGET  (r4 I:java.net.InetSocketAddress) = (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socketAddress java.net.InetSocketAddress A[Catch:\{ IOException \-\> 0x005b \}]\l0x0055: INVOKE  \l  (r3 I:java.net.DatagramSocket)\l  (r4 I:java.net.SocketAddress)\l java.net.DatagramSocket.\<init\>(java.net.SocketAddress):void type: DIRECT A[Catch:\{ IOException \-\> 0x005b \}]\l0x0058: IPUT  \l  (r3 I:java.net.DatagramSocket)\l  (r6 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket A[Catch:\{ IOException \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|ExcHandler: IOException null\lSplitter:B:1:0x0010\l|0x005b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|0x005c: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException) =  com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException \l0x005e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException)\l  (r0 I:java.io.IOException A[D('e' java.io.IOException)])\l com.google.android.exoplayer2.upstream.UdpDataSource.UdpDataSourceException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0062|ExcHandler: SocketException null\lSplitter:B:5:0x003b\l|0x0062: MOVE_EXCEPTION  (r0 I:?[OBJECT] A[D('e' java.io.IOException)]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|0x0063: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException) =  com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException \l0x0065: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException)\l  (r0 I:java.io.IOException A[D('e' java.net.SocketException)])\l com.google.android.exoplayer2.upstream.UdpDataSource.UdpDataSourceException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|0x0068: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.upstream.UdpDataSource.open((r6 'this' I:com.google.android.exoplayer2.upstream.UdpDataSource A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x005c\-0x0062: r0 'e' java.io.IOException\l  0x0063\-0x0068: r0 'e' java.net.SocketException\l  0x000a\-0x0068: r1 'host' java.lang.String\l  0x0010\-0x0068: r2 'port' int\l  ?\-0x0068: r7 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.UdpDataSource$UdpDataSourceException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_15;
Node_13 -> Node_5;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

