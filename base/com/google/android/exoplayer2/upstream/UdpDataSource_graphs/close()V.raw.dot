digraph "CFG forcom.google.android.exoplayer2.upstream.UdpDataSource.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IPUT  \l  (r2 I:android.net.Uri)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.uri android.net.Uri \l0x0004: IGET  (r0 I:java.net.MulticastSocket) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0008\l|0x0008: IGET  (r0 I:java.net.MulticastSocket) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket A[Catch:\{ IOException \-\> 0x0032 \}, TRY_ENTER]\l0x000a: IGET  (r1 I:java.net.InetAddress) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress A[Catch:\{ IOException \-\> 0x0032 \}]\l0x000c: INVOKE  \l  (r0 I:java.net.MulticastSocket)\l  (r1 I:java.net.InetAddress)\l java.net.MulticastSocket.leaveGroup(java.net.InetAddress):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IPUT  \l  (r2 I:java.net.MulticastSocket)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.multicastSocket java.net.MulticastSocket \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r0 I:java.net.DatagramSocket) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r0 I:java.net.DatagramSocket) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket \l0x0017: INVOKE  (r0 I:java.net.DatagramSocket) java.net.DatagramSocket.close():void type: VIRTUAL \l0x001a: IPUT  \l  (r2 I:java.net.DatagramSocket)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.socket java.net.DatagramSocket \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IPUT  \l  (r2 I:java.net.InetAddress)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.address java.net.InetAddress \l0x001e: IPUT  \l  (r2 I:java.net.InetSocketAddress)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.socketAddress java.net.InetSocketAddress \l0x0020: IPUT  \l  (r3 I:int)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.packetRemaining int \l0x0022: IGET  (r0 I:boolean) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.opened boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IPUT  \l  (r3 I:boolean)\l  (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource)\l com.google.android.exoplayer2.upstream.UdpDataSource.opened boolean \l0x0028: IGET  (r0 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.UdpDataSource\>) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IGET  (r0 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.UdpDataSource\>) = (r4 I:com.google.android.exoplayer2.upstream.UdpDataSource) com.google.android.exoplayer2.upstream.UdpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l0x002e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.TransferListener)\l  (r4 I:java.lang.Object)\l com.google.android.exoplayer2.upstream.TransferListener.onTransferEnd(java.lang.Object):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|ExcHandler: IOException null\lSplitter:B:2:0x0008\l|0x0032: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.UdpDataSource.close((r4 'this' I:com.google.android.exoplayer2.upstream.UdpDataSource A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_14 -> Node_4;
}

