digraph "CFG forcom.google.android.exoplayer2.upstream.DataSourceInputStream.checkOpened()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.opened boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r2 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x0006: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r2 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x0008: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r1 I:com.google.android.exoplayer2.upstream.DataSpec)\l com.google.android.exoplayer2.upstream.DataSource.open(com.google.android.exoplayer2.upstream.DataSpec):long type: INTERFACE \l0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: IPUT  \l  (r0 I:boolean)\l  (r2 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.opened boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.upstream.DataSourceInputStream.checkOpened((r2 'this' I:com.google.android.exoplayer2.upstream.DataSourceInputStream A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

