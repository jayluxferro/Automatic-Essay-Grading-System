digraph "CFG forcom.google.android.exoplayer2.upstream.DataSourceInputStream.read()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: IGET  (r2 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.singleByteArray byte[] \l0x0003: INVOKE  (r0 I:int) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l  (r2 I:byte[])\l com.google.android.exoplayer2.upstream.DataSourceInputStream.read(byte[]):int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r1 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.singleByteArray byte[] \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x000f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.DataSourceInputStream.read((r3 'this' I:com.google.android.exoplayer2.upstream.DataSourceInputStream A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0007\-0x0011: r0 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_2;
}

