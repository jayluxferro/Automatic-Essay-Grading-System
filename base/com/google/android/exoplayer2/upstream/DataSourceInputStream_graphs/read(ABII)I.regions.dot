digraph "CFG forcom.google.android.exoplayer2.upstream.DataSourceInputStream.read([BII)I" {
subgraph cluster_Region_1352528964 {
label = "R(2:3|(2:(1:8)|(2:7|9)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r1 \l  PHI: (r1v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(!r6.closed)\lcheckOpened()\lint int r0 = r6.dataSource.read(r7, r8, r9)\l}"];
subgraph cluster_Region_953058957 {
label = "R(2:(1:8)|(2:7|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1232185297 {
label = "IF [B:4:0x0012] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r0 == \-1) goto L_0x0014\l}"];
subgraph cluster_Region_297561180 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_1205619040 {
label = "R(2:7|9)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0018|r6.totalBytesRead += (long) r0\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0003}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0014}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0016}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.DataSourceInputStream.read((r6v0 'this' com.google.android.exoplayer2.upstream.DataSourceInputStream A[IMMUTABLE_TYPE, THIS]), (r7v0 'buffer' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_7 -> Node_9;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_5 -> Node_8;
Node_6 -> Node_3;
}

