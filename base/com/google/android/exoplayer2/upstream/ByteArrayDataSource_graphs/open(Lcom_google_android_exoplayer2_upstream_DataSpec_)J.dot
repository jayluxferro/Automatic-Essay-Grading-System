digraph "CFG forcom.google.android.exoplayer2.upstream.ByteArrayDataSource.open(Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.uri = r5.uri\lr4.readPosition = (int) r5.position\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if ((r5.length \> \-1 ? 1 : (r5.length == \-1 ? 0 : \-1)) != 0) goto L_0x005d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|long r0 = ((long) r4.data.length) \- r5.position\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|PHI: r0 \l  PHI: (r0v6 long) = (r0v5 long), (r0v17 long) binds: [B:9:0x005d, B:2:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|r4.bytesRemaining = (int) r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|if (r4.bytesRemaining \<= 0) goto L_0x0029\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f}"];
Node_6 [shape=record,label="{6\:\ 0x0027|if ((r4.readPosition + r4.bytesRemaining) \<= r4.data.length) goto L_0x0060\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029}"];
Node_8 [shape=record,label="{8\:\ 0x005c|throw new java.io.IOException(new java.lang.StringBuilder().append(\"Unsatisfiable range: [\").append(r4.readPosition).append(\", \").append(r5.length).append(\"], length: \").append(r4.data.length).toString())\l}"];
Node_9 [shape=record,label="{9\:\ 0x005d|long r0 = r5.length\l}"];
Node_10 [shape=record,label="{10\:\ 0x0060}"];
Node_11 [shape=record,label="{11\:\ 0x0063|RETURN\l|return (long) r4.bytesRemaining\l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.upstream.ByteArrayDataSource.open((r4v0 'this' com.google.android.exoplayer2.upstream.ByteArrayDataSource A[IMMUTABLE_TYPE, THIS]), (r5v0 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_9 -> Node_3;
Node_10 -> Node_11;
}

