digraph "CFG forcom.google.android.exoplayer2.upstream.Loader.LoadTask.maybeThrowError(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.io.IOException) = \l  (r1 I:com.google.android.exoplayer2.upstream.Loader$LoadTask A[D('this' com.google.android.exoplayer2.upstream.Loader$LoadTask\<T\>)])\l com.google.android.exoplayer2.upstream.Loader.LoadTask.currentError java.io.IOException \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.upstream.Loader$LoadTask A[D('this' com.google.android.exoplayer2.upstream.Loader$LoadTask\<T\>)])\l com.google.android.exoplayer2.upstream.Loader.LoadTask.errorCount int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char] A[D('minRetryCount' int)])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:java.io.IOException) = \l  (r1 I:com.google.android.exoplayer2.upstream.Loader$LoadTask A[D('this' com.google.android.exoplayer2.upstream.Loader$LoadTask\<T\>)])\l com.google.android.exoplayer2.upstream.Loader.LoadTask.currentError java.io.IOException \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.Loader.LoadTask.maybeThrowError((r1 'this' I:com.google.android.exoplayer2.upstream.Loader$LoadTask A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('minRetryCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0000\-0x000b: r1 'this' com.google.android.exoplayer2.upstream.Loader$LoadTask\<T\>\l  ?\-0x000b: r2 'minRetryCount' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
}

