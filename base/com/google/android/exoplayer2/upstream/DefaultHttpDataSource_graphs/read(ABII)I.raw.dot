digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultHttpDataSource.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  \l  (r4 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.skipInternal():void type: DIRECT A[Catch:\{ IOException \-\> 0x0008 \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l  (r5 I:byte[] A[D('buffer' byte[])])\l  (r6 I:int A[D('offset' int)])\l  (r7 I:int A[D('readLength' int)])\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.readInternal(byte[], int, int):int type: DIRECT A[Catch:\{ IOException \-\> 0x0008 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x0008: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.upstream.HttpDataSource$HttpDataSourceException) =  com.google.android.exoplayer2.upstream.HttpDataSource$HttpDataSourceException \l0x000b: IGET  (r2 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r4 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x000d: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000e: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.HttpDataSource$HttpDataSourceException)\l  (r0 I:java.io.IOException A[D('e' java.io.IOException)])\l  (r2 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r3 I:int)\l com.google.android.exoplayer2.upstream.HttpDataSource.HttpDataSourceException.\<init\>(java.io.IOException, com.google.android.exoplayer2.upstream.DataSpec, int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.DefaultHttpDataSource.read((r4 'this' I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('readLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x0011: r0 'e' java.io.IOException\l  ?\-0x0011: r5 'buffer' byte[]\l  ?\-0x0011: r6 'offset' int\l  ?\-0x0011: r7 'readLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.HttpDataSource$HttpDataSourceException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_4;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

