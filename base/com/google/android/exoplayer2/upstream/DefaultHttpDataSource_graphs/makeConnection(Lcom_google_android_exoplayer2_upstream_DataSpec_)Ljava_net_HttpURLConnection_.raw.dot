digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultHttpDataSource.makeConnection(Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)Ljava\/net\/HttpURLConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r4 I:java.net.URL) =  java.net.URL \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x0004: IGET  (r3 I:android.net.Uri) = (r0 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.uri android.net.Uri \l0x0006: INVOKE  (r3 I:java.lang.String) = (r3 I:android.net.Uri) android.net.Uri.toString():java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r4 I:java.net.URL), (r3 I:java.lang.String) java.net.URL.\<init\>(java.lang.String):void type: DIRECT \l0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x000f: IGET  (r5 I:byte[]) = (r0 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.postBody byte[] \l0x0011: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x0013: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.position long \l0x0015: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x0017: IGET  (r8 I:long) = (r0 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.length long \l0x0019: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x001c: INVOKE  (r10 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r3 I:int)\l com.google.android.exoplayer2.upstream.DataSpec.isFlagSet(int):boolean type: VIRTUAL \l0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0022: IGET  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.allowCrossProtocolRedirects boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0026|0x0026: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0027: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r2 I:java.net.HttpURLConnection) = \l  (r3 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l  (r4 I:java.net.URL A[D('url' java.net.URL)])\l  (r5 I:byte[] A[D('postBody' byte[])])\l  (r6 I:long A[D('position' long)])\l  (r8 I:long A[D('length' long)])\l  (r10 I:boolean A[D('allowGzip' boolean)])\l  (r11 I:boolean)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.makeConnection(java.net.URL, byte[], long, long, boolean, boolean):java.net.HttpURLConnection type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x002d|0x002d: RETURN  (r2 I:java.net.HttpURLConnection) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('redirectCount' int)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: ARITH  (r13 I:int A[D('redirectCount' int)]) = (r14 I:int A[D('redirectCount' int)]) + (1 int) \l0x0032: CONST  (r3 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IF  (r14 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:21:0x006b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  (r2 I:java.net.HttpURLConnection) = \l  (r3 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l  (r4 I:java.net.URL A[D('url' java.net.URL)])\l  (r5 I:byte[] A[D('postBody' byte[])])\l  (r6 I:long A[D('position' long)])\l  (r8 I:long A[D('length' long)])\l  (r10 I:boolean A[D('allowGzip' boolean)])\l  (r11 I:boolean)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.makeConnection(java.net.URL, byte[], long, long, boolean, boolean):java.net.HttpURLConnection type: DIRECT \l0x003d: INVOKE  (r15 I:int) = \l  (r2 I:java.net.HttpURLConnection A[D('connection' java.net.HttpURLConnection)])\l java.net.HttpURLConnection.getResponseCode():int type: VIRTUAL \l0x0041: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (300(0x12c, float:4.2E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|0x0043: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (301(0x12d, float:4.22E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (302(0x12e, float:4.23E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (303(0x12f, float:4.25E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('postBody' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (307(0x133, float:4.3E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (308(0x134, float:4.32E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|0x0059: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('responseCode' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002d \l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|0x005b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('postBody' byte[])]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005c: CONST_STR  (r3 I:java.lang.String) =  \"Location\" \l0x005e: INVOKE  (r12 I:java.lang.String) = \l  (r2 I:java.net.HttpURLConnection A[D('connection' java.net.HttpURLConnection)])\l  (r3 I:java.lang.String)\l java.net.HttpURLConnection.getHeaderField(java.lang.String):java.lang.String type: VIRTUAL \l0x0062: INVOKE  \l  (r2 I:java.net.HttpURLConnection A[D('connection' java.net.HttpURLConnection)])\l java.net.HttpURLConnection.disconnect():void type: VIRTUAL \l0x0065: INVOKE  (r4 I:java.net.URL A[D('url' java.net.URL)]) = \l  (r4 I:java.net.URL A[D('url' java.net.URL)])\l  (r12 I:java.lang.String A[D('location' java.lang.String)])\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.handleRedirect(java.net.URL, java.lang.String):java.net.URL type: STATIC \l0x0069: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('redirectCount' int)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x006b|0x006b: NEW_INSTANCE  (r3 I:java.net.NoRouteToHostException) =  java.net.NoRouteToHostException \l0x006d: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006f: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0072: CONST_STR  (r16 I:java.lang.String) =  \"Too many redirects: \" \l0x0074: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0076: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007a: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r13 I:int A[D('redirectCount' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x007e: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0082: INVOKE  \l  (r3 I:java.net.NoRouteToHostException)\l  (r11 I:java.lang.String)\l java.net.NoRouteToHostException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|0x0085: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.net.HttpURLConnection com.google.android.exoplayer2.upstream.DefaultHttpDataSource.makeConnection((r17 'this' I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource A[IMMUTABLE_TYPE, THIS]), (r18 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002f\-0x0030: r13 'redirectCount' int\l  0x0030\-0x0032: r14 'redirectCount' int\l  0x0032\-0x006a: r13 'redirectCount' int\l  0x003d\-0x006b: r2 'connection' java.net.HttpURLConnection\l  0x0062\-0x006b: r12 'location' java.lang.String\l  0x006a\-0x006b: r14 'redirectCount' int\l  0x0041\-0x006b: r15 'responseCode' int\l  0x000d\-0x0085: r4 'url' java.net.URL\l  0x0011\-0x0085: r5 'postBody' byte[]\l  0x0015\-0x0085: r6 'position' long\l  0x0019\-0x0085: r8 'length' long\l  0x0020\-0x0085: r10 'allowGzip' boolean\l  0x006b\-0x0085: r13 'redirectCount' int\l  ?\-0x0085: r18 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_3;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_3;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_5;
Node_21 -> Node_22;
}

