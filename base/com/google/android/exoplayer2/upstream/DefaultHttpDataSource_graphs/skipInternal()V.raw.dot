digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultHttpDataSource.skipInternal()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesSkipped long \l0x0002: IGET  (r6 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToSkip long \l0x0004: CMP_L  (r3 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: SGET  (r3 I:java.util.concurrent.atomic.AtomicReference\<byte[]\>) =  com.google.android.exoplayer2.upstream.DefaultHttpDataSource.skipBufferReference java.util.concurrent.atomic.AtomicReference \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: INVOKE  (r2 I:java.lang.Object) = \l  (r3 I:java.util.concurrent.atomic.AtomicReference)\l  (r4 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.getAndSet(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0010: CHECK_CAST  (r2 I:byte[]) = (byte[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('skipBuffer' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l0x0016: NEW_ARRAY  (r2 I:byte[] A[D('skipBuffer' byte[])]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesSkipped long \l0x001a: IGET  (r6 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToSkip long \l0x001c: CMP_L  (r3 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0058 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToSkip long \l0x0022: IGET  (r6 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesSkipped long \l0x0024: ARITH  (r4 I:long) = (r4 I:long) \- (r6 I:long) \l0x0025: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[] A[D('skipBuffer' byte[])]) \l0x0026: CAST  (r6 I:long) = (long) (r3 I:int) \l0x0027: INVOKE  (r4 I:long) = (r4 I:long), (r6 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x002b: CAST  (r1 I:int) = (int) (r4 I:long) \l0x002c: IGET  (r3 I:java.io.InputStream) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.inputStream java.io.InputStream \l0x002e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: INVOKE  (r0 I:int) = \l  (r3 I:java.io.InputStream)\l  (r2 I:byte[] A[D('skipBuffer' byte[])])\l  (r4 I:int)\l  (r1 I:int A[D('readLength' int)])\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l0x0033: INVOKE  (r3 I:boolean) =  java.lang.Thread.interrupted():boolean type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: NEW_INSTANCE  (r3 I:java.io.InterruptedIOException) =  java.io.InterruptedIOException \l0x003b: INVOKE  (r3 I:java.io.InterruptedIOException) java.io.InterruptedIOException.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('read' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: NEW_INSTANCE  (r3 I:java.io.EOFException) =  java.io.EOFException \l0x0044: INVOKE  (r3 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesSkipped long \l0x004a: CAST  (r6 I:long) = (long) (r0 I:int A[D('read' int)]) \l0x004b: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x004c: IPUT  \l  (r4 I:long)\l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesSkipped long \l0x004e: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.DefaultHttpDataSource\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l}"];
Node_17 [shape=record,label="{17\:\ 0x0050|0x0050: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|0x0052: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.DefaultHttpDataSource\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l0x0054: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.TransferListener)\l  (r8 I:java.lang.Object)\l  (r0 I:int A[D('read' int)])\l com.google.android.exoplayer2.upstream.TransferListener.onBytesTransferred(java.lang.Object, int):void type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: SGET  (r3 I:java.util.concurrent.atomic.AtomicReference\<byte[]\>) =  com.google.android.exoplayer2.upstream.DefaultHttpDataSource.skipBufferReference java.util.concurrent.atomic.AtomicReference \l0x005a: INVOKE  \l  (r3 I:java.util.concurrent.atomic.AtomicReference)\l  (r2 I:java.lang.Object A[D('skipBuffer' byte[])])\l java.util.concurrent.atomic.AtomicReference.set(java.lang.Object):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.upstream.DefaultHttpDataSource.skipInternal((r8 'this' I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0033\-0x0058: r0 'read' int\l  0x002c\-0x0058: r1 'readLength' int\l  0x0012\-0x005d: r2 'skipBuffer' byte[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_6;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_6;
Node_19 -> Node_2;
}

