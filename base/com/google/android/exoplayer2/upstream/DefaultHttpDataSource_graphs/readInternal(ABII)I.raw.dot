digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultHttpDataSource.readInternal([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[long, double]) = (\-1 ?[long, double]) \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readLength' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToRead long \l0x0009: CMP_L  (r4 I:int) = (r4 I:long), (r8 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToRead long \l0x000f: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesRead long \l0x0011: ARITH  (r0 I:long) = (r4 I:long) \- (r6 I:long) \l0x0013: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0015: CMP_L  (r4 I:int) = (r0 I:long A[D('bytesRemaining' long)]), (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: CAST  (r4 I:long) = (long) (r13 I:int A[D('readLength' int)]) \l0x001c: INVOKE  (r4 I:long) = (r4 I:long), (r0 I:long A[D('bytesRemaining' long)]) java.lang.Math.min(long, long):long type: STATIC \l0x0020: CAST  (r13 I:int A[D('readLength' int)]) = (int) (r4 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IGET  (r4 I:java.io.InputStream) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.inputStream java.io.InputStream \l0x0023: INVOKE  (r2 I:int) = \l  (r4 I:java.io.InputStream)\l  (r11 I:byte[] A[D('buffer' byte[])])\l  (r12 I:int A[D('offset' int)])\l  (r13 I:int A[D('readLength' int)])\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('read' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0037 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesToRead long \l0x002b: CMP_L  (r4 I:int) = (r4 I:long), (r8 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0035 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: NEW_INSTANCE  (r3 I:java.io.EOFException) =  java.io.EOFException \l0x0031: INVOKE  (r3 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('read' int)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesRead long \l0x0039: CAST  (r6 I:long) = (long) (r2 I:int A[D('read' int)]) \l0x003a: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x003b: IPUT  \l  (r4 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.bytesRead long \l0x003d: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.DefaultHttpDataSource\>) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: IGET  (r3 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.DefaultHttpDataSource\>) = \l  (r10 I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource)\l com.google.android.exoplayer2.upstream.DefaultHttpDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l0x0043: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.TransferListener)\l  (r10 I:java.lang.Object)\l  (r2 I:int A[D('read' int)])\l com.google.android.exoplayer2.upstream.TransferListener.onBytesTransferred(java.lang.Object, int):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.upstream.DefaultHttpDataSource.readInternal((r10 'this' I:com.google.android.exoplayer2.upstream.DefaultHttpDataSource A[IMMUTABLE_TYPE, THIS]), (r11 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('readLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0013\-0x0021: r0 'bytesRemaining' long\l  0x0027\-0x0046: r2 'read' int\l  ?\-0x0046: r11 'buffer' byte[]\l  ?\-0x0046: r12 'offset' int\l  ?\-0x0046: r13 'readLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_3;
Node_17 -> Node_18;
Node_18 -> Node_3;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_3;
}

