digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.getInitializationVector(JJ)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x0006: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:java.nio.ByteBuffer), (r2 I:long A[D('nonce' long)]) java.nio.ByteBuffer.putLong(long):java.nio.ByteBuffer type: VIRTUAL \l0x000a: INVOKE  (r0 I:java.nio.ByteBuffer) = \l  (r0 I:java.nio.ByteBuffer)\l  (r4 I:long A[D('counter' long)])\l java.nio.ByteBuffer.putLong(long):java.nio.ByteBuffer type: VIRTUAL \l0x000e: INVOKE  (r0 I:byte[]) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN  (r0 I:byte[]) \l}"];
MethodNode[shape=record,label="{private byte[] com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.getInitializationVector((r1 'this' I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher A[IMMUTABLE_TYPE, THIS]), (r2 I:long A[D('nonce' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[D('counter' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0012: r2 'nonce' long\l  ?\-0x0012: r4 'counter' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

