digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.\<init\>(I[BJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r9 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST_STR  (r4 I:java.lang.String) =  \"AES\/CTR\/NoPadding\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: INVOKE  (r4 I:javax.crypto.Cipher) = (r4 I:java.lang.String) javax.crypto.Cipher.getInstance(java.lang.String):javax.crypto.Cipher type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}, TRY_ENTER]\l0x0009: IPUT  \l  (r4 I:javax.crypto.Cipher)\l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.cipher javax.crypto.Cipher A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x000b: IGET  (r4 I:javax.crypto.Cipher) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.cipher javax.crypto.Cipher A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x000d: INVOKE  (r4 I:int) = (r4 I:javax.crypto.Cipher) javax.crypto.Cipher.getBlockSize():int type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0011: IPUT  \l  (r4 I:int)\l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0013: IGET  (r4 I:int) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0015: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0017: IPUT  \l  (r4 I:byte[])\l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.zerosBlock byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0019: IGET  (r4 I:int) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x001b: NEW_ARRAY  (r4 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x001d: IPUT  \l  (r4 I:byte[])\l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.flushedBlock byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x001f: IGET  (r4 I:int) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0021: CAST  (r4 I:long) = (long) (r4 I:int) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0022: ARITH  (r0 I:long) = (r14 I:long A[D('offset' long)]) \/ (r4 I:long) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0024: IGET  (r4 I:int) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0026: CAST  (r4 I:long) = (long) (r4 I:int) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0027: ARITH  (r4 I:long) = (r14 I:long A[D('offset' long)]) % (r4 I:long) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0029: CAST  (r3 I:int) = (int) (r4 I:long) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x002a: IGET  (r4 I:javax.crypto.Cipher) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.cipher javax.crypto.Cipher A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x002c: NEW_INSTANCE  (r5 I:javax.crypto.spec.SecretKeySpec) =  javax.crypto.spec.SecretKeySpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x002e: IGET  (r6 I:javax.crypto.Cipher) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.cipher javax.crypto.Cipher A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0030: INVOKE  (r6 I:java.lang.String) = (r6 I:javax.crypto.Cipher) javax.crypto.Cipher.getAlgorithm():java.lang.String type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0034: CONST_STR  (r7 I:java.lang.String) =  \"\/\" A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0036: INVOKE  (r6 I:java.lang.String[]) = (r6 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x003a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x003b: AGET  (r6 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x003d: INVOKE  \l  (r5 I:javax.crypto.spec.SecretKeySpec)\l  (r11 I:byte[] A[D('secretKey' byte[])])\l  (r6 I:java.lang.String)\l javax.crypto.spec.SecretKeySpec.\<init\>(byte[], java.lang.String):void type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0040: NEW_INSTANCE  (r6 I:javax.crypto.spec.IvParameterSpec) =  javax.crypto.spec.IvParameterSpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0042: INVOKE  (r7 I:byte[]) = \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r12 I:long A[D('nonce' long)])\l  (r0 I:long A[D('counter' long)])\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.getInitializationVector(long, long):byte[] type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0046: INVOKE  (r6 I:javax.crypto.spec.IvParameterSpec), (r7 I:byte[]) javax.crypto.spec.IvParameterSpec.\<init\>(byte[]):void type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0049: INVOKE  \l  (r4 I:javax.crypto.Cipher)\l  (r10 I:int A[D('mode' int)])\l  (r5 I:java.security.Key)\l  (r6 I:java.security.spec.AlgorithmParameterSpec)\l javax.crypto.Cipher.init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x004c|0x004c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startPadding' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0054 A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x004e|0x004e: NEW_ARRAY  (r4 I:byte[]) = (r3 I:int A[D('startPadding' int), IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0050: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}]\l0x0051: INVOKE  \l  (r9 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r4 I:byte[])\l  (r5 I:int)\l  (r3 I:int A[D('startPadding' int)])\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.updateInPlace(byte[], int, int):void type: VIRTUAL A[Catch:\{ NoSuchAlgorithmException \-\> 0x005c, NoSuchPaddingException \-\> 0x005e, InvalidKeyException \-\> 0x0060, InvalidAlgorithmParameterException \-\> 0x0055 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0054|0x0054: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0055|ExcHandler: InvalidAlgorithmParameterException null\lSplitter:B:1:0x0005\l|0x0055: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0056|0x0056: NEW_INSTANCE  (r4 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0058: INVOKE  \l  (r4 I:java.lang.RuntimeException)\l  (r2 I:java.lang.Throwable A[D('e' java.security.GeneralSecurityException)])\l java.lang.RuntimeException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x005b|0x005b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:1:0x0005\l|0x005c: MOVE_EXCEPTION  (r2 I:?[OBJECT] A[D('e' java.security.GeneralSecurityException)]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|ExcHandler: NoSuchPaddingException null\lSplitter:B:1:0x0005\l|0x005e: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0060|ExcHandler: InvalidKeyException null\lSplitter:B:1:0x0005\l|0x0060: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.\<init\>((r9 'this' I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:byte[] A[D('secretKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('nonce' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('offset' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0024\-0x0055: r0 'counter' long\l  0x002a\-0x0055: r3 'startPadding' int\l  0x0056\-0x005c: r2 'e' java.security.GeneralSecurityException\l  ?\-0x0061: r10 'mode' int\l  ?\-0x0061: r11 'secretKey' byte[]\l  ?\-0x0061: r12 'nonce' long\l  ?\-0x0061: r14 'offset' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_1 -> Node_11;
Node_1 -> Node_13;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_11 -> Node_7;
Node_13 -> Node_7;
}

