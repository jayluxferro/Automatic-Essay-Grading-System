digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.update([BII[BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r11 I:byte[] A[D('in' byte[]), IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char] A[D('inOffset' int)])\l \l0x0006: IGET  (r1 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.flushedBlock byte[] \l0x0008: IGET  (r2 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int \l0x000a: IGET  (r3 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l0x000c: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x000d: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x000f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r1 I:?[int, boolean, short, byte, char]) \l0x0010: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x0011: APUT  \l  (r14 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE])\l  (r15 I:?[int, short, byte, char] A[D('outOffset' int)])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x0013: ARITH  (r15 I:int A[D('outOffset' int)]) = (r15 I:int A[D('outOffset' int)]) + (1 int) \l0x0015: ARITH  (r12 I:int A[D('inOffset' int)]) = (r12 I:int A[D('inOffset' int)]) + (1 int) \l0x0017: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x001b: IPUT  \l  (r0 I:int)\l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l0x001d: ARITH  (r13 I:int A[D('length' int)]) = (r13 I:int A[D('length' int)]) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: INVOKE  (r9 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r11 I:byte[] A[D('in' byte[])])\l  (r12 I:int A[D('inOffset' int)])\l  (r13 I:int A[D('length' int)])\l  (r14 I:byte[] A[D('out' byte[])])\l  (r15 I:int A[D('outOffset' int)])\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.nonFlushingUpdate(byte[], int, int, byte[], int):int type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('written' int)])  \-\> B:4:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: ARITH  (r6 I:int) = (r13 I:int A[D('length' int)]) \- (r9 I:int A[D('written' int)]) \l0x002a: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r6 I:?[int, byte, short, char] A[D('bytesToFlush' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:16:0x005d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0032: ARITH  (r15 I:int A[D('outOffset' int)]) = (r15 I:int A[D('outOffset' int)]) + (r9 I:int A[D('written' int)]) \l0x0033: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int \l0x0035: ARITH  (r0 I:int) = (r0 I:int) \- (r6 I:int A[D('bytesToFlush' int)]) \l0x0036: IPUT  \l  (r0 I:int)\l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l0x0038: IGET  (r1 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.zerosBlock byte[] \l0x003a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003b: IGET  (r3 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.pendingXorBytes int \l0x003d: IGET  (r4 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.flushedBlock byte[] \l0x003f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0041: INVOKE  (r9 I:int A[D('written' int)]) = \l  (r0 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:byte[])\l  (r5 I:int)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.nonFlushingUpdate(byte[], int, int, byte[], int):int type: DIRECT \l0x0045: IGET  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.blockSize int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('written' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x004d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outOffset' int)])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: IF  (r7 I:?[int, byte, short, char] A[D('i' int)]) \>= (r6 I:?[int, byte, short, char] A[D('bytesToFlush' int)])  \-\> B:18:0x0061 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: ARITH  (r15 I:int) = (r8 I:int A[D('outOffset' int)]) + (1 int) \l0x0053: IGET  (r0 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.flushedBlock byte[] \l0x0055: AGET  (r0 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0057: APUT  \l  (r14 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x0059: ARITH  (r7 I:int A[D('i' int)]) = (r7 I:int A[D('i' int)]) + (1 int) \l0x005b: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outOffset' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|0x005d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outOffset' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outOffset' int)])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.update((r10 'this' I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher A[IMMUTABLE_TYPE, THIS]), (r11 I:byte[] A[D('in' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('inOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('outOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x004f: r15 'outOffset' int\l  0x004f\-0x0053: r8 'outOffset' int\l  0x0053\-0x005c: r15 'outOffset' int\l  0x004e\-0x005d: r7 'i' int\l  0x005c\-0x005d: r8 'outOffset' int\l  0x005d\-0x0061: r15 'outOffset' int\l  0x0061\-0x0062: r8 'outOffset' int\l  0x002a\-0x0062: r6 'bytesToFlush' int\l  0x0061\-0x0062: r7 'i' int\l  0x0026\-0x0062: r9 'written' int\l  ?\-0x0062: r11 'in' byte[]\l  ?\-0x0062: r12 'inOffset' int\l  ?\-0x0062: r13 'length' int\l  ?\-0x0062: r14 'out' byte[]\l  0x0062\-0x0062: r15 'outOffset' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_0;
Node_3 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_4;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_14;
Node_16 -> Node_10;
Node_17 -> Node_13;
Node_18 -> Node_4;
}

