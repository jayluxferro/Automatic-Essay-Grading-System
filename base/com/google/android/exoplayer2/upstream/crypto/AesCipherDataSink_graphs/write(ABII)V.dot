digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r7.scratch != null) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r7.cipher.updateInPlace(r8, r9, r10)\lr7.wrappedDataSink.write(r8, r9, r10)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|r6 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|LOOP_START\lPHI: r6 \l  PHI: (r6v1 'bytesProcessed' int) = (r6v0 'bytesProcessed' int), (r6v2 'bytesProcessed' int) binds: [B:3:0x0010, B:5:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0011\-\>B:5:0x0013\l|if (r6 \>= r10) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|LOOP_END\lLOOP:0: B:4:0x0011\-\>B:5:0x0013\l|int r3 = java.lang.Math.min(r10 \- r6, r7.scratch.length)\lr1 = r8\lr7.cipher.update(r1, r9 + r6, r3, r7.scratch, 0)\lr7.wrappedDataSink.write(r7.scratch, 0, r3)\lint r6 = r6 + r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.write((r7v0 'this' com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink A[IMMUTABLE_TYPE, THIS]), (r8v0 'data' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_8;
}

