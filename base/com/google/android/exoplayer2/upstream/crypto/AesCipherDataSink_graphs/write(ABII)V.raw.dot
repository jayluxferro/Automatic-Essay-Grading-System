digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:byte[]) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.scratch byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.cipher com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher \l0x0007: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r8 I:byte[] A[D('data' byte[])])\l  (r9 I:int A[D('offset' int)])\l  (r10 I:int A[D('length' int)])\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.updateInPlace(byte[], int, int):void type: VIRTUAL \l0x000a: IGET  (r0 I:com.google.android.exoplayer2.upstream.DataSink) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.wrappedDataSink com.google.android.exoplayer2.upstream.DataSink \l0x000c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSink)\l  (r8 I:byte[] A[D('data' byte[])])\l  (r9 I:int A[D('offset' int)])\l  (r10 I:int A[D('length' int)])\l com.google.android.exoplayer2.upstream.DataSink.write(byte[], int, int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r6 I:?[int, byte, short, char] A[D('bytesProcessed' int)]) \>= (r10 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:3:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: ARITH  (r0 I:int) = (r10 I:int A[D('length' int)]) \- (r6 I:int A[D('bytesProcessed' int)]) \l0x0015: IGET  (r1 I:byte[]) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.scratch byte[] \l0x0017: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0018: INVOKE  (r3 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x001c: IGET  (r0 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.cipher com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher \l0x001e: ARITH  (r2 I:int) = (r9 I:int A[D('offset' int)]) + (r6 I:int A[D('bytesProcessed' int)]) \l0x0020: IGET  (r4 I:byte[]) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.scratch byte[] \l0x0022: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY] A[D('data' byte[])]) \l0x0023: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int A[D('bytesToProcess' int)])\l  (r4 I:byte[])\l  (r5 I:int)\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.update(byte[], int, int, byte[], int):void type: VIRTUAL \l0x0026: IGET  (r0 I:com.google.android.exoplayer2.upstream.DataSink) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.wrappedDataSink com.google.android.exoplayer2.upstream.DataSink \l0x0028: IGET  (r1 I:byte[]) = \l  (r7 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.scratch byte[] \l0x002a: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSink)\l  (r1 I:byte[])\l  (r5 I:int)\l  (r3 I:int A[D('bytesToProcess' int)])\l com.google.android.exoplayer2.upstream.DataSink.write(byte[], int, int):void type: INTERFACE \l0x002d: ARITH  (r6 I:int A[D('bytesProcessed' int)]) = (r6 I:int A[D('bytesProcessed' int)]) + (r3 I:int A[D('bytesToProcess' int)]) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink.write((r7 'this' I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSink A[IMMUTABLE_TYPE, THIS]), (r8 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001c\-0x002e: r3 'bytesToProcess' int\l  0x0011\-0x002e: r6 'bytesProcessed' int\l  ?\-0x002e: r8 'data' byte[]\l  ?\-0x002e: r9 'offset' int\l  ?\-0x002e: r10 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_5;
}

