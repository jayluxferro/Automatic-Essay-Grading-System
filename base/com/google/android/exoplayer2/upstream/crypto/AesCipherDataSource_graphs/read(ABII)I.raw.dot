digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.AesCipherDataSource.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readLength' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r2 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r3 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource.upstream com.google.android.exoplayer2.upstream.DataSource \l0x0007: INVOKE  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r4 I:byte[] A[D('data' byte[])])\l  (r5 I:int A[D('offset' int)])\l  (r6 I:int A[D('readLength' int)])\l com.google.android.exoplayer2.upstream.DataSource.read(byte[], int, int):int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('read' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('read' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IGET  (r1 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher) = \l  (r3 I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource)\l com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource.cipher com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher \l0x0011: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher)\l  (r4 I:byte[] A[D('data' byte[])])\l  (r5 I:int A[D('offset' int)])\l  (r0 I:int A[D('read' int)])\l com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher.updateInPlace(byte[], int, int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource.read((r3 'this' I:com.google.android.exoplayer2.upstream.crypto.AesCipherDataSource A[IMMUTABLE_TYPE, THIS]), (r4 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('readLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000b\-0x0014: r0 'read' int\l  ?\-0x0014: r4 'data' byte[]\l  ?\-0x0014: r5 'offset' int\l  ?\-0x0014: r6 'readLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_3;
}

