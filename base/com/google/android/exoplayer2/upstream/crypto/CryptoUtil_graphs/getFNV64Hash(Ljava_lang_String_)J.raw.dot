digraph "CFG forcom.google.android.exoplayer2.upstream.crypto.CryptoUtil.getFNV64Hash(Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r3 I:int) = (r8 I:java.lang.String A[D('input' java.lang.String)]) java.lang.String.length():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:2:0x0004 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r3 I:char) = \l  (r8 I:java.lang.String A[D('input' java.lang.String)])\l  (r2 I:int A[D('i' int)])\l java.lang.String.charAt(int):char type: VIRTUAL \l0x0012: CAST  (r4 I:long) = (long) (r3 I:int) \l0x0013: ARITH  (r0 I:long A[D('hash' long)]) = (r0 I:long A[D('hash' long)]) ^ (r4 I:long) \l0x0014: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: ARITH  (r4 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x0017: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0018: ARITH  (r6 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x001a: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x001c: ARITH  (r6 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x001e: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0020: ARITH  (r6 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x0022: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0023: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0025: ARITH  (r6 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x0027: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0028: CONST  (r3 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x002a: ARITH  (r6 I:long) = (r0 I:long A[D('hash' long)]) \<\< (r3 I:long) \l0x002c: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x002d: ARITH  (r0 I:long A[D('hash' long)]) = (r0 I:long A[D('hash' long)]) + (r4 I:long) \l0x002e: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public static long com.google.android.exoplayer2.upstream.crypto.CryptoUtil.getFNV64Hash((r8 I:java.lang.String A[D('input' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x0030: r0 'hash' long\l  0x0008\-0x0030: r2 'i' int\l  ?\-0x0030: r8 'input' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_4;
}

