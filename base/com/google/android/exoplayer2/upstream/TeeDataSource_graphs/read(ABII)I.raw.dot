digraph "CFG forcom.google.android.exoplayer2.upstream.TeeDataSource.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = (r2 I:com.google.android.exoplayer2.upstream.TeeDataSource) com.google.android.exoplayer2.upstream.TeeDataSource.upstream com.google.android.exoplayer2.upstream.DataSource \l0x0002: INVOKE  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r3 I:byte[] A[D('buffer' byte[])])\l  (r4 I:int A[D('offset' int)])\l  (r5 I:int A[D('max' int)])\l com.google.android.exoplayer2.upstream.DataSource.read(byte[], int, int):int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char] A[D('num' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSink) = (r2 I:com.google.android.exoplayer2.upstream.TeeDataSource) com.google.android.exoplayer2.upstream.TeeDataSource.dataSink com.google.android.exoplayer2.upstream.DataSink \l0x000a: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.DataSink)\l  (r3 I:byte[] A[D('buffer' byte[])])\l  (r4 I:int A[D('offset' int)])\l  (r0 I:int A[D('num' int)])\l com.google.android.exoplayer2.upstream.DataSink.write(byte[], int, int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r0 I:int A[D('num' int)]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.TeeDataSource.read((r2 'this' I:com.google.android.exoplayer2.upstream.TeeDataSource A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('max' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0006\-0x000d: r0 'num' int\l  ?\-0x000d: r3 'buffer' byte[]\l  ?\-0x000d: r4 'offset' int\l  ?\-0x000d: r5 'max' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

