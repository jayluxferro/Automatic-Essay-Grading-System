digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheDataSink.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char] A[D('bytesWritten' int)]) \>= (r13 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:2:0x0004 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|SYNTHETIC\lSplitter:B:5:0x0008\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0008\l|0x0008: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.outputStreamBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}, TRY_ENTER]\l0x000a: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.maxCacheFileSize long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x000c: CMP_L  (r3 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ IOException \-\> 0x0038 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 A[Catch:\{ IOException \-\> 0x0038 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: INVOKE  \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.closeCurrentOutputStream():void type: DIRECT A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0013: INVOKE  \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.openNextOutputStream():void type: DIRECT A[Catch:\{ IOException \-\> 0x0038 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: ARITH  (r3 I:int) = (r13 I:int A[D('length' int)]) \- (r1 I:int A[D('bytesWritten' int)]) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0018: CAST  (r4 I:long) = (long) (r3 I:int) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0019: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.maxCacheFileSize long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x001b: IGET  (r8 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.outputStreamBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x001d: ARITH  (r6 I:long) = (r6 I:long) \- (r8 I:long) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x001e: INVOKE  (r4 I:long) = (r4 I:long), (r6 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0022: CAST  (r0 I:int) = (int) (r4 I:long) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0023: IGET  (r3 I:java.io.OutputStream) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.outputStream java.io.OutputStream A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0025: ARITH  (r4 I:int) = (r12 I:int A[D('offset' int)]) + (r1 I:int A[D('bytesWritten' int)]) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0027: INVOKE  \l  (r3 I:java.io.OutputStream)\l  (r11 I:byte[] A[D('buffer' byte[])])\l  (r4 I:int)\l  (r0 I:int A[D('bytesToWrite' int)])\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0038 \}]\l0x002a: ARITH  (r1 I:int A[D('bytesWritten' int)]) = (r1 I:int A[D('bytesWritten' int)]) + (r0 I:int A[D('bytesToWrite' int)]) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x002b: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.outputStreamBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x002d: CAST  (r6 I:long) = (long) (r0 I:int A[D('bytesToWrite' int)]) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x002e: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x002f: IPUT  \l  (r4 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.outputStreamBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0031: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.dataSpecBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0033: CAST  (r6 I:long) = (long) (r0 I:int A[D('bytesToWrite' int)]) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0034: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) A[Catch:\{ IOException \-\> 0x0038 \}]\l0x0035: IPUT  \l  (r4 I:long)\l  (r10 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink)\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.dataSpecBytesWritten long A[Catch:\{ IOException \-\> 0x0038 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|ExcHandler: IOException null\lSplitter:B:5:0x0008\l|0x0038: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException) =  com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException \l0x003b: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException)\l  (r2 I:java.io.IOException A[D('e' java.io.IOException)])\l com.google.android.exoplayer2.upstream.cache.CacheDataSink.CacheDataSinkException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CacheDataSink.write((r10 'this' I:com.google.android.exoplayer2.upstream.cache.CacheDataSink A[IMMUTABLE_TYPE, THIS]), (r11 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0023\-0x0038: r0 'bytesToWrite' int\l  0x0006\-0x003e: r1 'bytesWritten' int\l  0x0039\-0x003e: r2 'e' java.io.IOException\l  ?\-0x003e: r11 'buffer' byte[]\l  ?\-0x003e: r12 'offset' int\l  ?\-0x003e: r13 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_4;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

