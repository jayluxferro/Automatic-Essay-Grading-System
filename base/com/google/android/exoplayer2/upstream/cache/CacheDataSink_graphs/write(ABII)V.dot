digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheDataSink.write([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r10.dataSpec != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'bytesWritten' int) = (r1v0 'bytesWritten' int), (r1v2 'bytesWritten' int) binds: [B:2:0x0005, B:8:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0006\-\>B:8:0x0016\l|if (r1 \>= r13) goto L_0x0004\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|SYNTHETIC\lSplitter:B:4:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ IOException \-\> 0x0038 \}\lSplitter:B:4:0x0008\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|Catch:\{ IOException \-\> 0x0038 \}\l|if ((r10.outputStreamBytesWritten \> r10.maxCacheFileSize ? 1 : (r10.outputStreamBytesWritten == r10.maxCacheFileSize ? 0 : \-1)) != 0) goto L_0x0016     \/\/ Catch:\{ IOException \-\> 0x0038 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|Catch:\{ IOException \-\> 0x0038 \}\l|closeCurrentOutputStream()     \/\/ Catch:\{ IOException \-\> 0x0038 \}\lopenNextOutputStream()     \/\/ Catch:\{ IOException \-\> 0x0038 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|LOOP_END\lCatch:\{ IOException \-\> 0x0038 \}\lLOOP:0: B:3:0x0006\-\>B:8:0x0016\l|int r0 = (int) java.lang.Math.min((long) (r13 \- r1), r10.maxCacheFileSize \- r10.outputStreamBytesWritten)     \/\/ Catch:\{ IOException \-\> 0x0038 \}\lr10.outputStream.write(r11, r12 + r1, r0)     \/\/ Catch:\{ IOException \-\> 0x0038 \}\lint r1 = r1 + r0     \/\/ Catch:\{ IOException \-\> 0x0038 \}\lr10.outputStreamBytesWritten = r10.outputStreamBytesWritten + ((long) r0)     \/\/ Catch:\{ IOException \-\> 0x0038 \}\lr10.dataSpecBytesWritten = r10.dataSpecBytesWritten + ((long) r0)     \/\/ Catch:\{ IOException \-\> 0x0038 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|ExcHandler: IOException (r2v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0008\l|java.io.IOException r2 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039}"];
Node_11 [shape=record,label="{11\:\ 0x003e|throw new com.google.android.exoplayer2.upstream.cache.CacheDataSink.CacheDataSinkException(r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0016|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CacheDataSink.write((r10v0 'this' com.google.android.exoplayer2.upstream.cache.CacheDataSink A[IMMUTABLE_TYPE, THIS]), (r11v0 'buffer' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_13;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_16;
Node_13 -> Node_8;
Node_14 -> Node_8;
}

