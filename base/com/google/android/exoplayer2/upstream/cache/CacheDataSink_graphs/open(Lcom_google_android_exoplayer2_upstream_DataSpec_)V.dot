digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheDataSink.open(Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r7.length \> \-1 ? 1 : (r7.length == \-1 ? 0 : \-1)) != 0) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r7.isFlagSet(2) != false) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r6.dataSpec = null\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r6.dataSpec = r7\lr6.dataSpecBytesWritten = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|SYNTHETIC\lSplitter:B:6:0x0019\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ IOException \-\> 0x001d \}\lSplitter:B:6:0x0019\l|openNextOutputStream()     \/\/ Catch:\{ IOException \-\> 0x001d \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:6:0x0019\l|java.io.IOException r0 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e}"];
Node_10 [shape=record,label="{10\:\ 0x0023|throw new com.google.android.exoplayer2.upstream.cache.CacheDataSink.CacheDataSinkException(r0)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CacheDataSink.open((r6v0 'this' com.google.android.exoplayer2.upstream.cache.CacheDataSink A[IMMUTABLE_TYPE, THIS]), (r7v0 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.CacheDataSink$CacheDataSinkException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

