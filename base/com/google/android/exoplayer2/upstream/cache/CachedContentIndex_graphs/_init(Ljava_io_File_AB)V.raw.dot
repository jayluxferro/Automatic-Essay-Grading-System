digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CachedContentIndex.\<init\>(Ljava\/io\/File;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('secretKey' byte[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[] A[D('secretKey' byte[])]) \l0x0007: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"AES\/CBC\/PKCS5PADDING\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lSplitter:B:6:0x0011\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0011\l|0x0011: INVOKE  (r1 I:javax.crypto.Cipher) = (r1 I:java.lang.String) javax.crypto.Cipher.getInstance(java.lang.String):javax.crypto.Cipher type: STATIC A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}, TRY_ENTER]\l0x0015: IPUT  \l  (r1 I:javax.crypto.Cipher)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}]\l0x0017: NEW_INSTANCE  (r1 I:javax.crypto.spec.SecretKeySpec) =  javax.crypto.spec.SecretKeySpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}]\l0x0019: CONST_STR  (r2 I:java.lang.String) =  \"AES\" A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}]\l0x001b: INVOKE  \l  (r1 I:javax.crypto.spec.SecretKeySpec)\l  (r6 I:byte[] A[D('secretKey' byte[])])\l  (r2 I:java.lang.String)\l javax.crypto.spec.SecretKeySpec.\<init\>(byte[], java.lang.String):void type: DIRECT A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}]\l0x001e: IPUT  \l  (r1 I:javax.crypto.spec.SecretKeySpec)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.secretKeySpec javax.crypto.spec.SecretKeySpec A[Catch:\{ NoSuchAlgorithmException \-\> 0x003f, NoSuchPaddingException \-\> 0x004b \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:java.util.HashMap) =  java.util.HashMap \l0x0022: INVOKE  (r1 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0025: IPUT  \l  (r1 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CachedContent\>)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.keyToContent java.util.HashMap \l0x0027: NEW_INSTANCE  (r1 I:android.util.SparseArray) =  android.util.SparseArray \l0x0029: INVOKE  (r1 I:android.util.SparseArray) android.util.SparseArray.\<init\>():void type: DIRECT \l0x002c: IPUT  \l  (r1 I:android.util.SparseArray\<java.lang.String\>)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.idToKey android.util.SparseArray \l0x002e: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.util.AtomicFile) =  com.google.android.exoplayer2.util.AtomicFile \l0x0030: NEW_INSTANCE  (r2 I:java.io.File) =  java.io.File \l0x0032: CONST_STR  (r3 I:java.lang.String) =  \"cached_content_index.exi\" \l0x0034: INVOKE  \l  (r2 I:java.io.File)\l  (r5 I:java.io.File A[D('cacheDir' java.io.File)])\l  (r3 I:java.lang.String)\l java.io.File.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x0037: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.AtomicFile)\l  (r2 I:java.io.File)\l com.google.android.exoplayer2.util.AtomicFile.\<init\>(java.io.File):void type: DIRECT \l0x003a: IPUT  \l  (r1 I:com.google.android.exoplayer2.util.AtomicFile)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.atomicFile com.google.android.exoplayer2.util.AtomicFile \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|ExcHandler: NoSuchAlgorithmException null\lSplitter:B:6:0x0011\l|0x003f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0042: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.Throwable A[D('e' java.security.GeneralSecurityException)])\l java.lang.IllegalStateException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IPUT  \l  (r1 I:javax.crypto.Cipher)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher \l0x0048: IPUT  \l  (r1 I:javax.crypto.spec.SecretKeySpec)\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.secretKeySpec javax.crypto.spec.SecretKeySpec \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|ExcHandler: NoSuchPaddingException null\lSplitter:B:6:0x0011\l|0x004b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CachedContentIndex.\<init\>((r4 'this' I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.File A[D('cacheDir' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte[] A[D('secretKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0040\-0x0046: r0 'e' java.security.GeneralSecurityException\l  ?\-0x004c: r5 'cacheDir' java.io.File\l  ?\-0x004c: r6 'secretKey' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_8;
Node_15 -> Node_12;
}

