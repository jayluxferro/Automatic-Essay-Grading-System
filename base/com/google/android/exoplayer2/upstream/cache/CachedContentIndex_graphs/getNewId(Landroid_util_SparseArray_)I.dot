digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CachedContentIndex.getNewId(Landroid\/util\/SparseArray;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = r3.size()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r1 != 0) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|PHI: r0 \l  PHI: (r0v1 'id' int) = (r0v0 'id' int), (r0v6 'id' int) binds: [B:9:0x0013, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= 0) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|r0 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|LOOP_START\lPHI: r0 \l  PHI: (r0v4 'id' int) = (r0v3 'id' int), (r0v5 'id' int) binds: [B:4:0x0009, B:10:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000a\-\>B:10:0x001c\l|if (r0 \>= r1) goto L_0x0012\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r0 == r3.keyAt(r0)) goto L_0x001c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\lPHI: r0 \l  PHI: (r0v2 'id' int) = (r0v1 'id' int), (r0v4 'id' int), (r0v4 'id' int) binds: [B:3:0x0007, B:12:0x0012, B:11:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|int r0 = r3.keyAt(r1 + \-1) + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|LOOP_END\lLOOP:0: B:5:0x000a\-\>B:10:0x001c\l|int r0 = r0 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.upstream.cache.CachedContentIndex.getNewId((r3v0 'idToKey' android.util.SparseArray\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/util\/SparseArray, \<, Ljava\/lang\/String;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_7 -> Node_11[style=dashed];
Node_9 -> Node_3;
Node_10 -> Node_5;
Node_11 -> Node_8;
Node_12 -> Node_8;
}

