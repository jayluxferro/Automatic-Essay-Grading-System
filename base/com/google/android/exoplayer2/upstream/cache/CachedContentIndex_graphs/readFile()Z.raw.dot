digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CachedContentIndex.readFile()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r9 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}, TRY_ENTER]\l0x0003: IGET  (r12 I:com.google.android.exoplayer2.util.AtomicFile) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.atomicFile com.google.android.exoplayer2.util.AtomicFile A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x0005: INVOKE  (r12 I:java.io.InputStream) = (r12 I:com.google.android.exoplayer2.util.AtomicFile) com.google.android.exoplayer2.util.AtomicFile.openRead():java.io.InputStream type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x0009: INVOKE  \l  (r9 I:java.io.BufferedInputStream)\l  (r12 I:java.io.InputStream)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x000c: NEW_INSTANCE  (r8 I:java.io.DataInputStream) =  java.io.DataInputStream A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x000e: INVOKE  \l  (r8 I:java.io.DataInputStream)\l  (r9 I:java.io.InputStream A[D('inputStream' java.io.InputStream)])\l java.io.DataInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|SYNTHETIC\lSplitter:B:3:0x0011\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0011\l|0x0011: INVOKE  (r11 I:int) = \l  (r8 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0015: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) == (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  \l  (r8 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r12 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|SYNTHETIC\lSplitter:B:12:0x0020\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0020\l|0x0020: INVOKE  (r3 I:int) = \l  (r8 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER]\l0x0024: ARITH  (r12 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x007d A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: IGET  (r12 I:javax.crypto.Cipher) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0034 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0032 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: INVOKE  \l  (r8 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|0x0032: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|0x0034: CONST  (r12 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|SYNTHETIC\lSplitter:B:22:0x0036\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x0036\l|0x0036: NEW_ARRAY  (r6 I:byte[]) = (r12 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER]\l0x0038: INVOKE  \l  (r8 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l  (r6 I:byte[] A[D('initializationVector' byte[])])\l java.io.DataInputStream.readFully(byte[]):void type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x003b: NEW_INSTANCE  (r10 I:javax.crypto.spec.IvParameterSpec) =  javax.crypto.spec.IvParameterSpec A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x003d: INVOKE  \l  (r10 I:javax.crypto.spec.IvParameterSpec)\l  (r6 I:byte[] A[D('initializationVector' byte[])])\l javax.crypto.spec.IvParameterSpec.\<init\>(byte[]):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0040|SYNTHETIC\lSplitter:B:24:0x0040\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0040\l|0x0040: IGET  (r12 I:javax.crypto.Cipher) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher A[Catch:\{ InvalidKeyException \-\> 0x006c, InvalidAlgorithmParameterException \-\> 0x00b1 \}, TRY_ENTER]\l0x0042: CONST  (r13 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ InvalidKeyException \-\> 0x006c, InvalidAlgorithmParameterException \-\> 0x00b1 \}]\l0x0043: IGET  (r14 I:javax.crypto.spec.SecretKeySpec) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.secretKeySpec javax.crypto.spec.SecretKeySpec A[Catch:\{ InvalidKeyException \-\> 0x006c, InvalidAlgorithmParameterException \-\> 0x00b1 \}]\l0x0045: INVOKE  \l  (r12 I:javax.crypto.Cipher)\l  (r13 I:int)\l  (r14 I:java.security.Key)\l  (r10 I:java.security.spec.AlgorithmParameterSpec A[D('ivParameterSpec' javax.crypto.spec.IvParameterSpec)])\l javax.crypto.Cipher.init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec):void type: VIRTUAL A[Catch:\{ InvalidKeyException \-\> 0x006c, InvalidAlgorithmParameterException \-\> 0x00b1 \}, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|SYNTHETIC\lSplitter:B:26:0x0048\l}"];
Node_27 [shape=record,label="{27\:\ ?|Splitter:B:26:0x0048\l|0x0048: NEW_INSTANCE  (r7 I:java.io.DataInputStream) =  java.io.DataInputStream A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER]\l0x004a: NEW_INSTANCE  (r12 I:javax.crypto.CipherInputStream) =  javax.crypto.CipherInputStream A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x004c: IGET  (r13 I:javax.crypto.Cipher) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x004e: INVOKE  \l  (r12 I:javax.crypto.CipherInputStream)\l  (r9 I:java.io.InputStream A[D('inputStream' java.io.InputStream)])\l  (r13 I:javax.crypto.Cipher)\l javax.crypto.CipherInputStream.\<init\>(java.io.InputStream, javax.crypto.Cipher):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x0051: INVOKE  (r7 I:java.io.DataInputStream), (r12 I:java.io.InputStream) java.io.DataInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|SYNTHETIC\lSplitter:B:28:0x0054\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0054\l|0x0054: INVOKE  (r1 I:int) = \l  (r7 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}, TRY_ENTER]\l0x0058: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x0059: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x005a|0x005a: IF  (r5 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('count' int)])  \-\> B:48:0x0086 A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l}"];
Node_31 [shape=record,label="{31\:\ 0x005c|0x005c: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent) =  com.google.android.exoplayer2.upstream.cache.CachedContent A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x005e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent)\l  (r7 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.upstream.cache.CachedContent.\<init\>(java.io.DataInputStream):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x0061: INVOKE  \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent A[D('cachedContent' com.google.android.exoplayer2.upstream.cache.CachedContent)])\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.add(com.google.android.exoplayer2.upstream.cache.CachedContent):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}]\l0x0064: INVOKE  (r12 I:int) = \l  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent A[D('cachedContent' com.google.android.exoplayer2.upstream.cache.CachedContent)])\l com.google.android.exoplayer2.upstream.cache.CachedContent.headerHashCode():int type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}, TRY_LEAVE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0067|0x0068: ARITH  (r4 I:int A[D('hashCode' int)]) = (r4 I:int A[D('hashCode' int)]) + (r12 I:int) \l0x0069: ARITH  (r5 I:int A[D('i' int)]) = (r5 I:int A[D('i' int)]) + (1 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x006c|ExcHandler: InvalidKeyException null\lSplitter:B:24:0x0040\l|0x006c: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_34 [shape=record,label="{34\:\ 0x006d|0x006d: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x006e|SYNTHETIC\lSplitter:B:35:0x006e\l}"];
Node_36 [shape=record,label="{36\:\ ?|Splitter:B:35:0x006e\l|0x006e: NEW_INSTANCE  (r12 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER]\l0x0070: INVOKE  \l  (r12 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.Throwable A[D('e' java.security.GeneralSecurityException)])\l java.lang.IllegalStateException.\<init\>(java.lang.Throwable):void type: DIRECT A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0073|0x0073: THROW  (r12 I:java.lang.Throwable) A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_LEAVE]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0074|ExcHandler: FileNotFoundException null\lSplitter:B:3:0x0011\l|0x0074: MOVE_EXCEPTION  (r2 I:?[OBJECT] A[D('e' java.security.GeneralSecurityException)]) =  \l}"];
Node_39 [shape=record,label="{39\:\ 0x0075|0x0075: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x0076|0x0076: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x0077|0x0077: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_42 [shape=record,label="{42\:\ 0x0079|0x0079: INVOKE  \l  (r7 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_43 [shape=record,label="{43\:\ 0x007d|SYNTHETIC\lSplitter:B:43:0x007d\l}"];
Node_44 [shape=record,label="{44\:\ ?|Splitter:B:43:0x007d\l|0x007d: IGET  (r12 I:javax.crypto.Cipher) = \l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.cipher javax.crypto.Cipher A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_ENTER]\l}"];
Node_45 [shape=record,label="{45\:\ 0x007f|0x007f: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0084 A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0081|0x0081: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}]\l0x0082: IPUT  \l  (r12 I:boolean)\l  (r15 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.changed boolean A[Catch:\{ FileNotFoundException \-\> 0x0074, IOException \-\> 0x00b7, all \-\> 0x00b4 \}, TRY_LEAVE]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0084|0x0084: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_48 [shape=record,label="{48\:\ 0x0086|SYNTHETIC\lSplitter:B:48:0x0086\l}"];
Node_49 [shape=record,label="{49\:\ ?|Splitter:B:48:0x0086\l|0x0086: INVOKE  (r12 I:int) = \l  (r7 I:java.io.DataInputStream A[D('input' java.io.DataInputStream)])\l java.io.DataInputStream.readInt():int type: VIRTUAL A[Catch:\{ FileNotFoundException \-\> 0x00ba, IOException \-\> 0x009a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_51 [shape=record,label="{51\:\ 0x008a|0x008a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hashCode' int)])  \-\> B:55:0x0093 \l}"];
Node_52 [shape=record,label="{52\:\ 0x008c|0x008c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_53 [shape=record,label="{53\:\ 0x008d|0x008d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_54 [shape=record,label="{54\:\ 0x008f|0x008f: INVOKE  \l  (r7 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_55 [shape=record,label="{55\:\ 0x0093|0x0093: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0098 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0095|0x0095: INVOKE  \l  (r7 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_57 [shape=record,label="{57\:\ 0x0098|0x0098: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x009a|ExcHandler: IOException null\lSplitter:B:1:0x0001\l|0x009a: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_59 [shape=record,label="{59\:\ 0x009b|0x009b: CONST_STR  (r12 I:java.lang.String) =  \"CachedContentIndex\" \l0x009d: CONST_STR  (r13 I:java.lang.String) =  \"Error reading cache content index file.\" \l}"];
Node_60 [shape=record,label="{60\:\ 0x009f|SYNTHETIC\lSplitter:B:60:0x009f\l}"];
Node_61 [shape=record,label="{61\:\ ?|Splitter:B:60:0x009f\l|0x009f: INVOKE  \l  (r12 I:java.lang.String)\l  (r13 I:java.lang.String)\l  (r2 I:java.lang.Throwable A[D('e' java.io.IOException)])\l android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x00aa \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_62 [shape=record,label="{62\:\ 0x00a2|0x00a2: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_63 [shape=record,label="{63\:\ 0x00a3|0x00a3: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_64 [shape=record,label="{64\:\ 0x00a5|0x00a5: INVOKE  \l  (r7 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_65 [shape=record,label="{65\:\ 0x00aa|ExcHandler: all null\lSplitter:B:60:0x009f\l|0x00aa: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_66 [shape=record,label="{66\:\ 0x00ab|0x00ab: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('input' java.io.DataInputStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00b0 \l}"];
Node_67 [shape=record,label="{67\:\ 0x00ad|0x00ad: INVOKE  \l  (r7 I:java.io.Closeable A[D('input' java.io.DataInputStream)])\l com.google.android.exoplayer2.util.Util.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_68 [shape=record,label="{68\:\ 0x00b0|0x00b0: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_69 [shape=record,label="{69\:\ 0x00b1|ExcHandler: InvalidAlgorithmParameterException null\lSplitter:B:24:0x0040\l|0x00b1: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_70 [shape=record,label="{70\:\ 0x00b2|0x00b2: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x00b4|ExcHandler: all null\lSplitter:B:3:0x0011\l|0x00b4: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_72 [shape=record,label="{72\:\ 0x00b5|0x00b5: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_73 [shape=record,label="{73\:\ 0x00b7|ExcHandler: IOException null\lSplitter:B:3:0x0011\l|0x00b7: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_74 [shape=record,label="{74\:\ 0x00b8|0x00b8: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('input' java.io.DataInputStream)])\l \l}"];
Node_75 [shape=record,label="{75\:\ 0x00ba|ExcHandler: FileNotFoundException null\lSplitter:B:1:0x0001\l|0x00ba: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.upstream.cache.CachedContentIndex.readFile((r15 'this' I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0001\-0x0011: r7 'input' java.io.DataInputStream\l  0x0011\-0x001f: r8 'input' java.io.DataInputStream\l  0x000c\-0x001f: r9 'inputStream' java.io.InputStream\l  0x0015\-0x001f: r11 'version' int\l  0x001f\-0x0020: r7 'input' java.io.DataInputStream\l  0x0020\-0x0033: r8 'input' java.io.DataInputStream\l  0x0033\-0x0034: r7 'input' java.io.DataInputStream\l  0x0038\-0x0054: r6 'initializationVector' byte[]\l  0x0034\-0x0054: r8 'input' java.io.DataInputStream\l  0x0040\-0x0054: r10 'ivParameterSpec' javax.crypto.spec.IvParameterSpec\l  0x0061\-0x006c: r0 'cachedContent' com.google.android.exoplayer2.upstream.cache.CachedContent\l  0x0058\-0x006c: r1 'count' int\l  0x0059\-0x006c: r4 'hashCode' int\l  0x005a\-0x006c: r5 'i' int\l  0x0054\-0x006c: r7 'input' java.io.DataInputStream\l  0x006e\-0x0074: r2 'e' java.security.GeneralSecurityException\l  0x0024\-0x0074: r3 'flags' int\l  0x006c\-0x0074: r6 'initializationVector' byte[]\l  0x006c\-0x0074: r10 'ivParameterSpec' javax.crypto.spec.IvParameterSpec\l  0x0020\-0x0074: r11 'version' int\l  0x006c\-0x0076: r8 'input' java.io.DataInputStream\l  0x0020\-0x0076: r9 'inputStream' java.io.InputStream\l  0x0076\-0x007d: r2 'e' java.io.FileNotFoundException\l  0x0076\-0x007d: r7 'input' java.io.DataInputStream\l  0x007d\-0x0085: r8 'input' java.io.DataInputStream\l  0x0086\-0x009a: r1 'count' int\l  0x007d\-0x009a: r3 'flags' int\l  0x0086\-0x009a: r4 'hashCode' int\l  0x0086\-0x009a: r5 'i' int\l  0x007d\-0x009a: r9 'inputStream' java.io.InputStream\l  0x007d\-0x009a: r11 'version' int\l  0x009b\-0x00aa: r2 'e' java.io.IOException\l  0x0085\-0x00b1: r7 'input' java.io.DataInputStream\l  0x00b1\-0x00b4: r3 'flags' int\l  0x00b1\-0x00b4: r6 'initializationVector' byte[]\l  0x00b1\-0x00b4: r10 'ivParameterSpec' javax.crypto.spec.IvParameterSpec\l  0x00b1\-0x00b4: r11 'version' int\l  0x00b1\-0x00b6: r8 'input' java.io.DataInputStream\l  0x00b6\-0x00b7: r7 'input' java.io.DataInputStream\l  0x00b7\-0x00b9: r8 'input' java.io.DataInputStream\l  0x00b1\-0x00ba: r9 'inputStream' java.io.InputStream\l  0x00b9\-0x00bb: r7 'input' java.io.DataInputStream\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_75;
Node_1 -> Node_58;
Node_2 -> Node_3;
Node_2 -> Node_75;
Node_2 -> Node_58;
Node_3 -> Node_4;
Node_3 -> Node_38;
Node_3 -> Node_73;
Node_3 -> Node_71;
Node_4 -> Node_5;
Node_4 -> Node_38;
Node_4 -> Node_73;
Node_4 -> Node_71;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_38;
Node_12 -> Node_73;
Node_12 -> Node_71;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_43;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_11;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_38;
Node_22 -> Node_73;
Node_22 -> Node_71;
Node_23 -> Node_24;
Node_23 -> Node_38;
Node_23 -> Node_73;
Node_23 -> Node_71;
Node_24 -> Node_25;
Node_24 -> Node_33;
Node_24 -> Node_69;
Node_25 -> Node_26;
Node_25 -> Node_33;
Node_25 -> Node_69;
Node_26 -> Node_27;
Node_26 -> Node_38;
Node_26 -> Node_73;
Node_26 -> Node_71;
Node_27 -> Node_28;
Node_27 -> Node_38;
Node_27 -> Node_73;
Node_27 -> Node_71;
Node_28 -> Node_29;
Node_28 -> Node_75;
Node_28 -> Node_58;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_48;
Node_31 -> Node_32;
Node_32 -> Node_30;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_38;
Node_35 -> Node_73;
Node_35 -> Node_71;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_11;
Node_41 -> Node_42[style=dashed];
Node_42 -> Node_11;
Node_43 -> Node_44;
Node_43 -> Node_38;
Node_43 -> Node_73;
Node_43 -> Node_71;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_28;
Node_48 -> Node_49;
Node_48 -> Node_75;
Node_48 -> Node_58;
Node_49 -> Node_75;
Node_49 -> Node_58;
Node_49 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_55;
Node_52 -> Node_53;
Node_53 -> Node_11;
Node_53 -> Node_54[style=dashed];
Node_54 -> Node_11;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_57;
Node_57 -> Node_11;
Node_58 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_60 -> Node_65;
Node_61 -> Node_62;
Node_61 -> Node_65;
Node_62 -> Node_63;
Node_63 -> Node_11;
Node_63 -> Node_64[style=dashed];
Node_64 -> Node_11;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_69 -> Node_70;
Node_70 -> Node_35;
Node_71 -> Node_72;
Node_72 -> Node_66;
Node_73 -> Node_74;
Node_74 -> Node_59;
Node_75 -> Node_40;
}

