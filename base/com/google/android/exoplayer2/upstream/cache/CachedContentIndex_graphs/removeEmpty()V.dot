digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CachedContentIndex.removeEmpty()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.LinkedList r1 = new java.util.LinkedList\<\>()\ljava.util.Iterator r3 = r5.keyToContent.values().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lLOOP:0: B:1:0x000f\-\>B:11:0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r3.hasNext() == false) goto L_0x0027\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|com.google.android.exoplayer2.upstream.cache.CachedContent r0 = r3.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (r0.isEmpty() == false) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|r1.add(r0.key)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|java.util.Iterator r3 = r1.iterator()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|LOOP_START\lLOOP:1: B:7:0x002b\-\>B:9:0x0031\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|if (r3.hasNext() == false) goto L_0x003b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|LOOP_END\lLOOP:1: B:7:0x002b\-\>B:9:0x0031\l|removeEmpty((java.lang.String) r3.next())\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000f\-\>B:11:0x000f\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CachedContentIndex.removeEmpty((r5v0 'this' com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_7;
Node_11 -> Node_1;
Node_12 -> Node_6;
Node_13 -> Node_11;
Node_14 -> Node_11;
Node_15 -> Node_10;
}

