digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheSpan.compareTo(Lcom\/google\/android\/exoplayer2\/upstream\/cache\/CacheSpan;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0002: IGET  (r2 I:java.lang.String) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.CacheSpan)\l com.google.android.exoplayer2.upstream.cache.CacheSpan.key java.lang.String \l0x0004: IGET  (r3 I:java.lang.String) = \l  (r9 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('another' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CacheSpan.key java.lang.String \l0x0006: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r2 I:java.lang.String) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.CacheSpan)\l com.google.android.exoplayer2.upstream.cache.CacheSpan.key java.lang.String \l0x000e: IGET  (r3 I:java.lang.String) = \l  (r9 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('another' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CacheSpan.key java.lang.String \l0x0010: INVOKE  (r2 I:int) = (r2 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.compareTo(java.lang.String):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.CacheSpan)\l com.google.android.exoplayer2.upstream.cache.CacheSpan.position long \l0x0017: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('another' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CacheSpan.position long \l0x0019: ARITH  (r0 I:long) = (r2 I:long) \- (r4 I:long) \l0x001b: CMP_L  (r2 I:int) = (r0 I:long A[D('startOffsetDiff' long)]), (r6 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: CMP_L  (r2 I:int) = (r0 I:long A[D('startOffsetDiff' long)]), (r6 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.cache.CacheSpan.compareTo((r8 'this' I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('another' com.google.android.exoplayer2.upstream.cache.CacheSpan), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.NonNull, \{\}]\lDebug Info:\l  0x001b\-0x0028: r0 'startOffsetDiff' long\l  ?\-0x0028: r9 'another' com.google.android.exoplayer2.upstream.cache.CacheSpan\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
Node_10 -> Node_3;
}

