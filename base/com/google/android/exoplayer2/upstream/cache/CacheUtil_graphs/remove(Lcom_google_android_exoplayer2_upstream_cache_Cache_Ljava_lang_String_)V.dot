digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheUtil.remove(Lcom\/google\/android\/exoplayer2\/upstream\/cache\/Cache;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.NavigableSet r1 = r4.getCachedSpans(r5)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r1 != null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|java.util.Iterator r2 = r1.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_START\lLOOP:0: B:3:0x000b\-\>B:9:0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r2.hasNext() == false) goto L_0x0006\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x0017|SYNTHETIC\lSplitter:B:6:0x0017\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ CacheException \-\> 0x001b \}\lSplitter:B:6:0x0017\l|r4.removeSpan(r2.next())     \/\/ Catch:\{ CacheException \-\> 0x001b \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|ExcHandler: CacheException (e com.google.android.exoplayer2.upstream.cache.Cache$CacheException)\lSplitter:B:6:0x0017\l}"];
Node_9 [shape=record,label="{9\:\ 0x000b|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000b\-\>B:9:0x000b\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.exoplayer2.upstream.cache.CacheUtil.remove((r4v0 'cache' com.google.android.exoplayer2.upstream.cache.Cache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'key' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_8 -> Node_12;
Node_9 -> Node_3;
Node_10 -> Node_14;
Node_11 -> Node_9;
Node_12 -> Node_9;
}

