digraph "CFG forcom.google.android.exoplayer2.upstream.cache.CacheDataSource.close()V" {
subgraph cluster_Region_447240086 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.uri = null\lnotifyBytesRead()\l}"];
subgraph cluster_TryCatchRegion_747657792 {
label = "Try: R(1:2) catches: R(3:4|5|6)";
node [shape=record,color=blue];
subgraph cluster_Region_301009700 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IOException \-\> 0x000a \}\lSplitter:B:1:0x0006\l|closeCurrentSource()     \/\/ Catch:\{ IOException \-\> 0x000a \}\l}"];
}
subgraph cluster_Region_84945487 {
label = "R(3:4|5|6) | ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0006\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|handleBeforeThrow(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|throw r0\l}"];
}
}
}
subgraph cluster_Region_84945487 {
label = "R(3:4|5|6) | ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0006\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|handleBeforeThrow(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|throw r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|SYNTHETIC\lSplitter:B:1:0x0006\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0009}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.cache.CacheDataSource.close((r2v0 'this' com.google.android.exoplayer2.upstream.cache.CacheDataSource A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_4;
}

