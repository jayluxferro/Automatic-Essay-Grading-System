digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.commitFile(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan) = \l  (r9 I:java.io.File A[D('file' java.io.File)])\l  (r4 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.createCacheEntry(java.io.File, com.google.android.exoplayer2.upstream.cache.CachedContentIndex):com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan type: STATIC A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0022 A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r4 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0032 \}]\l0x000f: IGET  (r4 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CacheSpan\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.lockedSpans java.util.HashMap A[Catch:\{ all \-\> 0x0032 \}]\l0x0011: IGET  (r5 I:java.lang.String) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.key java.lang.String A[Catch:\{ all \-\> 0x0032 \}]\l0x0013: INVOKE  (r4 I:boolean) = (r4 I:java.util.HashMap), (r5 I:java.lang.Object) java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l0x0017: INVOKE  (r4 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0032 \}]\l0x001a: INVOKE  (r4 I:boolean) = (r9 I:java.io.File A[D('file' java.io.File)]) java.io.File.exists():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|SYNTHETIC\lSplitter:B:12:0x0024\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0024\l|0x0024: INVOKE  (r4 I:long) = (r9 I:java.io.File A[D('file' java.io.File)]) java.io.File.length():long type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x0028: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0032 \}]\l0x002a: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0035 A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: INVOKE  (r9 I:java.io.File A[D('file' java.io.File)]) java.io.File.delete():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0032: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0035|SYNTHETIC\lSplitter:B:20:0x0035\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0035\l|0x0035: IGET  (r4 I:java.lang.String) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.key java.lang.String A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x0037: INVOKE  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r4 I:java.lang.String)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.getContentLength(java.lang.String):long type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l0x003b: INVOKE  (r0 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0032 \}]\l0x003f: INVOKE  (r4 I:long) = (r0 I:java.lang.Long A[D('length' java.lang.Long)]) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l0x0043: CONST  (r6 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0032 \}]\l0x0045: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0059 A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: IGET  (r4 I:long) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.position long A[Catch:\{ all \-\> 0x0032 \}]\l0x004b: IGET  (r6 I:long) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.length long A[Catch:\{ all \-\> 0x0032 \}]\l0x004d: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) A[Catch:\{ all \-\> 0x0032 \}]\l0x004e: INVOKE  (r6 I:long) = (r0 I:java.lang.Long A[D('length' java.lang.Long)]) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l0x0052: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:28:0x0065 A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0056|0x0056: INVOKE  (r2 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0059|0x0059: INVOKE  \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCache.addSpan(com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan):void type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l0x005c: IGET  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[Catch:\{ all \-\> 0x0032 \}]\l0x005e: INVOKE  \l  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.store():void type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l0x0061: INVOKE  (r8 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0065|0x0065: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.cache.SimpleCache.commitFile((r8 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r9 I:java.io.File A[D('file' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x0032: r1 'span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan\l  0x003f\-0x0066: r0 'length' java.lang.Long\l  0x0035\-0x0066: r1 'span' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan\l  ?\-0x0066: r9 'file' java.io.File\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_11 -> Node_6;
Node_12 -> Node_13;
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_9;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_9;
Node_28 -> Node_25;
}

