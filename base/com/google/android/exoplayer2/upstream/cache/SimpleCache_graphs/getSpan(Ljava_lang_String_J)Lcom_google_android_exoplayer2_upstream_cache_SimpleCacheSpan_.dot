digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.getSpan(Ljava\/lang\/String;J)Lcom\/google\/android\/exoplayer2\/upstream\/cache\/SimpleCacheSpan;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.exoplayer2.upstream.cache.CachedContent r0 = r4.index.get(r5)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 != null) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lLOOP:0: B:3:0x000d\-\>B:7:0x001d\l|com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan r1 = r0.getSpan(r6)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r1.isCached == false) goto L_0x000c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r1.file.exists() != false) goto L_0x000c\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:7:0x001d\l|removeStaleSpansAndCachedContents()\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.createOpenHole(r5, r6)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan com.google.android.exoplayer2.upstream.cache.SimpleCache.getSpan((r4v0 'this' com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r5v0 'key' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'position' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_3;
Node_8 -> Node_11;
Node_9 -> Node_12;
}

