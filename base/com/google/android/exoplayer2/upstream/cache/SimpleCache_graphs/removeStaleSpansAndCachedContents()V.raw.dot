digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.removeStaleSpansAndCachedContents()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r2 I:java.util.LinkedList) =  java.util.LinkedList \l0x0002: INVOKE  (r2 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x0005: IGET  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r6 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex \l0x0007: INVOKE  (r3 I:java.util.Collection) = \l  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.getAll():java.util.Collection type: VIRTUAL \l0x000b: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent) = (com.google.android.exoplayer2.upstream.cache.CachedContent) (r0 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r4 I:java.util.TreeSet) = \l  (r0 I:com.google.android.exoplayer2.upstream.cache.CachedContent A[D('cachedContent' com.google.android.exoplayer2.upstream.cache.CachedContent)])\l com.google.android.exoplayer2.upstream.cache.CachedContent.getSpans():java.util.TreeSet type: VIRTUAL \l0x001f: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.TreeSet) java.util.TreeSet.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheSpan) = (com.google.android.exoplayer2.upstream.cache.CacheSpan) (r1 I:?[OBJECT, ARRAY]) \l0x002f: IGET  (r5 I:java.io.File) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CacheSpan.file java.io.File \l0x0031: INVOKE  (r5 I:boolean) = (r5 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: INVOKE  \l  (r2 I:java.util.LinkedList A[D('spansToBeRemoved' java.util.LinkedList\<com.google.android.exoplayer2.upstream.cache.CacheSpan\>)])\l  (r1 I:java.lang.Object A[D('span' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l java.util.LinkedList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: INVOKE  (r3 I:java.util.Iterator) = \l  (r2 I:java.util.LinkedList A[D('spansToBeRemoved' java.util.LinkedList\<com.google.android.exoplayer2.upstream.cache.CacheSpan\>)])\l java.util.LinkedList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0049: CHECK_CAST  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheSpan) = (com.google.android.exoplayer2.upstream.cache.CacheSpan) (r1 I:?[OBJECT, ARRAY]) \l0x004b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004c: INVOKE  \l  (r6 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l  (r4 I:boolean)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.removeSpan(com.google.android.exoplayer2.upstream.cache.CacheSpan, boolean):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: IGET  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r6 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex \l0x0052: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.removeEmpty():void type: VIRTUAL \l0x0055: IGET  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r6 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex \l0x0057: INVOKE  \l  (r3 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.store():void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.upstream.cache.SimpleCache.removeStaleSpansAndCachedContents((r6 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x001b\-0x003b: r0 'cachedContent' com.google.android.exoplayer2.upstream.cache.CachedContent\l  0x002f\-0x003b: r1 'span' com.google.android.exoplayer2.upstream.cache.CacheSpan\l  0x004b\-0x0050: r1 'span' com.google.android.exoplayer2.upstream.cache.CacheSpan\l  0x0005\-0x005a: r2 'spansToBeRemoved' java.util.LinkedList\<com.google.android.exoplayer2.upstream.cache.CacheSpan\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_14;
}

