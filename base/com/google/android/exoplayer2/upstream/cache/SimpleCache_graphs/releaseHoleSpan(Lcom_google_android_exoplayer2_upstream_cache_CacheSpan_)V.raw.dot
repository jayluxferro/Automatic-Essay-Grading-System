digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.releaseHoleSpan(Lcom\/google\/android\/exoplayer2\/upstream\/cache\/CacheSpan;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CacheSpan\>) = \l  (r2 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.lockedSpans java.util.HashMap A[Catch:\{ all \-\> 0x0016 \}, TRY_ENTER]\l0x0003: IGET  (r1 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('holeSpan' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CacheSpan.key java.lang.String A[Catch:\{ all \-\> 0x0016 \}]\l0x0005: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) java.util.HashMap.remove(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0016 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('holeSpan' com.google.android.exoplayer2.upstream.cache.CacheSpan)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014 A[Catch:\{ all \-\> 0x0016 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0016 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0016 \}]\l0x000f: INVOKE  (r2 I:java.lang.Object) java.lang.Object.notifyAll():void type: VIRTUAL A[Catch:\{ all \-\> 0x0016 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0016: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.cache.SimpleCache.releaseHoleSpan((r2 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('holeSpan' com.google.android.exoplayer2.upstream.cache.CacheSpan), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0018: r3 'holeSpan' com.google.android.exoplayer2.upstream.cache.CacheSpan\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

