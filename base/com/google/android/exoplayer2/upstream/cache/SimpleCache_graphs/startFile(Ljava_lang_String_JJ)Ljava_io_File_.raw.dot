digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.startFile(Ljava\/lang\/String;JJ)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CacheSpan\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.lockedSpans java.util.HashMap A[Catch:\{ all \-\> 0x0036 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.HashMap)\l  (r9 I:java.lang.Object A[D('key' java.lang.String)])\l java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x0007: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0036 \}]\l0x000a: IGET  (r0 I:java.io.File) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.cacheDir java.io.File A[Catch:\{ all \-\> 0x0036 \}]\l0x000c: INVOKE  (r0 I:boolean) = (r0 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.removeStaleSpansAndCachedContents():void type: DIRECT A[Catch:\{ all \-\> 0x0036 \}]\l0x0015: IGET  (r0 I:java.io.File) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.cacheDir java.io.File A[Catch:\{ all \-\> 0x0036 \}]\l0x0017: INVOKE  (r0 I:java.io.File) java.io.File.mkdirs():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IGET  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheEvictor) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.evictor com.google.android.exoplayer2.upstream.cache.CacheEvictor A[Catch:\{ all \-\> 0x0036 \}]\l0x001c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0036 \}]\l0x001d: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY] A[D('key' java.lang.String)]) A[Catch:\{ all \-\> 0x0036 \}]\l0x001e: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double] A[D('position' long)]) A[Catch:\{ all \-\> 0x0036 \}]\l0x001f: MOVE  (r6 I:?[long, double]) = (r12 I:?[long, double] A[D('maxLength' long)]) A[Catch:\{ all \-\> 0x0036 \}]\l0x0020: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheEvictor)\l  (r2 I:com.google.android.exoplayer2.upstream.cache.Cache)\l  (r3 I:java.lang.String)\l  (r4 I:long)\l  (r6 I:long)\l com.google.android.exoplayer2.upstream.cache.CacheEvictor.onStartFile(com.google.android.exoplayer2.upstream.cache.Cache, java.lang.String, long, long):void type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x0023: IGET  (r0 I:java.io.File) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.cacheDir java.io.File A[Catch:\{ all \-\> 0x0036 \}]\l0x0025: IGET  (r1 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r8 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[Catch:\{ all \-\> 0x0036 \}]\l0x0027: INVOKE  (r1 I:int) = \l  (r1 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l  (r9 I:java.lang.String A[D('key' java.lang.String)])\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.assignIdForKey(java.lang.String):int type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x002b: INVOKE  (r4 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC A[Catch:\{ all \-\> 0x0036 \}]\l0x002f: MOVE  (r2 I:?[long, double]) = (r10 I:?[long, double] A[D('position' long)]) A[Catch:\{ all \-\> 0x0036 \}]\l0x0030: INVOKE  (r0 I:java.io.File) = (r0 I:java.io.File), (r1 I:int), (r2 I:long), (r4 I:long) com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.getCacheFile(java.io.File, int, long, long):java.io.File type: STATIC A[Catch:\{ all \-\> 0x0036 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: RETURN  (r0 I:java.io.File) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0036: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized java.io.File com.google.android.exoplayer2.upstream.cache.SimpleCache.startFile((r8 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('maxLength' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0038: r9 'key' java.lang.String\l  ?\-0x0038: r10 'position' long\l  ?\-0x0038: r12 'maxLength' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

