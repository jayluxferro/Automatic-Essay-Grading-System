digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.startReadWriteNonBlocking(Ljava\/lang\/String;J)Lcom\/google\/android\/exoplayer2\/upstream\/cache\/SimpleCacheSpan;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r2 I:com.google.android.exoplayer2.upstream.cache.Cache$CacheException) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.initializationException com.google.android.exoplayer2.upstream.cache.Cache$CacheException A[Catch:\{ all \-\> 0x0008 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x000b A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r2 I:com.google.android.exoplayer2.upstream.cache.Cache$CacheException) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.initializationException com.google.android.exoplayer2.upstream.cache.Cache$CacheException A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0008 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0008: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x000b|SYNTHETIC\lSplitter:B:9:0x000b\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000b\l|0x000b: INVOKE  (r0 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r5 I:java.lang.String A[D('key' java.lang.String)])\l  (r6 I:long A[D('position' long)])\l com.google.android.exoplayer2.upstream.cache.SimpleCache.getSpan(java.lang.String, long):com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan type: DIRECT A[Catch:\{ all \-\> 0x0008 \}, TRY_ENTER]\l0x000f: IGET  (r2 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan.isCached boolean A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0022 A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: IGET  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.index com.google.android.exoplayer2.upstream.cache.CachedContentIndex A[Catch:\{ all \-\> 0x0008 \}]\l0x0015: INVOKE  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContent) = \l  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContentIndex)\l  (r5 I:java.lang.String A[D('key' java.lang.String)])\l com.google.android.exoplayer2.upstream.cache.CachedContentIndex.get(java.lang.String):com.google.android.exoplayer2.upstream.cache.CachedContent type: VIRTUAL A[Catch:\{ all \-\> 0x0008 \}]\l0x0019: INVOKE  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan) = \l  (r2 I:com.google.android.exoplayer2.upstream.cache.CachedContent)\l  (r0 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.CachedContent.touch(com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan):com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan type: VIRTUAL A[Catch:\{ all \-\> 0x0008 \}]\l0x001d: INVOKE  \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r0 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan A[D('cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l  (r1 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('newCacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l com.google.android.exoplayer2.upstream.cache.SimpleCache.notifySpanTouched(com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan, com.google.android.exoplayer2.upstream.cache.CacheSpan):void type: DIRECT A[Catch:\{ all \-\> 0x0008 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: RETURN  \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\lSplitter:B:15:0x0022\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0022\l|0x0022: IGET  (r2 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CacheSpan\>) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.lockedSpans java.util.HashMap A[Catch:\{ all \-\> 0x0008 \}, TRY_ENTER]\l0x0024: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.HashMap)\l  (r5 I:java.lang.Object A[D('key' java.lang.String)])\l java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0031 A[Catch:\{ all \-\> 0x0008 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|0x002a: IGET  (r2 I:java.util.HashMap\<java.lang.String, com.google.android.exoplayer2.upstream.cache.CacheSpan\>) = \l  (r4 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.lockedSpans java.util.HashMap A[Catch:\{ all \-\> 0x0008 \}]\l0x002c: INVOKE  \l  (r2 I:java.util.HashMap)\l  (r5 I:java.lang.Object A[D('key' java.lang.String)])\l  (r0 I:java.lang.Object A[D('cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0008 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY] A[D('cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan)])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0031|0x0031: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public synchronized com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan com.google.android.exoplayer2.upstream.cache.SimpleCache.startReadWriteNonBlocking((r4 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001d\-0x0020: r1 'newCacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan\l  0x000f\-0x0032: r0 'cacheSpan' com.google.android.exoplayer2.upstream.cache.SimpleCacheSpan\l  ?\-0x0032: r5 'key' java.lang.String\l  ?\-0x0032: r6 'position' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_13;
}

