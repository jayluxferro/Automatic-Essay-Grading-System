digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.getCachedSpans(Ljava\/lang\/String;)Ljava\/util\/NavigableSet;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|com.google.android.exoplayer2.upstream.cache.CachedContent r0 = r3.index.get(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r0 != null) goto L_0x000c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|r1 = null\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|PHI: r1 \l  PHI: (r1v3 java.util.TreeSet) = (r1v2 java.util.TreeSet), (r1v4 java.util.TreeSet) binds: [B:8:?, B:4:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|SYNTHETIC\lSplitter:B:7:0x000c\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000c\l|java.util.TreeSet r1 = new java.util.TreeSet(r0.getSpans())     \/\/ Catch:\{  \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|REMOVE\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public synchronized java.util.NavigableSet\<com.google.android.exoplayer2.upstream.cache.CacheSpan\> com.google.android.exoplayer2.upstream.cache.SimpleCache.getCachedSpans((r3v0 'this' com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r4v0 'key' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Ljava\/util\/NavigableSet, \<, Lcom\/google\/android\/exoplayer2\/upstream\/cache\/CacheSpan;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

