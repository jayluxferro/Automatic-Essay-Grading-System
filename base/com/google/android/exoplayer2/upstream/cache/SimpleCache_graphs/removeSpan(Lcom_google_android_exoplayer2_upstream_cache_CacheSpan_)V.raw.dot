digraph "CFG forcom.google.android.exoplayer2.upstream.cache.SimpleCache.removeSpan(Lcom\/google\/android\/exoplayer2\/upstream\/cache\/CacheSpan;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|SYNTHETIC\lSplitter:B:2:0x0002\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0002\l|0x0002: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.cache.SimpleCache)\l  (r2 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.CacheSpan)])\l  (r0 I:boolean)\l com.google.android.exoplayer2.upstream.cache.SimpleCache.removeSpan(com.google.android.exoplayer2.upstream.cache.CacheSpan, boolean):void type: DIRECT A[Catch:\{ all \-\> 0x0007 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|ExcHandler: all null\lSplitter:B:2:0x0002\l|0x0007: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|0x0008: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0009|0x0009: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.upstream.cache.SimpleCache.removeSpan((r1 'this' I:com.google.android.exoplayer2.upstream.cache.SimpleCache A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.exoplayer2.upstream.cache.CacheSpan A[D('span' com.google.android.exoplayer2.upstream.cache.CacheSpan), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0009: r2 'span' com.google.android.exoplayer2.upstream.cache.CacheSpan\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.cache.Cache$CacheException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

