digraph "CFG forcom.google.android.exoplayer2.upstream.FileDataSource.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readLength' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.bytesRemaining long \l0x0006: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0008: CMP_L  (r2 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|SYNTHETIC\lSplitter:B:6:0x000e\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x000e\l|0x000e: IGET  (r2 I:java.io.RandomAccessFile) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.file java.io.RandomAccessFile A[Catch:\{ IOException \-\> 0x002e \}, TRY_ENTER]\l0x0010: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.bytesRemaining long A[Catch:\{ IOException \-\> 0x002e \}]\l0x0012: CAST  (r6 I:long) = (long) (r11 I:int A[D('readLength' int)]) A[Catch:\{ IOException \-\> 0x002e \}]\l0x0013: INVOKE  (r4 I:long) = (r4 I:long), (r6 I:long) java.lang.Math.min(long, long):long type: STATIC A[Catch:\{ IOException \-\> 0x002e \}]\l0x0017: CAST  (r3 I:int) = (int) (r4 I:long) A[Catch:\{ IOException \-\> 0x002e \}]\l0x0018: INVOKE  (r0 I:int) = \l  (r2 I:java.io.RandomAccessFile)\l  (r9 I:byte[] A[D('buffer' byte[])])\l  (r10 I:int A[D('offset' int)])\l  (r3 I:int)\l java.io.RandomAccessFile.read(byte[], int, int):int type: VIRTUAL A[Catch:\{ IOException \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char] A[D('bytesRead' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.bytesRemaining long \l0x0020: CAST  (r4 I:long) = (long) (r0 I:int A[D('bytesRead' int)]) \l0x0021: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x0022: IPUT  \l  (r2 I:long)\l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.bytesRemaining long \l0x0024: IGET  (r2 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.FileDataSource\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IGET  (r2 I:com.google.android.exoplayer2.upstream.TransferListener\<? super com.google.android.exoplayer2.upstream.FileDataSource\>) = \l  (r8 I:com.google.android.exoplayer2.upstream.FileDataSource)\l com.google.android.exoplayer2.upstream.FileDataSource.listener com.google.android.exoplayer2.upstream.TransferListener \l0x002a: INVOKE  \l  (r2 I:com.google.android.exoplayer2.upstream.TransferListener)\l  (r8 I:java.lang.Object)\l  (r0 I:int A[D('bytesRead' int)])\l com.google.android.exoplayer2.upstream.TransferListener.onBytesTransferred(java.lang.Object, int):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|ExcHandler: IOException null\lSplitter:B:6:0x000e\l|0x002e: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.upstream.FileDataSource$FileDataSourceException) =  com.google.android.exoplayer2.upstream.FileDataSource$FileDataSourceException \l0x0031: INVOKE  \l  (r2 I:com.google.android.exoplayer2.upstream.FileDataSource$FileDataSourceException)\l  (r1 I:java.io.IOException A[D('e' java.io.IOException)])\l com.google.android.exoplayer2.upstream.FileDataSource.FileDataSourceException.\<init\>(java.io.IOException):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.upstream.FileDataSource.read((r8 'this' I:com.google.android.exoplayer2.upstream.FileDataSource A[IMMUTABLE_TYPE, THIS]), (r9 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('readLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001c\-0x002e: r0 'bytesRead' int\l  0x002f\-0x0034: r1 'e' java.io.IOException\l  ?\-0x0034: r9 'buffer' byte[]\l  ?\-0x0034: r10 'offset' int\l  ?\-0x0034: r11 'readLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.upstream.FileDataSource$FileDataSourceException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_2;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_13;
Node_7 -> Node_9;
Node_9 -> Node_2;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_2;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_2;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

