digraph "CFG forcom.google.android.exoplayer2.upstream.DefaultAllocator.allocate()Lcom\/google\/android\/exoplayer2\/upstream\/Allocation;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|r4.allocatedCount = r4.allocatedCount + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r4.availableCount \<= 0) goto L_0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|com.google.android.exoplayer2.upstream.Allocation[] r1 = r4.availableAllocations\lint r2 = r4.availableCount + \-1\lr4.availableCount = r2\lr0 = r1[r2]\lr4.availableAllocations[r4.availableCount] = null\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|PHI: r0 \l  PHI: (r0v1 'allocation' com.google.android.exoplayer2.upstream.Allocation) = (r0v0 'allocation' com.google.android.exoplayer2.upstream.Allocation), (r0v2 'allocation' com.google.android.exoplayer2.upstream.Allocation) binds: [B:8:?, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|SYNTHETIC\lSplitter:B:7:0x001e\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x001e\l|com.google.android.exoplayer2.upstream.Allocation r0 = new com.google.android.exoplayer2.upstream.Allocation(new byte[r4.individualAllocationSize], 0)     \/\/ Catch:\{  \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|REMOVE\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public synchronized com.google.android.exoplayer2.upstream.Allocation com.google.android.exoplayer2.upstream.DefaultAllocator.allocate((r4v0 'this' com.google.android.exoplayer2.upstream.DefaultAllocator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

