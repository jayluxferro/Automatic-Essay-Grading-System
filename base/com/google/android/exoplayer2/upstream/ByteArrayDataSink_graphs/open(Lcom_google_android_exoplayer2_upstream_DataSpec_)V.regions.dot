digraph "CFG forcom.google.android.exoplayer2.upstream.ByteArrayDataSink.open(Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;)V" {
subgraph cluster_Region_674787887 {
label = "R(1:(2:(2:2|8)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1268244028 {
label = "R(2:(2:2|8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_148965232 {
label = "IF [B:1:0x0006] THEN: R(2:2|8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r5.length == \-1) goto L_0x0008\l}"];
subgraph cluster_Region_131905563 {
label = "R(2:2|8)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|r4.stream = new java.io.ByteArrayOutputStream()\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1822297029 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|PHI: r0 \l  PHI: (r0v5 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkArgument(r5.length \<= 2147483647L)\lr4.stream = new java.io.ByteArrayOutputStream((int) r5.length)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0010}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0017}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0028}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.upstream.ByteArrayDataSink.open((r4v0 'this' com.google.android.exoplayer2.upstream.ByteArrayDataSink A[IMMUTABLE_TYPE, THIS]), (r5v0 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_6 -> Node_9;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_6;
}

