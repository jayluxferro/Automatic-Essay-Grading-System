digraph "CFG forcom.google.android.exoplayer2.upstream.HttpDataSource.RequestProperties.getSnapshot()Ljava\/util\/Map;" {
subgraph cluster_Region_1806527888 {
label = "R(2:(1:(2:(1:4)|5))|7)";
node [shape=record,color=blue];
subgraph cluster_Region_372964835 {
label = "R(1:(2:(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_Region_2134247387 {
label = "R(2:(1:4)|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_492723339 {
label = "IF [B:3:0x0003] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.requestPropertiesSnapshot == null) goto L_0x0005\l}"];
subgraph cluster_Region_496984925 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|r2.requestPropertiesSnapshot = java.util.Collections.unmodifiableMap(new java.util.HashMap(r2.requestProperties))\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0012}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return r2.requestPropertiesSnapshot\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0014|DONT_GENERATE\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0016|REMOVE\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017|REMOVE\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0018|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized java.util.Map\<java.lang.String, java.lang.String\> com.google.android.exoplayer2.upstream.HttpDataSource.RequestProperties.getSnapshot((r2v0 'this' com.google.android.exoplayer2.upstream.HttpDataSource$RequestProperties A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

