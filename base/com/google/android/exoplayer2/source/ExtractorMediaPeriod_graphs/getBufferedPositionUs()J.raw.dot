digraph "CFG forcom.google.android.exoplayer2.source.ExtractorMediaPeriod.getBufferedPositionUs()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x0002: IGET  (r4 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.loadingFinished boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r2 I:?[long, double]) = (r6 I:?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r4 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.isPendingReset():boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.pendingResetPositionUs long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r4 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.haveAudioVideoTracks boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x001a: IGET  (r4 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.DefaultTrackOutput\>) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.sampleQueues android.util.SparseArray \l0x001c: INVOKE  (r1 I:int) = (r4 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x0020: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('trackCount' int)])  \-\> B:16:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r4 I:boolean[]) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.trackIsAudioVideoFlags boolean[] \l0x0025: AGET  (r4 I:boolean A[IMMUTABLE_TYPE]) = \l  (r4 I:boolean[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IGET  (r4 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.DefaultTrackOutput\>) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.sampleQueues android.util.SparseArray \l0x002b: INVOKE  (r4 I:java.lang.Object) = (r4 I:android.util.SparseArray), (r0 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x002f: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = (com.google.android.exoplayer2.extractor.DefaultTrackOutput) (r4 I:?[OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:long) = \l  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.getLargestQueuedTimestampUs():long type: VIRTUAL \l0x0035: INVOKE  (r2 I:long A[D('largestQueuedTimestampUs' long)]) = \l  (r2 I:long A[D('largestQueuedTimestampUs' long)])\l  (r4 I:long)\l java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: INVOKE  (r2 I:long A[D('largestQueuedTimestampUs' long)]) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.getLargestQueuedTimestampUs():long type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: CMP_L  (r4 I:int) = \l  (r2 I:long A[D('largestQueuedTimestampUs' long)])\l  (r6 I:long)\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: IGET  (r2 I:long A[D('largestQueuedTimestampUs' long)]) = \l  (r8 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.lastSeekPositionUs long \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.source.ExtractorMediaPeriod.getBufferedPositionUs((r8 'this' I:com.google.android.exoplayer2.source.ExtractorMediaPeriod A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0021\-0x003c: r0 'i' int\l  0x0020\-0x003c: r1 'trackCount' int\l  0x001a\-0x003c: r2 'largestQueuedTimestampUs' long\l  0x0040\-0x0046: r2 'largestQueuedTimestampUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_3;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_3;
}

