digraph "CFG forcom.google.android.exoplayer2.source.ExtractorMediaPeriod.copyLengthFromLoader(Lcom\/google\/android\/exoplayer2\/source\/ExtractorMediaPeriod$ExtractingLoadable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = \l  (r4 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.length long \l0x0002: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l0x0004: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:long) = \l  (r5 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable A[D('loadable' com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable)])\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.ExtractingLoadable.access$500(com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable):long type: STATIC \l0x000c: IPUT  \l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod)\l com.google.android.exoplayer2.source.ExtractorMediaPeriod.length long \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.source.ExtractorMediaPeriod.copyLengthFromLoader((r4 'this' I:com.google.android.exoplayer2.source.ExtractorMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable A[D('loadable' com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000e: r5 'loadable' com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

