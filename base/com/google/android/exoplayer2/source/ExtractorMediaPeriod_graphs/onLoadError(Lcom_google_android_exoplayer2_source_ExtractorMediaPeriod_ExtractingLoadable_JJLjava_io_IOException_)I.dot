digraph "CFG forcom.google.android.exoplayer2.source.ExtractorMediaPeriod.onLoadError(Lcom\/google\/android\/exoplayer2\/source\/ExtractorMediaPeriod$ExtractingLoadable;JJLjava\/io\/IOException;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|copyLengthFromLoader(r6)\lnotifyLoadError(r11)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (isLoadableExceptionFatal(r11) == false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (getExtractedSamplesCount() \<= r5.extractedSamplesCountAtStartOfLoad) goto L_0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|r1 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|PHI: r1 \l  PHI: (r1v1 'madeProgress' boolean) = (r1v0 'madeProgress' boolean), (r1v2 'madeProgress' boolean) binds: [B:9:0x0026, B:5:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|configureRetry(r6)\lr5.extractedSamplesCountAtStartOfLoad = getExtractedSamplesCount()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if (r1 != false) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024}"];
Node_9 [shape=record,label="{9\:\ 0x0026|r1 = false\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.ExtractorMediaPeriod.onLoadError((r5v0 'this' com.google.android.exoplayer2.source.ExtractorMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r6v0 'loadable' com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'elapsedRealtimeMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'loadDurationMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'error' java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_11;
Node_9 -> Node_6;
}

