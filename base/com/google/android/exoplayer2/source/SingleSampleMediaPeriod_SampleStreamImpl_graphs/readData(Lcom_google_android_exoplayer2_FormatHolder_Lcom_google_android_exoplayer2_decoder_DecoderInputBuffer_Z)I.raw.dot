digraph "CFG forcom.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.readData(Lcom\/google\/android\/exoplayer2\/FormatHolder;Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = (\-4 ?[int, float, short, byte, char]) \l0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: IGET  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.streamState int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0009: INVOKE  \l  (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l  (r0 I:int)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.addFlag(int):void type: VIRTUAL \l0x000c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('requireFormat' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.streamState int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.this$0 com.google.android.exoplayer2.source.SingleSampleMediaPeriod \l0x0016: IGET  (r0 I:com.google.android.exoplayer2.Format) = \l  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.format com.google.android.exoplayer2.Format \l0x0018: IPUT  \l  (r0 I:com.google.android.exoplayer2.Format)\l  (r8 I:com.google.android.exoplayer2.FormatHolder A[D('formatHolder' com.google.android.exoplayer2.FormatHolder)])\l com.google.android.exoplayer2.FormatHolder.format com.google.android.exoplayer2.Format \l0x001a: IPUT  \l  (r1 I:int)\l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.streamState int \l0x001c: CONST  (r0 I:?[int, float, short, byte, char]) = (\-5 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IGET  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.streamState int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0026: IGET  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.this$0 com.google.android.exoplayer2.source.SingleSampleMediaPeriod \l0x0028: IGET  (r0 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.loadingFinished boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: CONST  (r0 I:?[int, float, short, byte, char]) = (\-3 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0032: IPUT  \l  (r4 I:long)\l  (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.timeUs long \l0x0034: INVOKE  \l  (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l  (r1 I:int)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.addFlag(int):void type: VIRTUAL \l0x0037: IGET  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.this$0 com.google.android.exoplayer2.source.SingleSampleMediaPeriod \l0x0039: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.sampleSize int \l0x003b: INVOKE  \l  (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l  (r0 I:int)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.ensureSpaceForWrite(int):void type: VIRTUAL \l0x003e: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x0040: IGET  (r1 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.this$0 com.google.android.exoplayer2.source.SingleSampleMediaPeriod \l0x0042: IGET  (r1 I:byte[]) = \l  (r1 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.sampleData byte[] \l0x0044: IGET  (r4 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod) = \l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.this$0 com.google.android.exoplayer2.source.SingleSampleMediaPeriod \l0x0046: IGET  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.sampleSize int \l0x0048: INVOKE  \l  (r0 I:java.nio.ByteBuffer)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r4 I:int)\l java.nio.ByteBuffer.put(byte[], int, int):java.nio.ByteBuffer type: VIRTUAL \l0x004b: IPUT  \l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl)\l com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.streamState int \l0x004d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.SingleSampleMediaPeriod.SampleStreamImpl.readData((r7 'this' I:com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:com.google.android.exoplayer2.FormatHolder A[D('formatHolder' com.google.android.exoplayer2.FormatHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('requireFormat' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x004e: r8 'formatHolder' com.google.android.exoplayer2.FormatHolder\l  ?\-0x004e: r9 'buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer\l  ?\-0x004e: r10 'requireFormat' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_3;
Node_14 -> Node_11;
Node_15 -> Node_3;
}

