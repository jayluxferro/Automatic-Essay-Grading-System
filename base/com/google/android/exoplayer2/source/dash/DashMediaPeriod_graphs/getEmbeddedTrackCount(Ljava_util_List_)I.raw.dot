digraph "CFG forcom.google.android.exoplayer2.source.dash.DashMediaPeriod.getEmbeddedTrackCount(Ljava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r3 I:int) = \l  (r4 I:java.util.List A[D('adaptationSets' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>)])\l java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:java.lang.Object) = \l  (r4 I:java.util.List A[D('adaptationSets' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>)])\l  (r2 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000c: CHECK_CAST  (r0 I:com.google.android.exoplayer2.source.dash.manifest.AdaptationSet) = (com.google.android.exoplayer2.source.dash.manifest.AdaptationSet) (r0 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.AdaptationSet A[D('adaptationSet' com.google.android.exoplayer2.source.dash.manifest.AdaptationSet)])\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.hasEventMessageTrack(com.google.android.exoplayer2.source.dash.manifest.AdaptationSet):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: ARITH  (r1 I:int A[D('embeddedTrackCount' int)]) = (r1 I:int A[D('embeddedTrackCount' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.AdaptationSet A[D('adaptationSet' com.google.android.exoplayer2.source.dash.manifest.AdaptationSet)])\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.hasCea608Track(com.google.android.exoplayer2.source.dash.manifest.AdaptationSet):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: ARITH  (r1 I:int A[D('embeddedTrackCount' int)]) = (r1 I:int A[D('embeddedTrackCount' int)]) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN  (r1 I:int A[D('embeddedTrackCount' int)]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.source.dash.DashMediaPeriod.getEmbeddedTrackCount((r4 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0021: r0 'adaptationSet' com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\l  0x0001\-0x0021: r1 'embeddedTrackCount' int\l  0x0002\-0x0021: r2 'i' int\l  0x0000\-0x0021: r4 'adaptationSets' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/AdaptationSet;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

