digraph "CFG forcom.google.android.exoplayer2.source.dash.DashMediaPeriod.updateManifest(Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/DashManifest;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest A[D('manifest' com.google.android.exoplayer2.source.dash.manifest.DashManifest)])\l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.manifest com.google.android.exoplayer2.source.dash.manifest.DashManifest \l0x0002: IPUT  \l  (r7 I:int A[D('periodIndex' int)])\l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.periodIndex int \l0x0004: INVOKE  (r1 I:com.google.android.exoplayer2.source.dash.manifest.Period) = \l  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest A[D('manifest' com.google.android.exoplayer2.source.dash.manifest.DashManifest)])\l  (r7 I:int A[D('periodIndex' int)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifest.getPeriod(int):com.google.android.exoplayer2.source.dash.manifest.Period type: VIRTUAL \l0x0008: IGET  (r1 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>) = \l  (r1 I:com.google.android.exoplayer2.source.dash.manifest.Period)\l com.google.android.exoplayer2.source.dash.manifest.Period.adaptationSets java.util.List \l0x000a: IPUT  \l  (r1 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>)\l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.adaptationSets java.util.List \l0x000c: IGET  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>[]) = \l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sampleStreams com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>[]) = \l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sampleStreams com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] \l0x0012: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x0013: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:5:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: AGET  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0019: INVOKE  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkSource) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('sampleStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.getChunkSource():com.google.android.exoplayer2.source.chunk.ChunkSource type: VIRTUAL \l0x001d: CHECK_CAST  (r1 I:com.google.android.exoplayer2.source.dash.DashChunkSource) = (com.google.android.exoplayer2.source.dash.DashChunkSource) (r1 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.dash.DashChunkSource)\l  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest A[D('manifest' com.google.android.exoplayer2.source.dash.manifest.DashManifest)])\l  (r7 I:int A[D('periodIndex' int)])\l com.google.android.exoplayer2.source.dash.DashChunkSource.updateManifest(com.google.android.exoplayer2.source.dash.manifest.DashManifest, int):void type: INTERFACE \l0x0022: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l0x0024: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IGET  (r1 I:com.google.android.exoplayer2.source.MediaPeriod$Callback) = \l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.callback com.google.android.exoplayer2.source.MediaPeriod$Callback \l0x0028: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.MediaPeriod$Callback)\l  (r5 I:com.google.android.exoplayer2.source.SequenceableLoader)\l com.google.android.exoplayer2.source.MediaPeriod.Callback.onContinueLoadingRequested(com.google.android.exoplayer2.source.SequenceableLoader):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.dash.DashMediaPeriod.updateManifest((r5 'this' I:com.google.android.exoplayer2.source.dash.DashMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest A[D('manifest' com.google.android.exoplayer2.source.dash.manifest.DashManifest), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('periodIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0026: r0 'sampleStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\l  ?\-0x002b: r6 'manifest' com.google.android.exoplayer2.source.dash.manifest.DashManifest\l  ?\-0x002b: r7 'periodIndex' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
}

