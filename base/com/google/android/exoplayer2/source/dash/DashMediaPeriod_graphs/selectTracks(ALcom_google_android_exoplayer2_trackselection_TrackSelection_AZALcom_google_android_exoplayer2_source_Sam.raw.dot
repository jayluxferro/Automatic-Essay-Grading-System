digraph "CFG forcom.google.android.exoplayer2.source.dash.DashMediaPeriod.selectTracks([Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;[Z[Lcom\/google\/android\/exoplayer2\/source\/SampleStream;[ZJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r13 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.AdaptationSet\>) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.adaptationSets java.util.List \l0x0002: INVOKE  (r2 I:int) = (r13 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: NEW_INSTANCE  (r8 I:java.util.HashMap) =  java.util.HashMap \l0x0008: INVOKE  (r8 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x000b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l \l0x000e: ARRAY_LENGTH  (r13 I:int) = (r0 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r13 I:?[int, byte, short, char])  \-\> B:19:0x006a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0013: INSTANCE_OF  (r13 I:boolean) = (r13 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.source.chunk.ChunkSampleStream \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: AGET  (r11 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0019: CHECK_CAST  (r11 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream) = (com.google.android.exoplayer2.source.chunk.ChunkSampleStream) (r11 I:?[OBJECT, ARRAY]) \l0x001b: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: AGET  (r13 I:boolean A[IMMUTABLE_TYPE]) = \l  (r17 I:boolean[] A[D('mayRetainStreamFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0056 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  \l  (r11 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.release():void type: VIRTUAL \l0x0026: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: APUT  \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r13 I:?[OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0053 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0053 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: IGET  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.trackGroups com.google.android.exoplayer2.source.TrackGroupArray \l0x0033: AGET  (r14 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0035: INVOKE  (r14 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l com.google.android.exoplayer2.trackselection.TrackSelection.getTrackGroup():com.google.android.exoplayer2.source.TrackGroup type: INTERFACE \l0x0039: INVOKE  (r12 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r14 I:com.google.android.exoplayer2.source.TrackGroup)\l com.google.android.exoplayer2.source.TrackGroupArray.indexOf(com.google.android.exoplayer2.source.TrackGroup):int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IF  (r12 I:?[int, byte, short, char] A[D('trackGroupIndex' int)]) \>= (r2 I:?[int, byte, short, char] A[D('adaptationSetCount' int)])  \-\> B:17:0x0053 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0041: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double] A[D('positionUs' long)]) \l0x0043: INVOKE  (r11 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l  (r12 I:int A[D('trackGroupIndex' int)])\l  (r13 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l  (r0 I:long)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.buildSampleStream(int, com.google.android.exoplayer2.trackselection.TrackSelection, long):com.google.android.exoplayer2.source.chunk.ChunkSampleStream type: DIRECT \l0x0047: INVOKE  (r13 I:java.lang.Integer) = (r12 I:int A[D('trackGroupIndex' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x004b: INVOKE  \l  (r8 I:java.util.HashMap A[D('primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>)])\l  (r13 I:java.lang.Object)\l  (r11 I:java.lang.Object A[D('stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>)])\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x004e: APUT  \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r11 I:?[OBJECT, ARRAY] A[D('stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>)])\l \l0x0050: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0051: APUT  \l  (r19 I:boolean[] A[D('streamResetFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r13 I:boolean A[IMMUTABLE_TYPE])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|0x0053: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IGET  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.trackGroups com.google.android.exoplayer2.source.TrackGroupArray \l0x0058: AGET  (r14 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x005a: INVOKE  (r14 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l com.google.android.exoplayer2.trackselection.TrackSelection.getTrackGroup():com.google.android.exoplayer2.source.TrackGroup type: INTERFACE \l0x005e: INVOKE  (r3 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r14 I:com.google.android.exoplayer2.source.TrackGroup)\l com.google.android.exoplayer2.source.TrackGroupArray.indexOf(com.google.android.exoplayer2.source.TrackGroup):int type: VIRTUAL \l0x0062: INVOKE  (r13 I:java.lang.Integer) = (r3 I:int A[D('adaptationSetIndex' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0066: INVOKE  \l  (r8 I:java.util.HashMap A[D('primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>)])\l  (r13 I:java.lang.Object)\l  (r11 I:java.lang.Object A[D('stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>)])\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006a|0x006a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l \l0x006d: ARRAY_LENGTH  (r13 I:int) = (r0 I:?[]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r13 I:?[int, byte, short, char])  \-\> B:51:0x00e2 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0072: INSTANCE_OF  (r13 I:boolean) = (r13 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream \l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|0x0074: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007c \l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|0x0076: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0078: INSTANCE_OF  (r13 I:boolean) = (r13 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.source.EmptySampleStream \l}"];
Node_25 [shape=record,label="{25\:\ 0x007a|0x007a: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008c \l}"];
Node_26 [shape=record,label="{26\:\ 0x007c|0x007c: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x007e|0x007e: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0084 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0080|0x0080: AGET  (r13 I:boolean A[IMMUTABLE_TYPE]) = \l  (r17 I:boolean[] A[D('mayRetainStreamFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0082|0x0082: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008c \l}"];
Node_30 [shape=record,label="{30\:\ 0x0084|0x0084: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0086: INVOKE  (r13 I:com.google.android.exoplayer2.source.SampleStream) com.google.android.exoplayer2.source.dash.DashMediaPeriod.releaseIfEmbeddedSampleStream(com.google.android.exoplayer2.source.SampleStream):void type: STATIC \l0x0089: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008a: APUT  \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r13 I:?[OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x008c|0x008c: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x008e|0x008e: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00c7 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0090|0x0090: IGET  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.trackGroups com.google.android.exoplayer2.source.TrackGroupArray \l0x0092: AGET  (r14 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY][] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0094: INVOKE  (r14 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l com.google.android.exoplayer2.trackselection.TrackSelection.getTrackGroup():com.google.android.exoplayer2.source.TrackGroup type: INTERFACE \l0x0098: INVOKE  (r12 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r14 I:com.google.android.exoplayer2.source.TrackGroup)\l com.google.android.exoplayer2.source.TrackGroupArray.indexOf(com.google.android.exoplayer2.source.TrackGroup):int type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x009c|0x009c: IF  (r12 I:?[int, byte, short, char] A[D('trackGroupIndex' int)]) \< (r2 I:?[int, byte, short, char] A[D('adaptationSetCount' int)])  \-\> B:43:0x00c7 \l}"];
Node_35 [shape=record,label="{35\:\ 0x009e|0x009e: ARITH  (r4 I:int) = (r12 I:int A[D('trackGroupIndex' int)]) \- (r2 I:int A[D('adaptationSetCount' int)]) \l0x00a0: IGET  (r13 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo[]) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.embeddedTrackInfos com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo[] \l0x00a2: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char] A[D('embeddedTrackIndex' int)])\l \l0x00a4: IGET  (r3 I:int) = \l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo A[D('embeddedTrackInfo' com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo)])\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.EmbeddedTrackInfo.adaptationSetIndex int \l0x00a6: INVOKE  (r13 I:java.lang.Integer) = (r3 I:int A[D('adaptationSetIndex' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x00aa: INVOKE  (r9 I:java.lang.Object) = \l  (r8 I:java.util.HashMap A[D('primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>)])\l  (r13 I:java.lang.Object)\l java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x00ae: CHECK_CAST  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream) = (com.google.android.exoplayer2.source.chunk.ChunkSampleStream) (r9 I:?[OBJECT, ARRAY]) \l0x00b0: AGET  (r10 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b2|0x00b2: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ca \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b4|0x00b4: INSTANCE_OF  (r7 I:boolean) = \l  (r10 I:?[OBJECT, ARRAY] A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l com.google.android.exoplayer2.source.EmptySampleStream \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b6|0x00b6: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mayRetainStream' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00c7 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b8|0x00b8: INVOKE  \l  (r10 I:com.google.android.exoplayer2.source.SampleStream A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.releaseIfEmbeddedSampleStream(com.google.android.exoplayer2.source.SampleStream):void type: STATIC \l}"];
Node_40 [shape=record,label="{40\:\ 0x00bb|0x00bb: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00d9 \l}"];
Node_41 [shape=record,label="{41\:\ 0x00bd|0x00bd: NEW_INSTANCE  (r13 I:com.google.android.exoplayer2.source.EmptySampleStream) =  com.google.android.exoplayer2.source.EmptySampleStream \l0x00bf: INVOKE  \l  (r13 I:com.google.android.exoplayer2.source.EmptySampleStream)\l com.google.android.exoplayer2.source.EmptySampleStream.\<init\>():void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x00c2|0x00c2: APUT  \l  (r18 I:?[OBJECT, ARRAY][] A[D('streams' com.google.android.exoplayer2.source.SampleStream[])])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r13 I:?[OBJECT, ARRAY])\l \l0x00c4: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00c5: APUT  \l  (r19 I:boolean[] A[D('streamResetFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l  (r13 I:boolean A[IMMUTABLE_TYPE])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x00c7|0x00c7: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ca|0x00ca: INSTANCE_OF  (r13 I:boolean) = \l  (r10 I:?[OBJECT, ARRAY] A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream \l}"];
Node_45 [shape=record,label="{45\:\ 0x00cc|0x00cc: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00d7 \l}"];
Node_46 [shape=record,label="{46\:\ 0x00ce|0x00ce: MOVE  (r13 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY] A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l \l0x00cf: CHECK_CAST  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream) = (com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream) (r13 I:?[OBJECT, ARRAY]) \l0x00d1: IGET  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>) = \l  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.parent com.google.android.exoplayer2.source.chunk.ChunkSampleStream \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d3|0x00d3: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>)])  \-\> B:49:0x00d7 \l}"];
Node_48 [shape=record,label="{48\:\ 0x00d5|0x00d5: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00d7|0x00d7: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x00d9|0x00d9: IGET  (r13 I:int) = \l  (r5 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo A[D('embeddedTrackInfo' com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo)])\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.EmbeddedTrackInfo.trackType int \l0x00db: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double] A[D('positionUs' long)]) \l0x00dd: INVOKE  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>)])\l  (r0 I:long)\l  (r13 I:int)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.selectEmbeddedTrack(long, int):com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream type: VIRTUAL \l}"];
Node_51 [shape=record,label="{51\:\ 0x00e2|0x00e2: INVOKE  (r13 I:int) = \l  (r8 I:java.util.HashMap A[D('primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>)])\l java.util.HashMap.size():int type: VIRTUAL \l0x00e6: INVOKE  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream[]) = (r13 I:int) com.google.android.exoplayer2.source.dash.DashMediaPeriod.newSampleStreamArray(int):com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] type: STATIC \l0x00ea: IPUT  \l  (r13 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>[])\l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sampleStreams com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] \l0x00ec: INVOKE  (r13 I:java.util.Collection) = \l  (r8 I:java.util.HashMap A[D('primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>)])\l java.util.HashMap.values():java.util.Collection type: VIRTUAL \l0x00f0: IGET  (r14 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>[]) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sampleStreams com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] \l0x00f2: INVOKE  (r13 I:java.util.Collection), (r14 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x00f5: NEW_INSTANCE  (r13 I:com.google.android.exoplayer2.source.CompositeSequenceableLoader) =  com.google.android.exoplayer2.source.CompositeSequenceableLoader \l0x00f7: IGET  (r14 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>[]) = \l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sampleStreams com.google.android.exoplayer2.source.chunk.ChunkSampleStream[] \l0x00f9: INVOKE  \l  (r13 I:com.google.android.exoplayer2.source.CompositeSequenceableLoader)\l  (r14 I:com.google.android.exoplayer2.source.SequenceableLoader[])\l com.google.android.exoplayer2.source.CompositeSequenceableLoader.\<init\>(com.google.android.exoplayer2.source.SequenceableLoader[]):void type: DIRECT \l0x00fc: IPUT  \l  (r13 I:com.google.android.exoplayer2.source.CompositeSequenceableLoader)\l  (r15 I:com.google.android.exoplayer2.source.dash.DashMediaPeriod)\l com.google.android.exoplayer2.source.dash.DashMediaPeriod.sequenceableLoader com.google.android.exoplayer2.source.CompositeSequenceableLoader \l}"];
Node_52 [shape=record,label="{52\:\ 0x00fe|0x00fe: RETURN  (r20 I:long A[D('positionUs' long)]) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.source.dash.DashMediaPeriod.selectTracks((r15 'this' I:com.google.android.exoplayer2.source.dash.DashMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r16 I:com.google.android.exoplayer2.trackselection.TrackSelection[] A[D('selections' com.google.android.exoplayer2.trackselection.TrackSelection[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:boolean[] A[D('mayRetainStreamFlags' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.google.android.exoplayer2.source.SampleStream[] A[D('streams' com.google.android.exoplayer2.source.SampleStream[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean[] A[D('streamResetFlags' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001b\-0x0029: r11 'stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\l  0x0047\-0x0053: r11 'stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\l  0x003d\-0x0053: r12 'trackGroupIndex' int\l  0x0062\-0x006a: r3 'adaptationSetIndex' int\l  0x0056\-0x006a: r11 'stream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\l  0x00a6\-0x00c7: r3 'adaptationSetIndex' int\l  0x00a0\-0x00c7: r4 'embeddedTrackIndex' int\l  0x00a4\-0x00c7: r5 'embeddedTrackInfo' com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo\l  0x00b6\-0x00c7: r7 'mayRetainStream' boolean\l  0x00b0\-0x00c7: r9 'primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>\l  0x00b2\-0x00c7: r10 'stream' com.google.android.exoplayer2.source.SampleStream\l  0x009c\-0x00c7: r12 'trackGroupIndex' int\l  0x00ca\-0x00e2: r3 'adaptationSetIndex' int\l  0x00ca\-0x00e2: r4 'embeddedTrackIndex' int\l  0x00ca\-0x00e2: r5 'embeddedTrackInfo' com.google.android.exoplayer2.source.dash.DashMediaPeriod$EmbeddedTrackInfo\l  0x00d9\-0x00e2: r7 'mayRetainStream' boolean\l  0x00ca\-0x00e2: r9 'primaryStream' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<?\>\l  0x00ca\-0x00e2: r10 'stream' com.google.android.exoplayer2.source.SampleStream\l  0x00ca\-0x00e2: r12 'trackGroupIndex' int\l  0x0006\-0x00fe: r2 'adaptationSetCount' int\l  0x000c\-0x00fe: r6 'i' int\l  0x000b\-0x00fe: r8 'primarySampleStreams' java.util.HashMap\<java.lang.Integer, com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<com.google.android.exoplayer2.source.dash.DashChunkSource\>\>\l  ?\-0x00fe: r16 'selections' com.google.android.exoplayer2.trackselection.TrackSelection[]\l  ?\-0x00fe: r17 'mayRetainStreamFlags' boolean[]\l  ?\-0x00fe: r18 'streams' com.google.android.exoplayer2.source.SampleStream[]\l  ?\-0x00fe: r19 'streamResetFlags' boolean[]\l  ?\-0x00fe: r20 'positionUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_18 -> Node_10;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_51;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_43;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_43;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_44;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_50;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_20;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_49;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_38;
Node_49 -> Node_38;
Node_50 -> Node_42;
Node_51 -> Node_52;
}

