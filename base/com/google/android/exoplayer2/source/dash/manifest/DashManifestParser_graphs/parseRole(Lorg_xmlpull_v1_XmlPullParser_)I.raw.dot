digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRole(Lorg\/xmlpull\/v1\/XmlPullParser;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST_STR  (r2 I:java.lang.String) =  \"schemeIdUri\" \l0x0003: INVOKE  (r0 I:java.lang.String) = \l  (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseString(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String):java.lang.String type: STATIC \l0x0007: CONST_STR  (r2 I:java.lang.String) =  \"value\" \l0x0009: INVOKE  (r1 I:java.lang.String) = \l  (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseString(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String):java.lang.String type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: INVOKE  \l  (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Role\" \l0x0012: INVOKE  (r2 I:boolean) = \l  (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r2 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: CONST_STR  (r2 I:java.lang.String) =  \"urn:mpeg:dash:role:2011\" \l0x001a: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('schemeIdUri' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: CONST_STR  (r2 I:java.lang.String) =  \"main\" \l0x0022: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r1 I:java.lang.Object A[D('value' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: RETURN  (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRole((r4 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x002b: r0 'schemeIdUri' java.lang.String\l  0x000d\-0x002b: r1 'value' java.lang.String\l  ?\-0x002b: r5 'xpp' org.xmlpull.v1.XmlPullParser\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_1;
Node_2 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_8;
}

