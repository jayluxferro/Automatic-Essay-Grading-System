digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseMediaPresentationDescription(Lorg\/xmlpull\/v1\/XmlPullParser;Ljava\/lang\/String;)Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/DashManifest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r6 I:java.lang.String) =  \"availabilityStartTime\" \l0x0002: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0007: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0009: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x000b: INVOKE  (r7 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDateTime(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l0x000f: CONST_STR  (r6 I:java.lang.String) =  \"mediaPresentationDuration\" \l0x0011: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0018: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x001a: INVOKE  (r9 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDuration(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l0x001e: CONST_STR  (r6 I:java.lang.String) =  \"minBufferTime\" \l0x0020: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0027: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x0029: INVOKE  (r11 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDuration(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l0x002d: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: CONST_STR  (r32 I:java.lang.String) =  \"type\" \l0x0030: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0032: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r31 I:java.lang.String) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getAttributeValue(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: IF  (r31 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typeString' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00cf \l}"];
Node_2 [shape=record,label="{2\:\ 0x003a|0x003a: CONST_STR  (r6 I:java.lang.String) =  \"dynamic\" \l0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r31 I:?[OBJECT, ARRAY] A[D('typeString' java.lang.String)])\l \l0x003e: INVOKE  (r6 I:boolean) = (r0 I:java.lang.String), (r6 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0042|0x0042: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00cf \l}"];
Node_4 [shape=record,label="{4\:\ 0x0044|0x0044: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0045|0x0045: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00d2 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0047|0x0047: CONST_STR  (r6 I:java.lang.String) =  \"minimumUpdatePeriod\" \l0x0049: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x004e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0050: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x0052: INVOKE  (r14 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDuration(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0056|0x0056: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00d9 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0058|0x0058: CONST_STR  (r6 I:java.lang.String) =  \"timeShiftBufferDepth\" \l0x005a: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x005f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0061: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x0063: INVOKE  (r16 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDuration(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0067|0x0067: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00df \l}"];
Node_10 [shape=record,label="{10\:\ 0x0069|0x0069: CONST_STR  (r6 I:java.lang.String) =  \"suggestedPresentationDelay\" \l0x006b: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0070: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0072: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x0074: INVOKE  (r18 I:long) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l  (r1 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseDuration(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0078|0x0078: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007a: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007c: NEW_INSTANCE  (r22 I:java.util.ArrayList) =  java.util.ArrayList \l0x007e: INVOKE  (r22 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0081|0x0081: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00e5 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0083|0x0083: CONST  (r24 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|0x0088: CONST  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008a: CONST  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x008c|0x008c: INVOKE  \l  (r37 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l0x008f: CONST_STR  (r6 I:java.lang.String) =  \"BaseURL\" \l0x0091: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0093: INVOKE  (r6 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|0x0097: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00e8 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0099|0x0099: IF  (r30 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seenFirstBaseUrl' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00a1 \l}"];
Node_18 [shape=record,label="{18\:\ 0x009b|0x009b: INVOKE  (r38 I:java.lang.String A[D('baseUrl' java.lang.String)]) = \l  (r37 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r38 I:java.lang.String A[D('baseUrl' java.lang.String)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseBaseUrl(org.xmlpull.v1.XmlPullParser, java.lang.String):java.lang.String type: STATIC \l0x009f: CONST  (r30 I:?[boolean, int, float, short, byte, char] A[D('seenFirstBaseUrl' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a1|0x00a1: CONST_STR  (r6 I:java.lang.String) =  \"MPD\" \l0x00a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00a5: INVOKE  (r6 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a9|0x00a9: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x008c \l}"];
Node_21 [shape=record,label="{21\:\ 0x00ab|0x00ab: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x00b0: CMP_L  (r6 I:int) = (r9 I:long A[D('durationMs' long)]), (r32 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b2|0x00b2: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00bf \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b4|0x00b4: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x00b9: CMP_L  (r6 I:int) = (r24 I:long A[D('nextPeriodStartMs' long)]), (r32 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00bb|0x00bb: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0184 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00bd|0x00bd: MOVE  (r9 I:?[long, double] A[D('durationMs' long)]) = (r24 I:?[long, double] A[D('nextPeriodStartMs' long)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00bf|0x00bf: INVOKE  (r6 I:boolean) = \l  (r22 I:java.util.List A[D('periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>)])\l java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c3|0x00c3: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0190 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c5|0x00c5: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x00c7: CONST_STR  (r32 I:java.lang.String) =  \"No periods found.\" \l0x00c9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x00cb: INVOKE  \l  (r6 I:com.google.android.exoplayer2.ParserException)\l  (r0 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ce|0x00ce: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00cf|0x00cf: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dynamic' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d2|0x00d2: CONST  (r14 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d9|0x00d9: CONST  (r16 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x00df|0x00df: CONST  (r18 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x00e5|0x00e5: CONST  (r24 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e8|0x00e8: CONST_STR  (r6 I:java.lang.String) =  \"UTCTiming\" \l0x00ea: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00ec: INVOKE  (r6 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_36 [shape=record,label="{36\:\ 0x00f0|0x00f0: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00f7 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00f2|0x00f2: INVOKE  (r20 I:com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement A[D('utcTiming' com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement)]) = \l  (r36 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r37 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseUtcTiming(org.xmlpull.v1.XmlPullParser):com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x00f7|0x00f7: CONST_STR  (r6 I:java.lang.String) =  \"Location\" \l0x00f9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00fb: INVOKE  (r6 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_39 [shape=record,label="{39\:\ 0x00ff|0x00ff: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x010a \l}"];
Node_40 [shape=record,label="{40\:\ 0x0101|0x0101: INVOKE  (r6 I:java.lang.String) = \l  (r37 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.nextText():java.lang.String type: INTERFACE \l0x0105: INVOKE  (r21 I:android.net.Uri A[D('location' android.net.Uri)]) = (r6 I:java.lang.String) android.net.Uri.parse(java.lang.String):android.net.Uri type: STATIC \l}"];
Node_41 [shape=record,label="{41\:\ 0x010a|0x010a: CONST_STR  (r6 I:java.lang.String) =  \"Period\" \l0x010c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x010e: INVOKE  (r6 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r6 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_42 [shape=record,label="{42\:\ 0x0112|0x0112: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00a1 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0114|0x0114: IF  (r29 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seenEarlyAccessPeriod' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00a1 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0116|0x0116: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r36 I:?[OBJECT, ARRAY]) \l0x0118: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x011a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r38 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x011c: MOVE  (r3 I:?[long, double]) = (r24 I:?[long, double] A[D('nextPeriodStartMs' long)]) \l0x011e: INVOKE  (r28 I:android.util.Pair) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r1 I:org.xmlpull.v1.XmlPullParser)\l  (r2 I:java.lang.String)\l  (r3 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parsePeriod(org.xmlpull.v1.XmlPullParser, java.lang.String, long):android.util.Pair type: VIRTUAL \l0x0122: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('periodWithDurationMs' android.util.Pair\<com.google.android.exoplayer2.source.dash.manifest.Period, java.lang.Long\>)])\l \l0x0124: IGET  (r0 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.first java.lang.Object \l0x0126: MOVE  (r23 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0128: CHECK_CAST  (r23 I:com.google.android.exoplayer2.source.dash.manifest.Period) = (com.google.android.exoplayer2.source.dash.manifest.Period) (r23 I:?[OBJECT, ARRAY]) \l0x012a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('period' com.google.android.exoplayer2.source.dash.manifest.Period)])\l \l0x012c: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.Period)\l com.google.android.exoplayer2.source.dash.manifest.Period.startMs long \l0x012e: MOVE  (r32 I:?[long, double]) = (r0 I:?[long, double]) \l0x0130: CONST  (r34 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0135: CMP_L  (r6 I:int) = (r32 I:long), (r34 I:long) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0137|0x0137: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x015e \l}"];
Node_46 [shape=record,label="{46\:\ 0x0139|0x0139: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x013f \l}"];
Node_47 [shape=record,label="{47\:\ 0x013b|0x013b: CONST  (r29 I:?[boolean, int, float, short, byte, char] A[D('seenEarlyAccessPeriod' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x013f|0x013f: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0141: NEW_INSTANCE  (r32 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0143: INVOKE  (r32 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0146: CONST_STR  (r33 I:java.lang.String) =  \"Unable to determine start of period \" \l0x0148: INVOKE  (r32 I:java.lang.StringBuilder) = (r32 I:java.lang.StringBuilder), (r33 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x014c: INVOKE  (r33 I:int) = \l  (r22 I:java.util.List A[D('periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>)])\l java.util.List.size():int type: INTERFACE \l0x0150: INVOKE  (r32 I:java.lang.StringBuilder) = (r32 I:java.lang.StringBuilder), (r33 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0154: INVOKE  (r32 I:java.lang.String) = (r32 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0158: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x015a: INVOKE  \l  (r6 I:com.google.android.exoplayer2.ParserException)\l  (r0 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_49 [shape=record,label="{49\:\ 0x015d|0x015d: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_50 [shape=record,label="{50\:\ 0x015e|0x015e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('periodWithDurationMs' android.util.Pair\<com.google.android.exoplayer2.source.dash.manifest.Period, java.lang.Long\>)])\l \l0x0160: IGET  (r6 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.second java.lang.Object \l0x0162: CHECK_CAST  (r6 I:java.lang.Long) = (java.lang.Long) (r6 I:?[OBJECT, ARRAY]) \l0x0164: INVOKE  (r26 I:long) = (r6 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0168: CONST  (r32 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x016d: CMP_L  (r6 I:int) = (r26 I:long A[D('periodDurationMs' long)]), (r32 I:long) \l}"];
Node_51 [shape=record,label="{51\:\ 0x016f|0x016f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x017b \l}"];
Node_52 [shape=record,label="{52\:\ 0x0171|0x0171: CONST  (r24 I:?[long, double] A[D('nextPeriodStartMs' long)]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_53 [shape=record,label="{53\:\ 0x0176|0x0176: INVOKE  \l  (r22 I:java.util.List A[D('periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>)])\l  (r23 I:java.lang.Object A[D('period' com.google.android.exoplayer2.source.dash.manifest.Period)])\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_54 [shape=record,label="{54\:\ 0x017b|0x017b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('period' com.google.android.exoplayer2.source.dash.manifest.Period)])\l \l0x017d: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.Period)\l com.google.android.exoplayer2.source.dash.manifest.Period.startMs long \l0x017f: MOVE  (r32 I:?[long, double]) = (r0 I:?[long, double]) \l0x0181: ARITH  (r24 I:long A[D('nextPeriodStartMs' long)]) = (r32 I:long) + (r26 I:long A[D('periodDurationMs' long)]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0184|0x0184: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dynamic' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00bf \l}"];
Node_56 [shape=record,label="{56\:\ 0x0186|0x0186: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0188: CONST_STR  (r32 I:java.lang.String) =  \"Unable to determine duration of static manifest.\" \l0x018a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x018c: INVOKE  \l  (r6 I:com.google.android.exoplayer2.ParserException)\l  (r0 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_57 [shape=record,label="{57\:\ 0x018f|0x018f: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0190|0x0190: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r36 I:?[OBJECT, ARRAY]) \l0x0192: INVOKE  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest) = \l  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r7 I:long A[D('availabilityStartTime' long)])\l  (r9 I:long A[D('durationMs' long)])\l  (r11 I:long A[D('minBufferTimeMs' long)])\l  (r13 I:boolean A[D('dynamic' boolean)])\l  (r14 I:long A[D('minUpdateTimeMs' long)])\l  (r16 I:long A[D('timeShiftBufferDepthMs' long)])\l  (r18 I:long A[D('suggestedPresentationDelayMs' long)])\l  (r20 I:com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement A[D('utcTiming' com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement)])\l  (r21 I:android.net.Uri A[D('location' android.net.Uri)])\l  (r22 I:java.util.List A[D('periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.buildMediaPresentationDescription(long, long, long, boolean, long, long, long, com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement, android.net.Uri, java.util.List):com.google.android.exoplayer2.source.dash.manifest.DashManifest type: VIRTUAL \l}"];
Node_59 [shape=record,label="{59\:\ 0x0196|0x0196: RETURN  \l  (r6 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest)\l \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.source.dash.manifest.DashManifest com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseMediaPresentationDescription((r36 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r37 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38 I:java.lang.String A[D('baseUrl' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0045\-0x00cf: r13 'dynamic' boolean\l  0x0056\-0x00cf: r14 'minUpdateTimeMs' long\l  0x0067\-0x00cf: r16 'timeShiftBufferDepthMs' long\l  0x0078\-0x00cf: r18 'suggestedPresentationDelayMs' long\l  0x007a\-0x00cf: r20 'utcTiming' com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement\l  0x007c\-0x00cf: r21 'location' android.net.Uri\l  0x0081\-0x00cf: r22 'periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>\l  0x0088\-0x00cf: r24 'nextPeriodStartMs' long\l  0x008a\-0x00cf: r29 'seenEarlyAccessPeriod' boolean\l  0x008c\-0x00cf: r30 'seenFirstBaseUrl' boolean\l  0x012a\-0x0184: r23 'period' com.google.android.exoplayer2.source.dash.manifest.Period\l  0x0168\-0x0184: r26 'periodDurationMs' long\l  0x0122\-0x0184: r28 'periodWithDurationMs' android.util.Pair\<com.google.android.exoplayer2.source.dash.manifest.Period, java.lang.Long\>\l  0x000f\-0x0196: r7 'availabilityStartTime' long\l  0x001e\-0x0196: r9 'durationMs' long\l  0x002d\-0x0196: r11 'minBufferTimeMs' long\l  0x00d2\-0x0196: r13 'dynamic' boolean\l  0x00d9\-0x0196: r14 'minUpdateTimeMs' long\l  0x00df\-0x0196: r16 'timeShiftBufferDepthMs' long\l  0x00e5\-0x0196: r18 'suggestedPresentationDelayMs' long\l  0x00e5\-0x0196: r20 'utcTiming' com.google.android.exoplayer2.source.dash.manifest.UtcTimingElement\l  0x00e5\-0x0196: r21 'location' android.net.Uri\l  0x00e5\-0x0196: r22 'periods' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.Period\>\l  0x00e8\-0x0196: r24 'nextPeriodStartMs' long\l  0x00e8\-0x0196: r29 'seenEarlyAccessPeriod' boolean\l  0x00e8\-0x0196: r30 'seenFirstBaseUrl' boolean\l  0x0038\-0x0196: r31 'typeString' java.lang.String\l  ?\-0x0196: r37 'xpp' org.xmlpull.v1.XmlPullParser\l  ?\-0x0196: r38 'baseUrl' java.lang.String\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_30;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_30;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_31;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_32;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_33;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_34;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_35;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_15;
Node_20 -> Node_21[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_55;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_58;
Node_28 -> Node_29;
Node_30 -> Node_5;
Node_31 -> Node_7;
Node_32 -> Node_9;
Node_33 -> Node_11;
Node_34 -> Node_14;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_19;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_19;
Node_41 -> Node_42;
Node_42 -> Node_19;
Node_42 -> Node_43[style=dashed];
Node_43 -> Node_19;
Node_43 -> Node_44[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_19;
Node_48 -> Node_49;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_54;
Node_52 -> Node_53;
Node_53 -> Node_19;
Node_54 -> Node_53;
Node_55 -> Node_26;
Node_55 -> Node_56[style=dashed];
Node_56 -> Node_57;
Node_58 -> Node_59;
}

