digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.Representation.newInstance(Ljava\/lang\/String;JLcom\/google\/android\/exoplayer2\/Format;Ljava\/lang\/String;Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SegmentBase;Ljava\/util\/List;Ljava\/lang\/String;)Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/Representation;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l \l0x0002: INSTANCE_OF  (r2 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.source.dash.manifest.Representation$SingleSegmentRepresentation) =  com.google.android.exoplayer2.source.dash.manifest.Representation$SingleSegmentRepresentation \l0x0008: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l \l0x000a: CHECK_CAST  (r8 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase) = (com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase) (r8 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r11 I:?[long, double]) = (\-1 ?[long, double]) \l0x000e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY] A[D('contentId' java.lang.String)]) \l0x000f: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double] A[D('revisionId' long)]) \l0x0010: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0012: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x0014: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('inbandEventStreams' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>)])\l \l0x0016: MOVE  (r10 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('customCacheKey' java.lang.String)])\l \l0x0018: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.Representation$SingleSegmentRepresentation)\l  (r3 I:java.lang.String)\l  (r4 I:long)\l  (r6 I:com.google.android.exoplayer2.Format)\l  (r7 I:java.lang.String)\l  (r8 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase)\l  (r9 I:java.util.List)\l  (r10 I:java.lang.String)\l  (r11 I:long)\l com.google.android.exoplayer2.source.dash.manifest.Representation.SingleSegmentRepresentation.\<init\>(java.lang.String, long, com.google.android.exoplayer2.Format, java.lang.String, com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase, java.util.List, java.lang.String, long):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN  \l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.Representation)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l \l0x001e: INSTANCE_OF  (r2 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.source.dash.manifest.SegmentBase$MultiSegmentBase \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.source.dash.manifest.Representation$MultiSegmentRepresentation) =  com.google.android.exoplayer2.source.dash.manifest.Representation$MultiSegmentRepresentation \l0x0024: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l \l0x0026: CHECK_CAST  (r8 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$MultiSegmentBase) = (com.google.android.exoplayer2.source.dash.manifest.SegmentBase$MultiSegmentBase) (r8 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY] A[D('contentId' java.lang.String)]) \l0x0029: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double] A[D('revisionId' long)]) \l0x002a: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x002c: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x002e: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('inbandEventStreams' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>)])\l \l0x0030: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.Representation$MultiSegmentRepresentation)\l  (r3 I:java.lang.String)\l  (r4 I:long)\l  (r6 I:com.google.android.exoplayer2.Format)\l  (r7 I:java.lang.String)\l  (r8 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$MultiSegmentBase)\l  (r9 I:java.util.List)\l com.google.android.exoplayer2.source.dash.manifest.Representation.MultiSegmentRepresentation.\<init\>(java.lang.String, long, com.google.android.exoplayer2.Format, java.lang.String, com.google.android.exoplayer2.source.dash.manifest.SegmentBase$MultiSegmentBase, java.util.List):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0036: CONST_STR  (r3 I:java.lang.String) =  \"segmentBase must be of type SingleSegmentBase or MultiSegmentBase\" \l0x0038: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.source.dash.manifest.Representation com.google.android.exoplayer2.source.dash.manifest.Representation.newInstance((r13 I:java.lang.String A[D('contentId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('revisionId' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:java.lang.String A[D('baseUrl' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.String A[D('customCacheKey' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x003b: r13 'contentId' java.lang.String\l  ?\-0x003b: r14 'revisionId' long\l  ?\-0x003b: r16 'format' com.google.android.exoplayer2.Format\l  ?\-0x003b: r17 'baseUrl' java.lang.String\l  ?\-0x003b: r18 'segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase\l  0x0000\-0x003b: r19 'inbandEventStreams' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>\l  ?\-0x003b: r20 'customCacheKey' java.lang.String\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, J, Lcom\/google\/android\/exoplayer2\/Format;, Ljava\/lang\/String;, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SegmentBase;, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SchemeValuePair;, \>;, Ljava\/lang\/String;, ), Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/Representation;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
}

