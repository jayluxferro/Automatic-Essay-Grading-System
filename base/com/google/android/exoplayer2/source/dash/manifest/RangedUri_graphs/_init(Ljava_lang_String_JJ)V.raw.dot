digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.RangedUri.\<init\>(Ljava\/lang\/String;JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('referenceUri' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST_STR  (r1 I:java.lang.String A[D('referenceUri' java.lang.String)]) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IPUT  \l  (r1 I:java.lang.String A[D('referenceUri' java.lang.String)])\l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.referenceUri java.lang.String \l0x0009: IPUT  \l  (r2 I:long A[D('start' long)])\l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.start long \l0x000b: IPUT  \l  (r4 I:long A[D('length' long)])\l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.length long \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.dash.manifest.RangedUri.\<init\>((r0 'this' I:com.google.android.exoplayer2.source.dash.manifest.RangedUri A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[D('referenceUri' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:long A[D('start' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[D('length' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0007: r1 'referenceUri' java.lang.String\l  ?\-0x000d: r2 'start' long\l  ?\-0x000d: r4 'length' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

