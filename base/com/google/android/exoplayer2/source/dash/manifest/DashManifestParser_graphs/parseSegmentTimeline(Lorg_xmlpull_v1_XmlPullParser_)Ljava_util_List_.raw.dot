digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseSegmentTimeline(Lorg\/xmlpull\/v1\/XmlPullParser;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r6 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l0x000a: CONST_STR  (r7 I:java.lang.String) =  \"S\" \l0x000c: INVOKE  (r7 I:boolean) = \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST_STR  (r7 I:java.lang.String) =  \"t\" \l0x0014: INVOKE  (r4 I:long A[D('elapsedTime' long)]) = \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l  (r4 I:long A[D('elapsedTime' long)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseLong(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l0x0018: CONST_STR  (r7 I:java.lang.String) =  \"d\" \l0x001a: CONST  (r8 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x001f: INVOKE  (r2 I:long) = \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l  (r8 I:long)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseLong(org.xmlpull.v1.XmlPullParser, java.lang.String, long):long type: STATIC \l0x0023: CONST_STR  (r7 I:java.lang.String) =  \"r\" \l0x0025: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: INVOKE  (r7 I:int) = \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l  (r8 I:int)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int):int type: STATIC \l0x002a: ARITH  (r0 I:int) = (r7 I:int) + (1 int) \l0x002c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char] A[D('count' int)])  \-\> B:6:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: INVOKE  (r7 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement) = \l  (r10 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r4 I:long A[D('elapsedTime' long)])\l  (r2 I:long A[D('duration' long)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.buildSegmentTimelineElement(long, long):com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement type: VIRTUAL \l0x0033: INVOKE  \l  (r6 I:java.util.List A[D('segmentTimeline' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement\>)])\l  (r7 I:java.lang.Object)\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0036: ARITH  (r4 I:long A[D('elapsedTime' long)]) = (r4 I:long A[D('elapsedTime' long)]) + (r2 I:long A[D('duration' long)]) \l0x0037: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: CONST_STR  (r7 I:java.lang.String) =  \"SegmentTimeline\" \l0x003c: INVOKE  (r7 I:boolean) = \l  (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0007 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: RETURN  \l  (r6 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement\> A[D('segmentTimeline' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement\>)])\l \l}"];
MethodNode[shape=record,label="{protected java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement\> com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseSegmentTimeline((r10 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r11 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002c\-0x003a: r0 'count' int\l  0x002d\-0x003a: r1 'i' int\l  0x0023\-0x003a: r2 'duration' long\l  0x0007\-0x0042: r4 'elapsedTime' long\l  0x0005\-0x0042: r6 'segmentTimeline' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTimelineElement\>\l  ?\-0x0042: r11 'xpp' org.xmlpull.v1.XmlPullParser\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/xmlpull\/v1\/XmlPullParser;, ), Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SegmentBase$SegmentTimelineElement;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_7 -> Node_8[style=dashed];
}

