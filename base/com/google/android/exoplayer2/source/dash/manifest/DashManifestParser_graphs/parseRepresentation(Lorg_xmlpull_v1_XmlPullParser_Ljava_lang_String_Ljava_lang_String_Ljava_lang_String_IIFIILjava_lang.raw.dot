digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRepresentation(Lorg\/xmlpull\/v1\/XmlPullParser;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;IIFIILjava\/lang\/String;ILjava\/util\/List;Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SegmentBase;)Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/DashManifestParser$RepresentationInfo;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST_STR  (r12 I:java.lang.String) =  \"id\" \l0x0003: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0005: INVOKE  (r4 I:java.lang.String) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r12 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getAttributeValue(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l0x0009: CONST_STR  (r3 I:java.lang.String) =  \"bandwidth\" \l0x000b: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x000e: INVOKE  (r11 I:int) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r12 I:int)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int):int type: STATIC \l0x0012: CONST_STR  (r3 I:java.lang.String) =  \"mimeType\" \l0x0014: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0016: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('adaptationSetMimeType' java.lang.String)])\l \l0x0018: INVOKE  (r5 I:java.lang.String) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseString(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String):java.lang.String type: STATIC \l0x001c: CONST_STR  (r3 I:java.lang.String) =  \"codecs\" \l0x001e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0020: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('adaptationSetCodecs' java.lang.String)])\l \l0x0022: INVOKE  (r15 I:java.lang.String) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseString(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String):java.lang.String type: STATIC \l0x0026: CONST_STR  (r3 I:java.lang.String) =  \"width\" \l0x0028: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x002a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetWidth' int)])\l \l0x002c: INVOKE  (r6 I:int) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int):int type: STATIC \l0x0030: CONST_STR  (r3 I:java.lang.String) =  \"height\" \l0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0034: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetHeight' int)])\l \l0x0036: INVOKE  (r7 I:int) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int):int type: STATIC \l0x003a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x003c: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r31 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetFrameRate' float)])\l \l0x003e: INVOKE  (r8 I:float) = (r0 I:org.xmlpull.v1.XmlPullParser), (r1 I:float) com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseFrameRate(org.xmlpull.v1.XmlPullParser, float):float type: STATIC \l0x0042: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetAudioChannels' int)])\l \l0x0044: CONST_STR  (r3 I:java.lang.String) =  \"audioSamplingRate\" \l0x0046: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0048: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetAudioSamplingRate' int)])\l \l0x004a: INVOKE  (r10 I:int) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int):int type: STATIC \l0x004e: NEW_INSTANCE  (r20 I:java.util.ArrayList) =  java.util.ArrayList \l0x0050: INVOKE  (r20 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0053: NEW_INSTANCE  (r21 I:java.util.ArrayList) =  java.util.ArrayList \l0x0055: INVOKE  (r21 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0058: CONST  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x005a|0x005a: INVOKE  \l  (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l0x005d: CONST_STR  (r3 I:java.lang.String) =  \"BaseURL\" \l0x005f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0061: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0065|0x0065: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0091 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0067|0x0067: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seenFirstBaseUrl' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x006f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0069|0x0069: INVOKE  (r26 I:java.lang.String A[D('baseUrl' java.lang.String)]) = \l  (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r26 I:java.lang.String A[D('baseUrl' java.lang.String)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseBaseUrl(org.xmlpull.v1.XmlPullParser, java.lang.String):java.lang.String type: STATIC \l0x006d: CONST  (r23 I:?[boolean, int, float, short, byte, char] A[D('seenFirstBaseUrl' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x006f|0x006f: CONST_STR  (r3 I:java.lang.String) =  \"Representation\" \l0x0071: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0073: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0077|0x0077: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x005a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0079|0x0079: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x007b: MOVE  (r12 I:?[OBJECT, ARRAY]) = \l  (r34 I:?[OBJECT, ARRAY] A[D('adaptationSetLanguage' java.lang.String)])\l \l0x007d: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r35 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adaptationSetSelectionFlags' int)])\l \l0x007f: MOVE  (r14 I:?[OBJECT, ARRAY]) = \l  (r36 I:?[OBJECT, ARRAY] A[D('adaptationSetAccessibilityDescriptors' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>)])\l \l0x0081: INVOKE  (r17 I:com.google.android.exoplayer2.Format) = \l  (r3 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r4 I:java.lang.String A[D('id' java.lang.String)])\l  (r5 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r6 I:int A[D('width' int)])\l  (r7 I:int A[D('height' int)])\l  (r8 I:float A[D('frameRate' float)])\l  (r9 I:int A[D('audioChannels' int)])\l  (r10 I:int A[D('audioSamplingRate' int)])\l  (r11 I:int A[D('bandwidth' int)])\l  (r12 I:java.lang.String)\l  (r13 I:int)\l  (r14 I:java.util.List)\l  (r15 I:java.lang.String A[D('codecs' java.lang.String)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.buildFormat(java.lang.String, java.lang.String, int, int, float, int, int, int, java.lang.String, int, java.util.List, java.lang.String):com.google.android.exoplayer2.Format type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0085|0x0085: IF  (r37 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0113 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0087|0x0087: NEW_INSTANCE  (r16 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser$RepresentationInfo) =  com.google.android.exoplayer2.source.dash.manifest.DashManifestParser$RepresentationInfo \l0x0089: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r26 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x008b: MOVE  (r19 I:?[OBJECT, ARRAY]) = \l  (r37 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l \l0x008d: INVOKE  \l  (r16 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser$RepresentationInfo)\l  (r17 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l  (r18 I:java.lang.String)\l  (r19 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase)\l  (r20 I:java.util.ArrayList A[D('drmSchemeDatas' java.util.ArrayList\<com.google.android.exoplayer2.drm.DrmInitData$SchemeData\>)])\l  (r21 I:java.util.ArrayList A[D('inbandEventStreams' java.util.ArrayList\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.RepresentationInfo.\<init\>(com.google.android.exoplayer2.Format, java.lang.String, com.google.android.exoplayer2.source.dash.manifest.SegmentBase, java.util.ArrayList, java.util.ArrayList):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0090|0x0090: RETURN  \l  (r16 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser$RepresentationInfo)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0091|0x0091: CONST_STR  (r3 I:java.lang.String) =  \"AudioChannelConfiguration\" \l0x0093: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0095: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0099|0x0099: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x00a0 \l}"];
Node_13 [shape=record,label="{13\:\ 0x009b|0x009b: INVOKE  (r9 I:int A[D('audioChannels' int)]) = \l  (r24 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseAudioChannelConfiguration(org.xmlpull.v1.XmlPullParser):int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x00a0|0x00a0: CONST_STR  (r3 I:java.lang.String) =  \"SegmentBase\" \l0x00a2: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00a4: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a8|0x00a8: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x00b7 \l}"];
Node_16 [shape=record,label="{16\:\ 0x00aa|0x00aa: CHECK_CAST  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) = (com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase) (r37 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) \l0x00ac: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00ae: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00b0: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x00b2: INVOKE  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r1 I:org.xmlpull.v1.XmlPullParser)\l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseSegmentBase(org.xmlpull.v1.XmlPullParser, com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase):com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x00b7|0x00b7: CONST_STR  (r3 I:java.lang.String) =  \"SegmentList\" \l0x00b9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00bb: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x00bf|0x00bf: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00ce \l}"];
Node_19 [shape=record,label="{19\:\ 0x00c1|0x00c1: CHECK_CAST  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) = (com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList) (r37 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) \l0x00c3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00c5: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00c7: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x00c9: INVOKE  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r1 I:org.xmlpull.v1.XmlPullParser)\l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseSegmentList(org.xmlpull.v1.XmlPullParser, com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList):com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentList type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ce|0x00ce: CONST_STR  (r3 I:java.lang.String) =  \"SegmentTemplate\" \l0x00d0: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00d2: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x00d6|0x00d6: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00e5 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00d8|0x00d8: CHECK_CAST  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) = (com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate) (r37 I:?[OBJECT, ARRAY] A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) \l0x00da: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00dc: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00de: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x00e0: INVOKE  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r1 I:org.xmlpull.v1.XmlPullParser)\l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseSegmentTemplate(org.xmlpull.v1.XmlPullParser, com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate):com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SegmentTemplate type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x00e5|0x00e5: CONST_STR  (r3 I:java.lang.String) =  \"ContentProtection\" \l0x00e7: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x00e9: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ed|0x00ed: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00fe \l}"];
Node_25 [shape=record,label="{25\:\ 0x00ef|0x00ef: INVOKE  (r22 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData) = \l  (r24 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseContentProtection(org.xmlpull.v1.XmlPullParser):com.google.android.exoplayer2.drm.DrmInitData$SchemeData type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x00f3|0x00f3: IF  (r22 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('contentProtection' com.google.android.exoplayer2.drm.DrmInitData$SchemeData)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x006f \l}"];
Node_27 [shape=record,label="{27\:\ 0x00f5|0x00f5: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('drmSchemeDatas' java.util.ArrayList\<com.google.android.exoplayer2.drm.DrmInitData$SchemeData\>)])\l \l0x00f7: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('contentProtection' com.google.android.exoplayer2.drm.DrmInitData$SchemeData)])\l \l0x00f9: INVOKE  (r0 I:java.util.ArrayList), (r1 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00fe|0x00fe: CONST_STR  (r3 I:java.lang.String) =  \"InbandEventStream\" \l0x0100: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l \l0x0102: INVOKE  (r3 I:boolean) = \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r3 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x0106|0x0106: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x006f \l}"];
Node_30 [shape=record,label="{30\:\ 0x0108|0x0108: INVOKE  (r3 I:com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair) = \l  (r24 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l  (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseInbandEventStream(org.xmlpull.v1.XmlPullParser):com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair type: VIRTUAL \l0x010c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('inbandEventStreams' java.util.ArrayList\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>)])\l \l0x010e: INVOKE  (r0 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0113|0x0113: NEW_INSTANCE  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)]) =  com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase \l0x0115: INVOKE  \l  (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase$SingleSegmentBase A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase)])\l com.google.android.exoplayer2.source.dash.manifest.SegmentBase.SingleSegmentBase.\<init\>():void type: DIRECT \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.source.dash.manifest.DashManifestParser$RepresentationInfo com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRepresentation((r24 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r25 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:java.lang.String A[D('baseUrl' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:java.lang.String A[D('adaptationSetMimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:java.lang.String A[D('adaptationSetCodecs' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:int A[D('adaptationSetWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:int A[D('adaptationSetHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:float A[D('adaptationSetFrameRate' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:int A[D('adaptationSetAudioChannels' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:int A[D('adaptationSetAudioSamplingRate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:java.lang.String A[D('adaptationSetLanguage' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:int A[D('adaptationSetSelectionFlags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:com.google.android.exoplayer2.source.dash.manifest.SegmentBase A[D('segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0085\-0x0091: r17 'format' com.google.android.exoplayer2.Format\l  ?\-0x00ac: r37 'segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase\l  0x00b6\-0x00c3: r37 'segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase\l  0x00cd\-0x00da: r37 'segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase\l  0x00f3\-0x00fe: r22 'contentProtection' com.google.android.exoplayer2.drm.DrmInitData$SchemeData\l  0x00e4\-0x0115: r37 'segmentBase' com.google.android.exoplayer2.source.dash.manifest.SegmentBase\l  0x0009\-0x0119: r4 'id' java.lang.String\l  0x001c\-0x0119: r5 'mimeType' java.lang.String\l  0x0030\-0x0119: r6 'width' int\l  0x003a\-0x0119: r7 'height' int\l  0x0042\-0x0119: r8 'frameRate' float\l  0x0044\-0x0119: r9 'audioChannels' int\l  0x004e\-0x0119: r10 'audioSamplingRate' int\l  0x0012\-0x0119: r11 'bandwidth' int\l  0x0026\-0x0119: r15 'codecs' java.lang.String\l  0x0113\-0x0119: r17 'format' com.google.android.exoplayer2.Format\l  0x0053\-0x0119: r20 'drmSchemeDatas' java.util.ArrayList\<com.google.android.exoplayer2.drm.DrmInitData$SchemeData\>\l  0x0058\-0x0119: r21 'inbandEventStreams' java.util.ArrayList\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>\l  0x005a\-0x0119: r23 'seenFirstBaseUrl' boolean\l  ?\-0x0119: r25 'xpp' org.xmlpull.v1.XmlPullParser\l  ?\-0x0119: r26 'baseUrl' java.lang.String\l  ?\-0x0119: r27 'adaptationSetMimeType' java.lang.String\l  ?\-0x0119: r28 'adaptationSetCodecs' java.lang.String\l  ?\-0x0119: r29 'adaptationSetWidth' int\l  ?\-0x0119: r30 'adaptationSetHeight' int\l  ?\-0x0119: r31 'adaptationSetFrameRate' float\l  ?\-0x0119: r32 'adaptationSetAudioChannels' int\l  ?\-0x0119: r33 'adaptationSetAudioSamplingRate' int\l  ?\-0x0119: r34 'adaptationSetLanguage' java.lang.String\l  ?\-0x0119: r35 'adaptationSetSelectionFlags' int\l  0x0000\-0x0119: r36 'adaptationSetAccessibilityDescriptors' java.util.List\<com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/xmlpull\/v1\/XmlPullParser;, Ljava\/lang\/String;, Ljava\/lang\/String;, Ljava\/lang\/String;, IIFII, Ljava\/lang\/String;, I, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SchemeValuePair;, \>;, Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/SegmentBase;, ), Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/DashManifestParser$RepresentationInfo;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_31;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_5;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_5;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_5;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_5;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_5;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_5;
Node_28 -> Node_29;
Node_29 -> Node_5;
Node_29 -> Node_30[style=dashed];
Node_30 -> Node_5;
Node_31 -> Node_9;
}

