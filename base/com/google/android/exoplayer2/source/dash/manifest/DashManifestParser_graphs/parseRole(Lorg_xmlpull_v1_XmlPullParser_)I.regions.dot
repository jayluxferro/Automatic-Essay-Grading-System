digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRole(Lorg\/xmlpull\/v1\/XmlPullParser;)I" {
subgraph cluster_Region_706128446 {
label = "R(3:0|(1:1)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = parseString(r5, \"schemeIdUri\", (java.lang.String) null)\ljava.lang.String java.lang.String r1 = parseString(r5, com.google.android.gms.measurement.api.AppMeasurementSdk.ConditionalUserProperty.VALUE, (java.lang.String) null)\l}"];
subgraph cluster_LoopRegion_1256649472 {
label = "LOOP:0: (1:1)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:2:0x0016\l|if (com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(r5, \"Role\") == false) goto L_0x000d\l}"];
subgraph cluster_Region_2032395696 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lLOOP:0: B:1:0x000d\-\>B:2:0x0016\l|r5.next()\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x001e|RETURN\l|return (!\"urn:mpeg:dash:role:2011\".equals(r0) \|\| !\"main\".equals(r1)) ? 0 : 1\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0018}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0020}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0026|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0028|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002a|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0018|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseRole((r4v0 'this' com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r5v0 'xpp' org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_1;
Node_2 -> Node_9[style=dashed];
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_9 -> Node_3;
}

