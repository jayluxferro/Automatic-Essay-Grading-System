digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.SchemeValuePair.hashCode()I" {
subgraph cluster_Region_944237480 {
label = "R(5:0|(1:2)(1:8)|3|(1:5)|7) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
subgraph cluster_IfRegion_377505343 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: R(1:8)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.schemeIdUri != null) goto L_0x0005\l}"];
subgraph cluster_Region_924505962 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|int r0 = r3.schemeIdUri.hashCode()\l}"];
}
subgraph cluster_Region_1740345379 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|r0 = 0\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v6 int) binds: [B:8:0x0019, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = r0 * 31\l}"];
subgraph cluster_IfRegion_1925952292 {
label = "IF [B:4:0x000f] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r3.value != null) goto L_0x0011\l}"];
subgraph cluster_Region_1465363717 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|int r1 = r3.value.hashCode()\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return r0 + r1\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0017|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:4:0x000f, B:5:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair.hashCode((r3v0 'this' com.google.android.exoplayer2.source.dash.manifest.SchemeValuePair A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_8 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
}

