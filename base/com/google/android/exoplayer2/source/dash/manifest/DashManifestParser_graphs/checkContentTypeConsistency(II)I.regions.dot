digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.checkContentTypeConsistency(II)I" {
subgraph cluster_Region_1263517212 {
label = "R(1:(2:(1:8)|(1:(2:(1:9)|(2:6|10)))))";
node [shape=record,color=blue];
subgraph cluster_Region_361637844 {
label = "R(2:(1:8)|(1:(2:(1:9)|(2:6|10))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_878963738 {
label = "IF [B:1:0x0001] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r1 == \-1) goto L_0x0003\l}"];
subgraph cluster_Region_521457386 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_698166346 {
label = "R(1:(2:(1:9)|(2:6|10)))";
node [shape=record,color=blue];
subgraph cluster_Region_1305026090 {
label = "R(2:(1:9)|(2:6|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1717647541 {
label = "IF [B:3:0x0005] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r2 == \-1) goto L_?\l}"];
subgraph cluster_Region_1606142221 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_528765388 {
label = "R(2:6|10)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r1 == r2)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0003}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0007}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0009}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.checkContentTypeConsistency((r1v0 'firstType' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'secondType' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_6 -> Node_10;
Node_0 -> Node_1;
Node_2 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_6;
}

