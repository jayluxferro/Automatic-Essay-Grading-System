digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.getSampleMimeType(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:boolean) = \l  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)])\l com.google.android.exoplayer2.util.MimeTypes.isAudio(java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) = (r3 I:java.lang.String A[D('codecs' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.getAudioMediaMimeType(java.lang.String):java.lang.String type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  \l  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r1 I:boolean) = \l  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)])\l com.google.android.exoplayer2.util.MimeTypes.isVideo(java.lang.String):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) = (r3 I:java.lang.String A[D('codecs' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.getVideoMediaMimeType(java.lang.String):java.lang.String type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r1 I:boolean) = \l  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.mimeTypeIsRawText(java.lang.String):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: CONST_STR  (r1 I:java.lang.String) =  \"application\/mp4\" \l0x001f: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.Object A[D('containerMimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: CONST_STR  (r1 I:java.lang.String) =  \"stpp\" \l0x0027: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Object A[D('codecs' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: CONST_STR  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) =  \"application\/ttml+xml\" \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: CONST_STR  (r1 I:java.lang.String) =  \"wvtt\" \l0x0032: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r3 I:java.lang.Object A[D('codecs' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0065 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: CONST_STR  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) =  \"application\/x\-mp4\-vtt\" \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: CONST_STR  (r1 I:java.lang.String) =  \"application\/x\-rawcc\" \l0x003d: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.Object A[D('containerMimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0065 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('codecs' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0063 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: CONST_STR  (r1 I:java.lang.String) =  \"cea708\" \l0x0047: INVOKE  (r1 I:boolean) = \l  (r3 I:java.lang.String A[D('codecs' java.lang.String)])\l  (r1 I:java.lang.CharSequence)\l java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0050 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: CONST_STR  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) =  \"application\/cea\-708\" \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: CONST_STR  (r1 I:java.lang.String) =  \"eia608\" \l0x0052: INVOKE  (r1 I:boolean) = \l  (r3 I:java.lang.String A[D('codecs' java.lang.String)])\l  (r1 I:java.lang.CharSequence)\l java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0056|0x0056: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0060 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0058|0x0058: CONST_STR  (r1 I:java.lang.String) =  \"cea608\" \l0x005a: INVOKE  (r1 I:boolean) = \l  (r3 I:java.lang.String A[D('codecs' java.lang.String)])\l  (r1 I:java.lang.CharSequence)\l java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x005e|0x005e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0063 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0060|0x0060: CONST_STR  (r2 I:java.lang.String A[D('containerMimeType' java.lang.String)]) =  \"application\/cea\-608\" \l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|0x0063: MOVE  (r2 I:?[OBJECT, ARRAY] A[D('containerMimeType' java.lang.String)]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0065|0x0065: MOVE  (r2 I:?[OBJECT, ARRAY] A[D('containerMimeType' java.lang.String)]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.getSampleMimeType((r2 I:java.lang.String A[D('containerMimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('codecs' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000b: r2 'containerMimeType' java.lang.String\l  0x000c\-0x0066: r2 'containerMimeType' java.lang.String\l  ?\-0x0066: r3 'codecs' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_3;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_29;
Node_16 -> Node_3;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_29;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_3;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_3;
Node_28 -> Node_3;
Node_29 -> Node_3;
}

