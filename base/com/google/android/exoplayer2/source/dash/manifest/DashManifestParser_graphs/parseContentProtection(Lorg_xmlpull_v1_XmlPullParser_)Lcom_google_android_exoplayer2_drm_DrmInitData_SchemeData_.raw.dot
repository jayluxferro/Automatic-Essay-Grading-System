digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseContentProtection(Lorg\/xmlpull\/v1\/XmlPullParser;)Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData$SchemeData;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST_STR  (r8 I:java.lang.String) =  \"schemeIdUri\" \l0x0005: INVOKE  (r4 I:java.lang.String) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l  (r8 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getAttributeValue(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l0x0009: CONST_STR  (r8 I:java.lang.String) =  \"urn:uuid:9a04f079\-9840\-4286\-ab92\-e65be0885f95\" \l0x000b: INVOKE  (r1 I:boolean) = \l  (r8 I:java.lang.String)\l  (r4 I:java.lang.Object A[D('schemeIdUri' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: INVOKE  \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('data' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CONST_STR  (r8 I:java.lang.String) =  \"cenc:pssh\" \l0x0019: INVOKE  (r8 I:boolean) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: INVOKE  (r8 I:int) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: INVOKE  (r8 I:java.lang.String) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.getText():java.lang.String type: INTERFACE \l0x0029: INVOKE  (r0 I:byte[] A[D('data' byte[])]) = (r8 I:java.lang.String), (r6 I:int) android.util.Base64.decode(java.lang.String, int):byte[] type: STATIC \l0x002d: INVOKE  (r5 I:java.util.UUID A[D('uuid' java.util.UUID)]) = (r0 I:byte[] A[D('data' byte[])]) com.google.android.exoplayer2.extractor.mp4.PsshAtomUtil.parseUuid(byte[]):java.util.UUID type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('uuid' java.util.UUID)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: CONST_STR  (r8 I:java.lang.String) =  \"MpdParser\" \l0x0035: CONST_STR  (r9 I:java.lang.String) =  \"Skipping malformed cenc:pssh data\" \l0x0037: INVOKE  (r8 I:java.lang.String), (r9 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x003a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('data' byte[])]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: CONST_STR  (r8 I:java.lang.String) =  \"ContentProtection\" \l0x003d: INVOKE  (r8 I:boolean) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0012 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('data' byte[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x008c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData) =  com.google.android.exoplayer2.drm.DrmInitData$SchemeData \l0x0047: CONST_STR  (r7 I:java.lang.String) =  \"video\/mp4\" \l0x0049: INVOKE  \l  (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l  (r5 I:java.util.UUID A[D('uuid' java.util.UUID)])\l  (r7 I:java.lang.String)\l  (r0 I:byte[] A[D('data' byte[])])\l  (r2 I:boolean A[D('requiresSecureDecoder' boolean)])\l com.google.android.exoplayer2.drm.DrmInitData.SchemeData.\<init\>(java.util.UUID, java.lang.String, byte[], boolean):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: RETURN  \l  (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('data' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0070 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isPlayReady' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0070 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|0x0051: CONST_STR  (r8 I:java.lang.String) =  \"mspr:pro\" \l0x0053: INVOKE  (r8 I:boolean) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0070 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|0x0059: INVOKE  (r8 I:int) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x005d|0x005d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0070 \l}"];
Node_21 [shape=record,label="{21\:\ 0x005f|0x005f: SGET  (r8 I:java.util.UUID) =  com.google.android.exoplayer2.C.PLAYREADY_UUID java.util.UUID \l0x0061: INVOKE  (r9 I:java.lang.String) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l org.xmlpull.v1.XmlPullParser.getText():java.lang.String type: INTERFACE \l0x0065: INVOKE  (r9 I:byte[]) = (r9 I:java.lang.String), (r6 I:int) android.util.Base64.decode(java.lang.String, int):byte[] type: STATIC \l0x0069: INVOKE  (r0 I:byte[] A[D('data' byte[])]) = (r8 I:java.util.UUID), (r9 I:byte[]) com.google.android.exoplayer2.extractor.mp4.PsshAtomUtil.buildPsshAtom(java.util.UUID, byte[]):byte[] type: STATIC \l0x006d: SGET  (r5 I:java.util.UUID A[D('uuid' java.util.UUID)]) =  com.google.android.exoplayer2.C.PLAYREADY_UUID java.util.UUID \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: CONST_STR  (r8 I:java.lang.String) =  \"widevine:license\" \l0x0072: INVOKE  (r8 I:boolean) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.util.XmlPullParserUtil.isStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0076|0x0076: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: CONST_STR  (r8 I:java.lang.String) =  \"robustness_level\" \l0x007a: INVOKE  (r3 I:java.lang.String) = \l  (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r7 I:java.lang.String)\l  (r8 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getAttributeValue(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x007e|0x007e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('robustnessLevel' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x008a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0080|0x0080: CONST_STR  (r8 I:java.lang.String) =  \"HW\" \l0x0082: INVOKE  (r8 I:boolean) = \l  (r3 I:java.lang.String A[D('robustnessLevel' java.lang.String)])\l  (r8 I:java.lang.String)\l java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0086|0x0086: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x008a \l}"];
Node_28 [shape=record,label="{28\:\ 0x0088|0x0088: CONST  (r2 I:?[boolean, int, float, short, byte, char] A[D('requiresSecureDecoder' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x008a|0x008a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('requiresSecureDecoder' boolean)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x008c|0x008c: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.drm.DrmInitData$SchemeData com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseContentProtection((r11 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r12 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x007e\-0x008c: r3 'robustnessLevel' java.lang.String\l  0x0010\-0x008d: r0 'data' byte[]\l  0x000f\-0x008d: r1 'isPlayReady' boolean\l  0x0012\-0x008d: r2 'requiresSecureDecoder' boolean\l  0x0009\-0x008d: r4 'schemeIdUri' java.lang.String\l  0x0011\-0x008d: r5 'uuid' java.util.UUID\l  ?\-0x008d: r12 'xpp' org.xmlpull.v1.XmlPullParser\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_31;
Node_13 -> Node_14;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_10;
Node_22 -> Node_23;
Node_23 -> Node_10;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_10;
Node_30 -> Node_10;
Node_31 -> Node_14;
}

