digraph "CFG forcom.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseContentType(Lorg\/xmlpull\/v1\/XmlPullParser;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST_STR  (r3 I:java.lang.String) =  \"contentType\" \l0x0004: INVOKE  (r0 I:java.lang.String) = \l  (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser)])\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getAttributeValue(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l0x0008: INVOKE  (r2 I:boolean) = \l  (r0 I:java.lang.CharSequence A[D('contentType' java.lang.String)])\l android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST_STR  (r2 I:java.lang.String) =  \"audio\" \l0x0011: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('contentType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST_STR  (r2 I:java.lang.String) =  \"video\" \l0x001b: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('contentType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST_STR  (r2 I:java.lang.String) =  \"text\" \l0x0025: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('contentType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000e \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parseContentType((r4 'this' I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[IMMUTABLE_TYPE, THIS]), (r5 I:org.xmlpull.v1.XmlPullParser A[D('xpp' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0008\-0x002c: r0 'contentType' java.lang.String\l  ?\-0x002c: r5 'xpp' org.xmlpull.v1.XmlPullParser\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_2;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_2;
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_2;
}

