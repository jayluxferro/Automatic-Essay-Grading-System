digraph "CFG forcom.google.android.exoplayer2.source.dash.DashUtil.loadSampleFormat(Lcom\/google\/android\/exoplayer2\/upstream\/DataSource;Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/Representation;)Lcom\/google\/android\/exoplayer2\/Format;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l  (r4 I:com.google.android.exoplayer2.source.dash.manifest.Representation A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation)])\l  (r2 I:boolean)\l com.google.android.exoplayer2.source.dash.DashUtil.loadInitializationData(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.source.dash.manifest.Representation, boolean):com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r1 I:com.google.android.exoplayer2.Format) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r1 I:com.google.android.exoplayer2.Format[]) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)])\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.getSampleFormats():com.google.android.exoplayer2.Format[] type: VIRTUAL \l0x000d: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.Format com.google.android.exoplayer2.source.dash.DashUtil.loadSampleFormat((r3 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.source.dash.manifest.Representation A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x000f: r0 'extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper\l  ?\-0x000f: r3 'dataSource' com.google.android.exoplayer2.upstream.DataSource\l  ?\-0x000f: r4 'representation' com.google.android.exoplayer2.source.dash.manifest.Representation\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

