digraph "CFG forcom.google.android.exoplayer2.source.dash.DashUtil.loadManifest(Lcom\/google\/android\/exoplayer2\/upstream\/DataSource;Ljava\/lang\/String;)Lcom\/google\/android\/exoplayer2\/source\/dash\/manifest\/DashManifest;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.upstream.DataSourceInputStream) =  com.google.android.exoplayer2.upstream.DataSourceInputStream \l0x0002: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.upstream.DataSpec) =  com.google.android.exoplayer2.upstream.DataSpec \l0x0004: INVOKE  (r3 I:android.net.Uri) = \l  (r6 I:java.lang.String A[D('manifestUri' java.lang.String)])\l android.net.Uri.parse(java.lang.String):android.net.Uri type: STATIC \l0x0008: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0009: INVOKE  \l  (r2 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r3 I:android.net.Uri)\l  (r4 I:int)\l com.google.android.exoplayer2.upstream.DataSpec.\<init\>(android.net.Uri, int):void type: DIRECT \l0x000c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSourceInputStream)\l  (r5 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l  (r2 I:com.google.android.exoplayer2.upstream.DataSpec)\l com.google.android.exoplayer2.upstream.DataSourceInputStream.\<init\>(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.upstream.DataSpec):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|SYNTHETIC\lSplitter:B:1:0x000f\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000f\l|0x000f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSourceInputStream A[D('inputStream' com.google.android.exoplayer2.upstream.DataSourceInputStream)])\l com.google.android.exoplayer2.upstream.DataSourceInputStream.open():void type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l0x0012: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser) =  com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[Catch:\{ all \-\> 0x0023 \}]\l0x0014: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0023 \}]\l0x0017: INVOKE  (r2 I:android.net.Uri) = \l  (r5 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l com.google.android.exoplayer2.upstream.DataSource.getUri():android.net.Uri type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}]\l0x001b: INVOKE  (r2 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest) = \l  (r1 I:com.google.android.exoplayer2.source.dash.manifest.DashManifestParser A[D('parser' com.google.android.exoplayer2.source.dash.manifest.DashManifestParser)])\l  (r2 I:android.net.Uri)\l  (r0 I:java.io.InputStream A[D('inputStream' com.google.android.exoplayer2.upstream.DataSourceInputStream)])\l com.google.android.exoplayer2.source.dash.manifest.DashManifestParser.parse(android.net.Uri, java.io.InputStream):com.google.android.exoplayer2.source.dash.manifest.DashManifest type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSourceInputStream A[D('inputStream' com.google.android.exoplayer2.upstream.DataSourceInputStream)])\l com.google.android.exoplayer2.upstream.DataSourceInputStream.close():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: RETURN  \l  (r2 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest)\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|ExcHandler: all null\lSplitter:B:1:0x000f\l|0x0023: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  \l  (r0 I:com.google.android.exoplayer2.upstream.DataSourceInputStream A[D('inputStream' com.google.android.exoplayer2.upstream.DataSourceInputStream)])\l com.google.android.exoplayer2.upstream.DataSourceInputStream.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.source.dash.manifest.DashManifest com.google.android.exoplayer2.source.dash.DashUtil.loadManifest((r5 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[D('manifestUri' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x0023: r1 'parser' com.google.android.exoplayer2.source.dash.manifest.DashManifestParser\l  0x000f\-0x0027: r0 'inputStream' com.google.android.exoplayer2.upstream.DataSourceInputStream\l  ?\-0x0027: r5 'dataSource' com.google.android.exoplayer2.upstream.DataSource\l  ?\-0x0027: r6 'manifestUri' java.lang.String\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

