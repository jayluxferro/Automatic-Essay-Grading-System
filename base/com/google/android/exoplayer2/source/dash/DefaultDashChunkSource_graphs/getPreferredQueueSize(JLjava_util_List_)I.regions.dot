digraph "CFG forcom.google.android.exoplayer2.source.dash.DefaultDashChunkSource.getPreferredQueueSize(JLjava\/util\/List;)I" {
subgraph cluster_Region_1185691978 {
label = "R(1:(2:(1:6)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_400390421 {
label = "R(2:(1:6)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1477387147 {
label = "IF [B:1:0x0002, B:3:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.fatalError != null) goto L_0x000d\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|ADDED_TO_REGION\l|if (r3.trackSelection.length() \< 2) goto L_0x000d\l}"];
subgraph cluster_Region_1340439430 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r6.size()\l}"];
}
}
subgraph cluster_Region_1755606361 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r3.trackSelection.evaluateQueueSize(r4, r6)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0012}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.getPreferredQueueSize((r3v0 'this' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource A[IMMUTABLE_TYPE, THIS]), (r4v0 'playbackPositionUs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(J, Ljava\/util\/List, \<+, Lcom\/google\/android\/exoplayer2\/source\/chunk\/MediaChunk;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_6;
Node_5 -> Node_7;
}

