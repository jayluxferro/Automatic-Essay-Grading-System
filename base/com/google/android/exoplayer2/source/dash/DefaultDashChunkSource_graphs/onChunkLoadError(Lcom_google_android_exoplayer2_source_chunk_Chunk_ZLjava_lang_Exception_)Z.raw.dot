digraph "CFG forcom.google.android.exoplayer2.source.dash.DefaultDashChunkSource.onChunkLoadError(Lcom\/google\/android\/exoplayer2\/source\/chunk\/Chunk;ZLjava\/lang\/Exception;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cancelable' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: RETURN  (r3 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r3 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest) = \l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.manifest com.google.android.exoplayer2.source.dash.manifest.DashManifest \l0x0007: IGET  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.source.dash.manifest.DashManifest)\l com.google.android.exoplayer2.source.dash.manifest.DashManifest.dynamic boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INSTANCE_OF  (r3 I:boolean) = \l  (r8 I:?[OBJECT, ARRAY] A[D('chunk' com.google.android.exoplayer2.source.chunk.Chunk)])\l com.google.android.exoplayer2.source.chunk.MediaChunk \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INSTANCE_OF  (r3 I:boolean) = (r10 I:?[OBJECT, ARRAY] A[D('e' java.lang.Exception)]) com.google.android.exoplayer2.upstream.HttpDataSource$InvalidResponseCodeException \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY] A[D('e' java.lang.Exception)]) \l0x0014: CHECK_CAST  (r3 I:com.google.android.exoplayer2.upstream.HttpDataSource$InvalidResponseCodeException) = (com.google.android.exoplayer2.upstream.HttpDataSource$InvalidResponseCodeException) (r3 I:?[OBJECT, ARRAY]) \l0x0016: IGET  (r3 I:int) = \l  (r3 I:com.google.android.exoplayer2.upstream.HttpDataSource$InvalidResponseCodeException)\l com.google.android.exoplayer2.upstream.HttpDataSource.InvalidResponseCodeException.responseCode int \l0x0018: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (404(0x194, float:5.66E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: IGET  (r3 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder[]) = \l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.representationHolders com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder[] \l0x001e: IGET  (r5 I:com.google.android.exoplayer2.trackselection.TrackSelection) = \l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.trackSelection com.google.android.exoplayer2.trackselection.TrackSelection \l0x0020: IGET  (r6 I:com.google.android.exoplayer2.Format) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.Chunk A[D('chunk' com.google.android.exoplayer2.source.chunk.Chunk)])\l com.google.android.exoplayer2.source.chunk.Chunk.trackFormat com.google.android.exoplayer2.Format \l0x0022: INVOKE  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l  (r6 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.trackselection.TrackSelection.indexOf(com.google.android.exoplayer2.Format):int type: INTERFACE \l0x0026: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0028: INVOKE  (r2 I:int) = \l  (r1 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentCount():int type: VIRTUAL \l0x002c: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('segmentCount' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('segmentCount' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: INVOKE  (r3 I:int) = \l  (r1 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getFirstSegmentNum():int type: VIRTUAL \l0x0035: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int A[D('segmentCount' int)]) \l0x0036: ARITH  (r0 I:int) = (r3 I:int) + (\-1 int) \l0x0038: MOVE  (r3 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('chunk' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x0039: CHECK_CAST  (r3 I:com.google.android.exoplayer2.source.chunk.MediaChunk) = (com.google.android.exoplayer2.source.chunk.MediaChunk) (r3 I:?[OBJECT, ARRAY]) \l0x003b: INVOKE  (r3 I:int) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.MediaChunk)\l com.google.android.exoplayer2.source.chunk.MediaChunk.getNextChunkIndex():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: IF  (r3 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char] A[D('lastAvailableSegmentNum' int)])  \-\> B:18:0x0045 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: IPUT  \l  (r4 I:boolean)\l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.missingLastSegment boolean \l0x0043: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: IGET  (r3 I:com.google.android.exoplayer2.trackselection.TrackSelection) = \l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.trackSelection com.google.android.exoplayer2.trackselection.TrackSelection \l0x0047: IGET  (r4 I:com.google.android.exoplayer2.trackselection.TrackSelection) = \l  (r7 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.trackSelection com.google.android.exoplayer2.trackselection.TrackSelection \l0x0049: IGET  (r5 I:com.google.android.exoplayer2.Format) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.Chunk A[D('chunk' com.google.android.exoplayer2.source.chunk.Chunk)])\l com.google.android.exoplayer2.source.chunk.Chunk.trackFormat com.google.android.exoplayer2.Format \l0x004b: INVOKE  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l  (r5 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.trackselection.TrackSelection.indexOf(com.google.android.exoplayer2.Format):int type: INTERFACE \l0x004f: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l  (r4 I:int)\l  (r10 I:java.lang.Exception A[D('e' java.lang.Exception)])\l com.google.android.exoplayer2.source.chunk.ChunkedTrackBlacklistUtil.maybeBlacklistTrack(com.google.android.exoplayer2.trackselection.TrackSelection, int, java.lang.Exception):boolean type: STATIC \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.onChunkLoadError((r7 'this' I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource A[IMMUTABLE_TYPE, THIS]), (r8 I:com.google.android.exoplayer2.source.chunk.Chunk A[D('chunk' com.google.android.exoplayer2.source.chunk.Chunk), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('cancelable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.Exception A[D('e' java.lang.Exception), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0038\-0x0045: r0 'lastAvailableSegmentNum' int\l  0x0028\-0x0045: r1 'representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder\l  0x002c\-0x0045: r2 'segmentCount' int\l  ?\-0x0053: r8 'chunk' com.google.android.exoplayer2.source.chunk.Chunk\l  ?\-0x0053: r9 'cancelable' boolean\l  ?\-0x0053: r10 'e' java.lang.Exception\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_3;
Node_18 -> Node_3;
}

