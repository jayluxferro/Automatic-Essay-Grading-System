digraph "CFG forcom.google.android.exoplayer2.source.dash.DefaultDashChunkSource.newMediaChunk(Lcom\/google\/android\/exoplayer2\/source\/dash\/DefaultDashChunkSource$RepresentationHolder;Lcom\/google\/android\/exoplayer2\/upstream\/DataSource;Lcom\/google\/android\/exoplayer2\/Format;ILjava\/lang\/Object;II)Lcom\/google\/android\/exoplayer2\/source\/chunk\/Chunk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0002: IGET  (r0 I:com.google.android.exoplayer2.source.dash.manifest.Representation) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.representation com.google.android.exoplayer2.source.dash.manifest.Representation \l0x0004: MOVE  (r25 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0008: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSegmentNum' int)])\l \l0x000a: INVOKE  (r12 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentStartTimeUs(int):long type: VIRTUAL \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0010: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSegmentNum' int)])\l \l0x0012: INVOKE  (r26 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentUrl(int):com.google.android.exoplayer2.source.dash.manifest.RangedUri type: VIRTUAL \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation)])\l \l0x0018: IGET  (r0 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.Representation)\l com.google.android.exoplayer2.source.dash.manifest.Representation.baseUrl java.lang.String \l0x001a: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x001e: IGET  (r5 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x005c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0024: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSegmentNum' int)])\l \l0x0026: INVOKE  (r14 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l  (r1 I:int)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentEndTimeUs(int):long type: VIRTUAL \l0x002a: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.upstream.DataSpec) =  com.google.android.exoplayer2.upstream.DataSpec \l0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x002e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x0030: INVOKE  (r5 I:android.net.Uri) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.resolveUri(java.lang.String):android.net.Uri type: VIRTUAL \l0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0036: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.start long \l0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x003a: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.length long \l0x003c: INVOKE  (r10 I:java.lang.String) = \l  (r25 I:com.google.android.exoplayer2.source.dash.manifest.Representation A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation)])\l com.google.android.exoplayer2.source.dash.manifest.Representation.getCacheKey():java.lang.String type: VIRTUAL \l0x0040: INVOKE  \l  (r4 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r5 I:android.net.Uri)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.upstream.DataSpec.\<init\>(android.net.Uri, long, long, java.lang.String):void type: DIRECT \l0x0043: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk) =  com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk \l0x0045: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0047: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.trackType int \l0x0049: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l \l0x004d: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x004e: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('trackFormat' com.google.android.exoplayer2.Format)])\l \l0x0050: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackSelectionReason' int)])\l \l0x0052: MOVE  (r11 I:?[OBJECT, ARRAY]) = \l  (r31 I:?[OBJECT, ARRAY] A[D('trackSelectionData' java.lang.Object)])\l \l0x0054: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSegmentNum' int)])\l \l0x0056: MOVE  (r18 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('trackFormat' com.google.android.exoplayer2.Format)])\l \l0x0058: INVOKE  \l  (r6 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l  (r7 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r8 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r9 I:com.google.android.exoplayer2.Format)\l  (r10 I:int)\l  (r11 I:java.lang.Object)\l  (r12 I:long A[D('startTimeUs' long)])\l  (r14 I:long A[D('endTimeUs' long)])\l  (r16 I:int)\l  (r17 I:int)\l  (r18 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.\<init\>(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.upstream.DataSpec, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long, int, int, com.google.android.exoplayer2.Format):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x005b|0x005b: RETURN  (r6 I:com.google.android.exoplayer2.source.chunk.Chunk) \l}"];
Node_4 [shape=record,label="{4\:\ 0x005c|0x005c: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x005e: CONST  (r22 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0060|0x0060: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0062: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxSegmentCount' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0064|0x0064: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x007a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0066|0x0066: ARITH  (r5 I:int) = (r32 I:int A[D('firstSegmentNum' int)]) + (r22 I:int A[D('i' int)]) \l0x0068: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x006a: INVOKE  (r24 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l  (r5 I:int)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentUrl(int):com.google.android.exoplayer2.source.dash.manifest.RangedUri type: VIRTUAL \l0x006e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0070: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('nextSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0072: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x0074: INVOKE  (r23 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l  (r1 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l  (r2 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.attemptMerge(com.google.android.exoplayer2.source.dash.manifest.RangedUri, java.lang.String):com.google.android.exoplayer2.source.dash.manifest.RangedUri type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0078|0x0078: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mergedSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x00bb \l}"];
Node_9 [shape=record,label="{9\:\ 0x007a|0x007a: ARITH  (r5 I:int) = (r32 I:int A[D('firstSegmentNum' int)]) + (r17 I:int A[D('segmentCount' int)]) \l0x007c: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x007e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x0080: INVOKE  (r14 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l  (r5 I:int)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.getSegmentEndTimeUs(int):long type: VIRTUAL \l0x0084: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.upstream.DataSpec) =  com.google.android.exoplayer2.upstream.DataSpec \l0x0086: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0088: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('baseUrl' java.lang.String)]) \l0x008a: INVOKE  (r5 I:android.net.Uri) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.resolveUri(java.lang.String):android.net.Uri type: VIRTUAL \l0x008e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0090: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.start long \l0x0092: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x0094: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.RangedUri)\l com.google.android.exoplayer2.source.dash.manifest.RangedUri.length long \l0x0096: INVOKE  (r10 I:java.lang.String) = \l  (r25 I:com.google.android.exoplayer2.source.dash.manifest.Representation A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation)])\l com.google.android.exoplayer2.source.dash.manifest.Representation.getCacheKey():java.lang.String type: VIRTUAL \l0x009a: INVOKE  \l  (r4 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r5 I:android.net.Uri)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.upstream.DataSpec.\<init\>(android.net.Uri, long, long, java.lang.String):void type: DIRECT \l0x009d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('representation' com.google.android.exoplayer2.source.dash.manifest.Representation)])\l \l0x009f: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.dash.manifest.Representation)\l com.google.android.exoplayer2.source.dash.manifest.Representation.presentationTimeOffsetUs long \l0x00a1: NEG  (r0 I:long) = (r6 I:long) \l0x00a2: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x00a4: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk) =  com.google.android.exoplayer2.source.chunk.ContainerMediaChunk \l0x00a6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)])\l \l0x00a8: IGET  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper) = \l  (r0 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder)\l com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.RepresentationHolder.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper \l0x00aa: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00ac: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l \l0x00ae: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x00af: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('trackFormat' com.google.android.exoplayer2.Format)])\l \l0x00b1: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackSelectionReason' int)])\l \l0x00b3: MOVE  (r11 I:?[OBJECT, ARRAY]) = \l  (r31 I:?[OBJECT, ARRAY] A[D('trackSelectionData' java.lang.Object)])\l \l0x00b5: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSegmentNum' int)])\l \l0x00b7: INVOKE  \l  (r6 I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk)\l  (r7 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r8 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r9 I:com.google.android.exoplayer2.Format)\l  (r10 I:int)\l  (r11 I:java.lang.Object)\l  (r12 I:long A[D('startTimeUs' long)])\l  (r14 I:long A[D('endTimeUs' long)])\l  (r16 I:int)\l  (r17 I:int A[D('segmentCount' int)])\l  (r18 I:long A[D('sampleOffsetUs' long)])\l  (r20 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ContainerMediaChunk.\<init\>(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.upstream.DataSpec, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long, int, int, long, com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x00bb|0x00bb: MOVE  (r26 I:?[OBJECT, ARRAY] A[D('segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('mergedSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri)])\l \l0x00bd: ARITH  (r17 I:int A[D('segmentCount' int)]) = (r17 I:int A[D('segmentCount' int)]) + (1 int) \l0x00bf: ARITH  (r22 I:int A[D('i' int)]) = (r22 I:int A[D('i' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.source.chunk.Chunk com.google.android.exoplayer2.source.dash.DefaultDashChunkSource.newMediaChunk((r27 I:com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder A[D('representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:com.google.android.exoplayer2.Format A[D('trackFormat' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:int A[D('trackSelectionReason' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:java.lang.Object A[D('trackSelectionData' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:int A[D('firstSegmentNum' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:int A[D('maxSegmentCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0043\-0x005c: r4 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\l  0x002a\-0x005c: r14 'endTimeUs' long\l  0x0078\-0x007a: r23 'mergedSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri\l  0x006e\-0x007a: r24 'nextSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri\l  0x009d\-0x00bb: r4 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\l  0x0084\-0x00bb: r14 'endTimeUs' long\l  0x00a4\-0x00bb: r18 'sampleOffsetUs' long\l  0x000e\-0x00c1: r12 'startTimeUs' long\l  0x005e\-0x00c1: r17 'segmentCount' int\l  0x001c\-0x00c1: r21 'baseUrl' java.lang.String\l  0x0060\-0x00c1: r22 'i' int\l  0x00bb\-0x00c1: r23 'mergedSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri\l  0x00bb\-0x00c1: r24 'nextSegmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri\l  0x0006\-0x00c1: r25 'representation' com.google.android.exoplayer2.source.dash.manifest.Representation\l  0x0016\-0x00c1: r26 'segmentUri' com.google.android.exoplayer2.source.dash.manifest.RangedUri\l  ?\-0x00c1: r27 'representationHolder' com.google.android.exoplayer2.source.dash.DefaultDashChunkSource$RepresentationHolder\l  ?\-0x00c1: r28 'dataSource' com.google.android.exoplayer2.upstream.DataSource\l  ?\-0x00c1: r29 'trackFormat' com.google.android.exoplayer2.Format\l  ?\-0x00c1: r30 'trackSelectionReason' int\l  ?\-0x00c1: r31 'trackSelectionData' java.lang.Object\l  ?\-0x00c1: r32 'firstSegmentNum' int\l  ?\-0x00c1: r33 'maxSegmentCount' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
Node_10 -> Node_5;
}

