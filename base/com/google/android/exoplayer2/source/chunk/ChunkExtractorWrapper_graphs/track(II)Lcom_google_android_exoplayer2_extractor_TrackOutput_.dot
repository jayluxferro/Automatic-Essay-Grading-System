digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.track(II)Lcom\/google\/android\/exoplayer2\/extractor\/TrackOutput;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput r0 = r2.bindingTrackOutputs.get(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0 != null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r2.sampleFormats != null) goto L_0x0024\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|r1 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|PHI: r1 \l  PHI: (r1v3 boolean) = (r1v2 boolean), (r1v7 boolean) binds: [B:6:0x0024, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r1)\lcom.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput r0 = new com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.BindingTrackOutput(r3, r4, r2.manifestFormat)\lr0.bind(r2.trackOutputProvider)\lr2.bindingTrackOutputs.put(r3, r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|r1 = false\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.extractor.TrackOutput com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.track((r2v0 'this' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[IMMUTABLE_TYPE, THIS]), (r3v0 'id' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'type' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_6 -> Node_5;
}

