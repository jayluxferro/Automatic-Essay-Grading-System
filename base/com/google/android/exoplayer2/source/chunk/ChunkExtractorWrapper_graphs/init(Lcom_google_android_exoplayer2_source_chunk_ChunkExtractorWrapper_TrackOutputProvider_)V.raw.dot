digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.init(Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkExtractorWrapper$TrackOutputProvider;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0002: IPUT  \l  (r5 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider A[D('trackOutputProvider' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider)])\l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.trackOutputProvider com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider \l0x0004: IGET  (r1 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.extractorInitialized boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r1 I:com.google.android.exoplayer2.extractor.Extractor) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.extractor com.google.android.exoplayer2.extractor.Extractor \l0x000a: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.Extractor)\l  (r4 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l com.google.android.exoplayer2.extractor.Extractor.init(com.google.android.exoplayer2.extractor.ExtractorOutput):void type: INTERFACE \l0x000d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.extractorInitialized boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r1 I:com.google.android.exoplayer2.extractor.Extractor) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.extractor com.google.android.exoplayer2.extractor.Extractor \l0x0013: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.Extractor)\l  (r2 I:long)\l  (r2 I:long)\l com.google.android.exoplayer2.extractor.Extractor.seek(long, long):void type: INTERFACE \l0x0016: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r1 I:android.util.SparseArray\<com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput\>) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.bindingTrackOutputs android.util.SparseArray \l0x0019: INVOKE  (r1 I:int) = (r1 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IGET  (r1 I:android.util.SparseArray\<com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput\>) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.bindingTrackOutputs android.util.SparseArray \l0x0021: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.util.SparseArray), (r0 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0025: CHECK_CAST  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput) = (com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput) (r1 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput)\l  (r5 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider A[D('trackOutputProvider' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider)])\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.BindingTrackOutput.bind(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider):void type: VIRTUAL \l0x002a: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.init((r4 'this' I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider A[D('trackOutputProvider' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x002c: r0 'i' int\l  ?\-0x002c: r5 'trackOutputProvider' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_5;
}

