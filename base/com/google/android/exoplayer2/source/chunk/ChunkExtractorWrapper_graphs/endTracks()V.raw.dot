digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.endTracks()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:android.util.SparseArray\<com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput\>) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.bindingTrackOutputs android.util.SparseArray \l0x0002: INVOKE  (r2 I:int) = (r2 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x0006: NEW_ARRAY  (r1 I:com.google.android.exoplayer2.Format[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.Format[] \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IGET  (r2 I:android.util.SparseArray\<com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput\>) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.bindingTrackOutputs android.util.SparseArray \l0x000b: INVOKE  (r2 I:int) = (r2 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x0020 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r2 I:android.util.SparseArray\<com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput\>) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.bindingTrackOutputs android.util.SparseArray \l0x0013: INVOKE  (r2 I:java.lang.Object) = (r2 I:android.util.SparseArray), (r0 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0017: CHECK_CAST  (r2 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput) = (com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput) (r2 I:?[OBJECT, ARRAY]) \l0x0019: IGET  (r2 I:com.google.android.exoplayer2.Format) = \l  (r2 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$BindingTrackOutput)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.BindingTrackOutput.sampleFormat com.google.android.exoplayer2.Format \l0x001b: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('sampleFormats' com.google.android.exoplayer2.Format[])])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x001d: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IPUT  \l  (r1 I:com.google.android.exoplayer2.Format[] A[D('sampleFormats' com.google.android.exoplayer2.Format[])])\l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.sampleFormats com.google.android.exoplayer2.Format[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.endTracks((r3 'this' I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0009\-0x0022: r0 'i' int\l  0x0008\-0x0022: r1 'sampleFormats' com.google.android.exoplayer2.Format[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

