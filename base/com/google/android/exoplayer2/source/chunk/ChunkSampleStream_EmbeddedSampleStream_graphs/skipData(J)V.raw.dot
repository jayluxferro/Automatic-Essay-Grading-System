digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.skipData(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.this$0 com.google.android.exoplayer2.source.chunk.ChunkSampleStream \l0x0002: IGET  (r0 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.sampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0008: INVOKE  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.getLargestQueuedTimestampUs():long type: VIRTUAL \l0x000c: CMP_L  (r0 I:int) = (r4 I:long A[D('positionUs' long)]), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.sampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0012: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.skipAll():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.sampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0018: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r4 I:long A[D('positionUs' long)])\l  (r1 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.skipToKeyframeBefore(long, boolean):boolean type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.skipData((r3 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0000\-0x001c: r3 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream\l  ?\-0x001c: r4 'positionUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

