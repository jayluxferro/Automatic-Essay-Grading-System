digraph "CFG forcom.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.load()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r3 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int \l0x0008: INVOKE  (r8 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r4 I:int)\l com.google.android.exoplayer2.util.Util.getRemainderDataSpec(com.google.android.exoplayer2.upstream.DataSpec, int):com.google.android.exoplayer2.upstream.DataSpec type: STATIC \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|SYNTHETIC\lSplitter:B:1:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000e\l|0x000e: IGET  (r3 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x0080 \}, TRY_ENTER]\l0x0010: INVOKE  (r6 I:long) = \l  (r3 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r8 I:com.google.android.exoplayer2.upstream.DataSpec A[D('loadDataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l com.google.android.exoplayer2.upstream.DataSource.open(com.google.android.exoplayer2.upstream.DataSpec):long type: INTERFACE A[Catch:\{ all \-\> 0x0080 \}]\l0x0014: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0016: CMP_L  (r3 I:int) = (r6 I:long A[D('length' long)]), (r4 I:long) A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0020 A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x001c: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int A[Catch:\{ all \-\> 0x0080 \}]\l0x001e: CAST  (r4 I:long) = (long) (r3 I:int) A[Catch:\{ all \-\> 0x0080 \}]\l0x001f: ARITH  (r6 I:long A[D('length' long)]) = (r6 I:long A[D('length' long)]) + (r4 I:long) A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput) =  com.google.android.exoplayer2.extractor.DefaultExtractorInput A[Catch:\{ all \-\> 0x0080 \}]\l0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0024: IGET  (r3 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x0080 \}]\l0x0026: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0028: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int A[Catch:\{ all \-\> 0x0080 \}]\l0x002a: CAST  (r4 I:long) = (long) (r4 I:int) A[Catch:\{ all \-\> 0x0080 \}]\l0x002b: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r3 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r4 I:long)\l  (r6 I:long A[D('length' long)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.\<init\>(com.google.android.exoplayer2.upstream.DataSource, long, long):void type: DIRECT A[Catch:\{ all \-\> 0x0080 \}]\l0x002e: INVOKE  (r16 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput) = \l  (r18 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.getOutput():com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0032: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('output' com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x0036: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l  (r4 I:long)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.setSampleOffsetUs(long):void type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0039: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x003a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x003c: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.trackType int A[Catch:\{ all \-\> 0x0080 \}]\l0x003e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('output' com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x0040: INVOKE  (r9 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l  (r3 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.track(int, int):com.google.android.exoplayer2.extractor.TrackOutput type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0044: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0046: IGET  (r3 I:com.google.android.exoplayer2.Format) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.sampleFormat com.google.android.exoplayer2.Format A[Catch:\{ all \-\> 0x0080 \}]\l0x0048: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r3 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE A[Catch:\{ all \-\> 0x0080 \}]\l0x004b: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x004d|0x004d: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0080 \}]\l0x004e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)])\l A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0050|0x0050: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0065 A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0052|0x0052: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0054: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int A[Catch:\{ all \-\> 0x0080 \}]\l0x0056: ARITH  (r3 I:int) = (r3 I:int) + (r17 I:int A[D('result' int)]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x005a: IPUT  \l  (r3 I:int)\l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int A[Catch:\{ all \-\> 0x0080 \}]\l0x005c: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x005f: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0060: INVOKE  (r17 I:int A[D('result' int)]) = \l  (r9 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('extractorInput' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r3 I:int)\l  (r4 I:boolean)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.extractor.ExtractorInput, int, boolean):int type: INTERFACE A[Catch:\{ all \-\> 0x0080 \}]\l0x0064: GOTO  \-\> 0x004d A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0065|0x0065: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x0067: IGET  (r13 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.bytesLoaded int A[Catch:\{ all \-\> 0x0080 \}]\l0x0069: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}]\l0x006b: IGET  (r10 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.startTimeUs long A[Catch:\{ all \-\> 0x0080 \}]\l0x006d: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0080 \}]\l0x006e: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x006f: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0080 \}]\l0x0070: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r10 I:long)\l  (r12 I:int)\l  (r13 I:int A[D('sampleSize' int)])\l  (r14 I:int)\l  (r15 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE A[Catch:\{ all \-\> 0x0080 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0073|0x0073: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0075: IGET  (r3 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x0077: INVOKE  (r3 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l0x007a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x007b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x007d: IPUT  \l  (r3 I:boolean)\l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.loadCompleted boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x007f|0x007f: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0080|ExcHandler: all null\lSplitter:B:1:0x000e\l|0x0080: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0081|0x0081: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0083: IGET  (r4 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk)\l com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x0085: INVOKE  (r4 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|0x0088: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk.load((r18 'this' I:com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x002e\-0x0080: r2 'extractorInput' com.google.android.exoplayer2.extractor.ExtractorInput\l  0x0014\-0x0080: r6 'length' long\l  0x0044\-0x0080: r9 'trackOutput' com.google.android.exoplayer2.extractor.TrackOutput\l  0x0069\-0x0080: r13 'sampleSize' int\l  0x0032\-0x0080: r16 'output' com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput\l  0x004d\-0x0080: r17 'result' int\l  0x000c\-0x0088: r8 'loadDataSpec' com.google.android.exoplayer2.upstream.DataSpec\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

