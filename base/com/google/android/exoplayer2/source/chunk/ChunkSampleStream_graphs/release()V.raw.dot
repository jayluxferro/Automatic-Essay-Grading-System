digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.release()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0002: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.disable():void type: VIRTUAL \l0x0005: IGET  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0007: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x000d: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[D('embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.disable():void type: VIRTUAL \l0x0010: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IGET  (r1 I:com.google.android.exoplayer2.upstream.Loader) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x0015: INVOKE  (r1 I:com.google.android.exoplayer2.upstream.Loader) com.google.android.exoplayer2.upstream.Loader.release():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.release((r4 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x000d\-0x0013: r0 'embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput\l  0x0000\-0x0018: r4 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

