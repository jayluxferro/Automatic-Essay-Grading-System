digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.\<init\>(I[ILcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSource;Lcom\/google\/android\/exoplayer2\/source\/SequenceableLoader$Callback;Lcom\/google\/android\/exoplayer2\/upstream\/Allocator;JILcom\/google\/android\/exoplayer2\/source\/AdaptiveMediaSourceEventListener$EventDispatcher;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r8 I:java.lang.Object A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r9 I:int A[D('primaryTrackType' int)])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primaryTrackType int \l0x0005: IPUT  \l  (r10 I:int[] A[D('embeddedTrackTypes' int[])])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedTrackTypes int[] \l0x0007: IPUT  \l  (r11 I:T A[D('chunkSource' T)])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.chunkSource com.google.android.exoplayer2.source.chunk.ChunkSource \l0x0009: IPUT  \l  (r12 I:com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\> A[D('callback' com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\>)])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.callback com.google.android.exoplayer2.source.SequenceableLoader$Callback \l0x000b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('eventDispatcher' com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher)])\l \l0x000d: IPUT  \l  (r0 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.eventDispatcher com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher \l0x000f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minLoadableRetryCount' int)])\l \l0x0011: IPUT  \l  (r0 I:int)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.minLoadableRetryCount int \l0x0013: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.upstream.Loader) =  com.google.android.exoplayer2.upstream.Loader \l0x0015: CONST_STR  (r7 I:java.lang.String) =  \"Loader:ChunkSampleStream\" \l0x0017: INVOKE  \l  (r6 I:com.google.android.exoplayer2.upstream.Loader)\l  (r7 I:java.lang.String)\l com.google.android.exoplayer2.upstream.Loader.\<init\>(java.lang.String):void type: DIRECT \l0x001a: IPUT  \l  (r6 I:com.google.android.exoplayer2.upstream.Loader)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x001c: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkHolder) =  com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x001e: INVOKE  \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l com.google.android.exoplayer2.source.chunk.ChunkHolder.\<init\>():void type: DIRECT \l0x0021: IPUT  \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.nextChunkHolder com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x0023: NEW_INSTANCE  (r6 I:java.util.LinkedList) =  java.util.LinkedList \l0x0025: INVOKE  (r6 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x0028: IPUT  \l  (r6 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x002a: IGET  (r6 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x002c: INVOKE  (r6 I:java.util.List) = (r6 I:java.util.List) java.util.Collections.unmodifiableList(java.util.List):java.util.List type: STATIC \l0x0030: IPUT  \l  (r6 I:java.util.List\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.readOnlyMediaChunks java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|0x0032: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddedTrackTypes' int[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x006d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0034|0x0034: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0035|0x0035: NEW_ARRAY  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = (r1 I:int A[D('embeddedTrackCount' int), IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0037: IPUT  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0039: NEW_ARRAY  (r6 I:boolean[]) = (r1 I:int A[D('embeddedTrackCount' int), IMMUTABLE_TYPE]) type: boolean[] \l0x003b: IPUT  \l  (r6 I:boolean[])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedTracksSelected boolean[] \l0x003d: ARITH  (r6 I:int) = (r1 I:int A[D('embeddedTrackCount' int)]) + (1 int) \l0x003f: NEW_ARRAY  (r5 I:int[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0041: ARITH  (r6 I:int) = (r1 I:int A[D('embeddedTrackCount' int)]) + (1 int) \l0x0043: NEW_ARRAY  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0045: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) =  com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0047: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r13 I:com.google.android.exoplayer2.upstream.Allocator A[D('allocator' com.google.android.exoplayer2.upstream.Allocator)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.\<init\>(com.google.android.exoplayer2.upstream.Allocator):void type: DIRECT \l0x004a: IPUT  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x004c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004d: APUT  \l  (r5 I:?[int, float][] A[D('trackTypes' int[])])\l  (r6 I:?[int, short, byte, char])\l  (r9 I:?[int, float] A[D('primaryTrackType' int)])\l \l0x004f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0050: IGET  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0052: APUT  \l  (r3 I:?[OBJECT, ARRAY][] A[D('sampleQueues' com.google.android.exoplayer2.extractor.DefaultTrackOutput[])])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x0054: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0055|0x0055: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('embeddedTrackCount' int)])  \-\> B:7:0x006f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0057|0x0057: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) =  com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0059: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r13 I:com.google.android.exoplayer2.upstream.Allocator A[D('allocator' com.google.android.exoplayer2.upstream.Allocator)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.\<init\>(com.google.android.exoplayer2.upstream.Allocator):void type: DIRECT \l0x005c: IGET  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x005e: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r4 I:?[OBJECT, ARRAY] A[D('trackOutput' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l \l0x0060: ARITH  (r6 I:int) = (r2 I:int A[D('i' int)]) + (1 int) \l0x0062: APUT  \l  (r3 I:?[OBJECT, ARRAY][] A[D('sampleQueues' com.google.android.exoplayer2.extractor.DefaultTrackOutput[])])\l  (r6 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY] A[D('trackOutput' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l \l0x0064: ARITH  (r6 I:int) = (r2 I:int A[D('i' int)]) + (1 int) \l0x0066: AGET  (r7 I:?[int, float]) = \l  (r10 I:?[int, float][] A[D('embeddedTrackTypes' int[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0068: APUT  \l  (r5 I:?[int, float][] A[D('trackTypes' int[])])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[int, float])\l \l0x006a: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x006d|0x006d: ARRAY_LENGTH  (r1 I:int A[D('embeddedTrackCount' int)]) = (r10 I:?[] A[D('embeddedTrackTypes' int[])]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x006f|0x006f: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput) =  com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput \l0x0071: INVOKE  \l  (r6 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l  (r5 I:int[] A[D('trackTypes' int[])])\l  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[] A[D('sampleQueues' com.google.android.exoplayer2.extractor.DefaultTrackOutput[])])\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.\<init\>(int[], com.google.android.exoplayer2.extractor.DefaultTrackOutput[]):void type: DIRECT \l0x0074: IPUT  \l  (r6 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunkOutput com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput \l0x0076: IPUT  \l  (r14 I:long A[D('positionUs' long)])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l0x0078: IPUT  \l  (r14 I:long A[D('positionUs' long)])\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.lastSeekPositionUs long \l}"];
Node_8 [shape=record,label="{8\:\ 0x007a|0x007a: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.\<init\>((r8 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('primaryTrackType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int[] A[D('embeddedTrackTypes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:com.google.android.exoplayer2.upstream.Allocator A[D('allocator' com.google.android.exoplayer2.upstream.Allocator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('minLoadableRetryCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher A[D('eventDispatcher' com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0035\-0x006d: r1 'embeddedTrackCount' int\l  0x0055\-0x006d: r2 'i' int\l  0x0045\-0x006d: r3 'sampleQueues' com.google.android.exoplayer2.extractor.DefaultTrackOutput[]\l  0x005c\-0x006d: r4 'trackOutput' com.google.android.exoplayer2.extractor.DefaultTrackOutput\l  0x0041\-0x006d: r5 'trackTypes' int[]\l  0x006f\-0x007a: r1 'embeddedTrackCount' int\l  0x006f\-0x007a: r2 'i' int\l  0x006f\-0x007a: r3 'sampleQueues' com.google.android.exoplayer2.extractor.DefaultTrackOutput[]\l  0x006f\-0x007a: r5 'trackTypes' int[]\l  0x0000\-0x007a: r8 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x007a: r9 'primaryTrackType' int\l  ?\-0x007a: r10 'embeddedTrackTypes' int[]\l  0x0000\-0x007a: r11 'chunkSource' T\l  0x0000\-0x007a: r12 'callback' com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\>\l  ?\-0x007a: r13 'allocator' com.google.android.exoplayer2.upstream.Allocator\l  ?\-0x007a: r14 'positionUs' long\l  ?\-0x007a: r16 'minLoadableRetryCount' int\l  ?\-0x007a: r17 'eventDispatcher' com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I[ITT;, Lcom\/google\/android\/exoplayer2\/source\/SequenceableLoader$Callback, \<, Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSampleStream, \<TT;\>;\>;, Lcom\/google\/android\/exoplayer2\/upstream\/Allocator;, JI, Lcom\/google\/android\/exoplayer2\/source\/AdaptiveMediaSourceEventListener$EventDispatcher;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_4;
Node_6 -> Node_3;
Node_7 -> Node_8;
}

