digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.readData(Lcom\/google\/android\/exoplayer2\/FormatHolder;Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.isPendingReset():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (\-3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x000a: INVOKE  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.getReadIndex():int type: VIRTUAL \l0x000e: INVOKE  \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l  (r0 I:int)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.discardDownstreamMediaChunks(int):void type: DIRECT \l0x0011: IGET  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0013: IGET  (r5 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l0x0015: IGET  (r6 I:long) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.lastSeekPositionUs long \l0x0017: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r9 I:?[OBJECT, ARRAY] A[D('formatHolder' com.google.android.exoplayer2.FormatHolder)])\l \l0x0018: MOVE  (r3 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x0019: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('formatRequired' boolean)])\l \l0x001a: INVOKE  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r2 I:com.google.android.exoplayer2.FormatHolder)\l  (r3 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l  (r4 I:boolean)\l  (r5 I:boolean)\l  (r6 I:long)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(com.google.android.exoplayer2.FormatHolder, com.google.android.exoplayer2.decoder.DecoderInputBuffer, boolean, boolean, long):int type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.chunk.ChunkSampleStream.readData((r8 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.FormatHolder A[D('formatHolder' com.google.android.exoplayer2.FormatHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('formatRequired' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0000\-0x001e: r8 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x001e: r9 'formatHolder' com.google.android.exoplayer2.FormatHolder\l  ?\-0x001e: r10 'buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer\l  ?\-0x001e: r11 'formatRequired' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

