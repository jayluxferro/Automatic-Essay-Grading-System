digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.selectEmbeddedTrack(JI)Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSampleStream$EmbeddedSampleStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r1 I:int[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedTrackTypes int[] \l0x0009: AGET  (r1 I:?[int, float]) = \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)])  \-\> B:11:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r1 I:boolean[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedTracksSelected boolean[] \l0x000f: AGET  (r1 I:boolean A[IMMUTABLE_TYPE]) = \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0017: IGET  (r1 I:boolean[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedTracksSelected boolean[] \l0x0019: APUT  \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:boolean A[IMMUTABLE_TYPE])\l \l0x001b: IGET  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x001d: AGET  (r1 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x001f: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r4 I:long A[D('positionUs' long)])\l  (r2 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.skipToKeyframeBefore(long, boolean):boolean type: VIRTUAL \l0x0022: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream) =  com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream \l0x0024: IGET  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0026: AGET  (r2 I:?[OBJECT, ARRAY]) = \l  (r2 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0028: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream$EmbeddedSampleStream)\l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r0 I:int A[D('i' int)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.EmbeddedSampleStream.\<init\>(com.google.android.exoplayer2.source.chunk.ChunkSampleStream, com.google.android.exoplayer2.source.chunk.ChunkSampleStream, com.google.android.exoplayer2.extractor.DefaultTrackOutput, int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: RETURN  \l  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream)\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0033: INVOKE  (r1 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>$EmbeddedSampleStream com.google.android.exoplayer2.source.chunk.ChunkSampleStream.selectEmbeddedTrack((r3 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('trackType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0002\-0x0036: r0 'i' int\l  0x0000\-0x0036: r3 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x0036: r4 'positionUs' long\l  ?\-0x0036: r6 'trackType' int\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(JI), Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSampleStream, \<TT;\>.EmbeddedSampleStream;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_8;
Node_11 -> Node_1;
Node_12 -> Node_13;
}

