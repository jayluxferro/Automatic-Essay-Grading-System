digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadCanceled(Lcom\/google\/android\/exoplayer2\/source\/chunk\/Chunk;JJZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0002: IGET  (r3 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.eventDispatcher com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x0006: IGET  (r4 I:com.google.android.exoplayer2.upstream.DataSpec) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x000a: IGET  (r5 I:int) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.type int \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x000e: IGET  (r6 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primaryTrackType int \l0x0010: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x0012: IGET  (r7 I:com.google.android.exoplayer2.Format) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackFormat com.google.android.exoplayer2.Format \l0x0014: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x0016: IGET  (r8 I:int) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackSelectionReason int \l0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x001a: IGET  (r9 I:java.lang.Object) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackSelectionData java.lang.Object \l0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x001e: IGET  (r10 I:long) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.startTimeUs long \l0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x0022: IGET  (r12 I:long) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.endTimeUs long \l0x0024: INVOKE  (r18 I:long) = \l  (r21 I:com.google.android.exoplayer2.source.chunk.Chunk A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l com.google.android.exoplayer2.source.chunk.Chunk.bytesLoaded():long type: VIRTUAL \l0x0028: MOVE  (r14 I:?[long, double]) = (r22 I:?[long, double] A[D('elapsedRealtimeMs' long)]) \l0x002a: MOVE  (r16 I:?[long, double]) = (r24 I:?[long, double] A[D('loadDurationMs' long)]) \l0x002c: INVOKE  \l  (r3 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher)\l  (r4 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.Format)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l  (r10 I:long)\l  (r12 I:long)\l  (r14 I:long)\l  (r16 I:long)\l  (r18 I:long)\l com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener.EventDispatcher.loadCanceled(com.google.android.exoplayer2.upstream.DataSpec, int, int, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long, long, long, long):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x002f|0x002f: IF  (r26 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('released' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0053 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0031|0x0031: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0033: IGET  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0035: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0036: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r4 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.reset(boolean):void type: VIRTUAL \l0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x003b: IGET  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x003d: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x003e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x003f|0x003f: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:5:0x004a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|0x0041: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0043: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0044: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[D('embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l  (r6 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.reset(boolean):void type: VIRTUAL \l0x0047: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x004a|0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x004c: IGET  (r3 I:com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\>) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.callback com.google.android.exoplayer2.source.SequenceableLoader$Callback \l0x004e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0050: INVOKE  \l  (r3 I:com.google.android.exoplayer2.source.SequenceableLoader$Callback)\l  (r0 I:com.google.android.exoplayer2.source.SequenceableLoader)\l com.google.android.exoplayer2.source.SequenceableLoader.Callback.onContinueLoadingRequested(com.google.android.exoplayer2.source.SequenceableLoader):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0053|0x0053: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadCanceled((r20 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r21 I:com.google.android.exoplayer2.source.chunk.Chunk A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:long A[D('elapsedRealtimeMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[D('loadDurationMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:boolean A[D('released' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0043\-0x004a: r2 'embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput\l  0x0000\-0x0053: r20 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x0053: r21 'loadable' com.google.android.exoplayer2.source.chunk.Chunk\l  ?\-0x0053: r22 'elapsedRealtimeMs' long\l  ?\-0x0053: r24 'loadDurationMs' long\l  ?\-0x0053: r26 'released' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
}

