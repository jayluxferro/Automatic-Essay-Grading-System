digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadCanceled(Lcom\/google\/android\/exoplayer2\/source\/chunk\/Chunk;JJZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r14 = r22\lr16 = r24\lr20.eventDispatcher.loadCanceled(r21.dataSpec, r21.type, r20.primaryTrackType, r21.trackFormat, r21.trackSelectionReason, r21.trackSelectionData, r21.startTimeUs, r21.endTimeUs, r14, r16, r21.bytesLoaded())\l}"];
Node_1 [shape=record,label="{1\:\ 0x002f|if (r26 != false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0031|r20.primarySampleQueue.reset(true)\lcom.google.android.exoplayer2.extractor.DefaultTrackOutput[] r4 = r20.embeddedSampleQueues\lint r5 = r4.length\lr3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x003f|LOOP_START\lPHI: r3 \l  PHI: (r3v3 int) = (r3v2 int), (r3v5 int) binds: [B:2:0x0031, B:4:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x003f\-\>B:4:0x0041\l|if (r3 \>= r5) goto L_0x004a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|LOOP_END\lLOOP:0: B:3:0x003f\-\>B:4:0x0041\l|r4[r3].reset(true)\lint r3 = r3 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x004a|r20.callback.onContinueLoadingRequested(r20)\l}"];
Node_6 [shape=record,label="{6\:\ 0x004a|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadCanceled((r20v0 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r21v0 'loadable' com.google.android.exoplayer2.source.chunk.Chunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 'elapsedRealtimeMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'loadDurationMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 'released' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_5 -> Node_7;
Node_6 -> Node_5;
}

