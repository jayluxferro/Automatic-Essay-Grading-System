digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.continueLoading(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0002: IGET  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0008: IGET  (r3 I:com.google.android.exoplayer2.upstream.Loader) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x000a: INVOKE  (r3 I:boolean) = (r3 I:com.google.android.exoplayer2.upstream.Loader) com.google.android.exoplayer2.upstream.Loader.isLoading():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN  (r3 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0014: IGET  (r4 I:T) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.chunkSource com.google.android.exoplayer2.source.chunk.ChunkSource \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0018: IGET  (r3 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x001a: INVOKE  (r3 I:boolean) = (r3 I:java.util.LinkedList) java.util.LinkedList.isEmpty():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0023: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l0x0025: CONST  (r8 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x002a: CMP_L  (r5 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0030: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l0x0032: MOVE  (r20 I:?[long, double] A[D('positionUs' long)]) = (r0 I:?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0036: IGET  (r5 I:com.google.android.exoplayer2.source.chunk.ChunkHolder) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.nextChunkHolder com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x0038: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x003a: INVOKE  \l  (r4 I:com.google.android.exoplayer2.source.chunk.ChunkSource)\l  (r3 I:com.google.android.exoplayer2.source.chunk.MediaChunk)\l  (r0 I:long)\l  (r5 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l com.google.android.exoplayer2.source.chunk.ChunkSource.getNextChunk(com.google.android.exoplayer2.source.chunk.MediaChunk, long, com.google.android.exoplayer2.source.chunk.ChunkHolder):void type: INTERFACE \l0x003d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x003f: IGET  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.nextChunkHolder com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x0041: IGET  (r2 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l com.google.android.exoplayer2.source.chunk.ChunkHolder.endOfStream boolean \l0x0043: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0045: IGET  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.nextChunkHolder com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x0047: IGET  (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l com.google.android.exoplayer2.source.chunk.ChunkHolder.chunk com.google.android.exoplayer2.source.chunk.Chunk \l0x0049: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x004d: IGET  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.nextChunkHolder com.google.android.exoplayer2.source.chunk.ChunkHolder \l0x004f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.source.chunk.ChunkHolder)\l com.google.android.exoplayer2.source.chunk.ChunkHolder.clear():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endOfStream' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0066 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0055: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0057: IPUT  \l  (r3 I:boolean)\l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l0x0059: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|0x005b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x005d: IGET  (r3 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x005f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.LinkedList) java.util.LinkedList.getLast():java.lang.Object type: VIRTUAL \l0x0063: CHECK_CAST  (r3 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0066|0x0066: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0068|0x0068: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x006a|0x006a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x006c: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x006e: INVOKE  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l  (r1 I:com.google.android.exoplayer2.source.chunk.Chunk)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.isMediaChunk(com.google.android.exoplayer2.source.chunk.Chunk):boolean type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0072|0x0072: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0093 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: CONST  (r4 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0079: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x007b: IPUT  \l  (r4 I:long)\l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l0x007d: MOVE  (r17 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x007f: CHECK_CAST  (r17 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r17 I:?[OBJECT, ARRAY]) \l0x0081: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0083: IGET  (r3 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunkOutput com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput \l0x0085: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('mediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l \l0x0087: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk)\l  (r3 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.init(com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput):void type: VIRTUAL \l0x008a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x008c: IGET  (r3 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x008e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('mediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l \l0x0090: INVOKE  (r3 I:java.util.LinkedList), (r0 I:java.lang.Object) java.util.LinkedList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0093|0x0093: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0095: IGET  (r3 I:com.google.android.exoplayer2.upstream.Loader) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x0097: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x0099: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.minLoadableRetryCount int \l0x009b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x009d: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x009f: INVOKE  (r14 I:long) = \l  (r3 I:com.google.android.exoplayer2.upstream.Loader)\l  (r0 I:com.google.android.exoplayer2.upstream.Loader$Loadable)\l  (r1 I:com.google.android.exoplayer2.upstream.Loader$Callback)\l  (r4 I:int)\l com.google.android.exoplayer2.upstream.Loader.startLoading(com.google.android.exoplayer2.upstream.Loader$Loadable, com.google.android.exoplayer2.upstream.Loader$Callback, int):long type: VIRTUAL \l0x00a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x00a5: IGET  (r3 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.eventDispatcher com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher \l0x00a7: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00a9: IGET  (r4 I:com.google.android.exoplayer2.upstream.DataSpec) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x00ab: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00ad: IGET  (r5 I:int) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.type int \l0x00af: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l \l0x00b1: IGET  (r6 I:int) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream)\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primaryTrackType int \l0x00b3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00b5: IGET  (r7 I:com.google.android.exoplayer2.Format) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackFormat com.google.android.exoplayer2.Format \l0x00b7: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00b9: IGET  (r8 I:int) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackSelectionReason int \l0x00bb: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00bd: IGET  (r9 I:java.lang.Object) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.trackSelectionData java.lang.Object \l0x00bf: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00c1: IGET  (r10 I:long) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.startTimeUs long \l0x00c3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('loadable' com.google.android.exoplayer2.source.chunk.Chunk)])\l \l0x00c5: IGET  (r12 I:long) = (r0 I:com.google.android.exoplayer2.source.chunk.Chunk) com.google.android.exoplayer2.source.chunk.Chunk.endTimeUs long \l0x00c7: INVOKE  \l  (r3 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher)\l  (r4 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.Format)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l  (r10 I:long)\l  (r12 I:long)\l  (r14 I:long A[D('elapsedRealtimeMs' long)])\l com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener.EventDispatcher.loadStarted(com.google.android.exoplayer2.upstream.DataSpec, int, int, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long, long):void type: VIRTUAL \l0x00ca: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.source.chunk.ChunkSampleStream.continueLoading((r19 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r20 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0011: r20 'positionUs' long\l  0x0012\-0x0034: r20 'positionUs' long\l  0x0043\-0x005b: r2 'endOfStream' boolean\l  0x004b\-0x005b: r16 'loadable' com.google.android.exoplayer2.source.chunk.Chunk\l  0x005b\-0x0066: r20 'positionUs' long\l  0x0081\-0x0093: r17 'mediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk\l  0x0066\-0x00cc: r2 'endOfStream' boolean\l  0x00a3\-0x00cc: r14 'elapsedRealtimeMs' long\l  0x0066\-0x00cc: r16 'loadable' com.google.android.exoplayer2.source.chunk.Chunk\l  0x0000\-0x00cc: r19 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_5;
Node_15 -> Node_9;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_5;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_5;
}

