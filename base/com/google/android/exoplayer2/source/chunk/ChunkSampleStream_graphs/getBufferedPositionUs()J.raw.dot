digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.getBufferedPositionUs()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r4 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r4 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r4 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r4 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.isPendingReset():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r4 I:long) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r0 I:long) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.lastSeekPositionUs long \l0x0012: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0014: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.LinkedList) java.util.LinkedList.getLast():java.lang.Object type: VIRTUAL \l0x0018: CHECK_CAST  (r3 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r3 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r4 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('lastMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.isLoadCompleted():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r3 I:?[OBJECT, ARRAY] A[D('lastMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastCompletedMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0029 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r4 I:long) = \l  (r2 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('lastCompletedMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.endTimeUs long \l0x0025: INVOKE  (r0 I:long A[D('bufferedPositionUs' long)]) = (r0 I:long A[D('bufferedPositionUs' long)]), (r4 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IGET  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x002b: INVOKE  (r4 I:long) = \l  (r4 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.getLargestQueuedTimestampUs():long type: VIRTUAL \l0x002f: INVOKE  (r4 I:long) = (r0 I:long A[D('bufferedPositionUs' long)]), (r4 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0036: INVOKE  (r4 I:int) = (r4 I:java.util.LinkedList) java.util.LinkedList.size():int type: VIRTUAL \l0x003a: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: IF  (r4 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x003f: IGET  (r5 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r6 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0041: INVOKE  (r5 I:int) = (r5 I:java.util.LinkedList) java.util.LinkedList.size():int type: VIRTUAL \l0x0045: ARITH  (r5 I:int) = (r5 I:int) + (\-2 int) \l0x0047: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.LinkedList), (r5 I:int) java.util.LinkedList.get(int):java.lang.Object type: VIRTUAL \l0x004b: CHECK_CAST  (r4 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r4 I:?[OBJECT, ARRAY]) \l0x004d: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.source.chunk.ChunkSampleStream.getBufferedPositionUs((r6 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0021\-0x0034: r2 'lastCompletedMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk\l  0x0012\-0x0050: r0 'bufferedPositionUs' long\l  0x001a\-0x0050: r3 'lastMediaChunk' com.google.android.exoplayer2.source.chunk.BaseMediaChunk\l  0x0000\-0x0050: r6 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_3;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_10;
}

