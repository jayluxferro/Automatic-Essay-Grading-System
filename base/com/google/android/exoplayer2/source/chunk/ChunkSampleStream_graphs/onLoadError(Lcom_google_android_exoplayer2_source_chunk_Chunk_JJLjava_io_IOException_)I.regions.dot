digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadError(Lcom\/google\/android\/exoplayer2\/source\/chunk\/Chunk;JJLjava\/io\/IOException;)I" {
subgraph cluster_Region_2016485799 {
label = "R(5:0|7|(2:9|(4:11|14|(1:17)|(1:22)))|23|(2:(1:26)|(2:25|28)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r18 = r27.bytesLoaded()\lboolean boolean r23 = isMediaChunk(r27)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|PHI: r2 \l  PHI: (r2v0 'cancelable' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|boolean r21 = false\l}"];
subgraph cluster_IfRegion_1840847142 {
label = "IF [B:8:0x002a] THEN: R(2:9|(4:11|14|(1:17)|(1:22))) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002a|if (r26.chunkSource.onChunkLoadError(r27, !r23 \|\| r18 == 0 \|\| r26.mediaChunks.size() \> 1, r32) == true) goto L_0x002c\l}"];
subgraph cluster_Region_375262352 {
label = "R(2:9|(4:11|14|(1:17)|(1:22)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002c|r21 = true\l}"];
subgraph cluster_IfRegion_1942833211 {
label = "IF [B:10:0x002e] THEN: R(4:11|14|(1:17)|(1:22)) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002e|if (r23 == true) goto L_0x0030\l}"];
subgraph cluster_Region_1111916040 {
label = "R(4:11|14|(1:17)|(1:22))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0030|com.google.android.exoplayer2.source.chunk.BaseMediaChunk com.google.android.exoplayer2.source.chunk.BaseMediaChunk r24 = r26.mediaChunks.removeLast()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|PHI: r3 \l  PHI: (r3v8 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r24 == r27)\lr26.primarySampleQueue.discardUpstreamSamples(r24.getFirstSampleIndex(0))\lint r22 = 0\l}"];
subgraph cluster_LoopRegion_1024448397 {
label = "LOOP:0: (1:17)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x005b|if (r22 \< r26.embeddedSampleQueues.length) goto L_0x005d\l}"];
subgraph cluster_Region_1540582123 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x005d|LOOP_END\lLOOP:0: B:15:0x0054\-\>B:17:0x005d\l|r26.embeddedSampleQueues[r22].discardUpstreamSamples(r24.getFirstSampleIndex(r22 + 1))\lr22++\l}"];
}
}
subgraph cluster_IfRegion_558473754 {
label = "IF [B:21:0x007d] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x007d|if (r26.mediaChunks.isEmpty() == true) goto L_0x007f\l}"];
subgraph cluster_Region_1069345021 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x007f|r26.pendingResetPositionUs = r26.lastSeekPositionUs\l}"];
}
}
}
}
}
}
Node_23 [shape=record,label="{23\:\ 0x0087|PHI: r21 \l  PHI: (r21v1 'canceled' boolean) = (r21v0 'canceled' boolean), (r21v2 'canceled' boolean), (r21v2 'canceled' boolean), (r21v2 'canceled' boolean) binds: [B:8:0x002a, B:10:0x002e, B:21:0x007d, B:22:0x007f] A[DONT_GENERATE, DONT_INLINE]\l|r26.eventDispatcher.loadError(r27.dataSpec, r27.type, r26.primaryTrackType, r27.trackFormat, r27.trackSelectionReason, r27.trackSelectionData, r27.startTimeUs, r27.endTimeUs, r28, r30, r18, r32, r21)\l}"];
subgraph cluster_Region_168254133 {
label = "R(2:(1:26)|(2:25|28))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1729309669 {
label = "IF [B:24:0x00b4] THEN: R(1:26) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x00b4|if (r21 != true) goto L_0x00c1\l}"];
subgraph cluster_Region_706525439 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x00c1|SYNTHETIC\lRETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_1185515220 {
label = "R(2:25|28)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x00b6|r26.callback.onContinueLoadingRequested(r26)\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 2\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0008}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000a}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001b}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x003e}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0040}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0054|LOOP_START\lPHI: r22 \l  PHI: (r22v1 'i' int) = (r22v0 'i' int), (r22v2 'i' int) binds: [B:14:0x0041, B:17:0x005d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:15:0x0054\-\>B:17:0x005d\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0071}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0073}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0075}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0075|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.source.chunk.ChunkSampleStream.onLoadError((r26v0 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r27v0 'loadable' com.google.android.exoplayer2.source.chunk.Chunk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28v0 'elapsedRealtimeMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30v0 'loadDurationMs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32v0 'error' java.io.IOException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_23[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_23[style=dashed];
Node_11 -> Node_12;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_27[style=dashed];
Node_17 -> Node_15;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_28;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_18 -> Node_7;
Node_19 -> Node_14;
Node_20 -> Node_21;
Node_27 -> Node_20;
}

