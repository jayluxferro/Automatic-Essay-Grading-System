digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.\<init\>(I[ILcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSource;Lcom\/google\/android\/exoplayer2\/source\/SequenceableLoader$Callback;Lcom\/google\/android\/exoplayer2\/upstream\/Allocator;JILcom\/google\/android\/exoplayer2\/source\/AdaptiveMediaSourceEventListener$EventDispatcher;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r8.primaryTrackType = r9\lr8.embeddedTrackTypes = r10\lr8.chunkSource = r11\lr8.callback = r12\lr8.eventDispatcher = r17\lr8.minLoadableRetryCount = r16\lr8.loader = new com.google.android.exoplayer2.upstream.Loader(\"Loader:ChunkSampleStream\")\lr8.nextChunkHolder = new com.google.android.exoplayer2.source.chunk.ChunkHolder()\lr8.mediaChunks = new java.util.LinkedList\<\>()\lr8.readOnlyMediaChunks = java.util.Collections.unmodifiableList(r8.mediaChunks)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0032|if (r10 != null) goto L_0x006d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0034|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0035|PHI: r1 \l  PHI: (r1v1 'embeddedTrackCount' int) = (r1v0 'embeddedTrackCount' int), (r1v2 'embeddedTrackCount' int) binds: [B:6:0x006d, B:2:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|r8.embeddedSampleQueues = new com.google.android.exoplayer2.extractor.DefaultTrackOutput[r1]\lr8.embeddedTracksSelected = new boolean[r1]\lint[] r5 = new int[(r1 + 1)]\lcom.google.android.exoplayer2.extractor.DefaultTrackOutput[] r3 = new com.google.android.exoplayer2.extractor.DefaultTrackOutput[(r1 + 1)]\lr8.primarySampleQueue = new com.google.android.exoplayer2.extractor.DefaultTrackOutput(r13)\lr5[0] = r9\lr3[0] = r8.primarySampleQueue\lr2 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0055|LOOP_START\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:3:0x0035, B:5:0x0057] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0055\-\>B:5:0x0057\l|if (r2 \>= r1) goto L_0x006f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0057|LOOP_END\lLOOP:0: B:4:0x0055\-\>B:5:0x0057\l|com.google.android.exoplayer2.extractor.DefaultTrackOutput r4 = new com.google.android.exoplayer2.extractor.DefaultTrackOutput(r13)\lr8.embeddedSampleQueues[r2] = r4\lr3[r2 + 1] = r4\lr5[r2 + 1] = r10[r2]\lint r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x006d|int r1 = r10.length\l}"];
Node_7 [shape=record,label="{7\:\ 0x006f|r8.mediaChunkOutput = new com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput(r5, r3)\lr8.pendingResetPositionUs = r14\lr8.lastSeekPositionUs = r14\l}"];
Node_8 [shape=record,label="{8\:\ 0x007a|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x006f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.\<init\>((r8v0 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r9v0 'primaryTrackType' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'embeddedTrackTypes' int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'chunkSource' T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'callback' com.google.android.exoplayer2.source.SequenceableLoader$Callback\<com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'allocator' com.google.android.exoplayer2.upstream.Allocator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'positionUs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'minLoadableRetryCount' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'eventDispatcher' com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I[ITT;, Lcom\/google\/android\/exoplayer2\/source\/SequenceableLoader$Callback, \<, Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkSampleStream, \<TT;\>;\>;, Lcom\/google\/android\/exoplayer2\/upstream\/Allocator;, JI, Lcom\/google\/android\/exoplayer2\/source\/AdaptiveMediaSourceEventListener$EventDispatcher;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_4;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_7;
}

