digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.discardUpstreamMediaChunks(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0003: INVOKE  (r0 I:int) = (r0 I:java.util.LinkedList) java.util.LinkedList.size():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \> (r9 I:?[int, byte, short, char] A[D('queueLength' int)])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000d: IGET  (r0 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x000f: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.LinkedList) java.util.LinkedList.getLast():java.lang.Object type: VIRTUAL \l0x0013: CHECK_CAST  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r0 I:?[OBJECT, ARRAY]) \l0x0015: IGET  (r4 I:long) = \l  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.endTimeUs long \l0x0017: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r0 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x001a: INVOKE  (r0 I:int) = (r0 I:java.util.LinkedList) java.util.LinkedList.size():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char] A[D('queueLength' int)])  \-\> B:8:0x002d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IGET  (r0 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0022: INVOKE  (r7 I:java.lang.Object A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)]) = (r0 I:java.util.LinkedList) java.util.LinkedList.removeLast():java.lang.Object type: VIRTUAL \l0x0026: CHECK_CAST  (r7 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)]) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r7 I:?[OBJECT, ARRAY] A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)]) \l0x0028: IGET  (r2 I:long A[D('startTimeUs' long)]) = \l  (r7 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.startTimeUs long \l0x002a: IPUT  \l  (r1 I:boolean)\l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x002f: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l  (r1 I:int)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.getFirstSampleIndex(int):int type: VIRTUAL \l0x0033: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.discardUpstreamSamples(int):void type: VIRTUAL \l0x0036: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0039: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x004c \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x003e: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0040: ARITH  (r1 I:int) = (r6 I:int A[D('i' int)]) + (1 int) \l0x0042: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk A[D('removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk)])\l  (r1 I:int)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.getFirstSampleIndex(int):int type: VIRTUAL \l0x0046: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.discardUpstreamSamples(int):void type: VIRTUAL \l0x0049: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: IGET  (r0 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.eventDispatcher com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher \l0x004e: IGET  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primaryTrackType int \l0x0050: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener$EventDispatcher)\l  (r1 I:int)\l  (r2 I:long A[D('startTimeUs' long)])\l  (r4 I:long A[D('endTimeUs' long)])\l com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener.EventDispatcher.upstreamDiscarded(int, long, long):void type: VIRTUAL \l0x0053: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.source.chunk.ChunkSampleStream.discardUpstreamMediaChunks((r8 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('queueLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0018\-0x0026: r7 'removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk\l  0x000d\-0x0054: r2 'startTimeUs' long\l  0x0017\-0x0054: r4 'endTimeUs' long\l  0x0037\-0x0054: r6 'i' int\l  0x0028\-0x0054: r7 'removed' com.google.android.exoplayer2.source.chunk.BaseMediaChunk\l  0x0000\-0x0054: r8 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x0054: r9 'queueLength' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_3;
}

