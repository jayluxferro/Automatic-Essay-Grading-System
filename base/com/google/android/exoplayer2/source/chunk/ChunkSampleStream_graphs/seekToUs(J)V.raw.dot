digraph "CFG forcom.google.android.exoplayer2.source.chunk.ChunkSampleStream.seekToUs(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: IPUT  \l  (r10 I:long A[D('positionUs' long)])\l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.lastSeekPositionUs long \l0x0004: INVOKE  (r2 I:boolean) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.isPendingReset():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x000c: INVOKE  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.getNextLoadPositionUs():long type: VIRTUAL \l0x0010: CMP_L  (r2 I:int) = (r10 I:long A[D('positionUs' long)]), (r6 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r2 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r10 I:long A[D('positionUs' long)])\l  (r2 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.skipToKeyframeBefore(long, boolean):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seekInsideBuffer' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IGET  (r2 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0020: INVOKE  (r2 I:int) = (r2 I:java.util.LinkedList) java.util.LinkedList.size():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IGET  (r2 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0028: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.LinkedList), (r3 I:int) java.util.LinkedList.get(int):java.lang.Object type: VIRTUAL \l0x002c: CHECK_CAST  (r2 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk) = (com.google.android.exoplayer2.source.chunk.BaseMediaChunk) (r2 I:?[OBJECT, ARRAY]) \l0x002e: INVOKE  (r2 I:int) = \l  (r2 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk)\l  (r4 I:int)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.getFirstSampleIndex(int):int type: VIRTUAL \l0x0032: IGET  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x0034: INVOKE  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.getReadIndex():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r2 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: IGET  (r2 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x003c: INVOKE  (r2 I:java.util.LinkedList) java.util.LinkedList.removeFirst():java.lang.Object type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IGET  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x0046: ARRAY_LENGTH  (r5 I:int) = (r2 I:?[]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:22:0x0067 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x004b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[D('embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l  (r10 I:long A[D('positionUs' long)])\l  (r3 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.skipToKeyframeBefore(long, boolean):boolean type: VIRTUAL \l0x004e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: IPUT  \l  (r10 I:long A[D('positionUs' long)])\l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.pendingResetPositionUs long \l0x0053: IPUT  \l  (r4 I:boolean)\l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loadingFinished boolean \l0x0055: IGET  (r2 I:java.util.LinkedList\<com.google.android.exoplayer2.source.chunk.BaseMediaChunk\>) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.mediaChunks java.util.LinkedList \l0x0057: INVOKE  (r2 I:java.util.LinkedList) java.util.LinkedList.clear():void type: VIRTUAL \l0x005a: IGET  (r2 I:com.google.android.exoplayer2.upstream.Loader) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x005c: INVOKE  (r2 I:boolean) = (r2 I:com.google.android.exoplayer2.upstream.Loader) com.google.android.exoplayer2.upstream.Loader.isLoading():boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|0x0060: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0068 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: IGET  (r2 I:com.google.android.exoplayer2.upstream.Loader) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.loader com.google.android.exoplayer2.upstream.Loader \l0x0064: INVOKE  (r2 I:com.google.android.exoplayer2.upstream.Loader) com.google.android.exoplayer2.upstream.Loader.cancelLoading():void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0067|0x0067: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|0x0068: IGET  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.primarySampleQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput \l0x006a: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r3 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.reset(boolean):void type: VIRTUAL \l0x006d: IGET  (r2 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r9 I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[D('this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>)])\l com.google.android.exoplayer2.source.chunk.ChunkSampleStream.embeddedSampleQueues com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x006f: ARRAY_LENGTH  (r5 I:int) = (r2 I:?[]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0070|0x0070: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:22:0x0067 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0072|0x0072: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0074: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[D('embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput)])\l  (r3 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.reset(boolean):void type: VIRTUAL \l0x0077: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ChunkSampleStream.seekToUs((r9 'this' I:com.google.android.exoplayer2.source.chunk.ChunkSampleStream A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001c\-0x0040: r1 'seekInsideBuffer' boolean\l  0x004b\-0x0051: r0 'embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput\l  0x0074\-0x0079: r0 'embeddedSampleQueue' com.google.android.exoplayer2.extractor.DefaultTrackOutput\l  0x0044\-0x0079: r1 'seekInsideBuffer' boolean\l  0x0000\-0x0079: r9 'this' com.google.android.exoplayer2.source.chunk.ChunkSampleStream\<T\>\l  ?\-0x0079: r10 'positionUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_9;
Node_14 -> Node_5;
Node_15 -> Node_8;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_17;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_22;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_24;
}

