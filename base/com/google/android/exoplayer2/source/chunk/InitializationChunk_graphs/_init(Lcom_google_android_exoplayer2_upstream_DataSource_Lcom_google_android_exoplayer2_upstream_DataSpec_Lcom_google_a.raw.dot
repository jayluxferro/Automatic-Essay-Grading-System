digraph "CFG forcom.google.android.exoplayer2.source.chunk.InitializationChunk.\<init\>(Lcom\/google\/android\/exoplayer2\/upstream\/DataSource;Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;Lcom\/google\/android\/exoplayer2\/Format;ILjava\/lang\/Object;Lcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkExtractorWrapper;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0006: CONST  (r12 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x000b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r4 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY] A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l \l0x000d: MOVE  (r5 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l \l0x000f: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('trackFormat' com.google.android.exoplayer2.Format)])\l \l0x0011: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackSelectionReason' int)])\l \l0x0013: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('trackSelectionData' java.lang.Object)])\l \l0x0015: INVOKE  \l  (r3 I:com.google.android.exoplayer2.source.chunk.Chunk)\l  (r4 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r5 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.Format)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l  (r10 I:long)\l  (r12 I:long)\l com.google.android.exoplayer2.source.chunk.Chunk.\<init\>(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.upstream.DataSpec, int, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long):void type: DIRECT \l0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)])\l \l0x001a: IPUT  \l  (r0 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l  (r14 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.InitializationChunk.\<init\>((r14 'this' I:com.google.android.exoplayer2.source.chunk.InitializationChunk A[IMMUTABLE_TYPE, THIS]), (r15 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:com.google.android.exoplayer2.Format A[D('trackFormat' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('trackSelectionReason' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:java.lang.Object A[D('trackSelectionData' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x001c: r15 'dataSource' com.google.android.exoplayer2.upstream.DataSource\l  ?\-0x001c: r16 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\l  ?\-0x001c: r17 'trackFormat' com.google.android.exoplayer2.Format\l  ?\-0x001c: r18 'trackSelectionReason' int\l  ?\-0x001c: r19 'trackSelectionData' java.lang.Object\l  ?\-0x001c: r20 'extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

