digraph "CFG forcom.google.android.exoplayer2.source.chunk.InitializationChunk.load()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec \l0x0003: IGET  (r2 I:int) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.bytesLoaded int \l0x0005: INVOKE  (r7 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r1 I:com.google.android.exoplayer2.upstream.DataSpec)\l  (r2 I:int)\l com.google.android.exoplayer2.util.Util.getRemainderDataSpec(com.google.android.exoplayer2.upstream.DataSpec, int):com.google.android.exoplayer2.upstream.DataSpec type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|SYNTHETIC\lSplitter:B:1:0x0009\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0009\l|0x0009: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput) =  com.google.android.exoplayer2.extractor.DefaultExtractorInput A[Catch:\{ all \-\> 0x005b \}, TRY_ENTER]\l0x000b: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x005b \}]\l0x000d: IGET  (r2 I:long) = \l  (r7 I:com.google.android.exoplayer2.upstream.DataSpec A[D('loadDataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l com.google.android.exoplayer2.upstream.DataSpec.absoluteStreamPosition long A[Catch:\{ all \-\> 0x005b \}]\l0x000f: IGET  (r4 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x005b \}]\l0x0011: INVOKE  (r4 I:long) = \l  (r4 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r7 I:com.google.android.exoplayer2.upstream.DataSpec A[D('loadDataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l com.google.android.exoplayer2.upstream.DataSource.open(com.google.android.exoplayer2.upstream.DataSpec):long type: INTERFACE A[Catch:\{ all \-\> 0x005b \}]\l0x0015: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r1 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r2 I:long)\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.\<init\>(com.google.android.exoplayer2.upstream.DataSource, long, long):void type: DIRECT A[Catch:\{ all \-\> 0x005b \}]\l0x0018: IGET  (r1 I:int) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.bytesLoaded int A[Catch:\{ all \-\> 0x005b \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0022 A[Catch:\{ all \-\> 0x005b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[Catch:\{ all \-\> 0x005b \}]\l0x001e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x005b \}]\l0x001f: INVOKE  \l  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l  (r2 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.init(com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper$TrackOutputProvider):void type: VIRTUAL A[Catch:\{ all \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|SYNTHETIC\lSplitter:B:5:0x0022\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0022\l|0x0022: IGET  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x0024: IGET  (r6 I:com.google.android.exoplayer2.extractor.Extractor) = \l  (r1 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)\l com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper.extractor com.google.android.exoplayer2.extractor.Extractor A[Catch:\{ all \-\> 0x004d \}]\l0x0026: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0033 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r1 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.loadCanceled boolean A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0033 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l0x002e: INVOKE  (r8 I:int A[D('result' int)]) = \l  (r6 I:com.google.android.exoplayer2.extractor.Extractor A[D('extractor' com.google.android.exoplayer2.extractor.Extractor)])\l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:com.google.android.exoplayer2.extractor.PositionHolder)\l com.google.android.exoplayer2.extractor.Extractor.read(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.extractor.PositionHolder):int type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l0x0032: GOTO  \-\> 0x0027 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' int)]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004b A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|SYNTHETIC\lSplitter:B:14:0x0039\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0039\l|0x0039: INVOKE  (r2 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE A[Catch:\{ all \-\> 0x005b \}, TRY_ENTER]\l0x003d: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec A[Catch:\{ all \-\> 0x005b \}]\l0x003f: IGET  (r4 I:long) = (r1 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.absoluteStreamPosition long A[Catch:\{ all \-\> 0x005b \}]\l0x0041: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) A[Catch:\{ all \-\> 0x005b \}]\l0x0042: CAST  (r1 I:int) = (int) (r2 I:long) A[Catch:\{ all \-\> 0x005b \}]\l0x0043: IPUT  \l  (r1 I:int)\l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.bytesLoaded int A[Catch:\{ all \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x0047: INVOKE  (r1 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|0x004b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|ExcHandler: all null\lSplitter:B:5:0x0022\l|0x004d: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x004e|SYNTHETIC\lSplitter:B:20:0x004e\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x004e\l|0x004e: INVOKE  (r2 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE A[Catch:\{ all \-\> 0x005b \}, TRY_ENTER]\l0x0052: IGET  (r4 I:com.google.android.exoplayer2.upstream.DataSpec) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec A[Catch:\{ all \-\> 0x005b \}]\l0x0054: IGET  (r4 I:long) = (r4 I:com.google.android.exoplayer2.upstream.DataSpec) com.google.android.exoplayer2.upstream.DataSpec.absoluteStreamPosition long A[Catch:\{ all \-\> 0x005b \}]\l0x0056: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) A[Catch:\{ all \-\> 0x005b \}]\l0x0057: CAST  (r2 I:int) = (int) (r2 I:long) A[Catch:\{ all \-\> 0x005b \}]\l0x0058: IPUT  \l  (r2 I:int)\l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.bytesLoaded int A[Catch:\{ all \-\> 0x005b \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: THROW  (r1 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005b \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|ExcHandler: all null\lSplitter:B:1:0x0009\l|0x005b: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|0x005c: IGET  (r2 I:com.google.android.exoplayer2.upstream.DataSource) = \l  (r10 I:com.google.android.exoplayer2.source.chunk.InitializationChunk)\l com.google.android.exoplayer2.source.chunk.InitializationChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x005e: INVOKE  (r2 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0061|0x0061: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.InitializationChunk.load((r10 'this' I:com.google.android.exoplayer2.source.chunk.InitializationChunk A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0026\-0x004d: r6 'extractor' com.google.android.exoplayer2.extractor.Extractor\l  0x0027\-0x004d: r8 'result' int\l  0x0018\-0x005b: r0 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  0x0009\-0x0061: r7 'loadDataSpec' com.google.android.exoplayer2.upstream.DataSpec\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_7;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

