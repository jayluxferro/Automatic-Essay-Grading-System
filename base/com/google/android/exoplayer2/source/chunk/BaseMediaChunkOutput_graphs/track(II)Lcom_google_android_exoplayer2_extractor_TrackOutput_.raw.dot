digraph "CFG forcom.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.track(II)Lcom\/google\/android\/exoplayer2\/extractor\/TrackOutput;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:int[]) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.trackTypes int[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r1 I:int[]) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.trackTypes int[] \l0x0008: AGET  (r1 I:?[int, float]) = \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r1 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput[]) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput)\l com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.trackOutputs com.google.android.exoplayer2.extractor.DefaultTrackOutput[] \l0x000e: AGET  (r1 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: CONST_STR  (r1 I:java.lang.String) =  \"BaseMediaChunkOutput\" \l0x0016: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001b: CONST_STR  (r3 I:java.lang.String) =  \"Unmatched track of type: \" \l0x001d: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r6 I:int A[D('type' int)]) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x002c: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.DummyTrackOutput) =  com.google.android.exoplayer2.extractor.DummyTrackOutput \l0x002e: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.DummyTrackOutput)\l com.google.android.exoplayer2.extractor.DummyTrackOutput.\<init\>():void type: DIRECT \l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.extractor.TrackOutput com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput.track((r4 'this' I:com.google.android.exoplayer2.source.chunk.BaseMediaChunkOutput A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x0031: r0 'i' int\l  ?\-0x0031: r5 'id' int\l  ?\-0x0031: r6 'type' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_1;
Node_8 -> Node_6;
}

