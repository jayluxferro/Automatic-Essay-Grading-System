digraph "CFG forcom.google.android.exoplayer2.source.chunk.ContainerMediaChunk.\<init\>(Lcom\/google\/android\/exoplayer2\/upstream\/DataSource;Lcom\/google\/android\/exoplayer2\/upstream\/DataSpec;Lcom\/google\/android\/exoplayer2\/Format;ILjava\/lang\/Object;JJIIJLcom\/google\/android\/exoplayer2\/source\/chunk\/ChunkExtractorWrapper;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.chunk.BaseMediaChunk)\l  (r1 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource)])\l  (r2 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec)])\l  (r3 I:com.google.android.exoplayer2.Format A[D('trackFormat' com.google.android.exoplayer2.Format)])\l  (r4 I:int A[D('trackSelectionReason' int)])\l  (r5 I:java.lang.Object A[D('trackSelectionData' java.lang.Object)])\l  (r6 I:long A[D('startTimeUs' long)])\l  (r8 I:long A[D('endTimeUs' long)])\l  (r10 I:int A[D('chunkIndex' int)])\l com.google.android.exoplayer2.source.chunk.BaseMediaChunk.\<init\>(com.google.android.exoplayer2.upstream.DataSource, com.google.android.exoplayer2.upstream.DataSpec, com.google.android.exoplayer2.Format, int, java.lang.Object, long, long, int):void type: DIRECT \l0x0003: IPUT  \l  (r11 I:int A[D('chunkCount' int)])\l  (r0 I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk)\l com.google.android.exoplayer2.source.chunk.ContainerMediaChunk.chunkCount int \l0x0005: IPUT  \l  (r12 I:long A[D('sampleOffsetUs' long)])\l  (r0 I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk)\l com.google.android.exoplayer2.source.chunk.ContainerMediaChunk.sampleOffsetUs long \l0x0007: IPUT  \l  (r14 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper)])\l  (r0 I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk)\l com.google.android.exoplayer2.source.chunk.ContainerMediaChunk.extractorWrapper com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.chunk.ContainerMediaChunk.\<init\>((r0 'this' I:com.google.android.exoplayer2.source.chunk.ContainerMediaChunk A[IMMUTABLE_TYPE, THIS]), (r1 I:com.google.android.exoplayer2.upstream.DataSource A[D('dataSource' com.google.android.exoplayer2.upstream.DataSource), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:com.google.android.exoplayer2.upstream.DataSpec A[D('dataSpec' com.google.android.exoplayer2.upstream.DataSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.google.android.exoplayer2.Format A[D('trackFormat' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('trackSelectionReason' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('trackSelectionData' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('startTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('endTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('chunkIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('chunkCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('sampleOffsetUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper A[D('extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0009: r1 'dataSource' com.google.android.exoplayer2.upstream.DataSource\l  ?\-0x0009: r2 'dataSpec' com.google.android.exoplayer2.upstream.DataSpec\l  ?\-0x0009: r3 'trackFormat' com.google.android.exoplayer2.Format\l  ?\-0x0009: r4 'trackSelectionReason' int\l  ?\-0x0009: r5 'trackSelectionData' java.lang.Object\l  ?\-0x0009: r6 'startTimeUs' long\l  ?\-0x0009: r8 'endTimeUs' long\l  ?\-0x0009: r10 'chunkIndex' int\l  ?\-0x0009: r11 'chunkCount' int\l  ?\-0x0009: r12 'sampleOffsetUs' long\l  ?\-0x0009: r14 'extractorWrapper' com.google.android.exoplayer2.source.chunk.ChunkExtractorWrapper\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

