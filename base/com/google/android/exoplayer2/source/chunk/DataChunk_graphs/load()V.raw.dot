digraph "CFG forcom.google.android.exoplayer2.source.chunk.DataChunk.load()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0003: IGET  (r2 I:com.google.android.exoplayer2.upstream.DataSpec) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.dataSpec com.google.android.exoplayer2.upstream.DataSpec A[Catch:\{ all \-\> 0x0029 \}]\l0x0005: INVOKE  \l  (r1 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r2 I:com.google.android.exoplayer2.upstream.DataSpec)\l com.google.android.exoplayer2.upstream.DataSource.open(com.google.android.exoplayer2.upstream.DataSpec):long type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}]\l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l0x0009: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk)\l com.google.android.exoplayer2.source.chunk.DataChunk.limit int A[Catch:\{ all \-\> 0x0029 \}]\l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesRead' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0030 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r1 I:boolean) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.loadCanceled boolean A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0030 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.maybeExpandData():void type: DIRECT A[Catch:\{ all \-\> 0x0029 \}]\l0x0015: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.dataSource com.google.android.exoplayer2.upstream.DataSource A[Catch:\{ all \-\> 0x0029 \}]\l0x0017: IGET  (r2 I:byte[]) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.data byte[] A[Catch:\{ all \-\> 0x0029 \}]\l0x0019: IGET  (r3 I:int) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.limit int A[Catch:\{ all \-\> 0x0029 \}]\l0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0029 \}]\l0x001d: INVOKE  (r0 I:int A[D('bytesRead' int)]) = \l  (r1 I:com.google.android.exoplayer2.upstream.DataSource)\l  (r2 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.upstream.DataSource.read(byte[], int, int):int type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesRead' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.limit int A[Catch:\{ all \-\> 0x0029 \}]\l0x0025: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('bytesRead' int)]) A[Catch:\{ all \-\> 0x0029 \}]\l0x0026: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk)\l com.google.android.exoplayer2.source.chunk.DataChunk.limit int A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IGET  (r2 I:com.google.android.exoplayer2.upstream.DataSource) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x002c: INVOKE  (r2 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|SYNTHETIC\lSplitter:B:13:0x0030\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0030\l|0x0030: IGET  (r1 I:boolean) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.loadCanceled boolean A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: IGET  (r1 I:byte[]) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.data byte[] A[Catch:\{ all \-\> 0x0029 \}]\l0x0036: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.limit int A[Catch:\{ all \-\> 0x0029 \}]\l0x0038: INVOKE  \l  (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk)\l  (r1 I:byte[])\l  (r2 I:int)\l com.google.android.exoplayer2.source.chunk.DataChunk.consume(byte[], int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IGET  (r1 I:com.google.android.exoplayer2.upstream.DataSource) = (r6 I:com.google.android.exoplayer2.source.chunk.DataChunk) com.google.android.exoplayer2.source.chunk.DataChunk.dataSource com.google.android.exoplayer2.upstream.DataSource \l0x003d: INVOKE  (r1 I:com.google.android.exoplayer2.upstream.DataSource) com.google.android.exoplayer2.util.Util.closeQuietly(com.google.android.exoplayer2.upstream.DataSource):void type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: RETURN   \l}"];
MethodNode[shape=record,label="{public final void com.google.android.exoplayer2.source.chunk.DataChunk.load((r6 'this' I:com.google.android.exoplayer2.source.chunk.DataChunk A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x000c\-0x0029: r0 'bytesRead' int\l  0x0030\-0x0040: r0 'bytesRead' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

