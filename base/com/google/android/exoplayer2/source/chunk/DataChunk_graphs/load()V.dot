digraph "CFG forcom.google.android.exoplayer2.source.chunk.DataChunk.load()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0029 \}\lSplitter:B:1:0x0001\l|r6.dataSource.open(r6.dataSpec)     \/\/ Catch:\{ all \-\> 0x0029 \}\lr6.limit = 0     \/\/ Catch:\{ all \-\> 0x0029 \}\lr0 = 0     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|LOOP_START\lCatch:\{ all \-\> 0x0029 \}\lPHI: r0 \l  PHI: (r0v1 'bytesRead' int) = (r0v0 'bytesRead' int), (r0v2 'bytesRead' int) binds: [B:2:?, B:18:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000c\-\>B:18:0x000c\l|if (r0 == \-1) goto L_0x0030     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|Catch:\{ all \-\> 0x0029 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|Catch:\{ all \-\> 0x0029 \}\l|if (r6.loadCanceled != false) goto L_0x0030     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|Catch:\{ all \-\> 0x0029 \}\l|maybeExpandData()     \/\/ Catch:\{ all \-\> 0x0029 \}\lint r0 = r6.dataSource.read(r6.data, r6.limit, 16384)     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|Catch:\{ all \-\> 0x0029 \}\l|if (r0 == \-1) goto L_0x000c     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|Catch:\{ all \-\> 0x0029 \}\l|r6.limit = r6.limit + r0     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|ExcHandler:  FINALLY\lSplitter:B:1:0x0001\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|FINALLY_INSNS\l|com.google.android.exoplayer2.util.Util.closeQuietly(r6.dataSource)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|throw r1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|SYNTHETIC\lSplitter:B:12:0x0030\l}"];
Node_13 [shape=record,label="{13\:\ ?|Catch:\{ all \-\> 0x0029 \}\lSplitter:B:12:0x0030\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|Catch:\{ all \-\> 0x0029 \}\l|if (r6.loadCanceled != false) goto L_0x003b     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|Catch:\{ all \-\> 0x0029 \}\l|consume(r6.data, r6.limit)     \/\/ Catch:\{ all \-\> 0x0029 \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|DONT_GENERATE\l|com.google.android.exoplayer2.upstream.DataSource r1 = r6.dataSource\lcom.google.android.exoplayer2.util.Util.closeQuietly(r1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000c\-\>B:18:0x000c\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void com.google.android.exoplayer2.source.chunk.DataChunk.load((r6v0 'this' com.google.android.exoplayer2.source.chunk.DataChunk A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_3;
Node_19 -> Node_18;
Node_20 -> Node_18;
}

