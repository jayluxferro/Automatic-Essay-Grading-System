digraph "CFG forcom.google.android.exoplayer2.source.ClippingMediaPeriod.onPrepared(Lcom\/google\/android\/exoplayer2\/source\/MediaPeriod;)V" {
subgraph cluster_Region_1368904722 {
label = "R(4:0|5|(1:10)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r1 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|PHI: r0 \l  PHI: (r0v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState((r8.startUs == com.google.android.exoplayer2.C1260C.TIME_UNSET \|\| r8.endUs == com.google.android.exoplayer2.C1260C.TIME_UNSET) ? false : true)\l}"];
subgraph cluster_IfRegion_1665662055 {
label = "IF [B:6:0x001d] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001d|if (r8.startUs == 0) goto L_0x0029\l}"];
subgraph cluster_Region_859560575 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0029|r1 = false\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x001f|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v0 boolean), (r1v1 boolean) binds: [B:6:0x001d, B:10:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|r8.pendingInitialDiscontinuity = r1\lr8.callback.onPrepared(r8)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000b}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000d}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0011|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0026}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0027}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.ClippingMediaPeriod.onPrepared((r8v0 'this' com.google.android.exoplayer2.source.ClippingMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r9v0 'mediaPeriod' com.google.android.exoplayer2.source.MediaPeriod A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_10 -> Node_7;
Node_7 -> Node_8;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_9 -> Node_5;
}

