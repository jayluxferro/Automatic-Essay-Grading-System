digraph "CFG forcom.google.android.exoplayer2.source.ClippingMediaPeriod.onPrepared(Lcom\/google\/android\/exoplayer2\/source\/MediaPeriod;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0005: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0009: CMP_L  (r0 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.endUs long \l0x000f: CMP_L  (r0 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0017: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0019: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x001b: CMP_L  (r0 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IPUT  \l  (r1 I:boolean)\l  (r8 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.pendingInitialDiscontinuity boolean \l0x0021: IGET  (r0 I:com.google.android.exoplayer2.source.MediaPeriod$Callback) = \l  (r8 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.callback com.google.android.exoplayer2.source.MediaPeriod$Callback \l0x0023: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.MediaPeriod$Callback)\l  (r8 I:com.google.android.exoplayer2.source.MediaPeriod)\l com.google.android.exoplayer2.source.MediaPeriod.Callback.onPrepared(com.google.android.exoplayer2.source.MediaPeriod):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.ClippingMediaPeriod.onPrepared((r8 'this' I:com.google.android.exoplayer2.source.ClippingMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.source.MediaPeriod A[D('mediaPeriod' com.google.android.exoplayer2.source.MediaPeriod), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002a: r9 'mediaPeriod' com.google.android.exoplayer2.source.MediaPeriod\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_9 -> Node_5;
Node_10 -> Node_7;
}

