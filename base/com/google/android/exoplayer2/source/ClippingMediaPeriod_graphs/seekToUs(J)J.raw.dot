digraph "CFG forcom.google.android.exoplayer2.source.ClippingMediaPeriod.seekToUs(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r5 I:com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream[]) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.sampleStreams com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream[] \l0x0003: ARRAY_LENGTH  (r6 I:int) = (r5 I:?[]) \l0x0004: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream A[D('sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream)])\l com.google.android.exoplayer2.source.ClippingMediaPeriod.ClippingSampleStream.clearSentEos():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r4 I:com.google.android.exoplayer2.source.MediaPeriod) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.mediaPeriod com.google.android.exoplayer2.source.MediaPeriod \l0x0013: IGET  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0015: ARITH  (r6 I:long) = (r6 I:long) + (r10 I:long A[D('positionUs' long)]) \l0x0016: INVOKE  (r2 I:long) = \l  (r4 I:com.google.android.exoplayer2.source.MediaPeriod)\l  (r6 I:long)\l com.google.android.exoplayer2.source.MediaPeriod.seekToUs(long):long type: INTERFACE \l0x001a: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x001c: ARITH  (r4 I:long) = (r4 I:long) + (r10 I:long A[D('positionUs' long)]) \l0x001d: CMP_L  (r4 I:int) = (r2 I:long A[D('seekUs' long)]), (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0023: CMP_L  (r4 I:int) = (r2 I:long A[D('seekUs' long)]), (r4 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.endUs long \l0x0029: CONST  (r6 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x002b: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.endUs long \l0x0031: CMP_L  (r4 I:int) = (r2 I:long A[D('seekUs' long)]), (r4 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r4 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0039: IGET  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x003b: ARITH  (r4 I:long) = (r2 I:long A[D('seekUs' long)]) \- (r4 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: RETURN  (r4 I:long) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.source.ClippingMediaPeriod.seekToUs((r9 'this' I:com.google.android.exoplayer2.source.ClippingMediaPeriod A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x0011: r0 'sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream\l  0x001a\-0x003d: r2 'seekUs' long\l  ?\-0x003d: r10 'positionUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

