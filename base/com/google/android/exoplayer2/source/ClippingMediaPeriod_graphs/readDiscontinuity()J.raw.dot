digraph "CFG forcom.google.android.exoplayer2.source.ClippingMediaPeriod.readDiscontinuity()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0006: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: IGET  (r3 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.pendingInitialDiscontinuity boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r4 I:com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream[]) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.sampleStreams com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream[] \l0x000d: ARRAY_LENGTH  (r8 I:int) = (r4 I:?[]) \l0x000e: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r3 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:8:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream A[D('sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream)])\l com.google.android.exoplayer2.source.ClippingMediaPeriod.ClippingSampleStream.clearPendingDiscontinuity():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IPUT  \l  (r5 I:boolean)\l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.pendingInitialDiscontinuity boolean \l0x001d: INVOKE  (r0 I:long) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.readDiscontinuity():long type: VIRTUAL \l0x0021: CMP_L  (r3 I:int) = (r0 I:long A[D('discontinuityUs' long)]), (r6 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: MOVE  (r4 I:?[long, double]) = (r0 I:?[long, double] A[D('discontinuityUs' long)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: RETURN  (r4 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IGET  (r3 I:com.google.android.exoplayer2.source.MediaPeriod) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.mediaPeriod com.google.android.exoplayer2.source.MediaPeriod \l0x002c: INVOKE  (r0 I:long) = (r3 I:com.google.android.exoplayer2.source.MediaPeriod) com.google.android.exoplayer2.source.MediaPeriod.readDiscontinuity():long type: INTERFACE \l0x0030: CMP_L  (r3 I:int) = (r0 I:long A[D('discontinuityUs' long)]), (r6 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0036 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: MOVE  (r4 I:?[long, double]) = (r6 I:?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0038: CMP_L  (r3 I:int) = (r0 I:long A[D('discontinuityUs' long)]), (r6 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:25:0x0057 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: INVOKE  (r3 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0040: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.endUs long \l0x0042: CONST  (r8 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x0044: CMP_L  (r3 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004e \l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.endUs long \l0x004a: CMP_L  (r3 I:int) = (r0 I:long A[D('discontinuityUs' long)]), (r6 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|0x004c: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|0x004e: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|0x004f: INVOKE  (r5 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0052: IGET  (r4 I:long) = \l  (r10 I:com.google.android.exoplayer2.source.ClippingMediaPeriod)\l com.google.android.exoplayer2.source.ClippingMediaPeriod.startUs long \l0x0054: ARITH  (r4 I:long) = (r0 I:long A[D('discontinuityUs' long)]) \- (r4 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0057|0x0057: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.source.ClippingMediaPeriod.readDiscontinuity((r10 'this' I:com.google.android.exoplayer2.source.ClippingMediaPeriod A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0013\-0x001b: r2 'sampleStream' com.google.android.exoplayer2.source.ClippingMediaPeriod$ClippingSampleStream\l  0x0021\-0x002a: r0 'discontinuityUs' long\l  0x0030\-0x0058: r0 'discontinuityUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_11;
Node_25 -> Node_19;
}

