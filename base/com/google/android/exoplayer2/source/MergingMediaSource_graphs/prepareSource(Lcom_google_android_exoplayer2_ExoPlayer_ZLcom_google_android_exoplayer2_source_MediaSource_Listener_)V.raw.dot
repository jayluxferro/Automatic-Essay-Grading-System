digraph "CFG forcom.google.android.exoplayer2.source.MergingMediaSource.prepareSource(Lcom\/google\/android\/exoplayer2\/ExoPlayer;ZLcom\/google\/android\/exoplayer2\/source\/MediaSource$Listener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r8 I:com.google.android.exoplayer2.source.MediaSource$Listener A[D('listener' com.google.android.exoplayer2.source.MediaSource$Listener)])\l  (r5 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.listener com.google.android.exoplayer2.source.MediaSource$Listener \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IGET  (r2 I:com.google.android.exoplayer2.source.MediaSource[]) = \l  (r5 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.mediaSources com.google.android.exoplayer2.source.MediaSource[] \l0x0005: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0009: IGET  (r2 I:com.google.android.exoplayer2.source.MediaSource[]) = \l  (r5 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.mediaSources com.google.android.exoplayer2.source.MediaSource[] \l0x000b: AGET  (r2 I:?[OBJECT, ARRAY]) = \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char] A[D('sourceIndex' int)])\l \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource$1) =  com.google.android.exoplayer2.source.MergingMediaSource$1 \l0x0010: INVOKE  \l  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource$1)\l  (r5 I:com.google.android.exoplayer2.source.MergingMediaSource)\l  (r1 I:int A[D('sourceIndex' int)])\l com.google.android.exoplayer2.source.MergingMediaSource.1.\<init\>(com.google.android.exoplayer2.source.MergingMediaSource, int):void type: DIRECT \l0x0013: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.MediaSource)\l  (r6 I:com.google.android.exoplayer2.ExoPlayer A[D('player' com.google.android.exoplayer2.ExoPlayer)])\l  (r3 I:boolean)\l  (r4 I:com.google.android.exoplayer2.source.MediaSource$Listener)\l com.google.android.exoplayer2.source.MediaSource.prepareSource(com.google.android.exoplayer2.ExoPlayer, boolean, com.google.android.exoplayer2.source.MediaSource$Listener):void type: INTERFACE \l0x0016: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.source.MergingMediaSource.prepareSource((r5 'this' I:com.google.android.exoplayer2.source.MergingMediaSource A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.android.exoplayer2.ExoPlayer A[D('player' com.google.android.exoplayer2.ExoPlayer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('isTopLevelSource' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.google.android.exoplayer2.source.MediaSource$Listener A[D('listener' com.google.android.exoplayer2.source.MediaSource$Listener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x0019: r1 'sourceIndex' int\l  0x0003\-0x0019: r0 'i' int\l  ?\-0x0019: r6 'player' com.google.android.exoplayer2.ExoPlayer\l  ?\-0x0019: r7 'isTopLevelSource' boolean\l  ?\-0x0019: r8 'listener' com.google.android.exoplayer2.source.MediaSource$Listener\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

