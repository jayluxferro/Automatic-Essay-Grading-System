digraph "CFG forcom.google.android.exoplayer2.source.MergingMediaSource.checkTimelineMerges(Lcom\/google\/android\/exoplayer2\/Timeline;)Lcom\/google\/android\/exoplayer2\/source\/MergingMediaSource$IllegalMergeException;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.Timeline A[D('timeline' com.google.android.exoplayer2.Timeline)])\l com.google.android.exoplayer2.Timeline.getWindowCount():int type: VIRTUAL \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('windowCount' int)])  \-\> B:7:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r2 I:com.google.android.exoplayer2.Timeline$Window) = \l  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.window com.google.android.exoplayer2.Timeline$Window \l0x000a: INVOKE  (r2 I:com.google.android.exoplayer2.Timeline$Window) = \l  (r5 I:com.google.android.exoplayer2.Timeline A[D('timeline' com.google.android.exoplayer2.Timeline)])\l  (r0 I:int A[D('i' int)])\l  (r2 I:com.google.android.exoplayer2.Timeline$Window)\l  (r3 I:boolean)\l com.google.android.exoplayer2.Timeline.getWindow(int, com.google.android.exoplayer2.Timeline$Window, boolean):com.google.android.exoplayer2.Timeline$Window type: VIRTUAL \l0x000e: IGET  (r2 I:boolean) = (r2 I:com.google.android.exoplayer2.Timeline$Window) com.google.android.exoplayer2.Timeline.Window.isDynamic boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException) =  com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException \l0x0014: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException)\l  (r3 I:int)\l com.google.android.exoplayer2.source.MergingMediaSource.IllegalMergeException.\<init\>(int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  \l  (r2 I:com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException)\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.periodCount int \l0x001d: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.Timeline A[D('timeline' com.google.android.exoplayer2.Timeline)])\l com.google.android.exoplayer2.Timeline.getPeriodCount():int type: VIRTUAL \l0x0024: IPUT  \l  (r2 I:int)\l  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.periodCount int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.Timeline A[D('timeline' com.google.android.exoplayer2.Timeline)])\l com.google.android.exoplayer2.Timeline.getPeriodCount():int type: VIRTUAL \l0x002c: IGET  (r3 I:int) = \l  (r4 I:com.google.android.exoplayer2.source.MergingMediaSource)\l com.google.android.exoplayer2.source.MergingMediaSource.periodCount int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException) =  com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException \l0x0032: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0033: INVOKE  \l  (r2 I:com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException)\l  (r3 I:int)\l com.google.android.exoplayer2.source.MergingMediaSource.IllegalMergeException.\<init\>(int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{private com.google.android.exoplayer2.source.MergingMediaSource$IllegalMergeException com.google.android.exoplayer2.source.MergingMediaSource.checkTimelineMerges((r4 'this' I:com.google.android.exoplayer2.source.MergingMediaSource A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.Timeline A[D('timeline' com.google.android.exoplayer2.Timeline), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0006\-0x0036: r0 'i' int\l  0x0005\-0x0036: r1 'windowCount' int\l  ?\-0x0036: r5 'timeline' com.google.android.exoplayer2.Timeline\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_12 -> Node_10;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_5;
}

