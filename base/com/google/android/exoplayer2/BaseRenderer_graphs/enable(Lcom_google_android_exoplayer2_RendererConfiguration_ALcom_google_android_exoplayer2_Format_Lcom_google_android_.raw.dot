digraph "CFG forcom.google.android.exoplayer2.BaseRenderer.enable(Lcom\/google\/android\/exoplayer2\/RendererConfiguration;[Lcom\/google\/android\/exoplayer2\/Format;Lcom\/google\/android\/exoplayer2\/source\/SampleStream;JZJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IGET  (r0 I:int) = (r2 I:com.google.android.exoplayer2.BaseRenderer) com.google.android.exoplayer2.BaseRenderer.state int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0009: IPUT  \l  (r3 I:com.google.android.exoplayer2.RendererConfiguration A[D('configuration' com.google.android.exoplayer2.RendererConfiguration)])\l  (r2 I:com.google.android.exoplayer2.BaseRenderer)\l com.google.android.exoplayer2.BaseRenderer.configuration com.google.android.exoplayer2.RendererConfiguration \l0x000b: IPUT  \l  (r1 I:int)\l  (r2 I:com.google.android.exoplayer2.BaseRenderer)\l com.google.android.exoplayer2.BaseRenderer.state int \l0x000d: INVOKE  \l  (r2 I:com.google.android.exoplayer2.BaseRenderer)\l  (r8 I:boolean A[D('joining' boolean)])\l com.google.android.exoplayer2.BaseRenderer.onEnabled(boolean):void type: VIRTUAL \l0x0010: INVOKE  \l  (r2 I:com.google.android.exoplayer2.BaseRenderer)\l  (r4 I:com.google.android.exoplayer2.Format[] A[D('formats' com.google.android.exoplayer2.Format[])])\l  (r5 I:com.google.android.exoplayer2.source.SampleStream A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l  (r9 I:long A[D('offsetUs' long)])\l com.google.android.exoplayer2.BaseRenderer.replaceStream(com.google.android.exoplayer2.Format[], com.google.android.exoplayer2.source.SampleStream, long):void type: VIRTUAL \l0x0013: INVOKE  \l  (r2 I:com.google.android.exoplayer2.BaseRenderer)\l  (r6 I:long A[D('positionUs' long)])\l  (r8 I:boolean A[D('joining' boolean)])\l com.google.android.exoplayer2.BaseRenderer.onPositionReset(long, boolean):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public final void com.google.android.exoplayer2.BaseRenderer.enable((r2 'this' I:com.google.android.exoplayer2.BaseRenderer A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.RendererConfiguration A[D('configuration' com.google.android.exoplayer2.RendererConfiguration), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.Format[] A[D('formats' com.google.android.exoplayer2.Format[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.google.android.exoplayer2.source.SampleStream A[D('stream' com.google.android.exoplayer2.source.SampleStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('joining' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[D('offsetUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0018: r3 'configuration' com.google.android.exoplayer2.RendererConfiguration\l  ?\-0x0018: r4 'formats' com.google.android.exoplayer2.Format[]\l  ?\-0x0018: r5 'stream' com.google.android.exoplayer2.source.SampleStream\l  ?\-0x0018: r6 'positionUs' long\l  ?\-0x0018: r8 'joining' boolean\l  ?\-0x0018: r9 'offsetUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

