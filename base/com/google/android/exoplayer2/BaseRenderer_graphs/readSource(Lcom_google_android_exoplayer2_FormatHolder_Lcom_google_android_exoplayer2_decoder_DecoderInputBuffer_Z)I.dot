digraph "CFG forcom.google.android.exoplayer2.BaseRenderer.readSource(Lcom\/google\/android\/exoplayer2\/FormatHolder;Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = r6.stream.readData(r7, r8, r9)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r1 != \-4) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r8.isEndOfStream() == false) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r6.readEndOfStream = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r6.streamIsFinal == false) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|SYNTHETIC\lRETURN\l|return \-3\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|r8.timeUs = r8.timeUs + r6.streamOffsetUs\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020}"];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r1 != \-5) goto L_0x0020\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|com.google.android.exoplayer2.Format r0 = r7.format\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|if ((r0.subsampleOffsetUs \> Long.MAX_VALUE ? 1 : (r0.subsampleOffsetUs == Long.MAX_VALUE ? 0 : \-1)) == 0) goto L_0x0020\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|r7.format = r0.copyWithSubsampleOffsetUs(r0.subsampleOffsetUs + r6.streamOffsetUs)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-4\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
MethodNode[shape=record,label="{protected final int com.google.android.exoplayer2.BaseRenderer.readSource((r6v0 'this' com.google.android.exoplayer2.BaseRenderer A[IMMUTABLE_TYPE, THIS]), (r7v0 'formatHolder' com.google.android.exoplayer2.FormatHolder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'formatRequired' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_8;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_8;
}

