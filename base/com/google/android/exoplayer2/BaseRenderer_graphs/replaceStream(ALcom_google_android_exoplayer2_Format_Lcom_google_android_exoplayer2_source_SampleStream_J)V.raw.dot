digraph "CFG forcom.google.android.exoplayer2.BaseRenderer.replaceStream([Lcom\/google\/android\/exoplayer2\/Format;Lcom\/google\/android\/exoplayer2\/source\/SampleStream;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:boolean) = (r3 I:com.google.android.exoplayer2.BaseRenderer) com.google.android.exoplayer2.BaseRenderer.streamIsFinal boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0009: IPUT  \l  (r5 I:com.google.android.exoplayer2.source.SampleStream A[D('stream' com.google.android.exoplayer2.source.SampleStream)])\l  (r3 I:com.google.android.exoplayer2.BaseRenderer)\l com.google.android.exoplayer2.BaseRenderer.stream com.google.android.exoplayer2.source.SampleStream \l0x000b: IPUT  \l  (r1 I:boolean)\l  (r3 I:com.google.android.exoplayer2.BaseRenderer)\l com.google.android.exoplayer2.BaseRenderer.readEndOfStream boolean \l0x000d: IPUT  \l  (r6 I:long A[D('offsetUs' long)])\l  (r3 I:com.google.android.exoplayer2.BaseRenderer)\l com.google.android.exoplayer2.BaseRenderer.streamOffsetUs long \l0x000f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.BaseRenderer)\l  (r4 I:com.google.android.exoplayer2.Format[] A[D('formats' com.google.android.exoplayer2.Format[])])\l com.google.android.exoplayer2.BaseRenderer.onStreamChanged(com.google.android.exoplayer2.Format[]):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public final void com.google.android.exoplayer2.BaseRenderer.replaceStream((r3 'this' I:com.google.android.exoplayer2.BaseRenderer A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.Format[] A[D('formats' com.google.android.exoplayer2.Format[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.google.android.exoplayer2.source.SampleStream A[D('stream' com.google.android.exoplayer2.source.SampleStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('offsetUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0014: r4 'formats' com.google.android.exoplayer2.Format[]\l  ?\-0x0014: r5 'stream' com.google.android.exoplayer2.source.SampleStream\l  ?\-0x0014: r6 'offsetUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

