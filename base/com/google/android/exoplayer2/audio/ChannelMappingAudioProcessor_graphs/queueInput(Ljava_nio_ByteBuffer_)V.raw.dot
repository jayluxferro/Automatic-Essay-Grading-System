digraph "CFG forcom.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.queueInput(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = \l  (r11 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.position():int type: VIRTUAL \l0x0004: INVOKE  (r2 I:int) = \l  (r11 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.limit():int type: VIRTUAL \l0x0008: ARITH  (r5 I:int) = (r2 I:int A[D('limit' int)]) \- (r4 I:int A[D('position' int)]) \l0x000a: IGET  (r6 I:int) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.channelCount int \l0x000c: ARITH  (r6 I:int) = (r6 I:int) * (2 int) \l0x000e: ARITH  (r1 I:int) = (r5 I:int) \/ (r6 I:int) \l0x0010: IGET  (r5 I:int[]) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.outputChannels int[] \l0x0012: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x0013: ARITH  (r5 I:int) = (r5 I:int) * (r1 I:int A[D('frameCount' int)]) \l0x0014: ARITH  (r3 I:int) = (r5 I:int) * (2 int) \l0x0016: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x0018: INVOKE  (r5 I:int) = (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r5 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char] A[D('outputSize' int)])  \-\> B:7:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: INVOKE  (r5 I:java.nio.ByteBuffer) = (r3 I:int A[D('outputSize' int)]) java.nio.ByteBuffer.allocateDirect(int):java.nio.ByteBuffer type: STATIC \l0x0022: INVOKE  (r6 I:java.nio.ByteOrder) =  java.nio.ByteOrder.nativeOrder():java.nio.ByteOrder type: STATIC \l0x0026: INVOKE  (r5 I:java.nio.ByteBuffer) = (r5 I:java.nio.ByteBuffer), (r6 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x002a: IPUT  \l  (r5 I:java.nio.ByteBuffer)\l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IF  (r4 I:?[int, byte, short, char] A[D('position' int)]) \>= (r2 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:9:0x0051 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: IGET  (r6 I:int[]) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.outputChannels int[] \l0x0030: ARRAY_LENGTH  (r7 I:int) = (r6 I:?[]) \l0x0031: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: IF  (r5 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:8:0x004b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: AGET  (r0 I:?[int, float]) = (r6 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0036: IGET  (r8 I:java.nio.ByteBuffer) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x0038: ARITH  (r9 I:int) = (r0 I:int A[D('channelIndex' int)]) * (2 int) \l0x003a: ARITH  (r9 I:int) = (r9 I:int) + (r4 I:int A[D('position' int)]) \l0x003b: INVOKE  (r9 I:short) = \l  (r11 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r9 I:int)\l java.nio.ByteBuffer.getShort(int):short type: VIRTUAL \l0x003f: INVOKE  (r8 I:java.nio.ByteBuffer), (r9 I:short) java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0042: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x0047: INVOKE  (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: IGET  (r5 I:int) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.channelCount int \l0x004d: ARITH  (r5 I:int) = (r5 I:int) * (2 int) \l0x004f: ARITH  (r4 I:int A[D('position' int)]) = (r4 I:int A[D('position' int)]) + (r5 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: INVOKE  \l  (r11 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r2 I:int A[D('limit' int)])\l java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0054: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x0056: INVOKE  (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.flip():java.nio.Buffer type: VIRTUAL \l0x0059: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x005b: IPUT  \l  (r5 I:java.nio.ByteBuffer)\l  (r10 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.outputBuffer java.nio.ByteBuffer \l}"];
Node_10 [shape=record,label="{10\:\ 0x005d|0x005d: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.queueInput((r10 'this' I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r11 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0036\-0x0045: r0 'channelIndex' int\l  0x0010\-0x005d: r1 'frameCount' int\l  0x0008\-0x005d: r2 'limit' int\l  0x0016\-0x005d: r3 'outputSize' int\l  0x0004\-0x005d: r4 'position' int\l  ?\-0x005d: r11 'inputBuffer' java.nio.ByteBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_5;
Node_7 -> Node_3;
Node_8 -> Node_3;
Node_9 -> Node_10;
}

