digraph "CFG forcom.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.queueInput(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r4 = r11.position()\lint r2 = r11.limit()\lint r1 = (r2 \- r4) \/ (r10.channelCount * 2)\lint r3 = (r10.outputChannels.length * r1) * 2\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|if (r10.buffer.capacity() \>= r3) goto L_0x0045\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|r10.buffer = java.nio.ByteBuffer.allocateDirect(r3).order(java.nio.ByteOrder.nativeOrder())\l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|LOOP_START\lPHI: r4 \l  PHI: (r4v1 'position' int) = (r4v0 'position' int), (r4v2 'position' int) binds: [B:12:0x002c, B:8:0x004b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x002c\-\>B:8:0x004b\l|if (r4 \>= r2) goto L_0x0051\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|int[] r6 = r10.outputChannels\lint r7 = r6.length\lr5 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|LOOP_START\lPHI: r5 \l  PHI: (r5v9 int) = (r5v8 int), (r5v12 int) binds: [B:4:0x002e, B:6:0x0034] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0032\-\>B:6:0x0034\l|if (r5 \>= r7) goto L_0x004b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|LOOP_END\lLOOP:1: B:5:0x0032\-\>B:6:0x0034\l|r0 = r6[r5]\lr10.buffer.putShort(r11.getShort((r0 * 2) + r4))\lint r5 = r5 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|r10.buffer.clear()\l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|LOOP_END\lLOOP:0: B:3:0x002c\-\>B:8:0x004b\l|int r4 = r4 + (r10.channelCount * 2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|r11.position(r2)\lr10.buffer.flip()\lr10.outputBuffer = r10.buffer\l}"];
Node_10 [shape=record,label="{10\:\ 0x005d|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.queueInput((r10v0 'this' com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r11v0 'inputBuffer' java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_12;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_5;
Node_7 -> Node_12;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_3;
Node_13 -> Node_8;
}

