digraph "CFG forcom.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0004: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x0006: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.buffer java.nio.ByteBuffer \l0x0008: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x000a: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.outputBuffer java.nio.ByteBuffer \l0x000c: IPUT  \l  (r1 I:int)\l  (r2 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.channelCount int \l0x000e: IPUT  \l  (r1 I:int)\l  (r2 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.sampleRateHz int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.\<init\>((r2 'this' I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

