digraph "CFG forcom.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.flush()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x0002: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r1 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.outputBuffer java.nio.ByteBuffer \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IPUT  \l  (r0 I:boolean)\l  (r1 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.inputEnded boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.flush((r1 'this' I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

