digraph "CFG forcom.google.android.exoplayer2.audio.MediaCodecAudioRenderer.supportsFormat(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecSelector;Lcom\/google\/android\/exoplayer2\/Format;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0002: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IGET  (r3 I:java.lang.String) = \l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0007: INVOKE  (r7 I:boolean) = (r3 I:java.lang.String A[D('mimeType' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.isAudio(java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: RETURN  (r5 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: SGET  (r7 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r7 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r7 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l  (r3 I:java.lang.String A[D('mimeType' java.lang.String)])\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.allowPassthrough(java.lang.String):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r7 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo) = \l  (r11 I:com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[D('mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector)])\l com.google.android.exoplayer2.mediacodec.MediaCodecSelector.getPassthroughDecoderInfo():com.google.android.exoplayer2.mediacodec.MediaCodecInfo type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char] A[D('tunnelingSupport' int)]) \| (4 ?[int, float, short, byte, char]) \l0x0022: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (3 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tunnelingSupport' int)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: INVOKE  (r1 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo) = \l  (r11 I:com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[D('mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector)])\l  (r3 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r5 I:boolean)\l com.google.android.exoplayer2.mediacodec.MediaCodecSelector.getDecoderInfo(java.lang.String, boolean):com.google.android.exoplayer2.mediacodec.MediaCodecInfo type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002f \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: SGET  (r7 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: IF  (r7 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleRate int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleRate int \l0x0039: INVOKE  (r7 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r7 I:int)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.isAudioSampleRateSupportedV21(int):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|0x003d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0053 \l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|0x003f: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.channelCount int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0041|0x0041: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_23 [shape=record,label="{23\:\ 0x0043|0x0043: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.channelCount int \l0x0045: INVOKE  (r7 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l  (r7 I:int)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.isAudioChannelCountSupportedV21(int):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|0x0049: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0053 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x004c|0x004c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderCapable' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0055 \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x004f|0x004f: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char] A[D('tunnelingSupport' int)]) \| (4 ?[int, float, short, byte, char]) \l0x0051: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r2 I:?[int, boolean, short, byte, char] A[D('formatSupport' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0053|0x0053: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('decoderCapable' boolean)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0055|0x0055: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{protected int com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.supportsFormat((r10 'this' I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.mediacodec.MediaCodecSelector A[D('mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x0025: r4 'tunnelingSupport' int\l  0x004c\-0x0053: r0 'decoderCapable' boolean\l  0x004f\-0x0053: r2 'formatSupport' int\l  0x0055\-0x0056: r0 'decoderCapable' boolean\l  0x002b\-0x0056: r1 'decoderInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  0x0007\-0x0056: r3 'mimeType' java.lang.String\l  0x0027\-0x0056: r4 'tunnelingSupport' int\l  ?\-0x0056: r11 'mediaCodecSelector' com.google.android.exoplayer2.mediacodec.MediaCodecSelector\l  ?\-0x0056: r12 'format' com.google.android.exoplayer2.Format\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_2;
Node_11 -> Node_6;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_2;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_2;
Node_29 -> Node_26;
Node_30 -> Node_28;
}

