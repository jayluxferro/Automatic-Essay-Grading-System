digraph "CFG forcom.google.android.exoplayer2.audio.MediaCodecAudioRenderer.onOutputFormatChanged(Landroid\/media\/MediaCodec;Landroid\/media\/MediaFormat;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r0 I:android.media.MediaFormat) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('passthrough' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:android.media.MediaFormat) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l0x000b: CONST_STR  (r4 I:java.lang.String) =  \"mime\" \l0x000d: INVOKE  (r1 I:java.lang.String) = (r0 I:android.media.MediaFormat), (r4 I:java.lang.String) android.media.MediaFormat.getString(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('passthrough' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r8 I:android.media.MediaFormat) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST_STR  (r0 I:java.lang.String) =  \"channel\-count\" \l0x0017: INVOKE  (r2 I:int) = \l  (r8 I:android.media.MediaFormat A[D('format' android.media.MediaFormat)])\l  (r0 I:java.lang.String)\l android.media.MediaFormat.getInteger(java.lang.String):int type: VIRTUAL \l0x001b: CONST_STR  (r0 I:java.lang.String) =  \"sample\-rate\" \l0x001d: INVOKE  (r3 I:int) = \l  (r8 I:android.media.MediaFormat A[D('format' android.media.MediaFormat)])\l  (r0 I:java.lang.String)\l android.media.MediaFormat.getInteger(java.lang.String):int type: VIRTUAL \l0x0021: IGET  (r0 I:boolean) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.codecNeedsDiscardChannelsWorkaround boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('channelCount' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IGET  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.channelCount int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IGET  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.channelCount int \l0x002d: NEW_ARRAY  (r6 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x002f: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IGET  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.channelCount int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: IF  (r9 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: APUT  \l  (r6 I:?[int, float][] A[D('channelMap' int[])])\l  (r9 I:?[int, short, byte, char] A[D('i' int)])\l  (r9 I:?[int, float] A[D('i' int)])\l \l0x0036: ARITH  (r9 I:int A[D('i' int)]) = (r9 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: CONST_STR  (r1 I:java.lang.String A[D('mimeType' java.lang.String)]) =  \"audio\/raw\" \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY] A[D('outputFormat' android.media.MediaFormat)])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|SYNTHETIC\lSplitter:B:19:0x003f\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x003f\l|0x003f: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioTrack) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.audioTrack com.google.android.exoplayer2.audio.AudioTrack A[Catch:\{ ConfigurationException \-\> 0x0048 \}, TRY_ENTER]\l0x0041: IGET  (r4 I:int) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.pcmEncoding int A[Catch:\{ ConfigurationException \-\> 0x0048 \}]\l0x0043: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ ConfigurationException \-\> 0x0048 \}]\l0x0044: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r1 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r2 I:int A[D('channelCount' int)])\l  (r3 I:int A[D('sampleRate' int)])\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int[] A[D('channelMap' int[])])\l com.google.android.exoplayer2.audio.AudioTrack.configure(java.lang.String, int, int, int, int, int[]):void type: VIRTUAL A[Catch:\{ ConfigurationException \-\> 0x0048 \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|ExcHandler: ConfigurationException null\lSplitter:B:19:0x003f\l|0x0048: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: INVOKE  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.getIndex():int type: VIRTUAL \l0x004d: INVOKE  (r0 I:com.google.android.exoplayer2.ExoPlaybackException) = \l  (r7 I:java.lang.Exception A[D('e' com.google.android.exoplayer2.audio.AudioTrack$ConfigurationException)])\l  (r0 I:int)\l com.google.android.exoplayer2.ExoPlaybackException.createForRenderer(java.lang.Exception, int):com.google.android.exoplayer2.ExoPlaybackException type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.onOutputFormatChanged((r11 'this' I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r12 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:android.media.MediaFormat A[D('outputFormat' android.media.MediaFormat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0039: r1 'mimeType' java.lang.String\l  0x001b\-0x0039: r2 'channelCount' int\l  0x0021\-0x0039: r3 'sampleRate' int\l  0x002f\-0x0039: r6 'channelMap' int[]\l  0x0015\-0x0039: r8 'format' android.media.MediaFormat\l  0x0030\-0x0039: r9 'i' int\l  0x003c\-0x0051: r1 'mimeType' java.lang.String\l  0x003e\-0x0051: r2 'channelCount' int\l  0x003e\-0x0051: r3 'sampleRate' int\l  0x003f\-0x0051: r6 'channelMap' int[]\l  0x0049\-0x0051: r7 'e' com.google.android.exoplayer2.audio.AudioTrack$ConfigurationException\l  0x003e\-0x0051: r8 'format' android.media.MediaFormat\l  0x0007\-0x0051: r10 'passthrough' boolean\l  ?\-0x0051: r12 'codec' android.media.MediaCodec\l  ?\-0x0051: r13 'outputFormat' android.media.MediaFormat\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_13;
Node_16 -> Node_5;
Node_17 -> Node_7;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
}

