digraph "CFG forcom.google.android.exoplayer2.audio.MediaCodecAudioRenderer.configureCodec(Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;Landroid\/media\/MediaCodec;Lcom\/google\/android\/exoplayer2\/Format;Landroid\/media\/MediaCrypto;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r0 I:java.lang.String) = \l  (r6 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo)])\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.name java.lang.String \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String) com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.codecNeedsDiscardChannelsWorkaround(java.lang.String):boolean type: STATIC \l0x0008: IPUT  \l  (r0 I:boolean)\l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.codecNeedsDiscardChannelsWorkaround boolean \l0x000a: IGET  (r0 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughEnabled boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r0 I:android.media.MediaFormat) = \l  (r8 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.getFrameworkMediaFormatV16():android.media.MediaFormat type: VIRTUAL \l0x0012: IPUT  \l  (r0 I:android.media.MediaFormat)\l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l0x0014: IGET  (r0 I:android.media.MediaFormat) = \l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"mime\" \l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"audio\/raw\" \l0x001a: INVOKE  \l  (r0 I:android.media.MediaFormat)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l android.media.MediaFormat.setString(java.lang.String, java.lang.String):void type: VIRTUAL \l0x001d: IGET  (r0 I:android.media.MediaFormat) = \l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l0x001f: INVOKE  \l  (r7 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec)])\l  (r0 I:android.media.MediaFormat)\l  (r3 I:android.view.Surface)\l  (r9 I:android.media.MediaCrypto A[D('crypto' android.media.MediaCrypto)])\l  (r4 I:int)\l android.media.MediaCodec.configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int):void type: VIRTUAL \l0x0022: IGET  (r0 I:android.media.MediaFormat) = \l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"mime\" \l0x0026: IGET  (r2 I:java.lang.String) = \l  (r8 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0028: INVOKE  \l  (r0 I:android.media.MediaFormat)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l android.media.MediaFormat.setString(java.lang.String, java.lang.String):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: INVOKE  (r0 I:android.media.MediaFormat) = \l  (r8 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.getFrameworkMediaFormatV16():android.media.MediaFormat type: VIRTUAL \l0x0030: INVOKE  \l  (r7 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec)])\l  (r0 I:android.media.MediaFormat)\l  (r3 I:android.view.Surface)\l  (r9 I:android.media.MediaCrypto A[D('crypto' android.media.MediaCrypto)])\l  (r4 I:int)\l android.media.MediaCodec.configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int):void type: VIRTUAL \l0x0033: IPUT  \l  (r3 I:android.media.MediaFormat)\l  (r5 I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer)\l com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.passthroughMediaFormat android.media.MediaFormat \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.configureCodec((r5 'this' I:com.google.android.exoplayer2.audio.MediaCodecAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo A[D('codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.media.MediaCodec A[D('codec' android.media.MediaCodec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.media.MediaCrypto A[D('crypto' android.media.MediaCrypto), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0035: r6 'codecInfo' com.google.android.exoplayer2.mediacodec.MediaCodecInfo\l  ?\-0x0035: r7 'codec' android.media.MediaCodec\l  ?\-0x0035: r8 'format' com.google.android.exoplayer2.Format\l  ?\-0x0035: r9 'crypto' android.media.MediaCrypto\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

