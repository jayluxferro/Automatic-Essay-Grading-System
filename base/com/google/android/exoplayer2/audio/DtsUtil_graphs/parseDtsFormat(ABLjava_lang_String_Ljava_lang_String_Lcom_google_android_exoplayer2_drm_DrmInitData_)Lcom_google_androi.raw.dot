digraph "CFG forcom.google.android.exoplayer2.audio.DtsUtil.parseDtsFormat([BLjava\/lang\/String;Ljava\/lang\/String;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)Lcom\/google\/android\/exoplayer2\/Format;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray) =  com.google.android.exoplayer2.util.ParsableBitArray \l0x0002: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r15 I:byte[] A[D('frame' byte[])])\l com.google.android.exoplayer2.util.ParsableBitArray.\<init\>(byte[]):void type: DIRECT \l0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l0x0007: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x000b: INVOKE  (r11 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x000f: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.DtsUtil.CHANNELS_BY_AMODE int[] \l0x0011: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r11 I:?[int, short, byte, char] A[D('amode' int)])\l \l0x0013: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0014: INVOKE  (r14 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0018: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.DtsUtil.SAMPLE_RATE_BY_SFREQ int[] \l0x001a: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r14 I:?[int, short, byte, char] A[D('sfreq' int)])\l \l0x001c: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x001d: INVOKE  (r13 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0021: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.DtsUtil.TWICE_BITRATE_KBPS_BY_RATE int[] \l0x0023: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: IF  (r13 I:?[int, byte, short, char] A[D('rate' int)]) \< (r0 I:?[int, byte, short, char])  \-\> B:8:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0029: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x002c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002d: INVOKE  (r0 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('frameBits' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x004f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: ARITH  (r5 I:int A[D('channelCount' int)]) = (r5 I:int A[D('channelCount' int)]) + (r0 I:int) \l0x0035: CONST_STR  (r1 I:java.lang.String) =  \"audio\/vnd.dts\" \l0x0037: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0039: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY] A[D('trackId' java.lang.String)]) \l0x003d: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x003f: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY] A[D('language' java.lang.String)]) \l0x0041: INVOKE  (r0 I:com.google.android.exoplayer2.Format) = \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:int A[D('bitrate' int)])\l  (r4 I:int)\l  (r5 I:int A[D('channelCount' int)])\l  (r6 I:int A[D('sampleRate' int)])\l  (r7 I:java.util.List)\l  (r8 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r9 I:int)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: RETURN  (r0 I:com.google.android.exoplayer2.Format) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|0x0046: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.DtsUtil.TWICE_BITRATE_KBPS_BY_RATE int[] \l0x0048: AGET  (r0 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r13 I:?[int, short, byte, char] A[D('rate' int)])\l \l0x004a: ARITH  (r0 I:int) = (r0 I:int) * (1000 int) \l0x004c: ARITH  (r3 I:int) = (r0 I:int) \/ (2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004f|0x004f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.Format com.google.android.exoplayer2.audio.DtsUtil.parseDtsFormat((r15 I:byte[] A[D('frame' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:java.lang.String A[D('trackId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:java.lang.String A[D('language' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0027\-0x0046: r3 'bitrate' int\l  0x004f\-0x0050: r3 'bitrate' int\l  0x0013\-0x0050: r5 'channelCount' int\l  0x001c\-0x0050: r6 'sampleRate' int\l  0x000f\-0x0050: r11 'amode' int\l  0x0005\-0x0050: r12 'frameBits' com.google.android.exoplayer2.util.ParsableBitArray\l  0x0021\-0x0050: r13 'rate' int\l  0x0018\-0x0050: r14 'sfreq' int\l  ?\-0x0050: r15 'frame' byte[]\l  ?\-0x0050: r16 'trackId' java.lang.String\l  ?\-0x0050: r17 'language' java.lang.String\l  ?\-0x0050: r18 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_3;
Node_9 -> Node_6;
}

