digraph "CFG forcom.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.onPositionReset(JZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioTrack) = \l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.audioTrack com.google.android.exoplayer2.audio.AudioTrack \l0x0003: INVOKE  (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.reset():void type: VIRTUAL \l0x0006: IPUT  \l  (r4 I:long A[D('positionUs' long)])\l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.currentPositionUs long \l0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: IPUT  \l  (r0 I:boolean)\l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.allowPositionDiscontinuity boolean \l0x000b: IPUT  \l  (r1 I:boolean)\l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputStreamEnded boolean \l0x000d: IPUT  \l  (r1 I:boolean)\l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.outputStreamEnded boolean \l0x000f: IGET  (r0 I:com.google.android.exoplayer2.decoder.SimpleDecoder\<com.google.android.exoplayer2.decoder.DecoderInputBuffer, ? extends com.google.android.exoplayer2.decoder.SimpleOutputBuffer, ? extends com.google.android.exoplayer2.audio.AudioDecoderException\>) = \l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.decoder com.google.android.exoplayer2.decoder.SimpleDecoder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  \l  (r3 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.flushDecoder():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.onPositionReset((r3 'this' I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('joining' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0016: r4 'positionUs' long\l  ?\-0x0016: r6 'joining' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

