digraph "CFG forcom.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.onInputFormatChanged(Lcom\/google\/android\/exoplayer2\/Format;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: IGET  (r1 I:com.google.android.exoplayer2.Format) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputFormat com.google.android.exoplayer2.Format \l0x0004: IPUT  \l  (r7 I:com.google.android.exoplayer2.Format A[D('newFormat' com.google.android.exoplayer2.Format)])\l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputFormat com.google.android.exoplayer2.Format \l0x0006: IGET  (r2 I:com.google.android.exoplayer2.Format) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputFormat com.google.android.exoplayer2.Format \l0x0008: IGET  (r5 I:com.google.android.exoplayer2.drm.DrmInitData) = (r2 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.drmInitData com.google.android.exoplayer2.drm.DrmInitData \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldFormat' com.google.android.exoplayer2.Format)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:boolean) = (r5 I:java.lang.Object), (r2 I:java.lang.Object) com.google.android.exoplayer2.util.Util.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drmInitDataChanged' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0052 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r2 I:com.google.android.exoplayer2.Format) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputFormat com.google.android.exoplayer2.Format \l0x0018: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmInitData) = (r2 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.drmInitData com.google.android.exoplayer2.drm.DrmInitData \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x005e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmSessionManager\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.drmSessionManager com.google.android.exoplayer2.drm.DrmSessionManager \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0022: CONST_STR  (r3 I:java.lang.String) =  \"Media requires a DrmSessionManager\" \l0x0024: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l0x0027: INVOKE  (r3 I:int) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.getIndex():int type: VIRTUAL \l0x002b: INVOKE  (r2 I:com.google.android.exoplayer2.ExoPlaybackException) = (r2 I:java.lang.Exception), (r3 I:int) com.google.android.exoplayer2.ExoPlaybackException.createForRenderer(java.lang.Exception, int):com.google.android.exoplayer2.ExoPlaybackException type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmInitData) = \l  (r1 I:com.google.android.exoplayer2.Format A[D('oldFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.drmInitData com.google.android.exoplayer2.drm.DrmInitData \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmSessionManager\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.drmSessionManager com.google.android.exoplayer2.drm.DrmSessionManager \l0x0037: INVOKE  (r3 I:android.os.Looper) =  android.os.Looper.myLooper():android.os.Looper type: STATIC \l0x003b: IGET  (r5 I:com.google.android.exoplayer2.Format) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.inputFormat com.google.android.exoplayer2.Format \l0x003d: IGET  (r5 I:com.google.android.exoplayer2.drm.DrmInitData) = (r5 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.drmInitData com.google.android.exoplayer2.drm.DrmInitData \l0x003f: INVOKE  (r2 I:com.google.android.exoplayer2.drm.DrmSession) = \l  (r2 I:com.google.android.exoplayer2.drm.DrmSessionManager)\l  (r3 I:android.os.Looper)\l  (r5 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.drm.DrmSessionManager.acquireSession(android.os.Looper, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.drm.DrmSession type: INTERFACE \l0x0043: IPUT  \l  (r2 I:com.google.android.exoplayer2.drm.DrmSession\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>)\l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.pendingDrmSession com.google.android.exoplayer2.drm.DrmSession \l0x0045: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmSession\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.pendingDrmSession com.google.android.exoplayer2.drm.DrmSession \l0x0047: IGET  (r3 I:com.google.android.exoplayer2.drm.DrmSession\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.drmSession com.google.android.exoplayer2.drm.DrmSession \l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|0x0049: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0052 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|0x004b: IGET  (r2 I:com.google.android.exoplayer2.drm.DrmSessionManager\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.drmSessionManager com.google.android.exoplayer2.drm.DrmSessionManager \l0x004d: IGET  (r3 I:com.google.android.exoplayer2.drm.DrmSession\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.pendingDrmSession com.google.android.exoplayer2.drm.DrmSession \l0x004f: INVOKE  \l  (r2 I:com.google.android.exoplayer2.drm.DrmSessionManager)\l  (r3 I:com.google.android.exoplayer2.drm.DrmSession)\l com.google.android.exoplayer2.drm.DrmSessionManager.releaseSession(com.google.android.exoplayer2.drm.DrmSession):void type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|0x0052: IGET  (r2 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.decoderReceivedBuffers boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|0x0054: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0061 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: IPUT  \l  (r4 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.decoderReinitializationState int \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: IGET  (r2 I:com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher) = \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.eventDispatcher com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher \l0x005a: INVOKE  \l  (r2 I:com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher)\l  (r7 I:com.google.android.exoplayer2.Format A[D('newFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.audio.AudioRendererEventListener.EventDispatcher.inputFormatChanged(com.google.android.exoplayer2.Format):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x005d|0x005d: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|0x005e: IPUT  \l  (r3 I:com.google.android.exoplayer2.drm.DrmSession\<com.google.android.exoplayer2.drm.ExoMediaCrypto\>)\l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.pendingDrmSession com.google.android.exoplayer2.drm.DrmSession \l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|0x0061: INVOKE  \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.releaseDecoder():void type: DIRECT \l0x0064: INVOKE  \l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.maybeInitDecoder():void type: DIRECT \l0x0067: IPUT  \l  (r4 I:boolean)\l  (r6 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.audioTrackNeedsConfigure boolean \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.onInputFormatChanged((r6 'this' I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.Format A[D('newFormat' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x0030: r0 'drmInitDataChanged' boolean\l  0x0035\-0x0069: r0 'drmInitDataChanged' boolean\l  0x0004\-0x0069: r1 'oldFormat' com.google.android.exoplayer2.Format\l  ?\-0x0069: r7 'newFormat' com.google.android.exoplayer2.Format\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_13 -> Node_3;
Node_14 -> Node_6;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_18;
Node_24 -> Node_21;
}

