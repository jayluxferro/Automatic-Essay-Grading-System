digraph "CFG forcom.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.supportsFormat(Lcom\/google\/android\/exoplayer2\/Format;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r4 I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer)\l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.supportsFormatInternal(com.google.android.exoplayer2.Format):int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('formatSupport' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('formatSupport' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: RETURN  (r0 I:int A[D('formatSupport' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: SGET  (r2 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('tunnelingSupport' int)]) \| (4 ?[int, float, short, byte, char]) \l0x0014: ARITH  (r0 I:?[int, boolean, short, byte, char] A[D('formatSupport' int)]) = (r0 I:?[int, boolean, short, byte, char] A[D('formatSupport' int)]) \| (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tunnelingSupport' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public final int com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer.supportsFormat((r4 'this' I:com.google.android.exoplayer2.audio.SimpleDecoderAudioRenderer A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0009: r0 'formatSupport' int\l  0x0012\-0x0016: r1 'tunnelingSupport' int\l  0x000a\-0x0017: r0 'formatSupport' int\l  ?\-0x0017: r5 'format' com.google.android.exoplayer2.Format\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_9 -> Node_8;
}

