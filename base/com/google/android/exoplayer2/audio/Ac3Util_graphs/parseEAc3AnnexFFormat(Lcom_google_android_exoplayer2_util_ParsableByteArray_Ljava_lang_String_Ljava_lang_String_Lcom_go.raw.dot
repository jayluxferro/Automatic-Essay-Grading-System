digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.parseEAc3AnnexFFormat(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Ljava\/lang\/String;Ljava\/lang\/String;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)Lcom\/google\/android\/exoplayer2\/Format;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: INVOKE  \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x0004: INVOKE  (r0 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0008: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char]) \l0x000a: ARITH  (r11 I:int) = (r0 I:int) \>\> (6 int) \l0x000c: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD int[] \l0x000e: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r11 I:?[int, short, byte, char] A[D('fscod' int)])\l \l0x0010: INVOKE  (r12 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0014: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.CHANNEL_COUNT_BY_ACMOD int[] \l0x0016: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char] A[D('nextByte' int)]) & (14 ?[int, float, short, byte, char]) \l0x0018: ARITH  (r1 I:int) = (r1 I:int) \>\> (1 int) \l0x001a: AGET  (r5 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x001c: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char] A[D('nextByte' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: ARITH  (r5 I:int A[D('channelCount' int)]) = (r5 I:int A[D('channelCount' int)]) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: CONST_STR  (r1 I:java.lang.String) =  \"audio\/eac3\" \l0x0024: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0026: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0027: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY] A[D('trackId' java.lang.String)]) \l0x002a: MOVE  (r8 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x002c: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY] A[D('language' java.lang.String)]) \l0x002d: INVOKE  (r0 I:com.google.android.exoplayer2.Format) = \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int A[D('channelCount' int)])\l  (r6 I:int A[D('sampleRate' int)])\l  (r7 I:java.util.List)\l  (r8 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r9 I:int)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: RETURN  (r0 I:com.google.android.exoplayer2.Format) \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.Format com.google.android.exoplayer2.audio.Ac3Util.parseEAc3AnnexFFormat((r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.String A[D('trackId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:java.lang.String A[D('language' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001c\-0x0031: r5 'channelCount' int\l  0x0010\-0x0031: r6 'sampleRate' int\l  0x000c\-0x0031: r11 'fscod' int\l  0x0014\-0x0031: r12 'nextByte' int\l  ?\-0x0031: r13 'data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0031: r14 'trackId' java.lang.String\l  ?\-0x0031: r15 'language' java.lang.String\l  ?\-0x0031: r16 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

