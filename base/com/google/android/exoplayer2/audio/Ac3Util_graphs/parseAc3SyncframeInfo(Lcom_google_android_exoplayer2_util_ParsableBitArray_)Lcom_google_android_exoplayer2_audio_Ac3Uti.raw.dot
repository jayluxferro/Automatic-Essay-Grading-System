digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.parseAc3SyncframeInfo(Lcom\/google\/android\/exoplayer2\/util\/ParsableBitArray;)Lcom\/google\/android\/exoplayer2\/audio\/Ac3Util$Ac3SyncFrameInfo;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r11 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.getPosition():int type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x0006: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x000a: INVOKE  (r0 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x000e: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0056 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r11 I:int A[D('initialPosition' int)])\l com.google.android.exoplayer2.util.ParsableBitArray.setPosition(int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isEac3' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0066 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST_STR  (r1 I:java.lang.String) =  \"audio\/eac3\" \l0x001a: CONST  (r0 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x001c: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x001f: CONST  (r0 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0021: INVOKE  (r0 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0025: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0027: ARITH  (r4 I:int) = (r0 I:int) * (2 int) \l0x0029: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002a: INVOKE  (r10 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x002e: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fscod' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0058 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD2 int[] \l0x0033: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0034: INVOKE  (r6 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0038: AGET  (r3 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x003a: CONST  (r8 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: ARITH  (r5 I:int) = (r8 I:int A[D('audioBlocks' int)]) * (256 int) \l0x003d: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x003e: INVOKE  (r7 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|0x0042: INVOKE  (r13 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l0x0046: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.CHANNEL_COUNT_BY_ACMOD int[] \l0x0048: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r7 I:?[int, short, byte, char] A[D('acmod' int)])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|0x004a: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lfeon' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00a6 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: ARITH  (r2 I:int) = (r6 I:int) + (r0 I:int) \l0x004f: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.Ac3Util$Ac3SyncFrameInfo) =  com.google.android.exoplayer2.audio.Ac3Util$Ac3SyncFrameInfo \l0x0051: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0052: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.Ac3Util$Ac3SyncFrameInfo)\l  (r1 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r2 I:int A[D('channelCount' int)])\l  (r3 I:int A[D('sampleRate' int)])\l  (r4 I:int A[D('frameSize' int)])\l  (r5 I:int A[D('sampleCount' int)])\l  (r6 I:com.google.android.exoplayer2.audio.Ac3Util$1)\l com.google.android.exoplayer2.audio.Ac3Util.Ac3SyncFrameInfo.\<init\>(java.lang.String, int, int, int, int, com.google.android.exoplayer2.audio.Ac3Util$1):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: RETURN  \l  (r0 I:com.google.android.exoplayer2.audio.Ac3Util$Ac3SyncFrameInfo)\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isEac3' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0059: INVOKE  (r14 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x005d: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.BLOCKS_PER_SYNCFRAME_BY_NUMBLKSCOD int[] \l0x005f: AGET  (r8 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r14 I:?[int, short, byte, char] A[D('numblkscod' int)])\l \l0x0061: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD int[] \l0x0063: AGET  (r3 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r10 I:?[int, short, byte, char] A[D('fscod' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0066|0x0066: CONST_STR  (r1 I:java.lang.String A[D('mimeType' java.lang.String)]) =  \"audio\/ac3\" \l0x0068: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x006a: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x006d: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x006e: INVOKE  (r10 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0072: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0073: INVOKE  (r9 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0077: INVOKE  (r4 I:int) = \l  (r10 I:int A[D('fscod' int)])\l  (r9 I:int A[D('frmsizecod' int)])\l com.google.android.exoplayer2.audio.Ac3Util.getAc3SyncframeSize(int, int):int type: STATIC \l0x007b: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x007d: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x0080: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0081: INVOKE  (r7 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0085: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char] A[D('acmod' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0087|0x0087: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0090 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0089|0x0089: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x008a|0x008a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('acmod' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0090 \l}"];
Node_20 [shape=record,label="{20\:\ 0x008c|0x008c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x008d: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0090|0x0090: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char] A[D('acmod' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0092|0x0092: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0098 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0094|0x0094: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0095: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0098|0x0098: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0099|0x0099: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('acmod' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x009f \l}"];
Node_26 [shape=record,label="{26\:\ 0x009b|0x009b: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x009c: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x009f|0x009f: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD int[] \l0x00a1: AGET  (r3 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r10 I:?[int, short, byte, char] A[D('fscod' int)])\l \l0x00a3: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1536(0x600, float:2.152E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a6|0x00a6: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.audio.Ac3Util$Ac3SyncFrameInfo com.google.android.exoplayer2.audio.Ac3Util.parseAc3SyncframeInfo((r15 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003b\-0x0042: r8 'audioBlocks' int\l  0x001a\-0x0056: r1 'mimeType' java.lang.String\l  0x004f\-0x0056: r2 'channelCount' int\l  0x003a\-0x0056: r3 'sampleRate' int\l  0x0029\-0x0056: r4 'frameSize' int\l  0x003d\-0x0056: r5 'sampleCount' int\l  0x0042\-0x0056: r7 'acmod' int\l  0x002e\-0x0056: r10 'fscod' int\l  0x0013\-0x0056: r12 'isEac3' boolean\l  0x0046\-0x0056: r13 'lfeon' boolean\l  0x0058\-0x0066: r1 'mimeType' java.lang.String\l  0x0065\-0x0066: r3 'sampleRate' int\l  0x0058\-0x0066: r4 'frameSize' int\l  0x0061\-0x0066: r8 'audioBlocks' int\l  0x0058\-0x0066: r10 'fscod' int\l  0x005d\-0x0066: r14 'numblkscod' int\l  0x0077\-0x00a6: r9 'frmsizecod' int\l  0x0068\-0x00a7: r1 'mimeType' java.lang.String\l  0x00a3\-0x00a7: r3 'sampleRate' int\l  0x007b\-0x00a7: r4 'frameSize' int\l  0x00a5\-0x00a7: r5 'sampleCount' int\l  0x0085\-0x00a7: r7 'acmod' int\l  0x0072\-0x00a7: r10 'fscod' int\l  0x0004\-0x00a7: r11 'initialPosition' int\l  0x0058\-0x00a7: r12 'isEac3' boolean\l  0x00a6\-0x00a7: r13 'lfeon' boolean\l  ?\-0x00a7: r15 'data' com.google.android.exoplayer2.util.ParsableBitArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_28;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_3;
Node_15 -> Node_8;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_9;
Node_28 -> Node_12;
}

