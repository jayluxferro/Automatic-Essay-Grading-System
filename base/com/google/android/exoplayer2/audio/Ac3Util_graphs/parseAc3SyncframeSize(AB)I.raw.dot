digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.parseAc3SyncframeSize([B)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[] A[D('data' byte[])]) \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0009: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char]) \l0x000b: ARITH  (r1 I:int) = (r2 I:int) \>\> (6 int) \l0x000d: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x000f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (63 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r2 I:int) = \l  (r1 I:int A[D('fscod' int)])\l  (r0 I:int A[D('frmsizecod' int)])\l com.google.android.exoplayer2.audio.Ac3Util.getAc3SyncframeSize(int, int):int type: STATIC \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.audio.Ac3Util.parseAc3SyncframeSize((r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0015: r0 'frmsizecod' int\l  0x000d\-0x0015: r1 'fscod' int\l  ?\-0x0015: r5 'data' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

