digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.getAc3SyncframeSize(II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r1 I:int) = (r6 I:int A[D('frmsizecod' int)]) \/ (2 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, byte, short, char] A[D('fscod' int)]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD int[] \l0x0006: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r5 I:?[int, byte, short, char] A[D('fscod' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r6 I:?[int, byte, short, char] A[D('frmsizecod' int)]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SYNCFRAME_SIZE_WORDS_BY_HALF_FRMSIZECOD_44_1 int[] \l0x000d: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char] A[D('halfFrmsizecod' int)]) \< (r3 I:?[int, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: RETURN  (r3 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SAMPLE_RATE_BY_FSCOD int[] \l0x0014: AGET  (r2 I:?[int, float]) = \l  (r3 I:?[int, float][])\l  (r5 I:?[int, short, byte, char] A[D('fscod' int)])\l \l0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (44100(0xac44, float:6.1797E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRate' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.SYNCFRAME_SIZE_WORDS_BY_HALF_FRMSIZECOD_44_1 int[] \l0x001d: AGET  (r3 I:?[int, float]) = \l  (r3 I:?[int, float][])\l  (r1 I:?[int, short, byte, char] A[D('halfFrmsizecod' int)])\l \l0x001f: ARITH  (r4 I:int) = (r6 I:int A[D('frmsizecod' int)]) % (2 int) \l0x0021: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x0022: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.BITRATE_BY_HALF_FRMSIZECOD int[] \l0x0027: AGET  (r0 I:?[int, float]) = \l  (r3 I:?[int, float][])\l  (r1 I:?[int, short, byte, char] A[D('halfFrmsizecod' int)])\l \l0x0029: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (32000(0x7d00, float:4.4842E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRate' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0030 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: ARITH  (r3 I:int) = (r0 I:int A[D('bitrate' int)]) * (6 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: ARITH  (r3 I:int) = (r0 I:int A[D('bitrate' int)]) * (4 int) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.audio.Ac3Util.getAc3SyncframeSize((r5 I:int A[D('fscod' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('frmsizecod' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0029\-0x0032: r0 'bitrate' int\l  0x0002\-0x0032: r1 'halfFrmsizecod' int\l  0x0016\-0x0032: r2 'sampleRate' int\l  ?\-0x0032: r5 'fscod' int\l  ?\-0x0032: r6 'frmsizecod' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_8;
Node_15 -> Node_8;
}

