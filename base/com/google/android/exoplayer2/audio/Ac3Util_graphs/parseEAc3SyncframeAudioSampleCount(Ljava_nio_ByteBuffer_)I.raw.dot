digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.parseEAc3SyncframeAudioSampleCount(Ljava\/nio\/ByteBuffer;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r3 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.position():int type: VIRTUAL \l0x0004: ARITH  (r1 I:int) = (r1 I:int) + (4 int) \l0x0006: INVOKE  (r1 I:byte) = \l  (r3 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l  (r1 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x000a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char]) \l0x000c: ARITH  (r0 I:int) = (r1 I:int) \>\> (6 int) \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fscod' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: ARITH  (r1 I:int) = (r1 I:int) * (256 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN  (r1 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: SGET  (r1 I:int[]) =  com.google.android.exoplayer2.audio.Ac3Util.BLOCKS_PER_SYNCFRAME_BY_NUMBLKSCOD int[] \l0x0017: INVOKE  (r2 I:int) = \l  (r3 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.position():int type: VIRTUAL \l0x001b: ARITH  (r2 I:int) = (r2 I:int) + (4 int) \l0x001d: INVOKE  (r2 I:byte) = \l  (r3 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l  (r2 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x0021: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (48 ?[int, float, short, byte, char]) \l0x0023: ARITH  (r2 I:int) = (r2 I:int) \>\> (4 int) \l0x0025: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.audio.Ac3Util.parseEAc3SyncframeAudioSampleCount((r3 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0027: r0 'fscod' int\l  ?\-0x0027: r3 'buffer' java.nio.ByteBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

