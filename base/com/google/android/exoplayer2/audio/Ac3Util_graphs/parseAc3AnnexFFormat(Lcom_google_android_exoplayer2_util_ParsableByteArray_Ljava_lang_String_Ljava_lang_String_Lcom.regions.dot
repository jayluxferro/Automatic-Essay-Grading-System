digraph "CFG forcom.google.android.exoplayer2.audio.Ac3Util.parseAc3AnnexFFormat(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Ljava\/lang\/String;Ljava\/lang\/String;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)Lcom\/google\/android\/exoplayer2\/Format;" {
subgraph cluster_Region_461961736 {
label = "R(3:0|(1:2)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r6 = SAMPLE_RATE_BY_FSCOD[(r13.readUnsignedByte() & com.google.android.exoplayer2.extractor.p046ts.PsExtractor.AUDIO_STREAM) \>\> 6]\lint int r12 = r13.readUnsignedByte()\lint r5 = CHANNEL_COUNT_BY_ACMOD[(r12 & 56) \>\> 3]\l}"];
subgraph cluster_IfRegion_381967057 {
label = "IF [B:1:0x001a] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001a|if ((r12 & 4) != 0) goto L_0x001c\l}"];
subgraph cluster_Region_1450623467 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001c|r5++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x002d|RETURN\l|return com.google.android.exoplayer2.Format.createAudioSampleFormat(r14, com.google.android.exoplayer2.util.MimeTypes.AUDIO_AC3, (java.lang.String) null, \-1, \-1, r5, r6, (java.util.List\<byte[]\>) null, r16, 0, r15)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x001e|PHI: r5 \l  PHI: (r5v1 'channelCount' int) = (r5v0 'channelCount' int), (r5v2 'channelCount' int) binds: [B:1:0x001a, B:2:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.Format com.google.android.exoplayer2.audio.Ac3Util.parseAc3AnnexFFormat((r13v0 'data' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'trackId' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'language' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

