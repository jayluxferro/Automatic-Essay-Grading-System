digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.reset()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0004: INVOKE  (r4 I:boolean) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.isInitialized():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x008e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.submittedPcmBytes long \l0x000c: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.submittedEncodedFrames long \l0x000e: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.writtenPcmBytes long \l0x0010: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.writtenEncodedFrames long \l0x0012: IPUT  \l  (r9 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.framesPerEncodedSample int \l0x0014: IGET  (r4 I:com.google.android.exoplayer2.PlaybackParameters) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0043 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IGET  (r4 I:com.google.android.exoplayer2.PlaybackParameters) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l0x001a: IPUT  \l  (r4 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParameters com.google.android.exoplayer2.PlaybackParameters \l0x001c: IPUT  \l  (r8 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint\>) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playbackParametersCheckpoints java.util.LinkedList \l0x0020: INVOKE  (r4 I:java.util.LinkedList) java.util.LinkedList.clear():void type: VIRTUAL \l0x0023: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParametersOffsetUs long \l0x0025: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParametersPositionUs long \l0x0027: IPUT  \l  (r8 I:java.nio.ByteBuffer)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l0x0029: IPUT  \l  (r8 I:java.nio.ByteBuffer)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.outputBuffer java.nio.ByteBuffer \l0x002b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x002e: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:12:0x005a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0033: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0035: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.flush():void type: INTERFACE \l0x0038: IGET  (r4 I:java.nio.ByteBuffer[]) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x003a: INVOKE  (r5 I:java.nio.ByteBuffer) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.getOutput():java.nio.ByteBuffer type: INTERFACE \l0x003e: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0040: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint\>) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playbackParametersCheckpoints java.util.LinkedList \l0x0045: INVOKE  (r4 I:boolean) = (r4 I:java.util.LinkedList) java.util.LinkedList.isEmpty():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint\>) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playbackParametersCheckpoints java.util.LinkedList \l0x004d: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.LinkedList) java.util.LinkedList.getLast():java.lang.Object type: VIRTUAL \l0x0051: CHECK_CAST  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint) = (com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint) (r4 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  (r4 I:com.google.android.exoplayer2.PlaybackParameters) = \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint)\l com.google.android.exoplayer2.audio.AudioTrack.PlaybackParametersCheckpoint.access$200(com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint):com.google.android.exoplayer2.PlaybackParameters type: STATIC \l0x0057: IPUT  \l  (r4 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParameters com.google.android.exoplayer2.PlaybackParameters \l}"];
Node_12 [shape=record,label="{12\:\ 0x005a|0x005a: IPUT  \l  (r9 I:boolean)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.handledEndOfStream boolean \l0x005c: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x005d: IPUT  \l  (r4 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x005f: IPUT  \l  (r8 I:java.nio.ByteBuffer)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0061: IPUT  \l  (r9 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l0x0063: IPUT  \l  (r9 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l0x0065: IPUT  \l  (r6 I:long)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.latencyUs long \l0x0067: INVOKE  (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.resetSyncParams():void type: DIRECT \l0x006a: IGET  (r4 I:android.media.AudioTrack) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x006c: INVOKE  (r2 I:int) = (r4 I:android.media.AudioTrack) android.media.AudioTrack.getPlayState():int type: VIRTUAL \l0x0070: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0071|0x0071: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('playState' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0078 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0073|0x0073: IGET  (r4 I:android.media.AudioTrack) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x0075: INVOKE  (r4 I:android.media.AudioTrack) android.media.AudioTrack.pause():void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0078|0x0078: IGET  (r3 I:android.media.AudioTrack) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x007a: IPUT  \l  (r8 I:android.media.AudioTrack)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x007c: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x007e: INVOKE  \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l  (r8 I:android.media.AudioTrack)\l  (r9 I:boolean)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.reconfigure(android.media.AudioTrack, boolean):void type: VIRTUAL \l0x0081: IGET  (r4 I:android.os.ConditionVariable) = (r10 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.releasingConditionVariable android.os.ConditionVariable \l0x0083: INVOKE  (r4 I:android.os.ConditionVariable) android.os.ConditionVariable.close():void type: VIRTUAL \l0x0086: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$1) =  com.google.android.exoplayer2.audio.AudioTrack$1 \l0x0088: INVOKE  \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$1)\l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r3 I:android.media.AudioTrack A[D('toRelease' android.media.AudioTrack)])\l com.google.android.exoplayer2.audio.AudioTrack.1.\<init\>(com.google.android.exoplayer2.audio.AudioTrack, android.media.AudioTrack):void type: DIRECT \l0x008b: INVOKE  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$1) com.google.android.exoplayer2.audio.AudioTrack.1.start():void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x008e|0x008e: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.AudioTrack.reset((r10 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0035\-0x0043: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x002c\-0x0043: r1 'i' int\l  0x005a\-0x008e: r1 'i' int\l  0x0070\-0x008e: r2 'playState' int\l  0x007a\-0x008e: r3 'toRelease' android.media.AudioTrack\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_5;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

