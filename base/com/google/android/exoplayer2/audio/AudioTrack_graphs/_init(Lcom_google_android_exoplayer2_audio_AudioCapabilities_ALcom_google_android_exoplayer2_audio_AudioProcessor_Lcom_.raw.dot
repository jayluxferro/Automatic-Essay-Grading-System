digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.\<init\>(Lcom\/google\/android\/exoplayer2\/audio\/AudioCapabilities;[Lcom\/google\/android\/exoplayer2\/audio\/AudioProcessor;Lcom\/google\/android\/exoplayer2\/audio\/AudioTrack$Listener;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r6 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0006: IPUT  \l  (r7 I:com.google.android.exoplayer2.audio.AudioCapabilities A[D('audioCapabilities' com.google.android.exoplayer2.audio.AudioCapabilities)])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioCapabilities com.google.android.exoplayer2.audio.AudioCapabilities \l0x0008: IPUT  \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$Listener A[D('listener' com.google.android.exoplayer2.audio.AudioTrack$Listener)])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.listener com.google.android.exoplayer2.audio.AudioTrack$Listener \l0x000a: NEW_INSTANCE  (r0 I:android.os.ConditionVariable) =  android.os.ConditionVariable \l0x000c: INVOKE  (r0 I:android.os.ConditionVariable), (r4 I:boolean) android.os.ConditionVariable.\<init\>(boolean):void type: DIRECT \l0x000f: IPUT  \l  (r0 I:android.os.ConditionVariable)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.releasingConditionVariable android.os.ConditionVariable \l0x0011: SGET  (r0 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:5:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: CONST_CLASS  (r1 I:java.lang.Class\<android.media.AudioTrack\>) =  android.media.AudioTrack.class \l0x0019: CONST_STR  (r2 I:java.lang.String) =  \"getLatency\" \l0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|SYNTHETIC\lSplitter:B:3:0x001c\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x001c\l|0x001c: CHECK_CAST  (r0 I:java.lang.Class[]) = (java.lang.Class[]) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ NoSuchMethodException \-\> 0x0095 \}, TRY_ENTER]\l0x001e: INVOKE  (r0 I:java.lang.reflect.Method) = \l  (r1 I:java.lang.Class)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0095 \}]\l0x0022: IPUT  \l  (r0 I:java.lang.reflect.Method)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.getLatencyMethod java.lang.reflect.Method A[Catch:\{ NoSuchMethodException \-\> 0x0095 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: SGET  (r0 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0026: CONST  (r1 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:10:0x008d \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtilV19) =  com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtilV19 \l0x002c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtilV19)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtilV19.\<init\>():void type: DIRECT \l0x002f: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor) =  com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor \l0x0033: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor.\<init\>():void type: DIRECT \l0x0036: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.channelMappingAudioProcessor com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor \l0x0038: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.SonicAudioProcessor) =  com.google.android.exoplayer2.audio.SonicAudioProcessor \l0x003a: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.\<init\>():void type: DIRECT \l0x003d: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.sonicAudioProcessor com.google.android.exoplayer2.audio.SonicAudioProcessor \l0x003f: ARRAY_LENGTH  (r0 I:int) = \l  (r8 I:?[] A[D('audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[])])\l \l0x0040: ARITH  (r0 I:int) = (r0 I:int) + (3 int) \l0x0042: NEW_ARRAY  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0044: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0046: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0048: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor) =  com.google.android.exoplayer2.audio.ResamplingAudioProcessor \l0x004a: INVOKE  \l  (r1 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.\<init\>():void type: DIRECT \l0x004d: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x004f: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0051: IGET  (r1 I:com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.channelMappingAudioProcessor com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor \l0x0053: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0055: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0057: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0058: ARRAY_LENGTH  (r2 I:int) = \l  (r8 I:?[] A[D('audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[])])\l \l0x0059: INVOKE  \l  (r8 I:java.lang.Object A[D('audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[])])\l  (r3 I:int)\l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x005c: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x005e: ARRAY_LENGTH  (r1 I:int) = \l  (r8 I:?[] A[D('audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[])])\l \l0x005f: ARITH  (r1 I:int) = (r1 I:int) + (2 int) \l0x0061: IGET  (r2 I:com.google.android.exoplayer2.audio.SonicAudioProcessor) = (r6 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.sonicAudioProcessor com.google.android.exoplayer2.audio.SonicAudioProcessor \l0x0063: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0065: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0067: NEW_ARRAY  (r0 I:long[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0069: IPUT  \l  (r0 I:long[])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playheadOffsets long[] \l0x006b: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x006d: IPUT  \l  (r0 I:float)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.volume float \l0x006f: IPUT  \l  (r3 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l0x0071: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0072: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.streamType int \l0x0074: IPUT  \l  (r3 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l0x0076: SGET  (r0 I:com.google.android.exoplayer2.PlaybackParameters) =  com.google.android.exoplayer2.PlaybackParameters.DEFAULT com.google.android.exoplayer2.PlaybackParameters \l0x0078: IPUT  \l  (r0 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParameters com.google.android.exoplayer2.PlaybackParameters \l0x007a: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x007b: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x007d: NEW_ARRAY  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.audio.AudioProcessor[] \l0x007f: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor[])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0081: NEW_ARRAY  (r0 I:java.nio.ByteBuffer[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.nio.ByteBuffer[] \l0x0083: IPUT  \l  (r0 I:java.nio.ByteBuffer[])\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x0085: NEW_INSTANCE  (r0 I:java.util.LinkedList) =  java.util.LinkedList \l0x0087: INVOKE  (r0 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x008a: IPUT  \l  (r0 I:java.util.LinkedList\<com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint\>)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playbackParametersCheckpoints java.util.LinkedList \l}"];
Node_9 [shape=record,label="{9\:\ 0x008c|0x008c: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x008d|0x008d: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) =  com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x008f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l  (r5 I:com.google.android.exoplayer2.audio.AudioTrack$1)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.\<init\>(com.google.android.exoplayer2.audio.AudioTrack$1):void type: DIRECT \l0x0092: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l  (r6 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l}"];
Node_11 [shape=record,label="{11\:\ 0x0095|ExcHandler: NoSuchMethodException null\lSplitter:B:3:0x001c\l|0x0095: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.AudioTrack.\<init\>((r6 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.audio.AudioCapabilities A[D('audioCapabilities' com.google.android.exoplayer2.audio.AudioCapabilities), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.google.android.exoplayer2.audio.AudioProcessor[] A[D('audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.android.exoplayer2.audio.AudioTrack$Listener A[D('listener' com.google.android.exoplayer2.audio.AudioTrack$Listener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0096: r7 'audioCapabilities' com.google.android.exoplayer2.audio.AudioCapabilities\l  ?\-0x0096: r8 'audioProcessors' com.google.android.exoplayer2.audio.AudioProcessor[]\l  ?\-0x0096: r9 'listener' com.google.android.exoplayer2.audio.AudioTrack$Listener\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_8;
Node_11 -> Node_5;
}

