digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.drainAudioProcessorsToEndOfStream()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0005: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: IGET  (r2 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r2 I:boolean) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.passthrough boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r2 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0012: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IPUT  \l  (r2 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x0015: CONST  (r1 I:?[boolean, int, float, short, byte, char] A[D('audioProcessorNeedsEndOfStream' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r2 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x0018: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x001a: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r2 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x001f: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x0021: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioProcessorNeedsEndOfStream' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0028 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.queueEndOfStream():void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r6 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.processBuffers(long):void type: DIRECT \l0x002b: INVOKE  (r2 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.isEnded():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r3 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: CONST  (r1 I:?[boolean, int, float, short, byte, char] A[D('audioProcessorNeedsEndOfStream' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0035: IGET  (r2 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x0037: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0039: IPUT  \l  (r2 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: IGET  (r2 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffer java.nio.ByteBuffer \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0049 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: IGET  (r2 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffer java.nio.ByteBuffer \l0x0042: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r2 I:java.nio.ByteBuffer)\l  (r6 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.writeBuffer(java.nio.ByteBuffer, long):boolean type: DIRECT \l0x0045: IGET  (r2 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffer java.nio.ByteBuffer \l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|0x0047: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|0x0049: IPUT  \l  (r5 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingAudioProcessorIndex int \l0x004b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.audio.AudioTrack.drainAudioProcessorsToEndOfStream((r8 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0023\-0x0031: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x0034\-0x003c: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x0008\-0x004c: r1 'audioProcessorNeedsEndOfStream' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$WriteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_14 -> Node_5;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_13;
}

