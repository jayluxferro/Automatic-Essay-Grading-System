digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.writeNonBlockingWithAvSyncV21(Landroid\/media\/AudioTrack;Ljava\/nio\/ByteBuffer;IJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0007: INVOKE  (r3 I:java.nio.ByteBuffer) = (r3 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x000b: IPUT  \l  (r3 I:java.nio.ByteBuffer)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x000d: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x000f: SGET  (r4 I:java.nio.ByteOrder) =  java.nio.ByteOrder.BIG_ENDIAN java.nio.ByteOrder \l0x0011: INVOKE  (r3 I:java.nio.ByteBuffer), (r4 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x0014: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0016: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1431633921(0x55550001, float:1.46372496E13) ?[int, float, short, byte, char])\l \l0x0019: INVOKE  (r3 I:java.nio.ByteBuffer), (r4 I:int) java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0023: INVOKE  \l  (r3 I:java.nio.ByteBuffer)\l  (r4 I:int)\l  (r11 I:int A[D('size' int)])\l java.nio.ByteBuffer.putInt(int, int):java.nio.ByteBuffer type: VIRTUAL \l0x0026: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0028: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x002a: CONST  (r6 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x002c: ARITH  (r6 I:long) = (r6 I:long) * (r12 I:long A[D('presentationTimeUs' long)]) \l0x002d: INVOKE  (r3 I:java.nio.ByteBuffer), (r4 I:int), (r6 I:long) java.nio.ByteBuffer.putLong(int, long):java.nio.ByteBuffer type: VIRTUAL \l0x0030: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0032: INVOKE  (r3 I:java.nio.ByteBuffer), (r2 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0035: IPUT  \l  (r11 I:int A[D('size' int)])\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0039: INVOKE  (r0 I:int) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.remaining():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|0x003d: IF  (r0 I:?[int, byte, short, char] A[D('avSyncHeaderBytesRemaining' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x004e \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|0x003f: IGET  (r3 I:java.nio.ByteBuffer) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.avSyncHeader java.nio.ByteBuffer \l0x0041: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0042: INVOKE  (r1 I:int) = \l  (r9 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack)])\l  (r3 I:java.nio.ByteBuffer)\l  (r0 I:int A[D('avSyncHeaderBytesRemaining' int)])\l  (r4 I:int)\l android.media.AudioTrack.write(java.nio.ByteBuffer, int, int):int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IF  (r1 I:?[int, byte, short, char] A[D('result' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x004c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: IPUT  \l  (r2 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l0x004a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: RETURN  (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: IF  (r1 I:?[int, byte, short, char] A[D('result' int)]) \< (r0 I:?[int, byte, short, char] A[D('avSyncHeaderBytesRemaining' int)])  \-\> B:11:0x004b \l}"];
Node_13 [shape=record,label="{13\:\ 0x004e|0x004e: INVOKE  (r1 I:int A[D('result' int)]) = \l  (r9 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack)])\l  (r10 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l  (r11 I:int A[D('size' int)])\l com.google.android.exoplayer2.audio.AudioTrack.writeNonBlockingV21(android.media.AudioTrack, java.nio.ByteBuffer, int):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: IF  (r1 I:?[int, byte, short, char] A[D('result' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0058 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|0x0054: IPUT  \l  (r2 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l0x0056: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: IGET  (r2 I:int) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l0x005a: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int A[D('result' int)]) \l0x005b: IPUT  \l  (r2 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.bytesUntilNextAvSync int \l0x005d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)])\l \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.AudioTrack.writeNonBlockingWithAvSyncV21((r8 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]), (r9 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('presentationTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0046\-0x004e: r1 'result' int\l  0x003d\-0x005e: r0 'avSyncHeaderBytesRemaining' int\l  0x0052\-0x005e: r1 'result' int\l  ?\-0x005e: r9 'audioTrack' android.media.AudioTrack\l  ?\-0x005e: r10 'buffer' java.nio.ByteBuffer\l  ?\-0x005e: r11 'size' int\l  ?\-0x005e: r12 'presentationTimeUs' long\lAnnotation[BUILD, android.annotation.TargetApi, \{value=21\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_11;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_11;
}

