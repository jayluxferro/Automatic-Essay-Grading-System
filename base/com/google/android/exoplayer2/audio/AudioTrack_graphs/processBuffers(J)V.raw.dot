digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.processBuffers(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0002: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l0x0003: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char] A[D('index' int)]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r2 I:?[int, byte, short, char] A[D('index' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r5 I:java.nio.ByteBuffer[]) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x000a: ARITH  (r6 I:int) = (r2 I:int A[D('index' int)]) + (\-1 int) \l0x000c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('count' int)])  \-\> B:13:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  \l  (r7 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r3 I:java.nio.ByteBuffer A[D('input' java.nio.ByteBuffer)])\l  (r8 I:long A[D('avSyncPresentationTimeUs' long)])\l com.google.android.exoplayer2.audio.AudioTrack.writeBuffer(java.nio.ByteBuffer, long):boolean type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r5 I:boolean) = \l  (r3 I:java.nio.ByteBuffer A[D('input' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r5 I:java.nio.ByteBuffer) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IGET  (r3 I:java.nio.ByteBuffer) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: SGET  (r3 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.AudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IGET  (r5 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0026: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r5 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char] A[D('index' int)])\l \l0x0028: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l  (r3 I:java.nio.ByteBuffer A[D('input' java.nio.ByteBuffer)])\l com.google.android.exoplayer2.audio.AudioProcessor.queueInput(java.nio.ByteBuffer):void type: INTERFACE \l0x002b: INVOKE  (r4 I:java.nio.ByteBuffer) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.getOutput():java.nio.ByteBuffer type: INTERFACE \l0x002f: IGET  (r5 I:java.nio.ByteBuffer[]) = (r7 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x0031: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char] A[D('index' int)])\l  (r4 I:?[OBJECT, ARRAY] A[D('output' java.nio.ByteBuffer)])\l \l0x0033: INVOKE  (r5 I:boolean) = \l  (r4 I:java.nio.ByteBuffer A[D('output' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: ARITH  (r2 I:int A[D('index' int)]) = (r2 I:int A[D('index' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: ARITH  (r2 I:int A[D('index' int)]) = (r2 I:int A[D('index' int)]) + (\-1 int) \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.AudioTrack.processBuffers((r7 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('avSyncPresentationTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0019: r3 'input' java.nio.ByteBuffer\l  0x0028\-0x003c: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x002f\-0x003c: r4 'output' java.nio.ByteBuffer\l  0x0003\-0x003e: r1 'count' int\l  0x0004\-0x003e: r2 'index' int\l  0x0024\-0x003e: r3 'input' java.nio.ByteBuffer\l  ?\-0x003e: r8 'avSyncPresentationTimeUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$WriteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_4;
Node_12 -> Node_4;
Node_13 -> Node_14;
Node_14 -> Node_6;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_1;
Node_16 -> Node_1;
}

