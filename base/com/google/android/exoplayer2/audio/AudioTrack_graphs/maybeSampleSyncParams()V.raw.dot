digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.maybeSampleSyncParams()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x0004: INVOKE  (r10 I:long) = \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPositionUs():long type: VIRTUAL \l0x0008: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l0x000a: CMP_L  (r9 I:int) = (r10 I:long A[D('playbackPositionUs' long)]), (r14 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r14 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0013: CONST  (r16 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0015: ARITH  (r12 I:long) = (r14 I:long) \/ (r16 I:long) \l0x0017: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0019: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.lastPlayheadSampleTimeUs long \l0x001b: ARITH  (r14 I:long) = (r12 I:long A[D('systemClockUs' long)]) \- (r14 I:long) \l0x001d: CONST  (r16 I:?[long, double]) = (30000(0x7530, double:1.4822E\-319) ?[long, double]) \l0x001f: CMP_L  (r9 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x007a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0025: IGET  (r9 I:long[]) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsets long[] \l0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0029: IGET  (r14 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.nextPlayheadOffsetIndex int \l0x002b: ARITH  (r16 I:long) = (r10 I:long A[D('playbackPositionUs' long)]) \- (r12 I:long A[D('systemClockUs' long)]) \l0x002d: APUT  \l  (r9 I:?[long, double][])\l  (r14 I:?[int, short, byte, char])\l  (r16 I:?[long, double])\l \l0x002f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0031: IGET  (r9 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.nextPlayheadOffsetIndex int \l0x0033: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x0035: ARITH  (r9 I:int) = (r9 I:int) % (10 int) \l0x0037: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0039: IPUT  \l  (r9 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.nextPlayheadOffsetIndex int \l0x003b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x003d: IGET  (r9 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsetCount int \l0x003f: CONST  (r14 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0041|0x0041: IF  (r9 I:?[int, byte, short, char]) \>= (r14 I:?[int, byte, short, char])  \-\> B:8:0x004d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0045: IGET  (r9 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsetCount int \l0x0047: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x0049: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004b: IPUT  \l  (r9 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.playheadOffsetCount int \l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004f: IPUT  \l  (r12 I:long A[D('systemClockUs' long)])\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.lastPlayheadSampleTimeUs long \l0x0051: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l0x0053: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0055: IPUT  \l  (r14 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.smoothedPlayheadOffsetUs long \l0x0057: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005a: IGET  (r9 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsetCount int \l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|0x005c: IF  (r7 I:?[int, byte, short, char] A[D('i' int)]) \>= (r9 I:?[int, byte, short, char])  \-\> B:12:0x007a \l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0060: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.smoothedPlayheadOffsetUs long \l0x0062: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0064: IGET  (r9 I:long[]) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsets long[] \l0x0066: AGET  (r16 I:?[long, double]) = \l  (r9 I:?[long, double][])\l  (r7 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0068: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x006a: IGET  (r9 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playheadOffsetCount int \l0x006c: CAST  (r0 I:long) = (long) (r9 I:int) \l0x006d: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x006f: ARITH  (r16 I:long) = (r16 I:long) \/ (r18 I:long) \l0x0071: ARITH  (r14 I:long) = (r14 I:long) + (r16 I:long) \l0x0073: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0075: IPUT  \l  (r14 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.smoothedPlayheadOffsetUs long \l0x0077: ARITH  (r7 I:int A[D('i' int)]) = (r7 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: INVOKE  (r9 I:boolean) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.needsPassthroughWorkarounds():boolean type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x007e|0x007e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0080|0x0080: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0082: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.lastTimestampSampleTimeUs long \l0x0084: ARITH  (r14 I:long) = (r12 I:long A[D('systemClockUs' long)]) \- (r14 I:long) \l0x0086: CONST  (r16 I:?[long, double]) = (500000(0x7a120, double:2.47033E\-318) ?[long, double]) \l0x0089: CMP_L  (r9 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x008b|0x008b: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:2:0x000e \l}"];
Node_16 [shape=record,label="{16\:\ 0x008d|0x008d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008f: IGET  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x0091: INVOKE  (r9 I:boolean) = \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.updateTimestamp():boolean type: VIRTUAL \l0x0095: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0097: IPUT  \l  (r9 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTimestampSet boolean \l0x0099: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x009b: IGET  (r9 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTimestampSet boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x009d|0x009d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00c0 \l}"];
Node_18 [shape=record,label="{18\:\ 0x009f|0x009f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a1: IGET  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x00a3: INVOKE  (r14 I:long) = \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getTimestampNanoTime():long type: VIRTUAL \l0x00a7: CONST  (r16 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x00a9: ARITH  (r4 I:long) = (r14 I:long) \/ (r16 I:long) \l0x00ab: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ad: IGET  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x00af: INVOKE  (r2 I:long) = \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getTimestampFramePosition():long type: VIRTUAL \l0x00b3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00b5: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.resumeSystemTimeUs long \l0x00b7: CMP_L  (r9 I:int) = (r4 I:long A[D('audioTimestampUs' long)]), (r14 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x00b9|0x00b9: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:31:0x0137 \l}"];
Node_20 [shape=record,label="{20\:\ 0x00bb|0x00bb: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00be: IPUT  \l  (r9 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTimestampSet boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x00c0|0x00c0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00c2: IGET  (r9 I:java.lang.reflect.Method) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.getLatencyMethod java.lang.reflect.Method \l}"];
Node_22 [shape=record,label="{22\:\ 0x00c4|0x00c4: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0131 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00c6|0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00c8: IGET  (r9 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.passthrough boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ca|0x00ca: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0131 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00cc|0x00cc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00ce|SYNTHETIC\lSplitter:B:26:0x00ce\l}"];
Node_27 [shape=record,label="{27\:\ ?|Splitter:B:26:0x00ce\l|0x00ce: IGET  (r14 I:java.lang.reflect.Method) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.getLatencyMethod java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x01e4 \}, TRY_ENTER]\l0x00d0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00d2: IGET  (r15 I:android.media.AudioTrack) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00d4: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00d5: CHECK_CAST  (r9 I:java.lang.Object[]) = (java.lang.Object[]) (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00d7: INVOKE  (r9 I:java.lang.Object) = \l  (r14 I:java.lang.reflect.Method)\l  (r15 I:java.lang.Object)\l  (r9 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00db: CHECK_CAST  (r9 I:java.lang.Integer) = (java.lang.Integer) (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00dd: INVOKE  (r9 I:int) = (r9 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00e1: CAST  (r14 I:long) = (long) (r9 I:int) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00e2: CONST  (r16 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00e4: ARITH  (r14 I:long) = (r14 I:long) * (r16 I:long) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00e8: IGET  (r0 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSizeUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00ea: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00ec: ARITH  (r14 I:long) = (r14 I:long) \- (r16 I:long) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00ee: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00f0: IPUT  \l  (r14 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00f2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00f4: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00f6: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00f8: INVOKE  (r14 I:long) = (r14 I:long), (r16 I:long) java.lang.Math.max(long, long):long type: STATIC A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00fc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x00fe: IPUT  \l  (r14 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0100: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0102: IGET  (r14 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0104: CONST  (r16 I:?[long, double]) = (5000000(0x4c4b40, double:2.470328E\-317) ?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0107: CMP_L  (r9 I:int) = (r14 I:long), (r16 I:long) A[Catch:\{ Exception \-\> 0x01e4 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0109|0x0109: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:30:0x0131 A[Catch:\{ Exception \-\> 0x01e4 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x010b|0x010b: CONST_STR  (r9 I:java.lang.String) =  \"AudioTrack\" A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x010d: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x010f: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0112: CONST_STR  (r15 I:java.lang.String) =  \"Ignoring impossibly large audio latency: \" A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0114: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0118: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x011a: IGET  (r0 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x011c: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x011e: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0120: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0124: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x0128: INVOKE  (r9 I:java.lang.String), (r14 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x012b: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x012d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x01e4 \}]\l0x012f: IPUT  \l  (r14 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.latencyUs long A[Catch:\{ Exception \-\> 0x01e4 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0131|0x0131: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0133: IPUT  \l  (r12 I:long A[D('systemClockUs' long)])\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.lastTimestampSampleTimeUs long \l}"];
Node_31 [shape=record,label="{31\:\ 0x0137|0x0137: ARITH  (r14 I:long) = (r4 I:long A[D('audioTimestampUs' long)]) \- (r12 I:long A[D('systemClockUs' long)]) \l0x0139: INVOKE  (r14 I:long) = (r14 I:long) java.lang.Math.abs(long):long type: STATIC \l0x013d: CONST  (r16 I:?[long, double]) = (5000000(0x4c4b40, double:2.470328E\-317) ?[long, double]) \l0x0140: CMP_L  (r9 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0142|0x0142: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:38:0x018b \l}"];
Node_33 [shape=record,label="{33\:\ 0x0144|0x0144: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0146: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0149: CONST_STR  (r14 I:java.lang.String) =  \"Spurious audio timestamp (system clock mismatch): \" \l0x014b: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x014f: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r2 I:long A[D('audioTimestampFramePosition' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0153: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x0155: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0159: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r4 I:long A[D('audioTimestampUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x015d: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x015f: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0163: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r12 I:long A[D('systemClockUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0167: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x0169: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x016d: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r10 I:long A[D('playbackPositionUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0171: INVOKE  (r8 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0175: SGET  (r9 I:boolean) =  com.google.android.exoplayer2.audio.AudioTrack.failOnSpuriousAudioTimestamp boolean \l}"];
Node_34 [shape=record,label="{34\:\ 0x0177|0x0177: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x017f \l}"];
Node_35 [shape=record,label="{35\:\ 0x0179|0x0179: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException) =  com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException \l0x017b: INVOKE  \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException)\l  (r8 I:java.lang.String A[D('message' java.lang.String)])\l com.google.android.exoplayer2.audio.AudioTrack.InvalidAudioTrackTimestampException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x017e|0x017e: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x017f|0x017f: CONST_STR  (r9 I:java.lang.String) =  \"AudioTrack\" \l0x0181: INVOKE  \l  (r9 I:java.lang.String)\l  (r8 I:java.lang.String A[D('message' java.lang.String)])\l android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0184: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0185: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0187: IPUT  \l  (r9 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTimestampSet boolean \l}"];
Node_38 [shape=record,label="{38\:\ 0x018b|0x018b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x018d: INVOKE  (r14 I:long) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r2 I:long A[D('audioTimestampFramePosition' long)])\l com.google.android.exoplayer2.audio.AudioTrack.framesToDurationUs(long):long type: DIRECT \l0x0191: ARITH  (r14 I:long) = (r14 I:long) \- (r10 I:long A[D('playbackPositionUs' long)]) \l0x0192: INVOKE  (r14 I:long) = (r14 I:long) java.lang.Math.abs(long):long type: STATIC \l0x0196: CONST  (r16 I:?[long, double]) = (5000000(0x4c4b40, double:2.470328E\-317) ?[long, double]) \l0x0199: CMP_L  (r9 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_39 [shape=record,label="{39\:\ 0x019b|0x019b: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x00c0 \l}"];
Node_40 [shape=record,label="{40\:\ 0x019d|0x019d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x019f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x01a2: CONST_STR  (r14 I:java.lang.String) =  \"Spurious audio timestamp (frame position mismatch): \" \l0x01a4: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01a8: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r2 I:long A[D('audioTimestampFramePosition' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x01ac: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x01ae: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01b2: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r4 I:long A[D('audioTimestampUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x01b6: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x01b8: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01bc: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r12 I:long A[D('systemClockUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x01c0: CONST_STR  (r14 I:java.lang.String) =  \", \" \l0x01c2: INVOKE  (r9 I:java.lang.StringBuilder) = (r9 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01c6: INVOKE  (r9 I:java.lang.StringBuilder) = \l  (r9 I:java.lang.StringBuilder)\l  (r10 I:long A[D('playbackPositionUs' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x01ca: INVOKE  (r8 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x01ce: SGET  (r9 I:boolean) =  com.google.android.exoplayer2.audio.AudioTrack.failOnSpuriousAudioTimestamp boolean \l}"];
Node_41 [shape=record,label="{41\:\ 0x01d0|0x01d0: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x01d8 \l}"];
Node_42 [shape=record,label="{42\:\ 0x01d2|0x01d2: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException) =  com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException \l0x01d4: INVOKE  \l  (r9 I:com.google.android.exoplayer2.audio.AudioTrack$InvalidAudioTrackTimestampException)\l  (r8 I:java.lang.String A[D('message' java.lang.String)])\l com.google.android.exoplayer2.audio.AudioTrack.InvalidAudioTrackTimestampException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x01d7|0x01d7: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x01d8|0x01d8: CONST_STR  (r9 I:java.lang.String) =  \"AudioTrack\" \l0x01da: INVOKE  \l  (r9 I:java.lang.String)\l  (r8 I:java.lang.String A[D('message' java.lang.String)])\l android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x01dd: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01de: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01e0: IPUT  \l  (r9 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTimestampSet boolean \l}"];
Node_45 [shape=record,label="{45\:\ 0x01e4|ExcHandler: Exception null\lSplitter:B:26:0x00ce\l|0x01e4: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_46 [shape=record,label="{46\:\ 0x01e5|0x01e5: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01e8: IPUT  \l  (r9 I:java.lang.reflect.Method)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.getLatencyMethod java.lang.reflect.Method \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.AudioTrack.maybeSampleSyncParams((r20 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0058\-0x007a: r7 'i' int\l  0x00b3\-0x00c0: r2 'audioTimestampFramePosition' long\l  0x00ab\-0x00c0: r4 'audioTimestampUs' long\l  0x0175\-0x018b: r8 'message' java.lang.String\l  0x0137\-0x01e4: r2 'audioTimestampFramePosition' long\l  0x0137\-0x01e4: r4 'audioTimestampUs' long\l  0x01ce\-0x01e4: r8 'message' java.lang.String\l  0x01e5\-0x01eb: r6 'e' java.lang.Exception\l  0x0008\-0x01eb: r10 'playbackPositionUs' long\l  0x0017\-0x01eb: r12 'systemClockUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_13;
Node_13 -> Node_2;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_2;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_45;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_2;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_37 -> Node_21;
Node_38 -> Node_39;
Node_39 -> Node_21;
Node_39 -> Node_40[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_44 -> Node_21;
Node_45 -> Node_46;
Node_46 -> Node_30;
}

