digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.checkAudioTrackInitialized()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:android.media.AudioTrack) = (r5 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x0003: INVOKE  (r0 I:int) = (r1 I:android.media.AudioTrack) android.media.AudioTrack.getState():int type: VIRTUAL \l0x0007: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|SYNTHETIC\lSplitter:B:3:0x000b\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000b\l|0x000b: IGET  (r1 I:android.media.AudioTrack) = (r5 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack A[Catch:\{ Exception \-\> 0x001e, all \-\> 0x0022 \}, TRY_ENTER]\l0x000d: INVOKE  (r1 I:android.media.AudioTrack) android.media.AudioTrack.release():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x001e, all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IPUT  \l  (r2 I:android.media.AudioTrack)\l  (r5 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.audio.AudioTrack$InitializationException) =  com.google.android.exoplayer2.audio.AudioTrack$InitializationException \l0x0014: IGET  (r2 I:int) = (r5 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.sampleRate int \l0x0016: IGET  (r3 I:int) = (r5 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.channelConfig int \l0x0018: IGET  (r4 I:int) = (r5 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSize int \l0x001a: INVOKE  \l  (r1 I:com.google.android.exoplayer2.audio.AudioTrack$InitializationException)\l  (r0 I:int A[D('state' int)])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.audio.AudioTrack.InitializationException.\<init\>(int, int, int, int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|ExcHandler: Exception null\lSplitter:B:3:0x000b\l|0x001e: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IPUT  \l  (r2 I:android.media.AudioTrack)\l  (r5 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|ExcHandler: all null\lSplitter:B:3:0x000b\l|0x0022: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IPUT  \l  (r2 I:android.media.AudioTrack)\l  (r5 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.AudioTrack.checkAudioTrackInitialized((r5 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0007\-0x0025: r0 'state' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$InitializationException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

