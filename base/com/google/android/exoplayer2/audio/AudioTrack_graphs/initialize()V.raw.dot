digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.initialize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r0 I:android.os.ConditionVariable) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.releasingConditionVariable android.os.ConditionVariable \l0x0004: INVOKE  (r0 I:android.os.ConditionVariable) android.os.ConditionVariable.block():void type: VIRTUAL \l0x0007: IGET  (r0 I:boolean) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.tunneling boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.sampleRate int \l0x000d: IGET  (r1 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.channelConfig int \l0x000f: IGET  (r6 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputEncoding int \l0x0011: IGET  (r8 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSize int \l0x0013: IGET  (r9 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l0x0015: INVOKE  (r0 I:android.media.AudioTrack) = (r0 I:int), (r1 I:int), (r6 I:int), (r8 I:int), (r9 I:int) com.google.android.exoplayer2.audio.AudioTrack.createHwAvSyncAudioTrackV21(int, int, int, int, int):android.media.AudioTrack type: STATIC \l0x0019: IPUT  \l  (r0 I:android.media.AudioTrack)\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.checkAudioTrackInitialized():void type: DIRECT \l0x001e: IGET  (r0 I:android.media.AudioTrack) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x0020: INVOKE  (r7 I:int) = (r0 I:android.media.AudioTrack) android.media.AudioTrack.getAudioSessionId():int type: VIRTUAL \l0x0024: SGET  (r0 I:boolean) =  com.google.android.exoplayer2.audio.AudioTrack.enablePreV21AudioSessionWorkaround boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: SGET  (r0 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x002a: CONST  (r1 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IGET  (r0 I:android.media.AudioTrack) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.keepSessionIdAudioTrack android.media.AudioTrack \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IGET  (r0 I:android.media.AudioTrack) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.keepSessionIdAudioTrack android.media.AudioTrack \l0x0034: INVOKE  (r0 I:int) = (r0 I:android.media.AudioTrack) android.media.AudioTrack.getAudioSessionId():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioSessionId' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003d \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: INVOKE  (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.releaseKeepSessionIdAudioTrack():void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IGET  (r0 I:android.media.AudioTrack) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.keepSessionIdAudioTrack android.media.AudioTrack \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (4000(0xfa0, float:5.605E\-42) ?[int, float, short, byte, char])\l \l0x0043: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0044: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0045: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0046: NEW_INSTANCE  (r0 I:android.media.AudioTrack) =  android.media.AudioTrack \l0x0048: IGET  (r1 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.streamType int \l0x004a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004b: INVOKE  \l  (r0 I:android.media.AudioTrack)\l  (r1 I:int)\l  (r2 I:int A[D('sampleRate' int)])\l  (r3 I:int A[D('channelConfig' int)])\l  (r4 I:int A[D('encoding' int)])\l  (r5 I:int A[D('bufferSize' int)])\l  (r6 I:int)\l  (r7 I:int A[D('audioSessionId' int)])\l android.media.AudioTrack.\<init\>(int, int, int, int, int, int, int):void type: DIRECT \l0x004e: IPUT  \l  (r0 I:android.media.AudioTrack)\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.keepSessionIdAudioTrack android.media.AudioTrack \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: IGET  (r0 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioSessionId' int)])  \-\> B:18:0x005b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: IPUT  \l  (r7 I:int A[D('audioSessionId' int)])\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l0x0056: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$Listener) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.listener com.google.android.exoplayer2.audio.AudioTrack$Listener \l0x0058: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$Listener)\l  (r7 I:int A[D('audioSessionId' int)])\l com.google.android.exoplayer2.audio.AudioTrack.Listener.onAudioSessionId(int):void type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: IGET  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x005d: IGET  (r1 I:android.media.AudioTrack) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x005f: INVOKE  (r6 I:boolean) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.needsPassthroughWorkarounds():boolean type: DIRECT \l0x0063: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l  (r1 I:android.media.AudioTrack)\l  (r6 I:boolean)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.reconfigure(android.media.AudioTrack, boolean):void type: VIRTUAL \l0x0066: INVOKE  (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.setVolumeInternal():void type: DIRECT \l0x0069: IPUT  \l  (r10 I:boolean)\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.hasData boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x006b|0x006b: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: IGET  (r0 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0082 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0070|0x0070: NEW_INSTANCE  (r0 I:android.media.AudioTrack) =  android.media.AudioTrack \l0x0072: IGET  (r1 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.streamType int \l0x0074: IGET  (r2 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.sampleRate int \l0x0076: IGET  (r3 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.channelConfig int \l0x0078: IGET  (r4 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputEncoding int \l0x007a: IGET  (r5 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSize int \l0x007c: INVOKE  \l  (r0 I:android.media.AudioTrack)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l android.media.AudioTrack.\<init\>(int, int, int, int, int, int):void type: DIRECT \l0x007f: IPUT  \l  (r0 I:android.media.AudioTrack)\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
Node_23 [shape=record,label="{23\:\ 0x0082|0x0082: NEW_INSTANCE  (r0 I:android.media.AudioTrack) =  android.media.AudioTrack \l0x0084: IGET  (r1 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.streamType int \l0x0086: IGET  (r2 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.sampleRate int \l0x0088: IGET  (r3 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.channelConfig int \l0x008a: IGET  (r4 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputEncoding int \l0x008c: IGET  (r5 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSize int \l0x008e: IGET  (r7 I:int) = (r11 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioSessionId int \l0x0090: INVOKE  \l  (r0 I:android.media.AudioTrack)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l android.media.AudioTrack.\<init\>(int, int, int, int, int, int, int):void type: DIRECT \l0x0093: IPUT  \l  (r0 I:android.media.AudioTrack)\l  (r11 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.AudioTrack.initialize((r11 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0043\-0x0050: r2 'sampleRate' int\l  0x0044\-0x0050: r3 'channelConfig' int\l  0x0045\-0x0050: r4 'encoding' int\l  0x0046\-0x0050: r5 'bufferSize' int\l  0x0024\-0x006c: r7 'audioSessionId' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$InitializationException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_3;
Node_23 -> Node_3;
}

