digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.resetAudioProcessors()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r3 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: IGET  (r5 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.availableAudioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0007: ARRAY_LENGTH  (r6 I:int) = (r5 I:?[]) \l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x000d: INVOKE  (r7 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.isActive():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  \l  (r3 I:java.util.ArrayList A[D('newAudioProcessors' java.util.ArrayList\<com.google.android.exoplayer2.audio.AudioProcessor\>)])\l  (r0 I:java.lang.Object A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.flush():void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: INVOKE  (r1 I:int) = \l  (r3 I:java.util.ArrayList A[D('newAudioProcessors' java.util.ArrayList\<com.google.android.exoplayer2.audio.AudioProcessor\>)])\l java.util.ArrayList.size():int type: VIRTUAL \l0x0021: NEW_ARRAY  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r1 I:int A[D('count' int), IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0023: INVOKE  (r4 I:java.lang.Object[]) = \l  (r3 I:java.util.ArrayList A[D('newAudioProcessors' java.util.ArrayList\<com.google.android.exoplayer2.audio.AudioProcessor\>)])\l  (r4 I:java.lang.Object[])\l java.util.ArrayList.toArray(java.lang.Object[]):java.lang.Object[] type: VIRTUAL \l0x0027: CHECK_CAST  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (com.google.android.exoplayer2.audio.AudioProcessor[]) (r4 I:?[OBJECT, ARRAY]) \l0x0029: IPUT  \l  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[])\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x002b: NEW_ARRAY  (r4 I:java.nio.ByteBuffer[]) = (r1 I:int A[D('count' int), IMMUTABLE_TYPE]) type: java.nio.ByteBuffer[] \l0x002d: IPUT  \l  (r4 I:java.nio.ByteBuffer[])\l  (r8 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x002f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('count' int)])  \-\> B:10:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioProcessor[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioProcessors com.google.android.exoplayer2.audio.AudioProcessor[] \l0x0034: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0036: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.flush():void type: INTERFACE \l0x0039: IGET  (r4 I:java.nio.ByteBuffer[]) = (r8 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputBuffers java.nio.ByteBuffer[] \l0x003b: INVOKE  (r5 I:java.nio.ByteBuffer) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor A[D('audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor)])\l com.google.android.exoplayer2.audio.AudioProcessor.getOutput():java.nio.ByteBuffer type: INTERFACE \l0x003f: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0041: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.AudioTrack.resetAudioProcessors((r8 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x000d\-0x001d: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x0036\-0x0044: r0 'audioProcessor' com.google.android.exoplayer2.audio.AudioProcessor\l  0x0021\-0x0044: r1 'count' int\l  0x0030\-0x0044: r2 'i' int\l  0x0005\-0x0044: r3 'newAudioProcessors' java.util.ArrayList\<com.google.android.exoplayer2.audio.AudioProcessor\>\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
}

