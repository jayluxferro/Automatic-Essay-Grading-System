digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.configure(Ljava\/lang\/String;IIII[I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (com.google.android.exoplayer2.util.MimeTypes.AUDIO_RAW.equals(r19) != false) goto L_0x004d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|r11 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|PHI: r11 \l  PHI: (r11v1 'passthrough' boolean) = (r11v0 'passthrough' boolean), (r11v2 'passthrough' boolean) binds: [B:16:0x004d, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|if (r11 == false) goto L_0x004f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|int r5 = getEncodingForMimeType(r19)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|PHI: r5 \l  PHI: (r5v1 'encoding' int) = (r5v0 'encoding' int), (r5v8 'encoding' int) binds: [B:17:0x004f, B:4:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r6 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r11 != false) goto L_0x005e\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|r18.pcmFrameSize = com.google.android.exoplayer2.util.Util.getPcmFrameSize(r22, r20)\lr18.channelMappingAudioProcessor.setChannelMap(r24)\lcom.google.android.exoplayer2.audio.AudioProcessor[] r13 = r18.availableAudioProcessors\lint r14 = r13.length\lr12 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|LOOP_START\lPHI: r5 r6 r12 r20 \l  PHI: (r5v5 'encoding' int) = (r5v1 'encoding' int), (r5v6 'encoding' int) binds: [B:7:0x0014, B:15:0x004a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'flush' boolean) = (r6v0 'flush' boolean), (r6v3 'flush' boolean) binds: [B:7:0x0014, B:15:0x004a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v42 int) = (r12v41 int), (r12v44 int) binds: [B:7:0x0014, B:15:0x004a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v2 'channelCount' int) = (r20v0 'channelCount' int), (r20v3 'channelCount' int) binds: [B:7:0x0014, B:15:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x002f\-\>B:15:0x004a\l|if (r12 \>= r14) goto L_0x0059\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|r2 = r13[r12]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\lSplitter:B:10:0x0037\l}"];
Node_11 [shape=record,label="{11\:\ ?|Catch:\{ UnhandledFormatException \-\> 0x0052 \}\lSplitter:B:10:0x0037\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|r6 = r6 \| r2.configure(r21, r20, r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|if (r2.isActive() == false) goto L_0x004a\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|int r20 = r2.getOutputChannelCount()\lint r5 = r2.getOutputEncoding()\l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|LOOP_END\lPHI: r5 r20 \l  PHI: (r5v6 'encoding' int) = (r5v5 'encoding' int), (r5v7 'encoding' int) binds: [B:89:0x004a, B:88:0x004a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v3 'channelCount' int) = (r20v2 'channelCount' int), (r20v4 'channelCount' int) binds: [B:89:0x004a, B:88:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x002f\-\>B:15:0x004a\l|int r12 = r12 + 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|r11 = false\l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|r5 = r22\l}"];
Node_18 [shape=record,label="{18\:\ 0x0052|ExcHandler: UnhandledFormatException (r4v0 'e' com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException A[CUSTOM_DECLARE])\lSplitter:B:10:0x0037\l|com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException r4 = move\-exception\l}"];
Node_19 [shape=record,label="{19\:\ 0x0053}"];
Node_20 [shape=record,label="{20\:\ 0x0058|throw new com.google.android.exoplayer2.audio.AudioTrack.ConfigurationException((java.lang.Throwable) r4)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|if (r6 == false) goto L_0x005e\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|resetAudioProcessors()\l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|PHI: r5 r6 r20 \l  PHI: (r5v2 'encoding' int) = (r5v1 'encoding' int), (r5v5 'encoding' int), (r5v5 'encoding' int) binds: [B:6:0x0012, B:21:0x0059, B:22:0x005b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 'flush' boolean) = (r6v0 'flush' boolean), (r6v2 'flush' boolean), (r6v2 'flush' boolean) binds: [B:6:0x0012, B:21:0x0059, B:22:0x005b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v1 'channelCount' int) = (r20v0 'channelCount' int), (r20v2 'channelCount' int), (r20v2 'channelCount' int) binds: [B:6:0x0012, B:21:0x0059, B:22:0x005b] A[DONT_GENERATE, DONT_INLINE]\l|switch(r20) \{\l    case 1: goto L_0x007c;\l    case 2: goto L_0x00d0;\l    case 3: goto L_0x00d3;\l    case 4: goto L_0x00d6;\l    case 5: goto L_0x00d9;\l    case 6: goto L_0x00dc;\l    case 7: goto L_0x00df;\l    case 8: goto L_0x00e2;\l    default: goto L_0x0061;\l\}\l}"];
Node_24 [shape=record,label="{24\:\ 0x0061}"];
Node_25 [shape=record,label="{25\:\ 0x007b|throw new com.google.android.exoplayer2.audio.AudioTrack.ConfigurationException(new java.lang.StringBuilder().append(\"Unsupported channel count: \").append(r20).toString())\l}"];
Node_26 [shape=record,label="{26\:\ 0x007c|r3 = 4\l}"];
Node_27 [shape=record,label="{27\:\ 0x007d|PHI: r3 \l  PHI: (r3v7 'channelConfig' int) = (r3v0 'channelConfig' int), (r3v1 'channelConfig' int), (r3v2 'channelConfig' int), (r3v3 'channelConfig' int), (r3v4 'channelConfig' int), (r3v5 'channelConfig' int), (r3v6 'channelConfig' int), (r3v13 'channelConfig' int) binds: [B:57:0x00e2, B:56:0x00df, B:55:0x00dc, B:54:0x00d9, B:53:0x00d6, B:52:0x00d3, B:51:0x00d0, B:26:0x007c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0081|if (com.google.android.exoplayer2.util.Util.SDK_INT \> 23) goto L_0x009a\l}"];
Node_29 [shape=record,label="{29\:\ 0x0083}"];
Node_30 [shape=record,label="{30\:\ 0x008b|if (\"foster\".equals(com.google.android.exoplayer2.util.Util.DEVICE) == false) goto L_0x009a\l}"];
Node_31 [shape=record,label="{31\:\ 0x008d}"];
Node_32 [shape=record,label="{32\:\ 0x0095|if (\"NVIDIA\".equals(com.google.android.exoplayer2.util.Util.MANUFACTURER) == false) goto L_0x009a\l}"];
Node_33 [shape=record,label="{33\:\ 0x0097|switch(r20) \{\l    case 3: goto L_0x00e8;\l    case 4: goto L_0x009a;\l    case 5: goto L_0x00e8;\l    case 6: goto L_0x009a;\l    case 7: goto L_0x00e5;\l    default: goto L_0x009a;\l\}\l}"];
Node_34 [shape=record,label="{34\:\ 0x009a|PHI: r3 \l  PHI: (r3v8 'channelConfig' int) = (r3v7 'channelConfig' int), (r3v7 'channelConfig' int), (r3v7 'channelConfig' int), (r3v7 'channelConfig' int), (r3v11 'channelConfig' int), (r3v12 'channelConfig' int) binds: [B:28:0x0081, B:30:0x008b, B:32:0x0095, B:33:0x0097, B:59:0x00e8, B:58:0x00e5] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x009e|if (com.google.android.exoplayer2.util.Util.SDK_INT \> 25) goto L_0x00b3\l}"];
Node_36 [shape=record,label="{36\:\ 0x00a0}"];
Node_37 [shape=record,label="{37\:\ 0x00a8|if (\"fugu\".equals(com.google.android.exoplayer2.util.Util.DEVICE) == false) goto L_0x00b3\l}"];
Node_38 [shape=record,label="{38\:\ 0x00aa|if (r11 == false) goto L_0x00b3\l}"];
Node_39 [shape=record,label="{39\:\ 0x00ac}"];
Node_40 [shape=record,label="{40\:\ 0x00af|if (r20 != 1) goto L_0x00b3\l}"];
Node_41 [shape=record,label="{41\:\ 0x00b1|r3 = 12\l}"];
Node_42 [shape=record,label="{42\:\ 0x00b3|PHI: r3 \l  PHI: (r3v9 'channelConfig' int) = (r3v8 'channelConfig' int), (r3v8 'channelConfig' int), (r3v8 'channelConfig' int), (r3v8 'channelConfig' int), (r3v10 'channelConfig' int) binds: [B:35:0x009e, B:37:0x00a8, B:38:0x00aa, B:40:0x00af, B:41:0x00b1] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != false) goto L_0x00eb\l}"];
Node_43 [shape=record,label="{43\:\ 0x00b5}"];
Node_44 [shape=record,label="{44\:\ 0x00b9|if (isInitialized() == false) goto L_0x00eb\l}"];
Node_45 [shape=record,label="{45\:\ 0x00bb}"];
Node_46 [shape=record,label="{46\:\ 0x00bf|if (r18.encoding != r5) goto L_0x00eb\l}"];
Node_47 [shape=record,label="{47\:\ 0x00c1}"];
Node_48 [shape=record,label="{48\:\ 0x00c7|if (r18.sampleRate != r21) goto L_0x00eb\l}"];
Node_49 [shape=record,label="{49\:\ 0x00c9}"];
Node_50 [shape=record,label="{50\:\ 0x00cd|if (r18.channelConfig != r3) goto L_0x00eb\l}"];
Node_51 [shape=record,label="{51\:\ 0x00d0|r3 = 12\l}"];
Node_52 [shape=record,label="{52\:\ 0x00d3|r3 = 28\l}"];
Node_53 [shape=record,label="{53\:\ 0x00d6|r3 = 204\l}"];
Node_54 [shape=record,label="{54\:\ 0x00d9|r3 = 220\l}"];
Node_55 [shape=record,label="{55\:\ 0x00dc|r3 = 252\l}"];
Node_56 [shape=record,label="{56\:\ 0x00df|r3 = 1276\l}"];
Node_57 [shape=record,label="{57\:\ 0x00e2|int r3 = com.google.android.exoplayer2.C1260C.CHANNEL_OUT_7POINT1_SURROUND\l}"];
Node_58 [shape=record,label="{58\:\ 0x00e5|int r3 = com.google.android.exoplayer2.C1260C.CHANNEL_OUT_7POINT1_SURROUND\l}"];
Node_59 [shape=record,label="{59\:\ 0x00e8|r3 = 252\l}"];
Node_60 [shape=record,label="{60\:\ 0x00eb|reset()\lr18.encoding = r5\lr18.passthrough = r11\lr18.sampleRate = r21\lr18.channelConfig = r3\l}"];
Node_61 [shape=record,label="{61\:\ 0x0100|if (r11 == false) goto L_0x012e\l}"];
Node_62 [shape=record,label="{62\:\ 0x0102|PHI: r5 \l  PHI: (r5v4 'encoding' int) = (r5v2 'encoding' int), (r5v3 'encoding' int) binds: [B:61:0x0100, B:68:0x012e] A[DONT_GENERATE, DONT_INLINE]\l|r18.outputEncoding = r5\lr18.outputPcmFrameSize = com.google.android.exoplayer2.util.Util.getPcmFrameSize(2, r20)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0111|if (r23 == 0) goto L_0x0130\l}"];
Node_64 [shape=record,label="{64\:\ 0x0113|r18.bufferSize = r23\l}"];
Node_65 [shape=record,label="{65\:\ 0x0119|if (r11 == false) goto L_0x019d\l}"];
Node_66 [shape=record,label="{66\:\ 0x011b|r12 = com.google.android.exoplayer2.C1260C.TIME_UNSET\l}"];
Node_67 [shape=record,label="{67\:\ 0x0120|PHI: r12 \l  PHI: (r12v24 long) = (r12v23 long), (r12v26 long) binds: [B:86:0x019d, B:66:0x011b] A[DONT_GENERATE, DONT_INLINE]\l|r18.bufferSizeUs = r12\lcom.google.android.exoplayer2.PlaybackParameters r12 = r18.playbackParameters\lsetPlaybackParameters(r12)\l}"];
Node_68 [shape=record,label="{68\:\ 0x012e|r5 = 2\l}"];
Node_69 [shape=record,label="{69\:\ 0x0130|if (r11 == false) goto L_0x014f\l}"];
Node_70 [shape=record,label="{70\:\ 0x0132}"];
Node_71 [shape=record,label="{71\:\ 0x0137|if (r18.outputEncoding == 5) goto L_0x0140\l}"];
Node_72 [shape=record,label="{72\:\ 0x0139}"];
Node_73 [shape=record,label="{73\:\ 0x013e|if (r18.outputEncoding != 6) goto L_0x0147\l}"];
Node_74 [shape=record,label="{74\:\ 0x0140|r18.bufferSize = com.google.android.exoplayer2.upstream.cache.CacheDataSink.DEFAULT_BUFFER_SIZE\l}"];
Node_75 [shape=record,label="{75\:\ 0x0147|r18.bufferSize = 49152\l}"];
Node_76 [shape=record,label="{76\:\ 0x014f|int r12 = r18.outputEncoding\lint r9 = android.media.AudioTrack.getMinBufferSize(r21, r3, r12)\l}"];
Node_77 [shape=record,label="{77\:\ 0x015a|if (r9 == \-2) goto L_0x0195\l}"];
Node_78 [shape=record,label="{78\:\ 0x015c|r12 = true\l}"];
Node_79 [shape=record,label="{79\:\ 0x015d|PHI: r12 \l  PHI: (r12v9 boolean) = (r12v8 boolean), (r12v15 boolean) binds: [B:82:0x0195, B:78:0x015c] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r12)\lint r10 = r9 * 4\lint r8 = ((int) durationUsToFrames(250000)) * r18.outputPcmFrameSize\lint r7 = (int) java.lang.Math.max((long) r9, durationUsToFrames(MAX_BUFFER_DURATION_US) * ((long) r18.outputPcmFrameSize))\l}"];
Node_80 [shape=record,label="{80\:\ 0x018e|if (r10 \>= r8) goto L_0x0197\l}"];
Node_81 [shape=record,label="{81\:\ 0x0190|PHI: r8 \l  PHI: (r8v3 'minAppBufferSize' int) = (r8v0 'minAppBufferSize' int), (r8v1 'minAppBufferSize' int), (r8v2 'minAppBufferSize' int) binds: [B:80:0x018e, B:85:0x019b, B:84:0x0199] A[DONT_GENERATE, DONT_INLINE]\l|r18.bufferSize = r8\l}"];
Node_82 [shape=record,label="{82\:\ 0x0195|r12 = false\l}"];
Node_83 [shape=record,label="{83\:\ 0x0197|if (r10 \<= r7) goto L_0x019b\l}"];
Node_84 [shape=record,label="{84\:\ 0x0199|r8 = r7\l}"];
Node_85 [shape=record,label="{85\:\ 0x019b|r8 = r10\l}"];
Node_86 [shape=record,label="{86\:\ 0x019d|r0 = r18\llong r12 = framesToDurationUs((long) (r18.bufferSize \/ r18.outputPcmFrameSize))\l}"];
Node_87 [shape=record,label="{87\:\ 0x0059|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x004a|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x004a|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_91 [shape=record,label="{91\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.AudioTrack.configure((r18v0 'this' com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]), (r19v0 'mimeType' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'channelCount' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 'sampleRate' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 'pcmEncoding' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'specifiedBufferSize' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'outputChannels' int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$ConfigurationException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_87;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_89;
Node_14 -> Node_88;
Node_15 -> Node_8;
Node_16 -> Node_3;
Node_17 -> Node_5;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_26;
Node_23 -> Node_51;
Node_23 -> Node_52;
Node_23 -> Node_53;
Node_23 -> Node_54;
Node_23 -> Node_55;
Node_23 -> Node_56;
Node_23 -> Node_57;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_33 -> Node_58;
Node_33 -> Node_59;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_42;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_42;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_60;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_60;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_60;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_60;
Node_49 -> Node_50;
Node_50 -> Node_60;
Node_50 -> Node_90[style=dashed];
Node_51 -> Node_27;
Node_52 -> Node_27;
Node_53 -> Node_27;
Node_54 -> Node_27;
Node_55 -> Node_27;
Node_56 -> Node_27;
Node_57 -> Node_27;
Node_58 -> Node_34;
Node_59 -> Node_34;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_68;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_69;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_86;
Node_66 -> Node_67;
Node_67 -> Node_91;
Node_68 -> Node_62;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_76;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_74;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_65;
Node_75 -> Node_65;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_82;
Node_78 -> Node_79;
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_83;
Node_81 -> Node_65;
Node_82 -> Node_79;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_85;
Node_84 -> Node_81;
Node_85 -> Node_81;
Node_86 -> Node_67;
Node_87 -> Node_21;
Node_88 -> Node_15;
Node_89 -> Node_15;
}

