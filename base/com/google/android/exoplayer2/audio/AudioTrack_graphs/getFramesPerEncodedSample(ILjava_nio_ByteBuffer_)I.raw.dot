digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.getFramesPerEncodedSample(ILjava\/nio\/ByteBuffer;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = \l  (r4 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l com.google.android.exoplayer2.audio.DtsUtil.parseDtsAudioSampleCount(java.nio.ByteBuffer):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INVOKE  (r0 I:int) =  com.google.android.exoplayer2.audio.Ac3Util.getAc3SyncframeAudioSampleCount():int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: INVOKE  (r0 I:int) = \l  (r4 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l com.google.android.exoplayer2.audio.Ac3Util.parseEAc3SyncframeAudioSampleCount(java.nio.ByteBuffer):int type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0020: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0023: CONST_STR  (r2 I:java.lang.String) =  \"Unexpected audio encoding: \" \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder) = \l  (r1 I:java.lang.StringBuilder)\l  (r3 I:int A[D('encoding' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.audio.AudioTrack.getFramesPerEncodedSample((r3 I:int A[D('encoding' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0034: r3 'encoding' int\l  ?\-0x0034: r4 'buffer' java.nio.ByteBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_5;
Node_12 -> Node_13;
}

