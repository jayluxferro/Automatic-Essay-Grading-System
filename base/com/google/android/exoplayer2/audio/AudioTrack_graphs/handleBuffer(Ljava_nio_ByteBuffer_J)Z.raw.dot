digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.handleBuffer(Ljava\/nio\/ByteBuffer;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('buffer' java.nio.ByteBuffer)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r4 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0012: INVOKE  (r4 I:boolean) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.isInitialized():boolean type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.initialize():void type: DIRECT \l0x001b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x001d: IGET  (r4 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playing boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.play():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: INVOKE  (r4 I:boolean) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.needsPassthroughWorkarounds():boolean type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x002c: IGET  (r4 I:android.media.AudioTrack) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x002e: INVOKE  (r4 I:int) = (r4 I:android.media.AudioTrack) android.media.AudioTrack.getPlayState():int type: VIRTUAL \l0x0032: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0038: IPUT  \l  (r4 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.hasData boolean \l0x003a: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: RETURN  (r4 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0040: IGET  (r4 I:android.media.AudioTrack) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x0042: INVOKE  (r4 I:int) = (r4 I:android.media.AudioTrack) android.media.AudioTrack.getPlayState():int type: VIRTUAL \l0x0046: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004b: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrackUtil com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil \l0x004d: INVOKE  (r4 I:long) = \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPlaybackHeadPosition():long type: VIRTUAL \l0x0051: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0053: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|0x0055: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0059 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005b: IGET  (r0 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.hasData boolean \l0x005d: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005f: INVOKE  (r4 I:boolean) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.hasPendingData():boolean type: VIRTUAL \l0x0063: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0065: IPUT  \l  (r4 I:boolean)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.hasData boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x0067|0x0067: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hadData' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0097 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0069|0x0069: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x006b: IGET  (r4 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.hasData boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x006d|0x006d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0097 \l}"];
Node_26 [shape=record,label="{26\:\ 0x006f|0x006f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0071: IGET  (r4 I:android.media.AudioTrack) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.audioTrack android.media.AudioTrack \l0x0073: INVOKE  (r4 I:int) = (r4 I:android.media.AudioTrack) android.media.AudioTrack.getPlayState():int type: VIRTUAL \l0x0077: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0078|0x0078: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0097 \l}"];
Node_28 [shape=record,label="{28\:\ 0x007a|0x007a: INVOKE  (r4 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC \l0x007e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0080: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.lastFeedElapsedRealtimeMs long \l0x0082: ARITH  (r8 I:long) = (r4 I:long) \- (r6 I:long) \l0x0084: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0086: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$Listener) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.listener com.google.android.exoplayer2.audio.AudioTrack$Listener \l0x0088: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008a: IGET  (r5 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSize int \l0x008c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008e: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.bufferSizeUs long \l0x0090: INVOKE  (r6 I:long) = (r6 I:long) com.google.android.exoplayer2.C.usToMs(long):long type: STATIC \l0x0094: INVOKE  \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$Listener)\l  (r5 I:int)\l  (r6 I:long)\l  (r8 I:long A[D('elapsedSinceLastFeedMs' long)])\l com.google.android.exoplayer2.audio.AudioTrack.Listener.onUnderrun(int, long, long):void type: INTERFACE \l}"];
Node_29 [shape=record,label="{29\:\ 0x0097|0x0097: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0099: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l}"];
Node_30 [shape=record,label="{30\:\ 0x009b|0x009b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x012b \l}"];
Node_31 [shape=record,label="{31\:\ 0x009d|0x009d: INVOKE  (r4 I:boolean) = \l  (r21 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a1|0x00a1: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00a5 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a3|0x00a3: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a5|0x00a5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a7: IGET  (r4 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.passthrough boolean \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a9|0x00a9: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00bf \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ab|0x00ab: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ad: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.framesPerEncodedSample int \l}"];
Node_37 [shape=record,label="{37\:\ 0x00af|0x00af: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00bf \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b1|0x00b1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00b3: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.outputEncoding int \l0x00b5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('buffer' java.nio.ByteBuffer)]) \l0x00b7: INVOKE  (r4 I:int) = (r4 I:int), (r0 I:java.nio.ByteBuffer) com.google.android.exoplayer2.audio.AudioTrack.getFramesPerEncodedSample(int, java.nio.ByteBuffer):int type: STATIC \l0x00bb: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00bd: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.framesPerEncodedSample int \l}"];
Node_39 [shape=record,label="{39\:\ 0x00bf|0x00bf: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00c1: IGET  (r4 I:com.google.android.exoplayer2.PlaybackParameters) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c3|0x00c3: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00fa \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c5|0x00c5: INVOKE  (r4 I:boolean) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainAudioProcessorsToEndOfStream():boolean type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x00c9|0x00c9: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00ce \l}"];
Node_43 [shape=record,label="{43\:\ 0x00cb|0x00cb: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ce|0x00ce: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d0: IGET  (r4 I:java.util.LinkedList\<com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint\>) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.playbackParametersCheckpoints java.util.LinkedList \l0x00d2: NEW_INSTANCE  (r10 I:com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint) =  com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint \l0x00d4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d6: IGET  (r11 I:com.google.android.exoplayer2.PlaybackParameters) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l0x00d8: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x00da: MOVE  (r0 I:?[long, double]) = (r22 I:?[long, double] A[D('presentationTimeUs' long)]) \l0x00dc: INVOKE  (r12 I:long) = (r6 I:long), (r0 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x00e0: INVOKE  (r6 I:long) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.getWrittenFrames():long type: DIRECT \l0x00e4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00e6: INVOKE  (r14 I:long) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r6 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.framesToDurationUs(long):long type: DIRECT \l0x00ea: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ec: INVOKE  \l  (r10 I:com.google.android.exoplayer2.audio.AudioTrack$PlaybackParametersCheckpoint)\l  (r11 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r12 I:long)\l  (r14 I:long)\l  (r16 I:com.google.android.exoplayer2.audio.AudioTrack$1)\l com.google.android.exoplayer2.audio.AudioTrack.PlaybackParametersCheckpoint.\<init\>(com.google.android.exoplayer2.PlaybackParameters, long, long, com.google.android.exoplayer2.audio.AudioTrack$1):void type: DIRECT \l0x00ef: INVOKE  (r4 I:java.util.LinkedList), (r10 I:java.lang.Object) java.util.LinkedList.add(java.lang.Object):boolean type: VIRTUAL \l0x00f2: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00f5: IPUT  \l  (r4 I:com.google.android.exoplayer2.PlaybackParameters)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.drainingPlaybackParameters com.google.android.exoplayer2.PlaybackParameters \l0x00f7: INVOKE  (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.resetAudioProcessors():void type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x00fa|0x00fa: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00fc: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l}"];
Node_46 [shape=record,label="{46\:\ 0x00fe|0x00fe: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x014e \l}"];
Node_47 [shape=record,label="{47\:\ 0x0100|0x0100: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0102: MOVE  (r0 I:?[long, double]) = (r22 I:?[long, double] A[D('presentationTimeUs' long)]) \l0x0104: INVOKE  (r4 I:long) = (r4 I:long), (r0 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x0108: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x010a: IPUT  \l  (r4 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeUs long \l0x010c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x010d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x010f: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l}"];
Node_48 [shape=record,label="{48\:\ 0x0111|0x0111: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0113: IGET  (r4 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.passthrough boolean \l}"];
Node_49 [shape=record,label="{49\:\ 0x0115|0x0115: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x01c3 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0117|0x0117: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0119: IGET  (r4 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.submittedEncodedFrames long \l0x011b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x011d: IGET  (r6 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.framesPerEncodedSample int \l0x011f: CAST  (r6 I:long) = (long) (r6 I:int) \l0x0120: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0121: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0123: IPUT  \l  (r4 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.submittedEncodedFrames long \l}"];
Node_51 [shape=record,label="{51\:\ 0x0125|0x0125: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('buffer' java.nio.ByteBuffer)]) \l0x0127: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0129: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r1 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l}"];
Node_52 [shape=record,label="{52\:\ 0x012b|0x012b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x012d: IGET  (r4 I:boolean) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.passthrough boolean \l}"];
Node_53 [shape=record,label="{53\:\ 0x012f|0x012f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x01d3 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0131|0x0131: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0133: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l0x0135: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0137: MOVE  (r1 I:?[long, double]) = (r22 I:?[long, double] A[D('presentationTimeUs' long)]) \l0x0139: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r4 I:java.nio.ByteBuffer)\l  (r1 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.writeBuffer(java.nio.ByteBuffer, long):boolean type: DIRECT \l}"];
Node_55 [shape=record,label="{55\:\ 0x013c|0x013c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x013e: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l0x0140: INVOKE  (r4 I:boolean) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_56 [shape=record,label="{56\:\ 0x0144|0x0144: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x01dc \l}"];
Node_57 [shape=record,label="{57\:\ 0x0146|0x0146: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0147: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0149: IPUT  \l  (r4 I:java.nio.ByteBuffer)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.inputBuffer java.nio.ByteBuffer \l0x014b: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x014e|0x014e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0150: IGET  (r4 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeUs long \l0x0152: INVOKE  (r6 I:long) = (r20 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.getSubmittedFrames():long type: DIRECT \l0x0156: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0158: INVOKE  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r6 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.framesToDurationUs(long):long type: DIRECT \l0x015c: ARITH  (r18 I:long) = (r4 I:long) + (r6 I:long) \l0x015e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0160: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l0x0162: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x0163|0x0163: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x01a3 \l}"];
Node_60 [shape=record,label="{60\:\ 0x0165|0x0165: ARITH  (r4 I:long) = (r18 I:long A[D('expectedPresentationTimeUs' long)]) \- (r22 I:long A[D('presentationTimeUs' long)]) \l0x0167: INVOKE  (r4 I:long) = (r4 I:long) java.lang.Math.abs(long):long type: STATIC \l0x016b: CONST  (r6 I:?[long, double]) = (200000(0x30d40, double:9.8813E\-319) ?[long, double]) \l0x016e: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0170|0x0170: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:63:0x01a3 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0172|0x0172: CONST_STR  (r4 I:java.lang.String) =  \"AudioTrack\" \l0x0174: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0176: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0179: CONST_STR  (r6 I:java.lang.String) =  \"Discontinuity detected [expected \" \l0x017b: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x017f: MOVE  (r0 I:?[long, double]) = \l  (r18 I:?[long, double] A[D('expectedPresentationTimeUs' long)])\l \l0x0181: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0185: CONST_STR  (r6 I:java.lang.String) =  \", got \" \l0x0187: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x018b: MOVE  (r0 I:?[long, double]) = (r22 I:?[long, double] A[D('presentationTimeUs' long)]) \l0x018d: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r0 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0191: CONST_STR  (r6 I:java.lang.String) =  \"]\" \l0x0193: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0197: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x019b: INVOKE  (r4 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x019e: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x019f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01a1: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l}"];
Node_63 [shape=record,label="{63\:\ 0x01a3|0x01a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01a5: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l0x01a7: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x01a8|0x01a8: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0111 \l}"];
Node_65 [shape=record,label="{65\:\ 0x01aa|0x01aa: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01ac: IGET  (r4 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeUs long \l0x01ae: ARITH  (r6 I:long) = (r22 I:long A[D('presentationTimeUs' long)]) \- (r18 I:long A[D('expectedPresentationTimeUs' long)]) \l0x01b0: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x01b1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01b3: IPUT  \l  (r4 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeUs long \l0x01b5: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x01b6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01b8: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.startMediaTimeState int \l0x01ba: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01bc: IGET  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$Listener) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.listener com.google.android.exoplayer2.audio.AudioTrack$Listener \l0x01be: INVOKE  \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$Listener)\l com.google.android.exoplayer2.audio.AudioTrack.Listener.onPositionDiscontinuity():void type: INTERFACE \l}"];
Node_66 [shape=record,label="{66\:\ 0x01c3|0x01c3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01c5: IGET  (r4 I:long) = (r0 I:com.google.android.exoplayer2.audio.AudioTrack) com.google.android.exoplayer2.audio.AudioTrack.submittedPcmBytes long \l0x01c7: INVOKE  (r6 I:int) = \l  (r21 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.remaining():int type: VIRTUAL \l0x01cb: CAST  (r6 I:long) = (long) (r6 I:int) \l0x01cc: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x01cd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01cf: IPUT  \l  (r4 I:long)\l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l com.google.android.exoplayer2.audio.AudioTrack.submittedPcmBytes long \l}"];
Node_67 [shape=record,label="{67\:\ 0x01d3|0x01d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01d5: MOVE  (r1 I:?[long, double]) = (r22 I:?[long, double] A[D('presentationTimeUs' long)]) \l0x01d7: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioTrack)\l  (r1 I:long)\l com.google.android.exoplayer2.audio.AudioTrack.processBuffers(long):void type: DIRECT \l}"];
Node_68 [shape=record,label="{68\:\ 0x01dc|0x01dc: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.audio.AudioTrack.handleBuffer((r20 'this' I:com.google.android.exoplayer2.audio.AudioTrack A[IMMUTABLE_TYPE, THIS]), (r21 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:long A[D('presentationTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0084\-0x0097: r8 'elapsedSinceLastFeedMs' long\l  0x015e\-0x01c3: r18 'expectedPresentationTimeUs' long\l  0x005f\-0x01de: r17 'hadData' boolean\l  ?\-0x01de: r21 'buffer' java.nio.ByteBuffer\l  ?\-0x01de: r22 'presentationTimeUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioTrack$InitializationException, com.google.android.exoplayer2.audio.AudioTrack$WriteException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_16 -> Node_5;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_52;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_15;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_45;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_15;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_58;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_66;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_67;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_68;
Node_57 -> Node_15;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_63;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_48;
Node_64 -> Node_65[style=dashed];
Node_65 -> Node_48;
Node_66 -> Node_51;
Node_67 -> Node_55;
Node_68 -> Node_15;
}

