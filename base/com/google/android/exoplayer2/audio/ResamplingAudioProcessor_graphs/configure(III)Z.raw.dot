digraph "CFG forcom.google.android.exoplayer2.audio.ResamplingAudioProcessor.configure(III)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException) =  com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException \l0x0010: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException)\l  (r3 I:int A[D('sampleRateHz' int)])\l  (r4 I:int A[D('channelCount' int)])\l  (r5 I:int A[D('encoding' int)])\l com.google.android.exoplayer2.audio.AudioProcessor.UnhandledFormatException.\<init\>(int, int, int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.sampleRateHz int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRateHz' int)])  \-\> B:17:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.channelCount int \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('channelCount' int)])  \-\> B:17:0x0022 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.encoding int \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)])  \-\> B:17:0x0022 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|0x0022: IPUT  \l  (r3 I:int A[D('sampleRateHz' int)])\l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.sampleRateHz int \l0x0024: IPUT  \l  (r4 I:int A[D('channelCount' int)])\l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.channelCount int \l0x0026: IPUT  \l  (r5 I:int A[D('encoding' int)])\l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.encoding int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002e \l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|0x002a: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.ResamplingAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x002c: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|0x002e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.audio.ResamplingAudioProcessor.configure((r2 'this' I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('sampleRateHz' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('channelCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('encoding' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002f: r3 'sampleRateHz' int\l  ?\-0x002f: r4 'channelCount' int\l  ?\-0x002f: r5 'encoding' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_16;
}

